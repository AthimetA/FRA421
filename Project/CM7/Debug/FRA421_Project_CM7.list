
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001100c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a3c  080112ac  080112ac  000212ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ce8  08012ce8  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012ce8  08012ce8  00022ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cf0  08012cf0  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cf0  08012cf0  00022cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cf4  08012cf4  00022cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012cf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08012d80  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  08012de0  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08012e40  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08012e40  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   000264a2  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  0005a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a08  00000000  00000000  0005bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023bbe  00000000  00000000  0009b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937e7  00000000  00000000  000beca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00252490  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076e4  00000000  00000000  002524e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011294 	.word	0x08011294

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08011294 	.word	0x08011294

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}
	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	e00d      	b.n	80016d4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffad 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	3301      	adds	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ee      	bls.n	80016b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3308      	adds	r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001714:	6979      	ldr	r1, [r7, #20]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff83 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3310      	adds	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d9ee      	bls.n	800170c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	e00d      	b.n	8001750 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff ff6f 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9ee      	bls.n	8001734 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001776:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3368      	adds	r3, #104	; 0x68
 800177c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3368      	adds	r3, #104	; 0x68
 8001782:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
 8001788:	e010      	b.n	80017ac <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d104      	bne.n	80017a0 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	77bb      	strb	r3, [r7, #30]
			break;
 800179e:	e008      	b.n	80017b2 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	d9eb      	bls.n	800178a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d134      	bne.n	8001828 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <YUGIOH_Reborn+0xd0>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3308      	adds	r3, #8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69b8      	ldr	r0, [r7, #24]
 80017e4:	f7fe ff4e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	3301      	adds	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3368      	adds	r3, #104	; 0x68
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00c      	b.n	8001822 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f7fe ff3a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3310      	adds	r3, #16
 8001814:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b13      	cmp	r3, #19
 8001826:	ddef      	ble.n	8001808 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	aaaaaaab 	.word	0xaaaaaaab

08001834 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001842:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800184a:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	799a      	ldrb	r2, [r3, #6]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <YUGIOH_Ancient_Rules+0x54>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0899      	lsrs	r1, r3, #2
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3308      	adds	r3, #8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe ff03 	bl	8000684 <YUGIOH_card_copy>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab

0800188c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	e00c      	b.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3310      	adds	r3, #16
 80018ca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ef      	bls.n	80018b8 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e00c      	b.n	80018f8 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3310      	adds	r3, #16
 80018f0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	3301      	adds	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d9ef      	bls.n	80018de <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	889a      	ldrh	r2, [r3, #4]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	0089      	lsls	r1, r1, #2
 800190a:	440b      	add	r3, r1
 800190c:	4619      	mov	r1, r3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	809a      	strh	r2, [r3, #4]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800193c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001944:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	799a      	ldrb	r2, [r3, #6]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <YUGIOH_Stop_Defense+0x68>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	0899      	lsrs	r1, r3, #2
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <YUGIOH_Stop_Defense+0x5a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
	}

}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab

08001998 <YUGIOH_Clear_Card_In_Main_To_GY>:

void YUGIOH_Clear_Card_In_Main_To_GY(Player *player,YUGIOH_Card *card)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck = &player->cardOnBoard[0];;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
	uint8_t idx = 255;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i < 6; ++i)
 80019ac:	2300      	movs	r3, #0
 80019ae:	72bb      	strb	r3, [r7, #10]
 80019b0:	e00e      	b.n	80019d0 <YUGIOH_Clear_Card_In_Main_To_GY+0x38>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d102      	bne.n	80019c4 <YUGIOH_Clear_Card_In_Main_To_GY+0x2c>
		{
			idx = i;
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	72fb      	strb	r3, [r7, #11]
			break;
 80019c2:	e008      	b.n	80019d6 <YUGIOH_Clear_Card_In_Main_To_GY+0x3e>
		}
		ptrCardCheck++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3310      	adds	r3, #16
 80019c8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 6; ++i)
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	3301      	adds	r3, #1
 80019ce:	72bb      	strb	r3, [r7, #10]
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d9ed      	bls.n	80019b2 <YUGIOH_Clear_Card_In_Main_To_GY+0x1a>
	}

	if (idx != 255) {
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d009      	beq.n	80019f0 <YUGIOH_Clear_Card_In_Main_To_GY+0x58>

		ptrCardCheck = &player->cardOnBoard[idx];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	3308      	adds	r3, #8
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
		YUGIOH_To_GY(player, ptrCardCheck);
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe19 	bl	8001622 <YUGIOH_To_GY>
	}

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e016      	b.n	8001a3c <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10a      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7a5b      	ldrb	r3, [r3, #9]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d102      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e009      	b.n	8001a44 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3310      	adds	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	dde5      	ble.n	8001a0e <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8001a42:	23ff      	movs	r3, #255	; 0xff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e016      	b.n	8001a94 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10a      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e009      	b.n	8001a9c <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	dde5      	ble.n	8001a66 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8001a9a:	23ff      	movs	r3, #255	; 0xff
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00c      	b.n	8001ad6 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3310      	adds	r3, #16
 8001ace:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	ddef      	ble.n	8001abc <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001af8:	2303      	movs	r3, #3
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e00c      	b.n	8001b18 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	ddef      	ble.n	8001afe <YUGIOH_Monster_Activated+0x14>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MainGUI>:
void MainGUI()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <MainGUI+0x15c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	9202      	str	r2, [sp, #8]
 8001b38:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <MainGUI+0x160>)
 8001b46:	2105      	movs	r1, #5
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f005 fad2 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <MainGUI+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <MainGUI+0x164>)
 8001b62:	2114      	movs	r1, #20
 8001b64:	2005      	movs	r0, #5
 8001b66:	f005 fac4 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <MainGUI+0x15c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9202      	str	r2, [sp, #8]
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9200      	str	r2, [sp, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <MainGUI+0x168>)
 8001b7e:	2123      	movs	r1, #35	; 0x23
 8001b80:	2005      	movs	r0, #5
 8001b82:	f005 fab6 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <MainGUI+0x15c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <MainGUI+0x16c>)
 8001b9a:	2123      	movs	r1, #35	; 0x23
 8001b9c:	203c      	movs	r0, #60	; 0x3c
 8001b9e:	f005 fa5e 	bl	800705e <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MainGUI+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <MainGUI+0x170>)
 8001bb6:	2132      	movs	r1, #50	; 0x32
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f005 fa9a 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MainGUI+0x15c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <MainGUI+0x174>)
 8001bd2:	213c      	movs	r1, #60	; 0x3c
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f005 fa8c 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MainGUI+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MainGUI+0x178>)
 8001bee:	2105      	movs	r1, #5
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f005 fa34 	bl	800705e <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MainGUI+0x15c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	9202      	str	r2, [sp, #8]
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MainGUI+0x164>)
 8001c0a:	2114      	movs	r1, #20
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f005 fa26 	bl	800705e <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MainGUI+0x15c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MainGUI+0x17c>)
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f005 fa18 	bl	800705e <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MainGUI+0x15c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MainGUI+0x16c>)
 8001c42:	2123      	movs	r1, #35	; 0x23
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f005 fa54 	bl	80070f2 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MainGUI+0x15c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <MainGUI+0x170>)
 8001c5e:	2132      	movs	r1, #50	; 0x32
 8001c60:	2000      	movs	r0, #0
 8001c62:	f005 f9fc 	bl	800705e <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MainGUI+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <MainGUI+0x174>)
 8001c7a:	213c      	movs	r1, #60	; 0x3c
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f005 f9ee 	bl	800705e <ST7735_WriteString>
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	080112ac 	.word	0x080112ac
 8001c90:	080112b8 	.word	0x080112b8
 8001c94:	080112c8 	.word	0x080112c8
 8001c98:	080112d0 	.word	0x080112d0
 8001c9c:	080112d8 	.word	0x080112d8
 8001ca0:	080112ec 	.word	0x080112ec
 8001ca4:	08011300 	.word	0x08011300
 8001ca8:	0801130c 	.word	0x0801130c

08001cac <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <LCDvalue+0x134>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <LCDvalue+0x138>)
 8001cc0:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <LCDvalue+0x13c>)
 8001cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <LCDvalue+0x140>)
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f7fe fb57 	bl	8000380 <__aeabi_uldivmod>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	817b      	strh	r3, [r7, #10]
	time -= a;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <LCDvalue+0x138>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <LCDvalue+0x138>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <LCDvalue+0x138>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4940      	ldr	r1, [pc, #256]	; (8001df0 <LCDvalue+0x144>)
 8001cf0:	4840      	ldr	r0, [pc, #256]	; (8001df4 <LCDvalue+0x148>)
 8001cf2:	f00e ff51 	bl	8010b98 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e012      	b.n	8001d22 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8001cfc:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <LCDvalue+0x148>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <LCDvalue+0x70>
			t_c[i] = 32;
 8001d08:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <LCDvalue+0x148>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2220      	movs	r2, #32
 8001d10:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <LCDvalue+0x148>)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dde9      	ble.n	8001cfc <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <LCDvalue+0x138>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 811d 	bne.w	8001f6c <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001d32:	4831      	ldr	r0, [pc, #196]	; (8001df8 <LCDvalue+0x14c>)
 8001d34:	f00c fb54 	bl	800e3e0 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <LCDvalue+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f005 fbf4 	bl	800752c <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f005 fc02 	bl	800754e <ST7735_FillScreen1>
		while(time == 0){
 8001d4a:	e10a      	b.n	8001f62 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d15e      	bne.n	8001e14 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <LCDvalue+0x150>)
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	221f      	movs	r2, #31
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <LCDvalue+0x154>)
 8001d6e:	2123      	movs	r1, #35	; 0x23
 8001d70:	200f      	movs	r0, #15
 8001d72:	f005 fa08 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <LCDvalue+0x158>)
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <LCDvalue+0x15c>)
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	2005      	movs	r0, #5
 8001d94:	f005 f9f7 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <LCDvalue+0x150>)
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <LCDvalue+0x160>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	2014      	movs	r0, #20
 8001db6:	f005 f9e6 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <LCDvalue+0x158>)
 8001dc0:	9203      	str	r2, [sp, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <LCDvalue+0x164>)
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f005 f9d5 	bl	8007186 <ST7735_WriteStringNSS>
 8001ddc:	e0c1      	b.n	8001f62 <LCDvalue+0x2b6>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000174 	.word	0x24000174
 8001de8:	24000ea0 	.word	0x24000ea0
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	08011314 	.word	0x08011314
 8001df4:	24000170 	.word	0x24000170
 8001df8:	240002e8 	.word	0x240002e8
 8001dfc:	24000014 	.word	0x24000014
 8001e00:	08011318 	.word	0x08011318
 8001e04:	2400000c 	.word	0x2400000c
 8001e08:	08011324 	.word	0x08011324
 8001e0c:	08011338 	.word	0x08011338
 8001e10:	08011340 	.word	0x08011340
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80a3 	bne.w	8001f62 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4ba1      	ldr	r3, [pc, #644]	; (80020a8 <LCDvalue+0x3fc>)
 8001e22:	9203      	str	r2, [sp, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	221f      	movs	r2, #31
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	9200      	str	r2, [sp, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a9e      	ldr	r2, [pc, #632]	; (80020ac <LCDvalue+0x400>)
 8001e34:	2119      	movs	r1, #25
 8001e36:	200f      	movs	r0, #15
 8001e38:	f005 f9a5 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <LCDvalue+0x404>)
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <LCDvalue+0x408>)
 8001e56:	2132      	movs	r1, #50	; 0x32
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f005 f994 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <LCDvalue+0x3fc>)
 8001e64:	9203      	str	r2, [sp, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <LCDvalue+0x40c>)
 8001e78:	2119      	movs	r1, #25
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f005 f983 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <LCDvalue+0x404>)
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a88      	ldr	r2, [pc, #544]	; (80020bc <LCDvalue+0x410>)
 8001e9a:	2132      	movs	r1, #50	; 0x32
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f005 f972 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <LCDvalue+0x404>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9203      	str	r2, [sp, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <LCDvalue+0x414>)
 8001eba:	2141      	movs	r1, #65	; 0x41
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f005 f962 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <LCDvalue+0x404>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <LCDvalue+0x414>)
 8001eda:	2141      	movs	r1, #65	; 0x41
 8001edc:	2000      	movs	r0, #0
 8001ede:	f005 f952 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <LCDvalue+0x404>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	9203      	str	r2, [sp, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ef0:	9201      	str	r2, [sp, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <LCDvalue+0x418>)
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	2000      	movs	r0, #0
 8001efe:	f005 f942 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <LCDvalue+0x404>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	9203      	str	r2, [sp, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	9202      	str	r2, [sp, #8]
 8001f0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f10:	9201      	str	r2, [sp, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <LCDvalue+0x41c>)
 8001f1a:	2173      	movs	r1, #115	; 0x73
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f005 f932 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <LCDvalue+0x404>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a64      	ldr	r2, [pc, #400]	; (80020cc <LCDvalue+0x420>)
 8001f3a:	2173      	movs	r1, #115	; 0x73
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f005 f922 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LCDvalue+0x404>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <LCDvalue+0x424>)
 8001f5a:	215a      	movs	r1, #90	; 0x5a
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f005 f912 	bl	8007186 <ST7735_WriteStringNSS>
		while(time == 0){
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <LCDvalue+0x428>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f43f aef0 	beq.w	8001d4c <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4959      	ldr	r1, [pc, #356]	; (80020d8 <LCDvalue+0x42c>)
 8001f74:	4859      	ldr	r0, [pc, #356]	; (80020dc <LCDvalue+0x430>)
 8001f76:	f00e fe0f 	bl	8010b98 <siprintf>
	if(C_LP_ATK[3] == 0){
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <LCDvalue+0x430>)
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <LCDvalue+0x430>)
 8001f84:	789a      	ldrb	r2, [r3, #2]
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <LCDvalue+0x430>)
 8001f88:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <LCDvalue+0x430>)
 8001f8c:	785a      	ldrb	r2, [r3, #1]
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <LCDvalue+0x430>)
 8001f90:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <LCDvalue+0x430>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <LCDvalue+0x430>)
 8001f98:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <LCDvalue+0x430>)
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <LCDvalue+0x404>)
 8001fa6:	9203      	str	r2, [sp, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <LCDvalue+0x430>)
 8001fba:	2114      	movs	r1, #20
 8001fbc:	205a      	movs	r0, #90	; 0x5a
 8001fbe:	f005 f8e2 	bl	8007186 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <LCDvalue+0x404>)
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <LCDvalue+0x434>)
 8001fdc:	2132      	movs	r1, #50	; 0x32
 8001fde:	2069      	movs	r0, #105	; 0x69
 8001fe0:	f005 f8d1 	bl	8007186 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	493b      	ldr	r1, [pc, #236]	; (80020d8 <LCDvalue+0x42c>)
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <LCDvalue+0x438>)
 8001fee:	f00e fdd3 	bl	8010b98 <siprintf>
	if(C_LP_DEF[3] == 0){
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <LCDvalue+0x438>)
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <LCDvalue+0x438>)
 8001ffc:	789a      	ldrb	r2, [r3, #2]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCDvalue+0x438>)
 8002000:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <LCDvalue+0x438>)
 8002004:	785a      	ldrb	r2, [r3, #1]
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <LCDvalue+0x438>)
 8002008:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <LCDvalue+0x438>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <LCDvalue+0x438>)
 8002010:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <LCDvalue+0x438>)
 8002014:	2220      	movs	r2, #32
 8002016:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <LCDvalue+0x404>)
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <LCDvalue+0x438>)
 8002032:	2114      	movs	r1, #20
 8002034:	205a      	movs	r0, #90	; 0x5a
 8002036:	f005 f8a6 	bl	8007186 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <LCDvalue+0x404>)
 8002040:	9203      	str	r2, [sp, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <LCDvalue+0x43c>)
 8002054:	2132      	movs	r1, #50	; 0x32
 8002056:	2069      	movs	r0, #105	; 0x69
 8002058:	f005 f895 	bl	8007186 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <LCDvalue+0x440>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <LCDvalue+0x42c>)
 8002064:	4822      	ldr	r0, [pc, #136]	; (80020f0 <LCDvalue+0x444>)
 8002066:	f00e fd97 	bl	8010b98 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <LCDvalue+0x404>)
 800206c:	2200      	movs	r2, #0
 800206e:	9203      	str	r2, [sp, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <LCDvalue+0x444>)
 8002082:	2123      	movs	r1, #35	; 0x23
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	f005 f87e 	bl	8007186 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LCDvalue+0x404>)
 800208c:	2201      	movs	r2, #1
 800208e:	9203      	str	r2, [sp, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <LCDvalue+0x444>)
 80020a2:	2123      	movs	r1, #35	; 0x23
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	e025      	b.n	80020f4 <LCDvalue+0x448>
 80020a8:	24000014 	.word	0x24000014
 80020ac:	08011318 	.word	0x08011318
 80020b0:	2400000c 	.word	0x2400000c
 80020b4:	08011324 	.word	0x08011324
 80020b8:	08011338 	.word	0x08011338
 80020bc:	08011340 	.word	0x08011340
 80020c0:	080112ec 	.word	0x080112ec
 80020c4:	08011354 	.word	0x08011354
 80020c8:	08011360 	.word	0x08011360
 80020cc:	08011370 	.word	0x08011370
 80020d0:	0801137c 	.word	0x0801137c
 80020d4:	24000174 	.word	0x24000174
 80020d8:	08011314 	.word	0x08011314
 80020dc:	24000164 	.word	0x24000164
 80020e0:	24000170 	.word	0x24000170
 80020e4:	24000168 	.word	0x24000168
 80020e8:	0801138c 	.word	0x0801138c
 80020ec:	24000176 	.word	0x24000176
 80020f0:	2400016c 	.word	0x2400016c
 80020f4:	f005 f847 	bl	8007186 <ST7735_WriteStringNSS>

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3304      	adds	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002122:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8002140:	2108      	movs	r1, #8
 8002142:	48ad      	ldr	r0, [pc, #692]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002144:	f008 ff4e 	bl	800afe4 <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8002150:	2102      	movs	r1, #2
 8002152:	48aa      	ldr	r0, [pc, #680]	; (80023fc <GAME_PLAY_Management+0x2fc>)
 8002154:	f008 ff46 	bl	800afe4 <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8002160:	2104      	movs	r1, #4
 8002162:	48a5      	ldr	r0, [pc, #660]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002164:	f008 ff3e 	bl	800afe4 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8002170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002174:	48a2      	ldr	r0, [pc, #648]	; (8002400 <GAME_PLAY_Management+0x300>)
 8002176:	f008 ff35 	bl	800afe4 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002188:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b04      	cmp	r3, #4
 800219a:	f200 829f 	bhi.w	80026dc <GAME_PLAY_Management+0x5dc>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <GAME_PLAY_Management+0xa4>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b9 	.word	0x080021b9
 80021a8:	08002435 	.word	0x08002435
 80021ac:	0800259b 	.word	0x0800259b
 80021b0:	08002619 	.word	0x08002619
 80021b4:	08002697 	.word	0x08002697
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8f      	ldr	r2, [pc, #572]	; (8002408 <GAME_PLAY_Management+0x308>)
 80021cc:	2105      	movs	r1, #5
 80021ce:	2005      	movs	r0, #5
 80021d0:	f004 ff45 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a89      	ldr	r2, [pc, #548]	; (800240c <GAME_PLAY_Management+0x30c>)
 80021e8:	210f      	movs	r1, #15
 80021ea:	2000      	movs	r0, #0
 80021ec:	f004 ff37 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <GAME_PLAY_Management+0x310>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a84      	ldr	r2, [pc, #528]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002204:	2123      	movs	r1, #35	; 0x23
 8002206:	2008      	movs	r0, #8
 8002208:	f004 ff29 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <GAME_PLAY_Management+0x310>)
 800220e:	2200      	movs	r2, #0
 8002210:	9202      	str	r2, [sp, #8]
 8002212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <GAME_PLAY_Management+0x318>)
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	2019      	movs	r0, #25
 8002224:	f004 ff1b 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <GAME_PLAY_Management+0x304>)
 800222a:	2200      	movs	r2, #0
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a74      	ldr	r2, [pc, #464]	; (800240c <GAME_PLAY_Management+0x30c>)
 800223c:	214b      	movs	r1, #75	; 0x4b
 800223e:	2000      	movs	r0, #0
 8002240:	f004 ff0d 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002246:	2200      	movs	r2, #0
 8002248:	9202      	str	r2, [sp, #8]
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a71      	ldr	r2, [pc, #452]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002258:	215a      	movs	r1, #90	; 0x5a
 800225a:	2000      	movs	r0, #0
 800225c:	f004 feff 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002262:	2200      	movs	r2, #0
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002274:	215a      	movs	r1, #90	; 0x5a
 8002276:	205d      	movs	r0, #93	; 0x5d
 8002278:	f004 fef1 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <GAME_PLAY_Management+0x304>)
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <GAME_PLAY_Management+0x324>)
 8002290:	2169      	movs	r1, #105	; 0x69
 8002292:	2000      	movs	r0, #0
 8002294:	f004 fee3 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <GAME_PLAY_Management+0x304>)
 800229a:	2200      	movs	r2, #0
 800229c:	9202      	str	r2, [sp, #8]
 800229e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <GAME_PLAY_Management+0x328>)
 80022ac:	2169      	movs	r1, #105	; 0x69
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f004 fed5 	bl	800705e <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	9202      	str	r2, [sp, #8]
 80022ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a59      	ldr	r2, [pc, #356]	; (800242c <GAME_PLAY_Management+0x32c>)
 80022c8:	2105      	movs	r1, #5
 80022ca:	2005      	movs	r0, #5
 80022cc:	f004 ff11 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <GAME_PLAY_Management+0x30c>)
 80022e4:	210f      	movs	r1, #15
 80022e6:	2000      	movs	r0, #0
 80022e8:	f004 ff03 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <GAME_PLAY_Management+0x310>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a45      	ldr	r2, [pc, #276]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002300:	2123      	movs	r1, #35	; 0x23
 8002302:	2008      	movs	r0, #8
 8002304:	f004 fef5 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <GAME_PLAY_Management+0x310>)
 800230a:	2200      	movs	r2, #0
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <GAME_PLAY_Management+0x318>)
 800231c:	213c      	movs	r1, #60	; 0x3c
 800231e:	2014      	movs	r0, #20
 8002320:	f004 fee7 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002326:	2200      	movs	r2, #0
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <GAME_PLAY_Management+0x30c>)
 8002338:	214b      	movs	r1, #75	; 0x4b
 800233a:	2000      	movs	r0, #0
 800233c:	f004 fed9 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002342:	2200      	movs	r2, #0
 8002344:	9202      	str	r2, [sp, #8]
 8002346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002354:	215a      	movs	r1, #90	; 0x5a
 8002356:	2000      	movs	r0, #0
 8002358:	f004 fecb 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <GAME_PLAY_Management+0x304>)
 800235e:	2200      	movs	r2, #0
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002370:	215a      	movs	r1, #90	; 0x5a
 8002372:	205d      	movs	r0, #93	; 0x5d
 8002374:	f004 febd 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <GAME_PLAY_Management+0x304>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <GAME_PLAY_Management+0x324>)
 800238c:	2169      	movs	r1, #105	; 0x69
 800238e:	2000      	movs	r0, #0
 8002390:	f004 feaf 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <GAME_PLAY_Management+0x328>)
 80023a8:	2169      	movs	r1, #105	; 0x69
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f004 fea1 	bl	80070f2 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80023b0:	2108      	movs	r1, #8
 80023b2:	481f      	ldr	r0, [pc, #124]	; (8002430 <GAME_PLAY_Management+0x330>)
 80023b4:	f008 fe16 	bl	800afe4 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80023be:	2000      	movs	r0, #0
 80023c0:	f005 f8b4 	bl	800752c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f005 f8c2 	bl	800754e <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80023d2:	e183      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
			state_game->PlyerAction_State = PS_AFK;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80023f4:	e172      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
 80023f6:	bf00      	nop
 80023f8:	58020800 	.word	0x58020800
 80023fc:	58020400 	.word	0x58020400
 8002400:	58021400 	.word	0x58021400
 8002404:	2400000c 	.word	0x2400000c
 8002408:	08011300 	.word	0x08011300
 800240c:	080112ec 	.word	0x080112ec
 8002410:	24000014 	.word	0x24000014
 8002414:	08011390 	.word	0x08011390
 8002418:	0801139c 	.word	0x0801139c
 800241c:	080113a4 	.word	0x080113a4
 8002420:	080113b4 	.word	0x080113b4
 8002424:	080113bc 	.word	0x080113bc
 8002428:	0801138c 	.word	0x0801138c
 800242c:	080112ac 	.word	0x080112ac
 8002430:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002434:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4aa8      	ldr	r2, [pc, #672]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 8002448:	2105      	movs	r1, #5
 800244a:	2005      	movs	r0, #5
 800244c:	f004 fe07 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002450:	4ba4      	ldr	r3, [pc, #656]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002452:	2200      	movs	r2, #0
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4aa2      	ldr	r2, [pc, #648]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002464:	210f      	movs	r1, #15
 8002466:	2000      	movs	r0, #0
 8002468:	f004 fdf9 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800246c:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a9d      	ldr	r2, [pc, #628]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 8002480:	2123      	movs	r1, #35	; 0x23
 8002482:	2019      	movs	r0, #25
 8002484:	f004 fdeb 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002488:	4b99      	ldr	r3, [pc, #612]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800248a:	2200      	movs	r2, #0
 800248c:	9202      	str	r2, [sp, #8]
 800248e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002492:	9201      	str	r2, [sp, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a97      	ldr	r2, [pc, #604]	; (80026f8 <GAME_PLAY_Management+0x5f8>)
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	2021      	movs	r0, #33	; 0x21
 80024a0:	f004 fddd 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024a4:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	9202      	str	r2, [sp, #8]
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8d      	ldr	r2, [pc, #564]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 80024b8:	214b      	movs	r1, #75	; 0x4b
 80024ba:	2000      	movs	r0, #0
 80024bc:	f004 fdcf 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c0:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 80024d4:	2105      	movs	r1, #5
 80024d6:	2005      	movs	r0, #5
 80024d8:	f004 fe0b 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7f      	ldr	r2, [pc, #508]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 80024f0:	210f      	movs	r1, #15
 80024f2:	2000      	movs	r0, #0
 80024f4:	f004 fdfd 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80024f8:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 800250c:	2123      	movs	r1, #35	; 0x23
 800250e:	2019      	movs	r0, #25
 8002510:	f004 fdef 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002514:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 8002516:	2200      	movs	r2, #0
 8002518:	9202      	str	r2, [sp, #8]
 800251a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a76      	ldr	r2, [pc, #472]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	2025      	movs	r0, #37	; 0x25
 800252c:	f004 fde1 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002530:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002532:	2200      	movs	r2, #0
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002544:	214b      	movs	r1, #75	; 0x4b
 8002546:	2000      	movs	r0, #0
 8002548:	f004 fdd3 	bl	80070f2 <ST7735_WriteString1>
		HAL_Delay(1500);
 800254c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002550:	f005 fbfa 	bl	8007d48 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8002554:	2000      	movs	r0, #0
 8002556:	f004 ffe9 	bl	800752c <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 800255a:	2000      	movs	r0, #0
 800255c:	f004 fff7 	bl	800754e <ST7735_FillScreen1>
		MainGUI();
 8002560:	f7ff fae4 	bl	8001b2c <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800256a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002572:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8002574:	69f8      	ldr	r0, [r7, #28]
 8002576:	f7fe ff83 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7fe ff80 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->firstAtk_Turn_Flag = 1;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8

		state_game->MainGame_State = first_player;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8002598:	e0a0      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case first_player:
		if (state_game -> F_flag == 0){
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12b      	bne.n	80025fc <GAME_PLAY_Management+0x4fc>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80025a4:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	9202      	str	r2, [sp, #8]
 80025aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025ae:	9201      	str	r2, [sp, #4]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	9200      	str	r2, [sp, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a53      	ldr	r2, [pc, #332]	; (8002704 <GAME_PLAY_Management+0x604>)
 80025b8:	215a      	movs	r1, #90	; 0x5a
 80025ba:	200f      	movs	r0, #15
 80025bc:	f004 fd99 	bl	80070f2 <ST7735_WriteString1>
			HAL_Delay(1500);
 80025c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025c4:	f005 fbc0 	bl	8007d48 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 80025c8:	2300      	movs	r3, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2326      	movs	r3, #38	; 0x26
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	215a      	movs	r1, #90	; 0x5a
 80025d2:	2000      	movs	r0, #0
 80025d4:	f004 feac 	bl	8007330 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025de:	3301      	adds	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <GAME_PLAY_Management+0x608>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <GAME_PLAY_Management+0x608>)
 80025fa:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002608:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f87d 	bl	8002710 <GAME_PLAY_Phase_Management>
		break;
 8002616:	e061      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case second_player:
		if (state_game -> S_flag == 0){
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12b      	bne.n	800267a <GAME_PLAY_Management+0x57a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8002622:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 8002624:	2200      	movs	r2, #0
 8002626:	9202      	str	r2, [sp, #8]
 8002628:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a33      	ldr	r2, [pc, #204]	; (8002704 <GAME_PLAY_Management+0x604>)
 8002636:	215a      	movs	r1, #90	; 0x5a
 8002638:	200f      	movs	r0, #15
 800263a:	f004 fd10 	bl	800705e <ST7735_WriteString>
			HAL_Delay(1500);
 800263e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002642:	f005 fb81 	bl	8007d48 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2326      	movs	r3, #38	; 0x26
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	215a      	movs	r1, #90	; 0x5a
 8002650:	2000      	movs	r0, #0
 8002652:	f004 fdf9 	bl	8007248 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <GAME_PLAY_Management+0x608>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <GAME_PLAY_Management+0x608>)
 8002678:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002680:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f83e 	bl	8002710 <GAME_PLAY_Phase_Management>
		break;
 8002694:	e022      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case Game_Ended:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8002696:	2108      	movs	r1, #8
 8002698:	481c      	ldr	r0, [pc, #112]	; (800270c <GAME_PLAY_Management+0x60c>)
 800269a:	f008 fca3 	bl	800afe4 <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <GAME_PLAY_Management+0x5ba>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f004 ff41 	bl	800752c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f004 ff4f 	bl	800754e <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80026b8:	e00f      	b.n	80026da <GAME_PLAY_Management+0x5da>
			state_game->PlyerAction_State = PS_AFK;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80026da:	bf00      	nop
	}
}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2400000c 	.word	0x2400000c
 80026e8:	08011300 	.word	0x08011300
 80026ec:	080112ec 	.word	0x080112ec
 80026f0:	24000014 	.word	0x24000014
 80026f4:	080113cc 	.word	0x080113cc
 80026f8:	080113d4 	.word	0x080113d4
 80026fc:	080112ac 	.word	0x080112ac
 8002700:	080113dc 	.word	0x080113dc
 8002704:	080113e4 	.word	0x080113e4
 8002708:	24000176 	.word	0x24000176
 800270c:	58020000 	.word	0x58020000

08002710 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8002716:	af04      	add	r7, sp, #16
 8002718:	f507 7418 	add.w	r4, r7, #608	; 0x260
 800271c:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8002720:	6020      	str	r0, [r4, #0]
 8002722:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8002726:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 800272a:	6001      	str	r1, [r0, #0]
 800272c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002730:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8002734:	600a      	str	r2, [r1, #0]
 8002736:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800273a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800273e:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8002740:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002744:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800274e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8002752:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002756:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8002760:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8002764:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002768:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002772:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 8002776:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800277a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800277e:	4618      	mov	r0, r3
 8002780:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8002784:	461a      	mov	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f00e f90e 	bl	80109a8 <memset>

	switch (PAS) {
 800278c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002790:	2b03      	cmp	r3, #3
 8002792:	f203 861d 	bhi.w	80063d0 <GAME_PLAY_Phase_Management+0x3cc0>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <GAME_PLAY_Phase_Management+0x8c>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080063c3 	.word	0x080063c3
 80027a0:	080027ad 	.word	0x080027ad
 80027a4:	08002905 	.word	0x08002905
 80027a8:	08004eed 	.word	0x08004eed
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80027ac:	48b1      	ldr	r0, [pc, #708]	; (8002a74 <GAME_PLAY_Phase_Management+0x364>)
 80027ae:	f00b fd9f 	bl	800e2f0 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80027b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80027ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f7ff fa71 	bl	8001cac <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027ca:	4bab      	ldr	r3, [pc, #684]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	9202      	str	r2, [sp, #8]
 80027d0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027d4:	9201      	str	r2, [sp, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	9200      	str	r2, [sp, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4aa7      	ldr	r2, [pc, #668]	; (8002a7c <GAME_PLAY_Phase_Management+0x36c>)
 80027de:	2123      	movs	r1, #35	; 0x23
 80027e0:	206e      	movs	r0, #110	; 0x6e
 80027e2:	f004 fc3c 	bl	800705e <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027e6:	4ba4      	ldr	r3, [pc, #656]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	9202      	str	r2, [sp, #8]
 80027ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027f0:	9201      	str	r2, [sp, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4aa0      	ldr	r2, [pc, #640]	; (8002a7c <GAME_PLAY_Phase_Management+0x36c>)
 80027fa:	2123      	movs	r1, #35	; 0x23
 80027fc:	206e      	movs	r0, #110	; 0x6e
 80027fe:	f004 fc78 	bl	80070f2 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002802:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002806:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b9a      	ldr	r3, [pc, #616]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002810:	9203      	str	r2, [sp, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a97      	ldr	r2, [pc, #604]	; (8002a80 <GAME_PLAY_Phase_Management+0x370>)
 8002824:	215a      	movs	r1, #90	; 0x5a
 8002826:	2005      	movs	r0, #5
 8002828:	f004 fcad 	bl	8007186 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800282c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002830:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	9200      	str	r2, [sp, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a8d      	ldr	r2, [pc, #564]	; (8002a84 <GAME_PLAY_Phase_Management+0x374>)
 800284e:	215a      	movs	r1, #90	; 0x5a
 8002850:	2005      	movs	r0, #5
 8002852:	f004 fc98 	bl	8007186 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8002856:	2101      	movs	r1, #1
 8002858:	488b      	ldr	r0, [pc, #556]	; (8002a88 <GAME_PLAY_Phase_Management+0x378>)
 800285a:	f008 fbc3 	bl	800afe4 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f043 85b0 	bne.w	80063c6 <GAME_PLAY_Phase_Management+0x3cb6>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8002866:	2000      	movs	r0, #0
 8002868:	f004 fe60 	bl	800752c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 800286c:	2000      	movs	r0, #0
 800286e:	f004 fe6e 	bl	800754e <ST7735_FillScreen1>
			MainGUI();
 8002872:	f7ff f95b 	bl	8001b2c <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8002876:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800287a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002886:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800288a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8002896:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800289a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 80028a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a8:	f005 fa4e 	bl	8007d48 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80028ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028b0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80028ba:	9203      	str	r2, [sp, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	9202      	str	r2, [sp, #8]
 80028c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	9200      	str	r2, [sp, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6c      	ldr	r2, [pc, #432]	; (8002a80 <GAME_PLAY_Phase_Management+0x370>)
 80028ce:	215a      	movs	r1, #90	; 0x5a
 80028d0:	2005      	movs	r0, #5
 80028d2:	f004 fc58 	bl	8007186 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80028d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80028e4:	9203      	str	r2, [sp, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	9202      	str	r2, [sp, #8]
 80028ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <GAME_PLAY_Phase_Management+0x37c>)
 80028f8:	215a      	movs	r1, #90	; 0x5a
 80028fa:	2005      	movs	r0, #5
 80028fc:	f004 fc43 	bl	8007186 <ST7735_WriteStringNSS>
		}
		break;
 8002900:	f003 bd61 	b.w	80063c6 <GAME_PLAY_Phase_Management+0x3cb6>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8002904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002908:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800290c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002910:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	f7ff f9c8 	bl	8001cac <LCDvalue>

		switch (PMS)
 800291c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8002920:	2b07      	cmp	r3, #7
 8002922:	f203 8552 	bhi.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <GAME_PLAY_Phase_Management+0x21c>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08004ebd 	.word	0x08004ebd
 8002930:	0800294d 	.word	0x0800294d
 8002934:	08002c27 	.word	0x08002c27
 8002938:	08002da9 	.word	0x08002da9
 800293c:	0800341d 	.word	0x0800341d
 8002940:	08003de9 	.word	0x08003de9
 8002944:	08003bd9 	.word	0x08003bd9
 8002948:	080039bd 	.word	0x080039bd
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 800294c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 813a 	bne.w	8002bd2 <GAME_PLAY_Phase_Management+0x4c2>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002960:	2200      	movs	r2, #0
 8002962:	9202      	str	r2, [sp, #8]
 8002964:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a47      	ldr	r2, [pc, #284]	; (8002a90 <GAME_PLAY_Phase_Management+0x380>)
 8002972:	2123      	movs	r1, #35	; 0x23
 8002974:	206e      	movs	r0, #110	; 0x6e
 8002976:	f004 fb72 	bl	800705e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 800297c:	2200      	movs	r2, #0
 800297e:	9202      	str	r2, [sp, #8]
 8002980:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <GAME_PLAY_Phase_Management+0x380>)
 800298e:	2123      	movs	r1, #35	; 0x23
 8002990:	206e      	movs	r0, #110	; 0x6e
 8002992:	f004 fbae 	bl	80070f2 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8002996:	2101      	movs	r1, #1
 8002998:	483b      	ldr	r0, [pc, #236]	; (8002a88 <GAME_PLAY_Phase_Management+0x378>)
 800299a:	f008 fb23 	bl	800afe4 <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8103 	bne.w	8002bac <GAME_PLAY_Phase_Management+0x49c>
						== GPIO_PIN_RESET){
					if (state_game->firstAtk_Turn_Flag != 1)
 80029a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d071      	beq.n	8002a9c <GAME_PLAY_Phase_Management+0x38c>
					{
						ST7735_FillScreen(ST7735_BLACK);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f004 fdb7 	bl	800752c <ST7735_FillScreen>
						ST7735_FillScreen1(ST7735_BLACK);
 80029be:	2000      	movs	r0, #0
 80029c0:	f004 fdc5 	bl	800754e <ST7735_FillScreen1>
						MainGUI();
 80029c4:	f7ff f8b2 	bl	8001b2c <MainGUI>
						state_game->action = 50;
 80029c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2232      	movs	r2, #50	; 0x32
 80029d4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_AFK;
 80029d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						YUGIOH_Monster_Activated(playerAtk);
 80029e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f7ff f87b 	bl	8001aea <YUGIOH_Monster_Activated>
						state_game->PlyerAction_State = Battle_Phase;
 80029f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002a04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						HAL_Delay(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f005 f996 	bl	8007d48 <HAL_Delay>
						ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8002a1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002a2a:	9203      	str	r2, [sp, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	9202      	str	r2, [sp, #8]
 8002a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a34:	9201      	str	r2, [sp, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <GAME_PLAY_Phase_Management+0x384>)
 8002a3e:	215a      	movs	r1, #90	; 0x5a
 8002a40:	2005      	movs	r0, #5
 8002a42:	f004 fba0 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002a46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002a54:	9203      	str	r2, [sp, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5e:	9201      	str	r2, [sp, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <GAME_PLAY_Phase_Management+0x388>)
 8002a68:	215a      	movs	r1, #90	; 0x5a
 8002a6a:	2005      	movs	r0, #5
 8002a6c:	f004 fb8b 	bl	8007186 <ST7735_WriteStringNSS>
 8002a70:	e09c      	b.n	8002bac <GAME_PLAY_Phase_Management+0x49c>
 8002a72:	bf00      	nop
 8002a74:	240002e8 	.word	0x240002e8
 8002a78:	2400000c 	.word	0x2400000c
 8002a7c:	080113f0 	.word	0x080113f0
 8002a80:	080113f4 	.word	0x080113f4
 8002a84:	08011404 	.word	0x08011404
 8002a88:	58020800 	.word	0x58020800
 8002a8c:	08011410 	.word	0x08011410
 8002a90:	08011420 	.word	0x08011420
 8002a94:	08011424 	.word	0x08011424
 8002a98:	08011434 	.word	0x08011434
					}
					else
					{
						state_game->firstAtk_Turn_Flag = 0;
 8002a9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aa0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002aac:	48b8      	ldr	r0, [pc, #736]	; (8002d90 <GAME_PLAY_Phase_Management+0x680>)
 8002aae:	f00b fc97 	bl	800e3e0 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8002ab2:	49b8      	ldr	r1, [pc, #736]	; (8002d94 <GAME_PLAY_Phase_Management+0x684>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002ac0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ac4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2326      	movs	r3, #38	; 0x26
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	215a      	movs	r1, #90	; 0x5a
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f004 fc9d 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002ade:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ae2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	4bab      	ldr	r3, [pc, #684]	; (8002d98 <GAME_PLAY_Phase_Management+0x688>)
 8002aec:	9203      	str	r2, [sp, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4aa7      	ldr	r2, [pc, #668]	; (8002d9c <GAME_PLAY_Phase_Management+0x68c>)
 8002b00:	215a      	movs	r1, #90	; 0x5a
 8002b02:	200f      	movs	r0, #15
 8002b04:	f004 fb3f 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8002b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b0c:	f005 f91c 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002b10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2326      	movs	r3, #38	; 0x26
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	215a      	movs	r1, #90	; 0x5a
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f004 fc75 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002b2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b32:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2326      	movs	r3, #38	; 0x26
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	215a      	movs	r1, #90	; 0x5a
 8002b46:	2000      	movs	r0, #0
 8002b48:	f004 fc66 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8002b4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8002b5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	f7fe ffa0 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8002b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d108      	bne.n	8002b8c <GAME_PLAY_Phase_Management+0x47c>
							state_game->MainGame_State = second_player;
 8002b7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2203      	movs	r2, #3
 8002b86:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8002b8a:	e007      	b.n	8002b9c <GAME_PLAY_Phase_Management+0x48c>
						}
						else{
							state_game->MainGame_State = first_player;
 8002b8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8002b9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ba0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					}
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002bac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb0:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb8:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002bbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bc0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f7fd fdc3 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002bce:	f002 b978 	b.w	8004ec2 <GAME_PLAY_Phase_Management+0x27b2>
			else if (state_game->action == 1)
 8002bd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f042 816f 	bne.w	8004ec2 <GAME_PLAY_Phase_Management+0x27b2>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002be4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002be8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2326      	movs	r3, #38	; 0x26
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	215a      	movs	r1, #90	; 0x5a
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f004 fc0b 	bl	8007418 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8002c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8002c12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002c22:	f002 b94e 	b.w	8004ec2 <GAME_PLAY_Phase_Management+0x27b2>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <GAME_PLAY_Phase_Management+0x690>)
 8002c34:	9203      	str	r2, [sp, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	9202      	str	r2, [sp, #8]
 8002c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	9200      	str	r2, [sp, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <GAME_PLAY_Phase_Management+0x694>)
 8002c48:	215a      	movs	r1, #90	; 0x5a
 8002c4a:	2005      	movs	r0, #5
 8002c4c:	f004 fa9b 	bl	8007186 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002c50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c54:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c5e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c70:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d147      	bne.n	8002d14 <GAME_PLAY_Phase_Management+0x604>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002c84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	789b      	ldrb	r3, [r3, #2]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <GAME_PLAY_Phase_Management+0x59e>
					ptrYugiohCard_src->cardState = 0;
 8002c94:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002c98:	2200      	movs	r2, #0
 8002c9a:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002c9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ca0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002caa:	f002 b90d 	b.w	8004ec8 <GAME_PLAY_Phase_Management+0x27b8>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8002cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f042 8104 	bne.w	8004ec8 <GAME_PLAY_Phase_Management+0x27b8>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8002cc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cc8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f7fe febf 	bl	8001a50 <YUGIOH_Check_Spell_On_board>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002cd8:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002cdc:	2bff      	cmp	r3, #255	; 0xff
 8002cde:	d00c      	beq.n	8002cfa <GAME_PLAY_Phase_Management+0x5ea>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8002ce0:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002ce4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002ce8:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3308      	adds	r3, #8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fcfc 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8002cfa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002cfe:	2201      	movs	r2, #1
 8002d00:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002d02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
			break;
 8002d10:	f002 b8da 	b.w	8004ec8 <GAME_PLAY_Phase_Management+0x27b8>
			else if (state_game->action == 2)
 8002d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	f042 80d1 	bne.w	8004ec8 <GAME_PLAY_Phase_Management+0x27b8>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2326      	movs	r3, #38	; 0x26
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	215a      	movs	r1, #90	; 0x5a
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f004 fb6a 	bl	8007418 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002d44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d48:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2326      	movs	r3, #38	; 0x26
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	215a      	movs	r1, #90	; 0x5a
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f004 fb5b 	bl	8007418 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002d62:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002d66:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d6a:	f7fd fc8b 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8002d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8002d7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002d8c:	f002 b89c 	b.w	8004ec8 <GAME_PLAY_Phase_Management+0x27b8>
 8002d90:	240002e8 	.word	0x240002e8
 8002d94:	24000ea0 	.word	0x24000ea0
 8002d98:	24000014 	.word	0x24000014
 8002d9c:	08011444 	.word	0x08011444
 8002da0:	2400000c 	.word	0x2400000c
 8002da4:	08011450 	.word	0x08011450
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002da8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002db6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002dba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	f042 8081 	bne.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002dcc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	f040 8087 	bne.w	8002ee6 <GAME_PLAY_Phase_Management+0x7d6>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ddc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	4b9d      	ldr	r3, [pc, #628]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002de6:	9203      	str	r2, [sp, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	9202      	str	r2, [sp, #8]
 8002dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df0:	9201      	str	r2, [sp, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	9200      	str	r2, [sp, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a99      	ldr	r2, [pc, #612]	; (8003060 <GAME_PLAY_Phase_Management+0x950>)
 8002dfa:	215a      	movs	r1, #90	; 0x5a
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f004 f9c2 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e06:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	4b93      	ldr	r3, [pc, #588]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002e10:	9203      	str	r2, [sp, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	9202      	str	r2, [sp, #8]
 8002e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e1a:	9201      	str	r2, [sp, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	9200      	str	r2, [sp, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a90      	ldr	r2, [pc, #576]	; (8003064 <GAME_PLAY_Phase_Management+0x954>)
 8002e24:	215a      	movs	r1, #90	; 0x5a
 8002e26:	2005      	movs	r0, #5
 8002e28:	f004 f9ad 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002e3a:	9203      	str	r2, [sp, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	9202      	str	r2, [sp, #8]
 8002e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e44:	9201      	str	r2, [sp, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a86      	ldr	r2, [pc, #536]	; (8003068 <GAME_PLAY_Phase_Management+0x958>)
 8002e4e:	2169      	movs	r1, #105	; 0x69
 8002e50:	2005      	movs	r0, #5
 8002e52:	f004 f998 	bl	8007186 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002e56:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002e5e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002e62:	799a      	ldrb	r2, [r3, #6]
 8002e64:	4b81      	ldr	r3, [pc, #516]	; (800306c <GAME_PLAY_Phase_Management+0x95c>)
 8002e66:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6a:	0899      	lsrs	r1, r3, #2
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002e7a:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002e7e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e82:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3308      	adds	r3, #8
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002e92:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002e96:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002e9a:	f7fd fbf3 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002e9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ea2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f7fe fac4 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002eac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eb0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002eba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fbe0 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002ec4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ec8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002ed2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002ee2:	f001 bff4 	b.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
				else if (ptrYugiohCard_src->cardType == 2)
 8002ee6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	f040 8146 	bne.w	800317e <GAME_PLAY_Phase_Management+0xa6e>
					state_game->count_chain = 1;
 8002ef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ef6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8002f00:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f04:	789b      	ldrb	r3, [r3, #2]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	f040 80b6 	bne.w	8003078 <GAME_PLAY_Phase_Management+0x968>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002f0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002f1a:	9203      	str	r2, [sp, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	9202      	str	r2, [sp, #8]
 8002f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f24:	9201      	str	r2, [sp, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	; (8003070 <GAME_PLAY_Phase_Management+0x960>)
 8002f2e:	215a      	movs	r1, #90	; 0x5a
 8002f30:	2005      	movs	r0, #5
 8002f32:	f004 f928 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f3a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	9201      	str	r2, [sp, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	9200      	str	r2, [sp, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a47      	ldr	r2, [pc, #284]	; (8003074 <GAME_PLAY_Phase_Management+0x964>)
 8002f58:	215a      	movs	r1, #90	; 0x5a
 8002f5a:	2005      	movs	r0, #5
 8002f5c:	f004 f913 	bl	8007186 <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002f60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002f6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	f7fe fb07 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002f90:	f7fd fb78 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002f94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fa2:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002fac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fba:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fda:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002fe4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fe8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2326      	movs	r3, #38	; 0x26
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	215a      	movs	r1, #90	; 0x5a
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f004 fa0b 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003002:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003006:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2326      	movs	r3, #38	; 0x26
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	215a      	movs	r1, #90	; 0x5a
 800301a:	2000      	movs	r0, #0
 800301c:	f004 f9fc 	bl	8007418 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003020:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003024:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	f7fe fa03 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800302e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003032:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800303c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fb1f 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8003046:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800304a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2207      	movs	r2, #7
 8003052:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003056:	f001 bf3a 	b.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
 800305a:	bf00      	nop
 800305c:	2400000c 	.word	0x2400000c
 8003060:	08011460 	.word	0x08011460
 8003064:	08011470 	.word	0x08011470
 8003068:	08011480 	.word	0x08011480
 800306c:	aaaaaaab 	.word	0xaaaaaaab
 8003070:	08011488 	.word	0x08011488
 8003074:	080114a0 	.word	0x080114a0
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003078:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800307c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b98      	ldr	r3, [pc, #608]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a94      	ldr	r2, [pc, #592]	; (80032ec <GAME_PLAY_Phase_Management+0xbdc>)
 800309a:	215a      	movs	r1, #90	; 0x5a
 800309c:	2005      	movs	r0, #5
 800309e:	f004 f872 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030a6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	4b8e      	ldr	r3, [pc, #568]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80030b0:	9203      	str	r2, [sp, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	9202      	str	r2, [sp, #8]
 80030b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a8b      	ldr	r2, [pc, #556]	; (80032f0 <GAME_PLAY_Phase_Management+0xbe0>)
 80030c4:	215a      	movs	r1, #90	; 0x5a
 80030c6:	2005      	movs	r0, #5
 80030c8:	f004 f85d 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b83      	ldr	r3, [pc, #524]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <GAME_PLAY_Phase_Management+0xbe4>)
 80030ee:	2169      	movs	r1, #105	; 0x69
 80030f0:	2005      	movs	r0, #5
 80030f2:	f004 f848 	bl	8007186 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80030f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80030fa:	799a      	ldrb	r2, [r3, #6]
 80030fc:	4b7e      	ldr	r3, [pc, #504]	; (80032f8 <GAME_PLAY_Phase_Management+0xbe8>)
 80030fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003102:	0899      	lsrs	r1, r3, #2
 8003104:	460b      	mov	r3, r1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003112:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8003116:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800311a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	3308      	adds	r3, #8
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800312a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800312e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8003132:	f7fd faa7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800313a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	f7fe f978 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003144:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003152:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fa94 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800315c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003160:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800316a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800316e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800317a:	f001 bea8 	b.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
				else if (ptrYugiohCard_src->cardType == 1)
 800317e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f041 86a2 	bne.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
					state_game->test = 2;
 800318a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800318e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 800319a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	f200 80b1 	bhi.w	8003308 <GAME_PLAY_Phase_Management+0xbf8>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80031a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	4b4d      	ldr	r3, [pc, #308]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	9202      	str	r2, [sp, #8]
 80031ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4d      	ldr	r2, [pc, #308]	; (80032fc <GAME_PLAY_Phase_Management+0xbec>)
 80031c8:	215a      	movs	r1, #90	; 0x5a
 80031ca:	2005      	movs	r0, #5
 80031cc:	f003 ffdb 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80031d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80031de:	9203      	str	r2, [sp, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	9202      	str	r2, [sp, #8]
 80031e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80031e8:	9201      	str	r2, [sp, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	9200      	str	r2, [sp, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a43      	ldr	r2, [pc, #268]	; (8003300 <GAME_PLAY_Phase_Management+0xbf0>)
 80031f2:	2169      	movs	r1, #105	; 0x69
 80031f4:	2005      	movs	r0, #5
 80031f6:	f003 ffc6 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80031fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003208:	9203      	str	r2, [sp, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	9202      	str	r2, [sp, #8]
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	9201      	str	r2, [sp, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <GAME_PLAY_Phase_Management+0xbf4>)
 800321c:	215a      	movs	r1, #90	; 0x5a
 800321e:	2005      	movs	r0, #5
 8003220:	f003 ffb1 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003224:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003228:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003232:	9203      	str	r2, [sp, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	9202      	str	r2, [sp, #8]
 8003238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	9200      	str	r2, [sp, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <GAME_PLAY_Phase_Management+0xbf0>)
 8003246:	2169      	movs	r1, #105	; 0x69
 8003248:	2005      	movs	r0, #5
 800324a:	f003 ff9c 	bl	8007186 <ST7735_WriteStringNSS>
						state_game->test = 1;
 800324e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003252:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800325e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003262:	799a      	ldrb	r2, [r3, #6]
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <GAME_PLAY_Phase_Management+0xbe8>)
 8003266:	fba3 1302 	umull	r1, r3, r3, r2
 800326a:	0899      	lsrs	r1, r3, #2
 800326c:	460b      	mov	r3, r1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800327a:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 800327e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003282:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3308      	adds	r3, #8
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	4413      	add	r3, r2
 800328e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003292:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003296:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800329a:	f7fd f9f3 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800329e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	f7fe f8c4 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80032ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032ba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f9e0 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80032c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80032d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80032e2:	f001 bdf4 	b.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
 80032e6:	bf00      	nop
 80032e8:	2400000c 	.word	0x2400000c
 80032ec:	08011460 	.word	0x08011460
 80032f0:	08011470 	.word	0x08011470
 80032f4:	08011480 	.word	0x08011480
 80032f8:	aaaaaaab 	.word	0xaaaaaaab
 80032fc:	080114b4 	.word	0x080114b4
 8003300:	080114c0 	.word	0x080114c0
 8003304:	080114cc 	.word	0x080114cc
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003308:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800330c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2326      	movs	r3, #38	; 0x26
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	215a      	movs	r1, #90	; 0x5a
 8003320:	2000      	movs	r0, #0
 8003322:	f004 f879 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003326:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800332a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2326      	movs	r3, #38	; 0x26
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	215a      	movs	r1, #90	; 0x5a
 800333e:	2000      	movs	r0, #0
 8003340:	f004 f86a 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(5, 90, "You advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003344:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003348:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 8003352:	9203      	str	r2, [sp, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	9202      	str	r2, [sp, #8]
 8003358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7e      	ldr	r2, [pc, #504]	; (8003560 <GAME_PLAY_Phase_Management+0xe50>)
 8003366:	215a      	movs	r1, #90	; 0x5a
 8003368:	2005      	movs	r0, #5
 800336a:	f003 ff0c 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800336e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003372:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b78      	ldr	r3, [pc, #480]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 8003390:	2169      	movs	r1, #105	; 0x69
 8003392:	2005      	movs	r0, #5
 8003394:	f003 fef7 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003398:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800339c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	4b6d      	ldr	r3, [pc, #436]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80033a6:	9203      	str	r2, [sp, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	9202      	str	r2, [sp, #8]
 80033ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <GAME_PLAY_Phase_Management+0xe58>)
 80033ba:	215a      	movs	r1, #90	; 0x5a
 80033bc:	2005      	movs	r0, #5
 80033be:	f003 fee2 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80033c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80033d0:	9203      	str	r2, [sp, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033da:	9201      	str	r2, [sp, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a60      	ldr	r2, [pc, #384]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 80033e4:	2169      	movs	r1, #105	; 0x69
 80033e6:	2005      	movs	r0, #5
 80033e8:	f003 fecd 	bl	8007186 <ST7735_WriteStringNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80033ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f7fe f81d 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80033fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2204      	movs	r2, #4
 8003406:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8003408:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800340c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2204      	movs	r2, #4
 8003414:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003418:	f001 bd59 	b.w	8004ece <GAME_PLAY_Phase_Management+0x27be>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800341c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003420:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800342a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 800342e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003432:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11f      	bne.n	800347e <GAME_PLAY_Phase_Management+0xd6e>
			{
				state_game->action = 0;
 800343e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003442:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800344c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003450:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800345c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003460:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f7fd ffe5 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 800346a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800346e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f93a 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 800347e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003482:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d172      	bne.n	8003574 <GAME_PLAY_Phase_Management+0xe64>
			{
				// Reading Until RFID action += 1 Mean Card Detected

				ST7735_WriteStringNSS(5, 90, "Add 2 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800348e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003492:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800349c:	9203      	str	r2, [sp, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	9202      	str	r2, [sp, #8]
 80034a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a6:	9201      	str	r2, [sp, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	9200      	str	r2, [sp, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <GAME_PLAY_Phase_Management+0xe5c>)
 80034b0:	215a      	movs	r1, #90	; 0x5a
 80034b2:	2005      	movs	r0, #5
 80034b4:	f003 fe67 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80034b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80034c6:	9203      	str	r2, [sp, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80034d0:	9201      	str	r2, [sp, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <GAME_PLAY_Phase_Management+0xe60>)
 80034da:	2169      	movs	r1, #105	; 0x69
 80034dc:	2005      	movs	r0, #5
 80034de:	f003 fe52 	bl	8007186 <ST7735_WriteStringNSS>

				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80034e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80034f0:	9203      	str	r2, [sp, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	9202      	str	r2, [sp, #8]
 80034f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fa:	9201      	str	r2, [sp, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	9200      	str	r2, [sp, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <GAME_PLAY_Phase_Management+0xe58>)
 8003504:	215a      	movs	r1, #90	; 0x5a
 8003506:	2005      	movs	r0, #5
 8003508:	f003 fe3d 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800350c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003510:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800351a:	9203      	str	r2, [sp, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	9202      	str	r2, [sp, #8]
 8003520:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003524:	9201      	str	r2, [sp, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	9200      	str	r2, [sp, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 800352e:	2169      	movs	r1, #105	; 0x69
 8003530:	2005      	movs	r0, #5
 8003532:	f003 fe28 	bl	8007186 <ST7735_WriteStringNSS>

				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 8003536:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800353a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800353e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003542:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003546:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800354a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f7fd fa0e 	bl	8000974 <Player_Reading_Card_Monster_SPS>

					state_game->action = 0;
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
				}
			}
			break;
 8003558:	f001 bcbc 	b.w	8004ed4 <GAME_PLAY_Phase_Management+0x27c4>
 800355c:	2400000c 	.word	0x2400000c
 8003560:	080114dc 	.word	0x080114dc
 8003564:	080114e8 	.word	0x080114e8
 8003568:	080114f0 	.word	0x080114f0
 800356c:	080114fc 	.word	0x080114fc
 8003570:	0801150c 	.word	0x0801150c
			else if (state_game->action == 5)
 8003574:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003578:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d166      	bne.n	8003652 <GAME_PLAY_Phase_Management+0xf42>
				ST7735_WriteStringNSS(5, 90, "Add 1 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003584:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003588:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4bb3      	ldr	r3, [pc, #716]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	9200      	str	r2, [sp, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4aaf      	ldr	r2, [pc, #700]	; (8003864 <GAME_PLAY_Phase_Management+0x1154>)
 80035a6:	215a      	movs	r1, #90	; 0x5a
 80035a8:	2005      	movs	r0, #5
 80035aa:	f003 fdec 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80035ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4ba9      	ldr	r3, [pc, #676]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80035bc:	9203      	str	r2, [sp, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	9200      	str	r2, [sp, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4aa6      	ldr	r2, [pc, #664]	; (8003868 <GAME_PLAY_Phase_Management+0x1158>)
 80035d0:	2169      	movs	r1, #105	; 0x69
 80035d2:	2005      	movs	r0, #5
 80035d4:	f003 fdd7 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80035d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80035e6:	9203      	str	r2, [sp, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	9202      	str	r2, [sp, #8]
 80035ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	9200      	str	r2, [sp, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a9c      	ldr	r2, [pc, #624]	; (800386c <GAME_PLAY_Phase_Management+0x115c>)
 80035fa:	215a      	movs	r1, #90	; 0x5a
 80035fc:	2005      	movs	r0, #5
 80035fe:	f003 fdc2 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003606:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	4b94      	ldr	r3, [pc, #592]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003610:	9203      	str	r2, [sp, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	9202      	str	r2, [sp, #8]
 8003616:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	9200      	str	r2, [sp, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a93      	ldr	r2, [pc, #588]	; (8003870 <GAME_PLAY_Phase_Management+0x1160>)
 8003624:	2169      	movs	r1, #105	; 0x69
 8003626:	2005      	movs	r0, #5
 8003628:	f003 fdad 	bl	8007186 <ST7735_WriteStringNSS>
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800362c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003630:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003634:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003638:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800363c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003640:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7fd f993 	bl	8000974 <Player_Reading_Card_Monster_SPS>
			break;
 800364e:	f001 bc41 	b.w	8004ed4 <GAME_PLAY_Phase_Management+0x27c4>
			else if (state_game->action == 6)
 8003652:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003656:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b06      	cmp	r3, #6
 8003660:	f041 8438 	bne.w	8004ed4 <GAME_PLAY_Phase_Management+0x27c4>
				uint8_t monsterflag = 0 ;
 8003664:	2300      	movs	r3, #0
 8003666:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 800366a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800366e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003678:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800367c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d804      	bhi.n	8003690 <GAME_PLAY_Phase_Management+0xf80>
					monsterflag += 1;
 8003686:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800368a:	3301      	adds	r3, #1
 800368c:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst++;
 8003690:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003694:	3310      	adds	r3, #16
 8003696:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800369a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800369e:	78db      	ldrb	r3, [r3, #3]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d804      	bhi.n	80036ae <GAME_PLAY_Phase_Management+0xf9e>
					monsterflag += 1;
 80036a4:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80036a8:	3301      	adds	r3, #1
 80036aa:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				if (monsterflag == 2)
 80036ae:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	f040 80e6 	bne.w	8003884 <GAME_PLAY_Phase_Management+0x1174>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80036b8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80036bc:	799a      	ldrb	r2, [r3, #6]
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <GAME_PLAY_Phase_Management+0x1164>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	0899      	lsrs	r1, r3, #2
 80036c6:	460b      	mov	r3, r1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	440b      	add	r3, r1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80036d4:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80036d8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80036dc:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3308      	adds	r3, #8
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80036ec:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80036f0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80036f4:	f7fc ffc6 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80036f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8003706:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800370a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800370e:	4611      	mov	r1, r2
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f7fd ff86 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8003716:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800371a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003724:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003728:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800372c:	4611      	mov	r1, r2
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	f7fd ff77 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003734:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003738:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f7fd fe79 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003742:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003746:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003750:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc ff95 	bl	8000684 <YUGIOH_card_copy>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800375a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800375e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2326      	movs	r3, #38	; 0x26
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	215a      	movs	r1, #90	; 0x5a
 8003772:	2000      	movs	r0, #0
 8003774:	f003 fe50 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003778:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800377c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2326      	movs	r3, #38	; 0x26
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	215a      	movs	r1, #90	; 0x5a
 8003790:	2000      	movs	r0, #0
 8003792:	f003 fe41 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800379a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037a4:	9203      	str	r2, [sp, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	9202      	str	r2, [sp, #8]
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <GAME_PLAY_Phase_Management+0x1168>)
 80037b8:	215a      	movs	r1, #90	; 0x5a
 80037ba:	2005      	movs	r0, #5
 80037bc:	f003 fce3 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80037c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037ce:	9203      	str	r2, [sp, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	9202      	str	r2, [sp, #8]
 80037d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	9200      	str	r2, [sp, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <GAME_PLAY_Phase_Management+0x116c>)
 80037e2:	2169      	movs	r1, #105	; 0x69
 80037e4:	2005      	movs	r0, #5
 80037e6:	f003 fcce 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80037ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037ee:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037f8:	9203      	str	r2, [sp, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	9202      	str	r2, [sp, #8]
 80037fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003802:	9201      	str	r2, [sp, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	9200      	str	r2, [sp, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <GAME_PLAY_Phase_Management+0x1170>)
 800380c:	215a      	movs	r1, #90	; 0x5a
 800380e:	2005      	movs	r0, #5
 8003810:	f003 fcb9 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003814:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003818:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003822:	9203      	str	r2, [sp, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <GAME_PLAY_Phase_Management+0x116c>)
 8003836:	2169      	movs	r1, #105	; 0x69
 8003838:	2005      	movs	r0, #5
 800383a:	f003 fca4 	bl	8007186 <ST7735_WriteStringNSS>
					state_game->action = 0;
 800383e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003842:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800384c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003850:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800385c:	f001 bb3a 	b.w	8004ed4 <GAME_PLAY_Phase_Management+0x27c4>
 8003860:	2400000c 	.word	0x2400000c
 8003864:	08011518 	.word	0x08011518
 8003868:	0801150c 	.word	0x0801150c
 800386c:	080114f0 	.word	0x080114f0
 8003870:	080114e8 	.word	0x080114e8
 8003874:	aaaaaaab 	.word	0xaaaaaaab
 8003878:	080114b4 	.word	0x080114b4
 800387c:	08011528 	.word	0x08011528
 8003880:	080114cc 	.word	0x080114cc
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003884:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003888:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2326      	movs	r3, #38	; 0x26
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	215a      	movs	r1, #90	; 0x5a
 800389c:	2000      	movs	r0, #0
 800389e:	f003 fdbb 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80038a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038a6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	2300      	movs	r3, #0
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2326      	movs	r3, #38	; 0x26
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	215a      	movs	r1, #90	; 0x5a
 80038ba:	2000      	movs	r0, #0
 80038bc:	f003 fdac 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80038c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	4bbc      	ldr	r3, [pc, #752]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	9202      	str	r2, [sp, #8]
 80038d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d8:	9201      	str	r2, [sp, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	9200      	str	r2, [sp, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4ab8      	ldr	r2, [pc, #736]	; (8003bc4 <GAME_PLAY_Phase_Management+0x14b4>)
 80038e2:	215a      	movs	r1, #90	; 0x5a
 80038e4:	2005      	movs	r0, #5
 80038e6:	f003 fc4e 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80038ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	4bb2      	ldr	r3, [pc, #712]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80038f8:	9203      	str	r2, [sp, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003902:	9201      	str	r2, [sp, #4]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4aaf      	ldr	r2, [pc, #700]	; (8003bc8 <GAME_PLAY_Phase_Management+0x14b8>)
 800390c:	2169      	movs	r1, #105	; 0x69
 800390e:	2005      	movs	r0, #5
 8003910:	f003 fc39 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003914:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003918:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	4ba7      	ldr	r3, [pc, #668]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 8003922:	9203      	str	r2, [sp, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392c:	9201      	str	r2, [sp, #4]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4aa5      	ldr	r2, [pc, #660]	; (8003bcc <GAME_PLAY_Phase_Management+0x14bc>)
 8003936:	215a      	movs	r1, #90	; 0x5a
 8003938:	2005      	movs	r0, #5
 800393a:	f003 fc24 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800393e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003942:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	4b9d      	ldr	r3, [pc, #628]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 800394c:	9203      	str	r2, [sp, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	9202      	str	r2, [sp, #8]
 8003952:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	9200      	str	r2, [sp, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a9a      	ldr	r2, [pc, #616]	; (8003bc8 <GAME_PLAY_Phase_Management+0x14b8>)
 8003960:	2169      	movs	r1, #105	; 0x69
 8003962:	2005      	movs	r0, #5
 8003964:	f003 fc0f 	bl	8007186 <ST7735_WriteStringNSS>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003968:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800396c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	f7fd fd5f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8003976:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800397a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8003984:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003988:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fc fe75 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 800399a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800399e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80039a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80039b8:	f001 ba8c 	b.w	8004ed4 <GAME_PLAY_Phase_Management+0x27c4>
		case chaining_main_DEF:

			// Current state_game->action = 4
			if(state_game->action == 4)
 80039bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d162      	bne.n	8003a92 <GAME_PLAY_Phase_Management+0x1382>
			{

				ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80039cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	9202      	str	r2, [sp, #8]
 80039e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e4:	9201      	str	r2, [sp, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	9200      	str	r2, [sp, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a78      	ldr	r2, [pc, #480]	; (8003bd0 <GAME_PLAY_Phase_Management+0x14c0>)
 80039ee:	215a      	movs	r1, #90	; 0x5a
 80039f0:	2005      	movs	r0, #5
 80039f2:	f003 fbc8 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80039f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 8003a04:	9203      	str	r2, [sp, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	9202      	str	r2, [sp, #8]
 8003a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0e:	9201      	str	r2, [sp, #4]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	9200      	str	r2, [sp, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6f      	ldr	r2, [pc, #444]	; (8003bd4 <GAME_PLAY_Phase_Management+0x14c4>)
 8003a18:	215a      	movs	r1, #90	; 0x5a
 8003a1a:	2005      	movs	r0, #5
 8003a1c:	f003 fbb3 	bl	8007186 <ST7735_WriteStringNSS>

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8003a20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	789b      	ldrb	r3, [r3, #2]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <GAME_PLAY_Phase_Management+0x135c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a34:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2326      	movs	r3, #38	; 0x26
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	215a      	movs	r1, #90	; 0x5a
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f003 fce5 	bl	8007418 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8003a4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2205      	movs	r2, #5
 8003a5a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8003a5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8003a6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a70:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003a74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a78:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003a7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a80:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f7fd f8df 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8003a8e:	f001 ba24 	b.w	8004eda <GAME_PLAY_Phase_Management+0x27ca>
			else if ((state_game->action == 5 )){
 8003a92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	f041 821b 	bne.w	8004eda <GAME_PLAY_Phase_Management+0x27ca>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003aa8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2326      	movs	r3, #38	; 0x26
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	215a      	movs	r1, #90	; 0x5a
 8003abc:	2000      	movs	r0, #0
 8003abe:	f003 fcab 	bl	8007418 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ac6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ad0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8003ad4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ad8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003adc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f7fd ff89 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 8003aec:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8003af0:	2bff      	cmp	r3, #255	; 0xff
 8003af2:	d05b      	beq.n	8003bac <GAME_PLAY_Phase_Management+0x149c>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003af4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003af8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f7fd fd44 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8003b02:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8003b06:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b0a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3308      	adds	r3, #8
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003b1a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003b1e:	2200      	movs	r2, #0
 8003b20:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003b30:	4619      	mov	r1, r3
 8003b32:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003b36:	f7fc fda5 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8003b3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b48:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8003b52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b60:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003b6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003b8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2206      	movs	r2, #6
 8003b96:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003b9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b9e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	701a      	strb	r2, [r3, #0]
			break;
 8003ba8:	f001 b997 	b.w	8004eda <GAME_PLAY_Phase_Management+0x27ca>
					state_game->action = 4;
 8003bac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	701a      	strb	r2, [r3, #0]
			break;
 8003bba:	f001 b98e 	b.w	8004eda <GAME_PLAY_Phase_Management+0x27ca>
 8003bbe:	bf00      	nop
 8003bc0:	2400000c 	.word	0x2400000c
 8003bc4:	08011534 	.word	0x08011534
 8003bc8:	080114e8 	.word	0x080114e8
 8003bcc:	08011540 	.word	0x08011540
 8003bd0:	08011550 	.word	0x08011550
 8003bd4:	08011568 	.word	0x08011568
		case chaining_main_ATK:

			if(state_game->action == 4)
 8003bd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bdc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d171      	bne.n	8003ccc <GAME_PLAY_Phase_Management+0x15bc>
			{
				ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b79      	ldr	r3, [pc, #484]	; (8003ddc <GAME_PLAY_Phase_Management+0x16cc>)
 8003bf6:	9203      	str	r2, [sp, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	9202      	str	r2, [sp, #8]
 8003bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c00:	9201      	str	r2, [sp, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	9200      	str	r2, [sp, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <GAME_PLAY_Phase_Management+0x16d0>)
 8003c0a:	215a      	movs	r1, #90	; 0x5a
 8003c0c:	2005      	movs	r0, #5
 8003c0e:	f003 faba 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003c12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c16:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	781a      	ldrb	r2, [r3, #0]
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <GAME_PLAY_Phase_Management+0x16cc>)
 8003c20:	9203      	str	r2, [sp, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	9202      	str	r2, [sp, #8]
 8003c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2a:	9201      	str	r2, [sp, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6c      	ldr	r2, [pc, #432]	; (8003de4 <GAME_PLAY_Phase_Management+0x16d4>)
 8003c34:	215a      	movs	r1, #90	; 0x5a
 8003c36:	2005      	movs	r0, #5
 8003c38:	f003 faa5 	bl	8007186 <ST7735_WriteStringNSS>

				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8003c3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	789b      	ldrb	r3, [r3, #2]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d12c      	bne.n	8003ca6 <GAME_PLAY_Phase_Management+0x1596>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003c4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2326      	movs	r3, #38	; 0x26
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	215a      	movs	r1, #90	; 0x5a
 8003c64:	2000      	movs	r0, #0
 8003c66:	f003 fbd7 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003c6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c6e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2326      	movs	r3, #38	; 0x26
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	215a      	movs	r1, #90	; 0x5a
 8003c82:	2000      	movs	r0, #0
 8003c84:	f003 fbc8 	bl	8007418 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8003c88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8003c98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8003ca6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003caa:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cb2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003cb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	6809      	ldr	r1, [r1, #0]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	f7fc ffc2 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8003cc8:	f001 b90a 	b.w	8004ee0 <GAME_PLAY_Phase_Management+0x27d0>
			else if ((state_game->action == 5 )){
 8003ccc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	f041 8101 	bne.w	8004ee0 <GAME_PLAY_Phase_Management+0x27d0>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003cde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ce2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003cec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8003cf0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cf4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003cf8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7fd fe7b 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8003d08:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003d0c:	2bff      	cmp	r3, #255	; 0xff
 8003d0e:	d05b      	beq.n	8003dc8 <GAME_PLAY_Phase_Management+0x16b8>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003d10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d14:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f7fd fc36 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003d1e:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003d22:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d26:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003d36:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003d3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003d52:	f7fc fc97 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8003d56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d5a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d64:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8003d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d7c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003d86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003d94:	3301      	adds	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003da6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003daa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2206      	movs	r2, #6
 8003db2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003db6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
			break;
 8003dc4:	f001 b88c 	b.w	8004ee0 <GAME_PLAY_Phase_Management+0x27d0>
					state_game->action = 4;
 8003dc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dcc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	701a      	strb	r2, [r3, #0]
			break;
 8003dd6:	f001 b883 	b.w	8004ee0 <GAME_PLAY_Phase_Management+0x27d0>
 8003dda:	bf00      	nop
 8003ddc:	2400000c 	.word	0x2400000c
 8003de0:	08011568 	.word	0x08011568
 8003de4:	08011550 	.word	0x08011550
		case activate_effect:

			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8003de8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	4619      	mov	r1, r3
 8003df6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dfa:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003dfe:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8003e0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e20:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003e24:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8003e34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e38:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	f040 834b 	bne.w	80044dc <GAME_PLAY_Phase_Management+0x1dcc>
			{
				ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003e46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	4b83      	ldr	r3, [pc, #524]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003e54:	9203      	str	r2, [sp, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	9202      	str	r2, [sp, #8]
 8003e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5e:	9201      	str	r2, [sp, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	9200      	str	r2, [sp, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7f      	ldr	r2, [pc, #508]	; (8004064 <GAME_PLAY_Phase_Management+0x1954>)
 8003e68:	215a      	movs	r1, #90	; 0x5a
 8003e6a:	2005      	movs	r0, #5
 8003e6c:	f003 f98b 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8003e70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	4b78      	ldr	r3, [pc, #480]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003e7e:	9203      	str	r2, [sp, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e88:	9201      	str	r2, [sp, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	9200      	str	r2, [sp, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a75      	ldr	r2, [pc, #468]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8003e92:	2169      	movs	r1, #105	; 0x69
 8003e94:	2005      	movs	r0, #5
 8003e96:	f003 f976 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	4b6e      	ldr	r3, [pc, #440]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003ea8:	9203      	str	r2, [sp, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb2:	9201      	str	r2, [sp, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	9200      	str	r2, [sp, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6c      	ldr	r2, [pc, #432]	; (800406c <GAME_PLAY_Phase_Management+0x195c>)
 8003ebc:	215a      	movs	r1, #90	; 0x5a
 8003ebe:	2005      	movs	r0, #5
 8003ec0:	f003 f961 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8003ec4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ec8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	4b63      	ldr	r3, [pc, #396]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003ed2:	9203      	str	r2, [sp, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	9202      	str	r2, [sp, #8]
 8003ed8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003edc:	9201      	str	r2, [sp, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	9200      	str	r2, [sp, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a60      	ldr	r2, [pc, #384]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8003ee6:	2169      	movs	r1, #105	; 0x69
 8003ee8:	2005      	movs	r0, #5
 8003eea:	f003 f94c 	bl	8007186 <ST7735_WriteStringNSS>

				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8003eee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ef2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	785a      	ldrb	r2, [r3, #1]
 8003efa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003efe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f080 825d 	bcs.w	80043c8 <GAME_PLAY_Phase_Management+0x1cb8>
				{
					state_game->test = 165;
 8003f0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	22a5      	movs	r2, #165	; 0xa5
 8003f1a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003f1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f30:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003f34:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8003f44:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	f040 8096 	bne.w	800407c <GAME_PLAY_Phase_Management+0x196c>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003f50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fba4 	bl	80016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003f5c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fd16 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						//						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
						state_game->count_chain++;
 8003f6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003f88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003f92:	9203      	str	r2, [sp, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9c:	9201      	str	r2, [sp, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a32      	ldr	r2, [pc, #200]	; (8004070 <GAME_PLAY_Phase_Management+0x1960>)
 8003fa6:	215a      	movs	r1, #90	; 0x5a
 8003fa8:	2005      	movs	r0, #5
 8003faa:	f003 f8ec 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003fae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003fb8:	9203      	str	r2, [sp, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	9202      	str	r2, [sp, #8]
 8003fbe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003fc2:	9201      	str	r2, [sp, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	9200      	str	r2, [sp, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <GAME_PLAY_Phase_Management+0x1964>)
 8003fcc:	2169      	movs	r1, #105	; 0x69
 8003fce:	2005      	movs	r0, #5
 8003fd0:	f003 f8d9 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003fd4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003fde:	9203      	str	r2, [sp, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe8:	9201      	str	r2, [sp, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	9200      	str	r2, [sp, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <GAME_PLAY_Phase_Management+0x1968>)
 8003ff2:	215a      	movs	r1, #90	; 0x5a
 8003ff4:	2005      	movs	r0, #5
 8003ff6:	f003 f8c6 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ffa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8004004:	9203      	str	r2, [sp, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	9202      	str	r2, [sp, #8]
 800400a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8004018:	2169      	movs	r1, #105	; 0x69
 800401a:	2005      	movs	r0, #5
 800401c:	f003 f8b3 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004020:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004024:	f003 fe90 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004028:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2300      	movs	r3, #0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2326      	movs	r3, #38	; 0x26
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	215a      	movs	r1, #90	; 0x5a
 800403c:	2000      	movs	r0, #0
 800403e:	f003 f9eb 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004042:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2326      	movs	r3, #38	; 0x26
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	215a      	movs	r1, #90	; 0x5a
 8004056:	2000      	movs	r0, #0
 8004058:	f003 f9de 	bl	8007418 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 800405c:	f000 bf43 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
 8004060:	2400000c 	.word	0x2400000c
 8004064:	08011584 	.word	0x08011584
 8004068:	08011594 	.word	0x08011594
 800406c:	080115a4 	.word	0x080115a4
 8004070:	080115b8 	.word	0x080115b8
 8004074:	080115c8 	.word	0x080115c8
 8004078:	080115d0 	.word	0x080115d0
					else if (ptrYugiohCard_src->cardSignature == 12)
 800407c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	f040 808c 	bne.w	80041a0 <GAME_PLAY_Phase_Management+0x1a90>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8004088:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7fd fb24 	bl	80016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 800409c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fc76 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80040ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80040c8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	4bb5      	ldr	r3, [pc, #724]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80040d2:	9203      	str	r2, [sp, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	9202      	str	r2, [sp, #8]
 80040d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040dc:	9201      	str	r2, [sp, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4ab1      	ldr	r2, [pc, #708]	; (80043ac <GAME_PLAY_Phase_Management+0x1c9c>)
 80040e6:	215a      	movs	r1, #90	; 0x5a
 80040e8:	2005      	movs	r0, #5
 80040ea:	f003 f84c 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80040ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	4bac      	ldr	r3, [pc, #688]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80040f8:	9203      	str	r2, [sp, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	9202      	str	r2, [sp, #8]
 80040fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	9200      	str	r2, [sp, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4aa9      	ldr	r2, [pc, #676]	; (80043b0 <GAME_PLAY_Phase_Management+0x1ca0>)
 800410c:	2169      	movs	r1, #105	; 0x69
 800410e:	2005      	movs	r0, #5
 8004110:	f003 f839 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004114:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	4ba2      	ldr	r3, [pc, #648]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 800411e:	9203      	str	r2, [sp, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	9202      	str	r2, [sp, #8]
 8004124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004128:	9201      	str	r2, [sp, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	9200      	str	r2, [sp, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4aa0      	ldr	r2, [pc, #640]	; (80043b4 <GAME_PLAY_Phase_Management+0x1ca4>)
 8004132:	215a      	movs	r1, #90	; 0x5a
 8004134:	2005      	movs	r0, #5
 8004136:	f003 f826 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800413a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	4b99      	ldr	r3, [pc, #612]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004144:	9203      	str	r2, [sp, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	9202      	str	r2, [sp, #8]
 800414a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800414e:	9201      	str	r2, [sp, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a98      	ldr	r2, [pc, #608]	; (80043b8 <GAME_PLAY_Phase_Management+0x1ca8>)
 8004158:	2169      	movs	r1, #105	; 0x69
 800415a:	2005      	movs	r0, #5
 800415c:	f003 f813 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004164:	f003 fdf0 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004168:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2326      	movs	r3, #38	; 0x26
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	215a      	movs	r1, #90	; 0x5a
 800417c:	2000      	movs	r0, #0
 800417e:	f003 f94b 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004182:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2326      	movs	r3, #38	; 0x26
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	215a      	movs	r1, #90	; 0x5a
 8004196:	2000      	movs	r0, #0
 8004198:	f003 f93e 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 800419c:	f000 bea3 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80041a0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b0d      	cmp	r3, #13
 80041a8:	d110      	bne.n	80041cc <GAME_PLAY_Phase_Management+0x1abc>
						state_game->test = 166;
 80041aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	22a6      	movs	r2, #166	; 0xa6
 80041b6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80041ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2205      	movs	r2, #5
 80041c6:	701a      	strb	r2, [r3, #0]
			break;
 80041c8:	f000 be8d 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80041cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b0e      	cmp	r3, #14
 80041d4:	d005      	beq.n	80041e2 <GAME_PLAY_Phase_Management+0x1ad2>
 80041d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	f040 8094 	bne.w	800430a <GAME_PLAY_Phase_Management+0x1bfa>
						state_game->test = 133;
 80041e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2285      	movs	r2, #133	; 0x85
 80041ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80041f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fd fb43 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8004206:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd fbc1 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004216:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800421a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	3301      	adds	r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800422a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004232:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 800423c:	9203      	str	r2, [sp, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	9202      	str	r2, [sp, #8]
 8004242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004246:	9201      	str	r2, [sp, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	9200      	str	r2, [sp, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <GAME_PLAY_Phase_Management+0x1cac>)
 8004250:	215a      	movs	r1, #90	; 0x5a
 8004252:	2005      	movs	r0, #5
 8004254:	f002 ff97 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004258:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004262:	9203      	str	r2, [sp, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	9202      	str	r2, [sp, #8]
 8004268:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800426c:	9201      	str	r2, [sp, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <GAME_PLAY_Phase_Management+0x1cb0>)
 8004276:	2169      	movs	r1, #105	; 0x69
 8004278:	2005      	movs	r0, #5
 800427a:	f002 ff84 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800427e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	4b48      	ldr	r3, [pc, #288]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004288:	9203      	str	r2, [sp, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	9202      	str	r2, [sp, #8]
 800428e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	9200      	str	r2, [sp, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <GAME_PLAY_Phase_Management+0x1ca4>)
 800429c:	215a      	movs	r1, #90	; 0x5a
 800429e:	2005      	movs	r0, #5
 80042a0:	f002 ff71 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80042ae:	9203      	str	r2, [sp, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	9200      	str	r2, [sp, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <GAME_PLAY_Phase_Management+0x1cb4>)
 80042c2:	2169      	movs	r1, #105	; 0x69
 80042c4:	2005      	movs	r0, #5
 80042c6:	f002 ff5e 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 80042ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80042ce:	f003 fd3b 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80042d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	2300      	movs	r3, #0
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2326      	movs	r3, #38	; 0x26
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	215a      	movs	r1, #90	; 0x5a
 80042e6:	2000      	movs	r0, #0
 80042e8:	f003 f896 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2326      	movs	r3, #38	; 0x26
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	215a      	movs	r1, #90	; 0x5a
 8004300:	2000      	movs	r0, #0
 8004302:	f003 f889 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004306:	f000 bdee 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					else if(ptrYugiohCard_src->cardSignature == 16)
 800430a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d110      	bne.n	8004336 <GAME_PLAY_Phase_Management+0x1c26>
						state_game->test = 124;
 8004314:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004318:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	227c      	movs	r2, #124	; 0x7c
 8004320:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8004324:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004328:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2205      	movs	r2, #5
 8004330:	701a      	strb	r2, [r3, #0]
			break;
 8004332:	f000 bdd8 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8004336:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b11      	cmp	r3, #17
 800433e:	d108      	bne.n	8004352 <GAME_PLAY_Phase_Management+0x1c42>
						state_game->action = 5;
 8004340:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004344:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2205      	movs	r2, #5
 800434c:	701a      	strb	r2, [r3, #0]
			break;
 800434e:	f000 bdca 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8004352:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b12      	cmp	r3, #18
 800435a:	d005      	beq.n	8004368 <GAME_PLAY_Phase_Management+0x1c58>
 800435c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b13      	cmp	r3, #19
 8004364:	f040 85bf 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8004368:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 85b8 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004376:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd f94e 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004386:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800438a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	3301      	adds	r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800439a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	705a      	strb	r2, [r3, #1]
			break;
 80043a2:	f000 bda0 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
 80043a6:	bf00      	nop
 80043a8:	2400000c 	.word	0x2400000c
 80043ac:	080115b8 	.word	0x080115b8
 80043b0:	080115e0 	.word	0x080115e0
 80043b4:	080115d0 	.word	0x080115d0
 80043b8:	08011594 	.word	0x08011594
 80043bc:	080115ec 	.word	0x080115ec
 80043c0:	080115fc 	.word	0x080115fc
 80043c4:	0801160c 	.word	0x0801160c
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80043c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2326      	movs	r3, #38	; 0x26
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	215a      	movs	r1, #90	; 0x5a
 80043e0:	2000      	movs	r0, #0
 80043e2:	f003 f819 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80043e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2326      	movs	r3, #38	; 0x26
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	215a      	movs	r1, #90	; 0x5a
 80043fe:	2000      	movs	r0, #0
 8004400:	f003 f80a 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004404:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004408:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	4b97      	ldr	r3, [pc, #604]	; (8004670 <GAME_PLAY_Phase_Management+0x1f60>)
 8004412:	9203      	str	r2, [sp, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	9202      	str	r2, [sp, #8]
 8004418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a93      	ldr	r2, [pc, #588]	; (8004674 <GAME_PLAY_Phase_Management+0x1f64>)
 8004426:	215a      	movs	r1, #90	; 0x5a
 8004428:	2005      	movs	r0, #5
 800442a:	f002 feac 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800442e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004432:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <GAME_PLAY_Phase_Management+0x1f60>)
 800443c:	9203      	str	r2, [sp, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004446:	9201      	str	r2, [sp, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	9200      	str	r2, [sp, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <GAME_PLAY_Phase_Management+0x1f68>)
 8004450:	215a      	movs	r1, #90	; 0x5a
 8004452:	2005      	movs	r0, #5
 8004454:	f002 fe97 	bl	8007186 <ST7735_WriteStringNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800445e:	e020      	b.n	80044a2 <GAME_PLAY_Phase_Management+0x1d92>
						state_game->ptrChainUser[i] = &dummyPlayer;
 8004460:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004464:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800446e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	f107 0210 	add.w	r2, r7, #16
 800447a:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 800447c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004480:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800448a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	f107 0210 	add.w	r2, r7, #16
 8004496:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004498:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800449c:	3301      	adds	r3, #1
 800449e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80044a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	ddda      	ble.n	8004460 <GAME_PLAY_Phase_Management+0x1d50>
					state_game->ChainCount = 0;
 80044aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 80044ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80044c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80044d8:	f000 bd05 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
			else if (state_game->action == 5)
 80044dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	f040 80c7 	bne.w	800467c <GAME_PLAY_Phase_Management+0x1f6c>
				state_game->test = 167;
 80044ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	22a7      	movs	r2, #167	; 0xa7
 80044fa:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80044fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004502:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	4619      	mov	r1, r3
 800450c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004510:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004514:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8004524:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	789b      	ldrb	r3, [r3, #2]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d123      	bne.n	8004578 <GAME_PLAY_Phase_Management+0x1e68>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8004530:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc ff7c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 800453c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc f8d3 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 800454c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004550:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800455a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800455e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	3301      	adds	r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800456e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	705a      	strb	r2, [r3, #1]
 8004576:	e028      	b.n	80045ca <GAME_PLAY_Phase_Management+0x1eba>
				else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004578:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d122      	bne.n	80045ca <GAME_PLAY_Phase_Management+0x1eba>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8004584:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc ff52 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 8004590:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc f8a9 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 80045a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2204      	movs	r2, #4
 80045ac:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 80045ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	3301      	adds	r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 80045ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b0d      	cmp	r3, #13
 80045d2:	d110      	bne.n	80045f6 <GAME_PLAY_Phase_Management+0x1ee6>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 80045d4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045de:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80045e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045e6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80045ea:	6809      	ldr	r1, [r1, #0]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f7fc fc8b 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 80045f2:	f000 bc78 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80045f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d110      	bne.n	8004622 <GAME_PLAY_Phase_Management+0x1f12>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8004600:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800460a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800460e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004612:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004616:	6809      	ldr	r1, [r1, #0]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f7fc fd23 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 800461e:	f000 bc62 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8004622:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b11      	cmp	r3, #17
 800462a:	d110      	bne.n	800464e <GAME_PLAY_Phase_Management+0x1f3e>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 800462c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004636:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800463a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800463e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004642:	6809      	ldr	r1, [r1, #0]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	f7fc fbb5 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 800464a:	f000 bc4c 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 800464e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004658:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800465c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004660:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004664:	6809      	ldr	r1, [r1, #0]
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	f7fc f874 	bl	8000754 <Player_Reading_Card>
			break;
 800466c:	f000 bc3b 	b.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
 8004670:	2400000c 	.word	0x2400000c
 8004674:	080113f4 	.word	0x080113f4
 8004678:	08011410 	.word	0x08011410
			else if (state_game->action == 6)
 800467c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004680:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b06      	cmp	r3, #6
 800468a:	f040 842c 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				state_game->test = 169;
 800468e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004692:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	22a9      	movs	r2, #169	; 0xa9
 800469a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800469e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046b0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80046b4:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	3304      	adds	r3, #4
 80046c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 80046c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b0d      	cmp	r3, #13
 80046cc:	f040 819d 	bne.w	8004a0a <GAME_PLAY_Phase_Management+0x22fa>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80046d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	781a      	ldrb	r2, [r3, #0]
 80046d8:	4b66      	ldr	r3, [pc, #408]	; (8004874 <GAME_PLAY_Phase_Management+0x2164>)
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	9202      	str	r2, [sp, #8]
 80046e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e4:	9201      	str	r2, [sp, #4]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	9200      	str	r2, [sp, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a62      	ldr	r2, [pc, #392]	; (8004878 <GAME_PLAY_Phase_Management+0x2168>)
 80046ee:	215a      	movs	r1, #90	; 0x5a
 80046f0:	2005      	movs	r0, #5
 80046f2:	f002 fd48 	bl	8007186 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80046f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	789b      	ldrb	r3, [r3, #2]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80c4 	bne.w	800488c <GAME_PLAY_Phase_Management+0x217c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004704:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	2300      	movs	r3, #0
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2326      	movs	r3, #38	; 0x26
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	215a      	movs	r1, #90	; 0x5a
 8004718:	2000      	movs	r0, #0
 800471a:	f002 fe7d 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 800471e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004722:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	22aa      	movs	r2, #170	; 0xaa
 800472a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800472e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004738:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 800473c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004740:	2200      	movs	r2, #0
 8004742:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004744:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800474e:	4619      	mov	r1, r3
 8004750:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004754:	f7fb ff96 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8004758:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc fffe 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 8004764:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004768:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2204      	movs	r2, #4
 8004770:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004772:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800477c:	4618      	mov	r0, r3
 800477e:	f7fd f90b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004782:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004786:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	3301      	adds	r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004796:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800479e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <GAME_PLAY_Phase_Management+0x2164>)
 80047a8:	9203      	str	r2, [sp, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	9202      	str	r2, [sp, #8]
 80047ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047b2:	9201      	str	r2, [sp, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	9200      	str	r2, [sp, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a30      	ldr	r2, [pc, #192]	; (800487c <GAME_PLAY_Phase_Management+0x216c>)
 80047bc:	215a      	movs	r1, #90	; 0x5a
 80047be:	2005      	movs	r0, #5
 80047c0:	f002 fce1 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80047c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <GAME_PLAY_Phase_Management+0x2164>)
 80047ce:	9203      	str	r2, [sp, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	9202      	str	r2, [sp, #8]
 80047d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80047d8:	9201      	str	r2, [sp, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	9200      	str	r2, [sp, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a27      	ldr	r2, [pc, #156]	; (8004880 <GAME_PLAY_Phase_Management+0x2170>)
 80047e2:	2169      	movs	r1, #105	; 0x69
 80047e4:	2005      	movs	r0, #5
 80047e6:	f002 fcce 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <GAME_PLAY_Phase_Management+0x2164>)
 80047f4:	9203      	str	r2, [sp, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	9202      	str	r2, [sp, #8]
 80047fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <GAME_PLAY_Phase_Management+0x2174>)
 8004808:	215a      	movs	r1, #90	; 0x5a
 800480a:	2005      	movs	r0, #5
 800480c:	f002 fcbb 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004810:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <GAME_PLAY_Phase_Management+0x2164>)
 800481a:	9203      	str	r2, [sp, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	9202      	str	r2, [sp, #8]
 8004820:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004824:	9201      	str	r2, [sp, #4]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	9200      	str	r2, [sp, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <GAME_PLAY_Phase_Management+0x2178>)
 800482e:	2169      	movs	r1, #105	; 0x69
 8004830:	2005      	movs	r0, #5
 8004832:	f002 fca8 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800483a:	f003 fa85 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800483e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	2300      	movs	r3, #0
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2326      	movs	r3, #38	; 0x26
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	215a      	movs	r1, #90	; 0x5a
 8004852:	2000      	movs	r0, #0
 8004854:	f002 fde0 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004858:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2326      	movs	r3, #38	; 0x26
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	215a      	movs	r1, #90	; 0x5a
 800486c:	2000      	movs	r0, #0
 800486e:	f002 fdd3 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004872:	e338      	b.n	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
 8004874:	2400000c 	.word	0x2400000c
 8004878:	08011450 	.word	0x08011450
 800487c:	080115b8 	.word	0x080115b8
 8004880:	08011618 	.word	0x08011618
 8004884:	080115d0 	.word	0x080115d0
 8004888:	08011594 	.word	0x08011594
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800488c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 8326 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800489a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2326      	movs	r3, #38	; 0x26
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	215a      	movs	r1, #90	; 0x5a
 80048ae:	2000      	movs	r0, #0
 80048b0:	f002 fdb2 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80048b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	22ab      	movs	r2, #171	; 0xab
 80048c0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80048c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 80048d2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80048d6:	2201      	movs	r2, #1
 80048d8:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80048da:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048e4:	4619      	mov	r1, r3
 80048e6:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80048ea:	f7fb fecb 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80048ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc ff33 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 80048fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2204      	movs	r2, #4
 8004906:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004908:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd f840 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004918:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800491c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	3301      	adds	r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800492c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004934:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 800493e:	9203      	str	r2, [sp, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	9202      	str	r2, [sp, #8]
 8004944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004948:	9201      	str	r2, [sp, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	9200      	str	r2, [sp, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4aa1      	ldr	r2, [pc, #644]	; (8004bd8 <GAME_PLAY_Phase_Management+0x24c8>)
 8004952:	215a      	movs	r1, #90	; 0x5a
 8004954:	2005      	movs	r0, #5
 8004956:	f002 fc16 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800495a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	4b9c      	ldr	r3, [pc, #624]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004964:	9203      	str	r2, [sp, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	9202      	str	r2, [sp, #8]
 800496a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800496e:	9201      	str	r2, [sp, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	9200      	str	r2, [sp, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a99      	ldr	r2, [pc, #612]	; (8004bdc <GAME_PLAY_Phase_Management+0x24cc>)
 8004978:	2169      	movs	r1, #105	; 0x69
 800497a:	2005      	movs	r0, #5
 800497c:	f002 fc03 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004980:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	4b92      	ldr	r3, [pc, #584]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 800498a:	9203      	str	r2, [sp, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	9202      	str	r2, [sp, #8]
 8004990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004994:	9201      	str	r2, [sp, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	9200      	str	r2, [sp, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a90      	ldr	r2, [pc, #576]	; (8004be0 <GAME_PLAY_Phase_Management+0x24d0>)
 800499e:	215a      	movs	r1, #90	; 0x5a
 80049a0:	2005      	movs	r0, #5
 80049a2:	f002 fbf0 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80049a6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	9202      	str	r2, [sp, #8]
 80049b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	9200      	str	r2, [sp, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a88      	ldr	r2, [pc, #544]	; (8004be4 <GAME_PLAY_Phase_Management+0x24d4>)
 80049c4:	2169      	movs	r1, #105	; 0x69
 80049c6:	2005      	movs	r0, #5
 80049c8:	f002 fbdd 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 80049cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049d0:	f003 f9ba 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80049d4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	2300      	movs	r3, #0
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2326      	movs	r3, #38	; 0x26
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	215a      	movs	r1, #90	; 0x5a
 80049e8:	2000      	movs	r0, #0
 80049ea:	f002 fd15 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80049ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2326      	movs	r3, #38	; 0x26
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	215a      	movs	r1, #90	; 0x5a
 8004a02:	2000      	movs	r0, #0
 8004a04:	f002 fd08 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004a08:	e26d      	b.n	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8004a0a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	f040 81aa 	bne.w	8004d6a <GAME_PLAY_Phase_Management+0x265a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004a16:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2326      	movs	r3, #38	; 0x26
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	215a      	movs	r1, #90	; 0x5a
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f002 fcf4 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004a30:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004a3a:	9203      	str	r2, [sp, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a44:	9201      	str	r2, [sp, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a66      	ldr	r2, [pc, #408]	; (8004be8 <GAME_PLAY_Phase_Management+0x24d8>)
 8004a4e:	215a      	movs	r1, #90	; 0x5a
 8004a50:	2005      	movs	r0, #5
 8004a52:	f002 fb98 	bl	8007186 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8004a56:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 80c4 	bne.w	8004bec <GAME_PLAY_Phase_Management+0x24dc>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004a64:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2326      	movs	r3, #38	; 0x26
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	215a      	movs	r1, #90	; 0x5a
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f002 fccd 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8004a7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	22aa      	movs	r2, #170	; 0xaa
 8004a8a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004a8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a98:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8004a9c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004aa4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004ab4:	f7fb fde6 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004ab8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc feb8 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004ac4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ac8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004ad2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc ff5b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ae6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	3301      	adds	r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004af6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004afe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004b08:	9203      	str	r2, [sp, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	9202      	str	r2, [sp, #8]
 8004b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b12:	9201      	str	r2, [sp, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	9200      	str	r2, [sp, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <GAME_PLAY_Phase_Management+0x24c8>)
 8004b1c:	215a      	movs	r1, #90	; 0x5a
 8004b1e:	2005      	movs	r0, #5
 8004b20:	f002 fb31 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b24:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004b2e:	9203      	str	r2, [sp, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	9202      	str	r2, [sp, #8]
 8004b34:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b38:	9201      	str	r2, [sp, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	9200      	str	r2, [sp, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <GAME_PLAY_Phase_Management+0x24cc>)
 8004b42:	2169      	movs	r1, #105	; 0x69
 8004b44:	2005      	movs	r0, #5
 8004b46:	f002 fb1e 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b4a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004b54:	9203      	str	r2, [sp, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	9202      	str	r2, [sp, #8]
 8004b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5e:	9201      	str	r2, [sp, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <GAME_PLAY_Phase_Management+0x24d0>)
 8004b68:	215a      	movs	r1, #90	; 0x5a
 8004b6a:	2005      	movs	r0, #5
 8004b6c:	f002 fb0b 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b70:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <GAME_PLAY_Phase_Management+0x24c4>)
 8004b7a:	9203      	str	r2, [sp, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	9202      	str	r2, [sp, #8]
 8004b80:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b84:	9201      	str	r2, [sp, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	9200      	str	r2, [sp, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <GAME_PLAY_Phase_Management+0x24d4>)
 8004b8e:	2169      	movs	r1, #105	; 0x69
 8004b90:	2005      	movs	r0, #5
 8004b92:	f002 faf8 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b9a:	f003 f8d5 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b9e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2326      	movs	r3, #38	; 0x26
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	215a      	movs	r1, #90	; 0x5a
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f002 fc30 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004bb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2326      	movs	r3, #38	; 0x26
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	215a      	movs	r1, #90	; 0x5a
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f002 fc23 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004bd2:	e188      	b.n	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
 8004bd4:	2400000c 	.word	0x2400000c
 8004bd8:	080115b8 	.word	0x080115b8
 8004bdc:	08011618 	.word	0x08011618
 8004be0:	080115d0 	.word	0x080115d0
 8004be4:	08011594 	.word	0x08011594
 8004be8:	08011450 	.word	0x08011450
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004bec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 8176 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004bfa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2326      	movs	r3, #38	; 0x26
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	215a      	movs	r1, #90	; 0x5a
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f002 fc02 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004c14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	22ab      	movs	r2, #171	; 0xab
 8004c20:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004c24:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c2e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004c32:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c36:	2201      	movs	r2, #1
 8004c38:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004c3a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c44:	4619      	mov	r1, r3
 8004c46:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004c4a:	f7fb fd1b 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004c4e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fded 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004c5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2204      	movs	r2, #4
 8004c66:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004c68:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fc fe90 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004c78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	3301      	adds	r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004c94:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	4ba4      	ldr	r3, [pc, #656]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004c9e:	9203      	str	r2, [sp, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	9202      	str	r2, [sp, #8]
 8004ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca8:	9201      	str	r2, [sp, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	9200      	str	r2, [sp, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4aa0      	ldr	r2, [pc, #640]	; (8004f34 <GAME_PLAY_Phase_Management+0x2824>)
 8004cb2:	215a      	movs	r1, #90	; 0x5a
 8004cb4:	2005      	movs	r0, #5
 8004cb6:	f002 fa66 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004cba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	4b9b      	ldr	r3, [pc, #620]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004cc4:	9203      	str	r2, [sp, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	9202      	str	r2, [sp, #8]
 8004cca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cce:	9201      	str	r2, [sp, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	9200      	str	r2, [sp, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a98      	ldr	r2, [pc, #608]	; (8004f38 <GAME_PLAY_Phase_Management+0x2828>)
 8004cd8:	2169      	movs	r1, #105	; 0x69
 8004cda:	2005      	movs	r0, #5
 8004cdc:	f002 fa53 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004ce0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	4b91      	ldr	r3, [pc, #580]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004cea:	9203      	str	r2, [sp, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	9202      	str	r2, [sp, #8]
 8004cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf4:	9201      	str	r2, [sp, #4]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	9200      	str	r2, [sp, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a8f      	ldr	r2, [pc, #572]	; (8004f3c <GAME_PLAY_Phase_Management+0x282c>)
 8004cfe:	215a      	movs	r1, #90	; 0x5a
 8004d00:	2005      	movs	r0, #5
 8004d02:	f002 fa40 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004d06:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	4b88      	ldr	r3, [pc, #544]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004d10:	9203      	str	r2, [sp, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	9202      	str	r2, [sp, #8]
 8004d16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004d1a:	9201      	str	r2, [sp, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	9200      	str	r2, [sp, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a87      	ldr	r2, [pc, #540]	; (8004f40 <GAME_PLAY_Phase_Management+0x2830>)
 8004d24:	2169      	movs	r1, #105	; 0x69
 8004d26:	2005      	movs	r0, #5
 8004d28:	f002 fa2d 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d30:	f003 f80a 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004d34:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2326      	movs	r3, #38	; 0x26
 8004d44:	2280      	movs	r2, #128	; 0x80
 8004d46:	215a      	movs	r1, #90	; 0x5a
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f002 fb65 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004d4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2326      	movs	r3, #38	; 0x26
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	215a      	movs	r1, #90	; 0x5a
 8004d62:	2000      	movs	r0, #0
 8004d64:	f002 fb58 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004d68:	e0bd      	b.n	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8004d6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b11      	cmp	r3, #17
 8004d72:	f040 80b8 	bne.w	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8004d76:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d80:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8004d84:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004d94:	f7fb fc76 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8004d98:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fc fdc0 	bl	800192c <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8004dac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004db0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2204      	movs	r2, #4
 8004db8:	701a      	strb	r2, [r3, #0]
					YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004dba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fc fde7 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
					state_game->count_chain++;
 8004dca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dde:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004de6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	4b50      	ldr	r3, [pc, #320]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004df0:	9203      	str	r2, [sp, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	9202      	str	r2, [sp, #8]
 8004df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfa:	9201      	str	r2, [sp, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	9200      	str	r2, [sp, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a4c      	ldr	r2, [pc, #304]	; (8004f34 <GAME_PLAY_Phase_Management+0x2824>)
 8004e04:	215a      	movs	r1, #90	; 0x5a
 8004e06:	2005      	movs	r0, #5
 8004e08:	f002 f9bd 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004e0c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004e16:	9203      	str	r2, [sp, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	9202      	str	r2, [sp, #8]
 8004e1c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e20:	9201      	str	r2, [sp, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	9200      	str	r2, [sp, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a46      	ldr	r2, [pc, #280]	; (8004f44 <GAME_PLAY_Phase_Management+0x2834>)
 8004e2a:	2169      	movs	r1, #105	; 0x69
 8004e2c:	2005      	movs	r0, #5
 8004e2e:	f002 f9aa 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004e32:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004e3c:	9203      	str	r2, [sp, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	9202      	str	r2, [sp, #8]
 8004e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	9200      	str	r2, [sp, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <GAME_PLAY_Phase_Management+0x282c>)
 8004e50:	215a      	movs	r1, #90	; 0x5a
 8004e52:	2005      	movs	r0, #5
 8004e54:	f002 f997 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004e58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <GAME_PLAY_Phase_Management+0x2820>)
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	9202      	str	r2, [sp, #8]
 8004e68:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e6c:	9201      	str	r2, [sp, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	9200      	str	r2, [sp, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <GAME_PLAY_Phase_Management+0x2830>)
 8004e76:	2169      	movs	r1, #105	; 0x69
 8004e78:	2005      	movs	r0, #5
 8004e7a:	f002 f984 	bl	8007186 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8004e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e82:	f002 ff61 	bl	8007d48 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004e86:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	2300      	movs	r3, #0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2326      	movs	r3, #38	; 0x26
 8004e96:	2280      	movs	r2, #128	; 0x80
 8004e98:	215a      	movs	r1, #90	; 0x5a
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f002 fabc 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004ea0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2326      	movs	r3, #38	; 0x26
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	215a      	movs	r1, #90	; 0x5a
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f002 faaf 	bl	8007418 <ST7735_FillRectangleNSS>
			break;
 8004eba:	e014      	b.n	8004ee6 <GAME_PLAY_Phase_Management+0x27d6>
			break;
 8004ebc:	bf00      	nop
 8004ebe:	f001 ba84 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ec2:	bf00      	nop
 8004ec4:	f001 ba81 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ec8:	bf00      	nop
 8004eca:	f001 ba7e 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ece:	bf00      	nop
 8004ed0:	f001 ba7b 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ed4:	bf00      	nop
 8004ed6:	f001 ba78 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004eda:	bf00      	nop
 8004edc:	f001 ba75 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ee0:	bf00      	nop
 8004ee2:	f001 ba72 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
			break;
 8004ee6:	bf00      	nop
		}
		break;
 8004ee8:	f001 ba6f 	b.w	80063ca <GAME_PLAY_Phase_Management+0x3cba>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8004eec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ef0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004ef4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ef8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	f7fc fed4 	bl	8001cac <LCDvalue>
			switch(PBS){
 8004f04:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	f201 8260 	bhi.w	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <GAME_PLAY_Phase_Management+0x2804>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	080063ab 	.word	0x080063ab
 8004f18:	08004f49 	.word	0x08004f49
 8004f1c:	08005679 	.word	0x08005679
 8004f20:	08005343 	.word	0x08005343
 8004f24:	080059ad 	.word	0x080059ad
 8004f28:	08005c8d 	.word	0x08005c8d
 8004f2c:	080061d1 	.word	0x080061d1
 8004f30:	2400000c 	.word	0x2400000c
 8004f34:	080115b8 	.word	0x080115b8
 8004f38:	08011618 	.word	0x08011618
 8004f3c:	080115d0 	.word	0x080115d0
 8004f40:	08011594 	.word	0x08011594
 8004f44:	08011628 	.word	0x08011628
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004f48:	4ba2      	ldr	r3, [pc, #648]	; (80051d4 <GAME_PLAY_Phase_Management+0x2ac4>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	9202      	str	r2, [sp, #8]
 8004f4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f52:	9201      	str	r2, [sp, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a9f      	ldr	r2, [pc, #636]	; (80051d8 <GAME_PLAY_Phase_Management+0x2ac8>)
 8004f5c:	2123      	movs	r1, #35	; 0x23
 8004f5e:	206e      	movs	r0, #110	; 0x6e
 8004f60:	f002 f87d 	bl	800705e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004f64:	4b9b      	ldr	r3, [pc, #620]	; (80051d4 <GAME_PLAY_Phase_Management+0x2ac4>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	9202      	str	r2, [sp, #8]
 8004f6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f6e:	9201      	str	r2, [sp, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	9200      	str	r2, [sp, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a98      	ldr	r2, [pc, #608]	; (80051d8 <GAME_PLAY_Phase_Management+0x2ac8>)
 8004f78:	2123      	movs	r1, #35	; 0x23
 8004f7a:	206e      	movs	r0, #110	; 0x6e
 8004f7c:	f002 f8b9 	bl	80070f2 <ST7735_WriteString1>
				if(state_game->action == 50){
 8004f80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f84:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b32      	cmp	r3, #50	; 0x32
 8004f8e:	f040 809b 	bne.w	80050c8 <GAME_PLAY_Phase_Management+0x29b8>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8004f92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f96:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004f9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f9e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004fa2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fa6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	6809      	ldr	r1, [r1, #0]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	f7fb fda4 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4889      	ldr	r0, [pc, #548]	; (80051dc <GAME_PLAY_Phase_Management+0x2acc>)
 8004fb8:	f006 f814 	bl	800afe4 <HAL_GPIO_ReadPin>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f041 81f5 	bne.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004fc4:	4886      	ldr	r0, [pc, #536]	; (80051e0 <GAME_PLAY_Phase_Management+0x2ad0>)
 8004fc6:	f009 fa0b 	bl	800e3e0 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8004fca:	4986      	ldr	r1, [pc, #536]	; (80051e4 <GAME_PLAY_Phase_Management+0x2ad4>)
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004fd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2326      	movs	r3, #38	; 0x26
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	215a      	movs	r1, #90	; 0x5a
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f002 fa11 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004ff6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ffa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	4b79      	ldr	r3, [pc, #484]	; (80051e8 <GAME_PLAY_Phase_Management+0x2ad8>)
 8005004:	9203      	str	r2, [sp, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	9202      	str	r2, [sp, #8]
 800500a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800500e:	9201      	str	r2, [sp, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	9200      	str	r2, [sp, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a75      	ldr	r2, [pc, #468]	; (80051ec <GAME_PLAY_Phase_Management+0x2adc>)
 8005018:	215a      	movs	r1, #90	; 0x5a
 800501a:	200f      	movs	r0, #15
 800501c:	f002 f8b3 	bl	8007186 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8005020:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005024:	f002 fe90 	bl	8007d48 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005028:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800502c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	2300      	movs	r3, #0
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2326      	movs	r3, #38	; 0x26
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	215a      	movs	r1, #90	; 0x5a
 8005040:	2000      	movs	r0, #0
 8005042:	f002 f9e9 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005046:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800504a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2326      	movs	r3, #38	; 0x26
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	215a      	movs	r1, #90	; 0x5a
 800505e:	2000      	movs	r0, #0
 8005060:	f002 f9da 	bl	8007418 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8005064:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005068:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8005072:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005076:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f7fc fd14 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8005080:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005084:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800508e:	2b02      	cmp	r3, #2
 8005090:	d108      	bne.n	80050a4 <GAME_PLAY_Phase_Management+0x2994>
							state_game->MainGame_State = second_player;
 8005092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005096:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80050a2:	e007      	b.n	80050b4 <GAME_PLAY_Phase_Management+0x29a4>
						}
						else{
							state_game->MainGame_State = first_player;
 80050a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 80050b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 80050c4:	f001 b973 	b.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
				else if(state_game->action == 51){
 80050c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b33      	cmp	r3, #51	; 0x33
 80050d6:	f041 816a 	bne.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80050da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	2300      	movs	r3, #0
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2326      	movs	r3, #38	; 0x26
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	215a      	movs	r1, #90	; 0x5a
 80050f2:	2000      	movs	r0, #0
 80050f4:	f002 f990 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80050f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2326      	movs	r3, #38	; 0x26
 800510c:	2280      	movs	r2, #128	; 0x80
 800510e:	215a      	movs	r1, #90	; 0x5a
 8005110:	2000      	movs	r0, #0
 8005112:	f002 f981 	bl	8007418 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800511c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005120:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800512a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 800512e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005132:	799b      	ldrb	r3, [r3, #6]
 8005134:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8005138:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800513c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3338      	adds	r3, #56	; 0x38
 8005144:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8005148:	2300      	movs	r3, #0
 800514a:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 800514e:	e013      	b.n	8005178 <GAME_PLAY_Phase_Management+0x2a68>
						if(ptrYugiohCard_dst->cardData == 0){
 8005150:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <GAME_PLAY_Phase_Management+0x2a54>
							check_def_mon++;
 800515a:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800515e:	3301      	adds	r3, #1
 8005160:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8005164:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005168:	3310      	adds	r3, #16
 800516a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 800516e:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8005172:	3301      	adds	r3, #1
 8005174:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8005178:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 800517c:	2b02      	cmp	r3, #2
 800517e:	d9e7      	bls.n	8005150 <GAME_PLAY_Phase_Management+0x2a40>
					uint8_t flag_can_atk = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8005186:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800518a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005194:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8005198:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800519c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3338      	adds	r3, #56	; 0x38
 80051a4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 80051ae:	e02c      	b.n	800520a <GAME_PLAY_Phase_Management+0x2afa>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 80051b0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d11a      	bne.n	80051f6 <GAME_PLAY_Phase_Management+0x2ae6>
							if(ptrYugiohCard_dst->cardState == 1){
 80051c0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d112      	bne.n	80051f0 <GAME_PLAY_Phase_Management+0x2ae0>
								flag_can_atk = 2;
 80051ca:	2302      	movs	r3, #2
 80051cc:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 80051d0:	e01f      	b.n	8005212 <GAME_PLAY_Phase_Management+0x2b02>
 80051d2:	bf00      	nop
 80051d4:	2400000c 	.word	0x2400000c
 80051d8:	08011638 	.word	0x08011638
 80051dc:	58020800 	.word	0x58020800
 80051e0:	240002e8 	.word	0x240002e8
 80051e4:	24000ea0 	.word	0x24000ea0
 80051e8:	24000014 	.word	0x24000014
 80051ec:	08011444 	.word	0x08011444
								flag_can_atk = 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 80051f6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051fa:	3310      	adds	r3, #16
 80051fc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8005200:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8005204:	3301      	adds	r3, #1
 8005206:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 800520a:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 800520e:	2b02      	cmp	r3, #2
 8005210:	d9ce      	bls.n	80051b0 <GAME_PLAY_Phase_Management+0x2aa0>
					if (check_def_mon < 3)
 8005212:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8005216:	2b02      	cmp	r3, #2
 8005218:	d810      	bhi.n	800523c <GAME_PLAY_Phase_Management+0x2b2c>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 800521a:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 800521e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005222:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	4413      	add	r3, r2
 800522e:	3304      	adds	r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <GAME_PLAY_Phase_Management+0x2b2c>
							flag_can_atk = 1;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 800523c:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8005240:	2b02      	cmp	r3, #2
 8005242:	d165      	bne.n	8005310 <GAME_PLAY_Phase_Management+0x2c00>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8005244:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005248:	7a1b      	ldrb	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d047      	beq.n	80052de <GAME_PLAY_Phase_Management+0x2bce>
 800524e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005252:	789b      	ldrb	r3, [r3, #2]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d142      	bne.n	80052de <GAME_PLAY_Phase_Management+0x2bce>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8005258:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800525c:	7a1b      	ldrb	r3, [r3, #8]
 800525e:	3b01      	subs	r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005266:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8005268:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800526c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005276:	4619      	mov	r1, r3
 8005278:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800527c:	f7fb fa02 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8005280:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005284:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800528e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8005292:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8005296:	2b03      	cmp	r3, #3
 8005298:	d104      	bne.n	80052a4 <GAME_PLAY_Phase_Management+0x2b94>
								ptrYugiohCard_dst->targetPosition = 99;
 800529a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800529e:	2263      	movs	r2, #99	; 0x63
 80052a0:	71da      	strb	r2, [r3, #7]
 80052a2:	e004      	b.n	80052ae <GAME_PLAY_Phase_Management+0x2b9e>
								ptrYugiohCard_dst->targetPosition = targetpos;
 80052a4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80052a8:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 80052ac:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 80052ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	f7fc f8bc 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 80052bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2234      	movs	r2, #52	; 0x34
 80052c8:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 80052ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80052da:	f001 b868 	b.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
							state_game->test = 222;
 80052de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	22de      	movs	r2, #222	; 0xde
 80052ea:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 80052ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2232      	movs	r2, #50	; 0x32
 80052fa:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80052fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005300:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800530c:	f001 b84f 	b.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
						state_game->test = 223;
 8005310:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005314:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	22df      	movs	r2, #223	; 0xdf
 800531c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8005320:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005324:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2232      	movs	r2, #50	; 0x32
 800532c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800532e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005332:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800533e:	f001 b836 	b.w	80063ae <GAME_PLAY_Phase_Management+0x3c9e>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005342:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005346:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	4bc5      	ldr	r3, [pc, #788]	; (8005664 <GAME_PLAY_Phase_Management+0x2f54>)
 8005350:	9203      	str	r2, [sp, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	9202      	str	r2, [sp, #8]
 8005356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800535a:	9201      	str	r2, [sp, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	9200      	str	r2, [sp, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4ac1      	ldr	r2, [pc, #772]	; (8005668 <GAME_PLAY_Phase_Management+0x2f58>)
 8005364:	215a      	movs	r1, #90	; 0x5a
 8005366:	2005      	movs	r0, #5
 8005368:	f001 ff0d 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800536c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005370:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	4bba      	ldr	r3, [pc, #744]	; (8005664 <GAME_PLAY_Phase_Management+0x2f54>)
 800537a:	9203      	str	r2, [sp, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	9202      	str	r2, [sp, #8]
 8005380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005384:	9201      	str	r2, [sp, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	9200      	str	r2, [sp, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4ab7      	ldr	r2, [pc, #732]	; (800566c <GAME_PLAY_Phase_Management+0x2f5c>)
 800538e:	2169      	movs	r1, #105	; 0x69
 8005390:	2005      	movs	r0, #5
 8005392:	f001 fef8 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005396:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800539a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	4bb0      	ldr	r3, [pc, #704]	; (8005664 <GAME_PLAY_Phase_Management+0x2f54>)
 80053a4:	9203      	str	r2, [sp, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	9202      	str	r2, [sp, #8]
 80053aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ae:	9201      	str	r2, [sp, #4]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	9200      	str	r2, [sp, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4aae      	ldr	r2, [pc, #696]	; (8005670 <GAME_PLAY_Phase_Management+0x2f60>)
 80053b8:	215a      	movs	r1, #90	; 0x5a
 80053ba:	2005      	movs	r0, #5
 80053bc:	f001 fee3 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80053c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053c4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	4ba5      	ldr	r3, [pc, #660]	; (8005664 <GAME_PLAY_Phase_Management+0x2f54>)
 80053ce:	9203      	str	r2, [sp, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	9202      	str	r2, [sp, #8]
 80053d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	9200      	str	r2, [sp, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4aa4      	ldr	r2, [pc, #656]	; (8005674 <GAME_PLAY_Phase_Management+0x2f64>)
 80053e2:	2169      	movs	r1, #105	; 0x69
 80053e4:	2005      	movs	r0, #5
 80053e6:	f001 fece 	bl	8007186 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80053ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b34      	cmp	r3, #52	; 0x34
 80053f8:	d141      	bne.n	800547e <GAME_PLAY_Phase_Management+0x2d6e>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 80053fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	789b      	ldrb	r3, [r3, #2]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d115      	bne.n	8005436 <GAME_PLAY_Phase_Management+0x2d26>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800540a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800540e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2204      	movs	r2, #4
 8005416:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 800541a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800541e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2236      	movs	r2, #54	; 0x36
 8005426:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8005428:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800542c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8005436:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800543a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800543e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005442:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8005446:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800544a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	6809      	ldr	r1, [r1, #0]
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	f7fb fbfa 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8005458:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800545c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005460:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005464:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8005468:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800546c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	6809      	ldr	r1, [r1, #0]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	f7fb feeb 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 800547a:	f000 bf9a 	b.w	80063b2 <GAME_PLAY_Phase_Management+0x3ca2>
				else if ((state_game->action == 53 ))
 800547e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005482:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b35      	cmp	r3, #53	; 0x35
 800548c:	f040 8791 	bne.w	80063b2 <GAME_PLAY_Phase_Management+0x3ca2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005490:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005494:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	2300      	movs	r3, #0
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2326      	movs	r3, #38	; 0x26
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	215a      	movs	r1, #90	; 0x5a
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 ffb5 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80054ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054b2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	2326      	movs	r3, #38	; 0x26
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	215a      	movs	r1, #90	; 0x5a
 80054c6:	2000      	movs	r0, #0
 80054c8:	f001 ffa6 	bl	8007418 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80054cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054da:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80054de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054e2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80054e6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	f7fc fa84 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 80054f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d14f      	bne.n	80055a0 <GAME_PLAY_Phase_Management+0x2e90>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8005500:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005504:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	f7fc f83e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 800550e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005512:	2200      	movs	r2, #0
 8005514:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8005516:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800551a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005524:	4619      	mov	r1, r3
 8005526:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800552a:	f7fb f8ab 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 800552e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005532:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800553c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 8005546:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800554a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005554:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800555e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005562:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800556c:	3301      	adds	r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005574:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 800557e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005582:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800558e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005592:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2234      	movs	r2, #52	; 0x34
 800559a:	701a      	strb	r2, [r3, #0]
				break;
 800559c:	f000 bf09 	b.w	80063b2 <GAME_PLAY_Phase_Management+0x3ca2>
						if (idx != 255)
 80055a0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80055a4:	2bff      	cmp	r3, #255	; 0xff
 80055a6:	f000 8704 	beq.w	80063b2 <GAME_PLAY_Phase_Management+0x3ca2>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80055aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	f7fb ffe9 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80055b8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80055bc:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80055c0:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	3308      	adds	r3, #8
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	4413      	add	r3, r2
 80055cc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80055d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80055d4:	2200      	movs	r2, #0
 80055d6:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80055d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80055e6:	4619      	mov	r1, r3
 80055e8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80055ec:	f7fb f84a 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80055f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80055fe:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8005608:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800560c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005616:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8005620:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005624:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800562e:	3301      	adds	r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005636:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005640:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005644:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8005650:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005654:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2234      	movs	r2, #52	; 0x34
 800565c:	701a      	strb	r2, [r3, #0]
				break;
 800565e:	f000 bea8 	b.w	80063b2 <GAME_PLAY_Phase_Management+0x3ca2>
 8005662:	bf00      	nop
 8005664:	2400000c 	.word	0x2400000c
 8005668:	0801163c 	.word	0x0801163c
 800566c:	0801164c 	.word	0x0801164c
 8005670:	08011658 	.word	0x08011658
 8005674:	08011668 	.word	0x08011668
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005678:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800567c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	4bc4      	ldr	r3, [pc, #784]	; (8005998 <GAME_PLAY_Phase_Management+0x3288>)
 8005686:	9203      	str	r2, [sp, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	9202      	str	r2, [sp, #8]
 800568c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005690:	9201      	str	r2, [sp, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	9200      	str	r2, [sp, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4ac0      	ldr	r2, [pc, #768]	; (800599c <GAME_PLAY_Phase_Management+0x328c>)
 800569a:	215a      	movs	r1, #90	; 0x5a
 800569c:	2005      	movs	r0, #5
 800569e:	f001 fd72 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80056a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	4bba      	ldr	r3, [pc, #744]	; (8005998 <GAME_PLAY_Phase_Management+0x3288>)
 80056b0:	9203      	str	r2, [sp, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	9202      	str	r2, [sp, #8]
 80056b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ba:	9201      	str	r2, [sp, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	9200      	str	r2, [sp, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4ab7      	ldr	r2, [pc, #732]	; (80059a0 <GAME_PLAY_Phase_Management+0x3290>)
 80056c4:	2169      	movs	r1, #105	; 0x69
 80056c6:	2005      	movs	r0, #5
 80056c8:	f001 fd5d 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80056cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	4baf      	ldr	r3, [pc, #700]	; (8005998 <GAME_PLAY_Phase_Management+0x3288>)
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	9202      	str	r2, [sp, #8]
 80056e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e4:	9201      	str	r2, [sp, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	9200      	str	r2, [sp, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4aad      	ldr	r2, [pc, #692]	; (80059a4 <GAME_PLAY_Phase_Management+0x3294>)
 80056ee:	215a      	movs	r1, #90	; 0x5a
 80056f0:	2005      	movs	r0, #5
 80056f2:	f001 fd48 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80056f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	4ba5      	ldr	r3, [pc, #660]	; (8005998 <GAME_PLAY_Phase_Management+0x3288>)
 8005704:	9203      	str	r2, [sp, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	9202      	str	r2, [sp, #8]
 800570a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570e:	9201      	str	r2, [sp, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4aa4      	ldr	r2, [pc, #656]	; (80059a8 <GAME_PLAY_Phase_Management+0x3298>)
 8005718:	2169      	movs	r1, #105	; 0x69
 800571a:	2005      	movs	r0, #5
 800571c:	f001 fd33 	bl	8007186 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8005720:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005724:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b34      	cmp	r3, #52	; 0x34
 800572e:	d141      	bne.n	80057b4 <GAME_PLAY_Phase_Management+0x30a4>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8005730:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005734:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	789b      	ldrb	r3, [r3, #2]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <GAME_PLAY_Phase_Management+0x305c>
						//affect
						state_game->action = 54;
 8005740:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005744:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2236      	movs	r2, #54	; 0x36
 800574c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800574e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005752:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2204      	movs	r2, #4
 800575a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 800575e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005762:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800576c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005770:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005774:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005778:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800577c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005780:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	6809      	ldr	r1, [r1, #0]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	f7fb fa5f 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800578e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005792:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800579a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800579e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	6809      	ldr	r1, [r1, #0]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	f7fb fd50 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 80057b0:	f000 be01 	b.w	80063b6 <GAME_PLAY_Phase_Management+0x3ca6>
				else if ((state_game->action == 53 )){
 80057b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b35      	cmp	r3, #53	; 0x35
 80057c2:	f040 85f8 	bne.w	80063b6 <GAME_PLAY_Phase_Management+0x3ca6>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80057c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	2300      	movs	r3, #0
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2326      	movs	r3, #38	; 0x26
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	215a      	movs	r1, #90	; 0x5a
 80057de:	2000      	movs	r0, #0
 80057e0:	f001 fe1a 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80057e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057e8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2326      	movs	r3, #38	; 0x26
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	215a      	movs	r1, #90	; 0x5a
 80057fc:	2000      	movs	r0, #0
 80057fe:	f001 fe0b 	bl	8007418 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8005802:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005806:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005810:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8005814:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005818:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800581c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	f7fc f8e9 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 800582c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d14f      	bne.n	80058d6 <GAME_PLAY_Phase_Management+0x31c6>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8005836:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800583a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	f7fb fea3 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8005844:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005848:	2200      	movs	r2, #0
 800584a:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800584c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005850:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800585a:	4619      	mov	r1, r3
 800585c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005860:	f7fa ff10 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8005864:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005868:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005872:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800587c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005880:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800588a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8005894:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005898:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80058a2:	3301      	adds	r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80058b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2203      	movs	r2, #3
 80058c0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80058c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2234      	movs	r2, #52	; 0x34
 80058d0:	701a      	strb	r2, [r3, #0]
				break;
 80058d2:	f000 bd70 	b.w	80063b6 <GAME_PLAY_Phase_Management+0x3ca6>
						if (idx != 255)
 80058d6:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80058da:	2bff      	cmp	r3, #255	; 0xff
 80058dc:	f000 856b 	beq.w	80063b6 <GAME_PLAY_Phase_Management+0x3ca6>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80058e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	f7fb fe4e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80058ee:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80058f2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80058f6:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	3308      	adds	r3, #8
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	4413      	add	r3, r2
 8005902:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005906:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800590a:	2200      	movs	r2, #0
 800590c:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800590e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005912:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800591c:	4619      	mov	r1, r3
 800591e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8005922:	f7fa feaf 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8005926:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800592a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005934:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800593e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005942:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800594c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8005956:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800595a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005964:	3301      	adds	r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800596c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005976:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800597a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8005986:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800598a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2234      	movs	r2, #52	; 0x34
 8005992:	701a      	strb	r2, [r3, #0]
				break;
 8005994:	f000 bd0f 	b.w	80063b6 <GAME_PLAY_Phase_Management+0x3ca6>
 8005998:	2400000c 	.word	0x2400000c
 800599c:	08011658 	.word	0x08011658
 80059a0:	08011674 	.word	0x08011674
 80059a4:	0801167c 	.word	0x0801167c
 80059a8:	0801168c 	.word	0x0801168c
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80059ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	4bb2      	ldr	r3, [pc, #712]	; (8005c84 <GAME_PLAY_Phase_Management+0x3574>)
 80059ba:	9203      	str	r2, [sp, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	9202      	str	r2, [sp, #8]
 80059c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	9200      	str	r2, [sp, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4aae      	ldr	r2, [pc, #696]	; (8005c88 <GAME_PLAY_Phase_Management+0x3578>)
 80059ce:	215a      	movs	r1, #90	; 0x5a
 80059d0:	2005      	movs	r0, #5
 80059d2:	f001 fbd8 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80059d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	4ba8      	ldr	r3, [pc, #672]	; (8005c84 <GAME_PLAY_Phase_Management+0x3574>)
 80059e4:	9203      	str	r2, [sp, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	9202      	str	r2, [sp, #8]
 80059ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ee:	9201      	str	r2, [sp, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	9200      	str	r2, [sp, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4aa4      	ldr	r2, [pc, #656]	; (8005c88 <GAME_PLAY_Phase_Management+0x3578>)
 80059f8:	215a      	movs	r1, #90	; 0x5a
 80059fa:	2005      	movs	r0, #5
 80059fc:	f001 fbc3 	bl	8007186 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8005a00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a12:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005a16:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	4413      	add	r3, r2
 8005a20:	3304      	adds	r3, #4
 8005a22:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8005a26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	4619      	mov	r1, r3
 8005a34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a38:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005a3c:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 8005a4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b36      	cmp	r3, #54	; 0x36
 8005a5a:	f040 84ae 	bne.w	80063ba <GAME_PLAY_Phase_Management+0x3caa>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8005a5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	785a      	ldrb	r2, [r3, #1]
 8005a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	f080 80a3 	bcs.w	8005bc4 <GAME_PLAY_Phase_Management+0x34b4>
					{
						state_game->test = 165;
 8005a7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	22a5      	movs	r2, #165	; 0xa5
 8005a8a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8005a8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a92:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005aa0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005aa4:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	3304      	adds	r3, #4
 8005ab0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8005ab4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d11d      	bne.n	8005afa <GAME_PLAY_Phase_Management+0x33ea>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 8005abe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2262      	movs	r2, #98	; 0x62
 8005ac6:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005aca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fb ff5f 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							//							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
							state_game->count_chain++;
 8005ada:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ade:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005aee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8005af6:	f000 bc60 	b.w	80063ba <GAME_PLAY_Phase_Management+0x3caa>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8005afa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b0e      	cmp	r3, #14
 8005b02:	d004      	beq.n	8005b0e <GAME_PLAY_Phase_Management+0x33fe>
 8005b04:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d129      	bne.n	8005b62 <GAME_PLAY_Phase_Management+0x3452>
							state_game->test = 133;
 8005b0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2285      	movs	r2, #133	; 0x85
 8005b1a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8005b1e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fb fead 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005b32:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fb ff2b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							state_game->count_chain++;
 8005b42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	705a      	strb	r2, [r3, #1]
				break;
 8005b5e:	f000 bc2c 	b.w	80063ba <GAME_PLAY_Phase_Management+0x3caa>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8005b62:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b14      	cmp	r3, #20
 8005b6a:	f040 8426 	bne.w	80063ba <GAME_PLAY_Phase_Management+0x3caa>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005b6e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fb ff0d 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							if(state_game->MainGame_State == first_player){
 8005b7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d108      	bne.n	8005ba2 <GAME_PLAY_Phase_Management+0x3492>
								state_game->MainGame_State = second_player;
 8005b90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005ba0:	e007      	b.n	8005bb2 <GAME_PLAY_Phase_Management+0x34a2>
								state_game->MainGame_State = first_player;
 8005ba2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ba6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8005bb2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bb6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8005bc2:	e3fa      	b.n	80063ba <GAME_PLAY_Phase_Management+0x3caa>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005bc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bc8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2326      	movs	r3, #38	; 0x26
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	215a      	movs	r1, #90	; 0x5a
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f001 fc1b 	bl	8007418 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005be2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005be6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2326      	movs	r3, #38	; 0x26
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	215a      	movs	r1, #90	; 0x5a
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f001 fc0c 	bl	8007418 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005c00:	2300      	movs	r3, #0
 8005c02:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005c06:	e020      	b.n	8005c4a <GAME_PLAY_Phase_Management+0x353a>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8005c08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c0c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005c16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f107 0210 	add.w	r2, r7, #16
 8005c22:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8005c24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c28:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005c32:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	f107 0210 	add.w	r2, r7, #16
 8005c3e:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005c40:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005c44:	3301      	adds	r3, #1
 8005c46:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005c4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	ddda      	ble.n	8005c08 <GAME_PLAY_Phase_Management+0x34f8>
						state_game->ChainCount = 0;
 8005c52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8005c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c66:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2232      	movs	r2, #50	; 0x32
 8005c6e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8005c70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005c80:	e39b      	b.n	80063ba <GAME_PLAY_Phase_Management+0x3caa>
 8005c82:	bf00      	nop
 8005c84:	2400000c 	.word	0x2400000c
 8005c88:	0801169c 	.word	0x0801169c
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8005c8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c90:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c9a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8005c9e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8005ca8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005cac:	79db      	ldrb	r3, [r3, #7]
 8005cae:	2b63      	cmp	r3, #99	; 0x63
 8005cb0:	d122      	bne.n	8005cf8 <GAME_PLAY_Phase_Management+0x35e8>
				{
					playerDef->life_point -= atk*100;
 8005cb2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cb6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	889a      	ldrh	r2, [r3, #4]
 8005cbe:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	0249      	lsls	r1, r1, #9
 8005cc8:	1ac9      	subs	r1, r1, r3
 8005cca:	0089      	lsls	r1, r1, #2
 8005ccc:	4419      	add	r1, r3
 8005cce:	00c9      	lsls	r1, r1, #3
 8005cd0:	1acb      	subs	r3, r1, r3
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cde:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005ce6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2206      	movs	r2, #6
 8005cf2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->PlyerAction_Battle_Substate = after_calculate;
						}

					}
				}
				break;
 8005cf6:	e362      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8005cf8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005cfc:	79db      	ldrb	r3, [r3, #7]
 8005cfe:	2b62      	cmp	r3, #98	; 0x62
 8005d00:	d108      	bne.n	8005d14 <GAME_PLAY_Phase_Management+0x3604>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005d02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2206      	movs	r2, #6
 8005d0e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005d12:	e354      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8005d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d18:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8005d24:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005d28:	79db      	ldrb	r3, [r3, #7]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d30:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005d34:	010b      	lsls	r3, r1, #4
 8005d36:	3308      	adds	r3, #8
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8005d40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2236      	movs	r2, #54	; 0x36
 8005d4c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8005d50:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005d54:	789b      	ldrb	r3, [r3, #2]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 8100 	bne.w	8005f5c <GAME_PLAY_Phase_Management+0x384c>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005d5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	4b77      	ldr	r3, [pc, #476]	; (8005f48 <GAME_PLAY_Phase_Management+0x3838>)
 8005d6a:	9203      	str	r2, [sp, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	9202      	str	r2, [sp, #8]
 8005d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d74:	9201      	str	r2, [sp, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	9200      	str	r2, [sp, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a73      	ldr	r2, [pc, #460]	; (8005f4c <GAME_PLAY_Phase_Management+0x383c>)
 8005d7e:	215a      	movs	r1, #90	; 0x5a
 8005d80:	2005      	movs	r0, #5
 8005d82:	f001 fa00 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005d86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <GAME_PLAY_Phase_Management+0x3838>)
 8005d94:	9203      	str	r2, [sp, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	9202      	str	r2, [sp, #8]
 8005d9a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005d9e:	9201      	str	r2, [sp, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	9200      	str	r2, [sp, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6a      	ldr	r2, [pc, #424]	; (8005f50 <GAME_PLAY_Phase_Management+0x3840>)
 8005da8:	2169      	movs	r1, #105	; 0x69
 8005daa:	2005      	movs	r0, #5
 8005dac:	f001 f9eb 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005db0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005db4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	4b62      	ldr	r3, [pc, #392]	; (8005f48 <GAME_PLAY_Phase_Management+0x3838>)
 8005dbe:	9203      	str	r2, [sp, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	9202      	str	r2, [sp, #8]
 8005dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc8:	9201      	str	r2, [sp, #4]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	9200      	str	r2, [sp, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a60      	ldr	r2, [pc, #384]	; (8005f54 <GAME_PLAY_Phase_Management+0x3844>)
 8005dd2:	215a      	movs	r1, #90	; 0x5a
 8005dd4:	2005      	movs	r0, #5
 8005dd6:	f001 f9d6 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005dda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dde:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	4b58      	ldr	r3, [pc, #352]	; (8005f48 <GAME_PLAY_Phase_Management+0x3838>)
 8005de8:	9203      	str	r2, [sp, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	9202      	str	r2, [sp, #8]
 8005dee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005df2:	9201      	str	r2, [sp, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	9200      	str	r2, [sp, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a57      	ldr	r2, [pc, #348]	; (8005f58 <GAME_PLAY_Phase_Management+0x3848>)
 8005dfc:	2169      	movs	r1, #105	; 0x69
 8005dfe:	2005      	movs	r0, #5
 8005e00:	f001 f9c1 	bl	8007186 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8005e04:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005e08:	795b      	ldrb	r3, [r3, #5]
 8005e0a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8005e0e:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005e12:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d25e      	bcs.n	8005ed8 <GAME_PLAY_Phase_Management+0x37c8>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005e1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2326      	movs	r3, #38	; 0x26
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	215a      	movs	r1, #90	; 0x5a
 8005e32:	2000      	movs	r0, #0
 8005e34:	f001 faf0 	bl	8007418 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005e38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e3c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2326      	movs	r3, #38	; 0x26
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	215a      	movs	r1, #90	; 0x5a
 8005e50:	2000      	movs	r0, #0
 8005e52:	f001 fae1 	bl	8007418 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8005e56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	889a      	ldrh	r2, [r3, #4]
 8005e62:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8005e66:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005e6a:	1acb      	subs	r3, r1, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4619      	mov	r1, r3
 8005e70:	0249      	lsls	r1, r1, #9
 8005e72:	1ac9      	subs	r1, r1, r3
 8005e74:	0089      	lsls	r1, r1, #2
 8005e76:	4419      	add	r1, r3
 8005e78:	00c9      	lsls	r1, r1, #3
 8005e7a:	1acb      	subs	r3, r1, r3
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4413      	add	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005e90:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005e94:	799b      	ldrb	r3, [r3, #6]
 8005e96:	4619      	mov	r1, r3
 8005e98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e9c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005ea0:	010b      	lsls	r3, r1, #4
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	441a      	add	r2, r3
 8005ea8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005eac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f7fb fbb5 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005eb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ebc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f7fb fab7 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005ec6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005eca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005ed6:	e272      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
						else if(atk > def){
 8005ed8:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005edc:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	f240 826c 	bls.w	80063be <GAME_PLAY_Phase_Management+0x3cae>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005ee6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005eea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2326      	movs	r3, #38	; 0x26
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	215a      	movs	r1, #90	; 0x5a
 8005efe:	2000      	movs	r0, #0
 8005f00:	f001 fa8a 	bl	8007418 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005f04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f08:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2326      	movs	r3, #38	; 0x26
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	215a      	movs	r1, #90	; 0x5a
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f001 fa7b 	bl	8007418 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005f22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f26:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f2a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	f7fb fb77 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005f34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f38:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2206      	movs	r2, #6
 8005f40:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005f44:	e23b      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
 8005f46:	bf00      	nop
 8005f48:	2400000c 	.word	0x2400000c
 8005f4c:	080116ac 	.word	0x080116ac
 8005f50:	080116bc 	.word	0x080116bc
 8005f54:	080116cc 	.word	0x080116cc
 8005f58:	080116dc 	.word	0x080116dc
					else if(ptrYugiohCard_dst->cardState == 1){
 8005f5c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005f60:	789b      	ldrb	r3, [r3, #2]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 822b 	bne.w	80063be <GAME_PLAY_Phase_Management+0x3cae>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005f68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f6c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	4b91      	ldr	r3, [pc, #580]	; (80061bc <GAME_PLAY_Phase_Management+0x3aac>)
 8005f76:	9203      	str	r2, [sp, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	9202      	str	r2, [sp, #8]
 8005f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f80:	9201      	str	r2, [sp, #4]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	9200      	str	r2, [sp, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a8d      	ldr	r2, [pc, #564]	; (80061c0 <GAME_PLAY_Phase_Management+0x3ab0>)
 8005f8a:	215a      	movs	r1, #90	; 0x5a
 8005f8c:	2005      	movs	r0, #5
 8005f8e:	f001 f8fa 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005f92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	4b87      	ldr	r3, [pc, #540]	; (80061bc <GAME_PLAY_Phase_Management+0x3aac>)
 8005fa0:	9203      	str	r2, [sp, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005faa:	9201      	str	r2, [sp, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	9200      	str	r2, [sp, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a84      	ldr	r2, [pc, #528]	; (80061c4 <GAME_PLAY_Phase_Management+0x3ab4>)
 8005fb4:	2169      	movs	r1, #105	; 0x69
 8005fb6:	2005      	movs	r0, #5
 8005fb8:	f001 f8e5 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005fbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fc0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	4b7c      	ldr	r3, [pc, #496]	; (80061bc <GAME_PLAY_Phase_Management+0x3aac>)
 8005fca:	9203      	str	r2, [sp, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	9202      	str	r2, [sp, #8]
 8005fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd4:	9201      	str	r2, [sp, #4]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	9200      	str	r2, [sp, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7a      	ldr	r2, [pc, #488]	; (80061c8 <GAME_PLAY_Phase_Management+0x3ab8>)
 8005fde:	215a      	movs	r1, #90	; 0x5a
 8005fe0:	2005      	movs	r0, #5
 8005fe2:	f001 f8d0 	bl	8007186 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005fe6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	4b72      	ldr	r3, [pc, #456]	; (80061bc <GAME_PLAY_Phase_Management+0x3aac>)
 8005ff4:	9203      	str	r2, [sp, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005ffe:	9201      	str	r2, [sp, #4]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	9200      	str	r2, [sp, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a71      	ldr	r2, [pc, #452]	; (80061cc <GAME_PLAY_Phase_Management+0x3abc>)
 8006008:	2169      	movs	r1, #105	; 0x69
 800600a:	2005      	movs	r0, #5
 800600c:	f001 f8bb 	bl	8007186 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8006010:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 800601a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800601e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	223c      	movs	r2, #60	; 0x3c
 8006026:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 800602a:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 800602e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8006032:	429a      	cmp	r2, r3
 8006034:	d266      	bcs.n	8006104 <GAME_PLAY_Phase_Management+0x39f4>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8006036:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800603a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2326      	movs	r3, #38	; 0x26
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	215a      	movs	r1, #90	; 0x5a
 800604e:	2000      	movs	r0, #0
 8006050:	f001 f9e2 	bl	8007418 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8006054:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006058:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	2300      	movs	r3, #0
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	2326      	movs	r3, #38	; 0x26
 8006068:	2280      	movs	r2, #128	; 0x80
 800606a:	215a      	movs	r1, #90	; 0x5a
 800606c:	2000      	movs	r0, #0
 800606e:	f001 f9d3 	bl	8007418 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8006072:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006076:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	223d      	movs	r2, #61	; 0x3d
 800607e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8006082:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006086:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	889a      	ldrh	r2, [r3, #4]
 800608e:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8006092:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	0249      	lsls	r1, r1, #9
 800609e:	1ac9      	subs	r1, r1, r3
 80060a0:	0089      	lsls	r1, r1, #2
 80060a2:	4419      	add	r1, r3
 80060a4:	00c9      	lsls	r1, r1, #3
 80060a6:	1acb      	subs	r3, r1, r3
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80060bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80060c0:	799b      	ldrb	r3, [r3, #6]
 80060c2:	4619      	mov	r1, r3
 80060c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060c8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80060cc:	010b      	lsls	r3, r1, #4
 80060ce:	3308      	adds	r3, #8
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	441a      	add	r2, r3
 80060d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80060dc:	4611      	mov	r1, r2
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	f7fb fa9f 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80060e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f7fb f9a1 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80060f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2206      	movs	r2, #6
 80060fe:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8006102:	e15c      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
						else if(atk > atk2){
 8006104:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8006108:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 800610c:	429a      	cmp	r2, r3
 800610e:	f240 8156 	bls.w	80063be <GAME_PLAY_Phase_Management+0x3cae>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8006112:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006116:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	2300      	movs	r3, #0
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2326      	movs	r3, #38	; 0x26
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	215a      	movs	r1, #90	; 0x5a
 800612a:	2000      	movs	r0, #0
 800612c:	f001 f974 	bl	8007418 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8006130:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006134:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2326      	movs	r3, #38	; 0x26
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	215a      	movs	r1, #90	; 0x5a
 8006148:	2000      	movs	r0, #0
 800614a:	f001 f965 	bl	8007418 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 800614e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006152:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2246      	movs	r2, #70	; 0x46
 800615a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 800615e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006162:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	889a      	ldrh	r2, [r3, #4]
 800616a:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 800616e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8006172:	1acb      	subs	r3, r1, r3
 8006174:	b29b      	uxth	r3, r3
 8006176:	4619      	mov	r1, r3
 8006178:	0249      	lsls	r1, r1, #9
 800617a:	1ac9      	subs	r1, r1, r3
 800617c:	0089      	lsls	r1, r1, #2
 800617e:	4419      	add	r1, r3
 8006180:	00c9      	lsls	r1, r1, #3
 8006182:	1acb      	subs	r3, r1, r3
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	b29b      	uxth	r3, r3
 8006188:	4413      	add	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006190:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8006198:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800619c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80061a0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f7fb fa3c 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80061aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2206      	movs	r2, #6
 80061b6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80061ba:	e100      	b.n	80063be <GAME_PLAY_Phase_Management+0x3cae>
 80061bc:	2400000c 	.word	0x2400000c
 80061c0:	080116ac 	.word	0x080116ac
 80061c4:	080116f0 	.word	0x080116f0
 80061c8:	080116cc 	.word	0x080116cc
 80061cc:	08011700 	.word	0x08011700
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80061d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	4b7f      	ldr	r3, [pc, #508]	; (80063dc <GAME_PLAY_Phase_Management+0x3ccc>)
 80061de:	9203      	str	r2, [sp, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	9202      	str	r2, [sp, #8]
 80061e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061e8:	9201      	str	r2, [sp, #4]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	9200      	str	r2, [sp, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a7b      	ldr	r2, [pc, #492]	; (80063e0 <GAME_PLAY_Phase_Management+0x3cd0>)
 80061f2:	215a      	movs	r1, #90	; 0x5a
 80061f4:	2005      	movs	r0, #5
 80061f6:	f000 ffc6 	bl	8007186 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80061fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	4b75      	ldr	r3, [pc, #468]	; (80063dc <GAME_PLAY_Phase_Management+0x3ccc>)
 8006208:	9203      	str	r2, [sp, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	9202      	str	r2, [sp, #8]
 800620e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	9200      	str	r2, [sp, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a72      	ldr	r2, [pc, #456]	; (80063e4 <GAME_PLAY_Phase_Management+0x3cd4>)
 800621c:	215a      	movs	r1, #90	; 0x5a
 800621e:	2005      	movs	r0, #5
 8006220:	f000 ffb1 	bl	8007186 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8006224:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006228:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006232:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 8006236:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800623a:	f7fa fa5a 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 800623e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006242:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	889b      	ldrh	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <GAME_PLAY_Phase_Management+0x3b52>
 800624e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006252:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	889b      	ldrh	r3, [r3, #4]
 800625a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800625e:	4293      	cmp	r3, r2
 8006260:	d94b      	bls.n	80062fa <GAME_PLAY_Phase_Management+0x3bea>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8006262:	2301      	movs	r3, #1
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2326      	movs	r3, #38	; 0x26
 800626c:	2280      	movs	r2, #128	; 0x80
 800626e:	215a      	movs	r1, #90	; 0x5a
 8006270:	2000      	movs	r0, #0
 8006272:	f001 f8d1 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8006276:	2300      	movs	r3, #0
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	2300      	movs	r3, #0
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2326      	movs	r3, #38	; 0x26
 8006280:	2280      	movs	r2, #128	; 0x80
 8006282:	215a      	movs	r1, #90	; 0x5a
 8006284:	2000      	movs	r0, #0
 8006286:	f001 f8c7 	bl	8007418 <ST7735_FillRectangleNSS>
					HAL_Delay(200);
 800628a:	20c8      	movs	r0, #200	; 0xc8
 800628c:	f001 fd5c 	bl	8007d48 <HAL_Delay>
					ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,playerAtk->displayNSS);
 8006290:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006294:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781a      	ldrb	r2, [r3, #0]
 800629c:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <GAME_PLAY_Phase_Management+0x3cd8>)
 800629e:	9203      	str	r2, [sp, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	9202      	str	r2, [sp, #8]
 80062a4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	9200      	str	r2, [sp, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a4e      	ldr	r2, [pc, #312]	; (80063ec <GAME_PLAY_Phase_Management+0x3cdc>)
 80062b2:	215a      	movs	r1, #90	; 0x5a
 80062b4:	2014      	movs	r0, #20
 80062b6:	f000 ff66 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerDef->displayNSS);
 80062ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062be:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <GAME_PLAY_Phase_Management+0x3cd8>)
 80062c8:	9203      	str	r2, [sp, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	9202      	str	r2, [sp, #8]
 80062ce:	221f      	movs	r2, #31
 80062d0:	9201      	str	r2, [sp, #4]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	9200      	str	r2, [sp, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a45      	ldr	r2, [pc, #276]	; (80063f0 <GAME_PLAY_Phase_Management+0x3ce0>)
 80062da:	215a      	movs	r1, #90	; 0x5a
 80062dc:	200f      	movs	r0, #15
 80062de:	f000 ff52 	bl	8007186 <ST7735_WriteStringNSS>
					HAL_Delay(200);
 80062e2:	20c8      	movs	r0, #200	; 0xc8
 80062e4:	f001 fd30 	bl	8007d48 <HAL_Delay>
					state_game->MainGame_State = Game_Ended;
 80062e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2204      	movs	r2, #4
 80062f4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 80062f8:	e062      	b.n	80063c0 <GAME_PLAY_Phase_Management+0x3cb0>
					state_game->action = 50;
 80062fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2232      	movs	r2, #50	; 0x32
 8006306:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8006308:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800630c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2326      	movs	r3, #38	; 0x26
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	215a      	movs	r1, #90	; 0x5a
 8006320:	2000      	movs	r0, #0
 8006322:	f001 f879 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8006326:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800632a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	2300      	movs	r3, #0
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	2326      	movs	r3, #38	; 0x26
 800633a:	2280      	movs	r2, #128	; 0x80
 800633c:	215a      	movs	r1, #90	; 0x5a
 800633e:	2000      	movs	r0, #0
 8006340:	f001 f86a 	bl	8007418 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8006344:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006348:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	4b22      	ldr	r3, [pc, #136]	; (80063dc <GAME_PLAY_Phase_Management+0x3ccc>)
 8006352:	9203      	str	r2, [sp, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	9202      	str	r2, [sp, #8]
 8006358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800635c:	9201      	str	r2, [sp, #4]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	9200      	str	r2, [sp, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <GAME_PLAY_Phase_Management+0x3cd0>)
 8006366:	215a      	movs	r1, #90	; 0x5a
 8006368:	2005      	movs	r0, #5
 800636a:	f000 ff0c 	bl	8007186 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800636e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006372:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <GAME_PLAY_Phase_Management+0x3ccc>)
 800637c:	9203      	str	r2, [sp, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	9202      	str	r2, [sp, #8]
 8006382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	9200      	str	r2, [sp, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <GAME_PLAY_Phase_Management+0x3cd4>)
 8006390:	215a      	movs	r1, #90	; 0x5a
 8006392:	2005      	movs	r0, #5
 8006394:	f000 fef7 	bl	8007186 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8006398:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800639c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80063a8:	e00a      	b.n	80063c0 <GAME_PLAY_Phase_Management+0x3cb0>
				break;
 80063aa:	bf00      	nop
 80063ac:	e00f      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
				break;
 80063ae:	bf00      	nop
 80063b0:	e00d      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
				break;
 80063b2:	bf00      	nop
 80063b4:	e00b      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
				break;
 80063b6:	bf00      	nop
 80063b8:	e009      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
				break;
 80063ba:	bf00      	nop
 80063bc:	e007      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
				break;
 80063be:	bf00      	nop
			}
			break;
 80063c0:	e005      	b.n	80063ce <GAME_PLAY_Phase_Management+0x3cbe>
		break;
 80063c2:	bf00      	nop
 80063c4:	e004      	b.n	80063d0 <GAME_PLAY_Phase_Management+0x3cc0>
		break;
 80063c6:	bf00      	nop
 80063c8:	e002      	b.n	80063d0 <GAME_PLAY_Phase_Management+0x3cc0>
		break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <GAME_PLAY_Phase_Management+0x3cc0>
			break;
 80063ce:	bf00      	nop
	}
}
 80063d0:	bf00      	nop
 80063d2:	f507 7719 	add.w	r7, r7, #612	; 0x264
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd90      	pop	{r4, r7, pc}
 80063da:	bf00      	nop
 80063dc:	2400000c 	.word	0x2400000c
 80063e0:	08011714 	.word	0x08011714
 80063e4:	08011724 	.word	0x08011724
 80063e8:	24000014 	.word	0x24000014
 80063ec:	08011338 	.word	0x08011338
 80063f0:	08011318 	.word	0x08011318

080063f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80063f8:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <SystemInit+0xfc>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <SystemInit+0xfc>)
 8006400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006408:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <SystemInit+0xfc>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	4a38      	ldr	r2, [pc, #224]	; (80064f0 <SystemInit+0xfc>)
 800640e:	f043 0310 	orr.w	r3, r3, #16
 8006412:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006414:	4b37      	ldr	r3, [pc, #220]	; (80064f4 <SystemInit+0x100>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	2b06      	cmp	r3, #6
 800641e:	d807      	bhi.n	8006430 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006420:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <SystemInit+0x100>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f023 030f 	bic.w	r3, r3, #15
 8006428:	4a32      	ldr	r2, [pc, #200]	; (80064f4 <SystemInit+0x100>)
 800642a:	f043 0307 	orr.w	r3, r3, #7
 800642e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006430:	4b31      	ldr	r3, [pc, #196]	; (80064f8 <SystemInit+0x104>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a30      	ldr	r2, [pc, #192]	; (80064f8 <SystemInit+0x104>)
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800643c:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <SystemInit+0x104>)
 800643e:	2200      	movs	r2, #0
 8006440:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006442:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <SystemInit+0x104>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	492c      	ldr	r1, [pc, #176]	; (80064f8 <SystemInit+0x104>)
 8006448:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <SystemInit+0x108>)
 800644a:	4013      	ands	r3, r2
 800644c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800644e:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <SystemInit+0x100>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <SystemInit+0x100>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 030f 	bic.w	r3, r3, #15
 8006462:	4a24      	ldr	r2, [pc, #144]	; (80064f4 <SystemInit+0x100>)
 8006464:	f043 0307 	orr.w	r3, r3, #7
 8006468:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800646a:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <SystemInit+0x104>)
 800646c:	2200      	movs	r2, #0
 800646e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006470:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <SystemInit+0x104>)
 8006472:	2200      	movs	r2, #0
 8006474:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <SystemInit+0x104>)
 8006478:	2200      	movs	r2, #0
 800647a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800647c:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <SystemInit+0x104>)
 800647e:	4a20      	ldr	r2, [pc, #128]	; (8006500 <SystemInit+0x10c>)
 8006480:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006482:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <SystemInit+0x104>)
 8006484:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <SystemInit+0x110>)
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <SystemInit+0x104>)
 800648a:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <SystemInit+0x114>)
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <SystemInit+0x104>)
 8006490:	2200      	movs	r2, #0
 8006492:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <SystemInit+0x104>)
 8006496:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <SystemInit+0x114>)
 8006498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800649a:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <SystemInit+0x104>)
 800649c:	2200      	movs	r2, #0
 800649e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80064a0:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <SystemInit+0x104>)
 80064a2:	4a19      	ldr	r2, [pc, #100]	; (8006508 <SystemInit+0x114>)
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <SystemInit+0x104>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064ac:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <SystemInit+0x104>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a11      	ldr	r2, [pc, #68]	; (80064f8 <SystemInit+0x104>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <SystemInit+0x104>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <SystemInit+0x118>)
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <SystemInit+0x118>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <SystemInit+0x11c>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <SystemInit+0x120>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d6:	d202      	bcs.n	80064de <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <SystemInit+0x124>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <SystemInit+0x128>)
 80064e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80064e4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80064e6:	bf00      	nop
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	e000ed00 	.word	0xe000ed00
 80064f4:	52002000 	.word	0x52002000
 80064f8:	58024400 	.word	0x58024400
 80064fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8006500:	02020200 	.word	0x02020200
 8006504:	01ff0000 	.word	0x01ff0000
 8006508:	01010280 	.word	0x01010280
 800650c:	580000c0 	.word	0x580000c0
 8006510:	5c001000 	.word	0x5c001000
 8006514:	ffff0000 	.word	0xffff0000
 8006518:	51008108 	.word	0x51008108
 800651c:	52004000 	.word	0x52004000

08006520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8006526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800652c:	bf00      	nop
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <main+0xec>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <main+0x24>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dcf4      	bgt.n	800652e <main+0xe>
	if ( timeout < 0 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da01      	bge.n	800654e <main+0x2e>
	{
		Error_Handler();
 800654a:	f000 fbeb 	bl	8006d24 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800654e:	f001 fb69 	bl	8007c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006552:	f000 f863 	bl	800661c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006556:	f000 f8e5 	bl	8006724 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800655a:	4b2c      	ldr	r3, [pc, #176]	; (800660c <main+0xec>)
 800655c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006560:	4a2a      	ldr	r2, [pc, #168]	; (800660c <main+0xec>)
 8006562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800656a:	4b28      	ldr	r3, [pc, #160]	; (800660c <main+0xec>)
 800656c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8006578:	2000      	movs	r0, #0
 800657a:	f004 fd7f 	bl	800b07c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800657e:	2100      	movs	r1, #0
 8006580:	2000      	movs	r0, #0
 8006582:	f004 fd95 	bl	800b0b0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8006586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800658a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800658c:	bf00      	nop
 800658e:	4b1f      	ldr	r3, [pc, #124]	; (800660c <main+0xec>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <main+0x84>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dcf4      	bgt.n	800658e <main+0x6e>
	if ( timeout < 0 )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da01      	bge.n	80065ae <main+0x8e>
	{
		Error_Handler();
 80065aa:	f000 fbbb 	bl	8006d24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065ae:	f000 fa6d 	bl	8006a8c <MX_GPIO_Init>
  MX_ETH_Init();
 80065b2:	f000 f8e9 	bl	8006788 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80065b6:	f000 f9c1 	bl	800693c <MX_USART3_UART_Init>
  MX_DMA_Init();
 80065ba:	f000 fa3f 	bl	8006a3c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80065be:	f000 fa0b 	bl	80069d8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80065c2:	f000 f92d 	bl	8006820 <MX_SPI3_Init>
  MX_TIM7_Init();
 80065c6:	f000 f983 	bl	80068d0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 80065ca:	f000 fcb3 	bl	8006f34 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 80065ce:	2000      	movs	r0, #0
 80065d0:	f000 ffbd 	bl	800754e <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 80065d4:	2000      	movs	r0, #0
 80065d6:	f000 ffa9 	bl	800752c <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 80065da:	f001 fba9 	bl	8007d30 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <main+0xf0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2bc8      	cmp	r3, #200	; 0xc8
 80065e8:	d9f7      	bls.n	80065da <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 80065ea:	f001 fba1 	bl	8007d30 <HAL_GetTick>
 80065ee:	4603      	mov	r3, r0
 80065f0:	4a07      	ldr	r2, [pc, #28]	; (8006610 <main+0xf0>)
 80065f2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80065f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065f8:	4806      	ldr	r0, [pc, #24]	; (8006614 <main+0xf4>)
 80065fa:	f004 fd24 	bl	800b046 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80065fe:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8006602:	4905      	ldr	r1, [pc, #20]	; (8006618 <main+0xf8>)
 8006604:	4618      	mov	r0, r3
 8006606:	f7fb fd7b 	bl	8002100 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800660a:	e7e6      	b.n	80065da <main+0xba>
 800660c:	58024400 	.word	0x58024400
 8006610:	24000e9c 	.word	0x24000e9c
 8006614:	58020400 	.word	0x58020400
 8006618:	240009c0 	.word	0x240009c0

0800661c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b09c      	sub	sp, #112	; 0x70
 8006620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006626:	224c      	movs	r2, #76	; 0x4c
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f00a f9bc 	bl	80109a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	2220      	movs	r2, #32
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f00a f9b6 	bl	80109a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800663c:	2004      	movs	r0, #4
 800663e:	f004 fe93 	bl	800b368 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006642:	2300      	movs	r3, #0
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4b34      	ldr	r3, [pc, #208]	; (8006718 <SystemClock_Config+0xfc>)
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	4a33      	ldr	r2, [pc, #204]	; (8006718 <SystemClock_Config+0xfc>)
 800664c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006650:	6193      	str	r3, [r2, #24]
 8006652:	4b31      	ldr	r3, [pc, #196]	; (8006718 <SystemClock_Config+0xfc>)
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4b2f      	ldr	r3, [pc, #188]	; (800671c <SystemClock_Config+0x100>)
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4a2e      	ldr	r2, [pc, #184]	; (800671c <SystemClock_Config+0x100>)
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006668:	4b2c      	ldr	r3, [pc, #176]	; (800671c <SystemClock_Config+0x100>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006674:	bf00      	nop
 8006676:	4b28      	ldr	r3, [pc, #160]	; (8006718 <SystemClock_Config+0xfc>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	d1f8      	bne.n	8006676 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006684:	4b26      	ldr	r3, [pc, #152]	; (8006720 <SystemClock_Config+0x104>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f023 0303 	bic.w	r3, r3, #3
 800668c:	4a24      	ldr	r2, [pc, #144]	; (8006720 <SystemClock_Config+0x104>)
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800669e:	2302      	movs	r3, #2
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066a2:	2302      	movs	r3, #2
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80066aa:	2378      	movs	r3, #120	; 0x78
 80066ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80066ae:	2302      	movs	r3, #2
 80066b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80066b2:	2302      	movs	r3, #2
 80066b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80066b6:	2302      	movs	r3, #2
 80066b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80066ba:	230c      	movs	r3, #12
 80066bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80066be:	2300      	movs	r3, #0
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f004 feb6 	bl	800b43c <HAL_RCC_OscConfig>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80066d6:	f000 fb25 	bl	8006d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066da:	233f      	movs	r3, #63	; 0x3f
 80066dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066de:	2303      	movs	r3, #3
 80066e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80066e6:	2308      	movs	r3, #8
 80066e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80066f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80066fc:	1d3b      	adds	r3, r7, #4
 80066fe:	2104      	movs	r1, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f005 fac9 	bl	800bc98 <HAL_RCC_ClockConfig>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800670c:	f000 fb0a 	bl	8006d24 <Error_Handler>
  }
}
 8006710:	bf00      	nop
 8006712:	3770      	adds	r7, #112	; 0x70
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	58024800 	.word	0x58024800
 800671c:	58000400 	.word	0x58000400
 8006720:	58024400 	.word	0x58024400

08006724 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b0b0      	sub	sp, #192	; 0xc0
 8006728:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	22bc      	movs	r2, #188	; 0xbc
 800672e:	2100      	movs	r1, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f00a f939 	bl	80109a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8006736:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800673a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800673c:	2301      	movs	r3, #1
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8006740:	2318      	movs	r3, #24
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006744:	2302      	movs	r3, #2
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8006748:	2304      	movs	r3, #4
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800674c:	2302      	movs	r3, #2
 800674e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8006750:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006756:	2300      	movs	r3, #0
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800675e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006762:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8006764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f005 fe1e 	bl	800c3b0 <HAL_RCCEx_PeriphCLKConfig>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800677a:	f000 fad3 	bl	8006d24 <Error_Handler>
  }
}
 800677e:	bf00      	nop
 8006780:	37c0      	adds	r7, #192	; 0xc0
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <MX_ETH_Init+0x80>)
 800678e:	4a1f      	ldr	r2, [pc, #124]	; (800680c <MX_ETH_Init+0x84>)
 8006790:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <MX_ETH_Init+0x88>)
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <MX_ETH_Init+0x88>)
 800679a:	2280      	movs	r2, #128	; 0x80
 800679c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800679e:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <MX_ETH_Init+0x88>)
 80067a0:	22e1      	movs	r2, #225	; 0xe1
 80067a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80067a4:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <MX_ETH_Init+0x88>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <MX_ETH_Init+0x88>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <MX_ETH_Init+0x88>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <MX_ETH_Init+0x80>)
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <MX_ETH_Init+0x88>)
 80067ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80067bc:	4b12      	ldr	r3, [pc, #72]	; (8006808 <MX_ETH_Init+0x80>)
 80067be:	2201      	movs	r2, #1
 80067c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <MX_ETH_Init+0x80>)
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <MX_ETH_Init+0x8c>)
 80067c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <MX_ETH_Init+0x80>)
 80067ca:	4a13      	ldr	r2, [pc, #76]	; (8006818 <MX_ETH_Init+0x90>)
 80067cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <MX_ETH_Init+0x80>)
 80067d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80067d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80067d6:	480c      	ldr	r0, [pc, #48]	; (8006808 <MX_ETH_Init+0x80>)
 80067d8:	f003 fe30 	bl	800a43c <HAL_ETH_Init>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80067e2:	f000 fa9f 	bl	8006d24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80067e6:	2238      	movs	r2, #56	; 0x38
 80067e8:	2100      	movs	r1, #0
 80067ea:	480c      	ldr	r0, [pc, #48]	; (800681c <MX_ETH_Init+0x94>)
 80067ec:	f00a f8dc 	bl	80109a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <MX_ETH_Init+0x94>)
 80067f2:	2221      	movs	r2, #33	; 0x21
 80067f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <MX_ETH_Init+0x94>)
 80067f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80067fe:	4b07      	ldr	r3, [pc, #28]	; (800681c <MX_ETH_Init+0x94>)
 8006800:	2200      	movs	r2, #0
 8006802:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8006804:	bf00      	nop
 8006806:	bd80      	pop	{r7, pc}
 8006808:	240001b0 	.word	0x240001b0
 800680c:	40028000 	.word	0x40028000
 8006810:	24000ea8 	.word	0x24000ea8
 8006814:	240000e8 	.word	0x240000e8
 8006818:	24000088 	.word	0x24000088
 800681c:	24000178 	.word	0x24000178

08006820 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006824:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006826:	4a29      	ldr	r2, [pc, #164]	; (80068cc <MX_SPI3_Init+0xac>)
 8006828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800682a:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800682c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006838:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800683c:	2207      	movs	r2, #7
 800683e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006840:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006842:	2200      	movs	r2, #0
 8006844:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006848:	2200      	movs	r2, #0
 800684a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800684c:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800684e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006852:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006854:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800685a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800685e:	2200      	movs	r2, #0
 8006860:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006864:	2200      	movs	r2, #0
 8006866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800686a:	2200      	movs	r2, #0
 800686c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800686e:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006870:	2200      	movs	r2, #0
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800687a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800687c:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800687e:	2200      	movs	r2, #0
 8006880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006884:	2200      	movs	r2, #0
 8006886:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800688a:	2200      	movs	r2, #0
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800688e:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006890:	2200      	movs	r2, #0
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <MX_SPI3_Init+0xa8>)
 8006896:	2200      	movs	r2, #0
 8006898:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <MX_SPI3_Init+0xa8>)
 800689c:	2200      	movs	r2, #0
 800689e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <MX_SPI3_Init+0xa8>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <MX_SPI3_Init+0xa8>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <MX_SPI3_Init+0xa8>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_SPI3_Init+0xa8>)
 80068b4:	f007 f8e4 	bl	800da80 <HAL_SPI_Init>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80068be:	f000 fa31 	bl	8006d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	24000260 	.word	0x24000260
 80068cc:	40003c00 	.word	0x40003c00

080068d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <MX_TIM7_Init+0x64>)
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <MX_TIM7_Init+0x68>)
 80068e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <MX_TIM7_Init+0x64>)
 80068e8:	22ef      	movs	r2, #239	; 0xef
 80068ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <MX_TIM7_Init+0x64>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <MX_TIM7_Init+0x64>)
 80068f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <MX_TIM7_Init+0x64>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006900:	480c      	ldr	r0, [pc, #48]	; (8006934 <MX_TIM7_Init+0x64>)
 8006902:	f007 fc9e 	bl	800e242 <HAL_TIM_Base_Init>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800690c:	f000 fa0a 	bl	8006d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006910:	2300      	movs	r3, #0
 8006912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006918:	1d3b      	adds	r3, r7, #4
 800691a:	4619      	mov	r1, r3
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <MX_TIM7_Init+0x64>)
 800691e:	f007 ff6f 	bl	800e800 <HAL_TIMEx_MasterConfigSynchronization>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006928:	f000 f9fc 	bl	8006d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	240002e8 	.word	0x240002e8
 8006938:	40001400 	.word	0x40001400

0800693c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006940:	4b22      	ldr	r3, [pc, #136]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006942:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <MX_USART3_UART_Init+0x94>)
 8006944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006948:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <MX_USART3_UART_Init+0x98>)
 800694a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <MX_USART3_UART_Init+0x90>)
 800694e:	2200      	movs	r2, #0
 8006950:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006954:	2200      	movs	r2, #0
 8006956:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <MX_USART3_UART_Init+0x90>)
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006960:	220c      	movs	r2, #12
 8006962:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006966:	2200      	movs	r2, #0
 8006968:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <MX_USART3_UART_Init+0x90>)
 800696c:	2200      	movs	r2, #0
 800696e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006970:	4b16      	ldr	r3, [pc, #88]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006972:	2200      	movs	r2, #0
 8006974:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006978:	2200      	movs	r2, #0
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800697c:	4b13      	ldr	r3, [pc, #76]	; (80069cc <MX_USART3_UART_Init+0x90>)
 800697e:	2200      	movs	r2, #0
 8006980:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006982:	4812      	ldr	r0, [pc, #72]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006984:	f007 ffe8 	bl	800e958 <HAL_UART_Init>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800698e:	f000 f9c9 	bl	8006d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006992:	2100      	movs	r1, #0
 8006994:	480d      	ldr	r0, [pc, #52]	; (80069cc <MX_USART3_UART_Init+0x90>)
 8006996:	f009 fc09 	bl	80101ac <HAL_UARTEx_SetTxFifoThreshold>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80069a0:	f000 f9c0 	bl	8006d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069a4:	2100      	movs	r1, #0
 80069a6:	4809      	ldr	r0, [pc, #36]	; (80069cc <MX_USART3_UART_Init+0x90>)
 80069a8:	f009 fc3e 	bl	8010228 <HAL_UARTEx_SetRxFifoThreshold>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80069b2:	f000 f9b7 	bl	8006d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80069b6:	4805      	ldr	r0, [pc, #20]	; (80069cc <MX_USART3_UART_Init+0x90>)
 80069b8:	f009 fbbf 	bl	801013a <HAL_UARTEx_DisableFifoMode>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80069c2:	f000 f9af 	bl	8006d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80069c6:	bf00      	nop
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	24000334 	.word	0x24000334
 80069d0:	40004800 	.word	0x40004800
 80069d4:	0005dc00 	.word	0x0005dc00

080069d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069de:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80069e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069e4:	2209      	movs	r2, #9
 80069e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069ea:	2202      	movs	r2, #2
 80069ec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069f6:	2202      	movs	r2, #2
 80069f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069fa:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006a20:	f004 fb5a 	bl	800b0d8 <HAL_PCD_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8006a2a:	f000 f97b 	bl	8006d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	240004b4 	.word	0x240004b4
 8006a38:	40080000 	.word	0x40080000

08006a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <MX_DMA_Init+0x4c>)
 8006a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a48:	4a0f      	ldr	r2, [pc, #60]	; (8006a88 <MX_DMA_Init+0x4c>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <MX_DMA_Init+0x4c>)
 8006a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	200c      	movs	r0, #12
 8006a66:	f001 fa8e 	bl	8007f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006a6a:	200c      	movs	r0, #12
 8006a6c:	f001 faa5 	bl	8007fba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	200f      	movs	r0, #15
 8006a76:	f001 fa86 	bl	8007f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006a7a:	200f      	movs	r0, #15
 8006a7c:	f001 fa9d 	bl	8007fba <HAL_NVIC_EnableIRQ>

}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	58024400 	.word	0x58024400

08006a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	; 0x38
 8006a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	60da      	str	r2, [r3, #12]
 8006aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aa2:	4b8a      	ldr	r3, [pc, #552]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa8:	4a88      	ldr	r2, [pc, #544]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006aaa:	f043 0304 	orr.w	r3, r3, #4
 8006aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ab2:	4b86      	ldr	r3, [pc, #536]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ac0:	4b82      	ldr	r3, [pc, #520]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac6:	4a81      	ldr	r2, [pc, #516]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad0:	4b7e      	ldr	r3, [pc, #504]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ade:	4b7b      	ldr	r3, [pc, #492]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae4:	4a79      	ldr	r2, [pc, #484]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006aee:	4b77      	ldr	r3, [pc, #476]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006afc:	4b73      	ldr	r3, [pc, #460]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b02:	4a72      	ldr	r2, [pc, #456]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b04:	f043 0302 	orr.w	r3, r3, #2
 8006b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b0c:	4b6f      	ldr	r3, [pc, #444]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b1a:	4b6c      	ldr	r3, [pc, #432]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b20:	4a6a      	ldr	r2, [pc, #424]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b22:	f043 0320 	orr.w	r3, r3, #32
 8006b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b2a:	4b68      	ldr	r3, [pc, #416]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b38:	4b64      	ldr	r3, [pc, #400]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b3e:	4a63      	ldr	r2, [pc, #396]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b40:	f043 0310 	orr.w	r3, r3, #16
 8006b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b48:	4b60      	ldr	r3, [pc, #384]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b56:	4b5d      	ldr	r3, [pc, #372]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b5c:	4a5b      	ldr	r2, [pc, #364]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b66:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b74:	4b55      	ldr	r3, [pc, #340]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b7a:	4a54      	ldr	r2, [pc, #336]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b84:	4b51      	ldr	r3, [pc, #324]	; (8006ccc <MX_GPIO_Init+0x240>)
 8006b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	607b      	str	r3, [r7, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006b92:	2201      	movs	r2, #1
 8006b94:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8006b98:	484d      	ldr	r0, [pc, #308]	; (8006cd0 <MX_GPIO_Init+0x244>)
 8006b9a:	f004 fa3b 	bl	800b014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ba4:	484a      	ldr	r0, [pc, #296]	; (8006cd0 <MX_GPIO_Init+0x244>)
 8006ba6:	f004 fa35 	bl	800b014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006baa:	2200      	movs	r2, #0
 8006bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bb0:	4848      	ldr	r0, [pc, #288]	; (8006cd4 <MX_GPIO_Init+0x248>)
 8006bb2:	f004 fa2f 	bl	800b014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bbc:	4846      	ldr	r0, [pc, #280]	; (8006cd8 <MX_GPIO_Init+0x24c>)
 8006bbe:	f004 fa29 	bl	800b014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc8:	4844      	ldr	r0, [pc, #272]	; (8006cdc <MX_GPIO_Init+0x250>)
 8006bca:	f004 fa23 	bl	800b014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8006bce:	230d      	movs	r3, #13
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bde:	4619      	mov	r1, r3
 8006be0:	483f      	ldr	r0, [pc, #252]	; (8006ce0 <MX_GPIO_Init+0x254>)
 8006be2:	f004 f84f 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006be6:	2308      	movs	r3, #8
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bea:	2300      	movs	r3, #0
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	483a      	ldr	r0, [pc, #232]	; (8006ce4 <MX_GPIO_Init+0x258>)
 8006bfa:	f004 f843 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8006c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4830      	ldr	r0, [pc, #192]	; (8006cd4 <MX_GPIO_Init+0x248>)
 8006c12:	f004 f837 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8006c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8006c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c28:	4619      	mov	r1, r3
 8006c2a:	482f      	ldr	r0, [pc, #188]	; (8006ce8 <MX_GPIO_Init+0x25c>)
 8006c2c:	f004 f82a 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8006c30:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c36:	2301      	movs	r3, #1
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c46:	4619      	mov	r1, r3
 8006c48:	4821      	ldr	r0, [pc, #132]	; (8006cd0 <MX_GPIO_Init+0x244>)
 8006c4a:	f004 f81b 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c54:	2301      	movs	r3, #1
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c64:	4619      	mov	r1, r3
 8006c66:	481b      	ldr	r0, [pc, #108]	; (8006cd4 <MX_GPIO_Init+0x248>)
 8006c68:	f004 f80c 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c72:	2301      	movs	r3, #1
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c82:	4619      	mov	r1, r3
 8006c84:	4814      	ldr	r0, [pc, #80]	; (8006cd8 <MX_GPIO_Init+0x24c>)
 8006c86:	f003 fffd 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	480f      	ldr	r0, [pc, #60]	; (8006cdc <MX_GPIO_Init+0x250>)
 8006ca0:	f003 fff0 	bl	800ac84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006caa:	2301      	movs	r3, #1
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4807      	ldr	r0, [pc, #28]	; (8006cdc <MX_GPIO_Init+0x250>)
 8006cbe:	f003 ffe1 	bl	800ac84 <HAL_GPIO_Init>

}
 8006cc2:	bf00      	nop
 8006cc4:	3738      	adds	r7, #56	; 0x38
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	58021000 	.word	0x58021000
 8006cd4:	58020400 	.word	0x58020400
 8006cd8:	58020c00 	.word	0x58020c00
 8006cdc:	58021800 	.word	0x58021800
 8006ce0:	58020800 	.word	0x58020800
 8006ce4:	58020000 	.word	0x58020000
 8006ce8:	58021400 	.word	0x58021400

08006cec <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006cec:	b4b0      	push	{r4, r5, r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10a      	bne.n	8006d12 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8006cfc:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d06:	1854      	adds	r4, r2, r1
 8006d08:	f143 0500 	adc.w	r5, r3, #0
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006d0e:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bcb0      	pop	{r4, r5, r7}
 8006d1a:	4770      	bx	lr
 8006d1c:	240002e8 	.word	0x240002e8
 8006d20:	24000ea0 	.word	0x24000ea0

08006d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d28:	b672      	cpsid	i
}
 8006d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006d2c:	e7fe      	b.n	8006d2c <Error_Handler+0x8>
	...

08006d30 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d3a:	4802      	ldr	r0, [pc, #8]	; (8006d44 <ST7735_Select+0x14>)
 8006d3c:	f004 f96a 	bl	800b014 <HAL_GPIO_WritePin>
}
 8006d40:	bf00      	nop
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	58021000 	.word	0x58021000

08006d48 <ST7735_Unselect>:

void ST7735_Unselect() {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d52:	4802      	ldr	r0, [pc, #8]	; (8006d5c <ST7735_Unselect+0x14>)
 8006d54:	f004 f95e 	bl	800b014 <HAL_GPIO_WritePin>
}
 8006d58:	bf00      	nop
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	58021000 	.word	0x58021000

08006d60 <ST7735_Select1>:
static void ST7735_Select1() {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006d64:	2200      	movs	r2, #0
 8006d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d6a:	4802      	ldr	r0, [pc, #8]	; (8006d74 <ST7735_Select1+0x14>)
 8006d6c:	f004 f952 	bl	800b014 <HAL_GPIO_WritePin>
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	58021000 	.word	0x58021000

08006d78 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d82:	4802      	ldr	r0, [pc, #8]	; (8006d8c <ST7735_Unselect1+0x14>)
 8006d84:	f004 f946 	bl	800b014 <HAL_GPIO_WritePin>
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	58021000 	.word	0x58021000

08006d90 <ST7735_Reset>:

static void ST7735_Reset() {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006d94:	2200      	movs	r2, #0
 8006d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d9a:	4807      	ldr	r0, [pc, #28]	; (8006db8 <ST7735_Reset+0x28>)
 8006d9c:	f004 f93a 	bl	800b014 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006da0:	2005      	movs	r0, #5
 8006da2:	f000 ffd1 	bl	8007d48 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006da6:	2201      	movs	r2, #1
 8006da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dac:	4802      	ldr	r0, [pc, #8]	; (8006db8 <ST7735_Reset+0x28>)
 8006dae:	f004 f931 	bl	800b014 <HAL_GPIO_WritePin>
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	58021000 	.word	0x58021000

08006dbc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dcc:	4806      	ldr	r0, [pc, #24]	; (8006de8 <ST7735_WriteCommand+0x2c>)
 8006dce:	f004 f921 	bl	800b014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006dd2:	1df9      	adds	r1, r7, #7
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd8:	2201      	movs	r2, #1
 8006dda:	4804      	ldr	r0, [pc, #16]	; (8006dec <ST7735_WriteCommand+0x30>)
 8006ddc:	f006 ff56 	bl	800dc8c <HAL_SPI_Transmit>
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58021800 	.word	0x58021800
 8006dec:	24000260 	.word	0x24000260

08006df0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e00:	4807      	ldr	r0, [pc, #28]	; (8006e20 <ST7735_WriteData+0x30>)
 8006e02:	f004 f907 	bl	800b014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4804      	ldr	r0, [pc, #16]	; (8006e24 <ST7735_WriteData+0x34>)
 8006e12:	f006 ff3b 	bl	800dc8c <HAL_SPI_Transmit>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	58021800 	.word	0x58021800
 8006e24:	24000260 	.word	0x24000260

08006e28 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8006e3a:	e034      	b.n	8006ea6 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ffb7 	bl	8006dbc <ST7735_WriteCommand>

		numArgs = *addr++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8006e58:	7abb      	ldrb	r3, [r7, #10]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e60:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006e62:	7abb      	ldrb	r3, [r7, #10]
 8006e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e68:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8006e6a:	7abb      	ldrb	r3, [r7, #10]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006e70:	7abb      	ldrb	r3, [r7, #10]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ffbb 	bl	8006df0 <ST7735_WriteData>
			addr += numArgs;
 8006e7a:	7abb      	ldrb	r3, [r7, #10]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006e82:	89bb      	ldrh	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00e      	beq.n	8006ea6 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006e92:	89bb      	ldrh	r3, [r7, #12]
 8006e94:	2bff      	cmp	r3, #255	; 0xff
 8006e96:	d102      	bne.n	8006e9e <ST7735_ExecuteCommandList+0x76>
 8006e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e9c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8006e9e:	89bb      	ldrh	r3, [r7, #12]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 ff51 	bl	8007d48 <HAL_Delay>
	while(numCommands--) {
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	73fa      	strb	r2, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1c5      	bne.n	8006e3c <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8006eba:	b590      	push	{r4, r7, lr}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4623      	mov	r3, r4
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	4603      	mov	r3, r0
 8006ece:	71bb      	strb	r3, [r7, #6]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	717b      	strb	r3, [r7, #5]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006ed8:	202a      	movs	r0, #42	; 0x2a
 8006eda:	f7ff ff6f 	bl	8006dbc <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8006ede:	2300      	movs	r3, #0
 8006ee0:	733b      	strb	r3, [r7, #12]
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	737b      	strb	r3, [r7, #13]
 8006eea:	2300      	movs	r3, #0
 8006eec:	73bb      	strb	r3, [r7, #14]
 8006eee:	797b      	ldrb	r3, [r7, #5]
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006ef6:	f107 030c 	add.w	r3, r7, #12
 8006efa:	2104      	movs	r1, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff ff77 	bl	8006df0 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8006f02:	202b      	movs	r0, #43	; 0x2b
 8006f04:	f7ff ff5a 	bl	8006dbc <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8006f08:	79bb      	ldrb	r3, [r7, #6]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8006f10:	793b      	ldrb	r3, [r7, #4]
 8006f12:	3301      	adds	r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006f18:	f107 030c 	add.w	r3, r7, #12
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff ff66 	bl	8006df0 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8006f24:	202c      	movs	r0, #44	; 0x2c
 8006f26:	f7ff ff49 	bl	8006dbc <ST7735_WriteCommand>
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd90      	pop	{r4, r7, pc}
	...

08006f34 <ST7735_Init>:

void ST7735_Init() {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
	ST7735_Select();
 8006f38:	f7ff fefa 	bl	8006d30 <ST7735_Select>
	ST7735_Select1();
 8006f3c:	f7ff ff10 	bl	8006d60 <ST7735_Select1>
	ST7735_Reset();
 8006f40:	f7ff ff26 	bl	8006d90 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8006f44:	4807      	ldr	r0, [pc, #28]	; (8006f64 <ST7735_Init+0x30>)
 8006f46:	f7ff ff6f 	bl	8006e28 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8006f4a:	4807      	ldr	r0, [pc, #28]	; (8006f68 <ST7735_Init+0x34>)
 8006f4c:	f7ff ff6c 	bl	8006e28 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8006f50:	4806      	ldr	r0, [pc, #24]	; (8006f6c <ST7735_Init+0x38>)
 8006f52:	f7ff ff69 	bl	8006e28 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8006f56:	f7ff fef7 	bl	8006d48 <ST7735_Unselect>
	ST7735_Unselect1();
 8006f5a:	f7ff ff0d 	bl	8006d78 <ST7735_Unselect1>
}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	08012c0c 	.word	0x08012c0c
 8006f68:	08012c48 	.word	0x08012c48
 8006f6c:	08012c58 	.word	0x08012c58

08006f70 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006f70:	b082      	sub	sp, #8
 8006f72:	b590      	push	{r4, r7, lr}
 8006f74:	b089      	sub	sp, #36	; 0x24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	80fb      	strh	r3, [r7, #6]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	80bb      	strh	r3, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	b2d8      	uxtb	r0, r3
 8006f8a:	88bb      	ldrh	r3, [r7, #4]
 8006f8c:	b2d9      	uxtb	r1, r3
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006f96:	4413      	add	r3, r2
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b2dc      	uxtb	r4, r3
 8006f9e:	88bb      	ldrh	r3, [r7, #4]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006fa6:	4413      	add	r3, r2
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4622      	mov	r2, r4
 8006fb0:	f7ff ff83 	bl	8006eba <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	e043      	b.n	8007042 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	3b20      	subs	r3, #32
 8006fc0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	4619      	mov	r1, r3
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	440b      	add	r3, r1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e029      	b.n	8007030 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006fec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	743b      	strb	r3, [r7, #16]
 8006ff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	2102      	movs	r1, #2
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fef4 	bl	8006df0 <ST7735_WriteData>
 8007008:	e00f      	b.n	800702a <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800700a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	b29b      	uxth	r3, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	733b      	strb	r3, [r7, #12]
 8007016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800701a:	b2db      	uxtb	r3, r3
 800701c:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 800701e:	f107 030c 	add.w	r3, r7, #12
 8007022:	2102      	movs	r1, #2
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fee3 	bl	8006df0 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	3301      	adds	r3, #1
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007034:	461a      	mov	r2, r3
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	4293      	cmp	r3, r2
 800703a:	d3cf      	bcc.n	8006fdc <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	3301      	adds	r3, #1
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007046:	461a      	mov	r2, r3
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4293      	cmp	r3, r2
 800704c:	d3b5      	bcc.n	8006fba <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3724      	adds	r7, #36	; 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800705a:	b002      	add	sp, #8
 800705c:	4770      	bx	lr

0800705e <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800705e:	b082      	sub	sp, #8
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af04      	add	r7, sp, #16
 8007066:	603a      	str	r2, [r7, #0]
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	4603      	mov	r3, r0
 800706c:	80fb      	strh	r3, [r7, #6]
 800706e:	460b      	mov	r3, r1
 8007070:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8007072:	f7ff fe5d 	bl	8006d30 <ST7735_Select>

	while(*str) {
 8007076:	e02d      	b.n	80070d4 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	7d3a      	ldrb	r2, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	2b7f      	cmp	r3, #127	; 0x7f
 8007080:	dd13      	ble.n	80070aa <ST7735_WriteString+0x4c>
			x = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8007086:	7d7b      	ldrb	r3, [r7, #21]
 8007088:	b29a      	uxth	r2, r3
 800708a:	88bb      	ldrh	r3, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8007090:	88bb      	ldrh	r3, [r7, #4]
 8007092:	7d7a      	ldrb	r2, [r7, #21]
 8007094:	4413      	add	r3, r2
 8007096:	2b7f      	cmp	r3, #127	; 0x7f
 8007098:	dc21      	bgt.n	80070de <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d103      	bne.n	80070aa <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	603b      	str	r3, [r7, #0]
				continue;
 80070a8:	e014      	b.n	80070d4 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	88b9      	ldrh	r1, [r7, #4]
 80070b0:	88f8      	ldrh	r0, [r7, #6]
 80070b2:	8c3b      	ldrh	r3, [r7, #32]
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	8bbb      	ldrh	r3, [r7, #28]
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f7ff ff56 	bl	8006f70 <ST7735_WriteChar>
		x += font.width;
 80070c4:	7d3b      	ldrb	r3, [r7, #20]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	4413      	add	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
		str++;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	603b      	str	r3, [r7, #0]
	while(*str) {
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1cd      	bne.n	8007078 <ST7735_WriteString+0x1a>
 80070dc:	e000      	b.n	80070e0 <ST7735_WriteString+0x82>
				break;
 80070de:	bf00      	nop
	}

	ST7735_Unselect();
 80070e0:	f7ff fe32 	bl	8006d48 <ST7735_Unselect>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ee:	b002      	add	sp, #8
 80070f0:	4770      	bx	lr

080070f2 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80070f2:	b082      	sub	sp, #8
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	603a      	str	r2, [r7, #0]
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	4603      	mov	r3, r0
 8007100:	80fb      	strh	r3, [r7, #6]
 8007102:	460b      	mov	r3, r1
 8007104:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8007106:	f7ff fe2b 	bl	8006d60 <ST7735_Select1>

	while(*str) {
 800710a:	e02d      	b.n	8007168 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	7d3a      	ldrb	r2, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	dd13      	ble.n	800713e <ST7735_WriteString1+0x4c>
			x = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800711a:	7d7b      	ldrb	r3, [r7, #21]
 800711c:	b29a      	uxth	r2, r3
 800711e:	88bb      	ldrh	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8007124:	88bb      	ldrh	r3, [r7, #4]
 8007126:	7d7a      	ldrb	r2, [r7, #21]
 8007128:	4413      	add	r3, r2
 800712a:	2b7f      	cmp	r3, #127	; 0x7f
 800712c:	dc21      	bgt.n	8007172 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b20      	cmp	r3, #32
 8007134:	d103      	bne.n	800713e <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	603b      	str	r3, [r7, #0]
				continue;
 800713c:	e014      	b.n	8007168 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	88b9      	ldrh	r1, [r7, #4]
 8007144:	88f8      	ldrh	r0, [r7, #6]
 8007146:	8c3b      	ldrh	r3, [r7, #32]
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	8bbb      	ldrh	r3, [r7, #28]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f7ff ff0c 	bl	8006f70 <ST7735_WriteChar>
		x += font.width;
 8007158:	7d3b      	ldrb	r3, [r7, #20]
 800715a:	b29a      	uxth	r2, r3
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	4413      	add	r3, r2
 8007160:	80fb      	strh	r3, [r7, #6]
		str++;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	603b      	str	r3, [r7, #0]
	while(*str) {
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1cd      	bne.n	800710c <ST7735_WriteString1+0x1a>
 8007170:	e000      	b.n	8007174 <ST7735_WriteString1+0x82>
				break;
 8007172:	bf00      	nop
	}

	ST7735_Unselect1();
 8007174:	f7ff fe00 	bl	8006d78 <ST7735_Unselect1>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007182:	b002      	add	sp, #8
 8007184:	4770      	bx	lr

08007186 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8007186:	b082      	sub	sp, #8
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af04      	add	r7, sp, #16
 800718e:	603a      	str	r2, [r7, #0]
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
 8007196:	460b      	mov	r3, r1
 8007198:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 800719a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 80071a2:	f7ff fdc5 	bl	8006d30 <ST7735_Select>
 80071a6:	e034      	b.n	8007212 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 80071a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d130      	bne.n	8007212 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 80071b0:	f7ff fdd6 	bl	8006d60 <ST7735_Select1>

	}


	while(*str) {
 80071b4:	e02d      	b.n	8007212 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	7d3a      	ldrb	r2, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	2b7f      	cmp	r3, #127	; 0x7f
 80071be:	dd13      	ble.n	80071e8 <ST7735_WriteStringNSS+0x62>
			x = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80071c4:	7d7b      	ldrb	r3, [r7, #21]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	88bb      	ldrh	r3, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80071ce:	88bb      	ldrh	r3, [r7, #4]
 80071d0:	7d7a      	ldrb	r2, [r7, #21]
 80071d2:	4413      	add	r3, r2
 80071d4:	2b7f      	cmp	r3, #127	; 0x7f
 80071d6:	dc21      	bgt.n	800721c <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d103      	bne.n	80071e8 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	603b      	str	r3, [r7, #0]
				continue;
 80071e6:	e014      	b.n	8007212 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	88b9      	ldrh	r1, [r7, #4]
 80071ee:	88f8      	ldrh	r0, [r7, #6]
 80071f0:	8c3b      	ldrh	r3, [r7, #32]
 80071f2:	9302      	str	r3, [sp, #8]
 80071f4:	8bbb      	ldrh	r3, [r7, #28]
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f7ff feb7 	bl	8006f70 <ST7735_WriteChar>
		x += font.width;
 8007202:	7d3b      	ldrb	r3, [r7, #20]
 8007204:	b29a      	uxth	r2, r3
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	4413      	add	r3, r2
 800720a:	80fb      	strh	r3, [r7, #6]
		str++;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	603b      	str	r3, [r7, #0]
	while(*str) {
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1cd      	bne.n	80071b6 <ST7735_WriteStringNSS+0x30>
 800721a:	e000      	b.n	800721e <ST7735_WriteStringNSS+0x98>
				break;
 800721c:	bf00      	nop
	}
	if(NSS == 0){
 800721e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8007226:	f7ff fd8f 	bl	8006d48 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 800722a:	e005      	b.n	8007238 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 800722c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8007234:	f7ff fda0 	bl	8006d78 <ST7735_Unselect1>
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007242:	b002      	add	sp, #8
 8007244:	4770      	bx	lr
	...

08007248 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4623      	mov	r3, r4
 8007258:	80fb      	strh	r3, [r7, #6]
 800725a:	4603      	mov	r3, r0
 800725c:	80bb      	strh	r3, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	807b      	strh	r3, [r7, #2]
 8007262:	4613      	mov	r3, r2
 8007264:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	2b7f      	cmp	r3, #127	; 0x7f
 800726a:	d858      	bhi.n	800731e <ST7735_FillRectangle+0xd6>
 800726c:	88bb      	ldrh	r3, [r7, #4]
 800726e:	2b7f      	cmp	r3, #127	; 0x7f
 8007270:	d855      	bhi.n	800731e <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	887b      	ldrh	r3, [r7, #2]
 8007276:	4413      	add	r3, r2
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	dd03      	ble.n	8007284 <ST7735_FillRectangle+0x3c>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007282:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8007284:	88ba      	ldrh	r2, [r7, #4]
 8007286:	883b      	ldrh	r3, [r7, #0]
 8007288:	4413      	add	r3, r2
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	dd03      	ble.n	8007296 <ST7735_FillRectangle+0x4e>
 800728e:	88bb      	ldrh	r3, [r7, #4]
 8007290:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007294:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8007296:	f7ff fd4b 	bl	8006d30 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	b2d8      	uxtb	r0, r3
 800729e:	88bb      	ldrh	r3, [r7, #4]
 80072a0:	b2d9      	uxtb	r1, r3
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	887b      	ldrh	r3, [r7, #2]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b2dc      	uxtb	r4, r3
 80072b2:	88bb      	ldrh	r3, [r7, #4]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	883b      	ldrh	r3, [r7, #0]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	4622      	mov	r2, r4
 80072c4:	f7ff fdf9 	bl	8006eba <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80072c8:	8c3b      	ldrh	r3, [r7, #32]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	733b      	strb	r3, [r7, #12]
 80072d2:	8c3b      	ldrh	r3, [r7, #32]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80072d8:	2201      	movs	r2, #1
 80072da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072de:	4812      	ldr	r0, [pc, #72]	; (8007328 <ST7735_FillRectangle+0xe0>)
 80072e0:	f003 fe98 	bl	800b014 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 80072e4:	883b      	ldrh	r3, [r7, #0]
 80072e6:	80bb      	strh	r3, [r7, #4]
 80072e8:	e013      	b.n	8007312 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 80072ea:	887b      	ldrh	r3, [r7, #2]
 80072ec:	80fb      	strh	r3, [r7, #6]
 80072ee:	e00a      	b.n	8007306 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80072f0:	f107 010c 	add.w	r1, r7, #12
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	2202      	movs	r2, #2
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <ST7735_FillRectangle+0xe4>)
 80072fc:	f006 fcc6 	bl	800dc8c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	3b01      	subs	r3, #1
 8007304:	80fb      	strh	r3, [r7, #6]
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f1      	bne.n	80072f0 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 800730c:	88bb      	ldrh	r3, [r7, #4]
 800730e:	3b01      	subs	r3, #1
 8007310:	80bb      	strh	r3, [r7, #4]
 8007312:	88bb      	ldrh	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e8      	bne.n	80072ea <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8007318:	f7ff fd16 	bl	8006d48 <ST7735_Unselect>
 800731c:	e000      	b.n	8007320 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800731e:	bf00      	nop
}
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	58021800 	.word	0x58021800
 800732c:	24000260 	.word	0x24000260

08007330 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4623      	mov	r3, r4
 8007340:	80fb      	strh	r3, [r7, #6]
 8007342:	4603      	mov	r3, r0
 8007344:	80bb      	strh	r3, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	807b      	strh	r3, [r7, #2]
 800734a:	4613      	mov	r3, r2
 800734c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b7f      	cmp	r3, #127	; 0x7f
 8007352:	d858      	bhi.n	8007406 <ST7735_FillRectangle1+0xd6>
 8007354:	88bb      	ldrh	r3, [r7, #4]
 8007356:	2b7f      	cmp	r3, #127	; 0x7f
 8007358:	d855      	bhi.n	8007406 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	887b      	ldrh	r3, [r7, #2]
 800735e:	4413      	add	r3, r2
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	dd03      	ble.n	800736c <ST7735_FillRectangle1+0x3c>
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800736a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800736c:	88ba      	ldrh	r2, [r7, #4]
 800736e:	883b      	ldrh	r3, [r7, #0]
 8007370:	4413      	add	r3, r2
 8007372:	2b80      	cmp	r3, #128	; 0x80
 8007374:	dd03      	ble.n	800737e <ST7735_FillRectangle1+0x4e>
 8007376:	88bb      	ldrh	r3, [r7, #4]
 8007378:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800737c:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 800737e:	f7ff fcef 	bl	8006d60 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	b2d8      	uxtb	r0, r3
 8007386:	88bb      	ldrh	r3, [r7, #4]
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	887b      	ldrh	r3, [r7, #2]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	4413      	add	r3, r2
 8007394:	b2db      	uxtb	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b2dc      	uxtb	r4, r3
 800739a:	88bb      	ldrh	r3, [r7, #4]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	883b      	ldrh	r3, [r7, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	4622      	mov	r2, r4
 80073ac:	f7ff fd85 	bl	8006eba <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80073b0:	8c3b      	ldrh	r3, [r7, #32]
 80073b2:	0a1b      	lsrs	r3, r3, #8
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	733b      	strb	r3, [r7, #12]
 80073ba:	8c3b      	ldrh	r3, [r7, #32]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80073c0:	2201      	movs	r2, #1
 80073c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80073c6:	4812      	ldr	r0, [pc, #72]	; (8007410 <ST7735_FillRectangle1+0xe0>)
 80073c8:	f003 fe24 	bl	800b014 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 80073cc:	883b      	ldrh	r3, [r7, #0]
 80073ce:	80bb      	strh	r3, [r7, #4]
 80073d0:	e013      	b.n	80073fa <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 80073d2:	887b      	ldrh	r3, [r7, #2]
 80073d4:	80fb      	strh	r3, [r7, #6]
 80073d6:	e00a      	b.n	80073ee <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80073d8:	f107 010c 	add.w	r1, r7, #12
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295
 80073e0:	2202      	movs	r2, #2
 80073e2:	480c      	ldr	r0, [pc, #48]	; (8007414 <ST7735_FillRectangle1+0xe4>)
 80073e4:	f006 fc52 	bl	800dc8c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	80fb      	strh	r3, [r7, #6]
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f1      	bne.n	80073d8 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 80073f4:	88bb      	ldrh	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	80bb      	strh	r3, [r7, #4]
 80073fa:	88bb      	ldrh	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e8      	bne.n	80073d2 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8007400:	f7ff fcba 	bl	8006d78 <ST7735_Unselect1>
 8007404:	e000      	b.n	8007408 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007406:	bf00      	nop
}
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	bf00      	nop
 8007410:	58021800 	.word	0x58021800
 8007414:	24000260 	.word	0x24000260

08007418 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4623      	mov	r3, r4
 8007428:	80fb      	strh	r3, [r7, #6]
 800742a:	4603      	mov	r3, r0
 800742c:	80bb      	strh	r3, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	807b      	strh	r3, [r7, #2]
 8007432:	4613      	mov	r3, r2
 8007434:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	2b7f      	cmp	r3, #127	; 0x7f
 800743a:	d86e      	bhi.n	800751a <ST7735_FillRectangleNSS+0x102>
 800743c:	88bb      	ldrh	r3, [r7, #4]
 800743e:	2b7f      	cmp	r3, #127	; 0x7f
 8007440:	d86b      	bhi.n	800751a <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	4413      	add	r3, r2
 8007448:	2b80      	cmp	r3, #128	; 0x80
 800744a:	dd03      	ble.n	8007454 <ST7735_FillRectangleNSS+0x3c>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007452:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8007454:	88ba      	ldrh	r2, [r7, #4]
 8007456:	883b      	ldrh	r3, [r7, #0]
 8007458:	4413      	add	r3, r2
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	dd03      	ble.n	8007466 <ST7735_FillRectangleNSS+0x4e>
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007464:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8007466:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 800746e:	f7ff fc5f 	bl	8006d30 <ST7735_Select>
 8007472:	e005      	b.n	8007480 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8007474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 800747c:	f7ff fc70 	bl	8006d60 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	b2d8      	uxtb	r0, r3
 8007484:	88bb      	ldrh	r3, [r7, #4]
 8007486:	b2d9      	uxtb	r1, r3
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4413      	add	r3, r2
 8007492:	b2db      	uxtb	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b2dc      	uxtb	r4, r3
 8007498:	88bb      	ldrh	r3, [r7, #4]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	883b      	ldrh	r3, [r7, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4622      	mov	r2, r4
 80074aa:	f7ff fd06 	bl	8006eba <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80074ae:	8c3b      	ldrh	r3, [r7, #32]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	733b      	strb	r3, [r7, #12]
 80074b8:	8c3b      	ldrh	r3, [r7, #32]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80074be:	2201      	movs	r2, #1
 80074c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074c4:	4817      	ldr	r0, [pc, #92]	; (8007524 <ST7735_FillRectangleNSS+0x10c>)
 80074c6:	f003 fda5 	bl	800b014 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 80074ca:	883b      	ldrh	r3, [r7, #0]
 80074cc:	80bb      	strh	r3, [r7, #4]
 80074ce:	e013      	b.n	80074f8 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 80074d0:	887b      	ldrh	r3, [r7, #2]
 80074d2:	80fb      	strh	r3, [r7, #6]
 80074d4:	e00a      	b.n	80074ec <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80074d6:	f107 010c 	add.w	r1, r7, #12
 80074da:	f04f 33ff 	mov.w	r3, #4294967295
 80074de:	2202      	movs	r2, #2
 80074e0:	4811      	ldr	r0, [pc, #68]	; (8007528 <ST7735_FillRectangleNSS+0x110>)
 80074e2:	f006 fbd3 	bl	800dc8c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	80fb      	strh	r3, [r7, #6]
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f1      	bne.n	80074d6 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 80074f2:	88bb      	ldrh	r3, [r7, #4]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	80bb      	strh	r3, [r7, #4]
 80074f8:	88bb      	ldrh	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e8      	bne.n	80074d0 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 80074fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8007506:	f7ff fc1f 	bl	8006d48 <ST7735_Unselect>
 800750a:	e007      	b.n	800751c <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 800750c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007510:	2b01      	cmp	r3, #1
 8007512:	d103      	bne.n	800751c <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8007514:	f7ff fc30 	bl	8006d78 <ST7735_Unselect1>
 8007518:	e000      	b.n	800751c <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800751a:	bf00      	nop
	}
}
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	bd90      	pop	{r4, r7, pc}
 8007522:	bf00      	nop
 8007524:	58021800 	.word	0x58021800
 8007528:	24000260 	.word	0x24000260

0800752c <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af02      	add	r7, sp, #8
 8007532:	4603      	mov	r3, r0
 8007534:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	2100      	movs	r1, #0
 8007540:	2000      	movs	r0, #0
 8007542:	f7ff fe81 	bl	8007248 <ST7735_FillRectangle>
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af02      	add	r7, sp, #8
 8007554:	4603      	mov	r3, r0
 8007556:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	2100      	movs	r1, #0
 8007562:	2000      	movs	r0, #0
 8007564:	f7ff fee4 	bl	8007330 <ST7735_FillRectangle1>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007576:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <HAL_MspInit+0x30>)
 8007578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800757c:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <HAL_MspInit+0x30>)
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <HAL_MspInit+0x30>)
 8007588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	58024400 	.word	0x58024400

080075a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a59      	ldr	r2, [pc, #356]	; (8007728 <HAL_ETH_MspInit+0x184>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f040 80ab 	bne.w	800771e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80075c8:	4b58      	ldr	r3, [pc, #352]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075ce:	4a57      	ldr	r2, [pc, #348]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80075d8:	4b54      	ldr	r3, [pc, #336]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e2:	623b      	str	r3, [r7, #32]
 80075e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80075e6:	4b51      	ldr	r3, [pc, #324]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075ec:	4a4f      	ldr	r2, [pc, #316]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80075f6:	4b4d      	ldr	r3, [pc, #308]	; (800772c <HAL_ETH_MspInit+0x188>)
 80075f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007604:	4b49      	ldr	r3, [pc, #292]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800760a:	4a48      	ldr	r2, [pc, #288]	; (800772c <HAL_ETH_MspInit+0x188>)
 800760c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007610:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007614:	4b45      	ldr	r3, [pc, #276]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007622:	4b42      	ldr	r3, [pc, #264]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007628:	4a40      	ldr	r2, [pc, #256]	; (800772c <HAL_ETH_MspInit+0x188>)
 800762a:	f043 0304 	orr.w	r3, r3, #4
 800762e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007632:	4b3e      	ldr	r3, [pc, #248]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007640:	4b3a      	ldr	r3, [pc, #232]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007646:	4a39      	ldr	r2, [pc, #228]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007648:	f043 0301 	orr.w	r3, r3, #1
 800764c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007650:	4b36      	ldr	r3, [pc, #216]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800765e:	4b33      	ldr	r3, [pc, #204]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007664:	4a31      	ldr	r2, [pc, #196]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007666:	f043 0302 	orr.w	r3, r3, #2
 800766a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800766e:	4b2f      	ldr	r3, [pc, #188]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800767c:	4b2b      	ldr	r3, [pc, #172]	; (800772c <HAL_ETH_MspInit+0x188>)
 800767e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007682:	4a2a      	ldr	r2, [pc, #168]	; (800772c <HAL_ETH_MspInit+0x188>)
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800768c:	4b27      	ldr	r3, [pc, #156]	; (800772c <HAL_ETH_MspInit+0x188>)
 800768e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800769a:	2332      	movs	r3, #50	; 0x32
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800769e:	2302      	movs	r3, #2
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a6:	2300      	movs	r3, #0
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076aa:	230b      	movs	r3, #11
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b2:	4619      	mov	r1, r3
 80076b4:	481e      	ldr	r0, [pc, #120]	; (8007730 <HAL_ETH_MspInit+0x18c>)
 80076b6:	f003 fae5 	bl	800ac84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80076ba:	2386      	movs	r3, #134	; 0x86
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076be:	2302      	movs	r3, #2
 80076c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c6:	2300      	movs	r3, #0
 80076c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076ca:	230b      	movs	r3, #11
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076d2:	4619      	mov	r1, r3
 80076d4:	4817      	ldr	r0, [pc, #92]	; (8007734 <HAL_ETH_MspInit+0x190>)
 80076d6:	f003 fad5 	bl	800ac84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80076da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e0:	2302      	movs	r3, #2
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e8:	2300      	movs	r3, #0
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076ec:	230b      	movs	r3, #11
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f4:	4619      	mov	r1, r3
 80076f6:	4810      	ldr	r0, [pc, #64]	; (8007738 <HAL_ETH_MspInit+0x194>)
 80076f8:	f003 fac4 	bl	800ac84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80076fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007702:	2302      	movs	r3, #2
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007706:	2300      	movs	r3, #0
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800770a:	2300      	movs	r3, #0
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800770e:	230b      	movs	r3, #11
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007716:	4619      	mov	r1, r3
 8007718:	4808      	ldr	r0, [pc, #32]	; (800773c <HAL_ETH_MspInit+0x198>)
 800771a:	f003 fab3 	bl	800ac84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800771e:	bf00      	nop
 8007720:	3738      	adds	r7, #56	; 0x38
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40028000 	.word	0x40028000
 800772c:	58024400 	.word	0x58024400
 8007730:	58020800 	.word	0x58020800
 8007734:	58020000 	.word	0x58020000
 8007738:	58020400 	.word	0x58020400
 800773c:	58021800 	.word	0x58021800

08007740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007748:	f107 0314 	add.w	r3, r7, #20
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	609a      	str	r2, [r3, #8]
 8007754:	60da      	str	r2, [r3, #12]
 8007756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <HAL_SPI_MspInit+0xc8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d14d      	bne.n	80077fe <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007762:	4b2a      	ldr	r3, [pc, #168]	; (800780c <HAL_SPI_MspInit+0xcc>)
 8007764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007768:	4a28      	ldr	r2, [pc, #160]	; (800780c <HAL_SPI_MspInit+0xcc>)
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007772:	4b26      	ldr	r3, [pc, #152]	; (800780c <HAL_SPI_MspInit+0xcc>)
 8007774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007780:	4b22      	ldr	r3, [pc, #136]	; (800780c <HAL_SPI_MspInit+0xcc>)
 8007782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007786:	4a21      	ldr	r2, [pc, #132]	; (800780c <HAL_SPI_MspInit+0xcc>)
 8007788:	f043 0302 	orr.w	r3, r3, #2
 800778c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007790:	4b1e      	ldr	r3, [pc, #120]	; (800780c <HAL_SPI_MspInit+0xcc>)
 8007792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800779e:	4b1b      	ldr	r3, [pc, #108]	; (800780c <HAL_SPI_MspInit+0xcc>)
 80077a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077a4:	4a19      	ldr	r2, [pc, #100]	; (800780c <HAL_SPI_MspInit+0xcc>)
 80077a6:	f043 0304 	orr.w	r3, r3, #4
 80077aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80077ae:	4b17      	ldr	r3, [pc, #92]	; (800780c <HAL_SPI_MspInit+0xcc>)
 80077b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80077bc:	2304      	movs	r3, #4
 80077be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c0:	2302      	movs	r3, #2
 80077c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80077c4:	2302      	movs	r3, #2
 80077c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c8:	2300      	movs	r3, #0
 80077ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80077cc:	2307      	movs	r3, #7
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	4619      	mov	r1, r3
 80077d6:	480e      	ldr	r0, [pc, #56]	; (8007810 <HAL_SPI_MspInit+0xd0>)
 80077d8:	f003 fa54 	bl	800ac84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80077dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e2:	2302      	movs	r3, #2
 80077e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80077e6:	2302      	movs	r3, #2
 80077e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ea:	2300      	movs	r3, #0
 80077ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077ee:	2306      	movs	r3, #6
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	4619      	mov	r1, r3
 80077f8:	4806      	ldr	r0, [pc, #24]	; (8007814 <HAL_SPI_MspInit+0xd4>)
 80077fa:	f003 fa43 	bl	800ac84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80077fe:	bf00      	nop
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40003c00 	.word	0x40003c00
 800780c:	58024400 	.word	0x58024400
 8007810:	58020400 	.word	0x58020400
 8007814:	58020800 	.word	0x58020800

08007818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a0e      	ldr	r2, [pc, #56]	; (8007860 <HAL_TIM_Base_MspInit+0x48>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d116      	bne.n	8007858 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <HAL_TIM_Base_MspInit+0x4c>)
 800782c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007830:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <HAL_TIM_Base_MspInit+0x4c>)
 8007832:	f043 0320 	orr.w	r3, r3, #32
 8007836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <HAL_TIM_Base_MspInit+0x4c>)
 800783c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	2037      	movs	r0, #55	; 0x37
 800784e:	f000 fb9a 	bl	8007f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007852:	2037      	movs	r0, #55	; 0x37
 8007854:	f000 fbb1 	bl	8007fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40001400 	.word	0x40001400
 8007864:	58024400 	.word	0x58024400

08007868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b0b8      	sub	sp, #224	; 0xe0
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007870:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	60da      	str	r2, [r3, #12]
 800787e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007880:	f107 0310 	add.w	r3, r7, #16
 8007884:	22bc      	movs	r2, #188	; 0xbc
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f009 f88d 	bl	80109a8 <memset>
  if(huart->Instance==USART3)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a57      	ldr	r2, [pc, #348]	; (80079f0 <HAL_UART_MspInit+0x188>)
 8007894:	4293      	cmp	r3, r2
 8007896:	f040 80a6 	bne.w	80079e6 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800789a:	2302      	movs	r3, #2
 800789c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800789e:	2300      	movs	r3, #0
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078a4:	f107 0310 	add.w	r3, r7, #16
 80078a8:	4618      	mov	r0, r3
 80078aa:	f004 fd81 	bl	800c3b0 <HAL_RCCEx_PeriphCLKConfig>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80078b4:	f7ff fa36 	bl	8006d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80078b8:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078be:	4a4d      	ldr	r2, [pc, #308]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80078c8:	4b4a      	ldr	r3, [pc, #296]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078d6:	4b47      	ldr	r3, [pc, #284]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078dc:	4a45      	ldr	r2, [pc, #276]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078de:	f043 0308 	orr.w	r3, r3, #8
 80078e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078e6:	4b43      	ldr	r3, [pc, #268]	; (80079f4 <HAL_UART_MspInit+0x18c>)
 80078e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80078f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fc:	2302      	movs	r3, #2
 80078fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007902:	2300      	movs	r3, #0
 8007904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007908:	2300      	movs	r3, #0
 800790a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800790e:	2307      	movs	r3, #7
 8007910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007914:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007918:	4619      	mov	r1, r3
 800791a:	4837      	ldr	r0, [pc, #220]	; (80079f8 <HAL_UART_MspInit+0x190>)
 800791c:	f003 f9b2 	bl	800ac84 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007920:	4b36      	ldr	r3, [pc, #216]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007922:	4a37      	ldr	r2, [pc, #220]	; (8007a00 <HAL_UART_MspInit+0x198>)
 8007924:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8007926:	4b35      	ldr	r3, [pc, #212]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007928:	222d      	movs	r2, #45	; 0x2d
 800792a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800792c:	4b33      	ldr	r3, [pc, #204]	; (80079fc <HAL_UART_MspInit+0x194>)
 800792e:	2200      	movs	r2, #0
 8007930:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007934:	2200      	movs	r2, #0
 8007936:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007938:	4b30      	ldr	r3, [pc, #192]	; (80079fc <HAL_UART_MspInit+0x194>)
 800793a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800793e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007940:	4b2e      	ldr	r3, [pc, #184]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007942:	2200      	movs	r2, #0
 8007944:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007946:	4b2d      	ldr	r3, [pc, #180]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007948:	2200      	movs	r2, #0
 800794a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800794c:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_UART_MspInit+0x194>)
 800794e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007952:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007956:	2200      	movs	r2, #0
 8007958:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800795a:	4b28      	ldr	r3, [pc, #160]	; (80079fc <HAL_UART_MspInit+0x194>)
 800795c:	2200      	movs	r2, #0
 800795e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007960:	4826      	ldr	r0, [pc, #152]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007962:	f000 fb45 	bl	8007ff0 <HAL_DMA_Init>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800796c:	f7ff f9da 	bl	8006d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a22      	ldr	r2, [pc, #136]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007974:	67da      	str	r2, [r3, #124]	; 0x7c
 8007976:	4a21      	ldr	r2, [pc, #132]	; (80079fc <HAL_UART_MspInit+0x194>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800797c:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 800797e:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <HAL_UART_MspInit+0x1a0>)
 8007980:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007982:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 8007984:	222e      	movs	r2, #46	; 0x2e
 8007986:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 800798a:	2240      	movs	r2, #64	; 0x40
 800798c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800798e:	4b1d      	ldr	r3, [pc, #116]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 8007990:	2200      	movs	r2, #0
 8007992:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007994:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 8007996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800799a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800799c:	4b19      	ldr	r3, [pc, #100]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 800799e:	2200      	movs	r2, #0
 80079a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079a2:	4b18      	ldr	r3, [pc, #96]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80079a8:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80079b4:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80079ba:	4812      	ldr	r0, [pc, #72]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079bc:	f000 fb18 	bl	8007ff0 <HAL_DMA_Init>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80079c6:	f7ff f9ad 	bl	8006d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079ce:	679a      	str	r2, [r3, #120]	; 0x78
 80079d0:	4a0c      	ldr	r2, [pc, #48]	; (8007a04 <HAL_UART_MspInit+0x19c>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80079d6:	2200      	movs	r2, #0
 80079d8:	2100      	movs	r1, #0
 80079da:	2027      	movs	r0, #39	; 0x27
 80079dc:	f000 fad3 	bl	8007f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80079e0:	2027      	movs	r0, #39	; 0x27
 80079e2:	f000 faea 	bl	8007fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80079e6:	bf00      	nop
 80079e8:	37e0      	adds	r7, #224	; 0xe0
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40004800 	.word	0x40004800
 80079f4:	58024400 	.word	0x58024400
 80079f8:	58020c00 	.word	0x58020c00
 80079fc:	240003c4 	.word	0x240003c4
 8007a00:	40020028 	.word	0x40020028
 8007a04:	2400043c 	.word	0x2400043c
 8007a08:	40020070 	.word	0x40020070

08007a0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <HAL_PCD_MspInit+0xa8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d13d      	bne.n	8007aaa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8007a2e:	f003 fcf5 	bl	800b41c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a32:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a38:	4a1f      	ldr	r2, [pc, #124]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a42:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007a50:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a56:	2302      	movs	r3, #2
 8007a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007a62:	230a      	movs	r3, #10
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a66:	f107 0314 	add.w	r3, r7, #20
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4813      	ldr	r0, [pc, #76]	; (8007abc <HAL_PCD_MspInit+0xb0>)
 8007a6e:	f003 f909 	bl	800ac84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4619      	mov	r1, r3
 8007a86:	480d      	ldr	r0, [pc, #52]	; (8007abc <HAL_PCD_MspInit+0xb0>)
 8007a88:	f003 f8fc 	bl	800ac84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a92:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <HAL_PCD_MspInit+0xac>)
 8007a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007aaa:	bf00      	nop
 8007aac:	3728      	adds	r7, #40	; 0x28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40080000 	.word	0x40080000
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	58020000 	.word	0x58020000

08007ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ac4:	e7fe      	b.n	8007ac4 <NMI_Handler+0x4>

08007ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007aca:	e7fe      	b.n	8007aca <HardFault_Handler+0x4>

08007acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ad0:	e7fe      	b.n	8007ad0 <MemManage_Handler+0x4>

08007ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ad6:	e7fe      	b.n	8007ad6 <BusFault_Handler+0x4>

08007ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007adc:	e7fe      	b.n	8007adc <UsageFault_Handler+0x4>

08007ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ae2:	bf00      	nop
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007af0:	bf00      	nop
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007afa:	b480      	push	{r7}
 8007afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b0c:	f000 f8fc 	bl	8007d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b10:	bf00      	nop
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007b18:	4802      	ldr	r0, [pc, #8]	; (8007b24 <DMA1_Stream1_IRQHandler+0x10>)
 8007b1a:	f001 fb29 	bl	8009170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	240003c4 	.word	0x240003c4

08007b28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007b2c:	4802      	ldr	r0, [pc, #8]	; (8007b38 <DMA1_Stream4_IRQHandler+0x10>)
 8007b2e:	f001 fb1f 	bl	8009170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	2400043c 	.word	0x2400043c

08007b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007b40:	4802      	ldr	r0, [pc, #8]	; (8007b4c <USART3_IRQHandler+0x10>)
 8007b42:	f006 ff59 	bl	800e9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007b46:	bf00      	nop
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	24000334 	.word	0x24000334

08007b50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007b54:	4802      	ldr	r0, [pc, #8]	; (8007b60 <TIM7_IRQHandler+0x10>)
 8007b56:	f006 fc72 	bl	800e43e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007b5a:	bf00      	nop
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	240002e8 	.word	0x240002e8

08007b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b6c:	4a14      	ldr	r2, [pc, #80]	; (8007bc0 <_sbrk+0x5c>)
 8007b6e:	4b15      	ldr	r3, [pc, #84]	; (8007bc4 <_sbrk+0x60>)
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b78:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <_sbrk+0x64>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b80:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <_sbrk+0x64>)
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <_sbrk+0x68>)
 8007b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <_sbrk+0x64>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d207      	bcs.n	8007ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b94:	f008 fede 	bl	8010954 <__errno>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	220c      	movs	r2, #12
 8007b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba2:	e009      	b.n	8007bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ba4:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <_sbrk+0x64>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <_sbrk+0x64>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4a05      	ldr	r2, [pc, #20]	; (8007bc8 <_sbrk+0x64>)
 8007bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	24080000 	.word	0x24080000
 8007bc4:	00000400 	.word	0x00000400
 8007bc8:	24000eb0 	.word	0x24000eb0
 8007bcc:	24000ec8 	.word	0x24000ec8

08007bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007bd4:	f7fe fc0e 	bl	80063f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007bd8:	480c      	ldr	r0, [pc, #48]	; (8007c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007bda:	490d      	ldr	r1, [pc, #52]	; (8007c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007bdc:	4a0d      	ldr	r2, [pc, #52]	; (8007c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007be0:	e002      	b.n	8007be8 <LoopCopyDataInit>

08007be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007be6:	3304      	adds	r3, #4

08007be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bec:	d3f9      	bcc.n	8007be2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bee:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007bf0:	4c0a      	ldr	r4, [pc, #40]	; (8007c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007bf4:	e001      	b.n	8007bfa <LoopFillZerobss>

08007bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007bf8:	3204      	adds	r2, #4

08007bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bfc:	d3fb      	bcc.n	8007bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007bfe:	f008 feaf 	bl	8010960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c02:	f7fe fc8d 	bl	8006520 <main>
  bx  lr
 8007c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007c0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007c10:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8007c14:	08012cf8 	.word	0x08012cf8
  ldr r2, =_sbss
 8007c18:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8007c1c:	24000ec8 	.word	0x24000ec8

08007c20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c20:	e7fe      	b.n	8007c20 <ADC3_IRQHandler>
	...

08007c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c2a:	2003      	movs	r0, #3
 8007c2c:	f000 f9a0 	bl	8007f70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c30:	f004 f9e8 	bl	800c004 <HAL_RCC_GetSysClockFreq>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <HAL_Init+0x68>)
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	4913      	ldr	r1, [pc, #76]	; (8007c90 <HAL_Init+0x6c>)
 8007c42:	5ccb      	ldrb	r3, [r1, r3]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <HAL_Init+0x68>)
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <HAL_Init+0x6c>)
 8007c58:	5cd3      	ldrb	r3, [r2, r3]
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	4a0b      	ldr	r2, [pc, #44]	; (8007c94 <HAL_Init+0x70>)
 8007c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c68:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <HAL_Init+0x74>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f000 f814 	bl	8007c9c <HAL_InitTick>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e002      	b.n	8007c84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007c7e:	f7ff fc77 	bl	8007570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	08011734 	.word	0x08011734
 8007c94:	24000008 	.word	0x24000008
 8007c98:	24000004 	.word	0x24000004

08007c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007ca4:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <HAL_InitTick+0x60>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e021      	b.n	8007cf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <HAL_InitTick+0x64>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <HAL_InitTick+0x60>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f985 	bl	8007fd6 <HAL_SYSTICK_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e00e      	b.n	8007cf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b0f      	cmp	r3, #15
 8007cda:	d80a      	bhi.n	8007cf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	f000 f94f 	bl	8007f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ce8:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <HAL_InitTick+0x68>)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	24000020 	.word	0x24000020
 8007d00:	24000004 	.word	0x24000004
 8007d04:	2400001c 	.word	0x2400001c

08007d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <HAL_IncTick+0x20>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <HAL_IncTick+0x24>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <HAL_IncTick+0x24>)
 8007d1a:	6013      	str	r3, [r2, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	24000020 	.word	0x24000020
 8007d2c:	24000eb4 	.word	0x24000eb4

08007d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  return uwTick;
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <HAL_GetTick+0x14>)
 8007d36:	681b      	ldr	r3, [r3, #0]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	24000eb4 	.word	0x24000eb4

08007d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d50:	f7ff ffee 	bl	8007d30 <HAL_GetTick>
 8007d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d005      	beq.n	8007d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <HAL_Delay+0x44>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d6e:	bf00      	nop
 8007d70:	f7ff ffde 	bl	8007d30 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d8f7      	bhi.n	8007d70 <HAL_Delay+0x28>
  {
  }
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	24000020 	.word	0x24000020

08007d90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <HAL_GetREVID+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	0c1b      	lsrs	r3, r3, #16
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	5c001000 	.word	0x5c001000

08007da8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007db0:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007db8:	4904      	ldr	r1, [pc, #16]	; (8007dcc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	604b      	str	r3, [r1, #4]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	58000400 	.word	0x58000400

08007dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <__NVIC_SetPriorityGrouping+0x40>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dec:	4013      	ands	r3, r2
 8007dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <__NVIC_SetPriorityGrouping+0x44>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dfe:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <__NVIC_SetPriorityGrouping+0x40>)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	60d3      	str	r3, [r2, #12]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	e000ed00 	.word	0xe000ed00
 8007e14:	05fa0000 	.word	0x05fa0000

08007e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <__NVIC_GetPriorityGrouping+0x18>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	0a1b      	lsrs	r3, r3, #8
 8007e22:	f003 0307 	and.w	r3, r3, #7
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	e000ed00 	.word	0xe000ed00

08007e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	db0b      	blt.n	8007e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	f003 021f 	and.w	r2, r3, #31
 8007e4c:	4907      	ldr	r1, [pc, #28]	; (8007e6c <__NVIC_EnableIRQ+0x38>)
 8007e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	2001      	movs	r0, #1
 8007e56:	fa00 f202 	lsl.w	r2, r0, r2
 8007e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	e000e100 	.word	0xe000e100

08007e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db0a      	blt.n	8007e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	490c      	ldr	r1, [pc, #48]	; (8007ebc <__NVIC_SetPriority+0x4c>)
 8007e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e8e:	0112      	lsls	r2, r2, #4
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	440b      	add	r3, r1
 8007e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e98:	e00a      	b.n	8007eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4908      	ldr	r1, [pc, #32]	; (8007ec0 <__NVIC_SetPriority+0x50>)
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	0112      	lsls	r2, r2, #4
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	440b      	add	r3, r1
 8007eae:	761a      	strb	r2, [r3, #24]
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	e000e100 	.word	0xe000e100
 8007ec0:	e000ed00 	.word	0xe000ed00

08007ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b089      	sub	sp, #36	; 0x24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f1c3 0307 	rsb	r3, r3, #7
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	bf28      	it	cs
 8007ee2:	2304      	movcs	r3, #4
 8007ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	2b06      	cmp	r3, #6
 8007eec:	d902      	bls.n	8007ef4 <NVIC_EncodePriority+0x30>
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3b03      	subs	r3, #3
 8007ef2:	e000      	b.n	8007ef6 <NVIC_EncodePriority+0x32>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	43da      	mvns	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	401a      	ands	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	fa01 f303 	lsl.w	r3, r1, r3
 8007f16:	43d9      	mvns	r1, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f1c:	4313      	orrs	r3, r2
         );
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3724      	adds	r7, #36	; 0x24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f3c:	d301      	bcc.n	8007f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e00f      	b.n	8007f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f42:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <SysTick_Config+0x40>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f4a:	210f      	movs	r1, #15
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	f7ff ff8e 	bl	8007e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <SysTick_Config+0x40>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f5a:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <SysTick_Config+0x40>)
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	e000e010 	.word	0xe000e010

08007f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff ff29 	bl	8007dd0 <__NVIC_SetPriorityGrouping>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
 8007f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007f94:	f7ff ff40 	bl	8007e18 <__NVIC_GetPriorityGrouping>
 8007f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7ff ff90 	bl	8007ec4 <NVIC_EncodePriority>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff ff5f 	bl	8007e70 <__NVIC_SetPriority>
}
 8007fb2:	bf00      	nop
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ff33 	bl	8007e34 <__NVIC_EnableIRQ>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff ffa4 	bl	8007f2c <SysTick_Config>
 8007fe4:	4603      	mov	r3, r0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007ff8:	f7ff fe9a 	bl	8007d30 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e316      	b.n	8008636 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a66      	ldr	r2, [pc, #408]	; (80081a8 <HAL_DMA_Init+0x1b8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d04a      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a65      	ldr	r2, [pc, #404]	; (80081ac <HAL_DMA_Init+0x1bc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a63      	ldr	r2, [pc, #396]	; (80081b0 <HAL_DMA_Init+0x1c0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d040      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a62      	ldr	r2, [pc, #392]	; (80081b4 <HAL_DMA_Init+0x1c4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d03b      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a60      	ldr	r2, [pc, #384]	; (80081b8 <HAL_DMA_Init+0x1c8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d036      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a5f      	ldr	r2, [pc, #380]	; (80081bc <HAL_DMA_Init+0x1cc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d031      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a5d      	ldr	r2, [pc, #372]	; (80081c0 <HAL_DMA_Init+0x1d0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a5c      	ldr	r2, [pc, #368]	; (80081c4 <HAL_DMA_Init+0x1d4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d027      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a5a      	ldr	r2, [pc, #360]	; (80081c8 <HAL_DMA_Init+0x1d8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a59      	ldr	r2, [pc, #356]	; (80081cc <HAL_DMA_Init+0x1dc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a57      	ldr	r2, [pc, #348]	; (80081d0 <HAL_DMA_Init+0x1e0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a56      	ldr	r2, [pc, #344]	; (80081d4 <HAL_DMA_Init+0x1e4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a54      	ldr	r2, [pc, #336]	; (80081d8 <HAL_DMA_Init+0x1e8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a53      	ldr	r2, [pc, #332]	; (80081dc <HAL_DMA_Init+0x1ec>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a51      	ldr	r2, [pc, #324]	; (80081e0 <HAL_DMA_Init+0x1f0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_DMA_Init+0xb8>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a50      	ldr	r2, [pc, #320]	; (80081e4 <HAL_DMA_Init+0x1f4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d101      	bne.n	80080ac <HAL_DMA_Init+0xbc>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <HAL_DMA_Init+0xbe>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 813b 	beq.w	800832a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a37      	ldr	r2, [pc, #220]	; (80081a8 <HAL_DMA_Init+0x1b8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d04a      	beq.n	8008164 <HAL_DMA_Init+0x174>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a36      	ldr	r2, [pc, #216]	; (80081ac <HAL_DMA_Init+0x1bc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d045      	beq.n	8008164 <HAL_DMA_Init+0x174>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a34      	ldr	r2, [pc, #208]	; (80081b0 <HAL_DMA_Init+0x1c0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d040      	beq.n	8008164 <HAL_DMA_Init+0x174>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <HAL_DMA_Init+0x1c4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d03b      	beq.n	8008164 <HAL_DMA_Init+0x174>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a31      	ldr	r2, [pc, #196]	; (80081b8 <HAL_DMA_Init+0x1c8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d036      	beq.n	8008164 <HAL_DMA_Init+0x174>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a30      	ldr	r2, [pc, #192]	; (80081bc <HAL_DMA_Init+0x1cc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d031      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2e      	ldr	r2, [pc, #184]	; (80081c0 <HAL_DMA_Init+0x1d0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02c      	beq.n	8008164 <HAL_DMA_Init+0x174>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <HAL_DMA_Init+0x1d4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d027      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a2b      	ldr	r2, [pc, #172]	; (80081c8 <HAL_DMA_Init+0x1d8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d022      	beq.n	8008164 <HAL_DMA_Init+0x174>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <HAL_DMA_Init+0x1dc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d01d      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a28      	ldr	r2, [pc, #160]	; (80081d0 <HAL_DMA_Init+0x1e0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d018      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a27      	ldr	r2, [pc, #156]	; (80081d4 <HAL_DMA_Init+0x1e4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <HAL_DMA_Init+0x174>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a25      	ldr	r2, [pc, #148]	; (80081d8 <HAL_DMA_Init+0x1e8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00e      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a24      	ldr	r2, [pc, #144]	; (80081dc <HAL_DMA_Init+0x1ec>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_DMA_Init+0x174>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <HAL_DMA_Init+0x1f0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_DMA_Init+0x174>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <HAL_DMA_Init+0x1f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <HAL_DMA_Init+0x186>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	e007      	b.n	8008186 <HAL_DMA_Init+0x196>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0201 	bic.w	r2, r2, #1
 8008184:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008186:	e02f      	b.n	80081e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008188:	f7ff fdd2 	bl	8007d30 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b05      	cmp	r3, #5
 8008194:	d928      	bls.n	80081e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2203      	movs	r2, #3
 80081a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e246      	b.n	8008636 <HAL_DMA_Init+0x646>
 80081a8:	40020010 	.word	0x40020010
 80081ac:	40020028 	.word	0x40020028
 80081b0:	40020040 	.word	0x40020040
 80081b4:	40020058 	.word	0x40020058
 80081b8:	40020070 	.word	0x40020070
 80081bc:	40020088 	.word	0x40020088
 80081c0:	400200a0 	.word	0x400200a0
 80081c4:	400200b8 	.word	0x400200b8
 80081c8:	40020410 	.word	0x40020410
 80081cc:	40020428 	.word	0x40020428
 80081d0:	40020440 	.word	0x40020440
 80081d4:	40020458 	.word	0x40020458
 80081d8:	40020470 	.word	0x40020470
 80081dc:	40020488 	.word	0x40020488
 80081e0:	400204a0 	.word	0x400204a0
 80081e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1c8      	bne.n	8008188 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4b83      	ldr	r3, [pc, #524]	; (8008410 <HAL_DMA_Init+0x420>)
 8008202:	4013      	ands	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800820e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800821a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008226:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b04      	cmp	r3, #4
 800823a:	d107      	bne.n	800824c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	4313      	orrs	r3, r2
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800824c:	4b71      	ldr	r3, [pc, #452]	; (8008414 <HAL_DMA_Init+0x424>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	4b71      	ldr	r3, [pc, #452]	; (8008418 <HAL_DMA_Init+0x428>)
 8008252:	4013      	ands	r3, r2
 8008254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008258:	d328      	bcc.n	80082ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b28      	cmp	r3, #40	; 0x28
 8008260:	d903      	bls.n	800826a <HAL_DMA_Init+0x27a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b2e      	cmp	r3, #46	; 0x2e
 8008268:	d917      	bls.n	800829a <HAL_DMA_Init+0x2aa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b3e      	cmp	r3, #62	; 0x3e
 8008270:	d903      	bls.n	800827a <HAL_DMA_Init+0x28a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b42      	cmp	r3, #66	; 0x42
 8008278:	d90f      	bls.n	800829a <HAL_DMA_Init+0x2aa>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b46      	cmp	r3, #70	; 0x46
 8008280:	d903      	bls.n	800828a <HAL_DMA_Init+0x29a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b48      	cmp	r3, #72	; 0x48
 8008288:	d907      	bls.n	800829a <HAL_DMA_Init+0x2aa>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b4e      	cmp	r3, #78	; 0x4e
 8008290:	d905      	bls.n	800829e <HAL_DMA_Init+0x2ae>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b52      	cmp	r3, #82	; 0x52
 8008298:	d801      	bhi.n	800829e <HAL_DMA_Init+0x2ae>
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <HAL_DMA_Init+0x2b0>
 800829e:	2300      	movs	r3, #0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0307 	bic.w	r3, r3, #7
 80082c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d117      	bne.n	8008306 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 ff1d 	bl	800a128 <DMA_CheckFifoParam>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2240      	movs	r2, #64	; 0x40
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e197      	b.n	8008636 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fe58 	bl	8009fc4 <DMA_CalcBaseAndBitshift>
 8008314:	4603      	mov	r3, r0
 8008316:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831c:	f003 031f 	and.w	r3, r3, #31
 8008320:	223f      	movs	r2, #63	; 0x3f
 8008322:	409a      	lsls	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	e0cd      	b.n	80084c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a3b      	ldr	r2, [pc, #236]	; (800841c <HAL_DMA_Init+0x42c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_DMA_Init+0x38a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a39      	ldr	r2, [pc, #228]	; (8008420 <HAL_DMA_Init+0x430>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01d      	beq.n	800837a <HAL_DMA_Init+0x38a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a38      	ldr	r2, [pc, #224]	; (8008424 <HAL_DMA_Init+0x434>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_DMA_Init+0x38a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a36      	ldr	r2, [pc, #216]	; (8008428 <HAL_DMA_Init+0x438>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_DMA_Init+0x38a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a35      	ldr	r2, [pc, #212]	; (800842c <HAL_DMA_Init+0x43c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_DMA_Init+0x38a>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a33      	ldr	r2, [pc, #204]	; (8008430 <HAL_DMA_Init+0x440>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_DMA_Init+0x38a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a32      	ldr	r2, [pc, #200]	; (8008434 <HAL_DMA_Init+0x444>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_DMA_Init+0x38a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a30      	ldr	r2, [pc, #192]	; (8008438 <HAL_DMA_Init+0x448>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d101      	bne.n	800837e <HAL_DMA_Init+0x38e>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_DMA_Init+0x390>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8097 	beq.w	80084b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a24      	ldr	r2, [pc, #144]	; (800841c <HAL_DMA_Init+0x42c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d021      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a22      	ldr	r2, [pc, #136]	; (8008420 <HAL_DMA_Init+0x430>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01c      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a21      	ldr	r2, [pc, #132]	; (8008424 <HAL_DMA_Init+0x434>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d017      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <HAL_DMA_Init+0x438>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d012      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1e      	ldr	r2, [pc, #120]	; (800842c <HAL_DMA_Init+0x43c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00d      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1c      	ldr	r2, [pc, #112]	; (8008430 <HAL_DMA_Init+0x440>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d008      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <HAL_DMA_Init+0x444>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <HAL_DMA_Init+0x3e4>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a19      	ldr	r2, [pc, #100]	; (8008438 <HAL_DMA_Init+0x448>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4b12      	ldr	r3, [pc, #72]	; (800843c <HAL_DMA_Init+0x44c>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b40      	cmp	r3, #64	; 0x40
 80083fc:	d020      	beq.n	8008440 <HAL_DMA_Init+0x450>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b80      	cmp	r3, #128	; 0x80
 8008404:	d102      	bne.n	800840c <HAL_DMA_Init+0x41c>
 8008406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800840a:	e01a      	b.n	8008442 <HAL_DMA_Init+0x452>
 800840c:	2300      	movs	r3, #0
 800840e:	e018      	b.n	8008442 <HAL_DMA_Init+0x452>
 8008410:	fe10803f 	.word	0xfe10803f
 8008414:	5c001000 	.word	0x5c001000
 8008418:	ffff0000 	.word	0xffff0000
 800841c:	58025408 	.word	0x58025408
 8008420:	5802541c 	.word	0x5802541c
 8008424:	58025430 	.word	0x58025430
 8008428:	58025444 	.word	0x58025444
 800842c:	58025458 	.word	0x58025458
 8008430:	5802546c 	.word	0x5802546c
 8008434:	58025480 	.word	0x58025480
 8008438:	58025494 	.word	0x58025494
 800843c:	fffe000f 	.word	0xfffe000f
 8008440:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68d2      	ldr	r2, [r2, #12]
 8008446:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008470:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	4b6e      	ldr	r3, [pc, #440]	; (8008640 <HAL_DMA_Init+0x650>)
 8008488:	4413      	add	r3, r2
 800848a:	4a6e      	ldr	r2, [pc, #440]	; (8008644 <HAL_DMA_Init+0x654>)
 800848c:	fba2 2303 	umull	r2, r3, r2, r3
 8008490:	091b      	lsrs	r3, r3, #4
 8008492:	009a      	lsls	r2, r3, #2
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fd93 	bl	8009fc4 <DMA_CalcBaseAndBitshift>
 800849e:	4603      	mov	r3, r0
 80084a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	2201      	movs	r2, #1
 80084ac:	409a      	lsls	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	605a      	str	r2, [r3, #4]
 80084b2:	e008      	b.n	80084c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2240      	movs	r2, #64	; 0x40
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e0b7      	b.n	8008636 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a5f      	ldr	r2, [pc, #380]	; (8008648 <HAL_DMA_Init+0x658>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d072      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a5d      	ldr	r2, [pc, #372]	; (800864c <HAL_DMA_Init+0x65c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d06d      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a5c      	ldr	r2, [pc, #368]	; (8008650 <HAL_DMA_Init+0x660>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d068      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a5a      	ldr	r2, [pc, #360]	; (8008654 <HAL_DMA_Init+0x664>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d063      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a59      	ldr	r2, [pc, #356]	; (8008658 <HAL_DMA_Init+0x668>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d05e      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a57      	ldr	r2, [pc, #348]	; (800865c <HAL_DMA_Init+0x66c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d059      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a56      	ldr	r2, [pc, #344]	; (8008660 <HAL_DMA_Init+0x670>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d054      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a54      	ldr	r2, [pc, #336]	; (8008664 <HAL_DMA_Init+0x674>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d04f      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a53      	ldr	r2, [pc, #332]	; (8008668 <HAL_DMA_Init+0x678>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d04a      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a51      	ldr	r2, [pc, #324]	; (800866c <HAL_DMA_Init+0x67c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d045      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a50      	ldr	r2, [pc, #320]	; (8008670 <HAL_DMA_Init+0x680>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d040      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <HAL_DMA_Init+0x684>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d03b      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a4d      	ldr	r2, [pc, #308]	; (8008678 <HAL_DMA_Init+0x688>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d036      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a4b      	ldr	r2, [pc, #300]	; (800867c <HAL_DMA_Init+0x68c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d031      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a4a      	ldr	r2, [pc, #296]	; (8008680 <HAL_DMA_Init+0x690>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d02c      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a48      	ldr	r2, [pc, #288]	; (8008684 <HAL_DMA_Init+0x694>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d027      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a47      	ldr	r2, [pc, #284]	; (8008688 <HAL_DMA_Init+0x698>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d022      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a45      	ldr	r2, [pc, #276]	; (800868c <HAL_DMA_Init+0x69c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01d      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a44      	ldr	r2, [pc, #272]	; (8008690 <HAL_DMA_Init+0x6a0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d018      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a42      	ldr	r2, [pc, #264]	; (8008694 <HAL_DMA_Init+0x6a4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a41      	ldr	r2, [pc, #260]	; (8008698 <HAL_DMA_Init+0x6a8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00e      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a3f      	ldr	r2, [pc, #252]	; (800869c <HAL_DMA_Init+0x6ac>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d009      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a3e      	ldr	r2, [pc, #248]	; (80086a0 <HAL_DMA_Init+0x6b0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <HAL_DMA_Init+0x5c6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a3c      	ldr	r2, [pc, #240]	; (80086a4 <HAL_DMA_Init+0x6b4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d101      	bne.n	80085ba <HAL_DMA_Init+0x5ca>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <HAL_DMA_Init+0x5cc>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d032      	beq.n	8008626 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fe2d 	bl	800a220 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b80      	cmp	r3, #128	; 0x80
 80085cc:	d102      	bne.n	80085d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_DMA_Init+0x624>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d80c      	bhi.n	8008614 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 feaa 	bl	800a354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	e008      	b.n	8008626 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	a7fdabf8 	.word	0xa7fdabf8
 8008644:	cccccccd 	.word	0xcccccccd
 8008648:	40020010 	.word	0x40020010
 800864c:	40020028 	.word	0x40020028
 8008650:	40020040 	.word	0x40020040
 8008654:	40020058 	.word	0x40020058
 8008658:	40020070 	.word	0x40020070
 800865c:	40020088 	.word	0x40020088
 8008660:	400200a0 	.word	0x400200a0
 8008664:	400200b8 	.word	0x400200b8
 8008668:	40020410 	.word	0x40020410
 800866c:	40020428 	.word	0x40020428
 8008670:	40020440 	.word	0x40020440
 8008674:	40020458 	.word	0x40020458
 8008678:	40020470 	.word	0x40020470
 800867c:	40020488 	.word	0x40020488
 8008680:	400204a0 	.word	0x400204a0
 8008684:	400204b8 	.word	0x400204b8
 8008688:	58025408 	.word	0x58025408
 800868c:	5802541c 	.word	0x5802541c
 8008690:	58025430 	.word	0x58025430
 8008694:	58025444 	.word	0x58025444
 8008698:	58025458 	.word	0x58025458
 800869c:	5802546c 	.word	0x5802546c
 80086a0:	58025480 	.word	0x58025480
 80086a4:	58025494 	.word	0x58025494

080086a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80086b0:	f7ff fb3e 	bl	8007d30 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e2dc      	b.n	8008c7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d008      	beq.n	80086de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2280      	movs	r2, #128	; 0x80
 80086d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e2cd      	b.n	8008c7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a76      	ldr	r2, [pc, #472]	; (80088bc <HAL_DMA_Abort+0x214>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d04a      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a74      	ldr	r2, [pc, #464]	; (80088c0 <HAL_DMA_Abort+0x218>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d045      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a73      	ldr	r2, [pc, #460]	; (80088c4 <HAL_DMA_Abort+0x21c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d040      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a71      	ldr	r2, [pc, #452]	; (80088c8 <HAL_DMA_Abort+0x220>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d03b      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a70      	ldr	r2, [pc, #448]	; (80088cc <HAL_DMA_Abort+0x224>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d036      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a6e      	ldr	r2, [pc, #440]	; (80088d0 <HAL_DMA_Abort+0x228>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d031      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a6d      	ldr	r2, [pc, #436]	; (80088d4 <HAL_DMA_Abort+0x22c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d02c      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a6b      	ldr	r2, [pc, #428]	; (80088d8 <HAL_DMA_Abort+0x230>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d027      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a6a      	ldr	r2, [pc, #424]	; (80088dc <HAL_DMA_Abort+0x234>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d022      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a68      	ldr	r2, [pc, #416]	; (80088e0 <HAL_DMA_Abort+0x238>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d01d      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a67      	ldr	r2, [pc, #412]	; (80088e4 <HAL_DMA_Abort+0x23c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d018      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a65      	ldr	r2, [pc, #404]	; (80088e8 <HAL_DMA_Abort+0x240>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d013      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a64      	ldr	r2, [pc, #400]	; (80088ec <HAL_DMA_Abort+0x244>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00e      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a62      	ldr	r2, [pc, #392]	; (80088f0 <HAL_DMA_Abort+0x248>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d009      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a61      	ldr	r2, [pc, #388]	; (80088f4 <HAL_DMA_Abort+0x24c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <HAL_DMA_Abort+0xd6>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a5f      	ldr	r2, [pc, #380]	; (80088f8 <HAL_DMA_Abort+0x250>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d101      	bne.n	8008782 <HAL_DMA_Abort+0xda>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <HAL_DMA_Abort+0xdc>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d013      	beq.n	80087b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 021e 	bic.w	r2, r2, #30
 8008796:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e00a      	b.n	80087c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 020e 	bic.w	r2, r2, #14
 80087be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a3c      	ldr	r2, [pc, #240]	; (80088bc <HAL_DMA_Abort+0x214>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d072      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a3a      	ldr	r2, [pc, #232]	; (80088c0 <HAL_DMA_Abort+0x218>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d06d      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a39      	ldr	r2, [pc, #228]	; (80088c4 <HAL_DMA_Abort+0x21c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d068      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a37      	ldr	r2, [pc, #220]	; (80088c8 <HAL_DMA_Abort+0x220>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d063      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a36      	ldr	r2, [pc, #216]	; (80088cc <HAL_DMA_Abort+0x224>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d05e      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a34      	ldr	r2, [pc, #208]	; (80088d0 <HAL_DMA_Abort+0x228>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d059      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a33      	ldr	r2, [pc, #204]	; (80088d4 <HAL_DMA_Abort+0x22c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d054      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a31      	ldr	r2, [pc, #196]	; (80088d8 <HAL_DMA_Abort+0x230>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d04f      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a30      	ldr	r2, [pc, #192]	; (80088dc <HAL_DMA_Abort+0x234>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d04a      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a2e      	ldr	r2, [pc, #184]	; (80088e0 <HAL_DMA_Abort+0x238>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d045      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a2d      	ldr	r2, [pc, #180]	; (80088e4 <HAL_DMA_Abort+0x23c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d040      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <HAL_DMA_Abort+0x240>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d03b      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <HAL_DMA_Abort+0x244>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d036      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a28      	ldr	r2, [pc, #160]	; (80088f0 <HAL_DMA_Abort+0x248>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d031      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a27      	ldr	r2, [pc, #156]	; (80088f4 <HAL_DMA_Abort+0x24c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d02c      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a25      	ldr	r2, [pc, #148]	; (80088f8 <HAL_DMA_Abort+0x250>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d027      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a24      	ldr	r2, [pc, #144]	; (80088fc <HAL_DMA_Abort+0x254>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d022      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a22      	ldr	r2, [pc, #136]	; (8008900 <HAL_DMA_Abort+0x258>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01d      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a21      	ldr	r2, [pc, #132]	; (8008904 <HAL_DMA_Abort+0x25c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d018      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1f      	ldr	r2, [pc, #124]	; (8008908 <HAL_DMA_Abort+0x260>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1e      	ldr	r2, [pc, #120]	; (800890c <HAL_DMA_Abort+0x264>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00e      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <HAL_DMA_Abort+0x268>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d009      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <HAL_DMA_Abort+0x26c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <HAL_DMA_Abort+0x20e>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a19      	ldr	r2, [pc, #100]	; (8008918 <HAL_DMA_Abort+0x270>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d132      	bne.n	800891c <HAL_DMA_Abort+0x274>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e031      	b.n	800891e <HAL_DMA_Abort+0x276>
 80088ba:	bf00      	nop
 80088bc:	40020010 	.word	0x40020010
 80088c0:	40020028 	.word	0x40020028
 80088c4:	40020040 	.word	0x40020040
 80088c8:	40020058 	.word	0x40020058
 80088cc:	40020070 	.word	0x40020070
 80088d0:	40020088 	.word	0x40020088
 80088d4:	400200a0 	.word	0x400200a0
 80088d8:	400200b8 	.word	0x400200b8
 80088dc:	40020410 	.word	0x40020410
 80088e0:	40020428 	.word	0x40020428
 80088e4:	40020440 	.word	0x40020440
 80088e8:	40020458 	.word	0x40020458
 80088ec:	40020470 	.word	0x40020470
 80088f0:	40020488 	.word	0x40020488
 80088f4:	400204a0 	.word	0x400204a0
 80088f8:	400204b8 	.word	0x400204b8
 80088fc:	58025408 	.word	0x58025408
 8008900:	5802541c 	.word	0x5802541c
 8008904:	58025430 	.word	0x58025430
 8008908:	58025444 	.word	0x58025444
 800890c:	58025458 	.word	0x58025458
 8008910:	5802546c 	.word	0x5802546c
 8008914:	58025480 	.word	0x58025480
 8008918:	58025494 	.word	0x58025494
 800891c:	2300      	movs	r3, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008930:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a6d      	ldr	r2, [pc, #436]	; (8008aec <HAL_DMA_Abort+0x444>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d04a      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a6b      	ldr	r2, [pc, #428]	; (8008af0 <HAL_DMA_Abort+0x448>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d045      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a6a      	ldr	r2, [pc, #424]	; (8008af4 <HAL_DMA_Abort+0x44c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d040      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a68      	ldr	r2, [pc, #416]	; (8008af8 <HAL_DMA_Abort+0x450>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d03b      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a67      	ldr	r2, [pc, #412]	; (8008afc <HAL_DMA_Abort+0x454>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d036      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a65      	ldr	r2, [pc, #404]	; (8008b00 <HAL_DMA_Abort+0x458>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d031      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a64      	ldr	r2, [pc, #400]	; (8008b04 <HAL_DMA_Abort+0x45c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d02c      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a62      	ldr	r2, [pc, #392]	; (8008b08 <HAL_DMA_Abort+0x460>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d027      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a61      	ldr	r2, [pc, #388]	; (8008b0c <HAL_DMA_Abort+0x464>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d022      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a5f      	ldr	r2, [pc, #380]	; (8008b10 <HAL_DMA_Abort+0x468>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d01d      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a5e      	ldr	r2, [pc, #376]	; (8008b14 <HAL_DMA_Abort+0x46c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d018      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a5c      	ldr	r2, [pc, #368]	; (8008b18 <HAL_DMA_Abort+0x470>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d013      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a5b      	ldr	r2, [pc, #364]	; (8008b1c <HAL_DMA_Abort+0x474>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00e      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a59      	ldr	r2, [pc, #356]	; (8008b20 <HAL_DMA_Abort+0x478>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d009      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_DMA_Abort+0x47c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d004      	beq.n	80089d2 <HAL_DMA_Abort+0x32a>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_DMA_Abort+0x480>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d108      	bne.n	80089e4 <HAL_DMA_Abort+0x33c>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e007      	b.n	80089f4 <HAL_DMA_Abort+0x34c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80089f4:	e013      	b.n	8008a1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089f6:	f7ff f99b 	bl	8007d30 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	d90c      	bls.n	8008a1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e12d      	b.n	8008c7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e5      	bne.n	80089f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a2f      	ldr	r2, [pc, #188]	; (8008aec <HAL_DMA_Abort+0x444>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d04a      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a2d      	ldr	r2, [pc, #180]	; (8008af0 <HAL_DMA_Abort+0x448>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d045      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a2c      	ldr	r2, [pc, #176]	; (8008af4 <HAL_DMA_Abort+0x44c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d040      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <HAL_DMA_Abort+0x450>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d03b      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a29      	ldr	r2, [pc, #164]	; (8008afc <HAL_DMA_Abort+0x454>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d036      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a27      	ldr	r2, [pc, #156]	; (8008b00 <HAL_DMA_Abort+0x458>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d031      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <HAL_DMA_Abort+0x45c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d02c      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <HAL_DMA_Abort+0x460>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d027      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a23      	ldr	r2, [pc, #140]	; (8008b0c <HAL_DMA_Abort+0x464>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d022      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <HAL_DMA_Abort+0x468>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01d      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a20      	ldr	r2, [pc, #128]	; (8008b14 <HAL_DMA_Abort+0x46c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d018      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <HAL_DMA_Abort+0x470>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <HAL_DMA_Abort+0x474>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00e      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <HAL_DMA_Abort+0x478>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d009      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1a      	ldr	r2, [pc, #104]	; (8008b24 <HAL_DMA_Abort+0x47c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d004      	beq.n	8008aca <HAL_DMA_Abort+0x422>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a18      	ldr	r2, [pc, #96]	; (8008b28 <HAL_DMA_Abort+0x480>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d101      	bne.n	8008ace <HAL_DMA_Abort+0x426>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <HAL_DMA_Abort+0x428>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02b      	beq.n	8008b2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	223f      	movs	r2, #63	; 0x3f
 8008ae4:	409a      	lsls	r2, r3
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	e02a      	b.n	8008b42 <HAL_DMA_Abort+0x49a>
 8008aec:	40020010 	.word	0x40020010
 8008af0:	40020028 	.word	0x40020028
 8008af4:	40020040 	.word	0x40020040
 8008af8:	40020058 	.word	0x40020058
 8008afc:	40020070 	.word	0x40020070
 8008b00:	40020088 	.word	0x40020088
 8008b04:	400200a0 	.word	0x400200a0
 8008b08:	400200b8 	.word	0x400200b8
 8008b0c:	40020410 	.word	0x40020410
 8008b10:	40020428 	.word	0x40020428
 8008b14:	40020440 	.word	0x40020440
 8008b18:	40020458 	.word	0x40020458
 8008b1c:	40020470 	.word	0x40020470
 8008b20:	40020488 	.word	0x40020488
 8008b24:	400204a0 	.word	0x400204a0
 8008b28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b36:	f003 031f 	and.w	r3, r3, #31
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	409a      	lsls	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a4f      	ldr	r2, [pc, #316]	; (8008c84 <HAL_DMA_Abort+0x5dc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d072      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4d      	ldr	r2, [pc, #308]	; (8008c88 <HAL_DMA_Abort+0x5e0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d06d      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4c      	ldr	r2, [pc, #304]	; (8008c8c <HAL_DMA_Abort+0x5e4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d068      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a4a      	ldr	r2, [pc, #296]	; (8008c90 <HAL_DMA_Abort+0x5e8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d063      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a49      	ldr	r2, [pc, #292]	; (8008c94 <HAL_DMA_Abort+0x5ec>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d05e      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a47      	ldr	r2, [pc, #284]	; (8008c98 <HAL_DMA_Abort+0x5f0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d059      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a46      	ldr	r2, [pc, #280]	; (8008c9c <HAL_DMA_Abort+0x5f4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d054      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a44      	ldr	r2, [pc, #272]	; (8008ca0 <HAL_DMA_Abort+0x5f8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d04f      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a43      	ldr	r2, [pc, #268]	; (8008ca4 <HAL_DMA_Abort+0x5fc>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d04a      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a41      	ldr	r2, [pc, #260]	; (8008ca8 <HAL_DMA_Abort+0x600>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d045      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a40      	ldr	r2, [pc, #256]	; (8008cac <HAL_DMA_Abort+0x604>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d040      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a3e      	ldr	r2, [pc, #248]	; (8008cb0 <HAL_DMA_Abort+0x608>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d03b      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a3d      	ldr	r2, [pc, #244]	; (8008cb4 <HAL_DMA_Abort+0x60c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d036      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a3b      	ldr	r2, [pc, #236]	; (8008cb8 <HAL_DMA_Abort+0x610>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d031      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a3a      	ldr	r2, [pc, #232]	; (8008cbc <HAL_DMA_Abort+0x614>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d02c      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a38      	ldr	r2, [pc, #224]	; (8008cc0 <HAL_DMA_Abort+0x618>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d027      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a37      	ldr	r2, [pc, #220]	; (8008cc4 <HAL_DMA_Abort+0x61c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d022      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a35      	ldr	r2, [pc, #212]	; (8008cc8 <HAL_DMA_Abort+0x620>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d01d      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a34      	ldr	r2, [pc, #208]	; (8008ccc <HAL_DMA_Abort+0x624>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d018      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a32      	ldr	r2, [pc, #200]	; (8008cd0 <HAL_DMA_Abort+0x628>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a31      	ldr	r2, [pc, #196]	; (8008cd4 <HAL_DMA_Abort+0x62c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00e      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a2f      	ldr	r2, [pc, #188]	; (8008cd8 <HAL_DMA_Abort+0x630>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d009      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2e      	ldr	r2, [pc, #184]	; (8008cdc <HAL_DMA_Abort+0x634>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d004      	beq.n	8008c32 <HAL_DMA_Abort+0x58a>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2c      	ldr	r2, [pc, #176]	; (8008ce0 <HAL_DMA_Abort+0x638>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d101      	bne.n	8008c36 <HAL_DMA_Abort+0x58e>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <HAL_DMA_Abort+0x590>
 8008c36:	2300      	movs	r3, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d015      	beq.n	8008c68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40020010 	.word	0x40020010
 8008c88:	40020028 	.word	0x40020028
 8008c8c:	40020040 	.word	0x40020040
 8008c90:	40020058 	.word	0x40020058
 8008c94:	40020070 	.word	0x40020070
 8008c98:	40020088 	.word	0x40020088
 8008c9c:	400200a0 	.word	0x400200a0
 8008ca0:	400200b8 	.word	0x400200b8
 8008ca4:	40020410 	.word	0x40020410
 8008ca8:	40020428 	.word	0x40020428
 8008cac:	40020440 	.word	0x40020440
 8008cb0:	40020458 	.word	0x40020458
 8008cb4:	40020470 	.word	0x40020470
 8008cb8:	40020488 	.word	0x40020488
 8008cbc:	400204a0 	.word	0x400204a0
 8008cc0:	400204b8 	.word	0x400204b8
 8008cc4:	58025408 	.word	0x58025408
 8008cc8:	5802541c 	.word	0x5802541c
 8008ccc:	58025430 	.word	0x58025430
 8008cd0:	58025444 	.word	0x58025444
 8008cd4:	58025458 	.word	0x58025458
 8008cd8:	5802546c 	.word	0x5802546c
 8008cdc:	58025480 	.word	0x58025480
 8008ce0:	58025494 	.word	0x58025494

08008ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e237      	b.n	8009166 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d004      	beq.n	8008d0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2280      	movs	r2, #128	; 0x80
 8008d06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e22c      	b.n	8009166 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a5c      	ldr	r2, [pc, #368]	; (8008e84 <HAL_DMA_Abort_IT+0x1a0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d04a      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a5b      	ldr	r2, [pc, #364]	; (8008e88 <HAL_DMA_Abort_IT+0x1a4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d045      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a59      	ldr	r2, [pc, #356]	; (8008e8c <HAL_DMA_Abort_IT+0x1a8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d040      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a58      	ldr	r2, [pc, #352]	; (8008e90 <HAL_DMA_Abort_IT+0x1ac>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d03b      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a56      	ldr	r2, [pc, #344]	; (8008e94 <HAL_DMA_Abort_IT+0x1b0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d036      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a55      	ldr	r2, [pc, #340]	; (8008e98 <HAL_DMA_Abort_IT+0x1b4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d031      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a53      	ldr	r2, [pc, #332]	; (8008e9c <HAL_DMA_Abort_IT+0x1b8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d02c      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a52      	ldr	r2, [pc, #328]	; (8008ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d027      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a50      	ldr	r2, [pc, #320]	; (8008ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d022      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a4f      	ldr	r2, [pc, #316]	; (8008ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d01d      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a4d      	ldr	r2, [pc, #308]	; (8008eac <HAL_DMA_Abort_IT+0x1c8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a4c      	ldr	r2, [pc, #304]	; (8008eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a4a      	ldr	r2, [pc, #296]	; (8008eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a49      	ldr	r2, [pc, #292]	; (8008eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a47      	ldr	r2, [pc, #284]	; (8008ebc <HAL_DMA_Abort_IT+0x1d8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_DMA_Abort_IT+0xc8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a46      	ldr	r2, [pc, #280]	; (8008ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d101      	bne.n	8008db0 <HAL_DMA_Abort_IT+0xcc>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <HAL_DMA_Abort_IT+0xce>
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 8086 	beq.w	8008ec4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a2f      	ldr	r2, [pc, #188]	; (8008e84 <HAL_DMA_Abort_IT+0x1a0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d04a      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a2e      	ldr	r2, [pc, #184]	; (8008e88 <HAL_DMA_Abort_IT+0x1a4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d045      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a2c      	ldr	r2, [pc, #176]	; (8008e8c <HAL_DMA_Abort_IT+0x1a8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d040      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a2b      	ldr	r2, [pc, #172]	; (8008e90 <HAL_DMA_Abort_IT+0x1ac>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d03b      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a29      	ldr	r2, [pc, #164]	; (8008e94 <HAL_DMA_Abort_IT+0x1b0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d036      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a28      	ldr	r2, [pc, #160]	; (8008e98 <HAL_DMA_Abort_IT+0x1b4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d031      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <HAL_DMA_Abort_IT+0x1b8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d02c      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a25      	ldr	r2, [pc, #148]	; (8008ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d027      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a23      	ldr	r2, [pc, #140]	; (8008ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d022      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a22      	ldr	r2, [pc, #136]	; (8008ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d01d      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a20      	ldr	r2, [pc, #128]	; (8008eac <HAL_DMA_Abort_IT+0x1c8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d018      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a1f      	ldr	r2, [pc, #124]	; (8008eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00e      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1c      	ldr	r2, [pc, #112]	; (8008eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1a      	ldr	r2, [pc, #104]	; (8008ebc <HAL_DMA_Abort_IT+0x1d8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x17c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d108      	bne.n	8008e72 <HAL_DMA_Abort_IT+0x18e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0201 	bic.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e178      	b.n	8009164 <HAL_DMA_Abort_IT+0x480>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0201 	bic.w	r2, r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e16f      	b.n	8009164 <HAL_DMA_Abort_IT+0x480>
 8008e84:	40020010 	.word	0x40020010
 8008e88:	40020028 	.word	0x40020028
 8008e8c:	40020040 	.word	0x40020040
 8008e90:	40020058 	.word	0x40020058
 8008e94:	40020070 	.word	0x40020070
 8008e98:	40020088 	.word	0x40020088
 8008e9c:	400200a0 	.word	0x400200a0
 8008ea0:	400200b8 	.word	0x400200b8
 8008ea4:	40020410 	.word	0x40020410
 8008ea8:	40020428 	.word	0x40020428
 8008eac:	40020440 	.word	0x40020440
 8008eb0:	40020458 	.word	0x40020458
 8008eb4:	40020470 	.word	0x40020470
 8008eb8:	40020488 	.word	0x40020488
 8008ebc:	400204a0 	.word	0x400204a0
 8008ec0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 020e 	bic.w	r2, r2, #14
 8008ed2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a6c      	ldr	r2, [pc, #432]	; (800908c <HAL_DMA_Abort_IT+0x3a8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d04a      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a6b      	ldr	r2, [pc, #428]	; (8009090 <HAL_DMA_Abort_IT+0x3ac>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d045      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a69      	ldr	r2, [pc, #420]	; (8009094 <HAL_DMA_Abort_IT+0x3b0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d040      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a68      	ldr	r2, [pc, #416]	; (8009098 <HAL_DMA_Abort_IT+0x3b4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d03b      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a66      	ldr	r2, [pc, #408]	; (800909c <HAL_DMA_Abort_IT+0x3b8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d036      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a65      	ldr	r2, [pc, #404]	; (80090a0 <HAL_DMA_Abort_IT+0x3bc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d031      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a63      	ldr	r2, [pc, #396]	; (80090a4 <HAL_DMA_Abort_IT+0x3c0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d02c      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a62      	ldr	r2, [pc, #392]	; (80090a8 <HAL_DMA_Abort_IT+0x3c4>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d027      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a60      	ldr	r2, [pc, #384]	; (80090ac <HAL_DMA_Abort_IT+0x3c8>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d022      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a5f      	ldr	r2, [pc, #380]	; (80090b0 <HAL_DMA_Abort_IT+0x3cc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01d      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a5d      	ldr	r2, [pc, #372]	; (80090b4 <HAL_DMA_Abort_IT+0x3d0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d018      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a5c      	ldr	r2, [pc, #368]	; (80090b8 <HAL_DMA_Abort_IT+0x3d4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d013      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a5a      	ldr	r2, [pc, #360]	; (80090bc <HAL_DMA_Abort_IT+0x3d8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00e      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a59      	ldr	r2, [pc, #356]	; (80090c0 <HAL_DMA_Abort_IT+0x3dc>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d009      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a57      	ldr	r2, [pc, #348]	; (80090c4 <HAL_DMA_Abort_IT+0x3e0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d004      	beq.n	8008f74 <HAL_DMA_Abort_IT+0x290>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a56      	ldr	r2, [pc, #344]	; (80090c8 <HAL_DMA_Abort_IT+0x3e4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d108      	bne.n	8008f86 <HAL_DMA_Abort_IT+0x2a2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0201 	bic.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e007      	b.n	8008f96 <HAL_DMA_Abort_IT+0x2b2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0201 	bic.w	r2, r2, #1
 8008f94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a3c      	ldr	r2, [pc, #240]	; (800908c <HAL_DMA_Abort_IT+0x3a8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d072      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a3a      	ldr	r2, [pc, #232]	; (8009090 <HAL_DMA_Abort_IT+0x3ac>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d06d      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a39      	ldr	r2, [pc, #228]	; (8009094 <HAL_DMA_Abort_IT+0x3b0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d068      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a37      	ldr	r2, [pc, #220]	; (8009098 <HAL_DMA_Abort_IT+0x3b4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d063      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a36      	ldr	r2, [pc, #216]	; (800909c <HAL_DMA_Abort_IT+0x3b8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d05e      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a34      	ldr	r2, [pc, #208]	; (80090a0 <HAL_DMA_Abort_IT+0x3bc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d059      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a33      	ldr	r2, [pc, #204]	; (80090a4 <HAL_DMA_Abort_IT+0x3c0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d054      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a31      	ldr	r2, [pc, #196]	; (80090a8 <HAL_DMA_Abort_IT+0x3c4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d04f      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a30      	ldr	r2, [pc, #192]	; (80090ac <HAL_DMA_Abort_IT+0x3c8>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d04a      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a2e      	ldr	r2, [pc, #184]	; (80090b0 <HAL_DMA_Abort_IT+0x3cc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d045      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a2d      	ldr	r2, [pc, #180]	; (80090b4 <HAL_DMA_Abort_IT+0x3d0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d040      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <HAL_DMA_Abort_IT+0x3d4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d03b      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a2a      	ldr	r2, [pc, #168]	; (80090bc <HAL_DMA_Abort_IT+0x3d8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d036      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a28      	ldr	r2, [pc, #160]	; (80090c0 <HAL_DMA_Abort_IT+0x3dc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d031      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a27      	ldr	r2, [pc, #156]	; (80090c4 <HAL_DMA_Abort_IT+0x3e0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d02c      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a25      	ldr	r2, [pc, #148]	; (80090c8 <HAL_DMA_Abort_IT+0x3e4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d027      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a24      	ldr	r2, [pc, #144]	; (80090cc <HAL_DMA_Abort_IT+0x3e8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d022      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a22      	ldr	r2, [pc, #136]	; (80090d0 <HAL_DMA_Abort_IT+0x3ec>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d01d      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a21      	ldr	r2, [pc, #132]	; (80090d4 <HAL_DMA_Abort_IT+0x3f0>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d018      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1f      	ldr	r2, [pc, #124]	; (80090d8 <HAL_DMA_Abort_IT+0x3f4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d013      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <HAL_DMA_Abort_IT+0x3f8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00e      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <HAL_DMA_Abort_IT+0x3fc>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d009      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <HAL_DMA_Abort_IT+0x400>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <HAL_DMA_Abort_IT+0x3a2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <HAL_DMA_Abort_IT+0x404>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d132      	bne.n	80090ec <HAL_DMA_Abort_IT+0x408>
 8009086:	2301      	movs	r3, #1
 8009088:	e031      	b.n	80090ee <HAL_DMA_Abort_IT+0x40a>
 800908a:	bf00      	nop
 800908c:	40020010 	.word	0x40020010
 8009090:	40020028 	.word	0x40020028
 8009094:	40020040 	.word	0x40020040
 8009098:	40020058 	.word	0x40020058
 800909c:	40020070 	.word	0x40020070
 80090a0:	40020088 	.word	0x40020088
 80090a4:	400200a0 	.word	0x400200a0
 80090a8:	400200b8 	.word	0x400200b8
 80090ac:	40020410 	.word	0x40020410
 80090b0:	40020428 	.word	0x40020428
 80090b4:	40020440 	.word	0x40020440
 80090b8:	40020458 	.word	0x40020458
 80090bc:	40020470 	.word	0x40020470
 80090c0:	40020488 	.word	0x40020488
 80090c4:	400204a0 	.word	0x400204a0
 80090c8:	400204b8 	.word	0x400204b8
 80090cc:	58025408 	.word	0x58025408
 80090d0:	5802541c 	.word	0x5802541c
 80090d4:	58025430 	.word	0x58025430
 80090d8:	58025444 	.word	0x58025444
 80090dc:	58025458 	.word	0x58025458
 80090e0:	5802546c 	.word	0x5802546c
 80090e4:	58025480 	.word	0x58025480
 80090e8:	58025494 	.word	0x58025494
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d028      	beq.n	8009144 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009100:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910c:	f003 031f 	and.w	r3, r3, #31
 8009110:	2201      	movs	r2, #1
 8009112:	409a      	lsls	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009120:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00c      	beq.n	8009144 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009138:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009142:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800917c:	4b67      	ldr	r3, [pc, #412]	; (800931c <HAL_DMA_IRQHandler+0x1ac>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a67      	ldr	r2, [pc, #412]	; (8009320 <HAL_DMA_IRQHandler+0x1b0>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	0a9b      	lsrs	r3, r3, #10
 8009188:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a5f      	ldr	r2, [pc, #380]	; (8009324 <HAL_DMA_IRQHandler+0x1b4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d04a      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a5d      	ldr	r2, [pc, #372]	; (8009328 <HAL_DMA_IRQHandler+0x1b8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d045      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a5c      	ldr	r2, [pc, #368]	; (800932c <HAL_DMA_IRQHandler+0x1bc>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d040      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a5a      	ldr	r2, [pc, #360]	; (8009330 <HAL_DMA_IRQHandler+0x1c0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d03b      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a59      	ldr	r2, [pc, #356]	; (8009334 <HAL_DMA_IRQHandler+0x1c4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d036      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a57      	ldr	r2, [pc, #348]	; (8009338 <HAL_DMA_IRQHandler+0x1c8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d031      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a56      	ldr	r2, [pc, #344]	; (800933c <HAL_DMA_IRQHandler+0x1cc>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d02c      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a54      	ldr	r2, [pc, #336]	; (8009340 <HAL_DMA_IRQHandler+0x1d0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d027      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a53      	ldr	r2, [pc, #332]	; (8009344 <HAL_DMA_IRQHandler+0x1d4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d022      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a51      	ldr	r2, [pc, #324]	; (8009348 <HAL_DMA_IRQHandler+0x1d8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d01d      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a50      	ldr	r2, [pc, #320]	; (800934c <HAL_DMA_IRQHandler+0x1dc>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d018      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a4e      	ldr	r2, [pc, #312]	; (8009350 <HAL_DMA_IRQHandler+0x1e0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d013      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a4d      	ldr	r2, [pc, #308]	; (8009354 <HAL_DMA_IRQHandler+0x1e4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00e      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a4b      	ldr	r2, [pc, #300]	; (8009358 <HAL_DMA_IRQHandler+0x1e8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d009      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a4a      	ldr	r2, [pc, #296]	; (800935c <HAL_DMA_IRQHandler+0x1ec>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d004      	beq.n	8009242 <HAL_DMA_IRQHandler+0xd2>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a48      	ldr	r2, [pc, #288]	; (8009360 <HAL_DMA_IRQHandler+0x1f0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d101      	bne.n	8009246 <HAL_DMA_IRQHandler+0xd6>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <HAL_DMA_IRQHandler+0xd8>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 842b 	beq.w	8009aa4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009252:	f003 031f 	and.w	r3, r3, #31
 8009256:	2208      	movs	r2, #8
 8009258:	409a      	lsls	r2, r3
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 80a2 	beq.w	80093a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a2e      	ldr	r2, [pc, #184]	; (8009324 <HAL_DMA_IRQHandler+0x1b4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d04a      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a2d      	ldr	r2, [pc, #180]	; (8009328 <HAL_DMA_IRQHandler+0x1b8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d045      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a2b      	ldr	r2, [pc, #172]	; (800932c <HAL_DMA_IRQHandler+0x1bc>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d040      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a2a      	ldr	r2, [pc, #168]	; (8009330 <HAL_DMA_IRQHandler+0x1c0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d03b      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a28      	ldr	r2, [pc, #160]	; (8009334 <HAL_DMA_IRQHandler+0x1c4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d036      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a27      	ldr	r2, [pc, #156]	; (8009338 <HAL_DMA_IRQHandler+0x1c8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d031      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a25      	ldr	r2, [pc, #148]	; (800933c <HAL_DMA_IRQHandler+0x1cc>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d02c      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a24      	ldr	r2, [pc, #144]	; (8009340 <HAL_DMA_IRQHandler+0x1d0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d027      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a22      	ldr	r2, [pc, #136]	; (8009344 <HAL_DMA_IRQHandler+0x1d4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d022      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a21      	ldr	r2, [pc, #132]	; (8009348 <HAL_DMA_IRQHandler+0x1d8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d01d      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1f      	ldr	r2, [pc, #124]	; (800934c <HAL_DMA_IRQHandler+0x1dc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d018      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1e      	ldr	r2, [pc, #120]	; (8009350 <HAL_DMA_IRQHandler+0x1e0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d013      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_DMA_IRQHandler+0x1e4>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00e      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a1b      	ldr	r2, [pc, #108]	; (8009358 <HAL_DMA_IRQHandler+0x1e8>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d009      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a19      	ldr	r2, [pc, #100]	; (800935c <HAL_DMA_IRQHandler+0x1ec>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d004      	beq.n	8009304 <HAL_DMA_IRQHandler+0x194>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a18      	ldr	r2, [pc, #96]	; (8009360 <HAL_DMA_IRQHandler+0x1f0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d12f      	bne.n	8009364 <HAL_DMA_IRQHandler+0x1f4>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf14      	ite	ne
 8009312:	2301      	movne	r3, #1
 8009314:	2300      	moveq	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	e02e      	b.n	8009378 <HAL_DMA_IRQHandler+0x208>
 800931a:	bf00      	nop
 800931c:	24000004 	.word	0x24000004
 8009320:	1b4e81b5 	.word	0x1b4e81b5
 8009324:	40020010 	.word	0x40020010
 8009328:	40020028 	.word	0x40020028
 800932c:	40020040 	.word	0x40020040
 8009330:	40020058 	.word	0x40020058
 8009334:	40020070 	.word	0x40020070
 8009338:	40020088 	.word	0x40020088
 800933c:	400200a0 	.word	0x400200a0
 8009340:	400200b8 	.word	0x400200b8
 8009344:	40020410 	.word	0x40020410
 8009348:	40020428 	.word	0x40020428
 800934c:	40020440 	.word	0x40020440
 8009350:	40020458 	.word	0x40020458
 8009354:	40020470 	.word	0x40020470
 8009358:	40020488 	.word	0x40020488
 800935c:	400204a0 	.word	0x400204a0
 8009360:	400204b8 	.word	0x400204b8
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b00      	cmp	r3, #0
 8009370:	bf14      	ite	ne
 8009372:	2301      	movne	r3, #1
 8009374:	2300      	moveq	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d015      	beq.n	80093a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0204 	bic.w	r2, r2, #4
 800938a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009390:	f003 031f 	and.w	r3, r3, #31
 8009394:	2208      	movs	r2, #8
 8009396:	409a      	lsls	r2, r3
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ac:	f003 031f 	and.w	r3, r3, #31
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d06e      	beq.n	800949c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a69      	ldr	r2, [pc, #420]	; (8009568 <HAL_DMA_IRQHandler+0x3f8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d04a      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a67      	ldr	r2, [pc, #412]	; (800956c <HAL_DMA_IRQHandler+0x3fc>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d045      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a66      	ldr	r2, [pc, #408]	; (8009570 <HAL_DMA_IRQHandler+0x400>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d040      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a64      	ldr	r2, [pc, #400]	; (8009574 <HAL_DMA_IRQHandler+0x404>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d03b      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a63      	ldr	r2, [pc, #396]	; (8009578 <HAL_DMA_IRQHandler+0x408>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d036      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a61      	ldr	r2, [pc, #388]	; (800957c <HAL_DMA_IRQHandler+0x40c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d031      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a60      	ldr	r2, [pc, #384]	; (8009580 <HAL_DMA_IRQHandler+0x410>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d02c      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a5e      	ldr	r2, [pc, #376]	; (8009584 <HAL_DMA_IRQHandler+0x414>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d027      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a5d      	ldr	r2, [pc, #372]	; (8009588 <HAL_DMA_IRQHandler+0x418>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d022      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a5b      	ldr	r2, [pc, #364]	; (800958c <HAL_DMA_IRQHandler+0x41c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d01d      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a5a      	ldr	r2, [pc, #360]	; (8009590 <HAL_DMA_IRQHandler+0x420>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d018      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a58      	ldr	r2, [pc, #352]	; (8009594 <HAL_DMA_IRQHandler+0x424>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a57      	ldr	r2, [pc, #348]	; (8009598 <HAL_DMA_IRQHandler+0x428>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00e      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a55      	ldr	r2, [pc, #340]	; (800959c <HAL_DMA_IRQHandler+0x42c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a54      	ldr	r2, [pc, #336]	; (80095a0 <HAL_DMA_IRQHandler+0x430>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_DMA_IRQHandler+0x2ee>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a52      	ldr	r2, [pc, #328]	; (80095a4 <HAL_DMA_IRQHandler+0x434>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d10a      	bne.n	8009474 <HAL_DMA_IRQHandler+0x304>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009468:	2b00      	cmp	r3, #0
 800946a:	bf14      	ite	ne
 800946c:	2301      	movne	r3, #1
 800946e:	2300      	moveq	r3, #0
 8009470:	b2db      	uxtb	r3, r3
 8009472:	e003      	b.n	800947c <HAL_DMA_IRQHandler+0x30c>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00d      	beq.n	800949c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	2201      	movs	r2, #1
 800948a:	409a      	lsls	r2, r3
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009494:	f043 0202 	orr.w	r2, r3, #2
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2204      	movs	r2, #4
 80094a6:	409a      	lsls	r2, r3
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	4013      	ands	r3, r2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 808f 	beq.w	80095d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <HAL_DMA_IRQHandler+0x3f8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d04a      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a2a      	ldr	r2, [pc, #168]	; (800956c <HAL_DMA_IRQHandler+0x3fc>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d045      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a29      	ldr	r2, [pc, #164]	; (8009570 <HAL_DMA_IRQHandler+0x400>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d040      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a27      	ldr	r2, [pc, #156]	; (8009574 <HAL_DMA_IRQHandler+0x404>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d03b      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a26      	ldr	r2, [pc, #152]	; (8009578 <HAL_DMA_IRQHandler+0x408>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d036      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a24      	ldr	r2, [pc, #144]	; (800957c <HAL_DMA_IRQHandler+0x40c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d031      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a23      	ldr	r2, [pc, #140]	; (8009580 <HAL_DMA_IRQHandler+0x410>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d02c      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a21      	ldr	r2, [pc, #132]	; (8009584 <HAL_DMA_IRQHandler+0x414>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d027      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a20      	ldr	r2, [pc, #128]	; (8009588 <HAL_DMA_IRQHandler+0x418>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d022      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a1e      	ldr	r2, [pc, #120]	; (800958c <HAL_DMA_IRQHandler+0x41c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d01d      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a1d      	ldr	r2, [pc, #116]	; (8009590 <HAL_DMA_IRQHandler+0x420>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d018      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a1b      	ldr	r2, [pc, #108]	; (8009594 <HAL_DMA_IRQHandler+0x424>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a1a      	ldr	r2, [pc, #104]	; (8009598 <HAL_DMA_IRQHandler+0x428>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00e      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a18      	ldr	r2, [pc, #96]	; (800959c <HAL_DMA_IRQHandler+0x42c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d009      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <HAL_DMA_IRQHandler+0x430>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d004      	beq.n	8009552 <HAL_DMA_IRQHandler+0x3e2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <HAL_DMA_IRQHandler+0x434>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d12a      	bne.n	80095a8 <HAL_DMA_IRQHandler+0x438>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	bf14      	ite	ne
 8009560:	2301      	movne	r3, #1
 8009562:	2300      	moveq	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	e023      	b.n	80095b0 <HAL_DMA_IRQHandler+0x440>
 8009568:	40020010 	.word	0x40020010
 800956c:	40020028 	.word	0x40020028
 8009570:	40020040 	.word	0x40020040
 8009574:	40020058 	.word	0x40020058
 8009578:	40020070 	.word	0x40020070
 800957c:	40020088 	.word	0x40020088
 8009580:	400200a0 	.word	0x400200a0
 8009584:	400200b8 	.word	0x400200b8
 8009588:	40020410 	.word	0x40020410
 800958c:	40020428 	.word	0x40020428
 8009590:	40020440 	.word	0x40020440
 8009594:	40020458 	.word	0x40020458
 8009598:	40020470 	.word	0x40020470
 800959c:	40020488 	.word	0x40020488
 80095a0:	400204a0 	.word	0x400204a0
 80095a4:	400204b8 	.word	0x400204b8
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00d      	beq.n	80095d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b8:	f003 031f 	and.w	r3, r3, #31
 80095bc:	2204      	movs	r2, #4
 80095be:	409a      	lsls	r2, r3
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c8:	f043 0204 	orr.w	r2, r3, #4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d4:	f003 031f 	and.w	r3, r3, #31
 80095d8:	2210      	movs	r2, #16
 80095da:	409a      	lsls	r2, r3
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	4013      	ands	r3, r2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80a6 	beq.w	8009732 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a85      	ldr	r2, [pc, #532]	; (8009800 <HAL_DMA_IRQHandler+0x690>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d04a      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a83      	ldr	r2, [pc, #524]	; (8009804 <HAL_DMA_IRQHandler+0x694>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d045      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a82      	ldr	r2, [pc, #520]	; (8009808 <HAL_DMA_IRQHandler+0x698>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d040      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a80      	ldr	r2, [pc, #512]	; (800980c <HAL_DMA_IRQHandler+0x69c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d03b      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a7f      	ldr	r2, [pc, #508]	; (8009810 <HAL_DMA_IRQHandler+0x6a0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d036      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a7d      	ldr	r2, [pc, #500]	; (8009814 <HAL_DMA_IRQHandler+0x6a4>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d031      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a7c      	ldr	r2, [pc, #496]	; (8009818 <HAL_DMA_IRQHandler+0x6a8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d02c      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a7a      	ldr	r2, [pc, #488]	; (800981c <HAL_DMA_IRQHandler+0x6ac>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d027      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a79      	ldr	r2, [pc, #484]	; (8009820 <HAL_DMA_IRQHandler+0x6b0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d022      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a77      	ldr	r2, [pc, #476]	; (8009824 <HAL_DMA_IRQHandler+0x6b4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d01d      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a76      	ldr	r2, [pc, #472]	; (8009828 <HAL_DMA_IRQHandler+0x6b8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d018      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a74      	ldr	r2, [pc, #464]	; (800982c <HAL_DMA_IRQHandler+0x6bc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d013      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a73      	ldr	r2, [pc, #460]	; (8009830 <HAL_DMA_IRQHandler+0x6c0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00e      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a71      	ldr	r2, [pc, #452]	; (8009834 <HAL_DMA_IRQHandler+0x6c4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d009      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a70      	ldr	r2, [pc, #448]	; (8009838 <HAL_DMA_IRQHandler+0x6c8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d004      	beq.n	8009686 <HAL_DMA_IRQHandler+0x516>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a6e      	ldr	r2, [pc, #440]	; (800983c <HAL_DMA_IRQHandler+0x6cc>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d10a      	bne.n	800969c <HAL_DMA_IRQHandler+0x52c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0308 	and.w	r3, r3, #8
 8009690:	2b00      	cmp	r3, #0
 8009692:	bf14      	ite	ne
 8009694:	2301      	movne	r3, #1
 8009696:	2300      	moveq	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	e009      	b.n	80096b0 <HAL_DMA_IRQHandler+0x540>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bf14      	ite	ne
 80096aa:	2301      	movne	r3, #1
 80096ac:	2300      	moveq	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d03e      	beq.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b8:	f003 031f 	and.w	r3, r3, #31
 80096bc:	2210      	movs	r2, #16
 80096be:	409a      	lsls	r2, r3
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d018      	beq.n	8009704 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d108      	bne.n	80096f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d024      	beq.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
 80096f0:	e01f      	b.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01b      	beq.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
 8009702:	e016      	b.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d107      	bne.n	8009722 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0208 	bic.w	r2, r2, #8
 8009720:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009736:	f003 031f 	and.w	r3, r3, #31
 800973a:	2220      	movs	r2, #32
 800973c:	409a      	lsls	r2, r3
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	4013      	ands	r3, r2
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8110 	beq.w	8009968 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a2c      	ldr	r2, [pc, #176]	; (8009800 <HAL_DMA_IRQHandler+0x690>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d04a      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a2b      	ldr	r2, [pc, #172]	; (8009804 <HAL_DMA_IRQHandler+0x694>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d045      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a29      	ldr	r2, [pc, #164]	; (8009808 <HAL_DMA_IRQHandler+0x698>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d040      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a28      	ldr	r2, [pc, #160]	; (800980c <HAL_DMA_IRQHandler+0x69c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d03b      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a26      	ldr	r2, [pc, #152]	; (8009810 <HAL_DMA_IRQHandler+0x6a0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d036      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a25      	ldr	r2, [pc, #148]	; (8009814 <HAL_DMA_IRQHandler+0x6a4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d031      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a23      	ldr	r2, [pc, #140]	; (8009818 <HAL_DMA_IRQHandler+0x6a8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d02c      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a22      	ldr	r2, [pc, #136]	; (800981c <HAL_DMA_IRQHandler+0x6ac>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d027      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a20      	ldr	r2, [pc, #128]	; (8009820 <HAL_DMA_IRQHandler+0x6b0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d022      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <HAL_DMA_IRQHandler+0x6b4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d01d      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <HAL_DMA_IRQHandler+0x6b8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d018      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <HAL_DMA_IRQHandler+0x6bc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d013      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1a      	ldr	r2, [pc, #104]	; (8009830 <HAL_DMA_IRQHandler+0x6c0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00e      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a19      	ldr	r2, [pc, #100]	; (8009834 <HAL_DMA_IRQHandler+0x6c4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d009      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a17      	ldr	r2, [pc, #92]	; (8009838 <HAL_DMA_IRQHandler+0x6c8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x678>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a16      	ldr	r2, [pc, #88]	; (800983c <HAL_DMA_IRQHandler+0x6cc>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d12b      	bne.n	8009840 <HAL_DMA_IRQHandler+0x6d0>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0310 	and.w	r3, r3, #16
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf14      	ite	ne
 80097f6:	2301      	movne	r3, #1
 80097f8:	2300      	moveq	r3, #0
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	e02a      	b.n	8009854 <HAL_DMA_IRQHandler+0x6e4>
 80097fe:	bf00      	nop
 8009800:	40020010 	.word	0x40020010
 8009804:	40020028 	.word	0x40020028
 8009808:	40020040 	.word	0x40020040
 800980c:	40020058 	.word	0x40020058
 8009810:	40020070 	.word	0x40020070
 8009814:	40020088 	.word	0x40020088
 8009818:	400200a0 	.word	0x400200a0
 800981c:	400200b8 	.word	0x400200b8
 8009820:	40020410 	.word	0x40020410
 8009824:	40020428 	.word	0x40020428
 8009828:	40020440 	.word	0x40020440
 800982c:	40020458 	.word	0x40020458
 8009830:	40020470 	.word	0x40020470
 8009834:	40020488 	.word	0x40020488
 8009838:	400204a0 	.word	0x400204a0
 800983c:	400204b8 	.word	0x400204b8
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	bf14      	ite	ne
 800984e:	2301      	movne	r3, #1
 8009850:	2300      	moveq	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8087 	beq.w	8009968 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985e:	f003 031f 	and.w	r3, r3, #31
 8009862:	2220      	movs	r2, #32
 8009864:	409a      	lsls	r2, r3
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b04      	cmp	r3, #4
 8009874:	d139      	bne.n	80098ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0216 	bic.w	r2, r2, #22
 8009884:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695a      	ldr	r2, [r3, #20]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009894:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <HAL_DMA_IRQHandler+0x736>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0208 	bic.w	r2, r2, #8
 80098b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	223f      	movs	r2, #63	; 0x3f
 80098c0:	409a      	lsls	r2, r3
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 834a 	beq.w	8009f74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
          }
          return;
 80098e8:	e344      	b.n	8009f74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d018      	beq.n	800992a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d108      	bne.n	8009918 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	2b00      	cmp	r3, #0
 800990c:	d02c      	beq.n	8009968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	4798      	blx	r3
 8009916:	e027      	b.n	8009968 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d023      	beq.n	8009968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
 8009928:	e01e      	b.n	8009968 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10f      	bne.n	8009958 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0210 	bic.w	r2, r2, #16
 8009946:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 8306 	beq.w	8009f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8088 	beq.w	8009a90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2204      	movs	r2, #4
 8009984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a7a      	ldr	r2, [pc, #488]	; (8009b78 <HAL_DMA_IRQHandler+0xa08>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d04a      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a79      	ldr	r2, [pc, #484]	; (8009b7c <HAL_DMA_IRQHandler+0xa0c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d045      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a77      	ldr	r2, [pc, #476]	; (8009b80 <HAL_DMA_IRQHandler+0xa10>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d040      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a76      	ldr	r2, [pc, #472]	; (8009b84 <HAL_DMA_IRQHandler+0xa14>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d03b      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a74      	ldr	r2, [pc, #464]	; (8009b88 <HAL_DMA_IRQHandler+0xa18>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d036      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a73      	ldr	r2, [pc, #460]	; (8009b8c <HAL_DMA_IRQHandler+0xa1c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d031      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a71      	ldr	r2, [pc, #452]	; (8009b90 <HAL_DMA_IRQHandler+0xa20>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d02c      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a70      	ldr	r2, [pc, #448]	; (8009b94 <HAL_DMA_IRQHandler+0xa24>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d027      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a6e      	ldr	r2, [pc, #440]	; (8009b98 <HAL_DMA_IRQHandler+0xa28>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d022      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a6d      	ldr	r2, [pc, #436]	; (8009b9c <HAL_DMA_IRQHandler+0xa2c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d01d      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a6b      	ldr	r2, [pc, #428]	; (8009ba0 <HAL_DMA_IRQHandler+0xa30>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d018      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a6a      	ldr	r2, [pc, #424]	; (8009ba4 <HAL_DMA_IRQHandler+0xa34>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a68      	ldr	r2, [pc, #416]	; (8009ba8 <HAL_DMA_IRQHandler+0xa38>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00e      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a67      	ldr	r2, [pc, #412]	; (8009bac <HAL_DMA_IRQHandler+0xa3c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a65      	ldr	r2, [pc, #404]	; (8009bb0 <HAL_DMA_IRQHandler+0xa40>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x8b8>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a64      	ldr	r2, [pc, #400]	; (8009bb4 <HAL_DMA_IRQHandler+0xa44>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d108      	bne.n	8009a3a <HAL_DMA_IRQHandler+0x8ca>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e007      	b.n	8009a4a <HAL_DMA_IRQHandler+0x8da>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0201 	bic.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d307      	bcc.n	8009a66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1f2      	bne.n	8009a4a <HAL_DMA_IRQHandler+0x8da>
 8009a64:	e000      	b.n	8009a68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009a66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d004      	beq.n	8009a80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2203      	movs	r2, #3
 8009a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009a7e:	e003      	b.n	8009a88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 8272 	beq.w	8009f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	e26c      	b.n	8009f7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a43      	ldr	r2, [pc, #268]	; (8009bb8 <HAL_DMA_IRQHandler+0xa48>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d022      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a42      	ldr	r2, [pc, #264]	; (8009bbc <HAL_DMA_IRQHandler+0xa4c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d01d      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a40      	ldr	r2, [pc, #256]	; (8009bc0 <HAL_DMA_IRQHandler+0xa50>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d018      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a3f      	ldr	r2, [pc, #252]	; (8009bc4 <HAL_DMA_IRQHandler+0xa54>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d013      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a3d      	ldr	r2, [pc, #244]	; (8009bc8 <HAL_DMA_IRQHandler+0xa58>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00e      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a3c      	ldr	r2, [pc, #240]	; (8009bcc <HAL_DMA_IRQHandler+0xa5c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d009      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a3a      	ldr	r2, [pc, #232]	; (8009bd0 <HAL_DMA_IRQHandler+0xa60>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <HAL_DMA_IRQHandler+0x984>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a39      	ldr	r2, [pc, #228]	; (8009bd4 <HAL_DMA_IRQHandler+0xa64>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d101      	bne.n	8009af8 <HAL_DMA_IRQHandler+0x988>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e000      	b.n	8009afa <HAL_DMA_IRQHandler+0x98a>
 8009af8:	2300      	movs	r3, #0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 823f 	beq.w	8009f7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	2204      	movs	r2, #4
 8009b12:	409a      	lsls	r2, r3
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80cd 	beq.w	8009cb8 <HAL_DMA_IRQHandler+0xb48>
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 80c7 	beq.w	8009cb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	2204      	movs	r2, #4
 8009b34:	409a      	lsls	r2, r3
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d049      	beq.n	8009bd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8210 	beq.w	8009f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b60:	e20a      	b.n	8009f78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8206 	beq.w	8009f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b74:	e200      	b.n	8009f78 <HAL_DMA_IRQHandler+0xe08>
 8009b76:	bf00      	nop
 8009b78:	40020010 	.word	0x40020010
 8009b7c:	40020028 	.word	0x40020028
 8009b80:	40020040 	.word	0x40020040
 8009b84:	40020058 	.word	0x40020058
 8009b88:	40020070 	.word	0x40020070
 8009b8c:	40020088 	.word	0x40020088
 8009b90:	400200a0 	.word	0x400200a0
 8009b94:	400200b8 	.word	0x400200b8
 8009b98:	40020410 	.word	0x40020410
 8009b9c:	40020428 	.word	0x40020428
 8009ba0:	40020440 	.word	0x40020440
 8009ba4:	40020458 	.word	0x40020458
 8009ba8:	40020470 	.word	0x40020470
 8009bac:	40020488 	.word	0x40020488
 8009bb0:	400204a0 	.word	0x400204a0
 8009bb4:	400204b8 	.word	0x400204b8
 8009bb8:	58025408 	.word	0x58025408
 8009bbc:	5802541c 	.word	0x5802541c
 8009bc0:	58025430 	.word	0x58025430
 8009bc4:	58025444 	.word	0x58025444
 8009bc8:	58025458 	.word	0x58025458
 8009bcc:	5802546c 	.word	0x5802546c
 8009bd0:	58025480 	.word	0x58025480
 8009bd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d160      	bne.n	8009ca4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a7f      	ldr	r2, [pc, #508]	; (8009de4 <HAL_DMA_IRQHandler+0xc74>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d04a      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a7d      	ldr	r2, [pc, #500]	; (8009de8 <HAL_DMA_IRQHandler+0xc78>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d045      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a7c      	ldr	r2, [pc, #496]	; (8009dec <HAL_DMA_IRQHandler+0xc7c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d040      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a7a      	ldr	r2, [pc, #488]	; (8009df0 <HAL_DMA_IRQHandler+0xc80>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d03b      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a79      	ldr	r2, [pc, #484]	; (8009df4 <HAL_DMA_IRQHandler+0xc84>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d036      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a77      	ldr	r2, [pc, #476]	; (8009df8 <HAL_DMA_IRQHandler+0xc88>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d031      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a76      	ldr	r2, [pc, #472]	; (8009dfc <HAL_DMA_IRQHandler+0xc8c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d02c      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a74      	ldr	r2, [pc, #464]	; (8009e00 <HAL_DMA_IRQHandler+0xc90>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d027      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a73      	ldr	r2, [pc, #460]	; (8009e04 <HAL_DMA_IRQHandler+0xc94>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d022      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a71      	ldr	r2, [pc, #452]	; (8009e08 <HAL_DMA_IRQHandler+0xc98>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d01d      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a70      	ldr	r2, [pc, #448]	; (8009e0c <HAL_DMA_IRQHandler+0xc9c>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d018      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a6e      	ldr	r2, [pc, #440]	; (8009e10 <HAL_DMA_IRQHandler+0xca0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d013      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a6d      	ldr	r2, [pc, #436]	; (8009e14 <HAL_DMA_IRQHandler+0xca4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d00e      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a6b      	ldr	r2, [pc, #428]	; (8009e18 <HAL_DMA_IRQHandler+0xca8>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d009      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a6a      	ldr	r2, [pc, #424]	; (8009e1c <HAL_DMA_IRQHandler+0xcac>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d004      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xb12>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a68      	ldr	r2, [pc, #416]	; (8009e20 <HAL_DMA_IRQHandler+0xcb0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d108      	bne.n	8009c94 <HAL_DMA_IRQHandler+0xb24>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 0208 	bic.w	r2, r2, #8
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e007      	b.n	8009ca4 <HAL_DMA_IRQHandler+0xb34>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0204 	bic.w	r2, r2, #4
 8009ca2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8165 	beq.w	8009f78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cb6:	e15f      	b.n	8009f78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cbc:	f003 031f 	and.w	r3, r3, #31
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	409a      	lsls	r2, r3
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80c5 	beq.w	8009e58 <HAL_DMA_IRQHandler+0xce8>
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80bf 	beq.w	8009e58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cde:	f003 031f 	and.w	r3, r3, #31
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	409a      	lsls	r2, r3
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d018      	beq.n	8009d26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d109      	bne.n	8009d12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 813a 	beq.w	8009f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d10:	e134      	b.n	8009f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 8130 	beq.w	8009f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d24:	e12a      	b.n	8009f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8089 	bne.w	8009e44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a2b      	ldr	r2, [pc, #172]	; (8009de4 <HAL_DMA_IRQHandler+0xc74>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d04a      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a29      	ldr	r2, [pc, #164]	; (8009de8 <HAL_DMA_IRQHandler+0xc78>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d045      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a28      	ldr	r2, [pc, #160]	; (8009dec <HAL_DMA_IRQHandler+0xc7c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d040      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a26      	ldr	r2, [pc, #152]	; (8009df0 <HAL_DMA_IRQHandler+0xc80>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d03b      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a25      	ldr	r2, [pc, #148]	; (8009df4 <HAL_DMA_IRQHandler+0xc84>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d036      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a23      	ldr	r2, [pc, #140]	; (8009df8 <HAL_DMA_IRQHandler+0xc88>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d031      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a22      	ldr	r2, [pc, #136]	; (8009dfc <HAL_DMA_IRQHandler+0xc8c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d02c      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a20      	ldr	r2, [pc, #128]	; (8009e00 <HAL_DMA_IRQHandler+0xc90>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d027      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1f      	ldr	r2, [pc, #124]	; (8009e04 <HAL_DMA_IRQHandler+0xc94>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d022      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1d      	ldr	r2, [pc, #116]	; (8009e08 <HAL_DMA_IRQHandler+0xc98>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01d      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <HAL_DMA_IRQHandler+0xc9c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d018      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <HAL_DMA_IRQHandler+0xca0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d013      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <HAL_DMA_IRQHandler+0xca4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d00e      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <HAL_DMA_IRQHandler+0xca8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d009      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a16      	ldr	r2, [pc, #88]	; (8009e1c <HAL_DMA_IRQHandler+0xcac>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d004      	beq.n	8009dd2 <HAL_DMA_IRQHandler+0xc62>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <HAL_DMA_IRQHandler+0xcb0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d128      	bne.n	8009e24 <HAL_DMA_IRQHandler+0xcb4>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0214 	bic.w	r2, r2, #20
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e027      	b.n	8009e34 <HAL_DMA_IRQHandler+0xcc4>
 8009de4:	40020010 	.word	0x40020010
 8009de8:	40020028 	.word	0x40020028
 8009dec:	40020040 	.word	0x40020040
 8009df0:	40020058 	.word	0x40020058
 8009df4:	40020070 	.word	0x40020070
 8009df8:	40020088 	.word	0x40020088
 8009dfc:	400200a0 	.word	0x400200a0
 8009e00:	400200b8 	.word	0x400200b8
 8009e04:	40020410 	.word	0x40020410
 8009e08:	40020428 	.word	0x40020428
 8009e0c:	40020440 	.word	0x40020440
 8009e10:	40020458 	.word	0x40020458
 8009e14:	40020470 	.word	0x40020470
 8009e18:	40020488 	.word	0x40020488
 8009e1c:	400204a0 	.word	0x400204a0
 8009e20:	400204b8 	.word	0x400204b8
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 020a 	bic.w	r2, r2, #10
 8009e32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8097 	beq.w	8009f7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e56:	e091      	b.n	8009f7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e5c:	f003 031f 	and.w	r3, r3, #31
 8009e60:	2208      	movs	r2, #8
 8009e62:	409a      	lsls	r2, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	4013      	ands	r3, r2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 8088 	beq.w	8009f7e <HAL_DMA_IRQHandler+0xe0e>
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f003 0308 	and.w	r3, r3, #8
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 8082 	beq.w	8009f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a41      	ldr	r2, [pc, #260]	; (8009f84 <HAL_DMA_IRQHandler+0xe14>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d04a      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <HAL_DMA_IRQHandler+0xe18>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d045      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a3e      	ldr	r2, [pc, #248]	; (8009f8c <HAL_DMA_IRQHandler+0xe1c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d040      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a3c      	ldr	r2, [pc, #240]	; (8009f90 <HAL_DMA_IRQHandler+0xe20>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d03b      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a3b      	ldr	r2, [pc, #236]	; (8009f94 <HAL_DMA_IRQHandler+0xe24>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d036      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a39      	ldr	r2, [pc, #228]	; (8009f98 <HAL_DMA_IRQHandler+0xe28>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d031      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a38      	ldr	r2, [pc, #224]	; (8009f9c <HAL_DMA_IRQHandler+0xe2c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d02c      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a36      	ldr	r2, [pc, #216]	; (8009fa0 <HAL_DMA_IRQHandler+0xe30>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d027      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a35      	ldr	r2, [pc, #212]	; (8009fa4 <HAL_DMA_IRQHandler+0xe34>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d022      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a33      	ldr	r2, [pc, #204]	; (8009fa8 <HAL_DMA_IRQHandler+0xe38>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d01d      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a32      	ldr	r2, [pc, #200]	; (8009fac <HAL_DMA_IRQHandler+0xe3c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d018      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a30      	ldr	r2, [pc, #192]	; (8009fb0 <HAL_DMA_IRQHandler+0xe40>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d013      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a2f      	ldr	r2, [pc, #188]	; (8009fb4 <HAL_DMA_IRQHandler+0xe44>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00e      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a2d      	ldr	r2, [pc, #180]	; (8009fb8 <HAL_DMA_IRQHandler+0xe48>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d009      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a2c      	ldr	r2, [pc, #176]	; (8009fbc <HAL_DMA_IRQHandler+0xe4c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d004      	beq.n	8009f1a <HAL_DMA_IRQHandler+0xdaa>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2a      	ldr	r2, [pc, #168]	; (8009fc0 <HAL_DMA_IRQHandler+0xe50>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d108      	bne.n	8009f2c <HAL_DMA_IRQHandler+0xdbc>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 021c 	bic.w	r2, r2, #28
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e007      	b.n	8009f3c <HAL_DMA_IRQHandler+0xdcc>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 020e 	bic.w	r2, r2, #14
 8009f3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f40:	f003 031f 	and.w	r3, r3, #31
 8009f44:	2201      	movs	r2, #1
 8009f46:	409a      	lsls	r2, r3
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
 8009f72:	e004      	b.n	8009f7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009f74:	bf00      	nop
 8009f76:	e002      	b.n	8009f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009f7e:	3728      	adds	r7, #40	; 0x28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	40020010 	.word	0x40020010
 8009f88:	40020028 	.word	0x40020028
 8009f8c:	40020040 	.word	0x40020040
 8009f90:	40020058 	.word	0x40020058
 8009f94:	40020070 	.word	0x40020070
 8009f98:	40020088 	.word	0x40020088
 8009f9c:	400200a0 	.word	0x400200a0
 8009fa0:	400200b8 	.word	0x400200b8
 8009fa4:	40020410 	.word	0x40020410
 8009fa8:	40020428 	.word	0x40020428
 8009fac:	40020440 	.word	0x40020440
 8009fb0:	40020458 	.word	0x40020458
 8009fb4:	40020470 	.word	0x40020470
 8009fb8:	40020488 	.word	0x40020488
 8009fbc:	400204a0 	.word	0x400204a0
 8009fc0:	400204b8 	.word	0x400204b8

08009fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a42      	ldr	r2, [pc, #264]	; (800a0dc <DMA_CalcBaseAndBitshift+0x118>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d04a      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a41      	ldr	r2, [pc, #260]	; (800a0e0 <DMA_CalcBaseAndBitshift+0x11c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d045      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a3f      	ldr	r2, [pc, #252]	; (800a0e4 <DMA_CalcBaseAndBitshift+0x120>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d040      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a3e      	ldr	r2, [pc, #248]	; (800a0e8 <DMA_CalcBaseAndBitshift+0x124>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d03b      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a3c      	ldr	r2, [pc, #240]	; (800a0ec <DMA_CalcBaseAndBitshift+0x128>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d036      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a3b      	ldr	r2, [pc, #236]	; (800a0f0 <DMA_CalcBaseAndBitshift+0x12c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d031      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a39      	ldr	r2, [pc, #228]	; (800a0f4 <DMA_CalcBaseAndBitshift+0x130>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d02c      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a38      	ldr	r2, [pc, #224]	; (800a0f8 <DMA_CalcBaseAndBitshift+0x134>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d027      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a36      	ldr	r2, [pc, #216]	; (800a0fc <DMA_CalcBaseAndBitshift+0x138>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d022      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a35      	ldr	r2, [pc, #212]	; (800a100 <DMA_CalcBaseAndBitshift+0x13c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d01d      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a33      	ldr	r2, [pc, #204]	; (800a104 <DMA_CalcBaseAndBitshift+0x140>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d018      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a32      	ldr	r2, [pc, #200]	; (800a108 <DMA_CalcBaseAndBitshift+0x144>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d013      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a30      	ldr	r2, [pc, #192]	; (800a10c <DMA_CalcBaseAndBitshift+0x148>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00e      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a2f      	ldr	r2, [pc, #188]	; (800a110 <DMA_CalcBaseAndBitshift+0x14c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d009      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a2d      	ldr	r2, [pc, #180]	; (800a114 <DMA_CalcBaseAndBitshift+0x150>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d004      	beq.n	800a06c <DMA_CalcBaseAndBitshift+0xa8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a2c      	ldr	r2, [pc, #176]	; (800a118 <DMA_CalcBaseAndBitshift+0x154>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d101      	bne.n	800a070 <DMA_CalcBaseAndBitshift+0xac>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <DMA_CalcBaseAndBitshift+0xae>
 800a070:	2300      	movs	r3, #0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d024      	beq.n	800a0c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	3b10      	subs	r3, #16
 800a07e:	4a27      	ldr	r2, [pc, #156]	; (800a11c <DMA_CalcBaseAndBitshift+0x158>)
 800a080:	fba2 2303 	umull	r2, r3, r2, r3
 800a084:	091b      	lsrs	r3, r3, #4
 800a086:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	4a24      	ldr	r2, [pc, #144]	; (800a120 <DMA_CalcBaseAndBitshift+0x15c>)
 800a090:	5cd3      	ldrb	r3, [r2, r3]
 800a092:	461a      	mov	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d908      	bls.n	800a0b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4b1f      	ldr	r3, [pc, #124]	; (800a124 <DMA_CalcBaseAndBitshift+0x160>)
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	1d1a      	adds	r2, r3, #4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	659a      	str	r2, [r3, #88]	; 0x58
 800a0ae:	e00d      	b.n	800a0cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4b1b      	ldr	r3, [pc, #108]	; (800a124 <DMA_CalcBaseAndBitshift+0x160>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6593      	str	r3, [r2, #88]	; 0x58
 800a0be:	e005      	b.n	800a0cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	40020010 	.word	0x40020010
 800a0e0:	40020028 	.word	0x40020028
 800a0e4:	40020040 	.word	0x40020040
 800a0e8:	40020058 	.word	0x40020058
 800a0ec:	40020070 	.word	0x40020070
 800a0f0:	40020088 	.word	0x40020088
 800a0f4:	400200a0 	.word	0x400200a0
 800a0f8:	400200b8 	.word	0x400200b8
 800a0fc:	40020410 	.word	0x40020410
 800a100:	40020428 	.word	0x40020428
 800a104:	40020440 	.word	0x40020440
 800a108:	40020458 	.word	0x40020458
 800a10c:	40020470 	.word	0x40020470
 800a110:	40020488 	.word	0x40020488
 800a114:	400204a0 	.word	0x400204a0
 800a118:	400204b8 	.word	0x400204b8
 800a11c:	aaaaaaab 	.word	0xaaaaaaab
 800a120:	08012c84 	.word	0x08012c84
 800a124:	fffffc00 	.word	0xfffffc00

0800a128 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d120      	bne.n	800a17e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	2b03      	cmp	r3, #3
 800a142:	d858      	bhi.n	800a1f6 <DMA_CheckFifoParam+0xce>
 800a144:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <DMA_CheckFifoParam+0x24>)
 800a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14a:	bf00      	nop
 800a14c:	0800a15d 	.word	0x0800a15d
 800a150:	0800a16f 	.word	0x0800a16f
 800a154:	0800a15d 	.word	0x0800a15d
 800a158:	0800a1f7 	.word	0x0800a1f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d048      	beq.n	800a1fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a16c:	e045      	b.n	800a1fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a176:	d142      	bne.n	800a1fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a17c:	e03f      	b.n	800a1fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a186:	d123      	bne.n	800a1d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d838      	bhi.n	800a202 <DMA_CheckFifoParam+0xda>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <DMA_CheckFifoParam+0x70>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1af 	.word	0x0800a1af
 800a1a0:	0800a1a9 	.word	0x0800a1a9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	73fb      	strb	r3, [r7, #15]
        break;
 800a1ac:	e030      	b.n	800a210 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d025      	beq.n	800a206 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1be:	e022      	b.n	800a206 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a1c8:	d11f      	bne.n	800a20a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1ce:	e01c      	b.n	800a20a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d902      	bls.n	800a1de <DMA_CheckFifoParam+0xb6>
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d003      	beq.n	800a1e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a1dc:	e018      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
        break;
 800a1e2:	e015      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00e      	beq.n	800a20e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f4:	e00b      	b.n	800a20e <DMA_CheckFifoParam+0xe6>
        break;
 800a1f6:	bf00      	nop
 800a1f8:	e00a      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        break;
 800a1fa:	bf00      	nop
 800a1fc:	e008      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        break;
 800a1fe:	bf00      	nop
 800a200:	e006      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        break;
 800a202:	bf00      	nop
 800a204:	e004      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        break;
 800a206:	bf00      	nop
 800a208:	e002      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
        break;
 800a20a:	bf00      	nop
 800a20c:	e000      	b.n	800a210 <DMA_CheckFifoParam+0xe8>
    break;
 800a20e:	bf00      	nop
    }
  }

  return status;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a38      	ldr	r2, [pc, #224]	; (800a314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d022      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a36      	ldr	r2, [pc, #216]	; (800a318 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d01d      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a35      	ldr	r2, [pc, #212]	; (800a31c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d018      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a33      	ldr	r2, [pc, #204]	; (800a320 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d013      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a32      	ldr	r2, [pc, #200]	; (800a324 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d00e      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a30      	ldr	r2, [pc, #192]	; (800a328 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d009      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a2f      	ldr	r2, [pc, #188]	; (800a32c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a2d      	ldr	r2, [pc, #180]	; (800a330 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d101      	bne.n	800a282 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a27e:	2301      	movs	r3, #1
 800a280:	e000      	b.n	800a284 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a282:	2300      	movs	r3, #0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01a      	beq.n	800a2be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	3b08      	subs	r3, #8
 800a290:	4a28      	ldr	r2, [pc, #160]	; (800a334 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	091b      	lsrs	r3, r3, #4
 800a298:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4b26      	ldr	r3, [pc, #152]	; (800a338 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a24      	ldr	r2, [pc, #144]	; (800a33c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a2ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 031f 	and.w	r3, r3, #31
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	409a      	lsls	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a2bc:	e024      	b.n	800a308 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	3b10      	subs	r3, #16
 800a2c6:	4a1e      	ldr	r2, [pc, #120]	; (800a340 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2cc:	091b      	lsrs	r3, r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d806      	bhi.n	800a2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d902      	bls.n	800a2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4b18      	ldr	r3, [pc, #96]	; (800a34c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a16      	ldr	r2, [pc, #88]	; (800a350 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a2f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f003 031f 	and.w	r3, r3, #31
 800a300:	2201      	movs	r2, #1
 800a302:	409a      	lsls	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	58025408 	.word	0x58025408
 800a318:	5802541c 	.word	0x5802541c
 800a31c:	58025430 	.word	0x58025430
 800a320:	58025444 	.word	0x58025444
 800a324:	58025458 	.word	0x58025458
 800a328:	5802546c 	.word	0x5802546c
 800a32c:	58025480 	.word	0x58025480
 800a330:	58025494 	.word	0x58025494
 800a334:	cccccccd 	.word	0xcccccccd
 800a338:	16009600 	.word	0x16009600
 800a33c:	58025880 	.word	0x58025880
 800a340:	aaaaaaab 	.word	0xaaaaaaab
 800a344:	400204b8 	.word	0x400204b8
 800a348:	4002040f 	.word	0x4002040f
 800a34c:	10008200 	.word	0x10008200
 800a350:	40020880 	.word	0x40020880

0800a354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d04a      	beq.n	800a400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d847      	bhi.n	800a400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a25      	ldr	r2, [pc, #148]	; (800a40c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d022      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a24      	ldr	r2, [pc, #144]	; (800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d01d      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a22      	ldr	r2, [pc, #136]	; (800a414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d018      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a21      	ldr	r2, [pc, #132]	; (800a418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d013      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1f      	ldr	r2, [pc, #124]	; (800a41c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00e      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d009      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d101      	bne.n	800a3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e000      	b.n	800a3c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4b17      	ldr	r3, [pc, #92]	; (800a42c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a3dc:	671a      	str	r2, [r3, #112]	; 0x70
 800a3de:	e009      	b.n	800a3f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a11      	ldr	r2, [pc, #68]	; (800a438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a3f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	409a      	lsls	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a400:	bf00      	nop
 800a402:	3714      	adds	r7, #20
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	58025408 	.word	0x58025408
 800a410:	5802541c 	.word	0x5802541c
 800a414:	58025430 	.word	0x58025430
 800a418:	58025444 	.word	0x58025444
 800a41c:	58025458 	.word	0x58025458
 800a420:	5802546c 	.word	0x5802546c
 800a424:	58025480 	.word	0x58025480
 800a428:	58025494 	.word	0x58025494
 800a42c:	1600963f 	.word	0x1600963f
 800a430:	58025940 	.word	0x58025940
 800a434:	1000823f 	.word	0x1000823f
 800a438:	40020940 	.word	0x40020940

0800a43c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e0cf      	b.n	800a5ee <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2223      	movs	r2, #35	; 0x23
 800a45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7fd f89f 	bl	80075a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a466:	4b64      	ldr	r3, [pc, #400]	; (800a5f8 <HAL_ETH_Init+0x1bc>)
 800a468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a46c:	4a62      	ldr	r2, [pc, #392]	; (800a5f8 <HAL_ETH_Init+0x1bc>)
 800a46e:	f043 0302 	orr.w	r3, r3, #2
 800a472:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a476:	4b60      	ldr	r3, [pc, #384]	; (800a5f8 <HAL_ETH_Init+0x1bc>)
 800a478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	60bb      	str	r3, [r7, #8]
 800a482:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7a1b      	ldrb	r3, [r3, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a48c:	2000      	movs	r0, #0
 800a48e:	f7fd fc8b 	bl	8007da8 <HAL_SYSCFG_ETHInterfaceSelect>
 800a492:	e003      	b.n	800a49c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a494:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a498:	f7fd fc86 	bl	8007da8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a49c:	4b57      	ldr	r3, [pc, #348]	; (800a5fc <HAL_ETH_Init+0x1c0>)
 800a49e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6812      	ldr	r2, [r2, #0]
 800a4ae:	f043 0301 	orr.w	r3, r3, #1
 800a4b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4b8:	f7fd fc3a 	bl	8007d30 <HAL_GetTick>
 800a4bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a4be:	e011      	b.n	800a4e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a4c0:	f7fd fc36 	bl	8007d30 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a4ce:	d909      	bls.n	800a4e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2204      	movs	r2, #4
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	22e0      	movs	r2, #224	; 0xe0
 800a4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e084      	b.n	800a5ee <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e4      	bne.n	800a4c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f886 	bl	800a608 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a4fc:	f001 fefc 	bl	800c2f8 <HAL_RCC_GetHCLKFreq>
 800a500:	4603      	mov	r3, r0
 800a502:	4a3f      	ldr	r2, [pc, #252]	; (800a600 <HAL_ETH_Init+0x1c4>)
 800a504:	fba2 2303 	umull	r2, r3, r2, r3
 800a508:	0c9a      	lsrs	r2, r3, #18
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3a01      	subs	r2, #1
 800a510:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fa71 	bl	800a9fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a522:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a526:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6812      	ldr	r2, [r2, #0]
 800a52e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a536:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	22e0      	movs	r2, #224	; 0xe0
 800a552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e049      	b.n	800a5ee <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a562:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a566:	4b27      	ldr	r3, [pc, #156]	; (800a604 <HAL_ETH_Init+0x1c8>)
 800a568:	4013      	ands	r3, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6952      	ldr	r2, [r2, #20]
 800a56e:	0051      	lsls	r1, r2, #1
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	430b      	orrs	r3, r1
 800a576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a57a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fad9 	bl	800ab36 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fb1f 	bl	800abc8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	3305      	adds	r3, #5
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	3304      	adds	r3, #4
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	3303      	adds	r3, #3
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	061a      	lsls	r2, r3, #24
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	3302      	adds	r3, #2
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a5c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a5d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a5d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2210      	movs	r2, #16
 800a5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	58000400 	.word	0x58000400
 800a600:	431bde83 	.word	0x431bde83
 800a604:	ffff8001 	.word	0xffff8001

0800a608 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a618:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a620:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a622:	f001 fe69 	bl	800c2f8 <HAL_RCC_GetHCLKFreq>
 800a626:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d908      	bls.n	800a642 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4a1d      	ldr	r2, [pc, #116]	; (800a6a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d804      	bhi.n	800a642 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	e027      	b.n	800a692 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	4a18      	ldr	r2, [pc, #96]	; (800a6a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d908      	bls.n	800a65c <HAL_ETH_SetMDIOClockRange+0x54>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	4a17      	ldr	r2, [pc, #92]	; (800a6ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d204      	bcs.n	800a65c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e01a      	b.n	800a692 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4a13      	ldr	r2, [pc, #76]	; (800a6ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d303      	bcc.n	800a66c <HAL_ETH_SetMDIOClockRange+0x64>
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	4a12      	ldr	r2, [pc, #72]	; (800a6b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d911      	bls.n	800a690 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4a10      	ldr	r2, [pc, #64]	; (800a6b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d908      	bls.n	800a686 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4a0f      	ldr	r2, [pc, #60]	; (800a6b4 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d804      	bhi.n	800a686 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e005      	b.n	800a692 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e000      	b.n	800a692 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a690:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a69c:	bf00      	nop
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	01312cff 	.word	0x01312cff
 800a6a8:	02160ebf 	.word	0x02160ebf
 800a6ac:	03938700 	.word	0x03938700
 800a6b0:	05f5e0ff 	.word	0x05f5e0ff
 800a6b4:	08f0d17f 	.word	0x08f0d17f

0800a6b8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a6ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a6d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	7b1b      	ldrb	r3, [r3, #12]
 800a6d8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a6da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	7b5b      	ldrb	r3, [r3, #13]
 800a6e0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a6e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	7b9b      	ldrb	r3, [r3, #14]
 800a6e8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a6ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	7bdb      	ldrb	r3, [r3, #15]
 800a6f0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a6f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	7c12      	ldrb	r2, [r2, #16]
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d102      	bne.n	800a702 <ETH_SetMACConfig+0x4a>
 800a6fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a700:	e000      	b.n	800a704 <ETH_SetMACConfig+0x4c>
 800a702:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a704:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	7c52      	ldrb	r2, [r2, #17]
 800a70a:	2a00      	cmp	r2, #0
 800a70c:	d102      	bne.n	800a714 <ETH_SetMACConfig+0x5c>
 800a70e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a712:	e000      	b.n	800a716 <ETH_SetMACConfig+0x5e>
 800a714:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	7c9b      	ldrb	r3, [r3, #18]
 800a71c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a71e:	431a      	orrs	r2, r3
               macconf->Speed |
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a724:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a72a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	7f1b      	ldrb	r3, [r3, #28]
 800a730:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	7f5b      	ldrb	r3, [r3, #29]
 800a738:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a73a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	7f92      	ldrb	r2, [r2, #30]
 800a740:	2a00      	cmp	r2, #0
 800a742:	d102      	bne.n	800a74a <ETH_SetMACConfig+0x92>
 800a744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a748:	e000      	b.n	800a74c <ETH_SetMACConfig+0x94>
 800a74a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a74c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	7fdb      	ldrb	r3, [r3, #31]
 800a752:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a754:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	d102      	bne.n	800a766 <ETH_SetMACConfig+0xae>
 800a760:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a764:	e000      	b.n	800a768 <ETH_SetMACConfig+0xb0>
 800a766:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a768:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a76e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a776:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a778:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b56      	ldr	r3, [pc, #344]	; (800a8e4 <ETH_SetMACConfig+0x22c>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	6812      	ldr	r2, [r2, #0]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	430b      	orrs	r3, r1
 800a794:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7a2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a7a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7ac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a7ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7b6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a7b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	d102      	bne.n	800a7ca <ETH_SetMACConfig+0x112>
 800a7c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a7c8:	e000      	b.n	800a7cc <ETH_SetMACConfig+0x114>
 800a7ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a7cc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	4b42      	ldr	r3, [pc, #264]	; (800a8e8 <ETH_SetMACConfig+0x230>)
 800a7de:	4013      	ands	r3, r2
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7f0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	4b3a      	ldr	r3, [pc, #232]	; (800a8ec <ETH_SetMACConfig+0x234>)
 800a802:	4013      	ands	r3, r2
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6812      	ldr	r2, [r2, #0]
 800a808:	68f9      	ldr	r1, [r7, #12]
 800a80a:	430b      	orrs	r3, r1
 800a80c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a814:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a81a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a822:	2a00      	cmp	r2, #0
 800a824:	d101      	bne.n	800a82a <ETH_SetMACConfig+0x172>
 800a826:	2280      	movs	r2, #128	; 0x80
 800a828:	e000      	b.n	800a82c <ETH_SetMACConfig+0x174>
 800a82a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a82c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a832:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a83e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a842:	4013      	ands	r3, r2
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6812      	ldr	r2, [r2, #0]
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	430b      	orrs	r3, r1
 800a84c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a854:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a85c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a86a:	f023 0103 	bic.w	r1, r3, #3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	430a      	orrs	r2, r1
 800a876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a882:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	d101      	bne.n	800a8a6 <ETH_SetMACConfig+0x1ee>
 800a8a2:	2240      	movs	r2, #64	; 0x40
 800a8a4:	e000      	b.n	800a8a8 <ETH_SetMACConfig+0x1f0>
 800a8a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a8a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a8b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a8b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a8ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a8c8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	00048083 	.word	0x00048083
 800a8e8:	c0f88000 	.word	0xc0f88000
 800a8ec:	fffffef0 	.word	0xfffffef0

0800a8f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4b38      	ldr	r3, [pc, #224]	; (800a9e8 <ETH_SetDMAConfig+0xf8>)
 800a906:	4013      	ands	r3, r2
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	6811      	ldr	r1, [r2, #0]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	430b      	orrs	r3, r1
 800a912:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a916:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	791b      	ldrb	r3, [r3, #4]
 800a91c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a922:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	7b1b      	ldrb	r3, [r3, #12]
 800a928:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	4b2c      	ldr	r3, [pc, #176]	; (800a9ec <ETH_SetDMAConfig+0xfc>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	6812      	ldr	r2, [r2, #0]
 800a940:	68f9      	ldr	r1, [r7, #12]
 800a942:	430b      	orrs	r3, r1
 800a944:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a948:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	7b5b      	ldrb	r3, [r3, #13]
 800a94e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a960:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a964:	4b22      	ldr	r3, [pc, #136]	; (800a9f0 <ETH_SetDMAConfig+0x100>)
 800a966:	4013      	ands	r3, r2
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	6812      	ldr	r2, [r2, #0]
 800a96c:	68f9      	ldr	r1, [r7, #12]
 800a96e:	430b      	orrs	r3, r1
 800a970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a974:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	7d1b      	ldrb	r3, [r3, #20]
 800a980:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a982:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	7f5b      	ldrb	r3, [r3, #29]
 800a988:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a996:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <ETH_SetDMAConfig+0x104>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6812      	ldr	r2, [r2, #0]
 800a9a2:	68f9      	ldr	r1, [r7, #12]
 800a9a4:	430b      	orrs	r3, r1
 800a9a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	7f1b      	ldrb	r3, [r3, #28]
 800a9b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <ETH_SetDMAConfig+0x108>)
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9d8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	ffff87fd 	.word	0xffff87fd
 800a9ec:	ffff2ffe 	.word	0xffff2ffe
 800a9f0:	fffec000 	.word	0xfffec000
 800a9f4:	ffc0efef 	.word	0xffc0efef
 800a9f8:	7fc0ffff 	.word	0x7fc0ffff

0800a9fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b0a4      	sub	sp, #144	; 0x90
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800aa26:	2301      	movs	r3, #1
 800aa28:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800aa38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa3c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800aa54:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800aa58:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800aa60:	2300      	movs	r3, #0
 800aa62:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800aa76:	2300      	movs	r3, #0
 800aa78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800aa94:	2320      	movs	r3, #32
 800aa96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800aaa6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800aaac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aab0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800aab8:	2302      	movs	r3, #2
 800aaba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800aac4:	2300      	movs	r3, #0
 800aac6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800aad0:	2301      	movs	r3, #1
 800aad2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800aad6:	2300      	movs	r3, #0
 800aad8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800aada:	2301      	movs	r3, #1
 800aadc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800aae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff fde6 	bl	800a6b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800aaec:	2301      	movs	r3, #1
 800aaee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800aafe:	2300      	movs	r3, #0
 800ab00:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800ab06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab0a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800ab10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab14:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800ab1c:	f44f 7306 	mov.w	r3, #536	; 0x218
 800ab20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fee1 	bl	800a8f0 <ETH_SetDMAConfig>
}
 800ab2e:	bf00      	nop
 800ab30:	3790      	adds	r7, #144	; 0x90
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e01d      	b.n	800ab80 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68d9      	ldr	r1, [r3, #12]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4413      	add	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	440b      	add	r3, r1
 800ab54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2200      	movs	r2, #0
 800ab66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	3206      	adds	r2, #6
 800ab76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d9de      	bls.n	800ab44 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab94:	461a      	mov	r2, r3
 800ab96:	2303      	movs	r3, #3
 800ab98:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68da      	ldr	r2, [r3, #12]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800abbc:	bf00      	nop
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e023      	b.n	800ac1e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6919      	ldr	r1, [r3, #16]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	4613      	mov	r3, r2
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	4413      	add	r3, r2
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	440b      	add	r3, r1
 800abe6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2200      	movs	r2, #0
 800ac04:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800ac0c:	68b9      	ldr	r1, [r7, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	3212      	adds	r2, #18
 800ac14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d9d8      	bls.n	800abd6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
	...

0800ac84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b089      	sub	sp, #36	; 0x24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ac92:	4b89      	ldr	r3, [pc, #548]	; (800aeb8 <HAL_GPIO_Init+0x234>)
 800ac94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ac96:	e194      	b.n	800afc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	fa01 f303 	lsl.w	r3, r1, r3
 800aca4:	4013      	ands	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8186 	beq.w	800afbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d005      	beq.n	800acc8 <HAL_GPIO_Init+0x44>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d130      	bne.n	800ad2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	2203      	movs	r2, #3
 800acd4:	fa02 f303 	lsl.w	r3, r2, r3
 800acd8:	43db      	mvns	r3, r3
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	4013      	ands	r3, r2
 800acde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68da      	ldr	r2, [r3, #12]
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	69ba      	ldr	r2, [r7, #24]
 800acee:	4313      	orrs	r3, r2
 800acf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800acfe:	2201      	movs	r2, #1
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	fa02 f303 	lsl.w	r3, r2, r3
 800ad06:	43db      	mvns	r3, r3
 800ad08:	69ba      	ldr	r2, [r7, #24]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	091b      	lsrs	r3, r3, #4
 800ad14:	f003 0201 	and.w	r2, r3, #1
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d017      	beq.n	800ad66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	2203      	movs	r2, #3
 800ad42:	fa02 f303 	lsl.w	r3, r2, r3
 800ad46:	43db      	mvns	r3, r3
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d123      	bne.n	800adba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	08da      	lsrs	r2, r3, #3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3208      	adds	r2, #8
 800ad7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	220f      	movs	r2, #15
 800ad8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8e:	43db      	mvns	r3, r3
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	4013      	ands	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	691a      	ldr	r2, [r3, #16]
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	f003 0307 	and.w	r3, r3, #7
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	fa02 f303 	lsl.w	r3, r2, r3
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	08da      	lsrs	r2, r3, #3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3208      	adds	r2, #8
 800adb4:	69b9      	ldr	r1, [r7, #24]
 800adb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	2203      	movs	r2, #3
 800adc6:	fa02 f303 	lsl.w	r3, r2, r3
 800adca:	43db      	mvns	r3, r3
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	4013      	ands	r3, r2
 800add0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f003 0203 	and.w	r2, r3, #3
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	fa02 f303 	lsl.w	r3, r2, r3
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 80e0 	beq.w	800afbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adfc:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <HAL_GPIO_Init+0x238>)
 800adfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae02:	4a2e      	ldr	r2, [pc, #184]	; (800aebc <HAL_GPIO_Init+0x238>)
 800ae04:	f043 0302 	orr.w	r3, r3, #2
 800ae08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ae0c:	4b2b      	ldr	r3, [pc, #172]	; (800aebc <HAL_GPIO_Init+0x238>)
 800ae0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae12:	f003 0302 	and.w	r3, r3, #2
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ae1a:	4a29      	ldr	r2, [pc, #164]	; (800aec0 <HAL_GPIO_Init+0x23c>)
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	089b      	lsrs	r3, r3, #2
 800ae20:	3302      	adds	r3, #2
 800ae22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	220f      	movs	r2, #15
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	43db      	mvns	r3, r3
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a20      	ldr	r2, [pc, #128]	; (800aec4 <HAL_GPIO_Init+0x240>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d052      	beq.n	800aeec <HAL_GPIO_Init+0x268>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1f      	ldr	r2, [pc, #124]	; (800aec8 <HAL_GPIO_Init+0x244>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d031      	beq.n	800aeb2 <HAL_GPIO_Init+0x22e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a1e      	ldr	r2, [pc, #120]	; (800aecc <HAL_GPIO_Init+0x248>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d02b      	beq.n	800aeae <HAL_GPIO_Init+0x22a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a1d      	ldr	r2, [pc, #116]	; (800aed0 <HAL_GPIO_Init+0x24c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d025      	beq.n	800aeaa <HAL_GPIO_Init+0x226>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a1c      	ldr	r2, [pc, #112]	; (800aed4 <HAL_GPIO_Init+0x250>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d01f      	beq.n	800aea6 <HAL_GPIO_Init+0x222>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a1b      	ldr	r2, [pc, #108]	; (800aed8 <HAL_GPIO_Init+0x254>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d019      	beq.n	800aea2 <HAL_GPIO_Init+0x21e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a1a      	ldr	r2, [pc, #104]	; (800aedc <HAL_GPIO_Init+0x258>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d013      	beq.n	800ae9e <HAL_GPIO_Init+0x21a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a19      	ldr	r2, [pc, #100]	; (800aee0 <HAL_GPIO_Init+0x25c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00d      	beq.n	800ae9a <HAL_GPIO_Init+0x216>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a18      	ldr	r2, [pc, #96]	; (800aee4 <HAL_GPIO_Init+0x260>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d007      	beq.n	800ae96 <HAL_GPIO_Init+0x212>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <HAL_GPIO_Init+0x264>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d101      	bne.n	800ae92 <HAL_GPIO_Init+0x20e>
 800ae8e:	2309      	movs	r3, #9
 800ae90:	e02d      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800ae92:	230a      	movs	r3, #10
 800ae94:	e02b      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800ae96:	2308      	movs	r3, #8
 800ae98:	e029      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800ae9a:	2307      	movs	r3, #7
 800ae9c:	e027      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800ae9e:	2306      	movs	r3, #6
 800aea0:	e025      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aea2:	2305      	movs	r3, #5
 800aea4:	e023      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aea6:	2304      	movs	r3, #4
 800aea8:	e021      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e01f      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e01d      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e01b      	b.n	800aeee <HAL_GPIO_Init+0x26a>
 800aeb6:	bf00      	nop
 800aeb8:	58000080 	.word	0x58000080
 800aebc:	58024400 	.word	0x58024400
 800aec0:	58000400 	.word	0x58000400
 800aec4:	58020000 	.word	0x58020000
 800aec8:	58020400 	.word	0x58020400
 800aecc:	58020800 	.word	0x58020800
 800aed0:	58020c00 	.word	0x58020c00
 800aed4:	58021000 	.word	0x58021000
 800aed8:	58021400 	.word	0x58021400
 800aedc:	58021800 	.word	0x58021800
 800aee0:	58021c00 	.word	0x58021c00
 800aee4:	58022000 	.word	0x58022000
 800aee8:	58022400 	.word	0x58022400
 800aeec:	2300      	movs	r3, #0
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	f002 0203 	and.w	r2, r2, #3
 800aef4:	0092      	lsls	r2, r2, #2
 800aef6:	4093      	lsls	r3, r2
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aefe:	4938      	ldr	r1, [pc, #224]	; (800afe0 <HAL_GPIO_Init+0x35c>)
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	089b      	lsrs	r3, r3, #2
 800af04:	3302      	adds	r3, #2
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	43db      	mvns	r3, r3
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	4013      	ands	r3, r2
 800af1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	4313      	orrs	r3, r2
 800af30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800af32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800af3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	43db      	mvns	r3, r3
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	4013      	ands	r3, r2
 800af4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800af60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	43db      	mvns	r3, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4013      	ands	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	43db      	mvns	r3, r3
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	4013      	ands	r3, r2
 800afa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	3301      	adds	r3, #1
 800afc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	fa22 f303 	lsr.w	r3, r2, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f47f ae63 	bne.w	800ac98 <HAL_GPIO_Init+0x14>
  }
}
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	3724      	adds	r7, #36	; 0x24
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	58000400 	.word	0x58000400

0800afe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	887b      	ldrh	r3, [r7, #2]
 800aff6:	4013      	ands	r3, r2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
 800b000:	e001      	b.n	800b006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
 800b020:	4613      	mov	r3, r2
 800b022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b024:	787b      	ldrb	r3, [r7, #1]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b02a:	887a      	ldrh	r2, [r7, #2]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b030:	e003      	b.n	800b03a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b032:	887b      	ldrh	r3, [r7, #2]
 800b034:	041a      	lsls	r2, r3, #16
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	619a      	str	r2, [r3, #24]
}
 800b03a:	bf00      	nop
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b058:	887a      	ldrh	r2, [r7, #2]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4013      	ands	r3, r2
 800b05e:	041a      	lsls	r2, r3, #16
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	43d9      	mvns	r1, r3
 800b064:	887b      	ldrh	r3, [r7, #2]
 800b066:	400b      	ands	r3, r1
 800b068:	431a      	orrs	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	619a      	str	r2, [r3, #24]
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800b084:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <HAL_HSEM_FastTake+0x2c>)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3320      	adds	r3, #32
 800b08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b08e:	4a07      	ldr	r2, [pc, #28]	; (800b0ac <HAL_HSEM_FastTake+0x30>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d101      	bne.n	800b098 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	e000      	b.n	800b09a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	58026400 	.word	0x58026400
 800b0ac:	80000300 	.word	0x80000300

0800b0b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800b0ba:	4906      	ldr	r1, [pc, #24]	; (800b0d4 <HAL_HSEM_Release+0x24>)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	58026400 	.word	0x58026400

0800b0d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	b08f      	sub	sp, #60	; 0x3c
 800b0dc:	af0a      	add	r7, sp, #40	; 0x28
 800b0de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e116      	b.n	800b318 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7fc fc81 	bl	8007a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2203      	movs	r2, #3
 800b10e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f005 f977 	bl	801041c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	687e      	ldr	r6, [r7, #4]
 800b136:	466d      	mov	r5, sp
 800b138:	f106 0410 	add.w	r4, r6, #16
 800b13c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b13e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b144:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b148:	e885 0003 	stmia.w	r5, {r0, r1}
 800b14c:	1d33      	adds	r3, r6, #4
 800b14e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b150:	6838      	ldr	r0, [r7, #0]
 800b152:	f005 f8f5 	bl	8010340 <USB_CoreInit>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e0d7      	b.n	800b318 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2100      	movs	r1, #0
 800b16e:	4618      	mov	r0, r3
 800b170:	f005 f965 	bl	801043e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
 800b178:	e04a      	b.n	800b210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b17a:	7bfa      	ldrb	r2, [r7, #15]
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4613      	mov	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	440b      	add	r3, r1
 800b188:	333d      	adds	r3, #61	; 0x3d
 800b18a:	2201      	movs	r2, #1
 800b18c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b18e:	7bfa      	ldrb	r2, [r7, #15]
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	440b      	add	r3, r1
 800b19c:	333c      	adds	r3, #60	; 0x3c
 800b19e:	7bfa      	ldrb	r2, [r7, #15]
 800b1a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b1a2:	7bfa      	ldrb	r2, [r7, #15]
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	b298      	uxth	r0, r3
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3344      	adds	r3, #68	; 0x44
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b1ba:	7bfa      	ldrb	r2, [r7, #15]
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	3340      	adds	r3, #64	; 0x40
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b1ce:	7bfa      	ldrb	r2, [r7, #15]
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	3348      	adds	r3, #72	; 0x48
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b1e2:	7bfa      	ldrb	r2, [r7, #15]
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	334c      	adds	r3, #76	; 0x4c
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b1f6:	7bfa      	ldrb	r2, [r7, #15]
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3354      	adds	r3, #84	; 0x54
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	3301      	adds	r3, #1
 800b20e:	73fb      	strb	r3, [r7, #15]
 800b210:	7bfa      	ldrb	r2, [r7, #15]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d3af      	bcc.n	800b17a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
 800b21e:	e044      	b.n	800b2aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b220:	7bfa      	ldrb	r2, [r7, #15]
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b236:	7bfa      	ldrb	r2, [r7, #15]
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	440b      	add	r3, r1
 800b244:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b248:	7bfa      	ldrb	r2, [r7, #15]
 800b24a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b24c:	7bfa      	ldrb	r2, [r7, #15]
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	4613      	mov	r3, r2
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	440b      	add	r3, r1
 800b25a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b262:	7bfa      	ldrb	r2, [r7, #15]
 800b264:	6879      	ldr	r1, [r7, #4]
 800b266:	4613      	mov	r3, r2
 800b268:	00db      	lsls	r3, r3, #3
 800b26a:	4413      	add	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	440b      	add	r3, r1
 800b270:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b278:	7bfa      	ldrb	r2, [r7, #15]
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	4613      	mov	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b28e:	7bfa      	ldrb	r2, [r7, #15]
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	4613      	mov	r3, r2
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	73fb      	strb	r3, [r7, #15]
 800b2aa:	7bfa      	ldrb	r2, [r7, #15]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d3b5      	bcc.n	800b220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	603b      	str	r3, [r7, #0]
 800b2ba:	687e      	ldr	r6, [r7, #4]
 800b2bc:	466d      	mov	r5, sp
 800b2be:	f106 0410 	add.w	r4, r6, #16
 800b2c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b2ce:	e885 0003 	stmia.w	r5, {r0, r1}
 800b2d2:	1d33      	adds	r3, r6, #4
 800b2d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2d6:	6838      	ldr	r0, [r7, #0]
 800b2d8:	f005 f8fe 	bl	80104d8 <USB_DevInit>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e014      	b.n	800b318 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	2b01      	cmp	r3, #1
 800b304:	d102      	bne.n	800b30c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f80a 	bl	800b320 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4618      	mov	r0, r3
 800b312:	f005 fabc 	bl	801088e <USB_DevDisconnect>

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <HAL_PCDEx_ActivateLPM+0x44>)
 800b350:	4313      	orrs	r3, r2
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	10000003 	.word	0x10000003

0800b368 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b370:	4b29      	ldr	r3, [pc, #164]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	2b06      	cmp	r3, #6
 800b37a:	d00a      	beq.n	800b392 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b37c:	4b26      	ldr	r3, [pc, #152]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d001      	beq.n	800b38e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e040      	b.n	800b410 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	e03e      	b.n	800b410 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b392:	4b21      	ldr	r3, [pc, #132]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b39a:	491f      	ldr	r1, [pc, #124]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b3a2:	f7fc fcc5 	bl	8007d30 <HAL_GetTick>
 800b3a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3a8:	e009      	b.n	800b3be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b3aa:	f7fc fcc1 	bl	8007d30 <HAL_GetTick>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3b8:	d901      	bls.n	800b3be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e028      	b.n	800b410 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3be:	4b16      	ldr	r3, [pc, #88]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ca:	d1ee      	bne.n	800b3aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b1e      	cmp	r3, #30
 800b3d0:	d008      	beq.n	800b3e4 <HAL_PWREx_ConfigSupply+0x7c>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3d6:	d005      	beq.n	800b3e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b1d      	cmp	r3, #29
 800b3dc:	d002      	beq.n	800b3e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b2d      	cmp	r3, #45	; 0x2d
 800b3e2:	d114      	bne.n	800b40e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b3e4:	f7fc fca4 	bl	8007d30 <HAL_GetTick>
 800b3e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b3ea:	e009      	b.n	800b400 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b3ec:	f7fc fca0 	bl	8007d30 <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3fa:	d901      	bls.n	800b400 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e007      	b.n	800b410 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b400:	4b05      	ldr	r3, [pc, #20]	; (800b418 <HAL_PWREx_ConfigSupply+0xb0>)
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b40c:	d1ee      	bne.n	800b3ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	58024800 	.word	0x58024800

0800b41c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	4a04      	ldr	r2, [pc, #16]	; (800b438 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b42a:	60d3      	str	r3, [r2, #12]
}
 800b42c:	bf00      	nop
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	58024800 	.word	0x58024800

0800b43c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f000 bc1d 	b.w	800bc8a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 8087 	beq.w	800b56c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b45e:	4b99      	ldr	r3, [pc, #612]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b466:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b468:	4b96      	ldr	r3, [pc, #600]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	2b10      	cmp	r3, #16
 800b472:	d007      	beq.n	800b484 <HAL_RCC_OscConfig+0x48>
 800b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b476:	2b18      	cmp	r3, #24
 800b478:	d110      	bne.n	800b49c <HAL_RCC_OscConfig+0x60>
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	f003 0303 	and.w	r3, r3, #3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d10b      	bne.n	800b49c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b484:	4b8f      	ldr	r3, [pc, #572]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d06c      	beq.n	800b56a <HAL_RCC_OscConfig+0x12e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d168      	bne.n	800b56a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e3f6      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a4:	d106      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x78>
 800b4a6:	4b87      	ldr	r3, [pc, #540]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a86      	ldr	r2, [pc, #536]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	e02e      	b.n	800b512 <HAL_RCC_OscConfig+0xd6>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10c      	bne.n	800b4d6 <HAL_RCC_OscConfig+0x9a>
 800b4bc:	4b81      	ldr	r3, [pc, #516]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a80      	ldr	r2, [pc, #512]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	4b7e      	ldr	r3, [pc, #504]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a7d      	ldr	r2, [pc, #500]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	e01d      	b.n	800b512 <HAL_RCC_OscConfig+0xd6>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4de:	d10c      	bne.n	800b4fa <HAL_RCC_OscConfig+0xbe>
 800b4e0:	4b78      	ldr	r3, [pc, #480]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a77      	ldr	r2, [pc, #476]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	4b75      	ldr	r3, [pc, #468]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a74      	ldr	r2, [pc, #464]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	e00b      	b.n	800b512 <HAL_RCC_OscConfig+0xd6>
 800b4fa:	4b72      	ldr	r3, [pc, #456]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a71      	ldr	r2, [pc, #452]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	4b6f      	ldr	r3, [pc, #444]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a6e      	ldr	r2, [pc, #440]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b50c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d013      	beq.n	800b542 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51a:	f7fc fc09 	bl	8007d30 <HAL_GetTick>
 800b51e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b520:	e008      	b.n	800b534 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b522:	f7fc fc05 	bl	8007d30 <HAL_GetTick>
 800b526:	4602      	mov	r2, r0
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	2b64      	cmp	r3, #100	; 0x64
 800b52e:	d901      	bls.n	800b534 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e3aa      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b534:	4b63      	ldr	r3, [pc, #396]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0f0      	beq.n	800b522 <HAL_RCC_OscConfig+0xe6>
 800b540:	e014      	b.n	800b56c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b542:	f7fc fbf5 	bl	8007d30 <HAL_GetTick>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b548:	e008      	b.n	800b55c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b54a:	f7fc fbf1 	bl	8007d30 <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b64      	cmp	r3, #100	; 0x64
 800b556:	d901      	bls.n	800b55c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e396      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b55c:	4b59      	ldr	r3, [pc, #356]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1f0      	bne.n	800b54a <HAL_RCC_OscConfig+0x10e>
 800b568:	e000      	b.n	800b56c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b56a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80cb 	beq.w	800b710 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b57a:	4b52      	ldr	r3, [pc, #328]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b582:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b584:	4b4f      	ldr	r3, [pc, #316]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b588:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d007      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x164>
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	2b18      	cmp	r3, #24
 800b594:	d156      	bne.n	800b644 <HAL_RCC_OscConfig+0x208>
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d151      	bne.n	800b644 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5a0:	4b48      	ldr	r3, [pc, #288]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <HAL_RCC_OscConfig+0x17c>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e368      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5b8:	4b42      	ldr	r3, [pc, #264]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f023 0219 	bic.w	r2, r3, #25
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	493f      	ldr	r1, [pc, #252]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b5ca:	f7fc fbb1 	bl	8007d30 <HAL_GetTick>
 800b5ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5d2:	f7fc fbad 	bl	8007d30 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e352      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5e4:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f0      	beq.n	800b5d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5f0:	f7fc fbce 	bl	8007d90 <HAL_GetREVID>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f241 0203 	movw	r2, #4099	; 0x1003
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d817      	bhi.n	800b62e <HAL_RCC_OscConfig+0x1f2>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	2b40      	cmp	r3, #64	; 0x40
 800b604:	d108      	bne.n	800b618 <HAL_RCC_OscConfig+0x1dc>
 800b606:	4b2f      	ldr	r3, [pc, #188]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b60e:	4a2d      	ldr	r2, [pc, #180]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b614:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b616:	e07b      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b618:	4b2a      	ldr	r3, [pc, #168]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	031b      	lsls	r3, r3, #12
 800b626:	4927      	ldr	r1, [pc, #156]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b62c:	e070      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b62e:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	061b      	lsls	r3, r3, #24
 800b63c:	4921      	ldr	r1, [pc, #132]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b63e:	4313      	orrs	r3, r2
 800b640:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b642:	e065      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d048      	beq.n	800b6de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b64c:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f023 0219 	bic.w	r2, r3, #25
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	491a      	ldr	r1, [pc, #104]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b65e:	f7fc fb67 	bl	8007d30 <HAL_GetTick>
 800b662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b664:	e008      	b.n	800b678 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b666:	f7fc fb63 	bl	8007d30 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d901      	bls.n	800b678 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e308      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b678:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0f0      	beq.n	800b666 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b684:	f7fc fb84 	bl	8007d90 <HAL_GetREVID>
 800b688:	4603      	mov	r3, r0
 800b68a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b68e:	4293      	cmp	r3, r2
 800b690:	d81a      	bhi.n	800b6c8 <HAL_RCC_OscConfig+0x28c>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b40      	cmp	r3, #64	; 0x40
 800b698:	d108      	bne.n	800b6ac <HAL_RCC_OscConfig+0x270>
 800b69a:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b6a2:	4a08      	ldr	r2, [pc, #32]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b6a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a8:	6053      	str	r3, [r2, #4]
 800b6aa:	e031      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
 800b6ac:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	031b      	lsls	r3, r3, #12
 800b6ba:	4902      	ldr	r1, [pc, #8]	; (800b6c4 <HAL_RCC_OscConfig+0x288>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	e026      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
 800b6c2:	bf00      	nop
 800b6c4:	58024400 	.word	0x58024400
 800b6c8:	4b9a      	ldr	r3, [pc, #616]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	061b      	lsls	r3, r3, #24
 800b6d6:	4997      	ldr	r1, [pc, #604]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	604b      	str	r3, [r1, #4]
 800b6dc:	e018      	b.n	800b710 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6de:	4b95      	ldr	r3, [pc, #596]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a94      	ldr	r2, [pc, #592]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6ea:	f7fc fb21 	bl	8007d30 <HAL_GetTick>
 800b6ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b6f0:	e008      	b.n	800b704 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6f2:	f7fc fb1d 	bl	8007d30 <HAL_GetTick>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d901      	bls.n	800b704 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e2c2      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b704:	4b8b      	ldr	r3, [pc, #556]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 0304 	and.w	r3, r3, #4
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1f0      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0310 	and.w	r3, r3, #16
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80a9 	beq.w	800b870 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b71e:	4b85      	ldr	r3, [pc, #532]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b728:	4b82      	ldr	r3, [pc, #520]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d007      	beq.n	800b744 <HAL_RCC_OscConfig+0x308>
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2b18      	cmp	r3, #24
 800b738:	d13a      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x374>
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f003 0303 	and.w	r3, r3, #3
 800b740:	2b01      	cmp	r3, #1
 800b742:	d135      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b744:	4b7b      	ldr	r3, [pc, #492]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d005      	beq.n	800b75c <HAL_RCC_OscConfig+0x320>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	2b80      	cmp	r3, #128	; 0x80
 800b756:	d001      	beq.n	800b75c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e296      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b75c:	f7fc fb18 	bl	8007d90 <HAL_GetREVID>
 800b760:	4603      	mov	r3, r0
 800b762:	f241 0203 	movw	r2, #4099	; 0x1003
 800b766:	4293      	cmp	r3, r2
 800b768:	d817      	bhi.n	800b79a <HAL_RCC_OscConfig+0x35e>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	2b20      	cmp	r3, #32
 800b770:	d108      	bne.n	800b784 <HAL_RCC_OscConfig+0x348>
 800b772:	4b70      	ldr	r3, [pc, #448]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b77a:	4a6e      	ldr	r2, [pc, #440]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b77c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b780:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b782:	e075      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b784:	4b6b      	ldr	r3, [pc, #428]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	069b      	lsls	r3, r3, #26
 800b792:	4968      	ldr	r1, [pc, #416]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b794:	4313      	orrs	r3, r2
 800b796:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b798:	e06a      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b79a:	4b66      	ldr	r3, [pc, #408]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	061b      	lsls	r3, r3, #24
 800b7a8:	4962      	ldr	r1, [pc, #392]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7ae:	e05f      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d042      	beq.n	800b83e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b7b8:	4b5e      	ldr	r3, [pc, #376]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a5d      	ldr	r2, [pc, #372]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c4:	f7fc fab4 	bl	8007d30 <HAL_GetTick>
 800b7c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7ca:	e008      	b.n	800b7de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b7cc:	f7fc fab0 	bl	8007d30 <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e255      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7de:	4b55      	ldr	r3, [pc, #340]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d0f0      	beq.n	800b7cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7ea:	f7fc fad1 	bl	8007d90 <HAL_GetREVID>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d817      	bhi.n	800b828 <HAL_RCC_OscConfig+0x3ec>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d108      	bne.n	800b812 <HAL_RCC_OscConfig+0x3d6>
 800b800:	4b4c      	ldr	r3, [pc, #304]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b808:	4a4a      	ldr	r2, [pc, #296]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b80a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b80e:	6053      	str	r3, [r2, #4]
 800b810:	e02e      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
 800b812:	4b48      	ldr	r3, [pc, #288]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	069b      	lsls	r3, r3, #26
 800b820:	4944      	ldr	r1, [pc, #272]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b822:	4313      	orrs	r3, r2
 800b824:	604b      	str	r3, [r1, #4]
 800b826:	e023      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
 800b828:	4b42      	ldr	r3, [pc, #264]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	061b      	lsls	r3, r3, #24
 800b836:	493f      	ldr	r1, [pc, #252]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	60cb      	str	r3, [r1, #12]
 800b83c:	e018      	b.n	800b870 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b83e:	4b3d      	ldr	r3, [pc, #244]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a3c      	ldr	r2, [pc, #240]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b84a:	f7fc fa71 	bl	8007d30 <HAL_GetTick>
 800b84e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b850:	e008      	b.n	800b864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b852:	f7fc fa6d 	bl	8007d30 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e212      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b864:	4b33      	ldr	r3, [pc, #204]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1f0      	bne.n	800b852 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0308 	and.w	r3, r3, #8
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d036      	beq.n	800b8ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d019      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b884:	4b2b      	ldr	r3, [pc, #172]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b888:	4a2a      	ldr	r2, [pc, #168]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b890:	f7fc fa4e 	bl	8007d30 <HAL_GetTick>
 800b894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b896:	e008      	b.n	800b8aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b898:	f7fc fa4a 	bl	8007d30 <HAL_GetTick>
 800b89c:	4602      	mov	r2, r0
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d901      	bls.n	800b8aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e1ef      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b8aa:	4b22      	ldr	r3, [pc, #136]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ae:	f003 0302 	and.w	r3, r3, #2
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0f0      	beq.n	800b898 <HAL_RCC_OscConfig+0x45c>
 800b8b6:	e018      	b.n	800b8ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8b8:	4b1e      	ldr	r3, [pc, #120]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b8be:	f023 0301 	bic.w	r3, r3, #1
 800b8c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8c4:	f7fc fa34 	bl	8007d30 <HAL_GetTick>
 800b8c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b8ca:	e008      	b.n	800b8de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8cc:	f7fc fa30 	bl	8007d30 <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e1d5      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b8de:	4b15      	ldr	r3, [pc, #84]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b8e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1f0      	bne.n	800b8cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d039      	beq.n	800b96a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01c      	beq.n	800b938 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b90a:	f7fc fa11 	bl	8007d30 <HAL_GetTick>
 800b90e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b910:	e008      	b.n	800b924 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b912:	f7fc fa0d 	bl	8007d30 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e1b2      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b924:	4b03      	ldr	r3, [pc, #12]	; (800b934 <HAL_RCC_OscConfig+0x4f8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0f0      	beq.n	800b912 <HAL_RCC_OscConfig+0x4d6>
 800b930:	e01b      	b.n	800b96a <HAL_RCC_OscConfig+0x52e>
 800b932:	bf00      	nop
 800b934:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b938:	4b9b      	ldr	r3, [pc, #620]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a9a      	ldr	r2, [pc, #616]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b93e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b944:	f7fc f9f4 	bl	8007d30 <HAL_GetTick>
 800b948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b94a:	e008      	b.n	800b95e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b94c:	f7fc f9f0 	bl	8007d30 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b02      	cmp	r3, #2
 800b958:	d901      	bls.n	800b95e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e195      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b95e:	4b92      	ldr	r3, [pc, #584]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f0      	bne.n	800b94c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 8081 	beq.w	800ba7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b978:	4b8c      	ldr	r3, [pc, #560]	; (800bbac <HAL_RCC_OscConfig+0x770>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a8b      	ldr	r2, [pc, #556]	; (800bbac <HAL_RCC_OscConfig+0x770>)
 800b97e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b984:	f7fc f9d4 	bl	8007d30 <HAL_GetTick>
 800b988:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b98a:	e008      	b.n	800b99e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b98c:	f7fc f9d0 	bl	8007d30 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	2b64      	cmp	r3, #100	; 0x64
 800b998:	d901      	bls.n	800b99e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e175      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b99e:	4b83      	ldr	r3, [pc, #524]	; (800bbac <HAL_RCC_OscConfig+0x770>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f0      	beq.n	800b98c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d106      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x584>
 800b9b2:	4b7d      	ldr	r3, [pc, #500]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b6:	4a7c      	ldr	r2, [pc, #496]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9b8:	f043 0301 	orr.w	r3, r3, #1
 800b9bc:	6713      	str	r3, [r2, #112]	; 0x70
 800b9be:	e02d      	b.n	800ba1c <HAL_RCC_OscConfig+0x5e0>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10c      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x5a6>
 800b9c8:	4b77      	ldr	r3, [pc, #476]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9cc:	4a76      	ldr	r2, [pc, #472]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	6713      	str	r3, [r2, #112]	; 0x70
 800b9d4:	4b74      	ldr	r3, [pc, #464]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d8:	4a73      	ldr	r2, [pc, #460]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9da:	f023 0304 	bic.w	r3, r3, #4
 800b9de:	6713      	str	r3, [r2, #112]	; 0x70
 800b9e0:	e01c      	b.n	800ba1c <HAL_RCC_OscConfig+0x5e0>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	2b05      	cmp	r3, #5
 800b9e8:	d10c      	bne.n	800ba04 <HAL_RCC_OscConfig+0x5c8>
 800b9ea:	4b6f      	ldr	r3, [pc, #444]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ee:	4a6e      	ldr	r2, [pc, #440]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9f0:	f043 0304 	orr.w	r3, r3, #4
 800b9f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b9f6:	4b6c      	ldr	r3, [pc, #432]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9fa:	4a6b      	ldr	r2, [pc, #428]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800b9fc:	f043 0301 	orr.w	r3, r3, #1
 800ba00:	6713      	str	r3, [r2, #112]	; 0x70
 800ba02:	e00b      	b.n	800ba1c <HAL_RCC_OscConfig+0x5e0>
 800ba04:	4b68      	ldr	r3, [pc, #416]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba08:	4a67      	ldr	r2, [pc, #412]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba0a:	f023 0301 	bic.w	r3, r3, #1
 800ba0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba10:	4b65      	ldr	r3, [pc, #404]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba14:	4a64      	ldr	r2, [pc, #400]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba16:	f023 0304 	bic.w	r3, r3, #4
 800ba1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d015      	beq.n	800ba50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba24:	f7fc f984 	bl	8007d30 <HAL_GetTick>
 800ba28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba2a:	e00a      	b.n	800ba42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba2c:	f7fc f980 	bl	8007d30 <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d901      	bls.n	800ba42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e123      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba42:	4b59      	ldr	r3, [pc, #356]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d0ee      	beq.n	800ba2c <HAL_RCC_OscConfig+0x5f0>
 800ba4e:	e014      	b.n	800ba7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba50:	f7fc f96e 	bl	8007d30 <HAL_GetTick>
 800ba54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba56:	e00a      	b.n	800ba6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba58:	f7fc f96a 	bl	8007d30 <HAL_GetTick>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d901      	bls.n	800ba6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e10d      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba6e:	4b4e      	ldr	r3, [pc, #312]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1ee      	bne.n	800ba58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 8102 	beq.w	800bc88 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ba84:	4b48      	ldr	r3, [pc, #288]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba8c:	2b18      	cmp	r3, #24
 800ba8e:	f000 80bd 	beq.w	800bc0c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	f040 809e 	bne.w	800bbd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba9c:	4b42      	ldr	r3, [pc, #264]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a41      	ldr	r2, [pc, #260]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800baa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800baa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baa8:	f7fc f942 	bl	8007d30 <HAL_GetTick>
 800baac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bab0:	f7fc f93e 	bl	8007d30 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b02      	cmp	r3, #2
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e0e3      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bac2:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1f0      	bne.n	800bab0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bace:	4b36      	ldr	r3, [pc, #216]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bad2:	4b37      	ldr	r3, [pc, #220]	; (800bbb0 <HAL_RCC_OscConfig+0x774>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bade:	0112      	lsls	r2, r2, #4
 800bae0:	430a      	orrs	r2, r1
 800bae2:	4931      	ldr	r1, [pc, #196]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	628b      	str	r3, [r1, #40]	; 0x28
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	3b01      	subs	r3, #1
 800baee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	3b01      	subs	r3, #1
 800baf8:	025b      	lsls	r3, r3, #9
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb02:	3b01      	subs	r3, #1
 800bb04:	041b      	lsls	r3, r3, #16
 800bb06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb10:	3b01      	subs	r3, #1
 800bb12:	061b      	lsls	r3, r3, #24
 800bb14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb18:	4923      	ldr	r1, [pc, #140]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800bb1e:	4b22      	ldr	r3, [pc, #136]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	4a21      	ldr	r2, [pc, #132]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb2a:	4b1f      	ldr	r3, [pc, #124]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb2e:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <HAL_RCC_OscConfig+0x778>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb36:	00d2      	lsls	r2, r2, #3
 800bb38:	491b      	ldr	r1, [pc, #108]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	f023 020c 	bic.w	r2, r3, #12
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4a:	4917      	ldr	r1, [pc, #92]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bb50:	4b15      	ldr	r3, [pc, #84]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	f023 0202 	bic.w	r2, r3, #2
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5c:	4912      	ldr	r1, [pc, #72]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb62:	4b11      	ldr	r3, [pc, #68]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb66:	4a10      	ldr	r2, [pc, #64]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb6e:	4b0e      	ldr	r3, [pc, #56]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb72:	4a0d      	ldr	r2, [pc, #52]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bb7a:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	4a0a      	ldr	r2, [pc, #40]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bb86:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	4a07      	ldr	r2, [pc, #28]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb8c:	f043 0301 	orr.w	r3, r3, #1
 800bb90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a04      	ldr	r2, [pc, #16]	; (800bba8 <HAL_RCC_OscConfig+0x76c>)
 800bb98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb9e:	f7fc f8c7 	bl	8007d30 <HAL_GetTick>
 800bba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bba4:	e011      	b.n	800bbca <HAL_RCC_OscConfig+0x78e>
 800bba6:	bf00      	nop
 800bba8:	58024400 	.word	0x58024400
 800bbac:	58024800 	.word	0x58024800
 800bbb0:	fffffc0c 	.word	0xfffffc0c
 800bbb4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbb8:	f7fc f8ba 	bl	8007d30 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d901      	bls.n	800bbca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e05f      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbca:	4b32      	ldr	r3, [pc, #200]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0f0      	beq.n	800bbb8 <HAL_RCC_OscConfig+0x77c>
 800bbd6:	e057      	b.n	800bc88 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbd8:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a2d      	ldr	r2, [pc, #180]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bbde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe4:	f7fc f8a4 	bl	8007d30 <HAL_GetTick>
 800bbe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbea:	e008      	b.n	800bbfe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbec:	f7fc f8a0 	bl	8007d30 <HAL_GetTick>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d901      	bls.n	800bbfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e045      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbfe:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1f0      	bne.n	800bbec <HAL_RCC_OscConfig+0x7b0>
 800bc0a:	e03d      	b.n	800bc88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bc0c:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bc12:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <HAL_RCC_OscConfig+0x858>)
 800bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d031      	beq.n	800bc84 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f003 0203 	and.w	r2, r3, #3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d12a      	bne.n	800bc84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	091b      	lsrs	r3, r3, #4
 800bc32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d122      	bne.n	800bc84 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d11a      	bne.n	800bc84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	0a5b      	lsrs	r3, r3, #9
 800bc52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d111      	bne.n	800bc84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	0c1b      	lsrs	r3, r3, #16
 800bc64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d108      	bne.n	800bc84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	0e1b      	lsrs	r3, r3, #24
 800bc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d001      	beq.n	800bc88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3730      	adds	r7, #48	; 0x30
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	58024400 	.word	0x58024400

0800bc98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e19c      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcac:	4b8a      	ldr	r3, [pc, #552]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 030f 	and.w	r3, r3, #15
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d910      	bls.n	800bcdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcba:	4b87      	ldr	r3, [pc, #540]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f023 020f 	bic.w	r2, r3, #15
 800bcc2:	4985      	ldr	r1, [pc, #532]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcca:	4b83      	ldr	r3, [pc, #524]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 030f 	and.w	r3, r3, #15
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d001      	beq.n	800bcdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e184      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d010      	beq.n	800bd0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691a      	ldr	r2, [r3, #16]
 800bcec:	4b7b      	ldr	r3, [pc, #492]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d908      	bls.n	800bd0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcf8:	4b78      	ldr	r3, [pc, #480]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	4975      	ldr	r1, [pc, #468]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 0308 	and.w	r3, r3, #8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695a      	ldr	r2, [r3, #20]
 800bd1a:	4b70      	ldr	r3, [pc, #448]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d908      	bls.n	800bd38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd26:	4b6d      	ldr	r3, [pc, #436]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	496a      	ldr	r1, [pc, #424]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	699a      	ldr	r2, [r3, #24]
 800bd48:	4b64      	ldr	r3, [pc, #400]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d908      	bls.n	800bd66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd54:	4b61      	ldr	r3, [pc, #388]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	495e      	ldr	r1, [pc, #376]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd62:	4313      	orrs	r3, r2
 800bd64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69da      	ldr	r2, [r3, #28]
 800bd76:	4b59      	ldr	r3, [pc, #356]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d908      	bls.n	800bd94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bd82:	4b56      	ldr	r3, [pc, #344]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	4953      	ldr	r1, [pc, #332]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0302 	and.w	r3, r3, #2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d010      	beq.n	800bdc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	4b4d      	ldr	r3, [pc, #308]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	f003 030f 	and.w	r3, r3, #15
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d908      	bls.n	800bdc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdb0:	4b4a      	ldr	r3, [pc, #296]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	f023 020f 	bic.w	r2, r3, #15
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	4947      	ldr	r1, [pc, #284]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d055      	beq.n	800be7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bdce:	4b43      	ldr	r3, [pc, #268]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	4940      	ldr	r1, [pc, #256]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d107      	bne.n	800bdf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bde8:	4b3c      	ldr	r3, [pc, #240]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d121      	bne.n	800be38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e0f6      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d107      	bne.n	800be10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be00:	4b36      	ldr	r3, [pc, #216]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d115      	bne.n	800be38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e0ea      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d107      	bne.n	800be28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be18:	4b30      	ldr	r3, [pc, #192]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be20:	2b00      	cmp	r3, #0
 800be22:	d109      	bne.n	800be38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e0de      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be28:	4b2c      	ldr	r3, [pc, #176]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0304 	and.w	r3, r3, #4
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	e0d6      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be38:	4b28      	ldr	r3, [pc, #160]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	f023 0207 	bic.w	r2, r3, #7
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	4925      	ldr	r1, [pc, #148]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be46:	4313      	orrs	r3, r2
 800be48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be4a:	f7fb ff71 	bl	8007d30 <HAL_GetTick>
 800be4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be50:	e00a      	b.n	800be68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be52:	f7fb ff6d 	bl	8007d30 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be60:	4293      	cmp	r3, r2
 800be62:	d901      	bls.n	800be68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e0be      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be68:	4b1c      	ldr	r3, [pc, #112]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	429a      	cmp	r2, r3
 800be78:	d1eb      	bne.n	800be52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	d010      	beq.n	800bea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68da      	ldr	r2, [r3, #12]
 800be8a:	4b14      	ldr	r3, [pc, #80]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	f003 030f 	and.w	r3, r3, #15
 800be92:	429a      	cmp	r2, r3
 800be94:	d208      	bcs.n	800bea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	f023 020f 	bic.w	r2, r3, #15
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	490e      	ldr	r1, [pc, #56]	; (800bedc <HAL_RCC_ClockConfig+0x244>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bea8:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 030f 	and.w	r3, r3, #15
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d214      	bcs.n	800bee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beb6:	4b08      	ldr	r3, [pc, #32]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f023 020f 	bic.w	r2, r3, #15
 800bebe:	4906      	ldr	r1, [pc, #24]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bec6:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <HAL_RCC_ClockConfig+0x240>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d005      	beq.n	800bee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e086      	b.n	800bfe6 <HAL_RCC_ClockConfig+0x34e>
 800bed8:	52002000 	.word	0x52002000
 800bedc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d010      	beq.n	800bf0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	691a      	ldr	r2, [r3, #16]
 800bef0:	4b3f      	ldr	r3, [pc, #252]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bef8:	429a      	cmp	r2, r3
 800befa:	d208      	bcs.n	800bf0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800befc:	4b3c      	ldr	r3, [pc, #240]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	4939      	ldr	r1, [pc, #228]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d010      	beq.n	800bf3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	695a      	ldr	r2, [r3, #20]
 800bf1e:	4b34      	ldr	r3, [pc, #208]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf20:	69db      	ldr	r3, [r3, #28]
 800bf22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d208      	bcs.n	800bf3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf2a:	4b31      	ldr	r3, [pc, #196]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	492e      	ldr	r1, [pc, #184]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d010      	beq.n	800bf6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	699a      	ldr	r2, [r3, #24]
 800bf4c:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d208      	bcs.n	800bf6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf58:	4b25      	ldr	r3, [pc, #148]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	4922      	ldr	r1, [pc, #136]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d010      	beq.n	800bf98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	69da      	ldr	r2, [r3, #28]
 800bf7a:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d208      	bcs.n	800bf98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bf86:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	4917      	ldr	r1, [pc, #92]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bf98:	f000 f834 	bl	800c004 <HAL_RCC_GetSysClockFreq>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	4b14      	ldr	r3, [pc, #80]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	0a1b      	lsrs	r3, r3, #8
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	4912      	ldr	r1, [pc, #72]	; (800bff4 <HAL_RCC_ClockConfig+0x35c>)
 800bfaa:	5ccb      	ldrb	r3, [r1, r3]
 800bfac:	f003 031f 	and.w	r3, r3, #31
 800bfb0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfb6:	4b0e      	ldr	r3, [pc, #56]	; (800bff0 <HAL_RCC_ClockConfig+0x358>)
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <HAL_RCC_ClockConfig+0x35c>)
 800bfc0:	5cd3      	ldrb	r3, [r2, r3]
 800bfc2:	f003 031f 	and.w	r3, r3, #31
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfcc:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <HAL_RCC_ClockConfig+0x360>)
 800bfce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bfd0:	4a0a      	ldr	r2, [pc, #40]	; (800bffc <HAL_RCC_ClockConfig+0x364>)
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <HAL_RCC_ClockConfig+0x368>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fb fe5e 	bl	8007c9c <HAL_InitTick>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	58024400 	.word	0x58024400
 800bff4:	08011734 	.word	0x08011734
 800bff8:	24000008 	.word	0x24000008
 800bffc:	24000004 	.word	0x24000004
 800c000:	2400001c 	.word	0x2400001c

0800c004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c004:	b480      	push	{r7}
 800c006:	b089      	sub	sp, #36	; 0x24
 800c008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c00a:	4bb3      	ldr	r3, [pc, #716]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c012:	2b18      	cmp	r3, #24
 800c014:	f200 8155 	bhi.w	800c2c2 <HAL_RCC_GetSysClockFreq+0x2be>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c085 	.word	0x0800c085
 800c024:	0800c2c3 	.word	0x0800c2c3
 800c028:	0800c2c3 	.word	0x0800c2c3
 800c02c:	0800c2c3 	.word	0x0800c2c3
 800c030:	0800c2c3 	.word	0x0800c2c3
 800c034:	0800c2c3 	.word	0x0800c2c3
 800c038:	0800c2c3 	.word	0x0800c2c3
 800c03c:	0800c2c3 	.word	0x0800c2c3
 800c040:	0800c0ab 	.word	0x0800c0ab
 800c044:	0800c2c3 	.word	0x0800c2c3
 800c048:	0800c2c3 	.word	0x0800c2c3
 800c04c:	0800c2c3 	.word	0x0800c2c3
 800c050:	0800c2c3 	.word	0x0800c2c3
 800c054:	0800c2c3 	.word	0x0800c2c3
 800c058:	0800c2c3 	.word	0x0800c2c3
 800c05c:	0800c2c3 	.word	0x0800c2c3
 800c060:	0800c0b1 	.word	0x0800c0b1
 800c064:	0800c2c3 	.word	0x0800c2c3
 800c068:	0800c2c3 	.word	0x0800c2c3
 800c06c:	0800c2c3 	.word	0x0800c2c3
 800c070:	0800c2c3 	.word	0x0800c2c3
 800c074:	0800c2c3 	.word	0x0800c2c3
 800c078:	0800c2c3 	.word	0x0800c2c3
 800c07c:	0800c2c3 	.word	0x0800c2c3
 800c080:	0800c0b7 	.word	0x0800c0b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c084:	4b94      	ldr	r3, [pc, #592]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c090:	4b91      	ldr	r3, [pc, #580]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	08db      	lsrs	r3, r3, #3
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	4a90      	ldr	r2, [pc, #576]	; (800c2dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c09c:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c0a2:	e111      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c0a4:	4b8d      	ldr	r3, [pc, #564]	; (800c2dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0a6:	61bb      	str	r3, [r7, #24]
    break;
 800c0a8:	e10e      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c0aa:	4b8d      	ldr	r3, [pc, #564]	; (800c2e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0ac:	61bb      	str	r3, [r7, #24]
    break;
 800c0ae:	e10b      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c0b0:	4b8c      	ldr	r3, [pc, #560]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c0b2:	61bb      	str	r3, [r7, #24]
    break;
 800c0b4:	e108      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0b6:	4b88      	ldr	r3, [pc, #544]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c0c0:	4b85      	ldr	r3, [pc, #532]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c4:	091b      	lsrs	r3, r3, #4
 800c0c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c0cc:	4b82      	ldr	r3, [pc, #520]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c0d6:	4b80      	ldr	r3, [pc, #512]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0da:	08db      	lsrs	r3, r3, #3
 800c0dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	fb02 f303 	mul.w	r3, r2, r3
 800c0e6:	ee07 3a90 	vmov	s15, r3
 800c0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f000 80e1 	beq.w	800c2bc <HAL_RCC_GetSysClockFreq+0x2b8>
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	f000 8083 	beq.w	800c208 <HAL_RCC_GetSysClockFreq+0x204>
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b02      	cmp	r3, #2
 800c106:	f200 80a1 	bhi.w	800c24c <HAL_RCC_GetSysClockFreq+0x248>
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <HAL_RCC_GetSysClockFreq+0x114>
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d056      	beq.n	800c1c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c116:	e099      	b.n	800c24c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c118:	4b6f      	ldr	r3, [pc, #444]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 0320 	and.w	r3, r3, #32
 800c120:	2b00      	cmp	r3, #0
 800c122:	d02d      	beq.n	800c180 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c124:	4b6c      	ldr	r3, [pc, #432]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	08db      	lsrs	r3, r3, #3
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	4a6b      	ldr	r2, [pc, #428]	; (800c2dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c130:	fa22 f303 	lsr.w	r3, r2, r3
 800c134:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	ee07 3a90 	vmov	s15, r3
 800c13c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c14e:	4b62      	ldr	r3, [pc, #392]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c162:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c2e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c17e:	e087      	b.n	800c290 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	ee07 3a90 	vmov	s15, r3
 800c186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c2ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800c18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c192:	4b51      	ldr	r3, [pc, #324]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19a:	ee07 3a90 	vmov	s15, r3
 800c19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c2e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1c2:	e065      	b.n	800c290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	ee07 3a90 	vmov	s15, r3
 800c1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c2f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d6:	4b40      	ldr	r3, [pc, #256]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c2e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c206:	e043      	b.n	800c290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c212:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c2f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21a:	4b2f      	ldr	r3, [pc, #188]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c22e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c2e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c24a:	e021      	b.n	800c290 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c256:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c2f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25e:	4b1e      	ldr	r3, [pc, #120]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c2e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c28e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c290:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c294:	0a5b      	lsrs	r3, r3, #9
 800c296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c29a:	3301      	adds	r3, #1
 800c29c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	ee07 3a90 	vmov	s15, r3
 800c2a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b4:	ee17 3a90 	vmov	r3, s15
 800c2b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c2ba:	e005      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61bb      	str	r3, [r7, #24]
    break;
 800c2c0:	e002      	b.n	800c2c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2c4:	61bb      	str	r3, [r7, #24]
    break;
 800c2c6:	bf00      	nop
  }

  return sysclockfreq;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3724      	adds	r7, #36	; 0x24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	58024400 	.word	0x58024400
 800c2dc:	03d09000 	.word	0x03d09000
 800c2e0:	003d0900 	.word	0x003d0900
 800c2e4:	007a1200 	.word	0x007a1200
 800c2e8:	46000000 	.word	0x46000000
 800c2ec:	4c742400 	.word	0x4c742400
 800c2f0:	4a742400 	.word	0x4a742400
 800c2f4:	4af42400 	.word	0x4af42400

0800c2f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c2fe:	f7ff fe81 	bl	800c004 <HAL_RCC_GetSysClockFreq>
 800c302:	4602      	mov	r2, r0
 800c304:	4b10      	ldr	r3, [pc, #64]	; (800c348 <HAL_RCC_GetHCLKFreq+0x50>)
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	0a1b      	lsrs	r3, r3, #8
 800c30a:	f003 030f 	and.w	r3, r3, #15
 800c30e:	490f      	ldr	r1, [pc, #60]	; (800c34c <HAL_RCC_GetHCLKFreq+0x54>)
 800c310:	5ccb      	ldrb	r3, [r1, r3]
 800c312:	f003 031f 	and.w	r3, r3, #31
 800c316:	fa22 f303 	lsr.w	r3, r2, r3
 800c31a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <HAL_RCC_GetHCLKFreq+0x50>)
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	f003 030f 	and.w	r3, r3, #15
 800c324:	4a09      	ldr	r2, [pc, #36]	; (800c34c <HAL_RCC_GetHCLKFreq+0x54>)
 800c326:	5cd3      	ldrb	r3, [r2, r3]
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	fa22 f303 	lsr.w	r3, r2, r3
 800c332:	4a07      	ldr	r2, [pc, #28]	; (800c350 <HAL_RCC_GetHCLKFreq+0x58>)
 800c334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c336:	4a07      	ldr	r2, [pc, #28]	; (800c354 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <HAL_RCC_GetHCLKFreq+0x58>)
 800c33e:	681b      	ldr	r3, [r3, #0]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	58024400 	.word	0x58024400
 800c34c:	08011734 	.word	0x08011734
 800c350:	24000008 	.word	0x24000008
 800c354:	24000004 	.word	0x24000004

0800c358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c35c:	f7ff ffcc 	bl	800c2f8 <HAL_RCC_GetHCLKFreq>
 800c360:	4602      	mov	r2, r0
 800c362:	4b06      	ldr	r3, [pc, #24]	; (800c37c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	091b      	lsrs	r3, r3, #4
 800c368:	f003 0307 	and.w	r3, r3, #7
 800c36c:	4904      	ldr	r1, [pc, #16]	; (800c380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c36e:	5ccb      	ldrb	r3, [r1, r3]
 800c370:	f003 031f 	and.w	r3, r3, #31
 800c374:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c378:	4618      	mov	r0, r3
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	58024400 	.word	0x58024400
 800c380:	08011734 	.word	0x08011734

0800c384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c388:	f7ff ffb6 	bl	800c2f8 <HAL_RCC_GetHCLKFreq>
 800c38c:	4602      	mov	r2, r0
 800c38e:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	0a1b      	lsrs	r3, r3, #8
 800c394:	f003 0307 	and.w	r3, r3, #7
 800c398:	4904      	ldr	r1, [pc, #16]	; (800c3ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800c39a:	5ccb      	ldrb	r3, [r1, r3]
 800c39c:	f003 031f 	and.w	r3, r3, #31
 800c3a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	58024400 	.word	0x58024400
 800c3ac:	08011734 	.word	0x08011734

0800c3b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3bc:	2300      	movs	r3, #0
 800c3be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d03f      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3d4:	d02a      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c3d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3da:	d824      	bhi.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c3dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3e0:	d018      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c3e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3e6:	d81e      	bhi.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c3ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f0:	d007      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c3f2:	e018      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3f4:	4ba3      	ldr	r3, [pc, #652]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	4aa2      	ldr	r2, [pc, #648]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c400:	e015      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	3304      	adds	r3, #4
 800c406:	2102      	movs	r1, #2
 800c408:	4618      	mov	r0, r3
 800c40a:	f001 f9d5 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c40e:	4603      	mov	r3, r0
 800c410:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c412:	e00c      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3324      	adds	r3, #36	; 0x24
 800c418:	2102      	movs	r1, #2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f001 fa7e 	bl	800d91c <RCCEx_PLL3_Config>
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c424:	e003      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	75fb      	strb	r3, [r7, #23]
      break;
 800c42a:	e000      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c42c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c434:	4b93      	ldr	r3, [pc, #588]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c440:	4990      	ldr	r1, [pc, #576]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c442:	4313      	orrs	r3, r2
 800c444:	650b      	str	r3, [r1, #80]	; 0x50
 800c446:	e001      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c454:	2b00      	cmp	r3, #0
 800c456:	d03d      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d826      	bhi.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c460:	a201      	add	r2, pc, #4	; (adr r2, 800c468 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c466:	bf00      	nop
 800c468:	0800c47d 	.word	0x0800c47d
 800c46c:	0800c48b 	.word	0x0800c48b
 800c470:	0800c49d 	.word	0x0800c49d
 800c474:	0800c4b5 	.word	0x0800c4b5
 800c478:	0800c4b5 	.word	0x0800c4b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c47c:	4b81      	ldr	r3, [pc, #516]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c480:	4a80      	ldr	r2, [pc, #512]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c488:	e015      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3304      	adds	r3, #4
 800c48e:	2100      	movs	r1, #0
 800c490:	4618      	mov	r0, r3
 800c492:	f001 f991 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c496:	4603      	mov	r3, r0
 800c498:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c49a:	e00c      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3324      	adds	r3, #36	; 0x24
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f001 fa3a 	bl	800d91c <RCCEx_PLL3_Config>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4ac:	e003      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c4b2:	e000      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c4b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c4bc:	4b71      	ldr	r3, [pc, #452]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c0:	f023 0207 	bic.w	r2, r3, #7
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c8:	496e      	ldr	r1, [pc, #440]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	650b      	str	r3, [r1, #80]	; 0x50
 800c4ce:	e001      	b.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d042      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4e8:	d02b      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ee:	d825      	bhi.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c4f0:	2bc0      	cmp	r3, #192	; 0xc0
 800c4f2:	d028      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c4f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c4f6:	d821      	bhi.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c4f8:	2b80      	cmp	r3, #128	; 0x80
 800c4fa:	d016      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c4fc:	2b80      	cmp	r3, #128	; 0x80
 800c4fe:	d81d      	bhi.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c504:	2b40      	cmp	r3, #64	; 0x40
 800c506:	d007      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c508:	e018      	b.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c50a:	4b5e      	ldr	r3, [pc, #376]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	4a5d      	ldr	r2, [pc, #372]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c514:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c516:	e017      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3304      	adds	r3, #4
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f001 f94a 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c524:	4603      	mov	r3, r0
 800c526:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c528:	e00e      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3324      	adds	r3, #36	; 0x24
 800c52e:	2100      	movs	r1, #0
 800c530:	4618      	mov	r0, r3
 800c532:	f001 f9f3 	bl	800d91c <RCCEx_PLL3_Config>
 800c536:	4603      	mov	r3, r0
 800c538:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c53a:	e005      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	75fb      	strb	r3, [r7, #23]
      break;
 800c540:	e002      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c542:	bf00      	nop
 800c544:	e000      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c546:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d109      	bne.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c54e:	4b4d      	ldr	r3, [pc, #308]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c552:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55a:	494a      	ldr	r1, [pc, #296]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c55c:	4313      	orrs	r3, r2
 800c55e:	650b      	str	r3, [r1, #80]	; 0x50
 800c560:	e001      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d049      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c57c:	d030      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c57e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c582:	d82a      	bhi.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c584:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c588:	d02c      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c58a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c58e:	d824      	bhi.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c594:	d018      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c59a:	d81e      	bhi.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c5a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5a4:	d007      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c5a6:	e018      	b.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5a8:	4b36      	ldr	r3, [pc, #216]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	4a35      	ldr	r2, [pc, #212]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5b4:	e017      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f001 f8fb 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c5c6:	e00e      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3324      	adds	r3, #36	; 0x24
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f001 f9a4 	bl	800d91c <RCCEx_PLL3_Config>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5d8:	e005      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c5de:	e002      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c5e0:	bf00      	nop
 800c5e2:	e000      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c5e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c5ec:	4b25      	ldr	r3, [pc, #148]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5fa:	4922      	ldr	r1, [pc, #136]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	658b      	str	r3, [r1, #88]	; 0x58
 800c600:	e001      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d04b      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c61c:	d030      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c61e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c622:	d82a      	bhi.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c628:	d02e      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c62a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c62e:	d824      	bhi.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c634:	d018      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c63a:	d81e      	bhi.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d003      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c644:	d007      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c646:	e018      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c648:	4b0e      	ldr	r3, [pc, #56]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	4a0d      	ldr	r2, [pc, #52]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c654:	e019      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3304      	adds	r3, #4
 800c65a:	2100      	movs	r1, #0
 800c65c:	4618      	mov	r0, r3
 800c65e:	f001 f8ab 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c662:	4603      	mov	r3, r0
 800c664:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c666:	e010      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3324      	adds	r3, #36	; 0x24
 800c66c:	2100      	movs	r1, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f001 f954 	bl	800d91c <RCCEx_PLL3_Config>
 800c674:	4603      	mov	r3, r0
 800c676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c678:	e007      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	75fb      	strb	r3, [r7, #23]
      break;
 800c67e:	e004      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c680:	bf00      	nop
 800c682:	e002      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c684:	58024400 	.word	0x58024400
      break;
 800c688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10a      	bne.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c690:	4b99      	ldr	r3, [pc, #612]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c694:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c69e:	4996      	ldr	r1, [pc, #600]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	658b      	str	r3, [r1, #88]	; 0x58
 800c6a4:	e001      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d032      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ba:	2b30      	cmp	r3, #48	; 0x30
 800c6bc:	d01c      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c6be:	2b30      	cmp	r3, #48	; 0x30
 800c6c0:	d817      	bhi.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	d00c      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c6c6:	2b20      	cmp	r3, #32
 800c6c8:	d813      	bhi.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d016      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c6ce:	2b10      	cmp	r3, #16
 800c6d0:	d10f      	bne.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6d2:	4b89      	ldr	r3, [pc, #548]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d6:	4a88      	ldr	r2, [pc, #544]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c6de:	e00e      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 f866 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c6f0:	e005      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800c6f6:	e002      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c6f8:	bf00      	nop
 800c6fa:	e000      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c6fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c704:	4b7c      	ldr	r3, [pc, #496]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c708:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c710:	4979      	ldr	r1, [pc, #484]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c712:	4313      	orrs	r3, r2
 800c714:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c716:	e001      	b.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d047      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c730:	d030      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c736:	d82a      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c73c:	d02c      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c73e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c742:	d824      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c748:	d018      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c74e:	d81e      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c758:	d007      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c75a:	e018      	b.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c75c:	4b66      	ldr	r3, [pc, #408]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	4a65      	ldr	r2, [pc, #404]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c768:	e017      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	3304      	adds	r3, #4
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f001 f821 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c77a:	e00e      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3324      	adds	r3, #36	; 0x24
 800c780:	2100      	movs	r1, #0
 800c782:	4618      	mov	r0, r3
 800c784:	f001 f8ca 	bl	800d91c <RCCEx_PLL3_Config>
 800c788:	4603      	mov	r3, r0
 800c78a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c78c:	e005      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]
      break;
 800c792:	e002      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d109      	bne.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c7a0:	4b55      	ldr	r3, [pc, #340]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ac:	4952      	ldr	r1, [pc, #328]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	650b      	str	r3, [r1, #80]	; 0x50
 800c7b2:	e001      	b.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d049      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7cc:	d02e      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c7ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7d2:	d828      	bhi.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c7d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7d8:	d02a      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c7da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7de:	d822      	bhi.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c7e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7e4:	d026      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c7e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7ea:	d81c      	bhi.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c7ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7f0:	d010      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c7f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7f6:	d816      	bhi.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01d      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c800:	d111      	bne.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	3304      	adds	r3, #4
 800c806:	2101      	movs	r1, #1
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 ffd5 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c80e:	4603      	mov	r3, r0
 800c810:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c812:	e012      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3324      	adds	r3, #36	; 0x24
 800c818:	2101      	movs	r1, #1
 800c81a:	4618      	mov	r0, r3
 800c81c:	f001 f87e 	bl	800d91c <RCCEx_PLL3_Config>
 800c820:	4603      	mov	r3, r0
 800c822:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c824:	e009      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	75fb      	strb	r3, [r7, #23]
      break;
 800c82a:	e006      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c82c:	bf00      	nop
 800c82e:	e004      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c830:	bf00      	nop
 800c832:	e002      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c834:	bf00      	nop
 800c836:	e000      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d109      	bne.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c840:	4b2d      	ldr	r3, [pc, #180]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c844:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c84c:	492a      	ldr	r1, [pc, #168]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	650b      	str	r3, [r1, #80]	; 0x50
 800c852:	e001      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d04d      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c86a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c86e:	d02e      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c874:	d828      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c87a:	d02a      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c87c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c880:	d822      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c886:	d026      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c88c:	d81c      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c892:	d010      	beq.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c898:	d816      	bhi.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01d      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c89e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8a2:	d111      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 ff84 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c8b4:	e012      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	3324      	adds	r3, #36	; 0x24
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f001 f82d 	bl	800d91c <RCCEx_PLL3_Config>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c8c6:	e009      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	75fb      	strb	r3, [r7, #23]
      break;
 800c8cc:	e006      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c8ce:	bf00      	nop
 800c8d0:	e004      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c8d2:	bf00      	nop
 800c8d4:	e002      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c8d6:	bf00      	nop
 800c8d8:	e000      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c8da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10c      	bne.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8f0:	4901      	ldr	r1, [pc, #4]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	658b      	str	r3, [r1, #88]	; 0x58
 800c8f6:	e003      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c8f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d02f      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c914:	d00e      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c91a:	d814      	bhi.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d015      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c924:	d10f      	bne.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c926:	4baf      	ldr	r3, [pc, #700]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92a:	4aae      	ldr	r2, [pc, #696]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c92c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c932:	e00c      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3304      	adds	r3, #4
 800c938:	2101      	movs	r1, #1
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 ff3c 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c940:	4603      	mov	r3, r0
 800c942:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c944:	e003      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	75fb      	strb	r3, [r7, #23]
      break;
 800c94a:	e000      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c94c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d109      	bne.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c954:	4ba3      	ldr	r3, [pc, #652]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c958:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c960:	49a0      	ldr	r1, [pc, #640]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c962:	4313      	orrs	r3, r2
 800c964:	650b      	str	r3, [r1, #80]	; 0x50
 800c966:	e001      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d032      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d81b      	bhi.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c980:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c986:	bf00      	nop
 800c988:	0800c9bf 	.word	0x0800c9bf
 800c98c:	0800c999 	.word	0x0800c999
 800c990:	0800c9a7 	.word	0x0800c9a7
 800c994:	0800c9bf 	.word	0x0800c9bf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c998:	4b92      	ldr	r3, [pc, #584]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99c:	4a91      	ldr	r2, [pc, #580]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c99e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c9a4:	e00c      	b.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	2102      	movs	r1, #2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 ff03 	bl	800d7b8 <RCCEx_PLL2_Config>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c9b6:	e003      	b.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c9bc:	e000      	b.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c9be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d109      	bne.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c9c6:	4b87      	ldr	r3, [pc, #540]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ca:	f023 0203 	bic.w	r2, r3, #3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d2:	4984      	ldr	r1, [pc, #528]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c9d8:	e001      	b.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 8086 	beq.w	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c9ec:	4b7e      	ldr	r3, [pc, #504]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a7d      	ldr	r2, [pc, #500]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c9f8:	f7fb f99a 	bl	8007d30 <HAL_GetTick>
 800c9fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c9fe:	e009      	b.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca00:	f7fb f996 	bl	8007d30 <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	2b64      	cmp	r3, #100	; 0x64
 800ca0c:	d902      	bls.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	75fb      	strb	r3, [r7, #23]
        break;
 800ca12:	e005      	b.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca14:	4b74      	ldr	r3, [pc, #464]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d0ef      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d166      	bne.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ca26:	4b6f      	ldr	r3, [pc, #444]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca30:	4053      	eors	r3, r2
 800ca32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d013      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca3a:	4b6a      	ldr	r3, [pc, #424]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca44:	4b67      	ldr	r3, [pc, #412]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	4a66      	ldr	r2, [pc, #408]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca50:	4b64      	ldr	r3, [pc, #400]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca54:	4a63      	ldr	r2, [pc, #396]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ca5c:	4a61      	ldr	r2, [pc, #388]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca6c:	d115      	bne.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca6e:	f7fb f95f 	bl	8007d30 <HAL_GetTick>
 800ca72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca74:	e00b      	b.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca76:	f7fb f95b 	bl	8007d30 <HAL_GetTick>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d902      	bls.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	75fb      	strb	r3, [r7, #23]
            break;
 800ca8c:	e005      	b.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca8e:	4b55      	ldr	r3, [pc, #340]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	f003 0302 	and.w	r3, r3, #2
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d0ed      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d126      	bne.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800caa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caae:	d10d      	bne.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cab0:	4b4c      	ldr	r3, [pc, #304]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cabe:	0919      	lsrs	r1, r3, #4
 800cac0:	4b4a      	ldr	r3, [pc, #296]	; (800cbec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800cac2:	400b      	ands	r3, r1
 800cac4:	4947      	ldr	r1, [pc, #284]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	610b      	str	r3, [r1, #16]
 800caca:	e005      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cacc:	4b45      	ldr	r3, [pc, #276]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	4a44      	ldr	r2, [pc, #272]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cad2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cad6:	6113      	str	r3, [r2, #16]
 800cad8:	4b42      	ldr	r3, [pc, #264]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cae6:	493f      	ldr	r1, [pc, #252]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	670b      	str	r3, [r1, #112]	; 0x70
 800caec:	e004      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	75bb      	strb	r3, [r7, #22]
 800caf2:	e001      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 8085 	beq.w	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb0a:	2b28      	cmp	r3, #40	; 0x28
 800cb0c:	d866      	bhi.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cb0e:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cbf1 	.word	0x0800cbf1
 800cb18:	0800cbdd 	.word	0x0800cbdd
 800cb1c:	0800cbdd 	.word	0x0800cbdd
 800cb20:	0800cbdd 	.word	0x0800cbdd
 800cb24:	0800cbdd 	.word	0x0800cbdd
 800cb28:	0800cbdd 	.word	0x0800cbdd
 800cb2c:	0800cbdd 	.word	0x0800cbdd
 800cb30:	0800cbdd 	.word	0x0800cbdd
 800cb34:	0800cbb9 	.word	0x0800cbb9
 800cb38:	0800cbdd 	.word	0x0800cbdd
 800cb3c:	0800cbdd 	.word	0x0800cbdd
 800cb40:	0800cbdd 	.word	0x0800cbdd
 800cb44:	0800cbdd 	.word	0x0800cbdd
 800cb48:	0800cbdd 	.word	0x0800cbdd
 800cb4c:	0800cbdd 	.word	0x0800cbdd
 800cb50:	0800cbdd 	.word	0x0800cbdd
 800cb54:	0800cbcb 	.word	0x0800cbcb
 800cb58:	0800cbdd 	.word	0x0800cbdd
 800cb5c:	0800cbdd 	.word	0x0800cbdd
 800cb60:	0800cbdd 	.word	0x0800cbdd
 800cb64:	0800cbdd 	.word	0x0800cbdd
 800cb68:	0800cbdd 	.word	0x0800cbdd
 800cb6c:	0800cbdd 	.word	0x0800cbdd
 800cb70:	0800cbdd 	.word	0x0800cbdd
 800cb74:	0800cbf1 	.word	0x0800cbf1
 800cb78:	0800cbdd 	.word	0x0800cbdd
 800cb7c:	0800cbdd 	.word	0x0800cbdd
 800cb80:	0800cbdd 	.word	0x0800cbdd
 800cb84:	0800cbdd 	.word	0x0800cbdd
 800cb88:	0800cbdd 	.word	0x0800cbdd
 800cb8c:	0800cbdd 	.word	0x0800cbdd
 800cb90:	0800cbdd 	.word	0x0800cbdd
 800cb94:	0800cbf1 	.word	0x0800cbf1
 800cb98:	0800cbdd 	.word	0x0800cbdd
 800cb9c:	0800cbdd 	.word	0x0800cbdd
 800cba0:	0800cbdd 	.word	0x0800cbdd
 800cba4:	0800cbdd 	.word	0x0800cbdd
 800cba8:	0800cbdd 	.word	0x0800cbdd
 800cbac:	0800cbdd 	.word	0x0800cbdd
 800cbb0:	0800cbdd 	.word	0x0800cbdd
 800cbb4:	0800cbf1 	.word	0x0800cbf1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fdfa 	bl	800d7b8 <RCCEx_PLL2_Config>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cbc8:	e013      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3324      	adds	r3, #36	; 0x24
 800cbce:	2101      	movs	r1, #1
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fea3 	bl	800d91c <RCCEx_PLL3_Config>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cbda:	e00a      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	75fb      	strb	r3, [r7, #23]
      break;
 800cbe0:	e007      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800cbe2:	bf00      	nop
 800cbe4:	58024400 	.word	0x58024400
 800cbe8:	58024800 	.word	0x58024800
 800cbec:	00ffffcf 	.word	0x00ffffcf
      break;
 800cbf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d109      	bne.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cbf8:	4b96      	ldr	r3, [pc, #600]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cbfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbfc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc04:	4993      	ldr	r1, [pc, #588]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	654b      	str	r3, [r1, #84]	; 0x54
 800cc0a:	e001      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 0302 	and.w	r3, r3, #2
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d038      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc20:	2b05      	cmp	r3, #5
 800cc22:	d821      	bhi.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800cc6f 	.word	0x0800cc6f
 800cc30:	0800cc45 	.word	0x0800cc45
 800cc34:	0800cc57 	.word	0x0800cc57
 800cc38:	0800cc6f 	.word	0x0800cc6f
 800cc3c:	0800cc6f 	.word	0x0800cc6f
 800cc40:	0800cc6f 	.word	0x0800cc6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3304      	adds	r3, #4
 800cc48:	2101      	movs	r1, #1
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 fdb4 	bl	800d7b8 <RCCEx_PLL2_Config>
 800cc50:	4603      	mov	r3, r0
 800cc52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cc54:	e00c      	b.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3324      	adds	r3, #36	; 0x24
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 fe5d 	bl	800d91c <RCCEx_PLL3_Config>
 800cc62:	4603      	mov	r3, r0
 800cc64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cc66:	e003      	b.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc6c:	e000      	b.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800cc6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d109      	bne.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc76:	4b77      	ldr	r3, [pc, #476]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7a:	f023 0207 	bic.w	r2, r3, #7
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc82:	4974      	ldr	r1, [pc, #464]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc84:	4313      	orrs	r3, r2
 800cc86:	654b      	str	r3, [r1, #84]	; 0x54
 800cc88:	e001      	b.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f003 0304 	and.w	r3, r3, #4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d03a      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca0:	2b05      	cmp	r3, #5
 800cca2:	d821      	bhi.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800cca4:	a201      	add	r2, pc, #4	; (adr r2, 800ccac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800cca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccaa:	bf00      	nop
 800ccac:	0800ccef 	.word	0x0800ccef
 800ccb0:	0800ccc5 	.word	0x0800ccc5
 800ccb4:	0800ccd7 	.word	0x0800ccd7
 800ccb8:	0800ccef 	.word	0x0800ccef
 800ccbc:	0800ccef 	.word	0x0800ccef
 800ccc0:	0800ccef 	.word	0x0800ccef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	2101      	movs	r1, #1
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fd74 	bl	800d7b8 <RCCEx_PLL2_Config>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ccd4:	e00c      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3324      	adds	r3, #36	; 0x24
 800ccda:	2101      	movs	r1, #1
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fe1d 	bl	800d91c <RCCEx_PLL3_Config>
 800cce2:	4603      	mov	r3, r0
 800cce4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cce6:	e003      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	75fb      	strb	r3, [r7, #23]
      break;
 800ccec:	e000      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800ccee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10a      	bne.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ccf6:	4b57      	ldr	r3, [pc, #348]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ccf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccfa:	f023 0207 	bic.w	r2, r3, #7
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd04:	4953      	ldr	r1, [pc, #332]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	658b      	str	r3, [r1, #88]	; 0x58
 800cd0a:	e001      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0320 	and.w	r3, r3, #32
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d04b      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd26:	d02e      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cd28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd2c:	d828      	bhi.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd32:	d02a      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cd34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd38:	d822      	bhi.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cd3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd3e:	d026      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cd40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd44:	d81c      	bhi.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4a:	d010      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd50:	d816      	bhi.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d01d      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800cd56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd5a:	d111      	bne.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	2100      	movs	r1, #0
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 fd28 	bl	800d7b8 <RCCEx_PLL2_Config>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd6c:	e012      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3324      	adds	r3, #36	; 0x24
 800cd72:	2102      	movs	r1, #2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 fdd1 	bl	800d91c <RCCEx_PLL3_Config>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd7e:	e009      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	75fb      	strb	r3, [r7, #23]
      break;
 800cd84:	e006      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd86:	bf00      	nop
 800cd88:	e004      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd8a:	bf00      	nop
 800cd8c:	e002      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd8e:	bf00      	nop
 800cd90:	e000      	b.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10a      	bne.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cd9a:	4b2e      	ldr	r3, [pc, #184]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda8:	492a      	ldr	r1, [pc, #168]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	654b      	str	r3, [r1, #84]	; 0x54
 800cdae:	e001      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d04d      	beq.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cdca:	d02e      	beq.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cdcc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cdd0:	d828      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cdd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd6:	d02a      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cddc:	d822      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cdde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cde2:	d026      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cde4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cde8:	d81c      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cdea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdee:	d010      	beq.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800cdf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdf4:	d816      	bhi.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01d      	beq.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800cdfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdfe:	d111      	bne.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	2100      	movs	r1, #0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fcd6 	bl	800d7b8 <RCCEx_PLL2_Config>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce10:	e012      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	3324      	adds	r3, #36	; 0x24
 800ce16:	2102      	movs	r1, #2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fd7f 	bl	800d91c <RCCEx_PLL3_Config>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce22:	e009      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	75fb      	strb	r3, [r7, #23]
      break;
 800ce28:	e006      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ce2a:	bf00      	nop
 800ce2c:	e004      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ce2e:	bf00      	nop
 800ce30:	e002      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ce32:	bf00      	nop
 800ce34:	e000      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ce36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10c      	bne.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ce40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce4c:	4901      	ldr	r1, [pc, #4]	; (800ce54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	658b      	str	r3, [r1, #88]	; 0x58
 800ce52:	e003      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800ce54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d04b      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce72:	d02e      	beq.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ce74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce78:	d828      	bhi.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce7e:	d02a      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ce80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce84:	d822      	bhi.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ce8a:	d026      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800ce8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ce90:	d81c      	bhi.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce96:	d010      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ce98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce9c:	d816      	bhi.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d01d      	beq.n	800cede <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800cea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cea6:	d111      	bne.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	2100      	movs	r1, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fc82 	bl	800d7b8 <RCCEx_PLL2_Config>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ceb8:	e012      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3324      	adds	r3, #36	; 0x24
 800cebe:	2102      	movs	r1, #2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fd2b 	bl	800d91c <RCCEx_PLL3_Config>
 800cec6:	4603      	mov	r3, r0
 800cec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ceca:	e009      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]
      break;
 800ced0:	e006      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ced2:	bf00      	nop
 800ced4:	e004      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ced6:	bf00      	nop
 800ced8:	e002      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ceda:	bf00      	nop
 800cedc:	e000      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800cede:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10a      	bne.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cee6:	4b9d      	ldr	r3, [pc, #628]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cef4:	4999      	ldr	r1, [pc, #612]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	658b      	str	r3, [r1, #88]	; 0x58
 800cefa:	e001      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0308 	and.w	r3, r3, #8
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d01a      	beq.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf16:	d10a      	bne.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3324      	adds	r3, #36	; 0x24
 800cf1c:	2102      	movs	r1, #2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fcfc 	bl	800d91c <RCCEx_PLL3_Config>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cf2e:	4b8b      	ldr	r3, [pc, #556]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf3c:	4987      	ldr	r1, [pc, #540]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0310 	and.w	r3, r3, #16
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d01a      	beq.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf58:	d10a      	bne.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3324      	adds	r3, #36	; 0x24
 800cf5e:	2102      	movs	r1, #2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fcdb 	bl	800d91c <RCCEx_PLL3_Config>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf70:	4b7a      	ldr	r3, [pc, #488]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf7e:	4977      	ldr	r1, [pc, #476]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d034      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf9a:	d01d      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800cf9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfa0:	d817      	bhi.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800cfa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfaa:	d009      	beq.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800cfac:	e011      	b.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fbff 	bl	800d7b8 <RCCEx_PLL2_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cfbe:	e00c      	b.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	3324      	adds	r3, #36	; 0x24
 800cfc4:	2102      	movs	r1, #2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fca8 	bl	800d91c <RCCEx_PLL3_Config>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cfd0:	e003      	b.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	75fb      	strb	r3, [r7, #23]
      break;
 800cfd6:	e000      	b.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800cfd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cfda:	7dfb      	ldrb	r3, [r7, #23]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cfe0:	4b5e      	ldr	r3, [pc, #376]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cfee:	495b      	ldr	r1, [pc, #364]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cff0:	4313      	orrs	r3, r2
 800cff2:	658b      	str	r3, [r1, #88]	; 0x58
 800cff4:	e001      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d002:	2b00      	cmp	r3, #0
 800d004:	d033      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d00c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d010:	d01c      	beq.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800d012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d016:	d816      	bhi.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800d018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d01c:	d003      	beq.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d01e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d022:	d007      	beq.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800d024:	e00f      	b.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d026:	4b4d      	ldr	r3, [pc, #308]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02a:	4a4c      	ldr	r2, [pc, #304]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d032:	e00c      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	3324      	adds	r3, #36	; 0x24
 800d038:	2101      	movs	r1, #1
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 fc6e 	bl	800d91c <RCCEx_PLL3_Config>
 800d040:	4603      	mov	r3, r0
 800d042:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d044:	e003      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	75fb      	strb	r3, [r7, #23]
      break;
 800d04a:	e000      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800d04c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10a      	bne.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d054:	4b41      	ldr	r3, [pc, #260]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d062:	493e      	ldr	r1, [pc, #248]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d064:	4313      	orrs	r3, r2
 800d066:	654b      	str	r3, [r1, #84]	; 0x54
 800d068:	e001      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d029      	beq.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d086:	d007      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d088:	e00f      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d08a:	4b34      	ldr	r3, [pc, #208]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08e:	4a33      	ldr	r2, [pc, #204]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d096:	e00b      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3304      	adds	r3, #4
 800d09c:	2102      	movs	r1, #2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fb8a 	bl	800d7b8 <RCCEx_PLL2_Config>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d0a8:	e002      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800d0ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d109      	bne.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0b6:	4b29      	ldr	r3, [pc, #164]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0c2:	4926      	ldr	r1, [pc, #152]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d0c8:	e001      	b.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00a      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3324      	adds	r3, #36	; 0x24
 800d0de:	2102      	movs	r1, #2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fc1b 	bl	800d91c <RCCEx_PLL3_Config>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d033      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d104:	d017      	beq.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d10a:	d811      	bhi.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d110:	d013      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d116:	d80b      	bhi.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d010      	beq.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d11c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d120:	d106      	bne.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d122:	4b0e      	ldr	r3, [pc, #56]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	4a0d      	ldr	r2, [pc, #52]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d12e:	e007      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	75fb      	strb	r3, [r7, #23]
      break;
 800d134:	e004      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d136:	bf00      	nop
 800d138:	e002      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d13a:	bf00      	nop
 800d13c:	e000      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d13e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10c      	bne.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d152:	4902      	ldr	r1, [pc, #8]	; (800d15c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d154:	4313      	orrs	r3, r2
 800d156:	654b      	str	r3, [r1, #84]	; 0x54
 800d158:	e004      	b.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d15a:	bf00      	nop
 800d15c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d170:	4b31      	ldr	r3, [pc, #196]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17c:	492e      	ldr	r1, [pc, #184]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d17e:	4313      	orrs	r3, r2
 800d180:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d009      	beq.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d18e:	4b2a      	ldr	r3, [pc, #168]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d19c:	4926      	ldr	r1, [pc, #152]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d008      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d1ae:	4b22      	ldr	r3, [pc, #136]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ba:	491f      	ldr	r1, [pc, #124]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00d      	beq.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d1cc:	4b1a      	ldr	r3, [pc, #104]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4a19      	ldr	r2, [pc, #100]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1d6:	6113      	str	r3, [r2, #16]
 800d1d8:	4b17      	ldr	r3, [pc, #92]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1da:	691a      	ldr	r2, [r3, #16]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d1e2:	4915      	ldr	r1, [pc, #84]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	da08      	bge.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d1f0:	4b11      	ldr	r3, [pc, #68]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1fc:	490e      	ldr	r1, [pc, #56]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1fe:	4313      	orrs	r3, r2
 800d200:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d009      	beq.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d20e:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d212:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d21c:	4906      	ldr	r1, [pc, #24]	; (800d238 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d222:	7dbb      	ldrb	r3, [r7, #22]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d101      	bne.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	e000      	b.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	58024400 	.word	0x58024400

0800d23c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d240:	f7ff f85a 	bl	800c2f8 <HAL_RCC_GetHCLKFreq>
 800d244:	4602      	mov	r2, r0
 800d246:	4b06      	ldr	r3, [pc, #24]	; (800d260 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	091b      	lsrs	r3, r3, #4
 800d24c:	f003 0307 	and.w	r3, r3, #7
 800d250:	4904      	ldr	r1, [pc, #16]	; (800d264 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d252:	5ccb      	ldrb	r3, [r1, r3]
 800d254:	f003 031f 	and.w	r3, r3, #31
 800d258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	58024400 	.word	0x58024400
 800d264:	08011734 	.word	0x08011734

0800d268 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d268:	b480      	push	{r7}
 800d26a:	b089      	sub	sp, #36	; 0x24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d270:	4ba1      	ldr	r3, [pc, #644]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	f003 0303 	and.w	r3, r3, #3
 800d278:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d27a:	4b9f      	ldr	r3, [pc, #636]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27e:	0b1b      	lsrs	r3, r3, #12
 800d280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d284:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d286:	4b9c      	ldr	r3, [pc, #624]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	091b      	lsrs	r3, r3, #4
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d292:	4b99      	ldr	r3, [pc, #612]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d296:	08db      	lsrs	r3, r3, #3
 800d298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	fb02 f303 	mul.w	r3, r2, r3
 800d2a2:	ee07 3a90 	vmov	s15, r3
 800d2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 8111 	beq.w	800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	f000 8083 	beq.w	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	f200 80a1 	bhi.w	800d408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d003      	beq.n	800d2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d056      	beq.n	800d380 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d2d2:	e099      	b.n	800d408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2d4:	4b88      	ldr	r3, [pc, #544]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 0320 	and.w	r3, r3, #32
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d02d      	beq.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d2e0:	4b85      	ldr	r3, [pc, #532]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	08db      	lsrs	r3, r3, #3
 800d2e6:	f003 0303 	and.w	r3, r3, #3
 800d2ea:	4a84      	ldr	r2, [pc, #528]	; (800d4fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d2ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	ee07 3a90 	vmov	s15, r3
 800d2f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	ee07 3a90 	vmov	s15, r3
 800d302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d30a:	4b7b      	ldr	r3, [pc, #492]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d312:	ee07 3a90 	vmov	s15, r3
 800d316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d31e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d33a:	e087      	b.n	800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d34e:	4b6a      	ldr	r3, [pc, #424]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d362:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d37a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d37e:	e065      	b.n	800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d392:	4b59      	ldr	r3, [pc, #356]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3c2:	e043      	b.n	800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d3d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3d6:	4b48      	ldr	r3, [pc, #288]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d406:	e021      	b.n	800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	ee07 3a90 	vmov	s15, r3
 800d40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d41a:	4b37      	ldr	r3, [pc, #220]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d42e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d44a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d44c:	4b2a      	ldr	r3, [pc, #168]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d450:	0a5b      	lsrs	r3, r3, #9
 800d452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d456:	ee07 3a90 	vmov	s15, r3
 800d45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d45e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d462:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d466:	edd7 6a07 	vldr	s13, [r7, #28]
 800d46a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d46e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d472:	ee17 2a90 	vmov	r2, s15
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d47a:	4b1f      	ldr	r3, [pc, #124]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	0c1b      	lsrs	r3, r3, #16
 800d480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d484:	ee07 3a90 	vmov	s15, r3
 800d488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d490:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d494:	edd7 6a07 	vldr	s13, [r7, #28]
 800d498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4a0:	ee17 2a90 	vmov	r2, s15
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d4a8:	4b13      	ldr	r3, [pc, #76]	; (800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ac:	0e1b      	lsrs	r3, r3, #24
 800d4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ce:	ee17 2a90 	vmov	r2, s15
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d4d6:	e008      	b.n	800d4ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	609a      	str	r2, [r3, #8]
}
 800d4ea:	bf00      	nop
 800d4ec:	3724      	adds	r7, #36	; 0x24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	58024400 	.word	0x58024400
 800d4fc:	03d09000 	.word	0x03d09000
 800d500:	46000000 	.word	0x46000000
 800d504:	4c742400 	.word	0x4c742400
 800d508:	4a742400 	.word	0x4a742400
 800d50c:	4af42400 	.word	0x4af42400

0800d510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d510:	b480      	push	{r7}
 800d512:	b089      	sub	sp, #36	; 0x24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d518:	4ba1      	ldr	r3, [pc, #644]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51c:	f003 0303 	and.w	r3, r3, #3
 800d520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d522:	4b9f      	ldr	r3, [pc, #636]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d526:	0d1b      	lsrs	r3, r3, #20
 800d528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d52c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d52e:	4b9c      	ldr	r3, [pc, #624]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	0a1b      	lsrs	r3, r3, #8
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d53a:	4b99      	ldr	r3, [pc, #612]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53e:	08db      	lsrs	r3, r3, #3
 800d540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	fb02 f303 	mul.w	r3, r2, r3
 800d54a:	ee07 3a90 	vmov	s15, r3
 800d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 8111 	beq.w	800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2b02      	cmp	r3, #2
 800d562:	f000 8083 	beq.w	800d66c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	f200 80a1 	bhi.w	800d6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d003      	beq.n	800d57c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d056      	beq.n	800d628 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d57a:	e099      	b.n	800d6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d57c:	4b88      	ldr	r3, [pc, #544]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 0320 	and.w	r3, r3, #32
 800d584:	2b00      	cmp	r3, #0
 800d586:	d02d      	beq.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d588:	4b85      	ldr	r3, [pc, #532]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	08db      	lsrs	r3, r3, #3
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	4a84      	ldr	r2, [pc, #528]	; (800d7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d594:	fa22 f303 	lsr.w	r3, r2, r3
 800d598:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	ee07 3a90 	vmov	s15, r3
 800d5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b7b      	ldr	r3, [pc, #492]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d5e2:	e087      	b.n	800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f6:	4b6a      	ldr	r3, [pc, #424]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d606:	ed97 6a03 	vldr	s12, [r7, #12]
 800d60a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d626:	e065      	b.n	800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	ee07 3a90 	vmov	s15, r3
 800d62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d632:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d63a:	4b59      	ldr	r3, [pc, #356]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d642:	ee07 3a90 	vmov	s15, r3
 800d646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d64e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d66a:	e043      	b.n	800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d676:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d67e:	4b48      	ldr	r3, [pc, #288]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d692:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6ae:	e021      	b.n	800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	ee07 3a90 	vmov	s15, r3
 800d6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6c2:	4b37      	ldr	r3, [pc, #220]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d6f4:	4b2a      	ldr	r3, [pc, #168]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f8:	0a5b      	lsrs	r3, r3, #9
 800d6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6fe:	ee07 3a90 	vmov	s15, r3
 800d702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d70a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d70e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d71a:	ee17 2a90 	vmov	r2, s15
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d722:	4b1f      	ldr	r3, [pc, #124]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	0c1b      	lsrs	r3, r3, #16
 800d728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d72c:	ee07 3a90 	vmov	s15, r3
 800d730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d73c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d748:	ee17 2a90 	vmov	r2, s15
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d750:	4b13      	ldr	r3, [pc, #76]	; (800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d754:	0e1b      	lsrs	r3, r3, #24
 800d756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d76a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d776:	ee17 2a90 	vmov	r2, s15
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d77e:	e008      	b.n	800d792 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	609a      	str	r2, [r3, #8]
}
 800d792:	bf00      	nop
 800d794:	3724      	adds	r7, #36	; 0x24
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	58024400 	.word	0x58024400
 800d7a4:	03d09000 	.word	0x03d09000
 800d7a8:	46000000 	.word	0x46000000
 800d7ac:	4c742400 	.word	0x4c742400
 800d7b0:	4a742400 	.word	0x4a742400
 800d7b4:	4af42400 	.word	0x4af42400

0800d7b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7c6:	4b53      	ldr	r3, [pc, #332]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ca:	f003 0303 	and.w	r3, r3, #3
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d101      	bne.n	800d7d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e099      	b.n	800d90a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7d6:	4b4f      	ldr	r3, [pc, #316]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a4e      	ldr	r2, [pc, #312]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d7dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7e2:	f7fa faa5 	bl	8007d30 <HAL_GetTick>
 800d7e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7e8:	e008      	b.n	800d7fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d7ea:	f7fa faa1 	bl	8007d30 <HAL_GetTick>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d901      	bls.n	800d7fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e086      	b.n	800d90a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7fc:	4b45      	ldr	r3, [pc, #276]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1f0      	bne.n	800d7ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d808:	4b42      	ldr	r3, [pc, #264]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	031b      	lsls	r3, r3, #12
 800d816:	493f      	ldr	r1, [pc, #252]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d818:	4313      	orrs	r3, r2
 800d81a:	628b      	str	r3, [r1, #40]	; 0x28
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	3b01      	subs	r3, #1
 800d822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	025b      	lsls	r3, r3, #9
 800d82e:	b29b      	uxth	r3, r3
 800d830:	431a      	orrs	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	3b01      	subs	r3, #1
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d83e:	431a      	orrs	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	3b01      	subs	r3, #1
 800d846:	061b      	lsls	r3, r3, #24
 800d848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d84c:	4931      	ldr	r1, [pc, #196]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d84e:	4313      	orrs	r3, r2
 800d850:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d852:	4b30      	ldr	r3, [pc, #192]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	492d      	ldr	r1, [pc, #180]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d860:	4313      	orrs	r3, r2
 800d862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d864:	4b2b      	ldr	r3, [pc, #172]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	f023 0220 	bic.w	r2, r3, #32
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	4928      	ldr	r1, [pc, #160]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d872:	4313      	orrs	r3, r2
 800d874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d876:	4b27      	ldr	r3, [pc, #156]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	4a26      	ldr	r2, [pc, #152]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d87c:	f023 0310 	bic.w	r3, r3, #16
 800d880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d882:	4b24      	ldr	r3, [pc, #144]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d886:	4b24      	ldr	r3, [pc, #144]	; (800d918 <RCCEx_PLL2_Config+0x160>)
 800d888:	4013      	ands	r3, r2
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	69d2      	ldr	r2, [r2, #28]
 800d88e:	00d2      	lsls	r2, r2, #3
 800d890:	4920      	ldr	r1, [pc, #128]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d892:	4313      	orrs	r3, r2
 800d894:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d896:	4b1f      	ldr	r3, [pc, #124]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	4a1e      	ldr	r2, [pc, #120]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d89c:	f043 0310 	orr.w	r3, r3, #16
 800d8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d106      	bne.n	800d8b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8a8:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ac:	4a19      	ldr	r2, [pc, #100]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8b4:	e00f      	b.n	800d8d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d106      	bne.n	800d8ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8bc:	4b15      	ldr	r3, [pc, #84]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c0:	4a14      	ldr	r2, [pc, #80]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8c8:	e005      	b.n	800d8d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8ca:	4b12      	ldr	r3, [pc, #72]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	4a11      	ldr	r2, [pc, #68]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a0e      	ldr	r2, [pc, #56]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8e2:	f7fa fa25 	bl	8007d30 <HAL_GetTick>
 800d8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8e8:	e008      	b.n	800d8fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d8ea:	f7fa fa21 	bl	8007d30 <HAL_GetTick>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d901      	bls.n	800d8fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e006      	b.n	800d90a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8fc:	4b05      	ldr	r3, [pc, #20]	; (800d914 <RCCEx_PLL2_Config+0x15c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0f0      	beq.n	800d8ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	58024400 	.word	0x58024400
 800d918:	ffff0007 	.word	0xffff0007

0800d91c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d92a:	4b53      	ldr	r3, [pc, #332]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92e:	f003 0303 	and.w	r3, r3, #3
 800d932:	2b03      	cmp	r3, #3
 800d934:	d101      	bne.n	800d93a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e099      	b.n	800da6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d93a:	4b4f      	ldr	r3, [pc, #316]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a4e      	ldr	r2, [pc, #312]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d946:	f7fa f9f3 	bl	8007d30 <HAL_GetTick>
 800d94a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d94c:	e008      	b.n	800d960 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d94e:	f7fa f9ef 	bl	8007d30 <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d901      	bls.n	800d960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d95c:	2303      	movs	r3, #3
 800d95e:	e086      	b.n	800da6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d960:	4b45      	ldr	r3, [pc, #276]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f0      	bne.n	800d94e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d96c:	4b42      	ldr	r3, [pc, #264]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d970:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	051b      	lsls	r3, r3, #20
 800d97a:	493f      	ldr	r1, [pc, #252]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d97c:	4313      	orrs	r3, r2
 800d97e:	628b      	str	r3, [r1, #40]	; 0x28
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	3b01      	subs	r3, #1
 800d986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	3b01      	subs	r3, #1
 800d990:	025b      	lsls	r3, r3, #9
 800d992:	b29b      	uxth	r3, r3
 800d994:	431a      	orrs	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	041b      	lsls	r3, r3, #16
 800d99e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9a2:	431a      	orrs	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	061b      	lsls	r3, r3, #24
 800d9ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9b0:	4931      	ldr	r1, [pc, #196]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9b6:	4b30      	ldr	r3, [pc, #192]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	492d      	ldr	r1, [pc, #180]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9c8:	4b2b      	ldr	r3, [pc, #172]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	4928      	ldr	r1, [pc, #160]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9da:	4b27      	ldr	r3, [pc, #156]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9de:	4a26      	ldr	r2, [pc, #152]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9e6:	4b24      	ldr	r3, [pc, #144]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9ea:	4b24      	ldr	r3, [pc, #144]	; (800da7c <RCCEx_PLL3_Config+0x160>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	69d2      	ldr	r2, [r2, #28]
 800d9f2:	00d2      	lsls	r2, r2, #3
 800d9f4:	4920      	ldr	r1, [pc, #128]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d9fa:	4b1f      	ldr	r3, [pc, #124]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800d9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fe:	4a1e      	ldr	r2, [pc, #120]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da0c:	4b1a      	ldr	r3, [pc, #104]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da10:	4a19      	ldr	r2, [pc, #100]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da18:	e00f      	b.n	800da3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d106      	bne.n	800da2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da20:	4b15      	ldr	r3, [pc, #84]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	4a14      	ldr	r2, [pc, #80]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da2c:	e005      	b.n	800da3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da2e:	4b12      	ldr	r3, [pc, #72]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	4a11      	ldr	r2, [pc, #68]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da3a:	4b0f      	ldr	r3, [pc, #60]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a0e      	ldr	r2, [pc, #56]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da46:	f7fa f973 	bl	8007d30 <HAL_GetTick>
 800da4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da4c:	e008      	b.n	800da60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da4e:	f7fa f96f 	bl	8007d30 <HAL_GetTick>
 800da52:	4602      	mov	r2, r0
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d901      	bls.n	800da60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e006      	b.n	800da6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da60:	4b05      	ldr	r3, [pc, #20]	; (800da78 <RCCEx_PLL3_Config+0x15c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0f0      	beq.n	800da4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	58024400 	.word	0x58024400
 800da7c:	ffff0007 	.word	0xffff0007

0800da80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	e0f1      	b.n	800dc76 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a78      	ldr	r2, [pc, #480]	; (800dc80 <HAL_SPI_Init+0x200>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d00f      	beq.n	800dac2 <HAL_SPI_Init+0x42>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a77      	ldr	r2, [pc, #476]	; (800dc84 <HAL_SPI_Init+0x204>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00a      	beq.n	800dac2 <HAL_SPI_Init+0x42>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a75      	ldr	r2, [pc, #468]	; (800dc88 <HAL_SPI_Init+0x208>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d005      	beq.n	800dac2 <HAL_SPI_Init+0x42>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	2b0f      	cmp	r3, #15
 800dabc:	d901      	bls.n	800dac2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e0d9      	b.n	800dc76 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fba2 	bl	800e20c <SPI_GetPacketSize>
 800dac8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a6c      	ldr	r2, [pc, #432]	; (800dc80 <HAL_SPI_Init+0x200>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d00c      	beq.n	800daee <HAL_SPI_Init+0x6e>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a6a      	ldr	r2, [pc, #424]	; (800dc84 <HAL_SPI_Init+0x204>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d007      	beq.n	800daee <HAL_SPI_Init+0x6e>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a69      	ldr	r2, [pc, #420]	; (800dc88 <HAL_SPI_Init+0x208>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d002      	beq.n	800daee <HAL_SPI_Init+0x6e>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b08      	cmp	r3, #8
 800daec:	d811      	bhi.n	800db12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800daf2:	4a63      	ldr	r2, [pc, #396]	; (800dc80 <HAL_SPI_Init+0x200>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d009      	beq.n	800db0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a61      	ldr	r2, [pc, #388]	; (800dc84 <HAL_SPI_Init+0x204>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d004      	beq.n	800db0c <HAL_SPI_Init+0x8c>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a60      	ldr	r2, [pc, #384]	; (800dc88 <HAL_SPI_Init+0x208>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d104      	bne.n	800db16 <HAL_SPI_Init+0x96>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b10      	cmp	r3, #16
 800db10:	d901      	bls.n	800db16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e0af      	b.n	800dc76 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7f9 fe08 	bl	8007740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2202      	movs	r2, #2
 800db34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f022 0201 	bic.w	r2, r2, #1
 800db46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800db52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db5c:	d119      	bne.n	800db92 <HAL_SPI_Init+0x112>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db66:	d103      	bne.n	800db70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d008      	beq.n	800db82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10c      	bne.n	800db92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db80:	d107      	bne.n	800db92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	69da      	ldr	r2, [r3, #28]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db9a:	431a      	orrs	r2, r3
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba4:	ea42 0103 	orr.w	r1, r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbc:	431a      	orrs	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc2:	431a      	orrs	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	431a      	orrs	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	431a      	orrs	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	431a      	orrs	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	431a      	orrs	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbf2:	ea42 0103 	orr.w	r1, r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	430a      	orrs	r2, r1
 800dc00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d113      	bne.n	800dc32 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f022 0201 	bic.w	r2, r2, #1
 800dc40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00a      	beq.n	800dc64 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	430a      	orrs	r2, r1
 800dc62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	40013000 	.word	0x40013000
 800dc84:	40003800 	.word	0x40003800
 800dc88:	40003c00 	.word	0x40003c00

0800dc8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08a      	sub	sp, #40	; 0x28
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	603b      	str	r3, [r7, #0]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3320      	adds	r3, #32
 800dca2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d101      	bne.n	800dcb6 <HAL_SPI_Transmit+0x2a>
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	e1d7      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcbe:	f7fa f837 	bl	8007d30 <HAL_GetTick>
 800dcc2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d007      	beq.n	800dce0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dcdc:	7efb      	ldrb	r3, [r7, #27]
 800dcde:	e1c2      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <HAL_SPI_Transmit+0x60>
 800dce6:	88fb      	ldrh	r3, [r7, #6]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d107      	bne.n	800dcfc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dcf8:	7efb      	ldrb	r3, [r7, #27]
 800dcfa:	e1b4      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2203      	movs	r2, #3
 800dd00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	88fa      	ldrh	r2, [r7, #6]
 800dd16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	88fa      	ldrh	r2, [r7, #6]
 800dd1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd4c:	d107      	bne.n	800dd5e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	4b96      	ldr	r3, [pc, #600]	; (800dfc0 <HAL_SPI_Transmit+0x334>)
 800dd66:	4013      	ands	r3, r2
 800dd68:	88f9      	ldrh	r1, [r7, #6]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	6812      	ldr	r2, [r2, #0]
 800dd6e:	430b      	orrs	r3, r1
 800dd70:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f042 0201 	orr.w	r2, r2, #1
 800dd80:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd8a:	d107      	bne.n	800dd9c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	2b0f      	cmp	r3, #15
 800dda2:	d947      	bls.n	800de34 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dda4:	e03f      	b.n	800de26 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	f003 0302 	and.w	r3, r3, #2
 800ddb0:	2b02      	cmp	r3, #2
 800ddb2:	d114      	bne.n	800ddde <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6812      	ldr	r2, [r2, #0]
 800ddbe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc4:	1d1a      	adds	r2, r3, #4
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dddc:	e023      	b.n	800de26 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddde:	f7f9 ffa7 	bl	8007d30 <HAL_GetTick>
 800dde2:	4602      	mov	r2, r0
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d803      	bhi.n	800ddf6 <HAL_SPI_Transmit+0x16a>
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d102      	bne.n	800ddfc <HAL_SPI_Transmit+0x170>
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d114      	bne.n	800de26 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f000 f937 	bl	800e070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e11f      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1b9      	bne.n	800dda6 <HAL_SPI_Transmit+0x11a>
 800de32:	e0f2      	b.n	800e01a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	2b07      	cmp	r3, #7
 800de3a:	f240 80e7 	bls.w	800e00c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800de3e:	e05d      	b.n	800defc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d132      	bne.n	800deb4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de54:	b29b      	uxth	r3, r3
 800de56:	2b01      	cmp	r3, #1
 800de58:	d918      	bls.n	800de8c <HAL_SPI_Transmit+0x200>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d014      	beq.n	800de8c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6812      	ldr	r2, [r2, #0]
 800de6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de72:	1d1a      	adds	r2, r3, #4
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de7e:	b29b      	uxth	r3, r3
 800de80:	3b02      	subs	r3, #2
 800de82:	b29a      	uxth	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de8a:	e037      	b.n	800defc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de90:	881a      	ldrh	r2, [r3, #0]
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de9a:	1c9a      	adds	r2, r3, #2
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b01      	subs	r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800deb2:	e023      	b.n	800defc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800deb4:	f7f9 ff3c 	bl	8007d30 <HAL_GetTick>
 800deb8:	4602      	mov	r2, r0
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d803      	bhi.n	800decc <HAL_SPI_Transmit+0x240>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deca:	d102      	bne.n	800ded2 <HAL_SPI_Transmit+0x246>
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d114      	bne.n	800defc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 f8cc 	bl	800e070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800def8:	2303      	movs	r3, #3
 800defa:	e0b4      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df02:	b29b      	uxth	r3, r3
 800df04:	2b00      	cmp	r3, #0
 800df06:	d19b      	bne.n	800de40 <HAL_SPI_Transmit+0x1b4>
 800df08:	e087      	b.n	800e01a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b02      	cmp	r3, #2
 800df16:	d155      	bne.n	800dfc4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df1e:	b29b      	uxth	r3, r3
 800df20:	2b03      	cmp	r3, #3
 800df22:	d918      	bls.n	800df56 <HAL_SPI_Transmit+0x2ca>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df28:	2b40      	cmp	r3, #64	; 0x40
 800df2a:	d914      	bls.n	800df56 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6812      	ldr	r2, [r2, #0]
 800df36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df48:	b29b      	uxth	r3, r3
 800df4a:	3b04      	subs	r3, #4
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df54:	e05a      	b.n	800e00c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d917      	bls.n	800df92 <HAL_SPI_Transmit+0x306>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d013      	beq.n	800df92 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df6e:	881a      	ldrh	r2, [r3, #0]
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df78:	1c9a      	adds	r2, r3, #2
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df84:	b29b      	uxth	r3, r3
 800df86:	3b02      	subs	r3, #2
 800df88:	b29a      	uxth	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df90:	e03c      	b.n	800e00c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3320      	adds	r3, #32
 800df9c:	7812      	ldrb	r2, [r2, #0]
 800df9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfbc:	e026      	b.n	800e00c <HAL_SPI_Transmit+0x380>
 800dfbe:	bf00      	nop
 800dfc0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfc4:	f7f9 feb4 	bl	8007d30 <HAL_GetTick>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d803      	bhi.n	800dfdc <HAL_SPI_Transmit+0x350>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfda:	d102      	bne.n	800dfe2 <HAL_SPI_Transmit+0x356>
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d114      	bne.n	800e00c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f000 f844 	bl	800e070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e008:	2303      	movs	r3, #3
 800e00a:	e02c      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e012:	b29b      	uxth	r3, r3
 800e014:	2b00      	cmp	r3, #0
 800e016:	f47f af78 	bne.w	800df0a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	2200      	movs	r2, #0
 800e022:	2108      	movs	r1, #8
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f8c3 	bl	800e1b0 <SPI_WaitOnFlagUntilTimeout>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e036:	f043 0220 	orr.w	r2, r3, #32
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f000 f815 	bl	800e070 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2201      	movs	r2, #1
 800e052:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d001      	beq.n	800e064 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	e000      	b.n	800e066 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e064:	7efb      	ldrb	r3, [r7, #27]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3720      	adds	r7, #32
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop

0800e070 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	699a      	ldr	r2, [r3, #24]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 0208 	orr.w	r2, r2, #8
 800e08e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	699a      	ldr	r2, [r3, #24]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f042 0210 	orr.w	r2, r2, #16
 800e09e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f022 0201 	bic.w	r2, r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6919      	ldr	r1, [r3, #16]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	4b3c      	ldr	r3, [pc, #240]	; (800e1ac <SPI_CloseTransfer+0x13c>)
 800e0bc:	400b      	ands	r3, r1
 800e0be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689a      	ldr	r2, [r3, #8]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e0ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b04      	cmp	r3, #4
 800e0da:	d014      	beq.n	800e106 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f003 0320 	and.w	r3, r3, #32
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00f      	beq.n	800e106 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	699a      	ldr	r2, [r3, #24]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f042 0220 	orr.w	r2, r2, #32
 800e104:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d014      	beq.n	800e13c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00f      	beq.n	800e13c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e122:	f043 0204 	orr.w	r2, r3, #4
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e13a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00f      	beq.n	800e166 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14c:	f043 0201 	orr.w	r2, r3, #1
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	699a      	ldr	r2, [r3, #24]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00f      	beq.n	800e190 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e176:	f043 0208 	orr.w	r2, r3, #8
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	699a      	ldr	r2, [r3, #24]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e18e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e1a0:	bf00      	nop
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	fffffc90 	.word	0xfffffc90

0800e1b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1c0:	e010      	b.n	800e1e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1c2:	f7f9 fdb5 	bl	8007d30 <HAL_GetTick>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	69ba      	ldr	r2, [r7, #24]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d803      	bhi.n	800e1da <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d8:	d102      	bne.n	800e1e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	e00f      	b.n	800e204 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	695a      	ldr	r2, [r3, #20]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	bf0c      	ite	eq
 800e1f4:	2301      	moveq	r3, #1
 800e1f6:	2300      	movne	r3, #0
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d0df      	beq.n	800e1c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e218:	095b      	lsrs	r3, r3, #5
 800e21a:	3301      	adds	r3, #1
 800e21c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	3301      	adds	r3, #1
 800e224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	3307      	adds	r3, #7
 800e22a:	08db      	lsrs	r3, r3, #3
 800e22c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	fb02 f303 	mul.w	r3, r2, r3
}
 800e236:	4618      	mov	r0, r3
 800e238:	3714      	adds	r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e250:	2301      	movs	r3, #1
 800e252:	e049      	b.n	800e2e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d106      	bne.n	800e26e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7f9 fad5 	bl	8007818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2202      	movs	r2, #2
 800e272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3304      	adds	r3, #4
 800e27e:	4619      	mov	r1, r3
 800e280:	4610      	mov	r0, r2
 800e282:	f000 fa23 	bl	800e6cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b01      	cmp	r3, #1
 800e302:	d001      	beq.n	800e308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	e054      	b.n	800e3b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2202      	movs	r2, #2
 800e30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68da      	ldr	r2, [r3, #12]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f042 0201 	orr.w	r2, r2, #1
 800e31e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a26      	ldr	r2, [pc, #152]	; (800e3c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d022      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e332:	d01d      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a22      	ldr	r2, [pc, #136]	; (800e3c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d018      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a21      	ldr	r2, [pc, #132]	; (800e3c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d013      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a1f      	ldr	r2, [pc, #124]	; (800e3cc <HAL_TIM_Base_Start_IT+0xdc>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d00e      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a1e      	ldr	r2, [pc, #120]	; (800e3d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d009      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a1c      	ldr	r2, [pc, #112]	; (800e3d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d004      	beq.n	800e370 <HAL_TIM_Base_Start_IT+0x80>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a1b      	ldr	r2, [pc, #108]	; (800e3d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d115      	bne.n	800e39c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	4b19      	ldr	r3, [pc, #100]	; (800e3dc <HAL_TIM_Base_Start_IT+0xec>)
 800e378:	4013      	ands	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b06      	cmp	r3, #6
 800e380:	d015      	beq.n	800e3ae <HAL_TIM_Base_Start_IT+0xbe>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e388:	d011      	beq.n	800e3ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f042 0201 	orr.w	r2, r2, #1
 800e398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e39a:	e008      	b.n	800e3ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0201 	orr.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e000      	b.n	800e3b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	40010000 	.word	0x40010000
 800e3c4:	40000400 	.word	0x40000400
 800e3c8:	40000800 	.word	0x40000800
 800e3cc:	40000c00 	.word	0x40000c00
 800e3d0:	40010400 	.word	0x40010400
 800e3d4:	40001800 	.word	0x40001800
 800e3d8:	40014000 	.word	0x40014000
 800e3dc:	00010007 	.word	0x00010007

0800e3e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f022 0201 	bic.w	r2, r2, #1
 800e3f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6a1a      	ldr	r2, [r3, #32]
 800e3fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800e402:	4013      	ands	r3, r2
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10f      	bne.n	800e428 <HAL_TIM_Base_Stop_IT+0x48>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6a1a      	ldr	r2, [r3, #32]
 800e40e:	f240 4344 	movw	r3, #1092	; 0x444
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d107      	bne.n	800e428 <HAL_TIM_Base_Stop_IT+0x48>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f022 0201 	bic.w	r2, r2, #1
 800e426:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	370c      	adds	r7, #12
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b082      	sub	sp, #8
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	f003 0302 	and.w	r3, r3, #2
 800e450:	2b02      	cmp	r3, #2
 800e452:	d122      	bne.n	800e49a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	f003 0302 	and.w	r3, r3, #2
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d11b      	bne.n	800e49a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f06f 0202 	mvn.w	r2, #2
 800e46a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f905 	bl	800e690 <HAL_TIM_IC_CaptureCallback>
 800e486:	e005      	b.n	800e494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f8f7 	bl	800e67c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f908 	bl	800e6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	f003 0304 	and.w	r3, r3, #4
 800e4a4:	2b04      	cmp	r3, #4
 800e4a6:	d122      	bne.n	800e4ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	f003 0304 	and.w	r3, r3, #4
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d11b      	bne.n	800e4ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f06f 0204 	mvn.w	r2, #4
 800e4be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d003      	beq.n	800e4dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f8db 	bl	800e690 <HAL_TIM_IC_CaptureCallback>
 800e4da:	e005      	b.n	800e4e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f8cd 	bl	800e67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f8de 	bl	800e6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	f003 0308 	and.w	r3, r3, #8
 800e4f8:	2b08      	cmp	r3, #8
 800e4fa:	d122      	bne.n	800e542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	f003 0308 	and.w	r3, r3, #8
 800e506:	2b08      	cmp	r3, #8
 800e508:	d11b      	bne.n	800e542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f06f 0208 	mvn.w	r2, #8
 800e512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2204      	movs	r2, #4
 800e518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	69db      	ldr	r3, [r3, #28]
 800e520:	f003 0303 	and.w	r3, r3, #3
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f8b1 	bl	800e690 <HAL_TIM_IC_CaptureCallback>
 800e52e:	e005      	b.n	800e53c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f8a3 	bl	800e67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f8b4 	bl	800e6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b10      	cmp	r3, #16
 800e54e:	d122      	bne.n	800e596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	f003 0310 	and.w	r3, r3, #16
 800e55a:	2b10      	cmp	r3, #16
 800e55c:	d11b      	bne.n	800e596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f06f 0210 	mvn.w	r2, #16
 800e566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2208      	movs	r2, #8
 800e56c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f887 	bl	800e690 <HAL_TIM_IC_CaptureCallback>
 800e582:	e005      	b.n	800e590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f879 	bl	800e67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f88a 	bl	800e6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d10e      	bne.n	800e5c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d107      	bne.n	800e5c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f06f 0201 	mvn.w	r2, #1
 800e5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f8 fb95 	bl	8006cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5cc:	2b80      	cmp	r3, #128	; 0x80
 800e5ce:	d10e      	bne.n	800e5ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5da:	2b80      	cmp	r3, #128	; 0x80
 800e5dc:	d107      	bne.n	800e5ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f9a1 	bl	800e930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5fc:	d10e      	bne.n	800e61c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e608:	2b80      	cmp	r3, #128	; 0x80
 800e60a:	d107      	bne.n	800e61c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f994 	bl	800e944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e626:	2b40      	cmp	r3, #64	; 0x40
 800e628:	d10e      	bne.n	800e648 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e634:	2b40      	cmp	r3, #64	; 0x40
 800e636:	d107      	bne.n	800e648 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f838 	bl	800e6b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	f003 0320 	and.w	r3, r3, #32
 800e652:	2b20      	cmp	r3, #32
 800e654:	d10e      	bne.n	800e674 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	f003 0320 	and.w	r3, r3, #32
 800e660:	2b20      	cmp	r3, #32
 800e662:	d107      	bne.n	800e674 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f06f 0220 	mvn.w	r2, #32
 800e66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f954 	bl	800e91c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6ac:	bf00      	nop
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a40      	ldr	r2, [pc, #256]	; (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d013      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ea:	d00f      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4a3d      	ldr	r2, [pc, #244]	; (800e7e4 <TIM_Base_SetConfig+0x118>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d00b      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a3c      	ldr	r2, [pc, #240]	; (800e7e8 <TIM_Base_SetConfig+0x11c>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d007      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a3b      	ldr	r2, [pc, #236]	; (800e7ec <TIM_Base_SetConfig+0x120>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d003      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a3a      	ldr	r2, [pc, #232]	; (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d108      	bne.n	800e71e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4a2f      	ldr	r2, [pc, #188]	; (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d01f      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e72c:	d01b      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a2c      	ldr	r2, [pc, #176]	; (800e7e4 <TIM_Base_SetConfig+0x118>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d017      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a2b      	ldr	r2, [pc, #172]	; (800e7e8 <TIM_Base_SetConfig+0x11c>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d013      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a2a      	ldr	r2, [pc, #168]	; (800e7ec <TIM_Base_SetConfig+0x120>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d00f      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a29      	ldr	r2, [pc, #164]	; (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d00b      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a28      	ldr	r2, [pc, #160]	; (800e7f4 <TIM_Base_SetConfig+0x128>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d007      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a27      	ldr	r2, [pc, #156]	; (800e7f8 <TIM_Base_SetConfig+0x12c>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d003      	beq.n	800e766 <TIM_Base_SetConfig+0x9a>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a26      	ldr	r2, [pc, #152]	; (800e7fc <TIM_Base_SetConfig+0x130>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d108      	bne.n	800e778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	4313      	orrs	r3, r2
 800e776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	4313      	orrs	r3, r2
 800e784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	689a      	ldr	r2, [r3, #8]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a10      	ldr	r2, [pc, #64]	; (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d00f      	beq.n	800e7c4 <TIM_Base_SetConfig+0xf8>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a12      	ldr	r2, [pc, #72]	; (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d00b      	beq.n	800e7c4 <TIM_Base_SetConfig+0xf8>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a11      	ldr	r2, [pc, #68]	; (800e7f4 <TIM_Base_SetConfig+0x128>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d007      	beq.n	800e7c4 <TIM_Base_SetConfig+0xf8>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a10      	ldr	r2, [pc, #64]	; (800e7f8 <TIM_Base_SetConfig+0x12c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d003      	beq.n	800e7c4 <TIM_Base_SetConfig+0xf8>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a0f      	ldr	r2, [pc, #60]	; (800e7fc <TIM_Base_SetConfig+0x130>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d103      	bne.n	800e7cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	691a      	ldr	r2, [r3, #16]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	615a      	str	r2, [r3, #20]
}
 800e7d2:	bf00      	nop
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	40010000 	.word	0x40010000
 800e7e4:	40000400 	.word	0x40000400
 800e7e8:	40000800 	.word	0x40000800
 800e7ec:	40000c00 	.word	0x40000c00
 800e7f0:	40010400 	.word	0x40010400
 800e7f4:	40014000 	.word	0x40014000
 800e7f8:	40014400 	.word	0x40014400
 800e7fc:	40014800 	.word	0x40014800

0800e800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e810:	2b01      	cmp	r3, #1
 800e812:	d101      	bne.n	800e818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e814:	2302      	movs	r3, #2
 800e816:	e06d      	b.n	800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2202      	movs	r2, #2
 800e824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a30      	ldr	r2, [pc, #192]	; (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d004      	beq.n	800e84c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a2f      	ldr	r2, [pc, #188]	; (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d108      	bne.n	800e85e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a20      	ldr	r2, [pc, #128]	; (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d022      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e88a:	d01d      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a1d      	ldr	r2, [pc, #116]	; (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d018      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a1c      	ldr	r2, [pc, #112]	; (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d013      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a1a      	ldr	r2, [pc, #104]	; (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d00e      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a15      	ldr	r2, [pc, #84]	; (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d009      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a16      	ldr	r2, [pc, #88]	; (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d004      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	; (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d10c      	bne.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	40010000 	.word	0x40010000
 800e904:	40010400 	.word	0x40010400
 800e908:	40000400 	.word	0x40000400
 800e90c:	40000800 	.word	0x40000800
 800e910:	40000c00 	.word	0x40000c00
 800e914:	40001800 	.word	0x40001800
 800e918:	40014000 	.word	0x40014000

0800e91c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e042      	b.n	800e9f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e970:	2b00      	cmp	r3, #0
 800e972:	d106      	bne.n	800e982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f8 ff73 	bl	8007868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2224      	movs	r2, #36	; 0x24
 800e986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f022 0201 	bic.w	r2, r2, #1
 800e998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 fbea 	bl	800f174 <UART_SetConfig>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d101      	bne.n	800e9aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e022      	b.n	800e9f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f946 	bl	800fc44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e9c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689a      	ldr	r2, [r3, #8]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e9d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0201 	orr.w	r2, r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f001 f9cd 	bl	800fd88 <UART_CheckIdleState>
 800e9ee:	4603      	mov	r3, r0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b0ba      	sub	sp, #232	; 0xe8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	69db      	ldr	r3, [r3, #28]
 800ea06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea22:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea26:	4013      	ands	r3, r2
 800ea28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d11b      	bne.n	800ea6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea38:	f003 0320 	and.w	r3, r3, #32
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d015      	beq.n	800ea6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea44:	f003 0320 	and.w	r3, r3, #32
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d105      	bne.n	800ea58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d009      	beq.n	800ea6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 835a 	beq.w	800f116 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
      }
      return;
 800ea6a:	e354      	b.n	800f116 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 811f 	beq.w	800ecb4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ea7a:	4b8b      	ldr	r3, [pc, #556]	; (800eca8 <HAL_UART_IRQHandler+0x2b0>)
 800ea7c:	4013      	ands	r3, r2
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ea82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea86:	4b89      	ldr	r3, [pc, #548]	; (800ecac <HAL_UART_IRQHandler+0x2b4>)
 800ea88:	4013      	ands	r3, r2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 8112 	beq.w	800ecb4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d011      	beq.n	800eac0 <HAL_UART_IRQHandler+0xc8>
 800ea9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2201      	movs	r2, #1
 800eaae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eab6:	f043 0201 	orr.w	r2, r3, #1
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac4:	f003 0302 	and.w	r3, r3, #2
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d011      	beq.n	800eaf0 <HAL_UART_IRQHandler+0xf8>
 800eacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00b      	beq.n	800eaf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2202      	movs	r2, #2
 800eade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eae6:	f043 0204 	orr.w	r2, r3, #4
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf4:	f003 0304 	and.w	r3, r3, #4
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d011      	beq.n	800eb20 <HAL_UART_IRQHandler+0x128>
 800eafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00b      	beq.n	800eb20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb16:	f043 0202 	orr.w	r2, r3, #2
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb24:	f003 0308 	and.w	r3, r3, #8
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d017      	beq.n	800eb5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb30:	f003 0320 	and.w	r3, r3, #32
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d105      	bne.n	800eb44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb3c:	4b5a      	ldr	r3, [pc, #360]	; (800eca8 <HAL_UART_IRQHandler+0x2b0>)
 800eb3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00b      	beq.n	800eb5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2208      	movs	r2, #8
 800eb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb52:	f043 0208 	orr.w	r2, r3, #8
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d012      	beq.n	800eb8e <HAL_UART_IRQHandler+0x196>
 800eb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00c      	beq.n	800eb8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb84:	f043 0220 	orr.w	r2, r3, #32
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 82c0 	beq.w	800f11a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb9e:	f003 0320 	and.w	r3, r3, #32
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d013      	beq.n	800ebce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebaa:	f003 0320 	and.w	r3, r3, #32
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d105      	bne.n	800ebbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d007      	beq.n	800ebce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d003      	beq.n	800ebce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe2:	2b40      	cmp	r3, #64	; 0x40
 800ebe4:	d005      	beq.n	800ebf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ebe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ebea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d04f      	beq.n	800ec92 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f001 f9dc 	bl	800ffb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec02:	2b40      	cmp	r3, #64	; 0x40
 800ec04:	d141      	bne.n	800ec8a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3308      	adds	r3, #8
 800ec0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec14:	e853 3f00 	ldrex	r3, [r3]
 800ec18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ec3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ec42:	e841 2300 	strex	r3, r2, [r1]
 800ec46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ec4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1d9      	bne.n	800ec06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d013      	beq.n	800ec82 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec5e:	4a14      	ldr	r2, [pc, #80]	; (800ecb0 <HAL_UART_IRQHandler+0x2b8>)
 800ec60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fa f83c 	bl	8008ce4 <HAL_DMA_Abort_IT>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d017      	beq.n	800eca2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec80:	e00f      	b.n	800eca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 fa60 	bl	800f148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec88:	e00b      	b.n	800eca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 fa5c 	bl	800f148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec90:	e007      	b.n	800eca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fa58 	bl	800f148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800eca0:	e23b      	b.n	800f11a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca2:	bf00      	nop
    return;
 800eca4:	e239      	b.n	800f11a <HAL_UART_IRQHandler+0x722>
 800eca6:	bf00      	nop
 800eca8:	10000001 	.word	0x10000001
 800ecac:	04000120 	.word	0x04000120
 800ecb0:	0801007d 	.word	0x0801007d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	f040 81ce 	bne.w	800f05a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ecbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc2:	f003 0310 	and.w	r3, r3, #16
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f000 81c7 	beq.w	800f05a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 81c0 	beq.w	800f05a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2210      	movs	r2, #16
 800ece0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecec:	2b40      	cmp	r3, #64	; 0x40
 800ecee:	f040 813b 	bne.w	800ef68 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a8b      	ldr	r2, [pc, #556]	; (800ef28 <HAL_UART_IRQHandler+0x530>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d059      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a89      	ldr	r2, [pc, #548]	; (800ef2c <HAL_UART_IRQHandler+0x534>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d053      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a87      	ldr	r2, [pc, #540]	; (800ef30 <HAL_UART_IRQHandler+0x538>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d04d      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a85      	ldr	r2, [pc, #532]	; (800ef34 <HAL_UART_IRQHandler+0x53c>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d047      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a83      	ldr	r2, [pc, #524]	; (800ef38 <HAL_UART_IRQHandler+0x540>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d041      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a81      	ldr	r2, [pc, #516]	; (800ef3c <HAL_UART_IRQHandler+0x544>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d03b      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a7f      	ldr	r2, [pc, #508]	; (800ef40 <HAL_UART_IRQHandler+0x548>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d035      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a7d      	ldr	r2, [pc, #500]	; (800ef44 <HAL_UART_IRQHandler+0x54c>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d02f      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a7b      	ldr	r2, [pc, #492]	; (800ef48 <HAL_UART_IRQHandler+0x550>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d029      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a79      	ldr	r2, [pc, #484]	; (800ef4c <HAL_UART_IRQHandler+0x554>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d023      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a77      	ldr	r2, [pc, #476]	; (800ef50 <HAL_UART_IRQHandler+0x558>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d01d      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a75      	ldr	r2, [pc, #468]	; (800ef54 <HAL_UART_IRQHandler+0x55c>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d017      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a73      	ldr	r2, [pc, #460]	; (800ef58 <HAL_UART_IRQHandler+0x560>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d011      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a71      	ldr	r2, [pc, #452]	; (800ef5c <HAL_UART_IRQHandler+0x564>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00b      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a6f      	ldr	r2, [pc, #444]	; (800ef60 <HAL_UART_IRQHandler+0x568>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d005      	beq.n	800edb2 <HAL_UART_IRQHandler+0x3ba>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a6d      	ldr	r2, [pc, #436]	; (800ef64 <HAL_UART_IRQHandler+0x56c>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d105      	bne.n	800edbe <HAL_UART_IRQHandler+0x3c6>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	e004      	b.n	800edc8 <HAL_UART_IRQHandler+0x3d0>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800edcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 81a4 	beq.w	800f11e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ede0:	429a      	cmp	r2, r3
 800ede2:	f080 819c 	bcs.w	800f11e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfa:	f000 8086 	beq.w	800ef0a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee0a:	e853 3f00 	ldrex	r3, [r3]
 800ee0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee2c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee38:	e841 2300 	strex	r3, r2, [r1]
 800ee3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1da      	bne.n	800edfe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee52:	e853 3f00 	ldrex	r3, [r3]
 800ee56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee5a:	f023 0301 	bic.w	r3, r3, #1
 800ee5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	3308      	adds	r3, #8
 800ee68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee78:	e841 2300 	strex	r3, r2, [r1]
 800ee7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1e1      	bne.n	800ee48 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	3308      	adds	r3, #8
 800ee8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee8e:	e853 3f00 	ldrex	r3, [r3]
 800ee92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eea8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eeaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eeae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eeb0:	e841 2300 	strex	r3, r2, [r1]
 800eeb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eeb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1e3      	bne.n	800ee84 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2220      	movs	r2, #32
 800eec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed2:	e853 3f00 	ldrex	r3, [r3]
 800eed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeda:	f023 0310 	bic.w	r3, r3, #16
 800eede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eeec:	65bb      	str	r3, [r7, #88]	; 0x58
 800eeee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eef4:	e841 2300 	strex	r3, r2, [r1]
 800eef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e4      	bne.n	800eeca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7f9 fbcf 	bl	80086a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 f91c 	bl	800f15c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef24:	e0fb      	b.n	800f11e <HAL_UART_IRQHandler+0x726>
 800ef26:	bf00      	nop
 800ef28:	40020010 	.word	0x40020010
 800ef2c:	40020028 	.word	0x40020028
 800ef30:	40020040 	.word	0x40020040
 800ef34:	40020058 	.word	0x40020058
 800ef38:	40020070 	.word	0x40020070
 800ef3c:	40020088 	.word	0x40020088
 800ef40:	400200a0 	.word	0x400200a0
 800ef44:	400200b8 	.word	0x400200b8
 800ef48:	40020410 	.word	0x40020410
 800ef4c:	40020428 	.word	0x40020428
 800ef50:	40020440 	.word	0x40020440
 800ef54:	40020458 	.word	0x40020458
 800ef58:	40020470 	.word	0x40020470
 800ef5c:	40020488 	.word	0x40020488
 800ef60:	400204a0 	.word	0x400204a0
 800ef64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 80cc 	beq.w	800f122 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ef8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 80c7 	beq.w	800f122 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	e853 3f00 	ldrex	r3, [r3]
 800efa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	461a      	mov	r2, r3
 800efb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efb6:	647b      	str	r3, [r7, #68]	; 0x44
 800efb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efbe:	e841 2300 	strex	r3, r2, [r1]
 800efc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e4      	bne.n	800ef94 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3308      	adds	r3, #8
 800efd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	e853 3f00 	ldrex	r3, [r3]
 800efd8:	623b      	str	r3, [r7, #32]
   return(result);
 800efda:	6a3a      	ldr	r2, [r7, #32]
 800efdc:	4b54      	ldr	r3, [pc, #336]	; (800f130 <HAL_UART_IRQHandler+0x738>)
 800efde:	4013      	ands	r3, r2
 800efe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3308      	adds	r3, #8
 800efea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800efee:	633a      	str	r2, [r7, #48]	; 0x30
 800eff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eff6:	e841 2300 	strex	r3, r2, [r1]
 800effa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e3      	bne.n	800efca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2220      	movs	r2, #32
 800f006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	e853 3f00 	ldrex	r3, [r3]
 800f022:	60fb      	str	r3, [r7, #12]
   return(result);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f023 0310 	bic.w	r3, r3, #16
 800f02a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f038:	61fb      	str	r3, [r7, #28]
 800f03a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03c:	69b9      	ldr	r1, [r7, #24]
 800f03e:	69fa      	ldr	r2, [r7, #28]
 800f040:	e841 2300 	strex	r3, r2, [r1]
 800f044:	617b      	str	r3, [r7, #20]
   return(result);
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e4      	bne.n	800f016 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f04c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f050:	4619      	mov	r1, r3
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 f882 	bl	800f15c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f058:	e063      	b.n	800f122 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f05e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00e      	beq.n	800f084 <HAL_UART_IRQHandler+0x68c>
 800f066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d008      	beq.n	800f084 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f07a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f001 f83e 	bl	80100fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f082:	e051      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d014      	beq.n	800f0ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d105      	bne.n	800f0a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d008      	beq.n	800f0ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d03a      	beq.n	800f126 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	4798      	blx	r3
    }
    return;
 800f0b8:	e035      	b.n	800f126 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d009      	beq.n	800f0da <HAL_UART_IRQHandler+0x6e2>
 800f0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 ffe8 	bl	80100a8 <UART_EndTransmit_IT>
    return;
 800f0d8:	e026      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d009      	beq.n	800f0fa <HAL_UART_IRQHandler+0x702>
 800f0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d003      	beq.n	800f0fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f001 f817 	bl	8010126 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0f8:	e016      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f102:	2b00      	cmp	r3, #0
 800f104:	d010      	beq.n	800f128 <HAL_UART_IRQHandler+0x730>
 800f106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	da0c      	bge.n	800f128 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 ffff 	bl	8010112 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f114:	e008      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
      return;
 800f116:	bf00      	nop
 800f118:	e006      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
    return;
 800f11a:	bf00      	nop
 800f11c:	e004      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
      return;
 800f11e:	bf00      	nop
 800f120:	e002      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
      return;
 800f122:	bf00      	nop
 800f124:	e000      	b.n	800f128 <HAL_UART_IRQHandler+0x730>
    return;
 800f126:	bf00      	nop
  }
}
 800f128:	37e8      	adds	r7, #232	; 0xe8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	effffffe 	.word	0xeffffffe

0800f134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f13c:	bf00      	nop
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f150:	bf00      	nop
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	460b      	mov	r3, r1
 800f166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f178:	b092      	sub	sp, #72	; 0x48
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	689a      	ldr	r2, [r3, #8]
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	431a      	orrs	r2, r3
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	431a      	orrs	r2, r3
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	4313      	orrs	r3, r2
 800f19a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	4bbe      	ldr	r3, [pc, #760]	; (800f49c <UART_SetConfig+0x328>)
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	6812      	ldr	r2, [r2, #0]
 800f1aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1ac:	430b      	orrs	r3, r1
 800f1ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	68da      	ldr	r2, [r3, #12]
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	430a      	orrs	r2, r1
 800f1c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4ab3      	ldr	r2, [pc, #716]	; (800f4a0 <UART_SetConfig+0x32c>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d004      	beq.n	800f1e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	689a      	ldr	r2, [r3, #8]
 800f1e6:	4baf      	ldr	r3, [pc, #700]	; (800f4a4 <UART_SetConfig+0x330>)
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	6812      	ldr	r2, [r2, #0]
 800f1ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1f0:	430b      	orrs	r3, r1
 800f1f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	f023 010f 	bic.w	r1, r3, #15
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	430a      	orrs	r2, r1
 800f208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4aa6      	ldr	r2, [pc, #664]	; (800f4a8 <UART_SetConfig+0x334>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d177      	bne.n	800f304 <UART_SetConfig+0x190>
 800f214:	4ba5      	ldr	r3, [pc, #660]	; (800f4ac <UART_SetConfig+0x338>)
 800f216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f21c:	2b28      	cmp	r3, #40	; 0x28
 800f21e:	d86d      	bhi.n	800f2fc <UART_SetConfig+0x188>
 800f220:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <UART_SetConfig+0xb4>)
 800f222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f226:	bf00      	nop
 800f228:	0800f2cd 	.word	0x0800f2cd
 800f22c:	0800f2fd 	.word	0x0800f2fd
 800f230:	0800f2fd 	.word	0x0800f2fd
 800f234:	0800f2fd 	.word	0x0800f2fd
 800f238:	0800f2fd 	.word	0x0800f2fd
 800f23c:	0800f2fd 	.word	0x0800f2fd
 800f240:	0800f2fd 	.word	0x0800f2fd
 800f244:	0800f2fd 	.word	0x0800f2fd
 800f248:	0800f2d5 	.word	0x0800f2d5
 800f24c:	0800f2fd 	.word	0x0800f2fd
 800f250:	0800f2fd 	.word	0x0800f2fd
 800f254:	0800f2fd 	.word	0x0800f2fd
 800f258:	0800f2fd 	.word	0x0800f2fd
 800f25c:	0800f2fd 	.word	0x0800f2fd
 800f260:	0800f2fd 	.word	0x0800f2fd
 800f264:	0800f2fd 	.word	0x0800f2fd
 800f268:	0800f2dd 	.word	0x0800f2dd
 800f26c:	0800f2fd 	.word	0x0800f2fd
 800f270:	0800f2fd 	.word	0x0800f2fd
 800f274:	0800f2fd 	.word	0x0800f2fd
 800f278:	0800f2fd 	.word	0x0800f2fd
 800f27c:	0800f2fd 	.word	0x0800f2fd
 800f280:	0800f2fd 	.word	0x0800f2fd
 800f284:	0800f2fd 	.word	0x0800f2fd
 800f288:	0800f2e5 	.word	0x0800f2e5
 800f28c:	0800f2fd 	.word	0x0800f2fd
 800f290:	0800f2fd 	.word	0x0800f2fd
 800f294:	0800f2fd 	.word	0x0800f2fd
 800f298:	0800f2fd 	.word	0x0800f2fd
 800f29c:	0800f2fd 	.word	0x0800f2fd
 800f2a0:	0800f2fd 	.word	0x0800f2fd
 800f2a4:	0800f2fd 	.word	0x0800f2fd
 800f2a8:	0800f2ed 	.word	0x0800f2ed
 800f2ac:	0800f2fd 	.word	0x0800f2fd
 800f2b0:	0800f2fd 	.word	0x0800f2fd
 800f2b4:	0800f2fd 	.word	0x0800f2fd
 800f2b8:	0800f2fd 	.word	0x0800f2fd
 800f2bc:	0800f2fd 	.word	0x0800f2fd
 800f2c0:	0800f2fd 	.word	0x0800f2fd
 800f2c4:	0800f2fd 	.word	0x0800f2fd
 800f2c8:	0800f2f5 	.word	0x0800f2f5
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2d2:	e222      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2d4:	2304      	movs	r3, #4
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2da:	e21e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2dc:	2308      	movs	r3, #8
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e2:	e21a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2e4:	2310      	movs	r3, #16
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ea:	e216      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2ec:	2320      	movs	r3, #32
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f2:	e212      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2f4:	2340      	movs	r3, #64	; 0x40
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e20e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f2fc:	2380      	movs	r3, #128	; 0x80
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e20a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a69      	ldr	r2, [pc, #420]	; (800f4b0 <UART_SetConfig+0x33c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d130      	bne.n	800f370 <UART_SetConfig+0x1fc>
 800f30e:	4b67      	ldr	r3, [pc, #412]	; (800f4ac <UART_SetConfig+0x338>)
 800f310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f312:	f003 0307 	and.w	r3, r3, #7
 800f316:	2b05      	cmp	r3, #5
 800f318:	d826      	bhi.n	800f368 <UART_SetConfig+0x1f4>
 800f31a:	a201      	add	r2, pc, #4	; (adr r2, 800f320 <UART_SetConfig+0x1ac>)
 800f31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f320:	0800f339 	.word	0x0800f339
 800f324:	0800f341 	.word	0x0800f341
 800f328:	0800f349 	.word	0x0800f349
 800f32c:	0800f351 	.word	0x0800f351
 800f330:	0800f359 	.word	0x0800f359
 800f334:	0800f361 	.word	0x0800f361
 800f338:	2300      	movs	r3, #0
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33e:	e1ec      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f340:	2304      	movs	r3, #4
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f346:	e1e8      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f348:	2308      	movs	r3, #8
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34e:	e1e4      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f350:	2310      	movs	r3, #16
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e1e0      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f358:	2320      	movs	r3, #32
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e1dc      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f360:	2340      	movs	r3, #64	; 0x40
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e1d8      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f368:	2380      	movs	r3, #128	; 0x80
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e1d4      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a4f      	ldr	r2, [pc, #316]	; (800f4b4 <UART_SetConfig+0x340>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d130      	bne.n	800f3dc <UART_SetConfig+0x268>
 800f37a:	4b4c      	ldr	r3, [pc, #304]	; (800f4ac <UART_SetConfig+0x338>)
 800f37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f37e:	f003 0307 	and.w	r3, r3, #7
 800f382:	2b05      	cmp	r3, #5
 800f384:	d826      	bhi.n	800f3d4 <UART_SetConfig+0x260>
 800f386:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <UART_SetConfig+0x218>)
 800f388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38c:	0800f3a5 	.word	0x0800f3a5
 800f390:	0800f3ad 	.word	0x0800f3ad
 800f394:	0800f3b5 	.word	0x0800f3b5
 800f398:	0800f3bd 	.word	0x0800f3bd
 800f39c:	0800f3c5 	.word	0x0800f3c5
 800f3a0:	0800f3cd 	.word	0x0800f3cd
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3aa:	e1b6      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3ac:	2304      	movs	r3, #4
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3b2:	e1b2      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3b4:	2308      	movs	r3, #8
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ba:	e1ae      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3bc:	2310      	movs	r3, #16
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e1aa      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3c4:	2320      	movs	r3, #32
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ca:	e1a6      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3cc:	2340      	movs	r3, #64	; 0x40
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e1a2      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3d4:	2380      	movs	r3, #128	; 0x80
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3da:	e19e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a35      	ldr	r2, [pc, #212]	; (800f4b8 <UART_SetConfig+0x344>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d130      	bne.n	800f448 <UART_SetConfig+0x2d4>
 800f3e6:	4b31      	ldr	r3, [pc, #196]	; (800f4ac <UART_SetConfig+0x338>)
 800f3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3ea:	f003 0307 	and.w	r3, r3, #7
 800f3ee:	2b05      	cmp	r3, #5
 800f3f0:	d826      	bhi.n	800f440 <UART_SetConfig+0x2cc>
 800f3f2:	a201      	add	r2, pc, #4	; (adr r2, 800f3f8 <UART_SetConfig+0x284>)
 800f3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f8:	0800f411 	.word	0x0800f411
 800f3fc:	0800f419 	.word	0x0800f419
 800f400:	0800f421 	.word	0x0800f421
 800f404:	0800f429 	.word	0x0800f429
 800f408:	0800f431 	.word	0x0800f431
 800f40c:	0800f439 	.word	0x0800f439
 800f410:	2300      	movs	r3, #0
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e180      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f418:	2304      	movs	r3, #4
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e17c      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f420:	2308      	movs	r3, #8
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e178      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f428:	2310      	movs	r3, #16
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e174      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f430:	2320      	movs	r3, #32
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e170      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f438:	2340      	movs	r3, #64	; 0x40
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e16c      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f440:	2380      	movs	r3, #128	; 0x80
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e168      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a1b      	ldr	r2, [pc, #108]	; (800f4bc <UART_SetConfig+0x348>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d142      	bne.n	800f4d8 <UART_SetConfig+0x364>
 800f452:	4b16      	ldr	r3, [pc, #88]	; (800f4ac <UART_SetConfig+0x338>)
 800f454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	2b05      	cmp	r3, #5
 800f45c:	d838      	bhi.n	800f4d0 <UART_SetConfig+0x35c>
 800f45e:	a201      	add	r2, pc, #4	; (adr r2, 800f464 <UART_SetConfig+0x2f0>)
 800f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f464:	0800f47d 	.word	0x0800f47d
 800f468:	0800f485 	.word	0x0800f485
 800f46c:	0800f48d 	.word	0x0800f48d
 800f470:	0800f495 	.word	0x0800f495
 800f474:	0800f4c1 	.word	0x0800f4c1
 800f478:	0800f4c9 	.word	0x0800f4c9
 800f47c:	2300      	movs	r3, #0
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e14a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f484:	2304      	movs	r3, #4
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e146      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f48c:	2308      	movs	r3, #8
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e142      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f494:	2310      	movs	r3, #16
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e13e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f49c:	cfff69f3 	.word	0xcfff69f3
 800f4a0:	58000c00 	.word	0x58000c00
 800f4a4:	11fff4ff 	.word	0x11fff4ff
 800f4a8:	40011000 	.word	0x40011000
 800f4ac:	58024400 	.word	0x58024400
 800f4b0:	40004400 	.word	0x40004400
 800f4b4:	40004800 	.word	0x40004800
 800f4b8:	40004c00 	.word	0x40004c00
 800f4bc:	40005000 	.word	0x40005000
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c6:	e128      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f4c8:	2340      	movs	r3, #64	; 0x40
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ce:	e124      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d6:	e120      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4acb      	ldr	r2, [pc, #812]	; (800f80c <UART_SetConfig+0x698>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d176      	bne.n	800f5d0 <UART_SetConfig+0x45c>
 800f4e2:	4bcb      	ldr	r3, [pc, #812]	; (800f810 <UART_SetConfig+0x69c>)
 800f4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4ea:	2b28      	cmp	r3, #40	; 0x28
 800f4ec:	d86c      	bhi.n	800f5c8 <UART_SetConfig+0x454>
 800f4ee:	a201      	add	r2, pc, #4	; (adr r2, 800f4f4 <UART_SetConfig+0x380>)
 800f4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f4:	0800f599 	.word	0x0800f599
 800f4f8:	0800f5c9 	.word	0x0800f5c9
 800f4fc:	0800f5c9 	.word	0x0800f5c9
 800f500:	0800f5c9 	.word	0x0800f5c9
 800f504:	0800f5c9 	.word	0x0800f5c9
 800f508:	0800f5c9 	.word	0x0800f5c9
 800f50c:	0800f5c9 	.word	0x0800f5c9
 800f510:	0800f5c9 	.word	0x0800f5c9
 800f514:	0800f5a1 	.word	0x0800f5a1
 800f518:	0800f5c9 	.word	0x0800f5c9
 800f51c:	0800f5c9 	.word	0x0800f5c9
 800f520:	0800f5c9 	.word	0x0800f5c9
 800f524:	0800f5c9 	.word	0x0800f5c9
 800f528:	0800f5c9 	.word	0x0800f5c9
 800f52c:	0800f5c9 	.word	0x0800f5c9
 800f530:	0800f5c9 	.word	0x0800f5c9
 800f534:	0800f5a9 	.word	0x0800f5a9
 800f538:	0800f5c9 	.word	0x0800f5c9
 800f53c:	0800f5c9 	.word	0x0800f5c9
 800f540:	0800f5c9 	.word	0x0800f5c9
 800f544:	0800f5c9 	.word	0x0800f5c9
 800f548:	0800f5c9 	.word	0x0800f5c9
 800f54c:	0800f5c9 	.word	0x0800f5c9
 800f550:	0800f5c9 	.word	0x0800f5c9
 800f554:	0800f5b1 	.word	0x0800f5b1
 800f558:	0800f5c9 	.word	0x0800f5c9
 800f55c:	0800f5c9 	.word	0x0800f5c9
 800f560:	0800f5c9 	.word	0x0800f5c9
 800f564:	0800f5c9 	.word	0x0800f5c9
 800f568:	0800f5c9 	.word	0x0800f5c9
 800f56c:	0800f5c9 	.word	0x0800f5c9
 800f570:	0800f5c9 	.word	0x0800f5c9
 800f574:	0800f5b9 	.word	0x0800f5b9
 800f578:	0800f5c9 	.word	0x0800f5c9
 800f57c:	0800f5c9 	.word	0x0800f5c9
 800f580:	0800f5c9 	.word	0x0800f5c9
 800f584:	0800f5c9 	.word	0x0800f5c9
 800f588:	0800f5c9 	.word	0x0800f5c9
 800f58c:	0800f5c9 	.word	0x0800f5c9
 800f590:	0800f5c9 	.word	0x0800f5c9
 800f594:	0800f5c1 	.word	0x0800f5c1
 800f598:	2301      	movs	r3, #1
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59e:	e0bc      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5a0:	2304      	movs	r3, #4
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a6:	e0b8      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5a8:	2308      	movs	r3, #8
 800f5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ae:	e0b4      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5b0:	2310      	movs	r3, #16
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b6:	e0b0      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5b8:	2320      	movs	r3, #32
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5be:	e0ac      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5c0:	2340      	movs	r3, #64	; 0x40
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c6:	e0a8      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5c8:	2380      	movs	r3, #128	; 0x80
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ce:	e0a4      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a8f      	ldr	r2, [pc, #572]	; (800f814 <UART_SetConfig+0x6a0>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d130      	bne.n	800f63c <UART_SetConfig+0x4c8>
 800f5da:	4b8d      	ldr	r3, [pc, #564]	; (800f810 <UART_SetConfig+0x69c>)
 800f5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5de:	f003 0307 	and.w	r3, r3, #7
 800f5e2:	2b05      	cmp	r3, #5
 800f5e4:	d826      	bhi.n	800f634 <UART_SetConfig+0x4c0>
 800f5e6:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <UART_SetConfig+0x478>)
 800f5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ec:	0800f605 	.word	0x0800f605
 800f5f0:	0800f60d 	.word	0x0800f60d
 800f5f4:	0800f615 	.word	0x0800f615
 800f5f8:	0800f61d 	.word	0x0800f61d
 800f5fc:	0800f625 	.word	0x0800f625
 800f600:	0800f62d 	.word	0x0800f62d
 800f604:	2300      	movs	r3, #0
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60a:	e086      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f60c:	2304      	movs	r3, #4
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f612:	e082      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f614:	2308      	movs	r3, #8
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61a:	e07e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f61c:	2310      	movs	r3, #16
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e07a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f624:	2320      	movs	r3, #32
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e076      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f62c:	2340      	movs	r3, #64	; 0x40
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e072      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f634:	2380      	movs	r3, #128	; 0x80
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e06e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a75      	ldr	r2, [pc, #468]	; (800f818 <UART_SetConfig+0x6a4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d130      	bne.n	800f6a8 <UART_SetConfig+0x534>
 800f646:	4b72      	ldr	r3, [pc, #456]	; (800f810 <UART_SetConfig+0x69c>)
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	f003 0307 	and.w	r3, r3, #7
 800f64e:	2b05      	cmp	r3, #5
 800f650:	d826      	bhi.n	800f6a0 <UART_SetConfig+0x52c>
 800f652:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0x4e4>)
 800f654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f658:	0800f671 	.word	0x0800f671
 800f65c:	0800f679 	.word	0x0800f679
 800f660:	0800f681 	.word	0x0800f681
 800f664:	0800f689 	.word	0x0800f689
 800f668:	0800f691 	.word	0x0800f691
 800f66c:	0800f699 	.word	0x0800f699
 800f670:	2300      	movs	r3, #0
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f676:	e050      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f678:	2304      	movs	r3, #4
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67e:	e04c      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f680:	2308      	movs	r3, #8
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f686:	e048      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f688:	2310      	movs	r3, #16
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e044      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f690:	2320      	movs	r3, #32
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e040      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f698:	2340      	movs	r3, #64	; 0x40
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e03c      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6a0:	2380      	movs	r3, #128	; 0x80
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a6:	e038      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a5b      	ldr	r2, [pc, #364]	; (800f81c <UART_SetConfig+0x6a8>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d130      	bne.n	800f714 <UART_SetConfig+0x5a0>
 800f6b2:	4b57      	ldr	r3, [pc, #348]	; (800f810 <UART_SetConfig+0x69c>)
 800f6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6b6:	f003 0307 	and.w	r3, r3, #7
 800f6ba:	2b05      	cmp	r3, #5
 800f6bc:	d826      	bhi.n	800f70c <UART_SetConfig+0x598>
 800f6be:	a201      	add	r2, pc, #4	; (adr r2, 800f6c4 <UART_SetConfig+0x550>)
 800f6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c4:	0800f6dd 	.word	0x0800f6dd
 800f6c8:	0800f6e5 	.word	0x0800f6e5
 800f6cc:	0800f6ed 	.word	0x0800f6ed
 800f6d0:	0800f6f5 	.word	0x0800f6f5
 800f6d4:	0800f6fd 	.word	0x0800f6fd
 800f6d8:	0800f705 	.word	0x0800f705
 800f6dc:	2302      	movs	r3, #2
 800f6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e2:	e01a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6e4:	2304      	movs	r3, #4
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ea:	e016      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6ec:	2308      	movs	r3, #8
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6f2:	e012      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6f4:	2310      	movs	r3, #16
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fa:	e00e      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f6fc:	2320      	movs	r3, #32
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e00a      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f704:	2340      	movs	r3, #64	; 0x40
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e006      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f70c:	2380      	movs	r3, #128	; 0x80
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e002      	b.n	800f71a <UART_SetConfig+0x5a6>
 800f714:	2380      	movs	r3, #128	; 0x80
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a3f      	ldr	r2, [pc, #252]	; (800f81c <UART_SetConfig+0x6a8>)
 800f720:	4293      	cmp	r3, r2
 800f722:	f040 80f8 	bne.w	800f916 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	dc46      	bgt.n	800f7bc <UART_SetConfig+0x648>
 800f72e:	2b02      	cmp	r3, #2
 800f730:	f2c0 8082 	blt.w	800f838 <UART_SetConfig+0x6c4>
 800f734:	3b02      	subs	r3, #2
 800f736:	2b1e      	cmp	r3, #30
 800f738:	d87e      	bhi.n	800f838 <UART_SetConfig+0x6c4>
 800f73a:	a201      	add	r2, pc, #4	; (adr r2, 800f740 <UART_SetConfig+0x5cc>)
 800f73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f740:	0800f7c3 	.word	0x0800f7c3
 800f744:	0800f839 	.word	0x0800f839
 800f748:	0800f7cb 	.word	0x0800f7cb
 800f74c:	0800f839 	.word	0x0800f839
 800f750:	0800f839 	.word	0x0800f839
 800f754:	0800f839 	.word	0x0800f839
 800f758:	0800f7db 	.word	0x0800f7db
 800f75c:	0800f839 	.word	0x0800f839
 800f760:	0800f839 	.word	0x0800f839
 800f764:	0800f839 	.word	0x0800f839
 800f768:	0800f839 	.word	0x0800f839
 800f76c:	0800f839 	.word	0x0800f839
 800f770:	0800f839 	.word	0x0800f839
 800f774:	0800f839 	.word	0x0800f839
 800f778:	0800f7eb 	.word	0x0800f7eb
 800f77c:	0800f839 	.word	0x0800f839
 800f780:	0800f839 	.word	0x0800f839
 800f784:	0800f839 	.word	0x0800f839
 800f788:	0800f839 	.word	0x0800f839
 800f78c:	0800f839 	.word	0x0800f839
 800f790:	0800f839 	.word	0x0800f839
 800f794:	0800f839 	.word	0x0800f839
 800f798:	0800f839 	.word	0x0800f839
 800f79c:	0800f839 	.word	0x0800f839
 800f7a0:	0800f839 	.word	0x0800f839
 800f7a4:	0800f839 	.word	0x0800f839
 800f7a8:	0800f839 	.word	0x0800f839
 800f7ac:	0800f839 	.word	0x0800f839
 800f7b0:	0800f839 	.word	0x0800f839
 800f7b4:	0800f839 	.word	0x0800f839
 800f7b8:	0800f82b 	.word	0x0800f82b
 800f7bc:	2b40      	cmp	r3, #64	; 0x40
 800f7be:	d037      	beq.n	800f830 <UART_SetConfig+0x6bc>
 800f7c0:	e03a      	b.n	800f838 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f7c2:	f7fd fd3b 	bl	800d23c <HAL_RCCEx_GetD3PCLK1Freq>
 800f7c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7c8:	e03c      	b.n	800f844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd fd4a 	bl	800d268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7d8:	e034      	b.n	800f844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7da:	f107 0318 	add.w	r3, r7, #24
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fd fe96 	bl	800d510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7e8:	e02c      	b.n	800f844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7ea:	4b09      	ldr	r3, [pc, #36]	; (800f810 <UART_SetConfig+0x69c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f003 0320 	and.w	r3, r3, #32
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d016      	beq.n	800f824 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7f6:	4b06      	ldr	r3, [pc, #24]	; (800f810 <UART_SetConfig+0x69c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	08db      	lsrs	r3, r3, #3
 800f7fc:	f003 0303 	and.w	r3, r3, #3
 800f800:	4a07      	ldr	r2, [pc, #28]	; (800f820 <UART_SetConfig+0x6ac>)
 800f802:	fa22 f303 	lsr.w	r3, r2, r3
 800f806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f808:	e01c      	b.n	800f844 <UART_SetConfig+0x6d0>
 800f80a:	bf00      	nop
 800f80c:	40011400 	.word	0x40011400
 800f810:	58024400 	.word	0x58024400
 800f814:	40007800 	.word	0x40007800
 800f818:	40007c00 	.word	0x40007c00
 800f81c:	58000c00 	.word	0x58000c00
 800f820:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f824:	4b9d      	ldr	r3, [pc, #628]	; (800fa9c <UART_SetConfig+0x928>)
 800f826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f828:	e00c      	b.n	800f844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f82a:	4b9d      	ldr	r3, [pc, #628]	; (800faa0 <UART_SetConfig+0x92c>)
 800f82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f82e:	e009      	b.n	800f844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f836:	e005      	b.n	800f844 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f842:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f846:	2b00      	cmp	r3, #0
 800f848:	f000 81de 	beq.w	800fc08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f850:	4a94      	ldr	r2, [pc, #592]	; (800faa4 <UART_SetConfig+0x930>)
 800f852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f856:	461a      	mov	r2, r3
 800f858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f85e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	4613      	mov	r3, r2
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	4413      	add	r3, r2
 800f86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d305      	bcc.n	800f87c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f878:	429a      	cmp	r2, r3
 800f87a:	d903      	bls.n	800f884 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f882:	e1c1      	b.n	800fc08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f886:	2200      	movs	r2, #0
 800f888:	60bb      	str	r3, [r7, #8]
 800f88a:	60fa      	str	r2, [r7, #12]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f890:	4a84      	ldr	r2, [pc, #528]	; (800faa4 <UART_SetConfig+0x930>)
 800f892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f896:	b29b      	uxth	r3, r3
 800f898:	2200      	movs	r2, #0
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	607a      	str	r2, [r7, #4]
 800f89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f8a6:	f7f0 fd6b 	bl	8000380 <__aeabi_uldivmod>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	f04f 0200 	mov.w	r2, #0
 800f8b6:	f04f 0300 	mov.w	r3, #0
 800f8ba:	020b      	lsls	r3, r1, #8
 800f8bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f8c0:	0202      	lsls	r2, r0, #8
 800f8c2:	6979      	ldr	r1, [r7, #20]
 800f8c4:	6849      	ldr	r1, [r1, #4]
 800f8c6:	0849      	lsrs	r1, r1, #1
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	eb12 0804 	adds.w	r8, r2, r4
 800f8d2:	eb43 0905 	adc.w	r9, r3, r5
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	469a      	mov	sl, r3
 800f8de:	4693      	mov	fp, r2
 800f8e0:	4652      	mov	r2, sl
 800f8e2:	465b      	mov	r3, fp
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	4649      	mov	r1, r9
 800f8e8:	f7f0 fd4a 	bl	8000380 <__aeabi_uldivmod>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8fa:	d308      	bcc.n	800f90e <UART_SetConfig+0x79a>
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f902:	d204      	bcs.n	800f90e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f90a:	60da      	str	r2, [r3, #12]
 800f90c:	e17c      	b.n	800fc08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f914:	e178      	b.n	800fc08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	69db      	ldr	r3, [r3, #28]
 800f91a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f91e:	f040 80c5 	bne.w	800faac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f926:	2b20      	cmp	r3, #32
 800f928:	dc48      	bgt.n	800f9bc <UART_SetConfig+0x848>
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	db7b      	blt.n	800fa26 <UART_SetConfig+0x8b2>
 800f92e:	2b20      	cmp	r3, #32
 800f930:	d879      	bhi.n	800fa26 <UART_SetConfig+0x8b2>
 800f932:	a201      	add	r2, pc, #4	; (adr r2, 800f938 <UART_SetConfig+0x7c4>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f9c3 	.word	0x0800f9c3
 800f93c:	0800f9cb 	.word	0x0800f9cb
 800f940:	0800fa27 	.word	0x0800fa27
 800f944:	0800fa27 	.word	0x0800fa27
 800f948:	0800f9d3 	.word	0x0800f9d3
 800f94c:	0800fa27 	.word	0x0800fa27
 800f950:	0800fa27 	.word	0x0800fa27
 800f954:	0800fa27 	.word	0x0800fa27
 800f958:	0800f9e3 	.word	0x0800f9e3
 800f95c:	0800fa27 	.word	0x0800fa27
 800f960:	0800fa27 	.word	0x0800fa27
 800f964:	0800fa27 	.word	0x0800fa27
 800f968:	0800fa27 	.word	0x0800fa27
 800f96c:	0800fa27 	.word	0x0800fa27
 800f970:	0800fa27 	.word	0x0800fa27
 800f974:	0800fa27 	.word	0x0800fa27
 800f978:	0800f9f3 	.word	0x0800f9f3
 800f97c:	0800fa27 	.word	0x0800fa27
 800f980:	0800fa27 	.word	0x0800fa27
 800f984:	0800fa27 	.word	0x0800fa27
 800f988:	0800fa27 	.word	0x0800fa27
 800f98c:	0800fa27 	.word	0x0800fa27
 800f990:	0800fa27 	.word	0x0800fa27
 800f994:	0800fa27 	.word	0x0800fa27
 800f998:	0800fa27 	.word	0x0800fa27
 800f99c:	0800fa27 	.word	0x0800fa27
 800f9a0:	0800fa27 	.word	0x0800fa27
 800f9a4:	0800fa27 	.word	0x0800fa27
 800f9a8:	0800fa27 	.word	0x0800fa27
 800f9ac:	0800fa27 	.word	0x0800fa27
 800f9b0:	0800fa27 	.word	0x0800fa27
 800f9b4:	0800fa27 	.word	0x0800fa27
 800f9b8:	0800fa19 	.word	0x0800fa19
 800f9bc:	2b40      	cmp	r3, #64	; 0x40
 800f9be:	d02e      	beq.n	800fa1e <UART_SetConfig+0x8aa>
 800f9c0:	e031      	b.n	800fa26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9c2:	f7fc fcc9 	bl	800c358 <HAL_RCC_GetPCLK1Freq>
 800f9c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9c8:	e033      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9ca:	f7fc fcdb 	bl	800c384 <HAL_RCC_GetPCLK2Freq>
 800f9ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9d0:	e02f      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fd fc46 	bl	800d268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e0:	e027      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9e2:	f107 0318 	add.w	r3, r7, #24
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fd fd92 	bl	800d510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9f0:	e01f      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9f2:	4b2d      	ldr	r3, [pc, #180]	; (800faa8 <UART_SetConfig+0x934>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 0320 	and.w	r3, r3, #32
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d009      	beq.n	800fa12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9fe:	4b2a      	ldr	r3, [pc, #168]	; (800faa8 <UART_SetConfig+0x934>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	08db      	lsrs	r3, r3, #3
 800fa04:	f003 0303 	and.w	r3, r3, #3
 800fa08:	4a24      	ldr	r2, [pc, #144]	; (800fa9c <UART_SetConfig+0x928>)
 800fa0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa10:	e00f      	b.n	800fa32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa12:	4b22      	ldr	r3, [pc, #136]	; (800fa9c <UART_SetConfig+0x928>)
 800fa14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa16:	e00c      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa18:	4b21      	ldr	r3, [pc, #132]	; (800faa0 <UART_SetConfig+0x92c>)
 800fa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa1c:	e009      	b.n	800fa32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa24:	e005      	b.n	800fa32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 80e7 	beq.w	800fc08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	4a19      	ldr	r2, [pc, #100]	; (800faa4 <UART_SetConfig+0x930>)
 800fa40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa44:	461a      	mov	r2, r3
 800fa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa48:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa4c:	005a      	lsls	r2, r3, #1
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	085b      	lsrs	r3, r3, #1
 800fa54:	441a      	add	r2, r3
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	2b0f      	cmp	r3, #15
 800fa64:	d916      	bls.n	800fa94 <UART_SetConfig+0x920>
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa6c:	d212      	bcs.n	800fa94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	f023 030f 	bic.w	r3, r3, #15
 800fa76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	085b      	lsrs	r3, r3, #1
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa86:	4313      	orrs	r3, r2
 800fa88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa90:	60da      	str	r2, [r3, #12]
 800fa92:	e0b9      	b.n	800fc08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fa94:	2301      	movs	r3, #1
 800fa96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa9a:	e0b5      	b.n	800fc08 <UART_SetConfig+0xa94>
 800fa9c:	03d09000 	.word	0x03d09000
 800faa0:	003d0900 	.word	0x003d0900
 800faa4:	08012c8c 	.word	0x08012c8c
 800faa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800faac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fab0:	2b20      	cmp	r3, #32
 800fab2:	dc49      	bgt.n	800fb48 <UART_SetConfig+0x9d4>
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	db7c      	blt.n	800fbb2 <UART_SetConfig+0xa3e>
 800fab8:	2b20      	cmp	r3, #32
 800faba:	d87a      	bhi.n	800fbb2 <UART_SetConfig+0xa3e>
 800fabc:	a201      	add	r2, pc, #4	; (adr r2, 800fac4 <UART_SetConfig+0x950>)
 800fabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac2:	bf00      	nop
 800fac4:	0800fb4f 	.word	0x0800fb4f
 800fac8:	0800fb57 	.word	0x0800fb57
 800facc:	0800fbb3 	.word	0x0800fbb3
 800fad0:	0800fbb3 	.word	0x0800fbb3
 800fad4:	0800fb5f 	.word	0x0800fb5f
 800fad8:	0800fbb3 	.word	0x0800fbb3
 800fadc:	0800fbb3 	.word	0x0800fbb3
 800fae0:	0800fbb3 	.word	0x0800fbb3
 800fae4:	0800fb6f 	.word	0x0800fb6f
 800fae8:	0800fbb3 	.word	0x0800fbb3
 800faec:	0800fbb3 	.word	0x0800fbb3
 800faf0:	0800fbb3 	.word	0x0800fbb3
 800faf4:	0800fbb3 	.word	0x0800fbb3
 800faf8:	0800fbb3 	.word	0x0800fbb3
 800fafc:	0800fbb3 	.word	0x0800fbb3
 800fb00:	0800fbb3 	.word	0x0800fbb3
 800fb04:	0800fb7f 	.word	0x0800fb7f
 800fb08:	0800fbb3 	.word	0x0800fbb3
 800fb0c:	0800fbb3 	.word	0x0800fbb3
 800fb10:	0800fbb3 	.word	0x0800fbb3
 800fb14:	0800fbb3 	.word	0x0800fbb3
 800fb18:	0800fbb3 	.word	0x0800fbb3
 800fb1c:	0800fbb3 	.word	0x0800fbb3
 800fb20:	0800fbb3 	.word	0x0800fbb3
 800fb24:	0800fbb3 	.word	0x0800fbb3
 800fb28:	0800fbb3 	.word	0x0800fbb3
 800fb2c:	0800fbb3 	.word	0x0800fbb3
 800fb30:	0800fbb3 	.word	0x0800fbb3
 800fb34:	0800fbb3 	.word	0x0800fbb3
 800fb38:	0800fbb3 	.word	0x0800fbb3
 800fb3c:	0800fbb3 	.word	0x0800fbb3
 800fb40:	0800fbb3 	.word	0x0800fbb3
 800fb44:	0800fba5 	.word	0x0800fba5
 800fb48:	2b40      	cmp	r3, #64	; 0x40
 800fb4a:	d02e      	beq.n	800fbaa <UART_SetConfig+0xa36>
 800fb4c:	e031      	b.n	800fbb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb4e:	f7fc fc03 	bl	800c358 <HAL_RCC_GetPCLK1Freq>
 800fb52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb54:	e033      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb56:	f7fc fc15 	bl	800c384 <HAL_RCC_GetPCLK2Freq>
 800fb5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb5c:	e02f      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fd fb80 	bl	800d268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb6c:	e027      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fd fccc 	bl	800d510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb7c:	e01f      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb7e:	4b2d      	ldr	r3, [pc, #180]	; (800fc34 <UART_SetConfig+0xac0>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 0320 	and.w	r3, r3, #32
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d009      	beq.n	800fb9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb8a:	4b2a      	ldr	r3, [pc, #168]	; (800fc34 <UART_SetConfig+0xac0>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	08db      	lsrs	r3, r3, #3
 800fb90:	f003 0303 	and.w	r3, r3, #3
 800fb94:	4a28      	ldr	r2, [pc, #160]	; (800fc38 <UART_SetConfig+0xac4>)
 800fb96:	fa22 f303 	lsr.w	r3, r2, r3
 800fb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb9c:	e00f      	b.n	800fbbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fb9e:	4b26      	ldr	r3, [pc, #152]	; (800fc38 <UART_SetConfig+0xac4>)
 800fba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fba2:	e00c      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fba4:	4b25      	ldr	r3, [pc, #148]	; (800fc3c <UART_SetConfig+0xac8>)
 800fba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fba8:	e009      	b.n	800fbbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbb0:	e005      	b.n	800fbbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fbbc:	bf00      	nop
    }

    if (pclk != 0U)
 800fbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d021      	beq.n	800fc08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc8:	4a1d      	ldr	r2, [pc, #116]	; (800fc40 <UART_SetConfig+0xacc>)
 800fbca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	085b      	lsrs	r3, r3, #1
 800fbdc:	441a      	add	r2, r3
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbea:	2b0f      	cmp	r3, #15
 800fbec:	d909      	bls.n	800fc02 <UART_SetConfig+0xa8e>
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbf4:	d205      	bcs.n	800fc02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	60da      	str	r2, [r3, #12]
 800fc00:	e002      	b.n	800fc08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2200      	movs	r2, #0
 800fc22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fc24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3748      	adds	r7, #72	; 0x48
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc32:	bf00      	nop
 800fc34:	58024400 	.word	0x58024400
 800fc38:	03d09000 	.word	0x03d09000
 800fc3c:	003d0900 	.word	0x003d0900
 800fc40:	08012c8c 	.word	0x08012c8c

0800fc44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00a      	beq.n	800fc6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00a      	beq.n	800fc90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	430a      	orrs	r2, r1
 800fc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc94:	f003 0304 	and.w	r3, r3, #4
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00a      	beq.n	800fcb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	430a      	orrs	r2, r1
 800fcb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcb6:	f003 0308 	and.w	r3, r3, #8
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00a      	beq.n	800fcd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	430a      	orrs	r2, r1
 800fcd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd8:	f003 0310 	and.w	r3, r3, #16
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00a      	beq.n	800fcf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	430a      	orrs	r2, r1
 800fcf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfa:	f003 0320 	and.w	r3, r3, #32
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00a      	beq.n	800fd18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	430a      	orrs	r2, r1
 800fd16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01a      	beq.n	800fd5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd42:	d10a      	bne.n	800fd5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	430a      	orrs	r2, r1
 800fd58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00a      	beq.n	800fd7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	430a      	orrs	r2, r1
 800fd7a:	605a      	str	r2, [r3, #4]
  }
}
 800fd7c:	bf00      	nop
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af02      	add	r7, sp, #8
 800fd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd98:	f7f7 ffca 	bl	8007d30 <HAL_GetTick>
 800fd9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 0308 	and.w	r3, r3, #8
 800fda8:	2b08      	cmp	r3, #8
 800fdaa:	d10e      	bne.n	800fdca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f82f 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	e025      	b.n	800fe16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f003 0304 	and.w	r3, r3, #4
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	d10e      	bne.n	800fdf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f819 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdf2:	2303      	movs	r3, #3
 800fdf4:	e00f      	b.n	800fe16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2220      	movs	r2, #32
 800fdfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2220      	movs	r2, #32
 800fe02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b09c      	sub	sp, #112	; 0x70
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	60f8      	str	r0, [r7, #12]
 800fe26:	60b9      	str	r1, [r7, #8]
 800fe28:	603b      	str	r3, [r7, #0]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe2e:	e0a9      	b.n	800ff84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe36:	f000 80a5 	beq.w	800ff84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe3a:	f7f7 ff79 	bl	8007d30 <HAL_GetTick>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d302      	bcc.n	800fe50 <UART_WaitOnFlagUntilTimeout+0x32>
 800fe4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d140      	bne.n	800fed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe58:	e853 3f00 	ldrex	r3, [r3]
 800fe5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fe5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fe64:	667b      	str	r3, [r7, #100]	; 0x64
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe76:	e841 2300 	strex	r3, r2, [r1]
 800fe7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fe7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1e6      	bne.n	800fe50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	3308      	adds	r3, #8
 800fe88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8c:	e853 3f00 	ldrex	r3, [r3]
 800fe90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	f023 0301 	bic.w	r3, r3, #1
 800fe98:	663b      	str	r3, [r7, #96]	; 0x60
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fea2:	64ba      	str	r2, [r7, #72]	; 0x48
 800fea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feaa:	e841 2300 	strex	r3, r2, [r1]
 800feae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800feb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d1e5      	bne.n	800fe82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2220      	movs	r2, #32
 800feba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2220      	movs	r2, #32
 800fec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fece:	2303      	movs	r3, #3
 800fed0:	e069      	b.n	800ffa6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f003 0304 	and.w	r3, r3, #4
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d051      	beq.n	800ff84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	69db      	ldr	r3, [r3, #28]
 800fee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800feea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800feee:	d149      	bne.n	800ff84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff02:	e853 3f00 	ldrex	r3, [r3]
 800ff06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ff0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	461a      	mov	r2, r3
 800ff16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff18:	637b      	str	r3, [r7, #52]	; 0x34
 800ff1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff20:	e841 2300 	strex	r3, r2, [r1]
 800ff24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1e6      	bne.n	800fefa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	3308      	adds	r3, #8
 800ff32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	e853 3f00 	ldrex	r3, [r3]
 800ff3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	f023 0301 	bic.w	r3, r3, #1
 800ff42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	3308      	adds	r3, #8
 800ff4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff4c:	623a      	str	r2, [r7, #32]
 800ff4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff50:	69f9      	ldr	r1, [r7, #28]
 800ff52:	6a3a      	ldr	r2, [r7, #32]
 800ff54:	e841 2300 	strex	r3, r2, [r1]
 800ff58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1e5      	bne.n	800ff2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2220      	movs	r2, #32
 800ff64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2220      	movs	r2, #32
 800ff6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2220      	movs	r2, #32
 800ff74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e010      	b.n	800ffa6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	69da      	ldr	r2, [r3, #28]
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	bf0c      	ite	eq
 800ff94:	2301      	moveq	r3, #1
 800ff96:	2300      	movne	r3, #0
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	79fb      	ldrb	r3, [r7, #7]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	f43f af46 	beq.w	800fe30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3770      	adds	r7, #112	; 0x70
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
	...

0800ffb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b095      	sub	sp, #84	; 0x54
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc0:	e853 3f00 	ldrex	r3, [r3]
 800ffc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffd6:	643b      	str	r3, [r7, #64]	; 0x40
 800ffd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ffdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffde:	e841 2300 	strex	r3, r2, [r1]
 800ffe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d1e6      	bne.n	800ffb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	3308      	adds	r3, #8
 800fff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff2:	6a3b      	ldr	r3, [r7, #32]
 800fff4:	e853 3f00 	ldrex	r3, [r3]
 800fff8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <UART_EndRxTransfer+0xc8>)
 800fffe:	4013      	ands	r3, r2
 8010000:	64bb      	str	r3, [r7, #72]	; 0x48
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3308      	adds	r3, #8
 8010008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801000a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801000c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010012:	e841 2300 	strex	r3, r2, [r1]
 8010016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1e5      	bne.n	800ffea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010022:	2b01      	cmp	r3, #1
 8010024:	d118      	bne.n	8010058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	e853 3f00 	ldrex	r3, [r3]
 8010032:	60bb      	str	r3, [r7, #8]
   return(result);
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f023 0310 	bic.w	r3, r3, #16
 801003a:	647b      	str	r3, [r7, #68]	; 0x44
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	461a      	mov	r2, r3
 8010042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010044:	61bb      	str	r3, [r7, #24]
 8010046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010048:	6979      	ldr	r1, [r7, #20]
 801004a:	69ba      	ldr	r2, [r7, #24]
 801004c:	e841 2300 	strex	r3, r2, [r1]
 8010050:	613b      	str	r3, [r7, #16]
   return(result);
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e6      	bne.n	8010026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2220      	movs	r2, #32
 801005c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801006c:	bf00      	nop
 801006e:	3754      	adds	r7, #84	; 0x54
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	effffffe 	.word	0xeffffffe

0801007c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff f854 	bl	800f148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100a0:	bf00      	nop
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b088      	sub	sp, #32
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	e853 3f00 	ldrex	r3, [r3]
 80100bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100c4:	61fb      	str	r3, [r7, #28]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	61bb      	str	r3, [r7, #24]
 80100d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	69ba      	ldr	r2, [r7, #24]
 80100d6:	e841 2300 	strex	r3, r2, [r1]
 80100da:	613b      	str	r3, [r7, #16]
   return(result);
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1e6      	bne.n	80100b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2220      	movs	r2, #32
 80100e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7ff f81f 	bl	800f134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100f6:	bf00      	nop
 80100f8:	3720      	adds	r7, #32
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80100fe:	b480      	push	{r7}
 8010100:	b083      	sub	sp, #12
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010106:	bf00      	nop
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801011a:	bf00      	nop
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010126:	b480      	push	{r7}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801012e:	bf00      	nop
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr

0801013a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801013a:	b480      	push	{r7}
 801013c:	b085      	sub	sp, #20
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010148:	2b01      	cmp	r3, #1
 801014a:	d101      	bne.n	8010150 <HAL_UARTEx_DisableFifoMode+0x16>
 801014c:	2302      	movs	r3, #2
 801014e:	e027      	b.n	80101a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2224      	movs	r2, #36	; 0x24
 801015c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f022 0201 	bic.w	r2, r2, #1
 8010176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801017e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2220      	movs	r2, #32
 8010192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801019e:	2300      	movs	r3, #0
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3714      	adds	r7, #20
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d101      	bne.n	80101c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e02d      	b.n	8010220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2224      	movs	r2, #36	; 0x24
 80101d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f022 0201 	bic.w	r2, r2, #1
 80101ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	430a      	orrs	r2, r1
 80101fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 f84f 	bl	80102a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2220      	movs	r2, #32
 8010212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010238:	2b01      	cmp	r3, #1
 801023a:	d101      	bne.n	8010240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801023c:	2302      	movs	r3, #2
 801023e:	e02d      	b.n	801029c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2224      	movs	r2, #36	; 0x24
 801024c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f022 0201 	bic.w	r2, r2, #1
 8010266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	683a      	ldr	r2, [r7, #0]
 8010278:	430a      	orrs	r2, r1
 801027a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f811 	bl	80102a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2220      	movs	r2, #32
 801028e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d108      	bne.n	80102c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102c4:	e031      	b.n	801032a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102c6:	2310      	movs	r3, #16
 80102c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102ca:	2310      	movs	r3, #16
 80102cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	0e5b      	lsrs	r3, r3, #25
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	f003 0307 	and.w	r3, r3, #7
 80102dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	0f5b      	lsrs	r3, r3, #29
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	f003 0307 	and.w	r3, r3, #7
 80102ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102ee:	7bbb      	ldrb	r3, [r7, #14]
 80102f0:	7b3a      	ldrb	r2, [r7, #12]
 80102f2:	4911      	ldr	r1, [pc, #68]	; (8010338 <UARTEx_SetNbDataToProcess+0x94>)
 80102f4:	5c8a      	ldrb	r2, [r1, r2]
 80102f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80102fa:	7b3a      	ldrb	r2, [r7, #12]
 80102fc:	490f      	ldr	r1, [pc, #60]	; (801033c <UARTEx_SetNbDataToProcess+0x98>)
 80102fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010300:	fb93 f3f2 	sdiv	r3, r3, r2
 8010304:	b29a      	uxth	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801030c:	7bfb      	ldrb	r3, [r7, #15]
 801030e:	7b7a      	ldrb	r2, [r7, #13]
 8010310:	4909      	ldr	r1, [pc, #36]	; (8010338 <UARTEx_SetNbDataToProcess+0x94>)
 8010312:	5c8a      	ldrb	r2, [r1, r2]
 8010314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010318:	7b7a      	ldrb	r2, [r7, #13]
 801031a:	4908      	ldr	r1, [pc, #32]	; (801033c <UARTEx_SetNbDataToProcess+0x98>)
 801031c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801031e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010322:	b29a      	uxth	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801032a:	bf00      	nop
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	08012ca4 	.word	0x08012ca4
 801033c:	08012cac 	.word	0x08012cac

08010340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010340:	b084      	sub	sp, #16
 8010342:	b580      	push	{r7, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	f107 001c 	add.w	r0, r7, #28
 801034e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	2b01      	cmp	r3, #1
 8010356:	d120      	bne.n	801039a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	68da      	ldr	r2, [r3, #12]
 8010368:	4b2a      	ldr	r3, [pc, #168]	; (8010414 <USB_CoreInit+0xd4>)
 801036a:	4013      	ands	r3, r2
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801037c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801037e:	2b01      	cmp	r3, #1
 8010380:	d105      	bne.n	801038e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 faac 	bl	80108ec <USB_CoreReset>
 8010394:	4603      	mov	r3, r0
 8010396:	73fb      	strb	r3, [r7, #15]
 8010398:	e01a      	b.n	80103d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	68db      	ldr	r3, [r3, #12]
 801039e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 faa0 	bl	80108ec <USB_CoreReset>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80103b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d106      	bne.n	80103c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	639a      	str	r2, [r3, #56]	; 0x38
 80103c2:	e005      	b.n	80103d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d116      	bne.n	8010404 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80103e4:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <USB_CoreInit+0xd8>)
 80103e6:	4313      	orrs	r3, r2
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	f043 0206 	orr.w	r2, r3, #6
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f043 0220 	orr.w	r2, r3, #32
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010404:	7bfb      	ldrb	r3, [r7, #15]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010410:	b004      	add	sp, #16
 8010412:	4770      	bx	lr
 8010414:	ffbdffbf 	.word	0xffbdffbf
 8010418:	03ee0000 	.word	0x03ee0000

0801041c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	f023 0201 	bic.w	r2, r3, #1
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b084      	sub	sp, #16
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	460b      	mov	r3, r1
 8010448:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801044a:	2300      	movs	r3, #0
 801044c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801045a:	78fb      	ldrb	r3, [r7, #3]
 801045c:	2b01      	cmp	r3, #1
 801045e:	d115      	bne.n	801048c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801046c:	2001      	movs	r0, #1
 801046e:	f7f7 fc6b 	bl	8007d48 <HAL_Delay>
      ms++;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	3301      	adds	r3, #1
 8010476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fa29 	bl	80108d0 <USB_GetMode>
 801047e:	4603      	mov	r3, r0
 8010480:	2b01      	cmp	r3, #1
 8010482:	d01e      	beq.n	80104c2 <USB_SetCurrentMode+0x84>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2b31      	cmp	r3, #49	; 0x31
 8010488:	d9f0      	bls.n	801046c <USB_SetCurrentMode+0x2e>
 801048a:	e01a      	b.n	80104c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801048c:	78fb      	ldrb	r3, [r7, #3]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d115      	bne.n	80104be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	68db      	ldr	r3, [r3, #12]
 8010496:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801049e:	2001      	movs	r0, #1
 80104a0:	f7f7 fc52 	bl	8007d48 <HAL_Delay>
      ms++;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	3301      	adds	r3, #1
 80104a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 fa10 	bl	80108d0 <USB_GetMode>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d005      	beq.n	80104c2 <USB_SetCurrentMode+0x84>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b31      	cmp	r3, #49	; 0x31
 80104ba:	d9f0      	bls.n	801049e <USB_SetCurrentMode+0x60>
 80104bc:	e001      	b.n	80104c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80104be:	2301      	movs	r3, #1
 80104c0:	e005      	b.n	80104ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b32      	cmp	r3, #50	; 0x32
 80104c6:	d101      	bne.n	80104cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e000      	b.n	80104ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
	...

080104d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80104d8:	b084      	sub	sp, #16
 80104da:	b580      	push	{r7, lr}
 80104dc:	b086      	sub	sp, #24
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
 80104e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80104e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80104f2:	2300      	movs	r3, #0
 80104f4:	613b      	str	r3, [r7, #16]
 80104f6:	e009      	b.n	801050c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	3340      	adds	r3, #64	; 0x40
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	4413      	add	r3, r2
 8010502:	2200      	movs	r2, #0
 8010504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	3301      	adds	r3, #1
 801050a:	613b      	str	r3, [r7, #16]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	2b0e      	cmp	r3, #14
 8010510:	d9f2      	bls.n	80104f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d11c      	bne.n	8010552 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010526:	f043 0302 	orr.w	r3, r3, #2
 801052a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010530:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	601a      	str	r2, [r3, #0]
 8010550:	e005      	b.n	801055e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010564:	461a      	mov	r2, r3
 8010566:	2300      	movs	r3, #0
 8010568:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010570:	4619      	mov	r1, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010578:	461a      	mov	r2, r3
 801057a:	680b      	ldr	r3, [r1, #0]
 801057c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	2b01      	cmp	r3, #1
 8010582:	d10c      	bne.n	801059e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010586:	2b00      	cmp	r3, #0
 8010588:	d104      	bne.n	8010594 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801058a:	2100      	movs	r1, #0
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 f965 	bl	801085c <USB_SetDevSpeed>
 8010592:	e008      	b.n	80105a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010594:	2101      	movs	r1, #1
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 f960 	bl	801085c <USB_SetDevSpeed>
 801059c:	e003      	b.n	80105a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801059e:	2103      	movs	r1, #3
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 f95b 	bl	801085c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80105a6:	2110      	movs	r1, #16
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f8f3 	bl	8010794 <USB_FlushTxFifo>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d001      	beq.n	80105b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80105b4:	2301      	movs	r3, #1
 80105b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f91f 	bl	80107fc <USB_FlushRxFifo>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ce:	461a      	mov	r2, r3
 80105d0:	2300      	movs	r3, #0
 80105d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105da:	461a      	mov	r2, r3
 80105dc:	2300      	movs	r3, #0
 80105de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105e6:	461a      	mov	r2, r3
 80105e8:	2300      	movs	r3, #0
 80105ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80105ec:	2300      	movs	r3, #0
 80105ee:	613b      	str	r3, [r7, #16]
 80105f0:	e043      	b.n	801067a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	015a      	lsls	r2, r3, #5
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	4413      	add	r3, r2
 80105fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010608:	d118      	bne.n	801063c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10a      	bne.n	8010626 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	015a      	lsls	r2, r3, #5
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	4413      	add	r3, r2
 8010618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801061c:	461a      	mov	r2, r3
 801061e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010622:	6013      	str	r3, [r2, #0]
 8010624:	e013      	b.n	801064e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	015a      	lsls	r2, r3, #5
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	4413      	add	r3, r2
 801062e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010632:	461a      	mov	r2, r3
 8010634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010638:	6013      	str	r3, [r2, #0]
 801063a:	e008      	b.n	801064e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	015a      	lsls	r2, r3, #5
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	4413      	add	r3, r2
 8010644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010648:	461a      	mov	r2, r3
 801064a:	2300      	movs	r3, #0
 801064c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	015a      	lsls	r2, r3, #5
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	4413      	add	r3, r2
 8010656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801065a:	461a      	mov	r2, r3
 801065c:	2300      	movs	r3, #0
 801065e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	015a      	lsls	r2, r3, #5
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	4413      	add	r3, r2
 8010668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801066c:	461a      	mov	r2, r3
 801066e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010672:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	3301      	adds	r3, #1
 8010678:	613b      	str	r3, [r7, #16]
 801067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	429a      	cmp	r2, r3
 8010680:	d3b7      	bcc.n	80105f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010682:	2300      	movs	r3, #0
 8010684:	613b      	str	r3, [r7, #16]
 8010686:	e043      	b.n	8010710 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	015a      	lsls	r2, r3, #5
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	4413      	add	r3, r2
 8010690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801069a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801069e:	d118      	bne.n	80106d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d10a      	bne.n	80106bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	015a      	lsls	r2, r3, #5
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	4413      	add	r3, r2
 80106ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106b2:	461a      	mov	r2, r3
 80106b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	e013      	b.n	80106e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	015a      	lsls	r2, r3, #5
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	4413      	add	r3, r2
 80106c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c8:	461a      	mov	r2, r3
 80106ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	e008      	b.n	80106e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	015a      	lsls	r2, r3, #5
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	4413      	add	r3, r2
 80106da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106de:	461a      	mov	r2, r3
 80106e0:	2300      	movs	r3, #0
 80106e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	015a      	lsls	r2, r3, #5
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	4413      	add	r3, r2
 80106ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106f0:	461a      	mov	r2, r3
 80106f2:	2300      	movs	r3, #0
 80106f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	015a      	lsls	r2, r3, #5
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010702:	461a      	mov	r2, r3
 8010704:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010708:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	3301      	adds	r3, #1
 801070e:	613b      	str	r3, [r7, #16]
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	429a      	cmp	r2, r3
 8010716:	d3b7      	bcc.n	8010688 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801071e:	691b      	ldr	r3, [r3, #16]
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801072a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010738:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	2b00      	cmp	r3, #0
 801073e:	d105      	bne.n	801074c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	699b      	ldr	r3, [r3, #24]
 8010744:	f043 0210 	orr.w	r2, r3, #16
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	699a      	ldr	r2, [r3, #24]
 8010750:	4b0e      	ldr	r3, [pc, #56]	; (801078c <USB_DevInit+0x2b4>)
 8010752:	4313      	orrs	r3, r2
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801075a:	2b00      	cmp	r3, #0
 801075c:	d005      	beq.n	801076a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	f043 0208 	orr.w	r2, r3, #8
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801076a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076c:	2b01      	cmp	r3, #1
 801076e:	d105      	bne.n	801077c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	699a      	ldr	r2, [r3, #24]
 8010774:	4b06      	ldr	r3, [pc, #24]	; (8010790 <USB_DevInit+0x2b8>)
 8010776:	4313      	orrs	r3, r2
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801077c:	7dfb      	ldrb	r3, [r7, #23]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3718      	adds	r7, #24
 8010782:	46bd      	mov	sp, r7
 8010784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010788:	b004      	add	sp, #16
 801078a:	4770      	bx	lr
 801078c:	803c3800 	.word	0x803c3800
 8010790:	40000004 	.word	0x40000004

08010794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3301      	adds	r3, #1
 80107a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	4a13      	ldr	r2, [pc, #76]	; (80107f8 <USB_FlushTxFifo+0x64>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d901      	bls.n	80107b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80107b0:	2303      	movs	r3, #3
 80107b2:	e01b      	b.n	80107ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	daf2      	bge.n	80107a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80107bc:	2300      	movs	r3, #0
 80107be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	019b      	lsls	r3, r3, #6
 80107c4:	f043 0220 	orr.w	r2, r3, #32
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	3301      	adds	r3, #1
 80107d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <USB_FlushTxFifo+0x64>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d901      	bls.n	80107de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80107da:	2303      	movs	r3, #3
 80107dc:	e006      	b.n	80107ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f003 0320 	and.w	r3, r3, #32
 80107e6:	2b20      	cmp	r3, #32
 80107e8:	d0f0      	beq.n	80107cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	00030d40 	.word	0x00030d40

080107fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	3301      	adds	r3, #1
 801080c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	4a11      	ldr	r2, [pc, #68]	; (8010858 <USB_FlushRxFifo+0x5c>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d901      	bls.n	801081a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010816:	2303      	movs	r3, #3
 8010818:	e018      	b.n	801084c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	2b00      	cmp	r3, #0
 8010820:	daf2      	bge.n	8010808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010822:	2300      	movs	r3, #0
 8010824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2210      	movs	r2, #16
 801082a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	3301      	adds	r3, #1
 8010830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4a08      	ldr	r2, [pc, #32]	; (8010858 <USB_FlushRxFifo+0x5c>)
 8010836:	4293      	cmp	r3, r2
 8010838:	d901      	bls.n	801083e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801083a:	2303      	movs	r3, #3
 801083c:	e006      	b.n	801084c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	f003 0310 	and.w	r3, r3, #16
 8010846:	2b10      	cmp	r3, #16
 8010848:	d0f0      	beq.n	801082c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	00030d40 	.word	0x00030d40

0801085c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801085c:	b480      	push	{r7}
 801085e:	b085      	sub	sp, #20
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	460b      	mov	r3, r1
 8010866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	78fb      	ldrb	r3, [r7, #3]
 8010876:	68f9      	ldr	r1, [r7, #12]
 8010878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801087c:	4313      	orrs	r3, r2
 801087e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	3714      	adds	r7, #20
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801088e:	b480      	push	{r7}
 8010890:	b085      	sub	sp, #20
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80108a8:	f023 0303 	bic.w	r3, r3, #3
 80108ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	68fa      	ldr	r2, [r7, #12]
 80108b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108bc:	f043 0302 	orr.w	r3, r3, #2
 80108c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	695b      	ldr	r3, [r3, #20]
 80108dc:	f003 0301 	and.w	r3, r3, #1
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80108f4:	2300      	movs	r3, #0
 80108f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	3301      	adds	r3, #1
 80108fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	4a13      	ldr	r2, [pc, #76]	; (8010950 <USB_CoreReset+0x64>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d901      	bls.n	801090a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010906:	2303      	movs	r3, #3
 8010908:	e01b      	b.n	8010942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	daf2      	bge.n	80108f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010912:	2300      	movs	r3, #0
 8010914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	f043 0201 	orr.w	r2, r3, #1
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	3301      	adds	r3, #1
 8010926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	4a09      	ldr	r2, [pc, #36]	; (8010950 <USB_CoreReset+0x64>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d901      	bls.n	8010934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e006      	b.n	8010942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	691b      	ldr	r3, [r3, #16]
 8010938:	f003 0301 	and.w	r3, r3, #1
 801093c:	2b01      	cmp	r3, #1
 801093e:	d0f0      	beq.n	8010922 <USB_CoreReset+0x36>

  return HAL_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	3714      	adds	r7, #20
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	00030d40 	.word	0x00030d40

08010954 <__errno>:
 8010954:	4b01      	ldr	r3, [pc, #4]	; (801095c <__errno+0x8>)
 8010956:	6818      	ldr	r0, [r3, #0]
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	24000024 	.word	0x24000024

08010960 <__libc_init_array>:
 8010960:	b570      	push	{r4, r5, r6, lr}
 8010962:	4d0d      	ldr	r5, [pc, #52]	; (8010998 <__libc_init_array+0x38>)
 8010964:	4c0d      	ldr	r4, [pc, #52]	; (801099c <__libc_init_array+0x3c>)
 8010966:	1b64      	subs	r4, r4, r5
 8010968:	10a4      	asrs	r4, r4, #2
 801096a:	2600      	movs	r6, #0
 801096c:	42a6      	cmp	r6, r4
 801096e:	d109      	bne.n	8010984 <__libc_init_array+0x24>
 8010970:	4d0b      	ldr	r5, [pc, #44]	; (80109a0 <__libc_init_array+0x40>)
 8010972:	4c0c      	ldr	r4, [pc, #48]	; (80109a4 <__libc_init_array+0x44>)
 8010974:	f000 fc8e 	bl	8011294 <_init>
 8010978:	1b64      	subs	r4, r4, r5
 801097a:	10a4      	asrs	r4, r4, #2
 801097c:	2600      	movs	r6, #0
 801097e:	42a6      	cmp	r6, r4
 8010980:	d105      	bne.n	801098e <__libc_init_array+0x2e>
 8010982:	bd70      	pop	{r4, r5, r6, pc}
 8010984:	f855 3b04 	ldr.w	r3, [r5], #4
 8010988:	4798      	blx	r3
 801098a:	3601      	adds	r6, #1
 801098c:	e7ee      	b.n	801096c <__libc_init_array+0xc>
 801098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010992:	4798      	blx	r3
 8010994:	3601      	adds	r6, #1
 8010996:	e7f2      	b.n	801097e <__libc_init_array+0x1e>
 8010998:	08012cf0 	.word	0x08012cf0
 801099c:	08012cf0 	.word	0x08012cf0
 80109a0:	08012cf0 	.word	0x08012cf0
 80109a4:	08012cf4 	.word	0x08012cf4

080109a8 <memset>:
 80109a8:	4402      	add	r2, r0
 80109aa:	4603      	mov	r3, r0
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d100      	bne.n	80109b2 <memset+0xa>
 80109b0:	4770      	bx	lr
 80109b2:	f803 1b01 	strb.w	r1, [r3], #1
 80109b6:	e7f9      	b.n	80109ac <memset+0x4>

080109b8 <_free_r>:
 80109b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109ba:	2900      	cmp	r1, #0
 80109bc:	d044      	beq.n	8010a48 <_free_r+0x90>
 80109be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109c2:	9001      	str	r0, [sp, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f1a1 0404 	sub.w	r4, r1, #4
 80109ca:	bfb8      	it	lt
 80109cc:	18e4      	addlt	r4, r4, r3
 80109ce:	f000 f903 	bl	8010bd8 <__malloc_lock>
 80109d2:	4a1e      	ldr	r2, [pc, #120]	; (8010a4c <_free_r+0x94>)
 80109d4:	9801      	ldr	r0, [sp, #4]
 80109d6:	6813      	ldr	r3, [r2, #0]
 80109d8:	b933      	cbnz	r3, 80109e8 <_free_r+0x30>
 80109da:	6063      	str	r3, [r4, #4]
 80109dc:	6014      	str	r4, [r2, #0]
 80109de:	b003      	add	sp, #12
 80109e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109e4:	f000 b8fe 	b.w	8010be4 <__malloc_unlock>
 80109e8:	42a3      	cmp	r3, r4
 80109ea:	d908      	bls.n	80109fe <_free_r+0x46>
 80109ec:	6825      	ldr	r5, [r4, #0]
 80109ee:	1961      	adds	r1, r4, r5
 80109f0:	428b      	cmp	r3, r1
 80109f2:	bf01      	itttt	eq
 80109f4:	6819      	ldreq	r1, [r3, #0]
 80109f6:	685b      	ldreq	r3, [r3, #4]
 80109f8:	1949      	addeq	r1, r1, r5
 80109fa:	6021      	streq	r1, [r4, #0]
 80109fc:	e7ed      	b.n	80109da <_free_r+0x22>
 80109fe:	461a      	mov	r2, r3
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	b10b      	cbz	r3, 8010a08 <_free_r+0x50>
 8010a04:	42a3      	cmp	r3, r4
 8010a06:	d9fa      	bls.n	80109fe <_free_r+0x46>
 8010a08:	6811      	ldr	r1, [r2, #0]
 8010a0a:	1855      	adds	r5, r2, r1
 8010a0c:	42a5      	cmp	r5, r4
 8010a0e:	d10b      	bne.n	8010a28 <_free_r+0x70>
 8010a10:	6824      	ldr	r4, [r4, #0]
 8010a12:	4421      	add	r1, r4
 8010a14:	1854      	adds	r4, r2, r1
 8010a16:	42a3      	cmp	r3, r4
 8010a18:	6011      	str	r1, [r2, #0]
 8010a1a:	d1e0      	bne.n	80109de <_free_r+0x26>
 8010a1c:	681c      	ldr	r4, [r3, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	6053      	str	r3, [r2, #4]
 8010a22:	4421      	add	r1, r4
 8010a24:	6011      	str	r1, [r2, #0]
 8010a26:	e7da      	b.n	80109de <_free_r+0x26>
 8010a28:	d902      	bls.n	8010a30 <_free_r+0x78>
 8010a2a:	230c      	movs	r3, #12
 8010a2c:	6003      	str	r3, [r0, #0]
 8010a2e:	e7d6      	b.n	80109de <_free_r+0x26>
 8010a30:	6825      	ldr	r5, [r4, #0]
 8010a32:	1961      	adds	r1, r4, r5
 8010a34:	428b      	cmp	r3, r1
 8010a36:	bf04      	itt	eq
 8010a38:	6819      	ldreq	r1, [r3, #0]
 8010a3a:	685b      	ldreq	r3, [r3, #4]
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	bf04      	itt	eq
 8010a40:	1949      	addeq	r1, r1, r5
 8010a42:	6021      	streq	r1, [r4, #0]
 8010a44:	6054      	str	r4, [r2, #4]
 8010a46:	e7ca      	b.n	80109de <_free_r+0x26>
 8010a48:	b003      	add	sp, #12
 8010a4a:	bd30      	pop	{r4, r5, pc}
 8010a4c:	24000eb8 	.word	0x24000eb8

08010a50 <sbrk_aligned>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	4e0e      	ldr	r6, [pc, #56]	; (8010a8c <sbrk_aligned+0x3c>)
 8010a54:	460c      	mov	r4, r1
 8010a56:	6831      	ldr	r1, [r6, #0]
 8010a58:	4605      	mov	r5, r0
 8010a5a:	b911      	cbnz	r1, 8010a62 <sbrk_aligned+0x12>
 8010a5c:	f000 f88c 	bl	8010b78 <_sbrk_r>
 8010a60:	6030      	str	r0, [r6, #0]
 8010a62:	4621      	mov	r1, r4
 8010a64:	4628      	mov	r0, r5
 8010a66:	f000 f887 	bl	8010b78 <_sbrk_r>
 8010a6a:	1c43      	adds	r3, r0, #1
 8010a6c:	d00a      	beq.n	8010a84 <sbrk_aligned+0x34>
 8010a6e:	1cc4      	adds	r4, r0, #3
 8010a70:	f024 0403 	bic.w	r4, r4, #3
 8010a74:	42a0      	cmp	r0, r4
 8010a76:	d007      	beq.n	8010a88 <sbrk_aligned+0x38>
 8010a78:	1a21      	subs	r1, r4, r0
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f000 f87c 	bl	8010b78 <_sbrk_r>
 8010a80:	3001      	adds	r0, #1
 8010a82:	d101      	bne.n	8010a88 <sbrk_aligned+0x38>
 8010a84:	f04f 34ff 	mov.w	r4, #4294967295
 8010a88:	4620      	mov	r0, r4
 8010a8a:	bd70      	pop	{r4, r5, r6, pc}
 8010a8c:	24000ebc 	.word	0x24000ebc

08010a90 <_malloc_r>:
 8010a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a94:	1ccd      	adds	r5, r1, #3
 8010a96:	f025 0503 	bic.w	r5, r5, #3
 8010a9a:	3508      	adds	r5, #8
 8010a9c:	2d0c      	cmp	r5, #12
 8010a9e:	bf38      	it	cc
 8010aa0:	250c      	movcc	r5, #12
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	4607      	mov	r7, r0
 8010aa6:	db01      	blt.n	8010aac <_malloc_r+0x1c>
 8010aa8:	42a9      	cmp	r1, r5
 8010aaa:	d905      	bls.n	8010ab8 <_malloc_r+0x28>
 8010aac:	230c      	movs	r3, #12
 8010aae:	603b      	str	r3, [r7, #0]
 8010ab0:	2600      	movs	r6, #0
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab8:	4e2e      	ldr	r6, [pc, #184]	; (8010b74 <_malloc_r+0xe4>)
 8010aba:	f000 f88d 	bl	8010bd8 <__malloc_lock>
 8010abe:	6833      	ldr	r3, [r6, #0]
 8010ac0:	461c      	mov	r4, r3
 8010ac2:	bb34      	cbnz	r4, 8010b12 <_malloc_r+0x82>
 8010ac4:	4629      	mov	r1, r5
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	f7ff ffc2 	bl	8010a50 <sbrk_aligned>
 8010acc:	1c43      	adds	r3, r0, #1
 8010ace:	4604      	mov	r4, r0
 8010ad0:	d14d      	bne.n	8010b6e <_malloc_r+0xde>
 8010ad2:	6834      	ldr	r4, [r6, #0]
 8010ad4:	4626      	mov	r6, r4
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	d140      	bne.n	8010b5c <_malloc_r+0xcc>
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	4631      	mov	r1, r6
 8010ade:	4638      	mov	r0, r7
 8010ae0:	eb04 0803 	add.w	r8, r4, r3
 8010ae4:	f000 f848 	bl	8010b78 <_sbrk_r>
 8010ae8:	4580      	cmp	r8, r0
 8010aea:	d13a      	bne.n	8010b62 <_malloc_r+0xd2>
 8010aec:	6821      	ldr	r1, [r4, #0]
 8010aee:	3503      	adds	r5, #3
 8010af0:	1a6d      	subs	r5, r5, r1
 8010af2:	f025 0503 	bic.w	r5, r5, #3
 8010af6:	3508      	adds	r5, #8
 8010af8:	2d0c      	cmp	r5, #12
 8010afa:	bf38      	it	cc
 8010afc:	250c      	movcc	r5, #12
 8010afe:	4629      	mov	r1, r5
 8010b00:	4638      	mov	r0, r7
 8010b02:	f7ff ffa5 	bl	8010a50 <sbrk_aligned>
 8010b06:	3001      	adds	r0, #1
 8010b08:	d02b      	beq.n	8010b62 <_malloc_r+0xd2>
 8010b0a:	6823      	ldr	r3, [r4, #0]
 8010b0c:	442b      	add	r3, r5
 8010b0e:	6023      	str	r3, [r4, #0]
 8010b10:	e00e      	b.n	8010b30 <_malloc_r+0xa0>
 8010b12:	6822      	ldr	r2, [r4, #0]
 8010b14:	1b52      	subs	r2, r2, r5
 8010b16:	d41e      	bmi.n	8010b56 <_malloc_r+0xc6>
 8010b18:	2a0b      	cmp	r2, #11
 8010b1a:	d916      	bls.n	8010b4a <_malloc_r+0xba>
 8010b1c:	1961      	adds	r1, r4, r5
 8010b1e:	42a3      	cmp	r3, r4
 8010b20:	6025      	str	r5, [r4, #0]
 8010b22:	bf18      	it	ne
 8010b24:	6059      	strne	r1, [r3, #4]
 8010b26:	6863      	ldr	r3, [r4, #4]
 8010b28:	bf08      	it	eq
 8010b2a:	6031      	streq	r1, [r6, #0]
 8010b2c:	5162      	str	r2, [r4, r5]
 8010b2e:	604b      	str	r3, [r1, #4]
 8010b30:	4638      	mov	r0, r7
 8010b32:	f104 060b 	add.w	r6, r4, #11
 8010b36:	f000 f855 	bl	8010be4 <__malloc_unlock>
 8010b3a:	f026 0607 	bic.w	r6, r6, #7
 8010b3e:	1d23      	adds	r3, r4, #4
 8010b40:	1af2      	subs	r2, r6, r3
 8010b42:	d0b6      	beq.n	8010ab2 <_malloc_r+0x22>
 8010b44:	1b9b      	subs	r3, r3, r6
 8010b46:	50a3      	str	r3, [r4, r2]
 8010b48:	e7b3      	b.n	8010ab2 <_malloc_r+0x22>
 8010b4a:	6862      	ldr	r2, [r4, #4]
 8010b4c:	42a3      	cmp	r3, r4
 8010b4e:	bf0c      	ite	eq
 8010b50:	6032      	streq	r2, [r6, #0]
 8010b52:	605a      	strne	r2, [r3, #4]
 8010b54:	e7ec      	b.n	8010b30 <_malloc_r+0xa0>
 8010b56:	4623      	mov	r3, r4
 8010b58:	6864      	ldr	r4, [r4, #4]
 8010b5a:	e7b2      	b.n	8010ac2 <_malloc_r+0x32>
 8010b5c:	4634      	mov	r4, r6
 8010b5e:	6876      	ldr	r6, [r6, #4]
 8010b60:	e7b9      	b.n	8010ad6 <_malloc_r+0x46>
 8010b62:	230c      	movs	r3, #12
 8010b64:	603b      	str	r3, [r7, #0]
 8010b66:	4638      	mov	r0, r7
 8010b68:	f000 f83c 	bl	8010be4 <__malloc_unlock>
 8010b6c:	e7a1      	b.n	8010ab2 <_malloc_r+0x22>
 8010b6e:	6025      	str	r5, [r4, #0]
 8010b70:	e7de      	b.n	8010b30 <_malloc_r+0xa0>
 8010b72:	bf00      	nop
 8010b74:	24000eb8 	.word	0x24000eb8

08010b78 <_sbrk_r>:
 8010b78:	b538      	push	{r3, r4, r5, lr}
 8010b7a:	4d06      	ldr	r5, [pc, #24]	; (8010b94 <_sbrk_r+0x1c>)
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	4604      	mov	r4, r0
 8010b80:	4608      	mov	r0, r1
 8010b82:	602b      	str	r3, [r5, #0]
 8010b84:	f7f6 ffee 	bl	8007b64 <_sbrk>
 8010b88:	1c43      	adds	r3, r0, #1
 8010b8a:	d102      	bne.n	8010b92 <_sbrk_r+0x1a>
 8010b8c:	682b      	ldr	r3, [r5, #0]
 8010b8e:	b103      	cbz	r3, 8010b92 <_sbrk_r+0x1a>
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	bd38      	pop	{r3, r4, r5, pc}
 8010b94:	24000ec0 	.word	0x24000ec0

08010b98 <siprintf>:
 8010b98:	b40e      	push	{r1, r2, r3}
 8010b9a:	b500      	push	{lr}
 8010b9c:	b09c      	sub	sp, #112	; 0x70
 8010b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8010ba0:	9002      	str	r0, [sp, #8]
 8010ba2:	9006      	str	r0, [sp, #24]
 8010ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ba8:	4809      	ldr	r0, [pc, #36]	; (8010bd0 <siprintf+0x38>)
 8010baa:	9107      	str	r1, [sp, #28]
 8010bac:	9104      	str	r1, [sp, #16]
 8010bae:	4909      	ldr	r1, [pc, #36]	; (8010bd4 <siprintf+0x3c>)
 8010bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb4:	9105      	str	r1, [sp, #20]
 8010bb6:	6800      	ldr	r0, [r0, #0]
 8010bb8:	9301      	str	r3, [sp, #4]
 8010bba:	a902      	add	r1, sp, #8
 8010bbc:	f000 f874 	bl	8010ca8 <_svfiprintf_r>
 8010bc0:	9b02      	ldr	r3, [sp, #8]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	701a      	strb	r2, [r3, #0]
 8010bc6:	b01c      	add	sp, #112	; 0x70
 8010bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bcc:	b003      	add	sp, #12
 8010bce:	4770      	bx	lr
 8010bd0:	24000024 	.word	0x24000024
 8010bd4:	ffff0208 	.word	0xffff0208

08010bd8 <__malloc_lock>:
 8010bd8:	4801      	ldr	r0, [pc, #4]	; (8010be0 <__malloc_lock+0x8>)
 8010bda:	f000 baf9 	b.w	80111d0 <__retarget_lock_acquire_recursive>
 8010bde:	bf00      	nop
 8010be0:	24000ec4 	.word	0x24000ec4

08010be4 <__malloc_unlock>:
 8010be4:	4801      	ldr	r0, [pc, #4]	; (8010bec <__malloc_unlock+0x8>)
 8010be6:	f000 baf4 	b.w	80111d2 <__retarget_lock_release_recursive>
 8010bea:	bf00      	nop
 8010bec:	24000ec4 	.word	0x24000ec4

08010bf0 <__ssputs_r>:
 8010bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bf4:	688e      	ldr	r6, [r1, #8]
 8010bf6:	429e      	cmp	r6, r3
 8010bf8:	4682      	mov	sl, r0
 8010bfa:	460c      	mov	r4, r1
 8010bfc:	4690      	mov	r8, r2
 8010bfe:	461f      	mov	r7, r3
 8010c00:	d838      	bhi.n	8010c74 <__ssputs_r+0x84>
 8010c02:	898a      	ldrh	r2, [r1, #12]
 8010c04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c08:	d032      	beq.n	8010c70 <__ssputs_r+0x80>
 8010c0a:	6825      	ldr	r5, [r4, #0]
 8010c0c:	6909      	ldr	r1, [r1, #16]
 8010c0e:	eba5 0901 	sub.w	r9, r5, r1
 8010c12:	6965      	ldr	r5, [r4, #20]
 8010c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	444b      	add	r3, r9
 8010c20:	106d      	asrs	r5, r5, #1
 8010c22:	429d      	cmp	r5, r3
 8010c24:	bf38      	it	cc
 8010c26:	461d      	movcc	r5, r3
 8010c28:	0553      	lsls	r3, r2, #21
 8010c2a:	d531      	bpl.n	8010c90 <__ssputs_r+0xa0>
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	f7ff ff2f 	bl	8010a90 <_malloc_r>
 8010c32:	4606      	mov	r6, r0
 8010c34:	b950      	cbnz	r0, 8010c4c <__ssputs_r+0x5c>
 8010c36:	230c      	movs	r3, #12
 8010c38:	f8ca 3000 	str.w	r3, [sl]
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c42:	81a3      	strh	r3, [r4, #12]
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c4c:	6921      	ldr	r1, [r4, #16]
 8010c4e:	464a      	mov	r2, r9
 8010c50:	f000 fac0 	bl	80111d4 <memcpy>
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c5e:	81a3      	strh	r3, [r4, #12]
 8010c60:	6126      	str	r6, [r4, #16]
 8010c62:	6165      	str	r5, [r4, #20]
 8010c64:	444e      	add	r6, r9
 8010c66:	eba5 0509 	sub.w	r5, r5, r9
 8010c6a:	6026      	str	r6, [r4, #0]
 8010c6c:	60a5      	str	r5, [r4, #8]
 8010c6e:	463e      	mov	r6, r7
 8010c70:	42be      	cmp	r6, r7
 8010c72:	d900      	bls.n	8010c76 <__ssputs_r+0x86>
 8010c74:	463e      	mov	r6, r7
 8010c76:	6820      	ldr	r0, [r4, #0]
 8010c78:	4632      	mov	r2, r6
 8010c7a:	4641      	mov	r1, r8
 8010c7c:	f000 fab8 	bl	80111f0 <memmove>
 8010c80:	68a3      	ldr	r3, [r4, #8]
 8010c82:	1b9b      	subs	r3, r3, r6
 8010c84:	60a3      	str	r3, [r4, #8]
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	4433      	add	r3, r6
 8010c8a:	6023      	str	r3, [r4, #0]
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	e7db      	b.n	8010c48 <__ssputs_r+0x58>
 8010c90:	462a      	mov	r2, r5
 8010c92:	f000 fac7 	bl	8011224 <_realloc_r>
 8010c96:	4606      	mov	r6, r0
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d1e1      	bne.n	8010c60 <__ssputs_r+0x70>
 8010c9c:	6921      	ldr	r1, [r4, #16]
 8010c9e:	4650      	mov	r0, sl
 8010ca0:	f7ff fe8a 	bl	80109b8 <_free_r>
 8010ca4:	e7c7      	b.n	8010c36 <__ssputs_r+0x46>
	...

08010ca8 <_svfiprintf_r>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	4698      	mov	r8, r3
 8010cae:	898b      	ldrh	r3, [r1, #12]
 8010cb0:	061b      	lsls	r3, r3, #24
 8010cb2:	b09d      	sub	sp, #116	; 0x74
 8010cb4:	4607      	mov	r7, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	4614      	mov	r4, r2
 8010cba:	d50e      	bpl.n	8010cda <_svfiprintf_r+0x32>
 8010cbc:	690b      	ldr	r3, [r1, #16]
 8010cbe:	b963      	cbnz	r3, 8010cda <_svfiprintf_r+0x32>
 8010cc0:	2140      	movs	r1, #64	; 0x40
 8010cc2:	f7ff fee5 	bl	8010a90 <_malloc_r>
 8010cc6:	6028      	str	r0, [r5, #0]
 8010cc8:	6128      	str	r0, [r5, #16]
 8010cca:	b920      	cbnz	r0, 8010cd6 <_svfiprintf_r+0x2e>
 8010ccc:	230c      	movs	r3, #12
 8010cce:	603b      	str	r3, [r7, #0]
 8010cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd4:	e0d1      	b.n	8010e7a <_svfiprintf_r+0x1d2>
 8010cd6:	2340      	movs	r3, #64	; 0x40
 8010cd8:	616b      	str	r3, [r5, #20]
 8010cda:	2300      	movs	r3, #0
 8010cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010cde:	2320      	movs	r3, #32
 8010ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ce8:	2330      	movs	r3, #48	; 0x30
 8010cea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e94 <_svfiprintf_r+0x1ec>
 8010cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cf2:	f04f 0901 	mov.w	r9, #1
 8010cf6:	4623      	mov	r3, r4
 8010cf8:	469a      	mov	sl, r3
 8010cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cfe:	b10a      	cbz	r2, 8010d04 <_svfiprintf_r+0x5c>
 8010d00:	2a25      	cmp	r2, #37	; 0x25
 8010d02:	d1f9      	bne.n	8010cf8 <_svfiprintf_r+0x50>
 8010d04:	ebba 0b04 	subs.w	fp, sl, r4
 8010d08:	d00b      	beq.n	8010d22 <_svfiprintf_r+0x7a>
 8010d0a:	465b      	mov	r3, fp
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	4629      	mov	r1, r5
 8010d10:	4638      	mov	r0, r7
 8010d12:	f7ff ff6d 	bl	8010bf0 <__ssputs_r>
 8010d16:	3001      	adds	r0, #1
 8010d18:	f000 80aa 	beq.w	8010e70 <_svfiprintf_r+0x1c8>
 8010d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d1e:	445a      	add	r2, fp
 8010d20:	9209      	str	r2, [sp, #36]	; 0x24
 8010d22:	f89a 3000 	ldrb.w	r3, [sl]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 80a2 	beq.w	8010e70 <_svfiprintf_r+0x1c8>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d36:	f10a 0a01 	add.w	sl, sl, #1
 8010d3a:	9304      	str	r3, [sp, #16]
 8010d3c:	9307      	str	r3, [sp, #28]
 8010d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d42:	931a      	str	r3, [sp, #104]	; 0x68
 8010d44:	4654      	mov	r4, sl
 8010d46:	2205      	movs	r2, #5
 8010d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d4c:	4851      	ldr	r0, [pc, #324]	; (8010e94 <_svfiprintf_r+0x1ec>)
 8010d4e:	f7ef fac7 	bl	80002e0 <memchr>
 8010d52:	9a04      	ldr	r2, [sp, #16]
 8010d54:	b9d8      	cbnz	r0, 8010d8e <_svfiprintf_r+0xe6>
 8010d56:	06d0      	lsls	r0, r2, #27
 8010d58:	bf44      	itt	mi
 8010d5a:	2320      	movmi	r3, #32
 8010d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d60:	0711      	lsls	r1, r2, #28
 8010d62:	bf44      	itt	mi
 8010d64:	232b      	movmi	r3, #43	; 0x2b
 8010d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d70:	d015      	beq.n	8010d9e <_svfiprintf_r+0xf6>
 8010d72:	9a07      	ldr	r2, [sp, #28]
 8010d74:	4654      	mov	r4, sl
 8010d76:	2000      	movs	r0, #0
 8010d78:	f04f 0c0a 	mov.w	ip, #10
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d82:	3b30      	subs	r3, #48	; 0x30
 8010d84:	2b09      	cmp	r3, #9
 8010d86:	d94e      	bls.n	8010e26 <_svfiprintf_r+0x17e>
 8010d88:	b1b0      	cbz	r0, 8010db8 <_svfiprintf_r+0x110>
 8010d8a:	9207      	str	r2, [sp, #28]
 8010d8c:	e014      	b.n	8010db8 <_svfiprintf_r+0x110>
 8010d8e:	eba0 0308 	sub.w	r3, r0, r8
 8010d92:	fa09 f303 	lsl.w	r3, r9, r3
 8010d96:	4313      	orrs	r3, r2
 8010d98:	9304      	str	r3, [sp, #16]
 8010d9a:	46a2      	mov	sl, r4
 8010d9c:	e7d2      	b.n	8010d44 <_svfiprintf_r+0x9c>
 8010d9e:	9b03      	ldr	r3, [sp, #12]
 8010da0:	1d19      	adds	r1, r3, #4
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	9103      	str	r1, [sp, #12]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	bfbb      	ittet	lt
 8010daa:	425b      	neglt	r3, r3
 8010dac:	f042 0202 	orrlt.w	r2, r2, #2
 8010db0:	9307      	strge	r3, [sp, #28]
 8010db2:	9307      	strlt	r3, [sp, #28]
 8010db4:	bfb8      	it	lt
 8010db6:	9204      	strlt	r2, [sp, #16]
 8010db8:	7823      	ldrb	r3, [r4, #0]
 8010dba:	2b2e      	cmp	r3, #46	; 0x2e
 8010dbc:	d10c      	bne.n	8010dd8 <_svfiprintf_r+0x130>
 8010dbe:	7863      	ldrb	r3, [r4, #1]
 8010dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8010dc2:	d135      	bne.n	8010e30 <_svfiprintf_r+0x188>
 8010dc4:	9b03      	ldr	r3, [sp, #12]
 8010dc6:	1d1a      	adds	r2, r3, #4
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	9203      	str	r2, [sp, #12]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	bfb8      	it	lt
 8010dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dd4:	3402      	adds	r4, #2
 8010dd6:	9305      	str	r3, [sp, #20]
 8010dd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ea4 <_svfiprintf_r+0x1fc>
 8010ddc:	7821      	ldrb	r1, [r4, #0]
 8010dde:	2203      	movs	r2, #3
 8010de0:	4650      	mov	r0, sl
 8010de2:	f7ef fa7d 	bl	80002e0 <memchr>
 8010de6:	b140      	cbz	r0, 8010dfa <_svfiprintf_r+0x152>
 8010de8:	2340      	movs	r3, #64	; 0x40
 8010dea:	eba0 000a 	sub.w	r0, r0, sl
 8010dee:	fa03 f000 	lsl.w	r0, r3, r0
 8010df2:	9b04      	ldr	r3, [sp, #16]
 8010df4:	4303      	orrs	r3, r0
 8010df6:	3401      	adds	r4, #1
 8010df8:	9304      	str	r3, [sp, #16]
 8010dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfe:	4826      	ldr	r0, [pc, #152]	; (8010e98 <_svfiprintf_r+0x1f0>)
 8010e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e04:	2206      	movs	r2, #6
 8010e06:	f7ef fa6b 	bl	80002e0 <memchr>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	d038      	beq.n	8010e80 <_svfiprintf_r+0x1d8>
 8010e0e:	4b23      	ldr	r3, [pc, #140]	; (8010e9c <_svfiprintf_r+0x1f4>)
 8010e10:	bb1b      	cbnz	r3, 8010e5a <_svfiprintf_r+0x1b2>
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	3307      	adds	r3, #7
 8010e16:	f023 0307 	bic.w	r3, r3, #7
 8010e1a:	3308      	adds	r3, #8
 8010e1c:	9303      	str	r3, [sp, #12]
 8010e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e20:	4433      	add	r3, r6
 8010e22:	9309      	str	r3, [sp, #36]	; 0x24
 8010e24:	e767      	b.n	8010cf6 <_svfiprintf_r+0x4e>
 8010e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	2001      	movs	r0, #1
 8010e2e:	e7a5      	b.n	8010d7c <_svfiprintf_r+0xd4>
 8010e30:	2300      	movs	r3, #0
 8010e32:	3401      	adds	r4, #1
 8010e34:	9305      	str	r3, [sp, #20]
 8010e36:	4619      	mov	r1, r3
 8010e38:	f04f 0c0a 	mov.w	ip, #10
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e42:	3a30      	subs	r2, #48	; 0x30
 8010e44:	2a09      	cmp	r2, #9
 8010e46:	d903      	bls.n	8010e50 <_svfiprintf_r+0x1a8>
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d0c5      	beq.n	8010dd8 <_svfiprintf_r+0x130>
 8010e4c:	9105      	str	r1, [sp, #20]
 8010e4e:	e7c3      	b.n	8010dd8 <_svfiprintf_r+0x130>
 8010e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e54:	4604      	mov	r4, r0
 8010e56:	2301      	movs	r3, #1
 8010e58:	e7f0      	b.n	8010e3c <_svfiprintf_r+0x194>
 8010e5a:	ab03      	add	r3, sp, #12
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	462a      	mov	r2, r5
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <_svfiprintf_r+0x1f8>)
 8010e62:	a904      	add	r1, sp, #16
 8010e64:	4638      	mov	r0, r7
 8010e66:	f3af 8000 	nop.w
 8010e6a:	1c42      	adds	r2, r0, #1
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	d1d6      	bne.n	8010e1e <_svfiprintf_r+0x176>
 8010e70:	89ab      	ldrh	r3, [r5, #12]
 8010e72:	065b      	lsls	r3, r3, #25
 8010e74:	f53f af2c 	bmi.w	8010cd0 <_svfiprintf_r+0x28>
 8010e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e7a:	b01d      	add	sp, #116	; 0x74
 8010e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e80:	ab03      	add	r3, sp, #12
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	462a      	mov	r2, r5
 8010e86:	4b06      	ldr	r3, [pc, #24]	; (8010ea0 <_svfiprintf_r+0x1f8>)
 8010e88:	a904      	add	r1, sp, #16
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	f000 f87a 	bl	8010f84 <_printf_i>
 8010e90:	e7eb      	b.n	8010e6a <_svfiprintf_r+0x1c2>
 8010e92:	bf00      	nop
 8010e94:	08012cb4 	.word	0x08012cb4
 8010e98:	08012cbe 	.word	0x08012cbe
 8010e9c:	00000000 	.word	0x00000000
 8010ea0:	08010bf1 	.word	0x08010bf1
 8010ea4:	08012cba 	.word	0x08012cba

08010ea8 <_printf_common>:
 8010ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eac:	4616      	mov	r6, r2
 8010eae:	4699      	mov	r9, r3
 8010eb0:	688a      	ldr	r2, [r1, #8]
 8010eb2:	690b      	ldr	r3, [r1, #16]
 8010eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	bfb8      	it	lt
 8010ebc:	4613      	movlt	r3, r2
 8010ebe:	6033      	str	r3, [r6, #0]
 8010ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	b10a      	cbz	r2, 8010ece <_printf_common+0x26>
 8010eca:	3301      	adds	r3, #1
 8010ecc:	6033      	str	r3, [r6, #0]
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	0699      	lsls	r1, r3, #26
 8010ed2:	bf42      	ittt	mi
 8010ed4:	6833      	ldrmi	r3, [r6, #0]
 8010ed6:	3302      	addmi	r3, #2
 8010ed8:	6033      	strmi	r3, [r6, #0]
 8010eda:	6825      	ldr	r5, [r4, #0]
 8010edc:	f015 0506 	ands.w	r5, r5, #6
 8010ee0:	d106      	bne.n	8010ef0 <_printf_common+0x48>
 8010ee2:	f104 0a19 	add.w	sl, r4, #25
 8010ee6:	68e3      	ldr	r3, [r4, #12]
 8010ee8:	6832      	ldr	r2, [r6, #0]
 8010eea:	1a9b      	subs	r3, r3, r2
 8010eec:	42ab      	cmp	r3, r5
 8010eee:	dc26      	bgt.n	8010f3e <_printf_common+0x96>
 8010ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ef4:	1e13      	subs	r3, r2, #0
 8010ef6:	6822      	ldr	r2, [r4, #0]
 8010ef8:	bf18      	it	ne
 8010efa:	2301      	movne	r3, #1
 8010efc:	0692      	lsls	r2, r2, #26
 8010efe:	d42b      	bmi.n	8010f58 <_printf_common+0xb0>
 8010f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f04:	4649      	mov	r1, r9
 8010f06:	4638      	mov	r0, r7
 8010f08:	47c0      	blx	r8
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d01e      	beq.n	8010f4c <_printf_common+0xa4>
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	68e5      	ldr	r5, [r4, #12]
 8010f12:	6832      	ldr	r2, [r6, #0]
 8010f14:	f003 0306 	and.w	r3, r3, #6
 8010f18:	2b04      	cmp	r3, #4
 8010f1a:	bf08      	it	eq
 8010f1c:	1aad      	subeq	r5, r5, r2
 8010f1e:	68a3      	ldr	r3, [r4, #8]
 8010f20:	6922      	ldr	r2, [r4, #16]
 8010f22:	bf0c      	ite	eq
 8010f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f28:	2500      	movne	r5, #0
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	bfc4      	itt	gt
 8010f2e:	1a9b      	subgt	r3, r3, r2
 8010f30:	18ed      	addgt	r5, r5, r3
 8010f32:	2600      	movs	r6, #0
 8010f34:	341a      	adds	r4, #26
 8010f36:	42b5      	cmp	r5, r6
 8010f38:	d11a      	bne.n	8010f70 <_printf_common+0xc8>
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	e008      	b.n	8010f50 <_printf_common+0xa8>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4652      	mov	r2, sl
 8010f42:	4649      	mov	r1, r9
 8010f44:	4638      	mov	r0, r7
 8010f46:	47c0      	blx	r8
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d103      	bne.n	8010f54 <_printf_common+0xac>
 8010f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f54:	3501      	adds	r5, #1
 8010f56:	e7c6      	b.n	8010ee6 <_printf_common+0x3e>
 8010f58:	18e1      	adds	r1, r4, r3
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	2030      	movs	r0, #48	; 0x30
 8010f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f62:	4422      	add	r2, r4
 8010f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f6c:	3302      	adds	r3, #2
 8010f6e:	e7c7      	b.n	8010f00 <_printf_common+0x58>
 8010f70:	2301      	movs	r3, #1
 8010f72:	4622      	mov	r2, r4
 8010f74:	4649      	mov	r1, r9
 8010f76:	4638      	mov	r0, r7
 8010f78:	47c0      	blx	r8
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	d0e6      	beq.n	8010f4c <_printf_common+0xa4>
 8010f7e:	3601      	adds	r6, #1
 8010f80:	e7d9      	b.n	8010f36 <_printf_common+0x8e>
	...

08010f84 <_printf_i>:
 8010f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f88:	7e0f      	ldrb	r7, [r1, #24]
 8010f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f8c:	2f78      	cmp	r7, #120	; 0x78
 8010f8e:	4691      	mov	r9, r2
 8010f90:	4680      	mov	r8, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	469a      	mov	sl, r3
 8010f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f9a:	d807      	bhi.n	8010fac <_printf_i+0x28>
 8010f9c:	2f62      	cmp	r7, #98	; 0x62
 8010f9e:	d80a      	bhi.n	8010fb6 <_printf_i+0x32>
 8010fa0:	2f00      	cmp	r7, #0
 8010fa2:	f000 80d8 	beq.w	8011156 <_printf_i+0x1d2>
 8010fa6:	2f58      	cmp	r7, #88	; 0x58
 8010fa8:	f000 80a3 	beq.w	80110f2 <_printf_i+0x16e>
 8010fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fb4:	e03a      	b.n	801102c <_printf_i+0xa8>
 8010fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fba:	2b15      	cmp	r3, #21
 8010fbc:	d8f6      	bhi.n	8010fac <_printf_i+0x28>
 8010fbe:	a101      	add	r1, pc, #4	; (adr r1, 8010fc4 <_printf_i+0x40>)
 8010fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fc4:	0801101d 	.word	0x0801101d
 8010fc8:	08011031 	.word	0x08011031
 8010fcc:	08010fad 	.word	0x08010fad
 8010fd0:	08010fad 	.word	0x08010fad
 8010fd4:	08010fad 	.word	0x08010fad
 8010fd8:	08010fad 	.word	0x08010fad
 8010fdc:	08011031 	.word	0x08011031
 8010fe0:	08010fad 	.word	0x08010fad
 8010fe4:	08010fad 	.word	0x08010fad
 8010fe8:	08010fad 	.word	0x08010fad
 8010fec:	08010fad 	.word	0x08010fad
 8010ff0:	0801113d 	.word	0x0801113d
 8010ff4:	08011061 	.word	0x08011061
 8010ff8:	0801111f 	.word	0x0801111f
 8010ffc:	08010fad 	.word	0x08010fad
 8011000:	08010fad 	.word	0x08010fad
 8011004:	0801115f 	.word	0x0801115f
 8011008:	08010fad 	.word	0x08010fad
 801100c:	08011061 	.word	0x08011061
 8011010:	08010fad 	.word	0x08010fad
 8011014:	08010fad 	.word	0x08010fad
 8011018:	08011127 	.word	0x08011127
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	1d1a      	adds	r2, r3, #4
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	602a      	str	r2, [r5, #0]
 8011024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801102c:	2301      	movs	r3, #1
 801102e:	e0a3      	b.n	8011178 <_printf_i+0x1f4>
 8011030:	6820      	ldr	r0, [r4, #0]
 8011032:	6829      	ldr	r1, [r5, #0]
 8011034:	0606      	lsls	r6, r0, #24
 8011036:	f101 0304 	add.w	r3, r1, #4
 801103a:	d50a      	bpl.n	8011052 <_printf_i+0xce>
 801103c:	680e      	ldr	r6, [r1, #0]
 801103e:	602b      	str	r3, [r5, #0]
 8011040:	2e00      	cmp	r6, #0
 8011042:	da03      	bge.n	801104c <_printf_i+0xc8>
 8011044:	232d      	movs	r3, #45	; 0x2d
 8011046:	4276      	negs	r6, r6
 8011048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801104c:	485e      	ldr	r0, [pc, #376]	; (80111c8 <_printf_i+0x244>)
 801104e:	230a      	movs	r3, #10
 8011050:	e019      	b.n	8011086 <_printf_i+0x102>
 8011052:	680e      	ldr	r6, [r1, #0]
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	f010 0f40 	tst.w	r0, #64	; 0x40
 801105a:	bf18      	it	ne
 801105c:	b236      	sxthne	r6, r6
 801105e:	e7ef      	b.n	8011040 <_printf_i+0xbc>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	6820      	ldr	r0, [r4, #0]
 8011064:	1d19      	adds	r1, r3, #4
 8011066:	6029      	str	r1, [r5, #0]
 8011068:	0601      	lsls	r1, r0, #24
 801106a:	d501      	bpl.n	8011070 <_printf_i+0xec>
 801106c:	681e      	ldr	r6, [r3, #0]
 801106e:	e002      	b.n	8011076 <_printf_i+0xf2>
 8011070:	0646      	lsls	r6, r0, #25
 8011072:	d5fb      	bpl.n	801106c <_printf_i+0xe8>
 8011074:	881e      	ldrh	r6, [r3, #0]
 8011076:	4854      	ldr	r0, [pc, #336]	; (80111c8 <_printf_i+0x244>)
 8011078:	2f6f      	cmp	r7, #111	; 0x6f
 801107a:	bf0c      	ite	eq
 801107c:	2308      	moveq	r3, #8
 801107e:	230a      	movne	r3, #10
 8011080:	2100      	movs	r1, #0
 8011082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011086:	6865      	ldr	r5, [r4, #4]
 8011088:	60a5      	str	r5, [r4, #8]
 801108a:	2d00      	cmp	r5, #0
 801108c:	bfa2      	ittt	ge
 801108e:	6821      	ldrge	r1, [r4, #0]
 8011090:	f021 0104 	bicge.w	r1, r1, #4
 8011094:	6021      	strge	r1, [r4, #0]
 8011096:	b90e      	cbnz	r6, 801109c <_printf_i+0x118>
 8011098:	2d00      	cmp	r5, #0
 801109a:	d04d      	beq.n	8011138 <_printf_i+0x1b4>
 801109c:	4615      	mov	r5, r2
 801109e:	fbb6 f1f3 	udiv	r1, r6, r3
 80110a2:	fb03 6711 	mls	r7, r3, r1, r6
 80110a6:	5dc7      	ldrb	r7, [r0, r7]
 80110a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110ac:	4637      	mov	r7, r6
 80110ae:	42bb      	cmp	r3, r7
 80110b0:	460e      	mov	r6, r1
 80110b2:	d9f4      	bls.n	801109e <_printf_i+0x11a>
 80110b4:	2b08      	cmp	r3, #8
 80110b6:	d10b      	bne.n	80110d0 <_printf_i+0x14c>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	07de      	lsls	r6, r3, #31
 80110bc:	d508      	bpl.n	80110d0 <_printf_i+0x14c>
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	6861      	ldr	r1, [r4, #4]
 80110c2:	4299      	cmp	r1, r3
 80110c4:	bfde      	ittt	le
 80110c6:	2330      	movle	r3, #48	; 0x30
 80110c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110d0:	1b52      	subs	r2, r2, r5
 80110d2:	6122      	str	r2, [r4, #16]
 80110d4:	f8cd a000 	str.w	sl, [sp]
 80110d8:	464b      	mov	r3, r9
 80110da:	aa03      	add	r2, sp, #12
 80110dc:	4621      	mov	r1, r4
 80110de:	4640      	mov	r0, r8
 80110e0:	f7ff fee2 	bl	8010ea8 <_printf_common>
 80110e4:	3001      	adds	r0, #1
 80110e6:	d14c      	bne.n	8011182 <_printf_i+0x1fe>
 80110e8:	f04f 30ff 	mov.w	r0, #4294967295
 80110ec:	b004      	add	sp, #16
 80110ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f2:	4835      	ldr	r0, [pc, #212]	; (80111c8 <_printf_i+0x244>)
 80110f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80110f8:	6829      	ldr	r1, [r5, #0]
 80110fa:	6823      	ldr	r3, [r4, #0]
 80110fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8011100:	6029      	str	r1, [r5, #0]
 8011102:	061d      	lsls	r5, r3, #24
 8011104:	d514      	bpl.n	8011130 <_printf_i+0x1ac>
 8011106:	07df      	lsls	r7, r3, #31
 8011108:	bf44      	itt	mi
 801110a:	f043 0320 	orrmi.w	r3, r3, #32
 801110e:	6023      	strmi	r3, [r4, #0]
 8011110:	b91e      	cbnz	r6, 801111a <_printf_i+0x196>
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	f023 0320 	bic.w	r3, r3, #32
 8011118:	6023      	str	r3, [r4, #0]
 801111a:	2310      	movs	r3, #16
 801111c:	e7b0      	b.n	8011080 <_printf_i+0xfc>
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	f043 0320 	orr.w	r3, r3, #32
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	2378      	movs	r3, #120	; 0x78
 8011128:	4828      	ldr	r0, [pc, #160]	; (80111cc <_printf_i+0x248>)
 801112a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801112e:	e7e3      	b.n	80110f8 <_printf_i+0x174>
 8011130:	0659      	lsls	r1, r3, #25
 8011132:	bf48      	it	mi
 8011134:	b2b6      	uxthmi	r6, r6
 8011136:	e7e6      	b.n	8011106 <_printf_i+0x182>
 8011138:	4615      	mov	r5, r2
 801113a:	e7bb      	b.n	80110b4 <_printf_i+0x130>
 801113c:	682b      	ldr	r3, [r5, #0]
 801113e:	6826      	ldr	r6, [r4, #0]
 8011140:	6961      	ldr	r1, [r4, #20]
 8011142:	1d18      	adds	r0, r3, #4
 8011144:	6028      	str	r0, [r5, #0]
 8011146:	0635      	lsls	r5, r6, #24
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	d501      	bpl.n	8011150 <_printf_i+0x1cc>
 801114c:	6019      	str	r1, [r3, #0]
 801114e:	e002      	b.n	8011156 <_printf_i+0x1d2>
 8011150:	0670      	lsls	r0, r6, #25
 8011152:	d5fb      	bpl.n	801114c <_printf_i+0x1c8>
 8011154:	8019      	strh	r1, [r3, #0]
 8011156:	2300      	movs	r3, #0
 8011158:	6123      	str	r3, [r4, #16]
 801115a:	4615      	mov	r5, r2
 801115c:	e7ba      	b.n	80110d4 <_printf_i+0x150>
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	1d1a      	adds	r2, r3, #4
 8011162:	602a      	str	r2, [r5, #0]
 8011164:	681d      	ldr	r5, [r3, #0]
 8011166:	6862      	ldr	r2, [r4, #4]
 8011168:	2100      	movs	r1, #0
 801116a:	4628      	mov	r0, r5
 801116c:	f7ef f8b8 	bl	80002e0 <memchr>
 8011170:	b108      	cbz	r0, 8011176 <_printf_i+0x1f2>
 8011172:	1b40      	subs	r0, r0, r5
 8011174:	6060      	str	r0, [r4, #4]
 8011176:	6863      	ldr	r3, [r4, #4]
 8011178:	6123      	str	r3, [r4, #16]
 801117a:	2300      	movs	r3, #0
 801117c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011180:	e7a8      	b.n	80110d4 <_printf_i+0x150>
 8011182:	6923      	ldr	r3, [r4, #16]
 8011184:	462a      	mov	r2, r5
 8011186:	4649      	mov	r1, r9
 8011188:	4640      	mov	r0, r8
 801118a:	47d0      	blx	sl
 801118c:	3001      	adds	r0, #1
 801118e:	d0ab      	beq.n	80110e8 <_printf_i+0x164>
 8011190:	6823      	ldr	r3, [r4, #0]
 8011192:	079b      	lsls	r3, r3, #30
 8011194:	d413      	bmi.n	80111be <_printf_i+0x23a>
 8011196:	68e0      	ldr	r0, [r4, #12]
 8011198:	9b03      	ldr	r3, [sp, #12]
 801119a:	4298      	cmp	r0, r3
 801119c:	bfb8      	it	lt
 801119e:	4618      	movlt	r0, r3
 80111a0:	e7a4      	b.n	80110ec <_printf_i+0x168>
 80111a2:	2301      	movs	r3, #1
 80111a4:	4632      	mov	r2, r6
 80111a6:	4649      	mov	r1, r9
 80111a8:	4640      	mov	r0, r8
 80111aa:	47d0      	blx	sl
 80111ac:	3001      	adds	r0, #1
 80111ae:	d09b      	beq.n	80110e8 <_printf_i+0x164>
 80111b0:	3501      	adds	r5, #1
 80111b2:	68e3      	ldr	r3, [r4, #12]
 80111b4:	9903      	ldr	r1, [sp, #12]
 80111b6:	1a5b      	subs	r3, r3, r1
 80111b8:	42ab      	cmp	r3, r5
 80111ba:	dcf2      	bgt.n	80111a2 <_printf_i+0x21e>
 80111bc:	e7eb      	b.n	8011196 <_printf_i+0x212>
 80111be:	2500      	movs	r5, #0
 80111c0:	f104 0619 	add.w	r6, r4, #25
 80111c4:	e7f5      	b.n	80111b2 <_printf_i+0x22e>
 80111c6:	bf00      	nop
 80111c8:	08012cc5 	.word	0x08012cc5
 80111cc:	08012cd6 	.word	0x08012cd6

080111d0 <__retarget_lock_acquire_recursive>:
 80111d0:	4770      	bx	lr

080111d2 <__retarget_lock_release_recursive>:
 80111d2:	4770      	bx	lr

080111d4 <memcpy>:
 80111d4:	440a      	add	r2, r1
 80111d6:	4291      	cmp	r1, r2
 80111d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80111dc:	d100      	bne.n	80111e0 <memcpy+0xc>
 80111de:	4770      	bx	lr
 80111e0:	b510      	push	{r4, lr}
 80111e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111ea:	4291      	cmp	r1, r2
 80111ec:	d1f9      	bne.n	80111e2 <memcpy+0xe>
 80111ee:	bd10      	pop	{r4, pc}

080111f0 <memmove>:
 80111f0:	4288      	cmp	r0, r1
 80111f2:	b510      	push	{r4, lr}
 80111f4:	eb01 0402 	add.w	r4, r1, r2
 80111f8:	d902      	bls.n	8011200 <memmove+0x10>
 80111fa:	4284      	cmp	r4, r0
 80111fc:	4623      	mov	r3, r4
 80111fe:	d807      	bhi.n	8011210 <memmove+0x20>
 8011200:	1e43      	subs	r3, r0, #1
 8011202:	42a1      	cmp	r1, r4
 8011204:	d008      	beq.n	8011218 <memmove+0x28>
 8011206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801120a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801120e:	e7f8      	b.n	8011202 <memmove+0x12>
 8011210:	4402      	add	r2, r0
 8011212:	4601      	mov	r1, r0
 8011214:	428a      	cmp	r2, r1
 8011216:	d100      	bne.n	801121a <memmove+0x2a>
 8011218:	bd10      	pop	{r4, pc}
 801121a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801121e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011222:	e7f7      	b.n	8011214 <memmove+0x24>

08011224 <_realloc_r>:
 8011224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011228:	4680      	mov	r8, r0
 801122a:	4614      	mov	r4, r2
 801122c:	460e      	mov	r6, r1
 801122e:	b921      	cbnz	r1, 801123a <_realloc_r+0x16>
 8011230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011234:	4611      	mov	r1, r2
 8011236:	f7ff bc2b 	b.w	8010a90 <_malloc_r>
 801123a:	b92a      	cbnz	r2, 8011248 <_realloc_r+0x24>
 801123c:	f7ff fbbc 	bl	80109b8 <_free_r>
 8011240:	4625      	mov	r5, r4
 8011242:	4628      	mov	r0, r5
 8011244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011248:	f000 f81b 	bl	8011282 <_malloc_usable_size_r>
 801124c:	4284      	cmp	r4, r0
 801124e:	4607      	mov	r7, r0
 8011250:	d802      	bhi.n	8011258 <_realloc_r+0x34>
 8011252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011256:	d812      	bhi.n	801127e <_realloc_r+0x5a>
 8011258:	4621      	mov	r1, r4
 801125a:	4640      	mov	r0, r8
 801125c:	f7ff fc18 	bl	8010a90 <_malloc_r>
 8011260:	4605      	mov	r5, r0
 8011262:	2800      	cmp	r0, #0
 8011264:	d0ed      	beq.n	8011242 <_realloc_r+0x1e>
 8011266:	42bc      	cmp	r4, r7
 8011268:	4622      	mov	r2, r4
 801126a:	4631      	mov	r1, r6
 801126c:	bf28      	it	cs
 801126e:	463a      	movcs	r2, r7
 8011270:	f7ff ffb0 	bl	80111d4 <memcpy>
 8011274:	4631      	mov	r1, r6
 8011276:	4640      	mov	r0, r8
 8011278:	f7ff fb9e 	bl	80109b8 <_free_r>
 801127c:	e7e1      	b.n	8011242 <_realloc_r+0x1e>
 801127e:	4635      	mov	r5, r6
 8011280:	e7df      	b.n	8011242 <_realloc_r+0x1e>

08011282 <_malloc_usable_size_r>:
 8011282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011286:	1f18      	subs	r0, r3, #4
 8011288:	2b00      	cmp	r3, #0
 801128a:	bfbc      	itt	lt
 801128c:	580b      	ldrlt	r3, [r1, r0]
 801128e:	18c0      	addlt	r0, r0, r3
 8011290:	4770      	bx	lr
	...

08011294 <_init>:
 8011294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011296:	bf00      	nop
 8011298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801129a:	bc08      	pop	{r3}
 801129c:	469e      	mov	lr, r3
 801129e:	4770      	bx	lr

080112a0 <_fini>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	bf00      	nop
 80112a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112a6:	bc08      	pop	{r3}
 80112a8:	469e      	mov	lr, r3
 80112aa:	4770      	bx	lr
