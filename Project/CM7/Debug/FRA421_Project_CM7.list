
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d634  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800d8d4  0800d8d4  0001d8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe8  0800efe8  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe8  0800efe8  0001efe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eff0  0800eff0  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eff0  0800eff0  0001eff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eff4  0800eff4  0001eff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800eff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800f080  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800f0e0  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d78  24000148  0800f140  00020148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec0  0800f140  00020ec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025d8e  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00045f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a58  00000000  00000000  00049b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001980  00000000  00000000  0004b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0004ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022a56  00000000  00000000  0008a90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019371f  00000000  00000000  000ad361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00240a80  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000075bc  00000000  00000000  00240ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d8bc 	.word	0x0800d8bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800d8bc 	.word	0x0800d8bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3318      	adds	r3, #24
 800077e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80c4 	bne.w	8000926 <Player_Reading_Card+0x1d2>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType !=3) {
 80007a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d003      	beq.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	3310      	adds	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	3301      	adds	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080e:	3310      	adds	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	3301      	adds	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	3310      	adds	r3, #16
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3301      	adds	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		if (player->turn == first && flag_played == 0) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000858:	2b00      	cmp	r3, #0
 800085a:	d12f      	bne.n	80008bc <Player_Reading_Card+0x168>
 800085c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000860:	2b00      	cmp	r3, #0
 8000862:	d12b      	bne.n	80008bc <Player_Reading_Card+0x168>

			if (ptrYugiohCard_src->standPosition < 6)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	799b      	ldrb	r3, [r3, #6]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d85c      	bhi.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f8e0 	bl	8000a32 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	6978      	ldr	r0, [r7, #20]
 8000876:	f7ff ff05 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	799a      	ldrb	r2, [r3, #6]
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <Player_Reading_Card+0x1dc>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	0899      	lsrs	r1, r3, #2
 8000886:	460b      	mov	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2200      	movs	r2, #0
 800089a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2201      	movs	r2, #1
 80008a0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80008a2:	69b8      	ldr	r0, [r7, #24]
 80008a4:	f7ff ff3a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80008ba:	e034      	b.n	8000926 <Player_Reading_Card+0x1d2>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12f      	bne.n	8000926 <Player_Reading_Card+0x1d2>
 80008c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d12b      	bne.n	8000926 <Player_Reading_Card+0x1d2>
			if (ptrYugiohCard_src->standPosition >= 6)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d927      	bls.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f8ab 	bl	8000a32 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff fed0 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	799a      	ldrb	r2, [r3, #6]
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <Player_Reading_Card+0x1dc>)
 80008ea:	fba3 1302 	umull	r1, r3, r3, r2
 80008ee:	0899      	lsrs	r1, r3, #2
 80008f0:	460b      	mov	r3, r1
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2200      	movs	r2, #0
 8000904:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2201      	movs	r2, #1
 800090a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f7ff ff05 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	2200      	movs	r2, #0
 8000916:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000924:	e7ff      	b.n	8000926 <Player_Reading_Card+0x1d2>
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	aaaaaaab 	.word	0xaaaaaaab

08000934 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000950:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000952:	2300      	movs	r3, #0
 8000954:	76fb      	strb	r3, [r7, #27]
 8000956:	e00b      	b.n	8000970 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	69f9      	ldr	r1, [r7, #28]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe90 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	3310      	adds	r3, #16
 8000968:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800096a:	7efb      	ldrb	r3, [r7, #27]
 800096c:	3301      	adds	r3, #1
 800096e:	76fb      	strb	r3, [r7, #27]
 8000970:	7efb      	ldrb	r3, [r7, #27]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d9f0      	bls.n	8000958 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800099c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800099e:	2300      	movs	r3, #0
 80009a0:	76fb      	strb	r3, [r7, #27]
 80009a2:	e00b      	b.n	80009bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	69f9      	ldr	r1, [r7, #28]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe6a 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3310      	adds	r3, #16
 80009b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80009b6:	7efb      	ldrb	r3, [r7, #27]
 80009b8:	3301      	adds	r3, #1
 80009ba:	76fb      	strb	r3, [r7, #27]
 80009bc:	7efb      	ldrb	r3, [r7, #27]
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d9f0      	bls.n	80009a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3368      	adds	r3, #104	; 0x68
 80009c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80009c8:	2300      	movs	r3, #0
 80009ca:	76bb      	strb	r3, [r7, #26]
 80009cc:	e00b      	b.n	80009e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	69f9      	ldr	r1, [r7, #28]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe55 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3310      	adds	r3, #16
 80009de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80009e0:	7ebb      	ldrb	r3, [r7, #26]
 80009e2:	3301      	adds	r3, #1
 80009e4:	76bb      	strb	r3, [r7, #26]
 80009e6:	7ebb      	ldrb	r3, [r7, #26]
 80009e8:	2b13      	cmp	r3, #19
 80009ea:	d9f0      	bls.n	80009ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3308      	adds	r3, #8
 80009f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80009f2:	2300      	movs	r3, #0
 80009f4:	767b      	strb	r3, [r7, #25]
 80009f6:	e00b      	b.n	8000a10 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	69f9      	ldr	r1, [r7, #28]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe40 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	3310      	adds	r3, #16
 8000a08:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000a0a:	7e7b      	ldrb	r3, [r7, #25]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	767b      	strb	r3, [r7, #25]
 8000a10:	7e7b      	ldrb	r3, [r7, #25]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d9f0      	bls.n	80009f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000a1c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	69f9      	ldr	r1, [r7, #28]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe2d 	bl	8000684 <YUGIOH_card_copy>
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000a40:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000a48:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000a50:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000a58:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e00c      	b.n	8000a7a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff fe0e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3b10      	subs	r3, #16
 8000a6c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3b10      	subs	r3, #16
 8000a72:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dcef      	bgt.n	8000a60 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000a98:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000aa0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000aa8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000ab0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e02c      	b.n	8000b12 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff fde2 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	1e50      	subs	r0, r2, #1
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3b02      	subs	r3, #2
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	1e50      	subs	r0, r2, #1
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3b10      	subs	r3, #16
 8000b04:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	3b10      	subs	r3, #16
 8000b0a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dccf      	bgt.n	8000ab8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b08a      	sub	sp, #40	; 0x28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3368      	adds	r3, #104	; 0x68
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3368      	adds	r3, #104	; 0x68
 8000b4c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000b54:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000b56:	2314      	movs	r3, #20
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e00c      	b.n	8000b76 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000b5c:	6a39      	ldr	r1, [r7, #32]
 8000b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b60:	f7ff fd90 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b10      	subs	r3, #16
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3b10      	subs	r3, #16
 8000b6e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dcef      	bgt.n	8000b5c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3368      	adds	r3, #104	; 0x68
 8000b84:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000b86:	6a39      	ldr	r1, [r7, #32]
 8000b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b8a:	f7ff fd7b 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b96:	6a38      	ldr	r0, [r7, #32]
 8000b98:	f7ff fd74 	bl	8000684 <YUGIOH_card_copy>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000bc6:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000be4:	2108      	movs	r1, #8
 8000be6:	48ad      	ldr	r0, [pc, #692]	; (8000e9c <GAME_PLAY_Management+0x2f8>)
 8000be8:	f006 fd10 	bl	800760c <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	48aa      	ldr	r0, [pc, #680]	; (8000ea0 <GAME_PLAY_Management+0x2fc>)
 8000bf8:	f006 fd08 	bl	800760c <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000c04:	2104      	movs	r1, #4
 8000c06:	48a5      	ldr	r0, [pc, #660]	; (8000e9c <GAME_PLAY_Management+0x2f8>)
 8000c08:	f006 fd00 	bl	800760c <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	48a2      	ldr	r0, [pc, #648]	; (8000ea4 <GAME_PLAY_Management+0x300>)
 8000c1a:	f006 fcf7 	bl	800760c <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000c2c:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3304      	adds	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	f200 82a6 	bhi.w	800118e <GAME_PLAY_Management+0x5ea>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <GAME_PLAY_Management+0xa4>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c5d 	.word	0x08000c5d
 8000c4c:	08000ed9 	.word	0x08000ed9
 8000c50:	08001037 	.word	0x08001037
 8000c54:	080010a9 	.word	0x080010a9
 8000c58:	0800111b 	.word	0x0800111b
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c5c:	4b92      	ldr	r3, [pc, #584]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	9202      	str	r2, [sp, #8]
 8000c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a8f      	ldr	r2, [pc, #572]	; (8000eac <GAME_PLAY_Management+0x308>)
 8000c70:	2105      	movs	r1, #5
 8000c72:	2005      	movs	r0, #5
 8000c74:	f002 fd07 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c78:	4b8b      	ldr	r3, [pc, #556]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a89      	ldr	r2, [pc, #548]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f002 fcf9 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c94:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a84      	ldr	r2, [pc, #528]	; (8000eb8 <GAME_PLAY_Management+0x314>)
 8000ca8:	2123      	movs	r1, #35	; 0x23
 8000caa:	2008      	movs	r0, #8
 8000cac:	f002 fceb 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000cb0:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	9202      	str	r2, [sp, #8]
 8000cb6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7e      	ldr	r2, [pc, #504]	; (8000ebc <GAME_PLAY_Management+0x318>)
 8000cc4:	213c      	movs	r1, #60	; 0x3c
 8000cc6:	2019      	movs	r0, #25
 8000cc8:	f002 fcdd 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ccc:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a74      	ldr	r2, [pc, #464]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000ce0:	214b      	movs	r1, #75	; 0x4b
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f002 fccf 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	9202      	str	r2, [sp, #8]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a71      	ldr	r2, [pc, #452]	; (8000ec0 <GAME_PLAY_Management+0x31c>)
 8000cfc:	215a      	movs	r1, #90	; 0x5a
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f002 fcc1 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d04:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	9202      	str	r2, [sp, #8]
 8000d0a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <GAME_PLAY_Management+0x320>)
 8000d18:	215a      	movs	r1, #90	; 0x5a
 8000d1a:	205d      	movs	r0, #93	; 0x5d
 8000d1c:	f002 fcb3 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d20:	4b61      	ldr	r3, [pc, #388]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	9202      	str	r2, [sp, #8]
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	9201      	str	r2, [sp, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a65      	ldr	r2, [pc, #404]	; (8000ec8 <GAME_PLAY_Management+0x324>)
 8000d34:	2169      	movs	r1, #105	; 0x69
 8000d36:	2000      	movs	r0, #0
 8000d38:	f002 fca5 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	9202      	str	r2, [sp, #8]
 8000d42:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <GAME_PLAY_Management+0x328>)
 8000d50:	2169      	movs	r1, #105	; 0x69
 8000d52:	2064      	movs	r0, #100	; 0x64
 8000d54:	f002 fc97 	bl	8003686 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	9202      	str	r2, [sp, #8]
 8000d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <GAME_PLAY_Management+0x32c>)
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f002 fcd3 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	9202      	str	r2, [sp, #8]
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	9201      	str	r2, [sp, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000d88:	210f      	movs	r1, #15
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f002 fcc5 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	9202      	str	r2, [sp, #8]
 8000d96:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	9200      	str	r2, [sp, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <GAME_PLAY_Management+0x314>)
 8000da4:	2123      	movs	r1, #35	; 0x23
 8000da6:	2008      	movs	r0, #8
 8000da8:	f002 fcb7 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <GAME_PLAY_Management+0x318>)
 8000dc0:	213c      	movs	r1, #60	; 0x3c
 8000dc2:	2014      	movs	r0, #20
 8000dc4:	f002 fca9 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000ddc:	214b      	movs	r1, #75	; 0x4b
 8000dde:	2000      	movs	r0, #0
 8000de0:	f002 fc9b 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	9202      	str	r2, [sp, #8]
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	9201      	str	r2, [sp, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <GAME_PLAY_Management+0x31c>)
 8000df8:	215a      	movs	r1, #90	; 0x5a
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f002 fc8d 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	9202      	str	r2, [sp, #8]
 8000e06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e0a:	9201      	str	r2, [sp, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <GAME_PLAY_Management+0x320>)
 8000e14:	215a      	movs	r1, #90	; 0x5a
 8000e16:	205d      	movs	r0, #93	; 0x5d
 8000e18:	f002 fc7f 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	9202      	str	r2, [sp, #8]
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a26      	ldr	r2, [pc, #152]	; (8000ec8 <GAME_PLAY_Management+0x324>)
 8000e30:	2169      	movs	r1, #105	; 0x69
 8000e32:	2000      	movs	r0, #0
 8000e34:	f002 fc71 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	9202      	str	r2, [sp, #8]
 8000e3e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e42:	9201      	str	r2, [sp, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <GAME_PLAY_Management+0x328>)
 8000e4c:	2169      	movs	r1, #105	; 0x69
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f002 fc63 	bl	800371a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000e54:	2108      	movs	r1, #8
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <GAME_PLAY_Management+0x330>)
 8000e58:	f006 fbd8 	bl	800760c <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10a      	bne.n	8000e78 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f002 fe76 	bl	8003b54 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f002 fe84 	bl	8003b76 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000e76:	e18a      	b.n	800118e <GAME_PLAY_Management+0x5ea>
			state_game->PlyerAction_State = PS_AFK;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000e98:	e179      	b.n	800118e <GAME_PLAY_Management+0x5ea>
 8000e9a:	bf00      	nop
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58020400 	.word	0x58020400
 8000ea4:	58021400 	.word	0x58021400
 8000ea8:	2400000c 	.word	0x2400000c
 8000eac:	0800d8d4 	.word	0x0800d8d4
 8000eb0:	0800d8e0 	.word	0x0800d8e0
 8000eb4:	24000014 	.word	0x24000014
 8000eb8:	0800d8f4 	.word	0x0800d8f4
 8000ebc:	0800d900 	.word	0x0800d900
 8000ec0:	0800d908 	.word	0x0800d908
 8000ec4:	0800d918 	.word	0x0800d918
 8000ec8:	0800d920 	.word	0x0800d920
 8000ecc:	0800d930 	.word	0x0800d930
 8000ed0:	0800d934 	.word	0x0800d934
 8000ed4:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ed8:	4baf      	ldr	r3, [pc, #700]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	9202      	str	r2, [sp, #8]
 8000ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4aac      	ldr	r2, [pc, #688]	; (800119c <GAME_PLAY_Management+0x5f8>)
 8000eec:	2105      	movs	r1, #5
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f002 fbc9 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ef4:	4ba8      	ldr	r3, [pc, #672]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	9202      	str	r2, [sp, #8]
 8000efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efe:	9201      	str	r2, [sp, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4aa6      	ldr	r2, [pc, #664]	; (80011a0 <GAME_PLAY_Management+0x5fc>)
 8000f08:	210f      	movs	r1, #15
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f002 fbbb 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000f10:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <GAME_PLAY_Management+0x600>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	9202      	str	r2, [sp, #8]
 8000f16:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4aa1      	ldr	r2, [pc, #644]	; (80011a8 <GAME_PLAY_Management+0x604>)
 8000f24:	2123      	movs	r1, #35	; 0x23
 8000f26:	2019      	movs	r0, #25
 8000f28:	f002 fbad 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000f2c:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <GAME_PLAY_Management+0x600>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	9202      	str	r2, [sp, #8]
 8000f32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a9b      	ldr	r2, [pc, #620]	; (80011ac <GAME_PLAY_Management+0x608>)
 8000f40:	213c      	movs	r1, #60	; 0x3c
 8000f42:	2021      	movs	r0, #33	; 0x21
 8000f44:	f002 fb9f 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f48:	4b93      	ldr	r3, [pc, #588]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	9202      	str	r2, [sp, #8]
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	9201      	str	r2, [sp, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a91      	ldr	r2, [pc, #580]	; (80011a0 <GAME_PLAY_Management+0x5fc>)
 8000f5c:	214b      	movs	r1, #75	; 0x4b
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f002 fb91 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f64:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	9202      	str	r2, [sp, #8]
 8000f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a8e      	ldr	r2, [pc, #568]	; (80011b0 <GAME_PLAY_Management+0x60c>)
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f002 fbcd 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f80:	4b85      	ldr	r3, [pc, #532]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	9202      	str	r2, [sp, #8]
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a83      	ldr	r2, [pc, #524]	; (80011a0 <GAME_PLAY_Management+0x5fc>)
 8000f94:	210f      	movs	r1, #15
 8000f96:	2000      	movs	r0, #0
 8000f98:	f002 fbbf 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000f9c:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <GAME_PLAY_Management+0x600>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	9202      	str	r2, [sp, #8]
 8000fa2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7e      	ldr	r2, [pc, #504]	; (80011a8 <GAME_PLAY_Management+0x604>)
 8000fb0:	2123      	movs	r1, #35	; 0x23
 8000fb2:	2019      	movs	r0, #25
 8000fb4:	f002 fbb1 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000fb8:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <GAME_PLAY_Management+0x600>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	9202      	str	r2, [sp, #8]
 8000fbe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <GAME_PLAY_Management+0x610>)
 8000fcc:	213c      	movs	r1, #60	; 0x3c
 8000fce:	2025      	movs	r0, #37	; 0x25
 8000fd0:	f002 fba3 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000fd4:	4b70      	ldr	r3, [pc, #448]	; (8001198 <GAME_PLAY_Management+0x5f4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	9202      	str	r2, [sp, #8]
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <GAME_PLAY_Management+0x5fc>)
 8000fe8:	214b      	movs	r1, #75	; 0x4b
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 fb95 	bl	800371a <ST7735_WriteString1>
		HAL_Delay(3000);
 8000ff0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ff4:	f003 f9bc 	bl	8004370 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f002 fdab 	bl	8003b54 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f002 fdb9 	bl	8003b76 <ST7735_FillScreen1>
		MainGUI();
 8001004:	f001 fb90 	bl	8002728 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800100e:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001016:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001018:	69f8      	ldr	r0, [r7, #28]
 800101a:	f7ff fcb1 	bl	8000980 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f7ff fcae 	bl	8000980 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8001034:	e0ab      	b.n	800118e <GAME_PLAY_Management+0x5ea>
	case first_player:
		if (state_game -> F_flag == 0){
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800103c:	2b00      	cmp	r3, #0
 800103e:	d125      	bne.n	800108c <GAME_PLAY_Management+0x4e8>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001040:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <GAME_PLAY_Management+0x600>)
 8001042:	2200      	movs	r2, #0
 8001044:	9202      	str	r2, [sp, #8]
 8001046:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <GAME_PLAY_Management+0x614>)
 8001054:	215a      	movs	r1, #90	; 0x5a
 8001056:	200f      	movs	r0, #15
 8001058:	f002 fb5f 	bl	800371a <ST7735_WriteString1>
			HAL_Delay(2000);
 800105c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001060:	f003 f986 	bl	8004370 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2326      	movs	r3, #38	; 0x26
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	215a      	movs	r1, #90	; 0x5a
 800106e:	2000      	movs	r0, #0
 8001070:	f002 fc72 	bl	8003958 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
		}
		ptrPlayerAtk = &state_game->player[0];
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3304      	adds	r3, #4
 8001090:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001098:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f88f 	bl	80011c4 <GAME_PLAY_Phase_Management>
		break;
 80010a6:	e072      	b.n	800118e <GAME_PLAY_Management+0x5ea>
	case second_player:
		if (state_game -> S_flag == 0){
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d125      	bne.n	80010fe <GAME_PLAY_Management+0x55a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <GAME_PLAY_Management+0x600>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	9202      	str	r2, [sp, #8]
 80010b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	9200      	str	r2, [sp, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <GAME_PLAY_Management+0x614>)
 80010c6:	215a      	movs	r1, #90	; 0x5a
 80010c8:	200f      	movs	r0, #15
 80010ca:	f002 fadc 	bl	8003686 <ST7735_WriteString>
			HAL_Delay(2000);
 80010ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010d2:	f003 f94d 	bl	8004370 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 80010d6:	2300      	movs	r3, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2326      	movs	r3, #38	; 0x26
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	215a      	movs	r1, #90	; 0x5a
 80010e0:	2000      	movs	r0, #0
 80010e2:	f002 fbc5 	bl	8003870 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
		}
		ptrPlayerAtk = &state_game->player[1];
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001104:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3304      	adds	r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f856 	bl	80011c4 <GAME_PLAY_Phase_Management>
		break;
 8001118:	e039      	b.n	800118e <GAME_PLAY_Management+0x5ea>
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2326      	movs	r3, #38	; 0x26
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	215a      	movs	r1, #90	; 0x5a
 8001128:	2000      	movs	r0, #0
 800112a:	f002 fc89 	bl	8003a40 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 800112e:	2300      	movs	r3, #0
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2326      	movs	r3, #38	; 0x26
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	215a      	movs	r1, #90	; 0x5a
 800113c:	2000      	movs	r0, #0
 800113e:	f002 fc7f 	bl	8003a40 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001142:	20c8      	movs	r0, #200	; 0xc8
 8001144:	f003 f914 	bl	8004370 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <GAME_PLAY_Management+0x600>)
 800114a:	2201      	movs	r2, #1
 800114c:	9203      	str	r2, [sp, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	9202      	str	r2, [sp, #8]
 8001152:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001156:	9201      	str	r2, [sp, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <GAME_PLAY_Management+0x618>)
 8001160:	215a      	movs	r1, #90	; 0x5a
 8001162:	2014      	movs	r0, #20
 8001164:	f002 fb23 	bl	80037ae <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <GAME_PLAY_Management+0x600>)
 800116a:	2200      	movs	r2, #0
 800116c:	9203      	str	r2, [sp, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	221f      	movs	r2, #31
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <GAME_PLAY_Management+0x61c>)
 800117e:	215a      	movs	r1, #90	; 0x5a
 8001180:	200f      	movs	r0, #15
 8001182:	f002 fb14 	bl	80037ae <ST7735_WriteStringNSS>
		HAL_Delay(200);
 8001186:	20c8      	movs	r0, #200	; 0xc8
 8001188:	f003 f8f2 	bl	8004370 <HAL_Delay>
		break;
 800118c:	bf00      	nop
	}
}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2400000c 	.word	0x2400000c
 800119c:	0800d8d4 	.word	0x0800d8d4
 80011a0:	0800d8e0 	.word	0x0800d8e0
 80011a4:	24000014 	.word	0x24000014
 80011a8:	0800d940 	.word	0x0800d940
 80011ac:	0800d948 	.word	0x0800d948
 80011b0:	0800d934 	.word	0x0800d934
 80011b4:	0800d950 	.word	0x0800d950
 80011b8:	0800d958 	.word	0x0800d958
 80011bc:	0800d964 	.word	0x0800d964
 80011c0:	0800d96c 	.word	0x0800d96c

080011c4 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b092      	sub	sp, #72	; 0x48
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 80011d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 80011e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80011ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 80011f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	f201 8092 	bhi.w	800231e <GAME_PLAY_Phase_Management+0x115a>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <GAME_PLAY_Phase_Management+0x3c>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08002311 	.word	0x08002311
 8001204:	08001211 	.word	0x08001211
 8001208:	080012dd 	.word	0x080012dd
 800120c:	08001c13 	.word	0x08001c13
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001210:	48a6      	ldr	r0, [pc, #664]	; (80014ac <GAME_PLAY_Phase_Management+0x2e8>)
 8001212:	f009 fb81 	bl	800a918 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 fb25 	bl	8002868 <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800121e:	4ba4      	ldr	r3, [pc, #656]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 8001220:	2200      	movs	r2, #0
 8001222:	9202      	str	r2, [sp, #8]
 8001224:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4aa0      	ldr	r2, [pc, #640]	; (80014b4 <GAME_PLAY_Phase_Management+0x2f0>)
 8001232:	2123      	movs	r1, #35	; 0x23
 8001234:	203c      	movs	r0, #60	; 0x3c
 8001236:	f002 fa26 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800123a:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 800123c:	2200      	movs	r2, #0
 800123e:	9202      	str	r2, [sp, #8]
 8001240:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001244:	9201      	str	r2, [sp, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	9200      	str	r2, [sp, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a99      	ldr	r2, [pc, #612]	; (80014b4 <GAME_PLAY_Phase_Management+0x2f0>)
 800124e:	2123      	movs	r1, #35	; 0x23
 8001250:	203c      	movs	r0, #60	; 0x3c
 8001252:	f002 fa62 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b95      	ldr	r3, [pc, #596]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 800125c:	9203      	str	r2, [sp, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	9202      	str	r2, [sp, #8]
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a92      	ldr	r2, [pc, #584]	; (80014b8 <GAME_PLAY_Phase_Management+0x2f4>)
 8001270:	215a      	movs	r1, #90	; 0x5a
 8001272:	2005      	movs	r0, #5
 8001274:	f002 fa9b 	bl	80037ae <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b8c      	ldr	r3, [pc, #560]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 800127e:	9203      	str	r2, [sp, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	9202      	str	r2, [sp, #8]
 8001284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a8a      	ldr	r2, [pc, #552]	; (80014bc <GAME_PLAY_Phase_Management+0x2f8>)
 8001292:	215a      	movs	r1, #90	; 0x5a
 8001294:	2005      	movs	r0, #5
 8001296:	f002 fa8a 	bl	80037ae <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800129a:	2101      	movs	r1, #1
 800129c:	4888      	ldr	r0, [pc, #544]	; (80014c0 <GAME_PLAY_Phase_Management+0x2fc>)
 800129e:	f006 f9b5 	bl	800760c <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f041 8035 	bne.w	8002314 <GAME_PLAY_Phase_Management+0x1150>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f002 fc52 	bl	8003b54 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f002 fc60 	bl	8003b76 <ST7735_FillScreen1>
			MainGUI();
 80012b6:	f001 fa37 	bl	8002728 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2202      	movs	r2, #2
 80012be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 80012d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012d4:	f003 f84c 	bl	8004370 <HAL_Delay>
		}
		break;
 80012d8:	f001 b81c 	b.w	8002314 <GAME_PLAY_Phase_Management+0x1150>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f001 fac2 	bl	8002868 <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80012e4:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	9202      	str	r2, [sp, #8]
 80012ea:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a73      	ldr	r2, [pc, #460]	; (80014c4 <GAME_PLAY_Phase_Management+0x300>)
 80012f8:	2123      	movs	r1, #35	; 0x23
 80012fa:	203c      	movs	r0, #60	; 0x3c
 80012fc:	f002 f9c3 	bl	8003686 <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 8001302:	2200      	movs	r2, #0
 8001304:	9202      	str	r2, [sp, #8]
 8001306:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <GAME_PLAY_Phase_Management+0x300>)
 8001314:	2123      	movs	r1, #35	; 0x23
 8001316:	203c      	movs	r0, #60	; 0x3c
 8001318:	f002 f9ff 	bl	800371a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 8001322:	9203      	str	r2, [sp, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	9202      	str	r2, [sp, #8]
 8001328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <GAME_PLAY_Phase_Management+0x2f4>)
 8001336:	215a      	movs	r1, #90	; 0x5a
 8001338:	2005      	movs	r0, #5
 800133a:	f002 fa38 	bl	80037ae <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 8001344:	9203      	str	r2, [sp, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a5c      	ldr	r2, [pc, #368]	; (80014c8 <GAME_PLAY_Phase_Management+0x304>)
 8001358:	215a      	movs	r1, #90	; 0x5a
 800135a:	2005      	movs	r0, #5
 800135c:	f002 fa27 	bl	80037ae <ST7735_WriteStringNSS>

		switch (PMS)
 8001360:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001364:	2b07      	cmp	r3, #7
 8001366:	f200 87d7 	bhi.w	8002318 <GAME_PLAY_Phase_Management+0x1154>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <GAME_PLAY_Phase_Management+0x1ac>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001bf3 	.word	0x08001bf3
 8001374:	08001391 	.word	0x08001391
 8001378:	08001423 	.word	0x08001423
 800137c:	080014d1 	.word	0x080014d1
 8001380:	08001687 	.word	0x08001687
 8001384:	080018e9 	.word	0x080018e9
 8001388:	0800183b 	.word	0x0800183b
 800138c:	08001789 	.word	0x08001789
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d12b      	bne.n	80013f0 <GAME_PLAY_Phase_Management+0x22c>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001398:	2101      	movs	r1, #1
 800139a:	4849      	ldr	r0, [pc, #292]	; (80014c0 <GAME_PLAY_Phase_Management+0x2fc>)
 800139c:	f006 f936 	bl	800760c <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11d      	bne.n	80013e2 <GAME_PLAY_Phase_Management+0x21e>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f002 fbd4 	bl	8003b54 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f002 fbe2 	bl	8003b76 <ST7735_FillScreen1>
					MainGUI();
 80013b2:	f001 f9b9 	bl	8002728 <MainGUI>
					state_game->action = 50;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2232      	movs	r2, #50	; 0x32
 80013ba:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f001 f98e 	bl	80026e6 <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 80013da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013de:	f002 ffc7 	bl	8004370 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff f9b4 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 80013ec:	f000 bc03 	b.w	8001bf6 <GAME_PLAY_Phase_Management+0xa32>
			else if (state_game->action == 1)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 83fe 	bne.w	8001bf6 <GAME_PLAY_Phase_Management+0xa32>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2326      	movs	r3, #38	; 0x26
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	215a      	movs	r1, #90	; 0x5a
 800140a:	2000      	movs	r0, #0
 800140c:	f002 fb18 	bl	8003a40 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001420:	e3e9      	b.n	8001bf6 <GAME_PLAY_Phase_Management+0xa32>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <GAME_PLAY_Phase_Management+0x2ec>)
 8001428:	9203      	str	r2, [sp, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	9202      	str	r2, [sp, #8]
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	9200      	str	r2, [sp, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a24      	ldr	r2, [pc, #144]	; (80014cc <GAME_PLAY_Phase_Management+0x308>)
 800143c:	215a      	movs	r1, #90	; 0x5a
 800143e:	2005      	movs	r0, #5
 8001440:	f002 f9b5 	bl	80037ae <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001452:	637b      	str	r3, [r7, #52]	; 0x34

			if (state_game->action == 1)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d116      	bne.n	800148a <GAME_PLAY_Phase_Management+0x2c6>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <GAME_PLAY_Phase_Management+0x2ae>
					ptrYugiohCard_src->cardState = 0;
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001470:	e3c3      	b.n	8001bfa <GAME_PLAY_Phase_Management+0xa36>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 83bf 	bne.w	8001bfa <GAME_PLAY_Phase_Management+0xa36>
					ptrYugiohCard_src->cardState = 1;
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	2201      	movs	r2, #1
 8001480:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2202      	movs	r2, #2
 8001486:	701a      	strb	r2, [r3, #0]
			break;
 8001488:	e3b7      	b.n	8001bfa <GAME_PLAY_Phase_Management+0xa36>
			else if (state_game->action == 2)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	f040 83b3 	bne.w	8001bfa <GAME_PLAY_Phase_Management+0xa36>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001498:	f7ff f8f4 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2203      	movs	r2, #3
 80014a6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80014aa:	e3a6      	b.n	8001bfa <GAME_PLAY_Phase_Management+0xa36>
 80014ac:	240002e4 	.word	0x240002e4
 80014b0:	2400000c 	.word	0x2400000c
 80014b4:	0800d978 	.word	0x0800d978
 80014b8:	0800d984 	.word	0x0800d984
 80014bc:	0800d994 	.word	0x0800d994
 80014c0:	58020800 	.word	0x58020800
 80014c4:	0800d9a0 	.word	0x0800d9a0
 80014c8:	0800d9ac 	.word	0x0800d9ac
 80014cc:	0800d9bc 	.word	0x0800d9bc
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 3)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	f040 838e 	bne.w	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d12a      	bne.n	8001540 <GAME_PLAY_Phase_Management+0x37c>
				{

					ptrYugiohCard_src->cardState = 0;
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	2200      	movs	r2, #0
 80014ee:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	799a      	ldrb	r2, [r3, #6]
 80014f4:	4baf      	ldr	r3, [pc, #700]	; (80017b4 <GAME_PLAY_Phase_Management+0x5f0>)
 80014f6:	fba3 1302 	umull	r1, r3, r3, r2
 80014fa:	0899      	lsrs	r1, r3, #2
 80014fc:	460b      	mov	r3, r1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	757b      	strb	r3, [r7, #21]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	3308      	adds	r3, #8
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001518:	f7ff f8b4 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fa09 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f8aa 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 800153e:	e35e      	b.n	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
				else if (ptrYugiohCard_src->cardType == 2)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	785b      	ldrb	r3, [r3, #1]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d15a      	bne.n	80015fe <GAME_PLAY_Phase_Management+0x43a>
					state_game->count_chain = 1;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2201      	movs	r2, #1
 800154c:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12b      	bne.n	80015ae <GAME_PLAY_Phase_Management+0x3ea>
						state_game->action = 4;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2204      	movs	r2, #4
 800155a:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800155c:	68b8      	ldr	r0, [r7, #8]
 800155e:	f7ff fa94 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001568:	4619      	mov	r1, r3
 800156a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800156c:	f7ff f88a 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001586:	3301      	adds	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff f9cf 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800159c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f870 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2207      	movs	r2, #7
 80015a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80015ac:	e327      	b.n	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	799a      	ldrb	r2, [r3, #6]
 80015b2:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <GAME_PLAY_Phase_Management+0x5f0>)
 80015b4:	fba3 1302 	umull	r1, r3, r3, r2
 80015b8:	0899      	lsrs	r1, r3, #2
 80015ba:	460b      	mov	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	75bb      	strb	r3, [r7, #22]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80015c6:	7dbb      	ldrb	r3, [r7, #22]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	3308      	adds	r3, #8
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d6:	f7ff f855 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff f9aa 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff f84b 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80015fc:	e2ff      	b.n	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
				else if (ptrYugiohCard_src->cardType == 1)
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	785b      	ldrb	r3, [r3, #1]
 8001602:	2b01      	cmp	r3, #1
 8001604:	f040 82fb 	bne.w	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
					state_game->test = 2;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d82b      	bhi.n	8001670 <GAME_PLAY_Phase_Management+0x4ac>
						state_game->test = 1;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	799a      	ldrb	r2, [r3, #6]
 8001624:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <GAME_PLAY_Phase_Management+0x5f0>)
 8001626:	fba3 1302 	umull	r1, r3, r3, r2
 800162a:	0899      	lsrs	r1, r3, #2
 800162c:	460b      	mov	r3, r1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	75fb      	strb	r3, [r7, #23]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	3308      	adds	r3, #8
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001648:	f7ff f81c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff f971 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f812 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800166e:	e2c6      	b.n	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff f95f 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2204      	movs	r2, #4
 800167a:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2204      	movs	r2, #4
 8001680:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001684:	e2bb      	b.n	8001bfe <GAME_PLAY_Phase_Management+0xa3a>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 4)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b04      	cmp	r3, #4
 8001694:	d105      	bne.n	80016a2 <GAME_PLAY_Phase_Management+0x4de>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff f85a 	bl	8000754 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 80016a0:	e2af      	b.n	8001c02 <GAME_PLAY_Phase_Management+0xa3e>
			else if (state_game->action == 5)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d105      	bne.n	80016b6 <GAME_PLAY_Phase_Management+0x4f2>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff f850 	bl	8000754 <Player_Reading_Card>
			break;
 80016b4:	e2a5      	b.n	8001c02 <GAME_PLAY_Phase_Management+0xa3e>
			else if (state_game->action == 6)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	f040 82a1 	bne.w	8001c02 <GAME_PLAY_Phase_Management+0xa3e>
				uint8_t monsterflag = 0 ;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	78db      	ldrb	r3, [r3, #3]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d804      	bhi.n	80016e0 <GAME_PLAY_Phase_Management+0x51c>
					monsterflag += 1;
 80016d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst++;
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	3310      	adds	r3, #16
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80016e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d804      	bhi.n	80016f8 <GAME_PLAY_Phase_Management+0x534>
					monsterflag += 1;
 80016ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016f2:	3301      	adds	r3, #1
 80016f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (monsterflag == 2)
 80016f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d135      	bne.n	800176c <GAME_PLAY_Phase_Management+0x5a8>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	799a      	ldrb	r2, [r3, #6]
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <GAME_PLAY_Phase_Management+0x5f0>)
 8001706:	fba3 1302 	umull	r1, r3, r3, r2
 800170a:	0899      	lsrs	r1, r3, #2
 800170c:	460b      	mov	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	440b      	add	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	763b      	strb	r3, [r7, #24]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001718:	7e3b      	ldrb	r3, [r7, #24]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	3308      	adds	r3, #8
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001728:	f7fe ffac 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff f9f4 	bl	8000b22 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff f9ed 	bl	8000b22 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff f8f3 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff94 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800176a:	e24a      	b.n	8001c02 <GAME_PLAY_Phase_Management+0xa3e>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff f8e1 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7fe ff7f 	bl	8000684 <YUGIOH_card_copy>
			break;
 8001786:	e23c      	b.n	8001c02 <GAME_PLAY_Phase_Management+0xa3e>
		case chaining_main_DEF:

			// Current state_game->action = 4

			if(state_game->action == 4)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d113      	bne.n	80017b8 <GAME_PLAY_Phase_Management+0x5f4>
			{
				if (playerDef->noBTN == GPIO_PIN_RESET){
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <GAME_PLAY_Phase_Management+0x5e2>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2205      	movs	r2, #5
 800179c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2200      	movs	r2, #0
 80017a4:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7fe ffd2 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 80017b0:	e229      	b.n	8001c06 <GAME_PLAY_Phase_Management+0xa42>
 80017b2:	bf00      	nop
 80017b4:	aaaaaaab 	.word	0xaaaaaaab
			else if ((state_game->action == 5 )){
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	f040 8222 	bne.w	8001c06 <GAME_PLAY_Phase_Management+0xa42>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80017ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f000 ff3d 	bl	800264c <YUGIOH_Check_Trap_On_board>
 80017d2:	4603      	mov	r3, r0
 80017d4:	76bb      	strb	r3, [r7, #26]
				if (idx != 255)
 80017d6:	7ebb      	ldrb	r3, [r7, #26]
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d02a      	beq.n	8001832 <GAME_PLAY_Phase_Management+0x66e>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 80017dc:	68b8      	ldr	r0, [r7, #8]
 80017de:	f7ff f954 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80017e2:	7ebb      	ldrb	r3, [r7, #26]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	3308      	adds	r3, #8
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80017ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f0:	2200      	movs	r2, #0
 80017f2:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80017fa:	4619      	mov	r1, r3
 80017fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017fe:	f7fe ff41 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2206      	movs	r2, #6
 8001826:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2204      	movs	r2, #4
 800182e:	701a      	strb	r2, [r3, #0]
			break;
 8001830:	e1e9      	b.n	8001c06 <GAME_PLAY_Phase_Management+0xa42>
					state_game->action = 4;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2204      	movs	r2, #4
 8001836:	701a      	strb	r2, [r3, #0]
			break;
 8001838:	e1e5      	b.n	8001c06 <GAME_PLAY_Phase_Management+0xa42>
		case chaining_main_ATK:
			if(state_game->action == 4)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b04      	cmp	r3, #4
 8001840:	d111      	bne.n	8001866 <GAME_PLAY_Phase_Management+0x6a2>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7fe ff84 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 81da 	bne.w	8001c0a <GAME_PLAY_Phase_Management+0xa46>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2200      	movs	r2, #0
 8001862:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8001864:	e1d1      	b.n	8001c0a <GAME_PLAY_Phase_Management+0xa46>
			else if ((state_game->action == 5 )){
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b05      	cmp	r3, #5
 800186c:	f040 81cd 	bne.w	8001c0a <GAME_PLAY_Phase_Management+0xa46>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8001878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fee6 	bl	800264c <YUGIOH_Check_Trap_On_board>
 8001880:	4603      	mov	r3, r0
 8001882:	767b      	strb	r3, [r7, #25]
				if (idx != 255)
 8001884:	7e7b      	ldrb	r3, [r7, #25]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d02a      	beq.n	80018e0 <GAME_PLAY_Phase_Management+0x71c>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f7ff f8fd 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001890:	7e7b      	ldrb	r3, [r7, #25]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	3308      	adds	r3, #8
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	2200      	movs	r2, #0
 80018a0:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80018a8:	4619      	mov	r1, r3
 80018aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018ac:	f7fe feea 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2206      	movs	r2, #6
 80018d4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2204      	movs	r2, #4
 80018dc:	701a      	strb	r2, [r3, #0]
			break;
 80018de:	e194      	b.n	8001c0a <GAME_PLAY_Phase_Management+0xa46>
					state_game->action = 4;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2204      	movs	r2, #4
 80018e4:	701a      	strb	r2, [r3, #0]
			break;
 80018e6:	e190      	b.n	8001c0a <GAME_PLAY_Phase_Management+0xa46>
		case activate_effect:
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	623b      	str	r3, [r7, #32]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	3304      	adds	r3, #4
 800190a:	61fb      	str	r3, [r7, #28]

			if(state_game->action == 4)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b04      	cmp	r3, #4
 8001912:	f040 80a8 	bne.w	8001a66 <GAME_PLAY_Phase_Management+0x8a2>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	785a      	ldrb	r2, [r3, #1]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001920:	429a      	cmp	r2, r3
 8001922:	f080 8098 	bcs.w	8001a56 <GAME_PLAY_Phase_Management+0x892>
				{
					state_game->test = 165;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	22a5      	movs	r2, #165	; 0xa5
 800192a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	3344      	adds	r3, #68	; 0x44
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	3304      	adds	r3, #4
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28

					if (ptrYugiohCard_src->cardSignature == 11)
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b0b      	cmp	r3, #11
 8001944:	d111      	bne.n	800196a <GAME_PLAY_Phase_Management+0x7a6>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fd04 	bl	8002358 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8e3 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	705a      	strb	r2, [r3, #1]
					state_game->action = 4;
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
					state_game->count_chain++;
				}
			}
			break;
 8001968:	e151      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if (ptrYugiohCard_src->cardSignature == 12)
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d114      	bne.n	800199c <GAME_PLAY_Phase_Management+0x7d8>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f000 fd0b 	bl	8002398 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f8ca 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	705a      	strb	r2, [r3, #1]
			break;
 800199a:	e138      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if (ptrYugiohCard_src->cardSignature == 13)
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b0d      	cmp	r3, #13
 80019a2:	d107      	bne.n	80019b4 <GAME_PLAY_Phase_Management+0x7f0>
						state_game->test = 166;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	22a6      	movs	r2, #166	; 0xa6
 80019a8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2205      	movs	r2, #5
 80019b0:	701a      	strb	r2, [r3, #0]
			break;
 80019b2:	e12c      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0e      	cmp	r3, #14
 80019ba:	d003      	beq.n	80019c4 <GAME_PLAY_Phase_Management+0x800>
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d118      	bne.n	80019f6 <GAME_PLAY_Phase_Management+0x832>
						state_game->test = 133;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2285      	movs	r2, #133	; 0x85
 80019c8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f000 fdb2 	bl	8002540 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f89d 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	705a      	strb	r2, [r3, #1]
			break;
 80019f4:	e10b      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d107      	bne.n	8001a0e <GAME_PLAY_Phase_Management+0x84a>
						state_game->test = 124;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	227c      	movs	r2, #124	; 0x7c
 8001a02:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]
			break;
 8001a0c:	e0ff      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b11      	cmp	r3, #17
 8001a14:	d103      	bne.n	8001a1e <GAME_PLAY_Phase_Management+0x85a>
						state_game->action = 5;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	701a      	strb	r2, [r3, #0]
			break;
 8001a1c:	e0f7      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b12      	cmp	r3, #18
 8001a24:	d004      	beq.n	8001a30 <GAME_PLAY_Phase_Management+0x86c>
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b13      	cmp	r3, #19
 8001a2c:	f040 80ef 	bne.w	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 80e9 	bne.w	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f86d 	bl	8000b22 <YUGIOH_To_GY>
							state_game->count_chain++;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	705a      	strb	r2, [r3, #1]
			break;
 8001a54:	e0db      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					state_game->action = 0;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001a64:	e0d3      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
			else if (state_game->action == 5)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d10b      	bne.n	8001a86 <GAME_PLAY_Phase_Management+0x8c2>
				state_game->test = 167;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	22a7      	movs	r2, #167	; 0xa7
 8001a72:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7fe fe68 	bl	8000754 <Player_Reading_Card>
			break;
 8001a84:	e0c3      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
			else if (state_game->action == 6)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	f040 80bf 	bne.w	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
				state_game->test = 169;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	22a9      	movs	r2, #169	; 0xa9
 8001a94:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	785b      	ldrb	r3, [r3, #1]
 8001a9c:	3344      	adds	r3, #68	; 0x44
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_src->cardSignature == 13)
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0d      	cmp	r3, #13
 8001aae:	d16b      	bne.n	8001b88 <GAME_PLAY_Phase_Management+0x9c4>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	789b      	ldrb	r3, [r3, #2]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d130      	bne.n	8001b1c <GAME_PLAY_Phase_Management+0x958>
						state_game->test = 170;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	22aa      	movs	r2, #170	; 0xaa
 8001abe:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ada:	4619      	mov	r1, r3
 8001adc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ade:	f7fe fdd1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fc94 	bl	8002414 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 fc16 	bl	8002328 <Test_EFF>
						state_game->action = 4;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2204      	movs	r2, #4
 8001b00:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f80a 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	705a      	strb	r2, [r3, #1]
			break;
 8001b1a:	e078      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d173      	bne.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
						state_game->test = 171;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	22ab      	movs	r2, #171	; 0xab
 8001b2a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b46:	4619      	mov	r1, r3
 8001b48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b4a:	f7fe fd9b 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc5e 	bl	8002414 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 fbe0 	bl	8002328 <Test_EFF>
						state_game->action = 4;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe ffd4 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	705a      	strb	r2, [r3, #1]
			break;
 8001b86:	e042      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d114      	bne.n	8001bba <GAME_PLAY_Phase_Management+0x9f6>
					YUGIOH_Ancient_Rules(*ptrUser);
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fca7 	bl	80024e8 <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe ffbb 	bl	8000b22 <YUGIOH_To_GY>
					state_game->count_chain++;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	705a      	strb	r2, [r3, #1]
			break;
 8001bb8:	e029      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b11      	cmp	r3, #17
 8001bc0:	d125      	bne.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f000 fd07 	bl	80025e0 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe ff9f 	bl	8000b22 <YUGIOH_To_GY>
					state_game->count_chain++;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	705a      	strb	r2, [r3, #1]
			break;
 8001bf0:	e00d      	b.n	8001c0e <GAME_PLAY_Phase_Management+0xa4a>
			break;
 8001bf2:	bf00      	nop
 8001bf4:	e390      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001bf6:	bf00      	nop
 8001bf8:	e38e      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001bfa:	bf00      	nop
 8001bfc:	e38c      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001bfe:	bf00      	nop
 8001c00:	e38a      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001c02:	bf00      	nop
 8001c04:	e388      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001c06:	bf00      	nop
 8001c08:	e386      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001c0a:	bf00      	nop
 8001c0c:	e384      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
			break;
 8001c0e:	bf00      	nop
		}
		break;
 8001c10:	e382      	b.n	8002318 <GAME_PLAY_Phase_Management+0x1154>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fe27 	bl	8002868 <LCDvalue>
			ST7735_WriteString(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001c1a:	4bac      	ldr	r3, [pc, #688]	; (8001ecc <GAME_PLAY_Phase_Management+0xd08>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	9202      	str	r2, [sp, #8]
 8001c20:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001c24:	9201      	str	r2, [sp, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	9200      	str	r2, [sp, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4aa8      	ldr	r2, [pc, #672]	; (8001ed0 <GAME_PLAY_Phase_Management+0xd0c>)
 8001c2e:	2123      	movs	r1, #35	; 0x23
 8001c30:	203c      	movs	r0, #60	; 0x3c
 8001c32:	f001 fd28 	bl	8003686 <ST7735_WriteString>
			ST7735_WriteString1(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001c36:	4ba5      	ldr	r3, [pc, #660]	; (8001ecc <GAME_PLAY_Phase_Management+0xd08>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001c40:	9201      	str	r2, [sp, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4aa1      	ldr	r2, [pc, #644]	; (8001ed0 <GAME_PLAY_Phase_Management+0xd0c>)
 8001c4a:	2123      	movs	r1, #35	; 0x23
 8001c4c:	203c      	movs	r0, #60	; 0x3c
 8001c4e:	f001 fd64 	bl	800371a <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	4b9d      	ldr	r3, [pc, #628]	; (8001ecc <GAME_PLAY_Phase_Management+0xd08>)
 8001c58:	9203      	str	r2, [sp, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	9200      	str	r2, [sp, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a9a      	ldr	r2, [pc, #616]	; (8001ed4 <GAME_PLAY_Phase_Management+0xd10>)
 8001c6c:	215a      	movs	r1, #90	; 0x5a
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f001 fd9d 	bl	80037ae <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b94      	ldr	r3, [pc, #592]	; (8001ecc <GAME_PLAY_Phase_Management+0xd08>)
 8001c7a:	9203      	str	r2, [sp, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	9202      	str	r2, [sp, #8]
 8001c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c84:	9201      	str	r2, [sp, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	9200      	str	r2, [sp, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a92      	ldr	r2, [pc, #584]	; (8001ed8 <GAME_PLAY_Phase_Management+0xd14>)
 8001c8e:	215a      	movs	r1, #90	; 0x5a
 8001c90:	2005      	movs	r0, #5
 8001c92:	f001 fd8c 	bl	80037ae <ST7735_WriteStringNSS>

			switch(PBS){
 8001c96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	f200 833e 	bhi.w	800231c <GAME_PLAY_Phase_Management+0x1158>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <GAME_PLAY_Phase_Management+0xae4>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	080022f9 	.word	0x080022f9
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001fa1 	.word	0x08001fa1
 8001cb4:	08001f21 	.word	0x08001f21
 8001cb8:	08002023 	.word	0x08002023
 8001cbc:	08002105 	.word	0x08002105
 8001cc0:	080022bd 	.word	0x080022bd
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b32      	cmp	r3, #50	; 0x32
 8001cca:	d165      	bne.n	8001d98 <GAME_PLAY_Phase_Management+0xbd4>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7fe fd3f 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4880      	ldr	r0, [pc, #512]	; (8001edc <GAME_PLAY_Phase_Management+0xd18>)
 8001cda:	f005 fc97 	bl	800760c <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 830b 	bne.w	80022fc <GAME_PLAY_Phase_Management+0x1138>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001ce6:	487e      	ldr	r0, [pc, #504]	; (8001ee0 <GAME_PLAY_Phase_Management+0xd1c>)
 8001ce8:	f008 fe8e 	bl	800aa08 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8001cec:	497d      	ldr	r1, [pc, #500]	; (8001ee4 <GAME_PLAY_Phase_Management+0xd20>)
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2326      	movs	r3, #38	; 0x26
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	215a      	movs	r1, #90	; 0x5a
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f001 fe98 	bl	8003a40 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <GAME_PLAY_Phase_Management+0xd24>)
 8001d16:	9203      	str	r2, [sp, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	9202      	str	r2, [sp, #8]
 8001d1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	9200      	str	r2, [sp, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a70      	ldr	r2, [pc, #448]	; (8001eec <GAME_PLAY_Phase_Management+0xd28>)
 8001d2a:	215a      	movs	r1, #90	; 0x5a
 8001d2c:	200f      	movs	r0, #15
 8001d2e:	f001 fd3e 	bl	80037ae <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8001d32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d36:	f002 fb1b 	bl	8004370 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2326      	movs	r3, #38	; 0x26
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	215a      	movs	r1, #90	; 0x5a
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f001 fe78 	bl	8003a40 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2326      	movs	r3, #38	; 0x26
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	215a      	movs	r1, #90	; 0x5a
 8001d60:	2000      	movs	r0, #0
 8001d62:	f001 fe6d 	bl	8003a40 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fc99 	bl	80026a4 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d104      	bne.n	8001d86 <GAME_PLAY_Phase_Management+0xbc2>
							state_game->MainGame_State = second_player;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2203      	movs	r2, #3
 8001d80:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8001d84:	e003      	b.n	8001d8e <GAME_PLAY_Phase_Management+0xbca>
						}
						else{
							state_game->MainGame_State = first_player;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8001d96:	e2b1      	b.n	80022fc <GAME_PLAY_Phase_Management+0x1138>
				else if(state_game->action == 51){
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b33      	cmp	r3, #51	; 0x33
 8001d9e:	f040 82ad 	bne.w	80022fc <GAME_PLAY_Phase_Management+0x1138>
					uint8_t check_def_mon = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	799b      	ldrb	r3, [r3, #6]
 8001db4:	76fb      	strb	r3, [r7, #27]
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3338      	adds	r3, #56	; 0x38
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001dc2:	e010      	b.n	8001de6 <GAME_PLAY_Phase_Management+0xc22>
						if(ptrYugiohCard_dst->cardData == 0){
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <GAME_PLAY_Phase_Management+0xc12>
							check_def_mon++;
 8001dcc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						ptrYugiohCard_dst++;
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	3310      	adds	r3, #16
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8001ddc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001de0:	3301      	adds	r3, #1
 8001de2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001de6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d9ea      	bls.n	8001dc4 <GAME_PLAY_Phase_Management+0xc00>
					uint8_t flag_can_atk = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3338      	adds	r3, #56	; 0x38
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e08:	e018      	b.n	8001e3c <GAME_PLAY_Phase_Management+0xc78>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d10a      	bne.n	8001e2c <GAME_PLAY_Phase_Management+0xc68>
							if(ptrYugiohCard_dst->cardState == 1){
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	789b      	ldrb	r3, [r3, #2]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d103      	bne.n	8001e26 <GAME_PLAY_Phase_Management+0xc62>
								flag_can_atk = 2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								break;
 8001e24:	e00e      	b.n	8001e44 <GAME_PLAY_Phase_Management+0xc80>
								flag_can_atk = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						ptrYugiohCard_dst++;
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3310      	adds	r3, #16
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8001e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e36:	3301      	adds	r3, #1
 8001e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d9e2      	bls.n	8001e0a <GAME_PLAY_Phase_Management+0xc46>
					if (check_def_mon < 3)
 8001e44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d80b      	bhi.n	8001e64 <GAME_PLAY_Phase_Management+0xca0>
						 if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8001e4c:	7efb      	ldrb	r3, [r7, #27]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <GAME_PLAY_Phase_Management+0xca0>
							 flag_can_atk = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					if (flag_can_atk == 2) {
 8001e64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d14d      	bne.n	8001f08 <GAME_PLAY_Phase_Management+0xd44>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6e:	7a1b      	ldrb	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d03d      	beq.n	8001ef0 <GAME_PLAY_Phase_Management+0xd2c>
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d139      	bne.n	8001ef0 <GAME_PLAY_Phase_Management+0xd2c>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	7a1b      	ldrb	r3, [r3, #8]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e92:	f7fe fbf7 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
							if(check_def_mon == 3){
 8001e9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d103      	bne.n	8001eae <GAME_PLAY_Phase_Management+0xcea>
								ptrYugiohCard_dst->targetPosition = 99;
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea8:	2263      	movs	r2, #99	; 0x63
 8001eaa:	71da      	strb	r2, [r3, #7]
 8001eac:	e002      	b.n	8001eb4 <GAME_PLAY_Phase_Management+0xcf0>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	7efa      	ldrb	r2, [r7, #27]
 8001eb2:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f7fe fd3d 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2234      	movs	r2, #52	; 0x34
 8001ebe:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001ec8:	e218      	b.n	80022fc <GAME_PLAY_Phase_Management+0x1138>
 8001eca:	bf00      	nop
 8001ecc:	2400000c 	.word	0x2400000c
 8001ed0:	0800d9cc 	.word	0x0800d9cc
 8001ed4:	0800d9d8 	.word	0x0800d9d8
 8001ed8:	0800d9e8 	.word	0x0800d9e8
 8001edc:	58020800 	.word	0x58020800
 8001ee0:	240002e4 	.word	0x240002e4
 8001ee4:	24000e98 	.word	0x24000e98
 8001ee8:	24000014 	.word	0x24000014
 8001eec:	0800d9f8 	.word	0x0800d9f8
							state_game->test = 222;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	22de      	movs	r2, #222	; 0xde
 8001ef4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001f06:	e1f9      	b.n	80022fc <GAME_PLAY_Phase_Management+0x1138>
						state_game->test = 223;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	22df      	movs	r2, #223	; 0xdf
 8001f0c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2232      	movs	r2, #50	; 0x32
 8001f14:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001f1e:	e1ed      	b.n	80022fc <GAME_PLAY_Phase_Management+0x1138>
			case counter_DEF:
				//action 52
				if(state_game->action == 52)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b34      	cmp	r3, #52	; 0x34
 8001f26:	d110      	bne.n	8001f4a <GAME_PLAY_Phase_Management+0xd86>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <GAME_PLAY_Phase_Management+0xd7a>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7fe fc06 	bl	8000754 <Player_Reading_Card>

					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}

				break;
 8001f48:	e1da      	b.n	8002300 <GAME_PLAY_Phase_Management+0x113c>
				else if ((state_game->action == 53 )){
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b35      	cmp	r3, #53	; 0x35
 8001f50:	f040 81d6 	bne.w	8002300 <GAME_PLAY_Phase_Management+0x113c>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001f5c:	68b8      	ldr	r0, [r7, #8]
 8001f5e:	f7fe fd94 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f6c:	f7fe fb8a 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2236      	movs	r2, #54	; 0x36
 8001f9c:	701a      	strb	r2, [r3, #0]
				break;
 8001f9e:	e1af      	b.n	8002300 <GAME_PLAY_Phase_Management+0x113c>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b36      	cmp	r3, #54	; 0x36
 8001fa6:	d111      	bne.n	8001fcc <GAME_PLAY_Phase_Management+0xe08>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7fe fbd1 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 81a4 	bne.w	8002304 <GAME_PLAY_Phase_Management+0x1140>
						//affect
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	705a      	strb	r2, [r3, #1]

					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 54;
				}

				break;
 8001fca:	e19b      	b.n	8002304 <GAME_PLAY_Phase_Management+0x1140>
				else if ((state_game->action == 55 )){
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b37      	cmp	r3, #55	; 0x37
 8001fd2:	f040 8197 	bne.w	8002304 <GAME_PLAY_Phase_Management+0x1140>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	f7fe fd53 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001fea:	4619      	mov	r1, r3
 8001fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fee:	f7fe fb49 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2203      	movs	r2, #3
 8002016:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2236      	movs	r2, #54	; 0x36
 800201e:	701a      	strb	r2, [r3, #0]
				break;
 8002020:	e170      	b.n	8002304 <GAME_PLAY_Phase_Management+0x1140>
			case chain_effect:
				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	623b      	str	r3, [r7, #32]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	61fb      	str	r3, [r7, #28]

				if(state_game->action == 54)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b36      	cmp	r3, #54	; 0x36
 800204c:	f040 815c 	bne.w	8002308 <GAME_PLAY_Phase_Management+0x1144>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	785a      	ldrb	r2, [r3, #1]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800205a:	429a      	cmp	r2, r3
 800205c:	d24a      	bcs.n	80020f4 <GAME_PLAY_Phase_Management+0xf30>
					{
						state_game->test = 165;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	22a5      	movs	r2, #165	; 0xa5
 8002062:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	3344      	adds	r3, #68	; 0x44
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28

						if (ptrYugiohCard_src->cardSignature == 11)
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b0b      	cmp	r3, #11
 800207c:	d10b      	bne.n	8002096 <GAME_PLAY_Phase_Management+0xed2>
						{
							YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f968 	bl	8002358 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
							state_game->count_chain++;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8002094:	e138      	b.n	8002308 <GAME_PLAY_Phase_Management+0x1144>
						else if (ptrYugiohCard_src->cardSignature == 12)
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d10e      	bne.n	80020bc <GAME_PLAY_Phase_Management+0xef8>
							YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f000 f975 	bl	8002398 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
							state_game->count_chain++;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	705a      	strb	r2, [r3, #1]
				break;
 80020ba:	e125      	b.n	8002308 <GAME_PLAY_Phase_Management+0x1144>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b0e      	cmp	r3, #14
 80020c2:	d004      	beq.n	80020ce <GAME_PLAY_Phase_Management+0xf0a>
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	f040 811d 	bne.w	8002308 <GAME_PLAY_Phase_Management+0x1144>
							state_game->test = 133;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2285      	movs	r2, #133	; 0x85
 80020d2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f000 fa2d 	bl	8002540 <YUGIOH_Gift_of_the_Mystical_Elf>
							state_game->count_chain++;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	705a      	strb	r2, [r3, #1]
				break;
 80020f2:	e109      	b.n	8002308 <GAME_PLAY_Phase_Management+0x1144>
						state_game->action = 50;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2232      	movs	r2, #50	; 0x32
 80020f8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002102:	e101      	b.n	8002308 <GAME_PLAY_Phase_Management+0x1144>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(ptrYugiohCard_src->targetPosition == 99)
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	79db      	ldrb	r3, [r3, #7]
 8002118:	2b63      	cmp	r3, #99	; 0x63
 800211a:	d116      	bne.n	800214a <GAME_PLAY_Phase_Management+0xf86>
				{
					playerDef->life_point -= atk*100;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	889a      	ldrh	r2, [r3, #4]
 8002120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002124:	b29b      	uxth	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	0249      	lsls	r1, r1, #9
 800212a:	1ac9      	subs	r1, r1, r3
 800212c:	0089      	lsls	r1, r1, #2
 800212e:	4419      	add	r1, r3
 8002130:	00c9      	lsls	r1, r1, #3
 8002132:	1acb      	subs	r3, r1, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	b29b      	uxth	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2206      	movs	r2, #6
 8002144:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8002148:	e0e0      	b.n	800230c <GAME_PLAY_Phase_Management+0x1148>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3308      	adds	r3, #8
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	79db      	ldrb	r3, [r3, #7]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	3308      	adds	r3, #8
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4413      	add	r3, r2
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
					state_game->test = 54;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2236      	movs	r2, #54	; 0x36
 8002162:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8002166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d140      	bne.n	80021f0 <GAME_PLAY_Phase_Management+0x102c>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 800216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(atk < def){
 8002176:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800217a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800217e:	429a      	cmp	r2, r3
 8002180:	d226      	bcs.n	80021d0 <GAME_PLAY_Phase_Management+0x100c>
							playerAtk->life_point -= (def-atk)*100;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	889a      	ldrh	r2, [r3, #4]
 8002186:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800218a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800218e:	1acb      	subs	r3, r1, r3
 8002190:	b29b      	uxth	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	0249      	lsls	r1, r1, #9
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	0089      	lsls	r1, r1, #2
 800219a:	4419      	add	r1, r3
 800219c:	00c9      	lsls	r1, r1, #3
 800219e:	1acb      	subs	r3, r1, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	799b      	ldrb	r3, [r3, #6]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	3308      	adds	r3, #8
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fcb1 	bl	8000b22 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fbb7 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2206      	movs	r2, #6
 80021ca:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80021ce:	e09d      	b.n	800230c <GAME_PLAY_Phase_Management+0x1148>
						else if(atk > def){
 80021d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80021d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80021d8:	429a      	cmp	r2, r3
 80021da:	f240 8097 	bls.w	800230c <GAME_PLAY_Phase_Management+0x1148>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80021de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f7fe fc9e 	bl	8000b22 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2206      	movs	r2, #6
 80021ea:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80021ee:	e08d      	b.n	800230c <GAME_PLAY_Phase_Management+0x1148>
					else if(ptrYugiohCard_dst->cardState == 1){
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	f040 8089 	bne.w	800230c <GAME_PLAY_Phase_Management+0x1148>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						state_game->test = 60;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	223c      	movs	r2, #60	; 0x3c
 8002206:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 800220a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800220e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002212:	429a      	cmp	r2, r3
 8002214:	d22a      	bcs.n	800226c <GAME_PLAY_Phase_Management+0x10a8>
							state_game->test = 61;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	223d      	movs	r2, #61	; 0x3d
 800221a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	889a      	ldrh	r2, [r3, #4]
 8002222:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800222a:	1acb      	subs	r3, r1, r3
 800222c:	b29b      	uxth	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	0249      	lsls	r1, r1, #9
 8002232:	1ac9      	subs	r1, r1, r3
 8002234:	0089      	lsls	r1, r1, #2
 8002236:	4419      	add	r1, r3
 8002238:	00c9      	lsls	r1, r1, #3
 800223a:	1acb      	subs	r3, r1, r3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	b29b      	uxth	r3, r3
 8002240:	4413      	add	r3, r2
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	799b      	ldrb	r3, [r3, #6]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3308      	adds	r3, #8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fc63 	bl	8000b22 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe fb69 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2206      	movs	r2, #6
 8002266:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800226a:	e04f      	b.n	800230c <GAME_PLAY_Phase_Management+0x1148>
						else if(atk > atk2){
 800226c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002274:	429a      	cmp	r2, r3
 8002276:	d949      	bls.n	800230c <GAME_PLAY_Phase_Management+0x1148>
							state_game->test = 70;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2246      	movs	r2, #70	; 0x46
 800227c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	889a      	ldrh	r2, [r3, #4]
 8002284:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800228c:	1acb      	subs	r3, r1, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	0249      	lsls	r1, r1, #9
 8002294:	1ac9      	subs	r1, r1, r3
 8002296:	0089      	lsls	r1, r1, #2
 8002298:	4419      	add	r1, r3
 800229a:	00c9      	lsls	r1, r1, #3
 800229c:	1acb      	subs	r3, r1, r3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80022aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f7fe fc38 	bl	8000b22 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2206      	movs	r2, #6
 80022b6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80022ba:	e027      	b.n	800230c <GAME_PLAY_Phase_Management+0x1148>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
				YUGIOH_card_clear(ptrYugiohCard_src);
 80022c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c6:	f7fe fa14 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	889b      	ldrh	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <GAME_PLAY_Phase_Management+0x111a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80022da:	4293      	cmp	r3, r2
 80022dc:	d904      	bls.n	80022e8 <GAME_PLAY_Phase_Management+0x1124>
					state_game->MainGame_State = Game_Ended;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2204      	movs	r2, #4
 80022e2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 80022e6:	e012      	b.n	800230e <GAME_PLAY_Phase_Management+0x114a>
					state_game->action = 50;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2232      	movs	r2, #50	; 0x32
 80022ec:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80022f6:	e00a      	b.n	800230e <GAME_PLAY_Phase_Management+0x114a>
				break;
 80022f8:	bf00      	nop
 80022fa:	e00f      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
				break;
 80022fc:	bf00      	nop
 80022fe:	e00d      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
				break;
 8002300:	bf00      	nop
 8002302:	e00b      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
				break;
 8002304:	bf00      	nop
 8002306:	e009      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
				break;
 8002308:	bf00      	nop
 800230a:	e007      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
				break;
 800230c:	bf00      	nop
			}
			break;
 800230e:	e005      	b.n	800231c <GAME_PLAY_Phase_Management+0x1158>
		break;
 8002310:	bf00      	nop
 8002312:	e004      	b.n	800231e <GAME_PLAY_Phase_Management+0x115a>
		break;
 8002314:	bf00      	nop
 8002316:	e002      	b.n	800231e <GAME_PLAY_Phase_Management+0x115a>
		break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <GAME_PLAY_Phase_Management+0x115a>
			break;
 800231c:	bf00      	nop

	}
}
 800231e:	bf00      	nop
 8002320:	3738      	adds	r7, #56	; 0x38
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop

08002328 <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	3b64      	subs	r3, #100	; 0x64
 8002346:	b29a      	uxth	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	809a      	strh	r2, [r3, #4]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3338      	adds	r3, #56	; 0x38
 8002364:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002366:	2300      	movs	r3, #0
 8002368:	72fb      	strb	r3, [r7, #11]
 800236a:	e00d      	b.n	8002388 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fbd3 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3310      	adds	r3, #16
 8002380:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	3301      	adds	r3, #1
 8002386:	72fb      	strb	r3, [r7, #11]
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d9ee      	bls.n	800236c <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	3308      	adds	r3, #8
 80023b2:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	3338      	adds	r3, #56	; 0x38
 80023b8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e00d      	b.n	80023dc <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 80023c8:	6979      	ldr	r1, [r7, #20]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fba9 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3310      	adds	r3, #16
 80023d4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d9ee      	bls.n	80023c0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	73bb      	strb	r3, [r7, #14]
 80023e6:	e00d      	b.n	8002404 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f7fe fb95 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	3310      	adds	r3, #16
 80023fc:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	3301      	adds	r3, #1
 8002402:	73bb      	strb	r3, [r7, #14]
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d9ee      	bls.n	80023e8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800242a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3368      	adds	r3, #104	; 0x68
 8002430:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3368      	adds	r3, #104	; 0x68
 8002436:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8002438:	2300      	movs	r3, #0
 800243a:	74fb      	strb	r3, [r7, #19]
 800243c:	e010      	b.n	8002460 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	429a      	cmp	r2, r3
 8002448:	d104      	bne.n	8002454 <YUGIOH_Reborn+0x40>
			flag = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	77bb      	strb	r3, [r7, #30]
			break;
 8002452:	e008      	b.n	8002466 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3310      	adds	r3, #16
 8002458:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	3301      	adds	r3, #1
 800245e:	74fb      	strb	r3, [r7, #19]
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b13      	cmp	r3, #19
 8002464:	d9eb      	bls.n	800243e <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3338      	adds	r3, #56	; 0x38
 800246a:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 800246c:	7ffb      	ldrb	r3, [r7, #31]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d134      	bne.n	80024dc <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	799a      	ldrb	r2, [r3, #6]
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <YUGIOH_Reborn+0xd0>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	0899      	lsrs	r1, r3, #2
 800247e:	460b      	mov	r3, r1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	440b      	add	r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 800248a:	7afb      	ldrb	r3, [r7, #11]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	3308      	adds	r3, #8
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	4619      	mov	r1, r3
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f7fe f8f4 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 800249c:	7fbb      	ldrb	r3, [r7, #30]
 800249e:	3301      	adds	r3, #1
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	3368      	adds	r3, #104	; 0x68
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80024aa:	7fbb      	ldrb	r3, [r7, #30]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	3368      	adds	r3, #104	; 0x68
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80024b6:	7fbb      	ldrb	r3, [r7, #30]
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e00c      	b.n	80024d6 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80024bc:	6979      	ldr	r1, [r7, #20]
 80024be:	69b8      	ldr	r0, [r7, #24]
 80024c0:	f7fe f8e0 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	3310      	adds	r3, #16
 80024c8:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3310      	adds	r3, #16
 80024ce:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3301      	adds	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b13      	cmp	r3, #19
 80024da:	ddef      	ble.n	80024bc <YUGIOH_Reborn+0xa8>
		}


	}
}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	aaaaaaab 	.word	0xaaaaaaab

080024e8 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024f6:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024fe:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	799a      	ldrb	r2, [r3, #6]
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <YUGIOH_Ancient_Rules+0x54>)
 8002506:	fba3 1302 	umull	r1, r3, r3, r2
 800250a:	0899      	lsrs	r1, r3, #2
 800250c:	460b      	mov	r3, r1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	440b      	add	r3, r1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3308      	adds	r3, #8
 800251c:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	3308      	adds	r3, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7fe f8a9 	bl	8000684 <YUGIOH_card_copy>

}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	aaaaaaab 	.word	0xaaaaaaab

08002540 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3308      	adds	r3, #8
 800254e:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3308      	adds	r3, #8
 800255a:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3338      	adds	r3, #56	; 0x38
 8002560:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002566:	2300      	movs	r3, #0
 8002568:	73bb      	strb	r3, [r7, #14]
 800256a:	e00c      	b.n	8002586 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	785b      	ldrb	r3, [r3, #1]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3301      	adds	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3310      	adds	r3, #16
 800257e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	3301      	adds	r3, #1
 8002584:	73bb      	strb	r3, [r7, #14]
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d9ef      	bls.n	800256c <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800258c:	2300      	movs	r3, #0
 800258e:	737b      	strb	r3, [r7, #13]
 8002590:	e00c      	b.n	80025ac <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	3310      	adds	r3, #16
 80025a4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	3301      	adds	r3, #1
 80025aa:	737b      	strb	r3, [r7, #13]
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d9ef      	bls.n	8002592 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	889a      	ldrh	r2, [r3, #4]
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	0089      	lsls	r1, r1, #2
 80025be:	440b      	add	r3, r1
 80025c0:	4619      	mov	r1, r3
 80025c2:	0109      	lsls	r1, r1, #4
 80025c4:	1acb      	subs	r3, r1, r3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	809a      	strh	r2, [r3, #4]

}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025f0:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025f8:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	799a      	ldrb	r2, [r3, #6]
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <YUGIOH_Stop_Defense+0x68>)
 8002600:	fba3 1302 	umull	r1, r3, r3, r2
 8002604:	0899      	lsrs	r1, r3, #2
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3308      	adds	r3, #8
 8002616:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	3308      	adds	r3, #8
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	789b      	ldrb	r3, [r3, #2]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <YUGIOH_Stop_Defense+0x5a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	709a      	strb	r2, [r3, #2]
	}

}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	aaaaaaab 	.word	0xaaaaaaab

0800264c <YUGIOH_Check_Trap_On_board>:
//
//}


uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	e016      	b.n	8002690 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	429a      	cmp	r2, r3
 800266c:	d10a      	bne.n	8002684 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	7a5b      	ldrb	r3, [r3, #9]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <YUGIOH_Check_Trap_On_board+0x38>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d102      	bne.n	8002684 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e009      	b.n	8002698 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b02      	cmp	r3, #2
 8002694:	dde5      	ble.n	8002662 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8002696:	23ff      	movs	r3, #255	; 0xff
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3308      	adds	r3, #8
 80026b0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	e00c      	b.n	80026d2 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3310      	adds	r3, #16
 80026ca:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	ddef      	ble.n	80026b8 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3338      	adds	r3, #56	; 0x38
 80026f2:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 80026f4:	2303      	movs	r3, #3
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	e00c      	b.n	8002714 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3310      	adds	r3, #16
 800270c:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	ddef      	ble.n	80026fa <YUGIOH_Monster_Activated+0x14>
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <MainGUI>:


void MainGUI(){
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <MainGUI+0x124>)
 8002730:	2200      	movs	r2, #0
 8002732:	9202      	str	r2, [sp, #8]
 8002734:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a43      	ldr	r2, [pc, #268]	; (8002850 <MainGUI+0x128>)
 8002742:	2105      	movs	r1, #5
 8002744:	2005      	movs	r0, #5
 8002746:	f000 ffe8 	bl	800371a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <MainGUI+0x124>)
 800274c:	2200      	movs	r2, #0
 800274e:	9202      	str	r2, [sp, #8]
 8002750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002754:	9201      	str	r2, [sp, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <MainGUI+0x12c>)
 800275e:	2114      	movs	r1, #20
 8002760:	2005      	movs	r0, #5
 8002762:	f000 ffda 	bl	800371a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <MainGUI+0x124>)
 8002768:	2200      	movs	r2, #0
 800276a:	9202      	str	r2, [sp, #8]
 800276c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002770:	9201      	str	r2, [sp, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	9200      	str	r2, [sp, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a37      	ldr	r2, [pc, #220]	; (8002858 <MainGUI+0x130>)
 800277a:	2123      	movs	r1, #35	; 0x23
 800277c:	2005      	movs	r0, #5
 800277e:	f000 ffcc 	bl	800371a <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <MainGUI+0x124>)
 8002784:	2200      	movs	r2, #0
 8002786:	9202      	str	r2, [sp, #8]
 8002788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278c:	9201      	str	r2, [sp, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	; (800285c <MainGUI+0x134>)
 8002796:	2132      	movs	r1, #50	; 0x32
 8002798:	2000      	movs	r0, #0
 800279a:	f000 ffbe 	bl	800371a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <MainGUI+0x124>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	9202      	str	r2, [sp, #8]
 80027a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a8:	9201      	str	r2, [sp, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <MainGUI+0x138>)
 80027b2:	213c      	movs	r1, #60	; 0x3c
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 ffb0 	bl	800371a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <MainGUI+0x124>)
 80027bc:	2200      	movs	r2, #0
 80027be:	9202      	str	r2, [sp, #8]
 80027c0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80027c4:	9201      	str	r2, [sp, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a25      	ldr	r2, [pc, #148]	; (8002864 <MainGUI+0x13c>)
 80027ce:	2105      	movs	r1, #5
 80027d0:	2005      	movs	r0, #5
 80027d2:	f000 ff58 	bl	8003686 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <MainGUI+0x124>)
 80027d8:	2200      	movs	r2, #0
 80027da:	9202      	str	r2, [sp, #8]
 80027dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e0:	9201      	str	r2, [sp, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <MainGUI+0x12c>)
 80027ea:	2114      	movs	r1, #20
 80027ec:	2005      	movs	r0, #5
 80027ee:	f000 ff4a 	bl	8003686 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <MainGUI+0x124>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	9202      	str	r2, [sp, #8]
 80027f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fc:	9201      	str	r2, [sp, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	9200      	str	r2, [sp, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <MainGUI+0x130>)
 8002806:	2123      	movs	r1, #35	; 0x23
 8002808:	2005      	movs	r0, #5
 800280a:	f000 ff3c 	bl	8003686 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MainGUI+0x124>)
 8002810:	2200      	movs	r2, #0
 8002812:	9202      	str	r2, [sp, #8]
 8002814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002818:	9201      	str	r2, [sp, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <MainGUI+0x134>)
 8002822:	2132      	movs	r1, #50	; 0x32
 8002824:	2000      	movs	r0, #0
 8002826:	f000 ff2e 	bl	8003686 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MainGUI+0x124>)
 800282c:	2200      	movs	r2, #0
 800282e:	9202      	str	r2, [sp, #8]
 8002830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002834:	9201      	str	r2, [sp, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <MainGUI+0x138>)
 800283e:	213c      	movs	r1, #60	; 0x3c
 8002840:	2000      	movs	r0, #0
 8002842:	f000 ff20 	bl	8003686 <ST7735_WriteString>
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2400000c 	.word	0x2400000c
 8002850:	0800d934 	.word	0x0800d934
 8002854:	0800da04 	.word	0x0800da04
 8002858:	0800da14 	.word	0x0800da14
 800285c:	0800da1c 	.word	0x0800da1c
 8002860:	0800d8e0 	.word	0x0800d8e0
 8002864:	0800d8d4 	.word	0x0800d8d4

08002868 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af04      	add	r7, sp, #16
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8002872:	2300      	movs	r3, #0
 8002874:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8002876:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <LCDvalue+0x188>)
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <LCDvalue+0x18c>)
 800287c:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <LCDvalue+0x190>)
 8002880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <LCDvalue+0x194>)
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	f7fd fd79 	bl	8000380 <__aeabi_uldivmod>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4613      	mov	r3, r2
 8002894:	817b      	strh	r3, [r7, #10]
	time -= a;
 8002896:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <LCDvalue+0x18c>)
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <LCDvalue+0x18c>)
 80028a2:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <LCDvalue+0x18c>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4955      	ldr	r1, [pc, #340]	; (8002a00 <LCDvalue+0x198>)
 80028ac:	4855      	ldr	r0, [pc, #340]	; (8002a04 <LCDvalue+0x19c>)
 80028ae:	f00a fc87 	bl	800d1c0 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e012      	b.n	80028de <LCDvalue+0x76>
		if(t_c[i] == 0){
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <LCDvalue+0x19c>)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <LCDvalue+0x70>
			t_c[i] = 32;
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <LCDvalue+0x19c>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	2220      	movs	r2, #32
 80028cc:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <LCDvalue+0x19c>)
 80028d4:	2120      	movs	r1, #32
 80028d6:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3301      	adds	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	dde9      	ble.n	80028b8 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <LCDvalue+0x18c>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <LCDvalue+0x90>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80028ec:	4846      	ldr	r0, [pc, #280]	; (8002a08 <LCDvalue+0x1a0>)
 80028ee:	f008 f88b 	bl	800aa08 <HAL_TIM_Base_Stop_IT>
		time = 0;
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <LCDvalue+0x18c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	801a      	strh	r2, [r3, #0]
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4940      	ldr	r1, [pc, #256]	; (8002a00 <LCDvalue+0x198>)
 8002900:	4842      	ldr	r0, [pc, #264]	; (8002a0c <LCDvalue+0x1a4>)
 8002902:	f00a fc5d 	bl	800d1c0 <siprintf>
	if(C_LP_ATK[3] == 0){
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <LCDvalue+0x1a4>)
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <LCDvalue+0xc4>
		C_LP_ATK[3] = C_LP_ATK[2];
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <LCDvalue+0x1a4>)
 8002910:	789a      	ldrb	r2, [r3, #2]
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <LCDvalue+0x1a4>)
 8002914:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <LCDvalue+0x1a4>)
 8002918:	785a      	ldrb	r2, [r3, #1]
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <LCDvalue+0x1a4>)
 800291c:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <LCDvalue+0x1a4>)
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <LCDvalue+0x1a4>)
 8002924:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <LCDvalue+0x1a4>)
 8002928:	2220      	movs	r2, #32
 800292a:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <LCDvalue+0x1a8>)
 8002932:	9203      	str	r2, [sp, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	9202      	str	r2, [sp, #8]
 8002938:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800293c:	9201      	str	r2, [sp, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <LCDvalue+0x1a4>)
 8002946:	2114      	movs	r1, #20
 8002948:	205a      	movs	r0, #90	; 0x5a
 800294a:	f000 ff30 	bl	80037ae <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <LCDvalue+0x1a8>)
 8002954:	9203      	str	r2, [sp, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	9202      	str	r2, [sp, #8]
 800295a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800295e:	9201      	str	r2, [sp, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <LCDvalue+0x19c>)
 8002968:	2132      	movs	r1, #50	; 0x32
 800296a:	2069      	movs	r0, #105	; 0x69
 800296c:	f000 ff1f 	bl	80037ae <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	889b      	ldrh	r3, [r3, #4]
 8002974:	461a      	mov	r2, r3
 8002976:	4922      	ldr	r1, [pc, #136]	; (8002a00 <LCDvalue+0x198>)
 8002978:	4826      	ldr	r0, [pc, #152]	; (8002a14 <LCDvalue+0x1ac>)
 800297a:	f00a fc21 	bl	800d1c0 <siprintf>
	if(C_LP_DEF[3] == 0){
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <LCDvalue+0x1ac>)
 8002980:	78db      	ldrb	r3, [r3, #3]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <LCDvalue+0x13c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <LCDvalue+0x1ac>)
 8002988:	789a      	ldrb	r2, [r3, #2]
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <LCDvalue+0x1ac>)
 800298c:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <LCDvalue+0x1ac>)
 8002990:	785a      	ldrb	r2, [r3, #1]
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <LCDvalue+0x1ac>)
 8002994:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <LCDvalue+0x1ac>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <LCDvalue+0x1ac>)
 800299c:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <LCDvalue+0x1ac>)
 80029a0:	2220      	movs	r2, #32
 80029a2:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <LCDvalue+0x1a8>)
 80029aa:	9203      	str	r2, [sp, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	9202      	str	r2, [sp, #8]
 80029b0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029b4:	9201      	str	r2, [sp, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	9200      	str	r2, [sp, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <LCDvalue+0x1ac>)
 80029be:	2114      	movs	r1, #20
 80029c0:	205a      	movs	r0, #90	; 0x5a
 80029c2:	f000 fef4 	bl	80037ae <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <LCDvalue+0x1a8>)
 80029cc:	9203      	str	r2, [sp, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	9202      	str	r2, [sp, #8]
 80029d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029d6:	9201      	str	r2, [sp, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <LCDvalue+0x1b0>)
 80029e0:	2132      	movs	r1, #50	; 0x32
 80029e2:	2069      	movs	r0, #105	; 0x69
 80029e4:	f000 fee3 	bl	80037ae <ST7735_WriteStringNSS>

}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	24000000 	.word	0x24000000
 80029f4:	2400016c 	.word	0x2400016c
 80029f8:	24000e98 	.word	0x24000e98
 80029fc:	000f4240 	.word	0x000f4240
 8002a00:	0800da30 	.word	0x0800da30
 8002a04:	24000170 	.word	0x24000170
 8002a08:	240002e4 	.word	0x240002e4
 8002a0c:	24000164 	.word	0x24000164
 8002a10:	2400000c 	.word	0x2400000c
 8002a14:	24000168 	.word	0x24000168
 8002a18:	0800d930 	.word	0x0800d930

08002a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <SystemInit+0xfc>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <SystemInit+0xfc>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <SystemInit+0xfc>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <SystemInit+0xfc>)
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a3c:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <SystemInit+0x100>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d807      	bhi.n	8002a58 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a48:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <SystemInit+0x100>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 030f 	bic.w	r3, r3, #15
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <SystemInit+0x100>)
 8002a52:	f043 0307 	orr.w	r3, r3, #7
 8002a56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <SystemInit+0x104>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <SystemInit+0x104>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <SystemInit+0x104>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <SystemInit+0x104>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <SystemInit+0x104>)
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <SystemInit+0x108>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <SystemInit+0x100>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <SystemInit+0x100>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <SystemInit+0x100>)
 8002a8c:	f043 0307 	orr.w	r3, r3, #7
 8002a90:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <SystemInit+0x104>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <SystemInit+0x104>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <SystemInit+0x104>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <SystemInit+0x104>)
 8002aa6:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <SystemInit+0x10c>)
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <SystemInit+0x104>)
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <SystemInit+0x110>)
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <SystemInit+0x104>)
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <SystemInit+0x114>)
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <SystemInit+0x104>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <SystemInit+0x104>)
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <SystemInit+0x114>)
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <SystemInit+0x104>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <SystemInit+0x104>)
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <SystemInit+0x114>)
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <SystemInit+0x104>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <SystemInit+0x104>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <SystemInit+0x104>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <SystemInit+0x104>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <SystemInit+0x118>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <SystemInit+0x118>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <SystemInit+0x11c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <SystemInit+0x120>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afe:	d202      	bcs.n	8002b06 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <SystemInit+0x124>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <SystemInit+0x128>)
 8002b08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b0c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	52002000 	.word	0x52002000
 8002b20:	58024400 	.word	0x58024400
 8002b24:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b28:	02020200 	.word	0x02020200
 8002b2c:	01ff0000 	.word	0x01ff0000
 8002b30:	01010280 	.word	0x01010280
 8002b34:	580000c0 	.word	0x580000c0
 8002b38:	5c001000 	.word	0x5c001000
 8002b3c:	ffff0000 	.word	0xffff0000
 8002b40:	51008108 	.word	0x51008108
 8002b44:	52004000 	.word	0x52004000

08002b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002b54:	bf00      	nop
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <main+0xec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <main+0x24>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dcf4      	bgt.n	8002b56 <main+0xe>
	if ( timeout < 0 )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da01      	bge.n	8002b76 <main+0x2e>
	{
		Error_Handler();
 8002b72:	f000 fbeb 	bl	800334c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b76:	f001 fb69 	bl	800424c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7a:	f000 f863 	bl	8002c44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b7e:	f000 f8e5 	bl	8002d4c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <main+0xec>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <main+0xec>)
 8002b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <main+0xec>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f004 fd7f 	bl	80076a4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f004 fd95 	bl	80076d8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8002bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002bb4:	bf00      	nop
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <main+0xec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <main+0x84>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dcf4      	bgt.n	8002bb6 <main+0x6e>
	if ( timeout < 0 )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da01      	bge.n	8002bd6 <main+0x8e>
	{
		Error_Handler();
 8002bd2:	f000 fbbb 	bl	800334c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd6:	f000 fa6d 	bl	80030b4 <MX_GPIO_Init>
  MX_ETH_Init();
 8002bda:	f000 f8e9 	bl	8002db0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002bde:	f000 f9c1 	bl	8002f64 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8002be2:	f000 fa3f 	bl	8003064 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002be6:	f000 fa0b 	bl	8003000 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8002bea:	f000 f92d 	bl	8002e48 <MX_SPI3_Init>
  MX_TIM7_Init();
 8002bee:	f000 f983 	bl	8002ef8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8002bf2:	f000 fcb3 	bl	800355c <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f000 ffbd 	bl	8003b76 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f000 ffa9 	bl	8003b54 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8002c02:	f001 fba9 	bl	8004358 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <main+0xf0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2bc8      	cmp	r3, #200	; 0xc8
 8002c10:	d9f7      	bls.n	8002c02 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8002c12:	f001 fba1 	bl	8004358 <HAL_GetTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <main+0xf0>)
 8002c1a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c20:	4806      	ldr	r0, [pc, #24]	; (8002c3c <main+0xf4>)
 8002c22:	f004 fd24 	bl	800766e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8002c26:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002c2a:	4905      	ldr	r1, [pc, #20]	; (8002c40 <main+0xf8>)
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd ffb9 	bl	8000ba4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8002c32:	e7e6      	b.n	8002c02 <main+0xba>
 8002c34:	58024400 	.word	0x58024400
 8002c38:	24000e94 	.word	0x24000e94
 8002c3c:	58020400 	.word	0x58020400
 8002c40:	240009bc 	.word	0x240009bc

08002c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b09c      	sub	sp, #112	; 0x70
 8002c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4e:	224c      	movs	r2, #76	; 0x4c
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00a f9bc 	bl	800cfd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00a f9b6 	bl	800cfd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002c64:	2004      	movs	r0, #4
 8002c66:	f004 fe93 	bl	8007990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <SystemClock_Config+0xfc>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <SystemClock_Config+0xfc>)
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <SystemClock_Config+0xfc>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <SystemClock_Config+0x100>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <SystemClock_Config+0x100>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <SystemClock_Config+0x100>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002c9c:	bf00      	nop
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <SystemClock_Config+0xfc>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d1f8      	bne.n	8002c9e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <SystemClock_Config+0x104>)
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <SystemClock_Config+0x104>)
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002cc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002cd2:	2378      	movs	r3, #120	; 0x78
 8002cd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 feb6 	bl	8007a64 <HAL_RCC_OscConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002cfe:	f000 fb25 	bl	800334c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d02:	233f      	movs	r3, #63	; 0x3f
 8002d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d06:	2303      	movs	r3, #3
 8002d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002d0e:	2308      	movs	r3, #8
 8002d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002d16:	2340      	movs	r3, #64	; 0x40
 8002d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2104      	movs	r1, #4
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f005 fac9 	bl	80082c0 <HAL_RCC_ClockConfig>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002d34:	f000 fb0a 	bl	800334c <Error_Handler>
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3770      	adds	r7, #112	; 0x70
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	58024800 	.word	0x58024800
 8002d44:	58000400 	.word	0x58000400
 8002d48:	58024400 	.word	0x58024400

08002d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0b0      	sub	sp, #192	; 0xc0
 8002d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	22bc      	movs	r2, #188	; 0xbc
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f00a f939 	bl	800cfd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8002d5e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8002d62:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002d68:	2318      	movs	r3, #24
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002d70:	2304      	movs	r3, #4
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002d74:	2302      	movs	r3, #2
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002d78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8002d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 fe1e 	bl	80089d8 <HAL_RCCEx_PeriphCLKConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8002da2:	f000 fad3 	bl	800334c <Error_Handler>
  }
}
 8002da6:	bf00      	nop
 8002da8:	37c0      	adds	r7, #192	; 0xc0
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <MX_ETH_Init+0x80>)
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <MX_ETH_Init+0x84>)
 8002db8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dc8:	22e1      	movs	r2, #225	; 0xe1
 8002dca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <MX_ETH_Init+0x88>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <MX_ETH_Init+0x80>)
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <MX_ETH_Init+0x88>)
 8002de2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <MX_ETH_Init+0x80>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_ETH_Init+0x80>)
 8002dec:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <MX_ETH_Init+0x8c>)
 8002dee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_ETH_Init+0x80>)
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <MX_ETH_Init+0x90>)
 8002df4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_ETH_Init+0x80>)
 8002df8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002dfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_ETH_Init+0x80>)
 8002e00:	f003 fe30 	bl	8006a64 <HAL_ETH_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002e0a:	f000 fa9f 	bl	800334c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002e0e:	2238      	movs	r2, #56	; 0x38
 8002e10:	2100      	movs	r1, #0
 8002e12:	480c      	ldr	r0, [pc, #48]	; (8002e44 <MX_ETH_Init+0x94>)
 8002e14:	f00a f8dc 	bl	800cfd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MX_ETH_Init+0x94>)
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_ETH_Init+0x94>)
 8002e20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <MX_ETH_Init+0x94>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	240001ac 	.word	0x240001ac
 8002e34:	40028000 	.word	0x40028000
 8002e38:	24000ea0 	.word	0x24000ea0
 8002e3c:	240000e8 	.word	0x240000e8
 8002e40:	24000088 	.word	0x24000088
 8002e44:	24000174 	.word	0x24000174

08002e48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e4e:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <MX_SPI3_Init+0xac>)
 8002e50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e52:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e60:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e82:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_SPI3_Init+0xa8>)
 8002edc:	f007 f8e4 	bl	800a0a8 <HAL_SPI_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8002ee6:	f000 fa31 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2400025c 	.word	0x2400025c
 8002ef4:	40003c00 	.word	0x40003c00

08002ef8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <MX_TIM7_Init+0x68>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f10:	22ef      	movs	r2, #239	; 0xef
 8002f12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f2a:	f007 fc9e 	bl	800a86a <HAL_TIM_Base_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f34:	f000 fa0a 	bl	800334c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_TIM7_Init+0x64>)
 8002f46:	f007 ff6f 	bl	800ae28 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002f50:	f000 f9fc 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	240002e4 	.word	0x240002e4
 8002f60:	40001400 	.word	0x40001400

08002f64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <MX_USART3_UART_Init+0x94>)
 8002f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <MX_USART3_UART_Init+0x98>)
 8002f72:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f88:	220c      	movs	r2, #12
 8002f8a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002faa:	4812      	ldr	r0, [pc, #72]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fac:	f007 ffe8 	bl	800af80 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002fb6:	f000 f9c9 	bl	800334c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fbe:	f009 fc09 	bl	800c7d4 <HAL_UARTEx_SetTxFifoThreshold>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002fc8:	f000 f9c0 	bl	800334c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fd0:	f009 fc3e 	bl	800c850 <HAL_UARTEx_SetRxFifoThreshold>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002fda:	f000 f9b7 	bl	800334c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002fde:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <MX_USART3_UART_Init+0x90>)
 8002fe0:	f009 fbbf 	bl	800c762 <HAL_UARTEx_DisableFifoMode>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002fea:	f000 f9af 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	24000330 	.word	0x24000330
 8002ff8:	40004800 	.word	0x40004800
 8002ffc:	0005dc00 	.word	0x0005dc00

08003000 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8003008:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800300c:	2209      	movs	r2, #9
 800300e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003012:	2202      	movs	r2, #2
 8003014:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800301e:	2202      	movs	r2, #2
 8003020:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003024:	2200      	movs	r2, #0
 8003026:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800302a:	2200      	movs	r2, #0
 800302c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003030:	2200      	movs	r2, #0
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003036:	2201      	movs	r2, #1
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800303c:	2201      	movs	r2, #1
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003048:	f004 fb5a 	bl	8007700 <HAL_PCD_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003052:	f000 f97b 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	240004b0 	.word	0x240004b0
 8003060:	40080000 	.word	0x40080000

08003064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_DMA_Init+0x4c>)
 800306c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <MX_DMA_Init+0x4c>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <MX_DMA_Init+0x4c>)
 800307c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	200c      	movs	r0, #12
 800308e:	f001 fa8e 	bl	80045ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003092:	200c      	movs	r0, #12
 8003094:	f001 faa5 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	2100      	movs	r1, #0
 800309c:	200f      	movs	r0, #15
 800309e:	f001 fa86 	bl	80045ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80030a2:	200f      	movs	r0, #15
 80030a4:	f001 fa9d 	bl	80045e2 <HAL_NVIC_EnableIRQ>

}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58024400 	.word	0x58024400

080030b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08e      	sub	sp, #56	; 0x38
 80030b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	4b8a      	ldr	r3, [pc, #552]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d0:	4a88      	ldr	r2, [pc, #544]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030da:	4b86      	ldr	r3, [pc, #536]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e8:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <MX_GPIO_Init+0x240>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310c:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <MX_GPIO_Init+0x240>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003116:	4b77      	ldr	r3, [pc, #476]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312a:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <MX_GPIO_Init+0x240>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003148:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <MX_GPIO_Init+0x240>)
 800314a:	f043 0320 	orr.w	r3, r3, #32
 800314e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003152:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003166:	4a63      	ldr	r2, [pc, #396]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003184:	4a5b      	ldr	r2, [pc, #364]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800318e:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <MX_GPIO_Init+0x240>)
 8003190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <MX_GPIO_Init+0x240>)
 800319e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a2:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <MX_GPIO_Init+0x240>)
 80031a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ac:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <MX_GPIO_Init+0x240>)
 80031ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80031ba:	2201      	movs	r2, #1
 80031bc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80031c0:	484d      	ldr	r0, [pc, #308]	; (80032f8 <MX_GPIO_Init+0x244>)
 80031c2:	f004 fa3b 	bl	800763c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031cc:	484a      	ldr	r0, [pc, #296]	; (80032f8 <MX_GPIO_Init+0x244>)
 80031ce:	f004 fa35 	bl	800763c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80031d2:	2200      	movs	r2, #0
 80031d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031d8:	4848      	ldr	r0, [pc, #288]	; (80032fc <MX_GPIO_Init+0x248>)
 80031da:	f004 fa2f 	bl	800763c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80031de:	2200      	movs	r2, #0
 80031e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031e4:	4846      	ldr	r0, [pc, #280]	; (8003300 <MX_GPIO_Init+0x24c>)
 80031e6:	f004 fa29 	bl	800763c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80031ea:	2201      	movs	r2, #1
 80031ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f0:	4844      	ldr	r0, [pc, #272]	; (8003304 <MX_GPIO_Init+0x250>)
 80031f2:	f004 fa23 	bl	800763c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80031f6:	230d      	movs	r3, #13
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003206:	4619      	mov	r1, r3
 8003208:	483f      	ldr	r0, [pc, #252]	; (8003308 <MX_GPIO_Init+0x254>)
 800320a:	f004 f84f 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800320e:	2308      	movs	r3, #8
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003212:	2300      	movs	r3, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800321a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321e:	4619      	mov	r1, r3
 8003220:	483a      	ldr	r0, [pc, #232]	; (800330c <MX_GPIO_Init+0x258>)
 8003222:	f004 f843 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8003226:	2302      	movs	r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800322a:	2300      	movs	r3, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8003232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003236:	4619      	mov	r1, r3
 8003238:	4830      	ldr	r0, [pc, #192]	; (80032fc <MX_GPIO_Init+0x248>)
 800323a:	f004 f837 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800323e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	482f      	ldr	r0, [pc, #188]	; (8003310 <MX_GPIO_Init+0x25c>)
 8003254:	f004 f82a 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8003258:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325e:	2301      	movs	r3, #1
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800326a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326e:	4619      	mov	r1, r3
 8003270:	4821      	ldr	r0, [pc, #132]	; (80032f8 <MX_GPIO_Init+0x244>)
 8003272:	f004 f81b 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003276:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327c:	2301      	movs	r3, #1
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328c:	4619      	mov	r1, r3
 800328e:	481b      	ldr	r0, [pc, #108]	; (80032fc <MX_GPIO_Init+0x248>)
 8003290:	f004 f80c 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329a:	2301      	movs	r3, #1
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	4619      	mov	r1, r3
 80032ac:	4814      	ldr	r0, [pc, #80]	; (8003300 <MX_GPIO_Init+0x24c>)
 80032ae:	f003 fffd 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	480f      	ldr	r0, [pc, #60]	; (8003304 <MX_GPIO_Init+0x250>)
 80032c8:	f003 fff0 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80032cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	4807      	ldr	r0, [pc, #28]	; (8003304 <MX_GPIO_Init+0x250>)
 80032e6:	f003 ffe1 	bl	80072ac <HAL_GPIO_Init>

}
 80032ea:	bf00      	nop
 80032ec:	3738      	adds	r7, #56	; 0x38
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58021000 	.word	0x58021000
 80032fc:	58020400 	.word	0x58020400
 8003300:	58020c00 	.word	0x58020c00
 8003304:	58021800 	.word	0x58021800
 8003308:	58020800 	.word	0x58020800
 800330c:	58020000 	.word	0x58020000
 8003310:	58021400 	.word	0x58021400

08003314 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003314:	b4b0      	push	{r4, r5, r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10a      	bne.n	800333a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800332e:	1854      	adds	r4, r2, r1
 8003330:	f143 0500 	adc.w	r5, r3, #0
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003336:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bcb0      	pop	{r4, r5, r7}
 8003342:	4770      	bx	lr
 8003344:	240002e4 	.word	0x240002e4
 8003348:	24000e98 	.word	0x24000e98

0800334c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003350:	b672      	cpsid	i
}
 8003352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003354:	e7fe      	b.n	8003354 <Error_Handler+0x8>
	...

08003358 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003362:	4802      	ldr	r0, [pc, #8]	; (800336c <ST7735_Select+0x14>)
 8003364:	f004 f96a 	bl	800763c <HAL_GPIO_WritePin>
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58021000 	.word	0x58021000

08003370 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800337a:	4802      	ldr	r0, [pc, #8]	; (8003384 <ST7735_Unselect+0x14>)
 800337c:	f004 f95e 	bl	800763c <HAL_GPIO_WritePin>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	58021000 	.word	0x58021000

08003388 <ST7735_Select1>:
static void ST7735_Select1() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003392:	4802      	ldr	r0, [pc, #8]	; (800339c <ST7735_Select1+0x14>)
 8003394:	f004 f952 	bl	800763c <HAL_GPIO_WritePin>
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58021000 	.word	0x58021000

080033a0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80033a4:	2201      	movs	r2, #1
 80033a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033aa:	4802      	ldr	r0, [pc, #8]	; (80033b4 <ST7735_Unselect1+0x14>)
 80033ac:	f004 f946 	bl	800763c <HAL_GPIO_WritePin>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58021000 	.word	0x58021000

080033b8 <ST7735_Reset>:

static void ST7735_Reset() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <ST7735_Reset+0x28>)
 80033c4:	f004 f93a 	bl	800763c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80033c8:	2005      	movs	r0, #5
 80033ca:	f000 ffd1 	bl	8004370 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80033ce:	2201      	movs	r2, #1
 80033d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <ST7735_Reset+0x28>)
 80033d6:	f004 f931 	bl	800763c <HAL_GPIO_WritePin>
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58021000 	.word	0x58021000

080033e4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80033ee:	2200      	movs	r2, #0
 80033f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f4:	4806      	ldr	r0, [pc, #24]	; (8003410 <ST7735_WriteCommand+0x2c>)
 80033f6:	f004 f921 	bl	800763c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80033fa:	1df9      	adds	r1, r7, #7
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	2201      	movs	r2, #1
 8003402:	4804      	ldr	r0, [pc, #16]	; (8003414 <ST7735_WriteCommand+0x30>)
 8003404:	f006 ff56 	bl	800a2b4 <HAL_SPI_Transmit>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	58021800 	.word	0x58021800
 8003414:	2400025c 	.word	0x2400025c

08003418 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003422:	2201      	movs	r2, #1
 8003424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003428:	4807      	ldr	r0, [pc, #28]	; (8003448 <ST7735_WriteData+0x30>)
 800342a:	f004 f907 	bl	800763c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b29a      	uxth	r2, r3
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <ST7735_WriteData+0x34>)
 800343a:	f006 ff3b 	bl	800a2b4 <HAL_SPI_Transmit>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	58021800 	.word	0x58021800
 800344c:	2400025c 	.word	0x2400025c

08003450 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8003462:	e034      	b.n	80034ce <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 800346e:	7afb      	ldrb	r3, [r7, #11]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ffb7 	bl	80033e4 <ST7735_WriteCommand>

		numArgs = *addr++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8003480:	7abb      	ldrb	r3, [r7, #10]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 800348a:	7abb      	ldrb	r3, [r7, #10]
 800348c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003490:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8003492:	7abb      	ldrb	r3, [r7, #10]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8003498:	7abb      	ldrb	r3, [r7, #10]
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ffbb 	bl	8003418 <ST7735_WriteData>
			addr += numArgs;
 80034a2:	7abb      	ldrb	r3, [r7, #10]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80034aa:	89bb      	ldrh	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80034ba:	89bb      	ldrh	r3, [r7, #12]
 80034bc:	2bff      	cmp	r3, #255	; 0xff
 80034be:	d102      	bne.n	80034c6 <ST7735_ExecuteCommandList+0x76>
 80034c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034c4:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80034c6:	89bb      	ldrh	r3, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 ff51 	bl	8004370 <HAL_Delay>
	while(numCommands--) {
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	73fa      	strb	r2, [r7, #15]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1c5      	bne.n	8003464 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4604      	mov	r4, r0
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4623      	mov	r3, r4
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	4603      	mov	r3, r0
 80034f6:	71bb      	strb	r3, [r7, #6]
 80034f8:	460b      	mov	r3, r1
 80034fa:	717b      	strb	r3, [r7, #5]
 80034fc:	4613      	mov	r3, r2
 80034fe:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8003500:	202a      	movs	r0, #42	; 0x2a
 8003502:	f7ff ff6f 	bl	80033e4 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003506:	2300      	movs	r3, #0
 8003508:	733b      	strb	r3, [r7, #12]
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	3302      	adds	r3, #2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	737b      	strb	r3, [r7, #13]
 8003512:	2300      	movs	r3, #0
 8003514:	73bb      	strb	r3, [r7, #14]
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	3302      	adds	r3, #2
 800351a:	b2db      	uxtb	r3, r3
 800351c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	2104      	movs	r1, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff77 	bl	8003418 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 800352a:	202b      	movs	r0, #43	; 0x2b
 800352c:	f7ff ff5a 	bl	80033e4 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8003530:	79bb      	ldrb	r3, [r7, #6]
 8003532:	3301      	adds	r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8003538:	793b      	ldrb	r3, [r7, #4]
 800353a:	3301      	adds	r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	2104      	movs	r1, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff66 	bl	8003418 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 800354c:	202c      	movs	r0, #44	; 0x2c
 800354e:	f7ff ff49 	bl	80033e4 <ST7735_WriteCommand>
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
	...

0800355c <ST7735_Init>:

void ST7735_Init() {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8003560:	f7ff fefa 	bl	8003358 <ST7735_Select>
	ST7735_Select1();
 8003564:	f7ff ff10 	bl	8003388 <ST7735_Select1>
	ST7735_Reset();
 8003568:	f7ff ff26 	bl	80033b8 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 800356c:	4807      	ldr	r0, [pc, #28]	; (800358c <ST7735_Init+0x30>)
 800356e:	f7ff ff6f 	bl	8003450 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8003572:	4807      	ldr	r0, [pc, #28]	; (8003590 <ST7735_Init+0x34>)
 8003574:	f7ff ff6c 	bl	8003450 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <ST7735_Init+0x38>)
 800357a:	f7ff ff69 	bl	8003450 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 800357e:	f7ff fef7 	bl	8003370 <ST7735_Unselect>
	ST7735_Unselect1();
 8003582:	f7ff ff0d 	bl	80033a0 <ST7735_Unselect1>
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	0800ef0c 	.word	0x0800ef0c
 8003590:	0800ef48 	.word	0x0800ef48
 8003594:	0800ef58 	.word	0x0800ef58

08003598 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003598:	b082      	sub	sp, #8
 800359a:	b590      	push	{r4, r7, lr}
 800359c:	b089      	sub	sp, #36	; 0x24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
 80035a6:	460b      	mov	r3, r1
 80035a8:	80bb      	strh	r3, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2d8      	uxtb	r0, r3
 80035b2:	88bb      	ldrh	r3, [r7, #4]
 80035b4:	b2d9      	uxtb	r1, r3
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035be:	4413      	add	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b2dc      	uxtb	r4, r3
 80035c6:	88bb      	ldrh	r3, [r7, #4]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80035ce:	4413      	add	r3, r2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4622      	mov	r2, r4
 80035d8:	f7ff ff83 	bl	80034e2 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e043      	b.n	800366a <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 80035e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	3b20      	subs	r3, #32
 80035e8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	440b      	add	r3, r1
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e029      	b.n	8003658 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8003614:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	b29b      	uxth	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	743b      	strb	r3, [r7, #16]
 800361e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003620:	b2db      	uxtb	r3, r3
 8003622:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fef4 	bl	8003418 <ST7735_WriteData>
 8003630:	e00f      	b.n	8003652 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	733b      	strb	r3, [r7, #12]
 800363e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003642:	b2db      	uxtb	r3, r3
 8003644:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fee3 	bl	8003418 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3301      	adds	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800365c:	461a      	mov	r2, r3
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4293      	cmp	r3, r2
 8003662:	d3cf      	bcc.n	8003604 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	3301      	adds	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800366e:	461a      	mov	r2, r3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4293      	cmp	r3, r2
 8003674:	d3b5      	bcc.n	80035e2 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003682:	b002      	add	sp, #8
 8003684:	4770      	bx	lr

08003686 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003686:	b082      	sub	sp, #8
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af04      	add	r7, sp, #16
 800368e:	603a      	str	r2, [r7, #0]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	4603      	mov	r3, r0
 8003694:	80fb      	strh	r3, [r7, #6]
 8003696:	460b      	mov	r3, r1
 8003698:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 800369a:	f7ff fe5d 	bl	8003358 <ST7735_Select>

	while(*str) {
 800369e:	e02d      	b.n	80036fc <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	7d3a      	ldrb	r2, [r7, #20]
 80036a4:	4413      	add	r3, r2
 80036a6:	2b7f      	cmp	r3, #127	; 0x7f
 80036a8:	dd13      	ble.n	80036d2 <ST7735_WriteString+0x4c>
			x = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80036ae:	7d7b      	ldrb	r3, [r7, #21]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	88bb      	ldrh	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	7d7a      	ldrb	r2, [r7, #21]
 80036bc:	4413      	add	r3, r2
 80036be:	2b7f      	cmp	r3, #127	; 0x7f
 80036c0:	dc21      	bgt.n	8003706 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d103      	bne.n	80036d2 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	603b      	str	r3, [r7, #0]
				continue;
 80036d0:	e014      	b.n	80036fc <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	88b9      	ldrh	r1, [r7, #4]
 80036d8:	88f8      	ldrh	r0, [r7, #6]
 80036da:	8c3b      	ldrh	r3, [r7, #32]
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	8bbb      	ldrh	r3, [r7, #28]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f7ff ff56 	bl	8003598 <ST7735_WriteChar>
		x += font.width;
 80036ec:	7d3b      	ldrb	r3, [r7, #20]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	4413      	add	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
		str++;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	603b      	str	r3, [r7, #0]
	while(*str) {
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1cd      	bne.n	80036a0 <ST7735_WriteString+0x1a>
 8003704:	e000      	b.n	8003708 <ST7735_WriteString+0x82>
				break;
 8003706:	bf00      	nop
	}

	ST7735_Unselect();
 8003708:	f7ff fe32 	bl	8003370 <ST7735_Unselect>
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003716:	b002      	add	sp, #8
 8003718:	4770      	bx	lr

0800371a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800371a:	b082      	sub	sp, #8
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af04      	add	r7, sp, #16
 8003722:	603a      	str	r2, [r7, #0]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
 800372a:	460b      	mov	r3, r1
 800372c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 800372e:	f7ff fe2b 	bl	8003388 <ST7735_Select1>

	while(*str) {
 8003732:	e02d      	b.n	8003790 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	7d3a      	ldrb	r2, [r7, #20]
 8003738:	4413      	add	r3, r2
 800373a:	2b7f      	cmp	r3, #127	; 0x7f
 800373c:	dd13      	ble.n	8003766 <ST7735_WriteString1+0x4c>
			x = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003742:	7d7b      	ldrb	r3, [r7, #21]
 8003744:	b29a      	uxth	r2, r3
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800374c:	88bb      	ldrh	r3, [r7, #4]
 800374e:	7d7a      	ldrb	r2, [r7, #21]
 8003750:	4413      	add	r3, r2
 8003752:	2b7f      	cmp	r3, #127	; 0x7f
 8003754:	dc21      	bgt.n	800379a <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b20      	cmp	r3, #32
 800375c:	d103      	bne.n	8003766 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	603b      	str	r3, [r7, #0]
				continue;
 8003764:	e014      	b.n	8003790 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	88b9      	ldrh	r1, [r7, #4]
 800376c:	88f8      	ldrh	r0, [r7, #6]
 800376e:	8c3b      	ldrh	r3, [r7, #32]
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	8bbb      	ldrh	r3, [r7, #28]
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f7ff ff0c 	bl	8003598 <ST7735_WriteChar>
		x += font.width;
 8003780:	7d3b      	ldrb	r3, [r7, #20]
 8003782:	b29a      	uxth	r2, r3
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	4413      	add	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
		str++;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1cd      	bne.n	8003734 <ST7735_WriteString1+0x1a>
 8003798:	e000      	b.n	800379c <ST7735_WriteString1+0x82>
				break;
 800379a:	bf00      	nop
	}

	ST7735_Unselect1();
 800379c:	f7ff fe00 	bl	80033a0 <ST7735_Unselect1>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037aa:	b002      	add	sp, #8
 80037ac:	4770      	bx	lr

080037ae <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 80037ae:	b082      	sub	sp, #8
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af04      	add	r7, sp, #16
 80037b6:	603a      	str	r2, [r7, #0]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
 80037be:	460b      	mov	r3, r1
 80037c0:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 80037c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 80037ca:	f7ff fdc5 	bl	8003358 <ST7735_Select>
 80037ce:	e034      	b.n	800383a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 80037d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d130      	bne.n	800383a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 80037d8:	f7ff fdd6 	bl	8003388 <ST7735_Select1>

	}


	while(*str) {
 80037dc:	e02d      	b.n	800383a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	7d3a      	ldrb	r2, [r7, #20]
 80037e2:	4413      	add	r3, r2
 80037e4:	2b7f      	cmp	r3, #127	; 0x7f
 80037e6:	dd13      	ble.n	8003810 <ST7735_WriteStringNSS+0x62>
			x = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80037ec:	7d7b      	ldrb	r3, [r7, #21]
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	88bb      	ldrh	r3, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80037f6:	88bb      	ldrh	r3, [r7, #4]
 80037f8:	7d7a      	ldrb	r2, [r7, #21]
 80037fa:	4413      	add	r3, r2
 80037fc:	2b7f      	cmp	r3, #127	; 0x7f
 80037fe:	dc21      	bgt.n	8003844 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b20      	cmp	r3, #32
 8003806:	d103      	bne.n	8003810 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	603b      	str	r3, [r7, #0]
				continue;
 800380e:	e014      	b.n	800383a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	88b9      	ldrh	r1, [r7, #4]
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	8c3b      	ldrh	r3, [r7, #32]
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	8bbb      	ldrh	r3, [r7, #28]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f7ff feb7 	bl	8003598 <ST7735_WriteChar>
		x += font.width;
 800382a:	7d3b      	ldrb	r3, [r7, #20]
 800382c:	b29a      	uxth	r2, r3
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	4413      	add	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
		str++;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	603b      	str	r3, [r7, #0]
	while(*str) {
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1cd      	bne.n	80037de <ST7735_WriteStringNSS+0x30>
 8003842:	e000      	b.n	8003846 <ST7735_WriteStringNSS+0x98>
				break;
 8003844:	bf00      	nop
	}
	if(NSS == 0){
 8003846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 800384e:	f7ff fd8f 	bl	8003370 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8003852:	e005      	b.n	8003860 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8003854:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 800385c:	f7ff fda0 	bl	80033a0 <ST7735_Unselect1>
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800386a:	b002      	add	sp, #8
 800386c:	4770      	bx	lr
	...

08003870 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4623      	mov	r3, r4
 8003880:	80fb      	strh	r3, [r7, #6]
 8003882:	4603      	mov	r3, r0
 8003884:	80bb      	strh	r3, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	807b      	strh	r3, [r7, #2]
 800388a:	4613      	mov	r3, r2
 800388c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b7f      	cmp	r3, #127	; 0x7f
 8003892:	d858      	bhi.n	8003946 <ST7735_FillRectangle+0xd6>
 8003894:	88bb      	ldrh	r3, [r7, #4]
 8003896:	2b7f      	cmp	r3, #127	; 0x7f
 8003898:	d855      	bhi.n	8003946 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	4413      	add	r3, r2
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	dd03      	ble.n	80038ac <ST7735_FillRectangle+0x3c>
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80038aa:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80038ac:	88ba      	ldrh	r2, [r7, #4]
 80038ae:	883b      	ldrh	r3, [r7, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	dd03      	ble.n	80038be <ST7735_FillRectangle+0x4e>
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80038bc:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 80038be:	f7ff fd4b 	bl	8003358 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	b2d8      	uxtb	r0, r3
 80038c6:	88bb      	ldrh	r3, [r7, #4]
 80038c8:	b2d9      	uxtb	r1, r3
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b2dc      	uxtb	r4, r3
 80038da:	88bb      	ldrh	r3, [r7, #4]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	883b      	ldrh	r3, [r7, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4622      	mov	r2, r4
 80038ec:	f7ff fdf9 	bl	80034e2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80038f0:	8c3b      	ldrh	r3, [r7, #32]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	733b      	strb	r3, [r7, #12]
 80038fa:	8c3b      	ldrh	r3, [r7, #32]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003900:	2201      	movs	r2, #1
 8003902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003906:	4812      	ldr	r0, [pc, #72]	; (8003950 <ST7735_FillRectangle+0xe0>)
 8003908:	f003 fe98 	bl	800763c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800390c:	883b      	ldrh	r3, [r7, #0]
 800390e:	80bb      	strh	r3, [r7, #4]
 8003910:	e013      	b.n	800393a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	80fb      	strh	r3, [r7, #6]
 8003916:	e00a      	b.n	800392e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003918:	f107 010c 	add.w	r1, r7, #12
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	2202      	movs	r2, #2
 8003922:	480c      	ldr	r0, [pc, #48]	; (8003954 <ST7735_FillRectangle+0xe4>)
 8003924:	f006 fcc6 	bl	800a2b4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	3b01      	subs	r3, #1
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f1      	bne.n	8003918 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8003934:	88bb      	ldrh	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	80bb      	strh	r3, [r7, #4]
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8003940:	f7ff fd16 	bl	8003370 <ST7735_Unselect>
 8003944:	e000      	b.n	8003948 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003946:	bf00      	nop
}
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	58021800 	.word	0x58021800
 8003954:	2400025c 	.word	0x2400025c

08003958 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4623      	mov	r3, r4
 8003968:	80fb      	strh	r3, [r7, #6]
 800396a:	4603      	mov	r3, r0
 800396c:	80bb      	strh	r3, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
 8003972:	4613      	mov	r3, r2
 8003974:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b7f      	cmp	r3, #127	; 0x7f
 800397a:	d858      	bhi.n	8003a2e <ST7735_FillRectangle1+0xd6>
 800397c:	88bb      	ldrh	r3, [r7, #4]
 800397e:	2b7f      	cmp	r3, #127	; 0x7f
 8003980:	d855      	bhi.n	8003a2e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	4413      	add	r3, r2
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	dd03      	ble.n	8003994 <ST7735_FillRectangle1+0x3c>
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003992:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003994:	88ba      	ldrh	r2, [r7, #4]
 8003996:	883b      	ldrh	r3, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	dd03      	ble.n	80039a6 <ST7735_FillRectangle1+0x4e>
 800399e:	88bb      	ldrh	r3, [r7, #4]
 80039a0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80039a4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 80039a6:	f7ff fcef 	bl	8003388 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	b2d8      	uxtb	r0, r3
 80039ae:	88bb      	ldrh	r3, [r7, #4]
 80039b0:	b2d9      	uxtb	r1, r3
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b2dc      	uxtb	r4, r3
 80039c2:	88bb      	ldrh	r3, [r7, #4]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	883b      	ldrh	r3, [r7, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4622      	mov	r2, r4
 80039d4:	f7ff fd85 	bl	80034e2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80039d8:	8c3b      	ldrh	r3, [r7, #32]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	733b      	strb	r3, [r7, #12]
 80039e2:	8c3b      	ldrh	r3, [r7, #32]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80039e8:	2201      	movs	r2, #1
 80039ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ee:	4812      	ldr	r0, [pc, #72]	; (8003a38 <ST7735_FillRectangle1+0xe0>)
 80039f0:	f003 fe24 	bl	800763c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 80039f4:	883b      	ldrh	r3, [r7, #0]
 80039f6:	80bb      	strh	r3, [r7, #4]
 80039f8:	e013      	b.n	8003a22 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	80fb      	strh	r3, [r7, #6]
 80039fe:	e00a      	b.n	8003a16 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003a00:	f107 010c 	add.w	r1, r7, #12
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	2202      	movs	r2, #2
 8003a0a:	480c      	ldr	r0, [pc, #48]	; (8003a3c <ST7735_FillRectangle1+0xe4>)
 8003a0c:	f006 fc52 	bl	800a2b4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	80fb      	strh	r3, [r7, #6]
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f1      	bne.n	8003a00 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8003a1c:	88bb      	ldrh	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	80bb      	strh	r3, [r7, #4]
 8003a22:	88bb      	ldrh	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e8      	bne.n	80039fa <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8003a28:	f7ff fcba 	bl	80033a0 <ST7735_Unselect1>
 8003a2c:	e000      	b.n	8003a30 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003a2e:	bf00      	nop
}
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	58021800 	.word	0x58021800
 8003a3c:	2400025c 	.word	0x2400025c

08003a40 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4604      	mov	r4, r0
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	80fb      	strh	r3, [r7, #6]
 8003a52:	4603      	mov	r3, r0
 8003a54:	80bb      	strh	r3, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b7f      	cmp	r3, #127	; 0x7f
 8003a62:	d86e      	bhi.n	8003b42 <ST7735_FillRectangleNSS+0x102>
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	2b7f      	cmp	r3, #127	; 0x7f
 8003a68:	d86b      	bhi.n	8003b42 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	4413      	add	r3, r2
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	dd03      	ble.n	8003a7c <ST7735_FillRectangleNSS+0x3c>
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003a7a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003a7c:	88ba      	ldrh	r2, [r7, #4]
 8003a7e:	883b      	ldrh	r3, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	dd03      	ble.n	8003a8e <ST7735_FillRectangleNSS+0x4e>
 8003a86:	88bb      	ldrh	r3, [r7, #4]
 8003a88:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003a8c:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8003a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8003a96:	f7ff fc5f 	bl	8003358 <ST7735_Select>
 8003a9a:	e005      	b.n	8003aa8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8003a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8003aa4:	f7ff fc70 	bl	8003388 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	b2d8      	uxtb	r0, r3
 8003aac:	88bb      	ldrh	r3, [r7, #4]
 8003aae:	b2d9      	uxtb	r1, r3
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b2dc      	uxtb	r4, r3
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	883b      	ldrh	r3, [r7, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	f7ff fd06 	bl	80034e2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003ad6:	8c3b      	ldrh	r3, [r7, #32]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	733b      	strb	r3, [r7, #12]
 8003ae0:	8c3b      	ldrh	r3, [r7, #32]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aec:	4817      	ldr	r0, [pc, #92]	; (8003b4c <ST7735_FillRectangleNSS+0x10c>)
 8003aee:	f003 fda5 	bl	800763c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003af2:	883b      	ldrh	r3, [r7, #0]
 8003af4:	80bb      	strh	r3, [r7, #4]
 8003af6:	e013      	b.n	8003b20 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	80fb      	strh	r3, [r7, #6]
 8003afc:	e00a      	b.n	8003b14 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003afe:	f107 010c 	add.w	r1, r7, #12
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	2202      	movs	r2, #2
 8003b08:	4811      	ldr	r0, [pc, #68]	; (8003b50 <ST7735_FillRectangleNSS+0x110>)
 8003b0a:	f006 fbd3 	bl	800a2b4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	80fb      	strh	r3, [r7, #6]
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f1      	bne.n	8003afe <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8003b1a:	88bb      	ldrh	r3, [r7, #4]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	80bb      	strh	r3, [r7, #4]
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e8      	bne.n	8003af8 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8003b26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8003b2e:	f7ff fc1f 	bl	8003370 <ST7735_Unselect>
 8003b32:	e007      	b.n	8003b44 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8003b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d103      	bne.n	8003b44 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8003b3c:	f7ff fc30 	bl	80033a0 <ST7735_Unselect1>
 8003b40:	e000      	b.n	8003b44 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003b42:	bf00      	nop
	}
}
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	58021800 	.word	0x58021800
 8003b50:	2400025c 	.word	0x2400025c

08003b54 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	2100      	movs	r1, #0
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7ff fe81 	bl	8003870 <ST7735_FillRectangle>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af02      	add	r7, sp, #8
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	2100      	movs	r1, #0
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7ff fee4 	bl	8003958 <ST7735_FillRectangle1>
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_MspInit+0x30>)
 8003ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba4:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_MspInit+0x30>)
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_MspInit+0x30>)
 8003bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	58024400 	.word	0x58024400

08003bcc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08e      	sub	sp, #56	; 0x38
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a59      	ldr	r2, [pc, #356]	; (8003d50 <HAL_ETH_MspInit+0x184>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f040 80ab 	bne.w	8003d46 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003bf0:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003c00:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c14:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003c2c:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c32:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003c3c:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4a:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c50:	4a40      	ldr	r2, [pc, #256]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	4b3a      	ldr	r3, [pc, #232]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c6e:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c8c:	4a31      	ldr	r2, [pc, #196]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003caa:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_ETH_MspInit+0x188>)
 8003cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003cc2:	2332      	movs	r3, #50	; 0x32
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cd2:	230b      	movs	r3, #11
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	481e      	ldr	r0, [pc, #120]	; (8003d58 <HAL_ETH_MspInit+0x18c>)
 8003cde:	f003 fae5 	bl	80072ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003ce2:	2386      	movs	r3, #134	; 0x86
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cf2:	230b      	movs	r3, #11
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4817      	ldr	r0, [pc, #92]	; (8003d5c <HAL_ETH_MspInit+0x190>)
 8003cfe:	f003 fad5 	bl	80072ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d14:	230b      	movs	r3, #11
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4810      	ldr	r0, [pc, #64]	; (8003d60 <HAL_ETH_MspInit+0x194>)
 8003d20:	f003 fac4 	bl	80072ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003d24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d36:	230b      	movs	r3, #11
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4808      	ldr	r0, [pc, #32]	; (8003d64 <HAL_ETH_MspInit+0x198>)
 8003d42:	f003 fab3 	bl	80072ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003d46:	bf00      	nop
 8003d48:	3738      	adds	r7, #56	; 0x38
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40028000 	.word	0x40028000
 8003d54:	58024400 	.word	0x58024400
 8003d58:	58020800 	.word	0x58020800
 8003d5c:	58020000 	.word	0x58020000
 8003d60:	58020400 	.word	0x58020400
 8003d64:	58021800 	.word	0x58021800

08003d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_SPI_MspInit+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d14d      	bne.n	8003e26 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dae:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_SPI_MspInit+0xcc>)
 8003dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003de4:	2304      	movs	r3, #4
 8003de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dec:	2302      	movs	r3, #2
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003df4:	2307      	movs	r3, #7
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480e      	ldr	r0, [pc, #56]	; (8003e38 <HAL_SPI_MspInit+0xd0>)
 8003e00:	f003 fa54 	bl	80072ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e16:	2306      	movs	r3, #6
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4806      	ldr	r0, [pc, #24]	; (8003e3c <HAL_SPI_MspInit+0xd4>)
 8003e22:	f003 fa43 	bl	80072ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003e26:	bf00      	nop
 8003e28:	3728      	adds	r7, #40	; 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40003c00 	.word	0x40003c00
 8003e34:	58024400 	.word	0x58024400
 8003e38:	58020400 	.word	0x58020400
 8003e3c:	58020800 	.word	0x58020800

08003e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_TIM_Base_MspInit+0x48>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d116      	bne.n	8003e80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_TIM_Base_MspInit+0x4c>)
 8003e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_TIM_Base_MspInit+0x4c>)
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_TIM_Base_MspInit+0x4c>)
 8003e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2100      	movs	r1, #0
 8003e74:	2037      	movs	r0, #55	; 0x37
 8003e76:	f000 fb9a 	bl	80045ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e7a:	2037      	movs	r0, #55	; 0x37
 8003e7c:	f000 fbb1 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40001400 	.word	0x40001400
 8003e8c:	58024400 	.word	0x58024400

08003e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0b8      	sub	sp, #224	; 0xe0
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	22bc      	movs	r2, #188	; 0xbc
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f009 f88d 	bl	800cfd0 <memset>
  if(huart->Instance==USART3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_UART_MspInit+0x188>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 80a6 	bne.w	800400e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f004 fd81 	bl	80089d8 <HAL_RCCEx_PeriphCLKConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003edc:	f7ff fa36 	bl	800334c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ee0:	4b4e      	ldr	r3, [pc, #312]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f04:	4a45      	ldr	r2, [pc, #276]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_UART_MspInit+0x18c>)
 8003f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f36:	2307      	movs	r3, #7
 8003f38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f40:	4619      	mov	r1, r3
 8003f42:	4837      	ldr	r0, [pc, #220]	; (8004020 <HAL_UART_MspInit+0x190>)
 8003f44:	f003 f9b2 	bl	80072ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f4a:	4a37      	ldr	r2, [pc, #220]	; (8004028 <HAL_UART_MspInit+0x198>)
 8003f4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003f4e:	4b35      	ldr	r3, [pc, #212]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f50:	222d      	movs	r2, #45	; 0x2d
 8003f52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f54:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f5a:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f68:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f82:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f88:	4826      	ldr	r0, [pc, #152]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f8a:	f000 fb45 	bl	8004618 <HAL_DMA_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003f94:	f7ff f9da 	bl	800334c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003f9e:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_UART_MspInit+0x194>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_UART_MspInit+0x1a0>)
 8003fa8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fac:	222e      	movs	r2, #46	; 0x2e
 8003fae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fca:	4b18      	ldr	r3, [pc, #96]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003fd0:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003fe2:	4812      	ldr	r0, [pc, #72]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003fe4:	f000 fb18 	bl	8004618 <HAL_DMA_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003fee:	f7ff f9ad 	bl	800334c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a0d      	ldr	r2, [pc, #52]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003ff6:	679a      	str	r2, [r3, #120]	; 0x78
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_UART_MspInit+0x19c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	2027      	movs	r0, #39	; 0x27
 8004004:	f000 fad3 	bl	80045ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004008:	2027      	movs	r0, #39	; 0x27
 800400a:	f000 faea 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800400e:	bf00      	nop
 8004010:	37e0      	adds	r7, #224	; 0xe0
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40004800 	.word	0x40004800
 800401c:	58024400 	.word	0x58024400
 8004020:	58020c00 	.word	0x58020c00
 8004024:	240003c0 	.word	0x240003c0
 8004028:	40020028 	.word	0x40020028
 800402c:	24000438 	.word	0x24000438
 8004030:	40020070 	.word	0x40020070

08004034 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <HAL_PCD_MspInit+0xa8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13d      	bne.n	80040d2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004056:	f003 fcf5 	bl	8007a44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 800405c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800406a:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 800406c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8004078:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800407c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800408a:	230a      	movs	r3, #10
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	f107 0314 	add.w	r3, r7, #20
 8004092:	4619      	mov	r1, r3
 8004094:	4813      	ldr	r0, [pc, #76]	; (80040e4 <HAL_PCD_MspInit+0xb0>)
 8004096:	f003 f909 	bl	80072ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800409a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4619      	mov	r1, r3
 80040ae:	480d      	ldr	r0, [pc, #52]	; (80040e4 <HAL_PCD_MspInit+0xb0>)
 80040b0:	f003 f8fc 	bl	80072ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 80040b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 80040bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_PCD_MspInit+0xac>)
 80040c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40080000 	.word	0x40080000
 80040e0:	58024400 	.word	0x58024400
 80040e4:	58020000 	.word	0x58020000

080040e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040ec:	e7fe      	b.n	80040ec <NMI_Handler+0x4>

080040ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f2:	e7fe      	b.n	80040f2 <HardFault_Handler+0x4>

080040f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f8:	e7fe      	b.n	80040f8 <MemManage_Handler+0x4>

080040fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040fe:	e7fe      	b.n	80040fe <BusFault_Handler+0x4>

08004100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <UsageFault_Handler+0x4>

08004106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004134:	f000 f8fc 	bl	8004330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}

0800413c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <DMA1_Stream1_IRQHandler+0x10>)
 8004142:	f001 fb29 	bl	8005798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	240003c0 	.word	0x240003c0

08004150 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <DMA1_Stream4_IRQHandler+0x10>)
 8004156:	f001 fb1f 	bl	8005798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	24000438 	.word	0x24000438

08004164 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <USART3_IRQHandler+0x10>)
 800416a:	f006 ff59 	bl	800b020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	24000330 	.word	0x24000330

08004178 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <TIM7_IRQHandler+0x10>)
 800417e:	f006 fc72 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	240002e4 	.word	0x240002e4

0800418c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004194:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <_sbrk+0x5c>)
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <_sbrk+0x60>)
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <_sbrk+0x64>)
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <_sbrk+0x68>)
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <_sbrk+0x64>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d207      	bcs.n	80041cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041bc:	f008 fede 	bl	800cf7c <__errno>
 80041c0:	4603      	mov	r3, r0
 80041c2:	220c      	movs	r2, #12
 80041c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	e009      	b.n	80041e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <_sbrk+0x64>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <_sbrk+0x64>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <_sbrk+0x64>)
 80041dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	24080000 	.word	0x24080000
 80041ec:	00000400 	.word	0x00000400
 80041f0:	24000ea8 	.word	0x24000ea8
 80041f4:	24000ec0 	.word	0x24000ec0

080041f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80041f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041fc:	f7fe fc0e 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004200:	480c      	ldr	r0, [pc, #48]	; (8004234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004202:	490d      	ldr	r1, [pc, #52]	; (8004238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004208:	e002      	b.n	8004210 <LoopCopyDataInit>

0800420a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800420a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800420c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420e:	3304      	adds	r3, #4

08004210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004214:	d3f9      	bcc.n	800420a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800421c:	e001      	b.n	8004222 <LoopFillZerobss>

0800421e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004220:	3204      	adds	r2, #4

08004222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004224:	d3fb      	bcc.n	800421e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004226:	f008 feaf 	bl	800cf88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800422a:	f7fe fc8d 	bl	8002b48 <main>
  bx  lr
 800422e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004230:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004234:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004238:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800423c:	0800eff8 	.word	0x0800eff8
  ldr r2, =_sbss
 8004240:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8004244:	24000ec0 	.word	0x24000ec0

08004248 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004248:	e7fe      	b.n	8004248 <ADC3_IRQHandler>
	...

0800424c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004252:	2003      	movs	r0, #3
 8004254:	f000 f9a0 	bl	8004598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004258:	f004 f9e8 	bl	800862c <HAL_RCC_GetSysClockFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_Init+0x68>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	4913      	ldr	r1, [pc, #76]	; (80042b8 <HAL_Init+0x6c>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <HAL_Init+0x68>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <HAL_Init+0x6c>)
 8004280:	5cd3      	ldrb	r3, [r2, r3]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
 800428c:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <HAL_Init+0x70>)
 800428e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004290:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <HAL_Init+0x74>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004296:	2000      	movs	r0, #0
 8004298:	f000 f814 	bl	80042c4 <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e002      	b.n	80042ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042a6:	f7ff fc77 	bl	8003b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	58024400 	.word	0x58024400
 80042b8:	0800da34 	.word	0x0800da34
 80042bc:	24000008 	.word	0x24000008
 80042c0:	24000004 	.word	0x24000004

080042c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_InitTick+0x60>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e021      	b.n	800431c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_InitTick+0x64>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_InitTick+0x60>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f985 	bl	80045fe <HAL_SYSTICK_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00e      	b.n	800431c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d80a      	bhi.n	800431a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f000 f94f 	bl	80045ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <HAL_InitTick+0x68>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	24000020 	.word	0x24000020
 8004328:	24000004 	.word	0x24000004
 800432c:	2400001c 	.word	0x2400001c

08004330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_IncTick+0x20>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_IncTick+0x24>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_IncTick+0x24>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	24000020 	.word	0x24000020
 8004354:	24000eac 	.word	0x24000eac

08004358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return uwTick;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_GetTick+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	24000eac 	.word	0x24000eac

08004370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7ff ffee 	bl	8004358 <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d005      	beq.n	8004396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_Delay+0x44>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004396:	bf00      	nop
 8004398:	f7ff ffde 	bl	8004358 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d8f7      	bhi.n	8004398 <HAL_Delay+0x28>
  {
  }
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	24000020 	.word	0x24000020

080043b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_GetREVID+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0c1b      	lsrs	r3, r3, #16
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	5c001000 	.word	0x5c001000

080043d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80043e0:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	58000400 	.word	0x58000400

080043f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <__NVIC_SetPriorityGrouping+0x40>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <__NVIC_SetPriorityGrouping+0x44>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004426:	4a04      	ldr	r2, [pc, #16]	; (8004438 <__NVIC_SetPriorityGrouping+0x40>)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	60d3      	str	r3, [r2, #12]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00
 800443c:	05fa0000 	.word	0x05fa0000

08004440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <__NVIC_GetPriorityGrouping+0x18>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	f003 0307 	and.w	r3, r3, #7
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800446a:	2b00      	cmp	r3, #0
 800446c:	db0b      	blt.n	8004486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4907      	ldr	r1, [pc, #28]	; (8004494 <__NVIC_EnableIRQ+0x38>)
 8004476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2001      	movs	r0, #1
 800447e:	fa00 f202 	lsl.w	r2, r0, r2
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000e100 	.word	0xe000e100

08004498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	db0a      	blt.n	80044c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	490c      	ldr	r1, [pc, #48]	; (80044e4 <__NVIC_SetPriority+0x4c>)
 80044b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b6:	0112      	lsls	r2, r2, #4
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	440b      	add	r3, r1
 80044bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c0:	e00a      	b.n	80044d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	4908      	ldr	r1, [pc, #32]	; (80044e8 <__NVIC_SetPriority+0x50>)
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	3b04      	subs	r3, #4
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	440b      	add	r3, r1
 80044d6:	761a      	strb	r2, [r3, #24]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000e100 	.word	0xe000e100
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f1c3 0307 	rsb	r3, r3, #7
 8004506:	2b04      	cmp	r3, #4
 8004508:	bf28      	it	cs
 800450a:	2304      	movcs	r3, #4
 800450c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3304      	adds	r3, #4
 8004512:	2b06      	cmp	r3, #6
 8004514:	d902      	bls.n	800451c <NVIC_EncodePriority+0x30>
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3b03      	subs	r3, #3
 800451a:	e000      	b.n	800451e <NVIC_EncodePriority+0x32>
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	401a      	ands	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004534:	f04f 31ff 	mov.w	r1, #4294967295
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	43d9      	mvns	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004544:	4313      	orrs	r3, r2
         );
}
 8004546:	4618      	mov	r0, r3
 8004548:	3724      	adds	r7, #36	; 0x24
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3b01      	subs	r3, #1
 8004560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004564:	d301      	bcc.n	800456a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004566:	2301      	movs	r3, #1
 8004568:	e00f      	b.n	800458a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <SysTick_Config+0x40>)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004572:	210f      	movs	r1, #15
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	f7ff ff8e 	bl	8004498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <SysTick_Config+0x40>)
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <SysTick_Config+0x40>)
 8004584:	2207      	movs	r2, #7
 8004586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	e000e010 	.word	0xe000e010

08004598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff29 	bl	80043f8 <__NVIC_SetPriorityGrouping>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045bc:	f7ff ff40 	bl	8004440 <__NVIC_GetPriorityGrouping>
 80045c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff ff90 	bl	80044ec <NVIC_EncodePriority>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff5f 	bl	8004498 <__NVIC_SetPriority>
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff33 	bl	800445c <__NVIC_EnableIRQ>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ffa4 	bl	8004554 <SysTick_Config>
 800460c:	4603      	mov	r3, r0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff fe9a 	bl	8004358 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e316      	b.n	8004c5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a66      	ldr	r2, [pc, #408]	; (80047d0 <HAL_DMA_Init+0x1b8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d04a      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a65      	ldr	r2, [pc, #404]	; (80047d4 <HAL_DMA_Init+0x1bc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d045      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a63      	ldr	r2, [pc, #396]	; (80047d8 <HAL_DMA_Init+0x1c0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d040      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a62      	ldr	r2, [pc, #392]	; (80047dc <HAL_DMA_Init+0x1c4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d03b      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a60      	ldr	r2, [pc, #384]	; (80047e0 <HAL_DMA_Init+0x1c8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d036      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5f      	ldr	r2, [pc, #380]	; (80047e4 <HAL_DMA_Init+0x1cc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d031      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <HAL_DMA_Init+0x1d0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d02c      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5c      	ldr	r2, [pc, #368]	; (80047ec <HAL_DMA_Init+0x1d4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d027      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5a      	ldr	r2, [pc, #360]	; (80047f0 <HAL_DMA_Init+0x1d8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a59      	ldr	r2, [pc, #356]	; (80047f4 <HAL_DMA_Init+0x1dc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d01d      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a57      	ldr	r2, [pc, #348]	; (80047f8 <HAL_DMA_Init+0x1e0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a56      	ldr	r2, [pc, #344]	; (80047fc <HAL_DMA_Init+0x1e4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a54      	ldr	r2, [pc, #336]	; (8004800 <HAL_DMA_Init+0x1e8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a53      	ldr	r2, [pc, #332]	; (8004804 <HAL_DMA_Init+0x1ec>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a51      	ldr	r2, [pc, #324]	; (8004808 <HAL_DMA_Init+0x1f0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_DMA_Init+0xb8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a50      	ldr	r2, [pc, #320]	; (800480c <HAL_DMA_Init+0x1f4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_Init+0xbc>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <HAL_DMA_Init+0xbe>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 813b 	beq.w	8004952 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <HAL_DMA_Init+0x1b8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d04a      	beq.n	800478c <HAL_DMA_Init+0x174>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a36      	ldr	r2, [pc, #216]	; (80047d4 <HAL_DMA_Init+0x1bc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d045      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <HAL_DMA_Init+0x1c0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d040      	beq.n	800478c <HAL_DMA_Init+0x174>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	; (80047dc <HAL_DMA_Init+0x1c4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d03b      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a31      	ldr	r2, [pc, #196]	; (80047e0 <HAL_DMA_Init+0x1c8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d036      	beq.n	800478c <HAL_DMA_Init+0x174>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a30      	ldr	r2, [pc, #192]	; (80047e4 <HAL_DMA_Init+0x1cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d031      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <HAL_DMA_Init+0x1d0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02c      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <HAL_DMA_Init+0x1d4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d027      	beq.n	800478c <HAL_DMA_Init+0x174>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2b      	ldr	r2, [pc, #172]	; (80047f0 <HAL_DMA_Init+0x1d8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <HAL_DMA_Init+0x1dc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01d      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <HAL_DMA_Init+0x1e0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_DMA_Init+0x174>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a27      	ldr	r2, [pc, #156]	; (80047fc <HAL_DMA_Init+0x1e4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <HAL_DMA_Init+0x1e8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_DMA_Init+0x174>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a24      	ldr	r2, [pc, #144]	; (8004804 <HAL_DMA_Init+0x1ec>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	; (8004808 <HAL_DMA_Init+0x1f0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_DMA_Init+0x174>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a21      	ldr	r2, [pc, #132]	; (800480c <HAL_DMA_Init+0x1f4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d108      	bne.n	800479e <HAL_DMA_Init+0x186>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e007      	b.n	80047ae <HAL_DMA_Init+0x196>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047ae:	e02f      	b.n	8004810 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047b0:	f7ff fdd2 	bl	8004358 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d928      	bls.n	8004810 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2203      	movs	r2, #3
 80047c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e246      	b.n	8004c5e <HAL_DMA_Init+0x646>
 80047d0:	40020010 	.word	0x40020010
 80047d4:	40020028 	.word	0x40020028
 80047d8:	40020040 	.word	0x40020040
 80047dc:	40020058 	.word	0x40020058
 80047e0:	40020070 	.word	0x40020070
 80047e4:	40020088 	.word	0x40020088
 80047e8:	400200a0 	.word	0x400200a0
 80047ec:	400200b8 	.word	0x400200b8
 80047f0:	40020410 	.word	0x40020410
 80047f4:	40020428 	.word	0x40020428
 80047f8:	40020440 	.word	0x40020440
 80047fc:	40020458 	.word	0x40020458
 8004800:	40020470 	.word	0x40020470
 8004804:	40020488 	.word	0x40020488
 8004808:	400204a0 	.word	0x400204a0
 800480c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1c8      	bne.n	80047b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <HAL_DMA_Init+0x420>)
 800482a:	4013      	ands	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004836:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004842:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b04      	cmp	r3, #4
 8004862:	d107      	bne.n	8004874 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	4313      	orrs	r3, r2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <HAL_DMA_Init+0x424>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b71      	ldr	r3, [pc, #452]	; (8004a40 <HAL_DMA_Init+0x428>)
 800487a:	4013      	ands	r3, r2
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004880:	d328      	bcc.n	80048d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b28      	cmp	r3, #40	; 0x28
 8004888:	d903      	bls.n	8004892 <HAL_DMA_Init+0x27a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b2e      	cmp	r3, #46	; 0x2e
 8004890:	d917      	bls.n	80048c2 <HAL_DMA_Init+0x2aa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b3e      	cmp	r3, #62	; 0x3e
 8004898:	d903      	bls.n	80048a2 <HAL_DMA_Init+0x28a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b42      	cmp	r3, #66	; 0x42
 80048a0:	d90f      	bls.n	80048c2 <HAL_DMA_Init+0x2aa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b46      	cmp	r3, #70	; 0x46
 80048a8:	d903      	bls.n	80048b2 <HAL_DMA_Init+0x29a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b48      	cmp	r3, #72	; 0x48
 80048b0:	d907      	bls.n	80048c2 <HAL_DMA_Init+0x2aa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b4e      	cmp	r3, #78	; 0x4e
 80048b8:	d905      	bls.n	80048c6 <HAL_DMA_Init+0x2ae>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b52      	cmp	r3, #82	; 0x52
 80048c0:	d801      	bhi.n	80048c6 <HAL_DMA_Init+0x2ae>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_DMA_Init+0x2b0>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d117      	bne.n	800492e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 ff1d 	bl	8006750 <DMA_CheckFifoParam>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e197      	b.n	8004c5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f001 fe58 	bl	80065ec <DMA_CalcBaseAndBitshift>
 800493c:	4603      	mov	r3, r0
 800493e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	223f      	movs	r2, #63	; 0x3f
 800494a:	409a      	lsls	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	e0cd      	b.n	8004aee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <HAL_DMA_Init+0x42c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <HAL_DMA_Init+0x430>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <HAL_DMA_Init+0x434>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a36      	ldr	r2, [pc, #216]	; (8004a50 <HAL_DMA_Init+0x438>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a35      	ldr	r2, [pc, #212]	; (8004a54 <HAL_DMA_Init+0x43c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <HAL_DMA_Init+0x440>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <HAL_DMA_Init+0x444>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_Init+0x38a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <HAL_DMA_Init+0x448>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_DMA_Init+0x38e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_DMA_Init+0x390>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8097 	beq.w	8004adc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <HAL_DMA_Init+0x42c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d021      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <HAL_DMA_Init+0x430>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01c      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <HAL_DMA_Init+0x434>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d017      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_DMA_Init+0x438>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d012      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <HAL_DMA_Init+0x43c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00d      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_DMA_Init+0x440>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d008      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_DMA_Init+0x444>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <HAL_DMA_Init+0x3e4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_DMA_Init+0x448>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_DMA_Init+0x44c>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d020      	beq.n	8004a68 <HAL_DMA_Init+0x450>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	d102      	bne.n	8004a34 <HAL_DMA_Init+0x41c>
 8004a2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a32:	e01a      	b.n	8004a6a <HAL_DMA_Init+0x452>
 8004a34:	2300      	movs	r3, #0
 8004a36:	e018      	b.n	8004a6a <HAL_DMA_Init+0x452>
 8004a38:	fe10803f 	.word	0xfe10803f
 8004a3c:	5c001000 	.word	0x5c001000
 8004a40:	ffff0000 	.word	0xffff0000
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494
 8004a64:	fffe000f 	.word	0xfffe000f
 8004a68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68d2      	ldr	r2, [r2, #12]
 8004a6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b6e      	ldr	r3, [pc, #440]	; (8004c68 <HAL_DMA_Init+0x650>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a6e      	ldr	r2, [pc, #440]	; (8004c6c <HAL_DMA_Init+0x654>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	009a      	lsls	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 fd93 	bl	80065ec <DMA_CalcBaseAndBitshift>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	e008      	b.n	8004aee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0b7      	b.n	8004c5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5f      	ldr	r2, [pc, #380]	; (8004c70 <HAL_DMA_Init+0x658>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d072      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5d      	ldr	r2, [pc, #372]	; (8004c74 <HAL_DMA_Init+0x65c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d06d      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5c      	ldr	r2, [pc, #368]	; (8004c78 <HAL_DMA_Init+0x660>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d068      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5a      	ldr	r2, [pc, #360]	; (8004c7c <HAL_DMA_Init+0x664>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d063      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a59      	ldr	r2, [pc, #356]	; (8004c80 <HAL_DMA_Init+0x668>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d05e      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a57      	ldr	r2, [pc, #348]	; (8004c84 <HAL_DMA_Init+0x66c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d059      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a56      	ldr	r2, [pc, #344]	; (8004c88 <HAL_DMA_Init+0x670>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d054      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <HAL_DMA_Init+0x674>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d04f      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a53      	ldr	r2, [pc, #332]	; (8004c90 <HAL_DMA_Init+0x678>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a51      	ldr	r2, [pc, #324]	; (8004c94 <HAL_DMA_Init+0x67c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a50      	ldr	r2, [pc, #320]	; (8004c98 <HAL_DMA_Init+0x680>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a4e      	ldr	r2, [pc, #312]	; (8004c9c <HAL_DMA_Init+0x684>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ca0 <HAL_DMA_Init+0x688>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_DMA_Init+0x68c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4a      	ldr	r2, [pc, #296]	; (8004ca8 <HAL_DMA_Init+0x690>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a48      	ldr	r2, [pc, #288]	; (8004cac <HAL_DMA_Init+0x694>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a47      	ldr	r2, [pc, #284]	; (8004cb0 <HAL_DMA_Init+0x698>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a45      	ldr	r2, [pc, #276]	; (8004cb4 <HAL_DMA_Init+0x69c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <HAL_DMA_Init+0x6a0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a42      	ldr	r2, [pc, #264]	; (8004cbc <HAL_DMA_Init+0x6a4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a41      	ldr	r2, [pc, #260]	; (8004cc0 <HAL_DMA_Init+0x6a8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a3f      	ldr	r2, [pc, #252]	; (8004cc4 <HAL_DMA_Init+0x6ac>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <HAL_DMA_Init+0x6b0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_Init+0x5c6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a3c      	ldr	r2, [pc, #240]	; (8004ccc <HAL_DMA_Init+0x6b4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_DMA_Init+0x5ca>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_DMA_Init+0x5cc>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d032      	beq.n	8004c4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 fe2d 	bl	8006848 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d102      	bne.n	8004bfc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <HAL_DMA_Init+0x624>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d80c      	bhi.n	8004c3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 feaa 	bl	800697c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	e008      	b.n	8004c4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	a7fdabf8 	.word	0xa7fdabf8
 8004c6c:	cccccccd 	.word	0xcccccccd
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020040 	.word	0x40020040
 8004c7c:	40020058 	.word	0x40020058
 8004c80:	40020070 	.word	0x40020070
 8004c84:	40020088 	.word	0x40020088
 8004c88:	400200a0 	.word	0x400200a0
 8004c8c:	400200b8 	.word	0x400200b8
 8004c90:	40020410 	.word	0x40020410
 8004c94:	40020428 	.word	0x40020428
 8004c98:	40020440 	.word	0x40020440
 8004c9c:	40020458 	.word	0x40020458
 8004ca0:	40020470 	.word	0x40020470
 8004ca4:	40020488 	.word	0x40020488
 8004ca8:	400204a0 	.word	0x400204a0
 8004cac:	400204b8 	.word	0x400204b8
 8004cb0:	58025408 	.word	0x58025408
 8004cb4:	5802541c 	.word	0x5802541c
 8004cb8:	58025430 	.word	0x58025430
 8004cbc:	58025444 	.word	0x58025444
 8004cc0:	58025458 	.word	0x58025458
 8004cc4:	5802546c 	.word	0x5802546c
 8004cc8:	58025480 	.word	0x58025480
 8004ccc:	58025494 	.word	0x58025494

08004cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004cd8:	f7ff fb3e 	bl	8004358 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e2dc      	b.n	80052a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d008      	beq.n	8004d06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e2cd      	b.n	80052a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a76      	ldr	r2, [pc, #472]	; (8004ee4 <HAL_DMA_Abort+0x214>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d04a      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a74      	ldr	r2, [pc, #464]	; (8004ee8 <HAL_DMA_Abort+0x218>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d045      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a73      	ldr	r2, [pc, #460]	; (8004eec <HAL_DMA_Abort+0x21c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d040      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a71      	ldr	r2, [pc, #452]	; (8004ef0 <HAL_DMA_Abort+0x220>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d03b      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a70      	ldr	r2, [pc, #448]	; (8004ef4 <HAL_DMA_Abort+0x224>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d036      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a6e      	ldr	r2, [pc, #440]	; (8004ef8 <HAL_DMA_Abort+0x228>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d031      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6d      	ldr	r2, [pc, #436]	; (8004efc <HAL_DMA_Abort+0x22c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d02c      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6b      	ldr	r2, [pc, #428]	; (8004f00 <HAL_DMA_Abort+0x230>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d027      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <HAL_DMA_Abort+0x234>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a68      	ldr	r2, [pc, #416]	; (8004f08 <HAL_DMA_Abort+0x238>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a67      	ldr	r2, [pc, #412]	; (8004f0c <HAL_DMA_Abort+0x23c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a65      	ldr	r2, [pc, #404]	; (8004f10 <HAL_DMA_Abort+0x240>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a64      	ldr	r2, [pc, #400]	; (8004f14 <HAL_DMA_Abort+0x244>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a62      	ldr	r2, [pc, #392]	; (8004f18 <HAL_DMA_Abort+0x248>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a61      	ldr	r2, [pc, #388]	; (8004f1c <HAL_DMA_Abort+0x24c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_Abort+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5f      	ldr	r2, [pc, #380]	; (8004f20 <HAL_DMA_Abort+0x250>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_DMA_Abort+0xda>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_DMA_Abort+0xdc>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 021e 	bic.w	r2, r2, #30
 8004dbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e00a      	b.n	8004dee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 020e 	bic.w	r2, r2, #14
 8004de6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <HAL_DMA_Abort+0x214>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d072      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_DMA_Abort+0x218>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d06d      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_DMA_Abort+0x21c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <HAL_DMA_Abort+0x220>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d063      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <HAL_DMA_Abort+0x224>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05e      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <HAL_DMA_Abort+0x228>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d059      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_DMA_Abort+0x22c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d054      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <HAL_DMA_Abort+0x230>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04f      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_DMA_Abort+0x234>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <HAL_DMA_Abort+0x238>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_DMA_Abort+0x23c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_DMA_Abort+0x240>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_DMA_Abort+0x244>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_DMA_Abort+0x248>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_DMA_Abort+0x24c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <HAL_DMA_Abort+0x250>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_DMA_Abort+0x254>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_DMA_Abort+0x258>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_DMA_Abort+0x25c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_DMA_Abort+0x260>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_DMA_Abort+0x264>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_DMA_Abort+0x268>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_DMA_Abort+0x26c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Abort+0x20e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_DMA_Abort+0x270>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d132      	bne.n	8004f44 <HAL_DMA_Abort+0x274>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e031      	b.n	8004f46 <HAL_DMA_Abort+0x276>
 8004ee2:	bf00      	nop
 8004ee4:	40020010 	.word	0x40020010
 8004ee8:	40020028 	.word	0x40020028
 8004eec:	40020040 	.word	0x40020040
 8004ef0:	40020058 	.word	0x40020058
 8004ef4:	40020070 	.word	0x40020070
 8004ef8:	40020088 	.word	0x40020088
 8004efc:	400200a0 	.word	0x400200a0
 8004f00:	400200b8 	.word	0x400200b8
 8004f04:	40020410 	.word	0x40020410
 8004f08:	40020428 	.word	0x40020428
 8004f0c:	40020440 	.word	0x40020440
 8004f10:	40020458 	.word	0x40020458
 8004f14:	40020470 	.word	0x40020470
 8004f18:	40020488 	.word	0x40020488
 8004f1c:	400204a0 	.word	0x400204a0
 8004f20:	400204b8 	.word	0x400204b8
 8004f24:	58025408 	.word	0x58025408
 8004f28:	5802541c 	.word	0x5802541c
 8004f2c:	58025430 	.word	0x58025430
 8004f30:	58025444 	.word	0x58025444
 8004f34:	58025458 	.word	0x58025458
 8004f38:	5802546c 	.word	0x5802546c
 8004f3c:	58025480 	.word	0x58025480
 8004f40:	58025494 	.word	0x58025494
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <HAL_DMA_Abort+0x444>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d04a      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a6b      	ldr	r2, [pc, #428]	; (8005118 <HAL_DMA_Abort+0x448>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d045      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6a      	ldr	r2, [pc, #424]	; (800511c <HAL_DMA_Abort+0x44c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d040      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a68      	ldr	r2, [pc, #416]	; (8005120 <HAL_DMA_Abort+0x450>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d03b      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_DMA_Abort+0x454>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d036      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a65      	ldr	r2, [pc, #404]	; (8005128 <HAL_DMA_Abort+0x458>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d031      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a64      	ldr	r2, [pc, #400]	; (800512c <HAL_DMA_Abort+0x45c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d02c      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a62      	ldr	r2, [pc, #392]	; (8005130 <HAL_DMA_Abort+0x460>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d027      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a61      	ldr	r2, [pc, #388]	; (8005134 <HAL_DMA_Abort+0x464>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d022      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <HAL_DMA_Abort+0x468>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01d      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5e      	ldr	r2, [pc, #376]	; (800513c <HAL_DMA_Abort+0x46c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5c      	ldr	r2, [pc, #368]	; (8005140 <HAL_DMA_Abort+0x470>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5b      	ldr	r2, [pc, #364]	; (8005144 <HAL_DMA_Abort+0x474>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a59      	ldr	r2, [pc, #356]	; (8005148 <HAL_DMA_Abort+0x478>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a58      	ldr	r2, [pc, #352]	; (800514c <HAL_DMA_Abort+0x47c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_DMA_Abort+0x32a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_DMA_Abort+0x480>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d108      	bne.n	800500c <HAL_DMA_Abort+0x33c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e007      	b.n	800501c <HAL_DMA_Abort+0x34c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800501c:	e013      	b.n	8005046 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800501e:	f7ff f99b 	bl	8004358 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b05      	cmp	r3, #5
 800502a:	d90c      	bls.n	8005046 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2203      	movs	r2, #3
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e12d      	b.n	80052a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2f      	ldr	r2, [pc, #188]	; (8005114 <HAL_DMA_Abort+0x444>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d04a      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a2d      	ldr	r2, [pc, #180]	; (8005118 <HAL_DMA_Abort+0x448>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d045      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2c      	ldr	r2, [pc, #176]	; (800511c <HAL_DMA_Abort+0x44c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d040      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_DMA_Abort+0x450>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d03b      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_DMA_Abort+0x454>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d036      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a27      	ldr	r2, [pc, #156]	; (8005128 <HAL_DMA_Abort+0x458>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d031      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_DMA_Abort+0x45c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d02c      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_DMA_Abort+0x460>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d027      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_DMA_Abort+0x464>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_DMA_Abort+0x468>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_DMA_Abort+0x46c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_DMA_Abort+0x470>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_DMA_Abort+0x474>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_DMA_Abort+0x478>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1a      	ldr	r2, [pc, #104]	; (800514c <HAL_DMA_Abort+0x47c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMA_Abort+0x422>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_DMA_Abort+0x480>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Abort+0x426>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_DMA_Abort+0x428>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02b      	beq.n	8005154 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	223f      	movs	r2, #63	; 0x3f
 800510c:	409a      	lsls	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	609a      	str	r2, [r3, #8]
 8005112:	e02a      	b.n	800516a <HAL_DMA_Abort+0x49a>
 8005114:	40020010 	.word	0x40020010
 8005118:	40020028 	.word	0x40020028
 800511c:	40020040 	.word	0x40020040
 8005120:	40020058 	.word	0x40020058
 8005124:	40020070 	.word	0x40020070
 8005128:	40020088 	.word	0x40020088
 800512c:	400200a0 	.word	0x400200a0
 8005130:	400200b8 	.word	0x400200b8
 8005134:	40020410 	.word	0x40020410
 8005138:	40020428 	.word	0x40020428
 800513c:	40020440 	.word	0x40020440
 8005140:	40020458 	.word	0x40020458
 8005144:	40020470 	.word	0x40020470
 8005148:	40020488 	.word	0x40020488
 800514c:	400204a0 	.word	0x400204a0
 8005150:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2201      	movs	r2, #1
 8005164:	409a      	lsls	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a4f      	ldr	r2, [pc, #316]	; (80052ac <HAL_DMA_Abort+0x5dc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d072      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4d      	ldr	r2, [pc, #308]	; (80052b0 <HAL_DMA_Abort+0x5e0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d06d      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4c      	ldr	r2, [pc, #304]	; (80052b4 <HAL_DMA_Abort+0x5e4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d068      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4a      	ldr	r2, [pc, #296]	; (80052b8 <HAL_DMA_Abort+0x5e8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d063      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a49      	ldr	r2, [pc, #292]	; (80052bc <HAL_DMA_Abort+0x5ec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d05e      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a47      	ldr	r2, [pc, #284]	; (80052c0 <HAL_DMA_Abort+0x5f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d059      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a46      	ldr	r2, [pc, #280]	; (80052c4 <HAL_DMA_Abort+0x5f4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d054      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a44      	ldr	r2, [pc, #272]	; (80052c8 <HAL_DMA_Abort+0x5f8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d04f      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a43      	ldr	r2, [pc, #268]	; (80052cc <HAL_DMA_Abort+0x5fc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d04a      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <HAL_DMA_Abort+0x600>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d045      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a40      	ldr	r2, [pc, #256]	; (80052d4 <HAL_DMA_Abort+0x604>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d040      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3e      	ldr	r2, [pc, #248]	; (80052d8 <HAL_DMA_Abort+0x608>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d03b      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a3d      	ldr	r2, [pc, #244]	; (80052dc <HAL_DMA_Abort+0x60c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d036      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <HAL_DMA_Abort+0x610>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d031      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3a      	ldr	r2, [pc, #232]	; (80052e4 <HAL_DMA_Abort+0x614>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d02c      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a38      	ldr	r2, [pc, #224]	; (80052e8 <HAL_DMA_Abort+0x618>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d027      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a37      	ldr	r2, [pc, #220]	; (80052ec <HAL_DMA_Abort+0x61c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d022      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <HAL_DMA_Abort+0x620>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <HAL_DMA_Abort+0x624>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d018      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a32      	ldr	r2, [pc, #200]	; (80052f8 <HAL_DMA_Abort+0x628>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_DMA_Abort+0x62c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <HAL_DMA_Abort+0x630>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <HAL_DMA_Abort+0x634>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_DMA_Abort+0x58a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <HAL_DMA_Abort+0x638>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_DMA_Abort+0x58e>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_DMA_Abort+0x590>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800526c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005284:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800528e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40020010 	.word	0x40020010
 80052b0:	40020028 	.word	0x40020028
 80052b4:	40020040 	.word	0x40020040
 80052b8:	40020058 	.word	0x40020058
 80052bc:	40020070 	.word	0x40020070
 80052c0:	40020088 	.word	0x40020088
 80052c4:	400200a0 	.word	0x400200a0
 80052c8:	400200b8 	.word	0x400200b8
 80052cc:	40020410 	.word	0x40020410
 80052d0:	40020428 	.word	0x40020428
 80052d4:	40020440 	.word	0x40020440
 80052d8:	40020458 	.word	0x40020458
 80052dc:	40020470 	.word	0x40020470
 80052e0:	40020488 	.word	0x40020488
 80052e4:	400204a0 	.word	0x400204a0
 80052e8:	400204b8 	.word	0x400204b8
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494

0800530c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e237      	b.n	800578e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d004      	beq.n	8005334 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e22c      	b.n	800578e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5c      	ldr	r2, [pc, #368]	; (80054ac <HAL_DMA_Abort_IT+0x1a0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d04a      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a5b      	ldr	r2, [pc, #364]	; (80054b0 <HAL_DMA_Abort_IT+0x1a4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d045      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a59      	ldr	r2, [pc, #356]	; (80054b4 <HAL_DMA_Abort_IT+0x1a8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d040      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a58      	ldr	r2, [pc, #352]	; (80054b8 <HAL_DMA_Abort_IT+0x1ac>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d03b      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a56      	ldr	r2, [pc, #344]	; (80054bc <HAL_DMA_Abort_IT+0x1b0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d036      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a55      	ldr	r2, [pc, #340]	; (80054c0 <HAL_DMA_Abort_IT+0x1b4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d031      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a53      	ldr	r2, [pc, #332]	; (80054c4 <HAL_DMA_Abort_IT+0x1b8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02c      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_DMA_Abort_IT+0x1bc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d027      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a50      	ldr	r2, [pc, #320]	; (80054cc <HAL_DMA_Abort_IT+0x1c0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a4f      	ldr	r2, [pc, #316]	; (80054d0 <HAL_DMA_Abort_IT+0x1c4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01d      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4d      	ldr	r2, [pc, #308]	; (80054d4 <HAL_DMA_Abort_IT+0x1c8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4c      	ldr	r2, [pc, #304]	; (80054d8 <HAL_DMA_Abort_IT+0x1cc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a4a      	ldr	r2, [pc, #296]	; (80054dc <HAL_DMA_Abort_IT+0x1d0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a49      	ldr	r2, [pc, #292]	; (80054e0 <HAL_DMA_Abort_IT+0x1d4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a47      	ldr	r2, [pc, #284]	; (80054e4 <HAL_DMA_Abort_IT+0x1d8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_DMA_Abort_IT+0xc8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a46      	ldr	r2, [pc, #280]	; (80054e8 <HAL_DMA_Abort_IT+0x1dc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Abort_IT+0xcc>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_DMA_Abort_IT+0xce>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8086 	beq.w	80054ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2204      	movs	r2, #4
 80053e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <HAL_DMA_Abort_IT+0x1a0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <HAL_DMA_Abort_IT+0x1a4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d045      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <HAL_DMA_Abort_IT+0x1a8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d040      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <HAL_DMA_Abort_IT+0x1ac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03b      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a29      	ldr	r2, [pc, #164]	; (80054bc <HAL_DMA_Abort_IT+0x1b0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d036      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <HAL_DMA_Abort_IT+0x1b4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d031      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <HAL_DMA_Abort_IT+0x1b8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02c      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_DMA_Abort_IT+0x1bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d027      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a23      	ldr	r2, [pc, #140]	; (80054cc <HAL_DMA_Abort_IT+0x1c0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_DMA_Abort_IT+0x1c4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <HAL_DMA_Abort_IT+0x1c8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_DMA_Abort_IT+0x1cc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_DMA_Abort_IT+0x1d0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_DMA_Abort_IT+0x1d4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <HAL_DMA_Abort_IT+0x1d8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_DMA_Abort_IT+0x17c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_DMA_Abort_IT+0x1dc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <HAL_DMA_Abort_IT+0x18e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e178      	b.n	800578c <HAL_DMA_Abort_IT+0x480>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e16f      	b.n	800578c <HAL_DMA_Abort_IT+0x480>
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 020e 	bic.w	r2, r2, #14
 80054fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6c      	ldr	r2, [pc, #432]	; (80056b4 <HAL_DMA_Abort_IT+0x3a8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04a      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6b      	ldr	r2, [pc, #428]	; (80056b8 <HAL_DMA_Abort_IT+0x3ac>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d045      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a69      	ldr	r2, [pc, #420]	; (80056bc <HAL_DMA_Abort_IT+0x3b0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d040      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a68      	ldr	r2, [pc, #416]	; (80056c0 <HAL_DMA_Abort_IT+0x3b4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d03b      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a66      	ldr	r2, [pc, #408]	; (80056c4 <HAL_DMA_Abort_IT+0x3b8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d036      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a65      	ldr	r2, [pc, #404]	; (80056c8 <HAL_DMA_Abort_IT+0x3bc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d031      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a63      	ldr	r2, [pc, #396]	; (80056cc <HAL_DMA_Abort_IT+0x3c0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02c      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a62      	ldr	r2, [pc, #392]	; (80056d0 <HAL_DMA_Abort_IT+0x3c4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d027      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a60      	ldr	r2, [pc, #384]	; (80056d4 <HAL_DMA_Abort_IT+0x3c8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a5f      	ldr	r2, [pc, #380]	; (80056d8 <HAL_DMA_Abort_IT+0x3cc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01d      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a5d      	ldr	r2, [pc, #372]	; (80056dc <HAL_DMA_Abort_IT+0x3d0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a5c      	ldr	r2, [pc, #368]	; (80056e0 <HAL_DMA_Abort_IT+0x3d4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a5a      	ldr	r2, [pc, #360]	; (80056e4 <HAL_DMA_Abort_IT+0x3d8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a59      	ldr	r2, [pc, #356]	; (80056e8 <HAL_DMA_Abort_IT+0x3dc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a57      	ldr	r2, [pc, #348]	; (80056ec <HAL_DMA_Abort_IT+0x3e0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_DMA_Abort_IT+0x290>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a56      	ldr	r2, [pc, #344]	; (80056f0 <HAL_DMA_Abort_IT+0x3e4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <HAL_DMA_Abort_IT+0x2a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e007      	b.n	80055be <HAL_DMA_Abort_IT+0x2b2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3c      	ldr	r2, [pc, #240]	; (80056b4 <HAL_DMA_Abort_IT+0x3a8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d072      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3a      	ldr	r2, [pc, #232]	; (80056b8 <HAL_DMA_Abort_IT+0x3ac>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d06d      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a39      	ldr	r2, [pc, #228]	; (80056bc <HAL_DMA_Abort_IT+0x3b0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d068      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a37      	ldr	r2, [pc, #220]	; (80056c0 <HAL_DMA_Abort_IT+0x3b4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d063      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a36      	ldr	r2, [pc, #216]	; (80056c4 <HAL_DMA_Abort_IT+0x3b8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d05e      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <HAL_DMA_Abort_IT+0x3bc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d059      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a33      	ldr	r2, [pc, #204]	; (80056cc <HAL_DMA_Abort_IT+0x3c0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d054      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a31      	ldr	r2, [pc, #196]	; (80056d0 <HAL_DMA_Abort_IT+0x3c4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d04f      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a30      	ldr	r2, [pc, #192]	; (80056d4 <HAL_DMA_Abort_IT+0x3c8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04a      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <HAL_DMA_Abort_IT+0x3cc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d045      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <HAL_DMA_Abort_IT+0x3d0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d040      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <HAL_DMA_Abort_IT+0x3d4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d03b      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <HAL_DMA_Abort_IT+0x3d8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d036      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <HAL_DMA_Abort_IT+0x3dc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a27      	ldr	r2, [pc, #156]	; (80056ec <HAL_DMA_Abort_IT+0x3e0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d02c      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <HAL_DMA_Abort_IT+0x3e4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d027      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <HAL_DMA_Abort_IT+0x3e8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_DMA_Abort_IT+0x3ec>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a21      	ldr	r2, [pc, #132]	; (80056fc <HAL_DMA_Abort_IT+0x3f0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <HAL_DMA_Abort_IT+0x3f4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <HAL_DMA_Abort_IT+0x3f8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_DMA_Abort_IT+0x3fc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_DMA_Abort_IT+0x400>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Abort_IT+0x3a2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <HAL_DMA_Abort_IT+0x404>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d132      	bne.n	8005714 <HAL_DMA_Abort_IT+0x408>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e031      	b.n	8005716 <HAL_DMA_Abort_IT+0x40a>
 80056b2:	bf00      	nop
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8
 80056f4:	58025408 	.word	0x58025408
 80056f8:	5802541c 	.word	0x5802541c
 80056fc:	58025430 	.word	0x58025430
 8005700:	58025444 	.word	0x58025444
 8005704:	58025458 	.word	0x58025458
 8005708:	5802546c 	.word	0x5802546c
 800570c:	58025480 	.word	0x58025480
 8005710:	58025494 	.word	0x58025494
 8005714:	2300      	movs	r3, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d028      	beq.n	800576c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005728:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005748:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005760:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800576a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop

08005798 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057a4:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_DMA_IRQHandler+0x1ac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a67      	ldr	r2, [pc, #412]	; (8005948 <HAL_DMA_IRQHandler+0x1b0>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0a9b      	lsrs	r3, r3, #10
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a5f      	ldr	r2, [pc, #380]	; (800594c <HAL_DMA_IRQHandler+0x1b4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d04a      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_DMA_IRQHandler+0x1b8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d045      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a5c      	ldr	r2, [pc, #368]	; (8005954 <HAL_DMA_IRQHandler+0x1bc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d040      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a5a      	ldr	r2, [pc, #360]	; (8005958 <HAL_DMA_IRQHandler+0x1c0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a59      	ldr	r2, [pc, #356]	; (800595c <HAL_DMA_IRQHandler+0x1c4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d036      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a57      	ldr	r2, [pc, #348]	; (8005960 <HAL_DMA_IRQHandler+0x1c8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d031      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a56      	ldr	r2, [pc, #344]	; (8005964 <HAL_DMA_IRQHandler+0x1cc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d02c      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a54      	ldr	r2, [pc, #336]	; (8005968 <HAL_DMA_IRQHandler+0x1d0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d027      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a53      	ldr	r2, [pc, #332]	; (800596c <HAL_DMA_IRQHandler+0x1d4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a51      	ldr	r2, [pc, #324]	; (8005970 <HAL_DMA_IRQHandler+0x1d8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a50      	ldr	r2, [pc, #320]	; (8005974 <HAL_DMA_IRQHandler+0x1dc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a4e      	ldr	r2, [pc, #312]	; (8005978 <HAL_DMA_IRQHandler+0x1e0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a4d      	ldr	r2, [pc, #308]	; (800597c <HAL_DMA_IRQHandler+0x1e4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a4b      	ldr	r2, [pc, #300]	; (8005980 <HAL_DMA_IRQHandler+0x1e8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a4a      	ldr	r2, [pc, #296]	; (8005984 <HAL_DMA_IRQHandler+0x1ec>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_DMA_IRQHandler+0xd2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a48      	ldr	r2, [pc, #288]	; (8005988 <HAL_DMA_IRQHandler+0x1f0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_DMA_IRQHandler+0xd6>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_DMA_IRQHandler+0xd8>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 842b 	beq.w	80060cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2208      	movs	r2, #8
 8005880:	409a      	lsls	r2, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80a2 	beq.w	80059d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_DMA_IRQHandler+0x1b4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04a      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_DMA_IRQHandler+0x1b8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d045      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_DMA_IRQHandler+0x1bc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_DMA_IRQHandler+0x1c0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d03b      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <HAL_DMA_IRQHandler+0x1c4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d036      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <HAL_DMA_IRQHandler+0x1c8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d031      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <HAL_DMA_IRQHandler+0x1cc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a24      	ldr	r2, [pc, #144]	; (8005968 <HAL_DMA_IRQHandler+0x1d0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d027      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_DMA_IRQHandler+0x1d4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_DMA_IRQHandler+0x1d8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <HAL_DMA_IRQHandler+0x1dc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_DMA_IRQHandler+0x1e0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_DMA_IRQHandler+0x1e4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_DMA_IRQHandler+0x1e8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_DMA_IRQHandler+0x1ec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_DMA_IRQHandler+0x194>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_DMA_IRQHandler+0x1f0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d12f      	bne.n	800598c <HAL_DMA_IRQHandler+0x1f4>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e02e      	b.n	80059a0 <HAL_DMA_IRQHandler+0x208>
 8005942:	bf00      	nop
 8005944:	24000004 	.word	0x24000004
 8005948:	1b4e81b5 	.word	0x1b4e81b5
 800594c:	40020010 	.word	0x40020010
 8005950:	40020028 	.word	0x40020028
 8005954:	40020040 	.word	0x40020040
 8005958:	40020058 	.word	0x40020058
 800595c:	40020070 	.word	0x40020070
 8005960:	40020088 	.word	0x40020088
 8005964:	400200a0 	.word	0x400200a0
 8005968:	400200b8 	.word	0x400200b8
 800596c:	40020410 	.word	0x40020410
 8005970:	40020428 	.word	0x40020428
 8005974:	40020440 	.word	0x40020440
 8005978:	40020458 	.word	0x40020458
 800597c:	40020470 	.word	0x40020470
 8005980:	40020488 	.word	0x40020488
 8005984:	400204a0 	.word	0x400204a0
 8005988:	400204b8 	.word	0x400204b8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d015      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0204 	bic.w	r2, r2, #4
 80059b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2208      	movs	r2, #8
 80059be:	409a      	lsls	r2, r3
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	f043 0201 	orr.w	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d06e      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a69      	ldr	r2, [pc, #420]	; (8005b90 <HAL_DMA_IRQHandler+0x3f8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d04a      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a67      	ldr	r2, [pc, #412]	; (8005b94 <HAL_DMA_IRQHandler+0x3fc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d045      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a66      	ldr	r2, [pc, #408]	; (8005b98 <HAL_DMA_IRQHandler+0x400>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a64      	ldr	r2, [pc, #400]	; (8005b9c <HAL_DMA_IRQHandler+0x404>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d03b      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a63      	ldr	r2, [pc, #396]	; (8005ba0 <HAL_DMA_IRQHandler+0x408>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d036      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a61      	ldr	r2, [pc, #388]	; (8005ba4 <HAL_DMA_IRQHandler+0x40c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a60      	ldr	r2, [pc, #384]	; (8005ba8 <HAL_DMA_IRQHandler+0x410>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d02c      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5e      	ldr	r2, [pc, #376]	; (8005bac <HAL_DMA_IRQHandler+0x414>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d027      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a5d      	ldr	r2, [pc, #372]	; (8005bb0 <HAL_DMA_IRQHandler+0x418>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a5b      	ldr	r2, [pc, #364]	; (8005bb4 <HAL_DMA_IRQHandler+0x41c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5a      	ldr	r2, [pc, #360]	; (8005bb8 <HAL_DMA_IRQHandler+0x420>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <HAL_DMA_IRQHandler+0x424>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a57      	ldr	r2, [pc, #348]	; (8005bc0 <HAL_DMA_IRQHandler+0x428>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a55      	ldr	r2, [pc, #340]	; (8005bc4 <HAL_DMA_IRQHandler+0x42c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a54      	ldr	r2, [pc, #336]	; (8005bc8 <HAL_DMA_IRQHandler+0x430>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x2ee>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_DMA_IRQHandler+0x434>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10a      	bne.n	8005a9c <HAL_DMA_IRQHandler+0x304>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e003      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x30c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00d      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f043 0202 	orr.w	r2, r3, #2
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2204      	movs	r2, #4
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 808f 	beq.w	8005bf8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <HAL_DMA_IRQHandler+0x3f8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <HAL_DMA_IRQHandler+0x3fc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <HAL_DMA_IRQHandler+0x400>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <HAL_DMA_IRQHandler+0x404>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <HAL_DMA_IRQHandler+0x408>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <HAL_DMA_IRQHandler+0x40c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <HAL_DMA_IRQHandler+0x410>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <HAL_DMA_IRQHandler+0x414>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <HAL_DMA_IRQHandler+0x418>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_DMA_IRQHandler+0x41c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <HAL_DMA_IRQHandler+0x420>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_DMA_IRQHandler+0x424>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <HAL_DMA_IRQHandler+0x428>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_DMA_IRQHandler+0x42c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_DMA_IRQHandler+0x430>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x3e2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_DMA_IRQHandler+0x434>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d12a      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x438>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e023      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x440>
 8005b90:	40020010 	.word	0x40020010
 8005b94:	40020028 	.word	0x40020028
 8005b98:	40020040 	.word	0x40020040
 8005b9c:	40020058 	.word	0x40020058
 8005ba0:	40020070 	.word	0x40020070
 8005ba4:	40020088 	.word	0x40020088
 8005ba8:	400200a0 	.word	0x400200a0
 8005bac:	400200b8 	.word	0x400200b8
 8005bb0:	40020410 	.word	0x40020410
 8005bb4:	40020428 	.word	0x40020428
 8005bb8:	40020440 	.word	0x40020440
 8005bbc:	40020458 	.word	0x40020458
 8005bc0:	40020470 	.word	0x40020470
 8005bc4:	40020488 	.word	0x40020488
 8005bc8:	400204a0 	.word	0x400204a0
 8005bcc:	400204b8 	.word	0x400204b8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2204      	movs	r2, #4
 8005be6:	409a      	lsls	r2, r3
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f043 0204 	orr.w	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2210      	movs	r2, #16
 8005c02:	409a      	lsls	r2, r3
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80a6 	beq.w	8005d5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a85      	ldr	r2, [pc, #532]	; (8005e28 <HAL_DMA_IRQHandler+0x690>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d04a      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a83      	ldr	r2, [pc, #524]	; (8005e2c <HAL_DMA_IRQHandler+0x694>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d045      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a82      	ldr	r2, [pc, #520]	; (8005e30 <HAL_DMA_IRQHandler+0x698>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d040      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a80      	ldr	r2, [pc, #512]	; (8005e34 <HAL_DMA_IRQHandler+0x69c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d03b      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7f      	ldr	r2, [pc, #508]	; (8005e38 <HAL_DMA_IRQHandler+0x6a0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d036      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a7d      	ldr	r2, [pc, #500]	; (8005e3c <HAL_DMA_IRQHandler+0x6a4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d031      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7c      	ldr	r2, [pc, #496]	; (8005e40 <HAL_DMA_IRQHandler+0x6a8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d02c      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a7a      	ldr	r2, [pc, #488]	; (8005e44 <HAL_DMA_IRQHandler+0x6ac>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d027      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a79      	ldr	r2, [pc, #484]	; (8005e48 <HAL_DMA_IRQHandler+0x6b0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d022      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a77      	ldr	r2, [pc, #476]	; (8005e4c <HAL_DMA_IRQHandler+0x6b4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01d      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a76      	ldr	r2, [pc, #472]	; (8005e50 <HAL_DMA_IRQHandler+0x6b8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d018      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a74      	ldr	r2, [pc, #464]	; (8005e54 <HAL_DMA_IRQHandler+0x6bc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a73      	ldr	r2, [pc, #460]	; (8005e58 <HAL_DMA_IRQHandler+0x6c0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a71      	ldr	r2, [pc, #452]	; (8005e5c <HAL_DMA_IRQHandler+0x6c4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a70      	ldr	r2, [pc, #448]	; (8005e60 <HAL_DMA_IRQHandler+0x6c8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_DMA_IRQHandler+0x516>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_DMA_IRQHandler+0x6cc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10a      	bne.n	8005cc4 <HAL_DMA_IRQHandler+0x52c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e009      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x540>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d03e      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d108      	bne.n	8005d1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d024      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
 8005d18:	e01f      	b.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01b      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
 8005d2a:	e016      	b.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0208 	bic.w	r2, r2, #8
 8005d48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	2220      	movs	r2, #32
 8005d64:	409a      	lsls	r2, r3
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8110 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <HAL_DMA_IRQHandler+0x690>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d04a      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <HAL_DMA_IRQHandler+0x694>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d045      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a29      	ldr	r2, [pc, #164]	; (8005e30 <HAL_DMA_IRQHandler+0x698>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d040      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <HAL_DMA_IRQHandler+0x69c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d03b      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <HAL_DMA_IRQHandler+0x6a0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d036      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a25      	ldr	r2, [pc, #148]	; (8005e3c <HAL_DMA_IRQHandler+0x6a4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d031      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <HAL_DMA_IRQHandler+0x6a8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d02c      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_DMA_IRQHandler+0x6ac>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d027      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <HAL_DMA_IRQHandler+0x6b0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d022      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_DMA_IRQHandler+0x6b4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01d      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_DMA_IRQHandler+0x6b8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_DMA_IRQHandler+0x6bc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_DMA_IRQHandler+0x6c0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_DMA_IRQHandler+0x6c4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_DMA_IRQHandler+0x6c8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x678>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_DMA_IRQHandler+0x6cc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d12b      	bne.n	8005e68 <HAL_DMA_IRQHandler+0x6d0>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	e02a      	b.n	8005e7c <HAL_DMA_IRQHandler+0x6e4>
 8005e26:	bf00      	nop
 8005e28:	40020010 	.word	0x40020010
 8005e2c:	40020028 	.word	0x40020028
 8005e30:	40020040 	.word	0x40020040
 8005e34:	40020058 	.word	0x40020058
 8005e38:	40020070 	.word	0x40020070
 8005e3c:	40020088 	.word	0x40020088
 8005e40:	400200a0 	.word	0x400200a0
 8005e44:	400200b8 	.word	0x400200b8
 8005e48:	40020410 	.word	0x40020410
 8005e4c:	40020428 	.word	0x40020428
 8005e50:	40020440 	.word	0x40020440
 8005e54:	40020458 	.word	0x40020458
 8005e58:	40020470 	.word	0x40020470
 8005e5c:	40020488 	.word	0x40020488
 8005e60:	400204a0 	.word	0x400204a0
 8005e64:	400204b8 	.word	0x400204b8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8087 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d139      	bne.n	8005f12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0216 	bic.w	r2, r2, #22
 8005eac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ebc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_DMA_IRQHandler+0x736>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0208 	bic.w	r2, r2, #8
 8005edc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	223f      	movs	r2, #63	; 0x3f
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 834a 	beq.w	800659c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
          }
          return;
 8005f10:	e344      	b.n	800659c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d018      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02c      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
 8005f3e:	e027      	b.n	8005f90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d023      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	e01e      	b.n	8005f90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10f      	bne.n	8005f80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0210 	bic.w	r2, r2, #16
 8005f6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8306 	beq.w	80065a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8088 	beq.w	80060b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2204      	movs	r2, #4
 8005fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a7a      	ldr	r2, [pc, #488]	; (80061a0 <HAL_DMA_IRQHandler+0xa08>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d04a      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a79      	ldr	r2, [pc, #484]	; (80061a4 <HAL_DMA_IRQHandler+0xa0c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d045      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a77      	ldr	r2, [pc, #476]	; (80061a8 <HAL_DMA_IRQHandler+0xa10>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d040      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a76      	ldr	r2, [pc, #472]	; (80061ac <HAL_DMA_IRQHandler+0xa14>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d03b      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a74      	ldr	r2, [pc, #464]	; (80061b0 <HAL_DMA_IRQHandler+0xa18>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d036      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a73      	ldr	r2, [pc, #460]	; (80061b4 <HAL_DMA_IRQHandler+0xa1c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d031      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a71      	ldr	r2, [pc, #452]	; (80061b8 <HAL_DMA_IRQHandler+0xa20>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02c      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a70      	ldr	r2, [pc, #448]	; (80061bc <HAL_DMA_IRQHandler+0xa24>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d027      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6e      	ldr	r2, [pc, #440]	; (80061c0 <HAL_DMA_IRQHandler+0xa28>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d022      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6d      	ldr	r2, [pc, #436]	; (80061c4 <HAL_DMA_IRQHandler+0xa2c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d01d      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6b      	ldr	r2, [pc, #428]	; (80061c8 <HAL_DMA_IRQHandler+0xa30>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d018      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6a      	ldr	r2, [pc, #424]	; (80061cc <HAL_DMA_IRQHandler+0xa34>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d013      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a68      	ldr	r2, [pc, #416]	; (80061d0 <HAL_DMA_IRQHandler+0xa38>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00e      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a67      	ldr	r2, [pc, #412]	; (80061d4 <HAL_DMA_IRQHandler+0xa3c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a65      	ldr	r2, [pc, #404]	; (80061d8 <HAL_DMA_IRQHandler+0xa40>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_DMA_IRQHandler+0x8b8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a64      	ldr	r2, [pc, #400]	; (80061dc <HAL_DMA_IRQHandler+0xa44>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <HAL_DMA_IRQHandler+0x8ca>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	e007      	b.n	8006072 <HAL_DMA_IRQHandler+0x8da>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3301      	adds	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607a:	429a      	cmp	r2, r3
 800607c:	d307      	bcc.n	800608e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f2      	bne.n	8006072 <HAL_DMA_IRQHandler+0x8da>
 800608c:	e000      	b.n	8006090 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800608e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80060a6:	e003      	b.n	80060b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8272 	beq.w	80065a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
 80060ca:	e26c      	b.n	80065a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a43      	ldr	r2, [pc, #268]	; (80061e0 <HAL_DMA_IRQHandler+0xa48>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d022      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a42      	ldr	r2, [pc, #264]	; (80061e4 <HAL_DMA_IRQHandler+0xa4c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01d      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a40      	ldr	r2, [pc, #256]	; (80061e8 <HAL_DMA_IRQHandler+0xa50>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <HAL_DMA_IRQHandler+0xa54>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <HAL_DMA_IRQHandler+0xa58>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a3c      	ldr	r2, [pc, #240]	; (80061f4 <HAL_DMA_IRQHandler+0xa5c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3a      	ldr	r2, [pc, #232]	; (80061f8 <HAL_DMA_IRQHandler+0xa60>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_DMA_IRQHandler+0x984>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a39      	ldr	r2, [pc, #228]	; (80061fc <HAL_DMA_IRQHandler+0xa64>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <HAL_DMA_IRQHandler+0x988>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_DMA_IRQHandler+0x98a>
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 823f 	beq.w	80065a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	2204      	movs	r2, #4
 800613a:	409a      	lsls	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80cd 	beq.w	80062e0 <HAL_DMA_IRQHandler+0xb48>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80c7 	beq.w	80062e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2204      	movs	r2, #4
 800615c:	409a      	lsls	r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d049      	beq.n	8006200 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8210 	beq.w	80065a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006188:	e20a      	b.n	80065a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8206 	beq.w	80065a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800619c:	e200      	b.n	80065a0 <HAL_DMA_IRQHandler+0xe08>
 800619e:	bf00      	nop
 80061a0:	40020010 	.word	0x40020010
 80061a4:	40020028 	.word	0x40020028
 80061a8:	40020040 	.word	0x40020040
 80061ac:	40020058 	.word	0x40020058
 80061b0:	40020070 	.word	0x40020070
 80061b4:	40020088 	.word	0x40020088
 80061b8:	400200a0 	.word	0x400200a0
 80061bc:	400200b8 	.word	0x400200b8
 80061c0:	40020410 	.word	0x40020410
 80061c4:	40020428 	.word	0x40020428
 80061c8:	40020440 	.word	0x40020440
 80061cc:	40020458 	.word	0x40020458
 80061d0:	40020470 	.word	0x40020470
 80061d4:	40020488 	.word	0x40020488
 80061d8:	400204a0 	.word	0x400204a0
 80061dc:	400204b8 	.word	0x400204b8
 80061e0:	58025408 	.word	0x58025408
 80061e4:	5802541c 	.word	0x5802541c
 80061e8:	58025430 	.word	0x58025430
 80061ec:	58025444 	.word	0x58025444
 80061f0:	58025458 	.word	0x58025458
 80061f4:	5802546c 	.word	0x5802546c
 80061f8:	58025480 	.word	0x58025480
 80061fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d160      	bne.n	80062cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a7f      	ldr	r2, [pc, #508]	; (800640c <HAL_DMA_IRQHandler+0xc74>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d04a      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a7d      	ldr	r2, [pc, #500]	; (8006410 <HAL_DMA_IRQHandler+0xc78>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d045      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7c      	ldr	r2, [pc, #496]	; (8006414 <HAL_DMA_IRQHandler+0xc7c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7a      	ldr	r2, [pc, #488]	; (8006418 <HAL_DMA_IRQHandler+0xc80>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d03b      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a79      	ldr	r2, [pc, #484]	; (800641c <HAL_DMA_IRQHandler+0xc84>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d036      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a77      	ldr	r2, [pc, #476]	; (8006420 <HAL_DMA_IRQHandler+0xc88>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d031      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a76      	ldr	r2, [pc, #472]	; (8006424 <HAL_DMA_IRQHandler+0xc8c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d02c      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a74      	ldr	r2, [pc, #464]	; (8006428 <HAL_DMA_IRQHandler+0xc90>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d027      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a73      	ldr	r2, [pc, #460]	; (800642c <HAL_DMA_IRQHandler+0xc94>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a71      	ldr	r2, [pc, #452]	; (8006430 <HAL_DMA_IRQHandler+0xc98>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01d      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a70      	ldr	r2, [pc, #448]	; (8006434 <HAL_DMA_IRQHandler+0xc9c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a6e      	ldr	r2, [pc, #440]	; (8006438 <HAL_DMA_IRQHandler+0xca0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a6d      	ldr	r2, [pc, #436]	; (800643c <HAL_DMA_IRQHandler+0xca4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6b      	ldr	r2, [pc, #428]	; (8006440 <HAL_DMA_IRQHandler+0xca8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6a      	ldr	r2, [pc, #424]	; (8006444 <HAL_DMA_IRQHandler+0xcac>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_DMA_IRQHandler+0xb12>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a68      	ldr	r2, [pc, #416]	; (8006448 <HAL_DMA_IRQHandler+0xcb0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <HAL_DMA_IRQHandler+0xb24>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0208 	bic.w	r2, r2, #8
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e007      	b.n	80062cc <HAL_DMA_IRQHandler+0xb34>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0204 	bic.w	r2, r2, #4
 80062ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8165 	beq.w	80065a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062de:	e15f      	b.n	80065a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2202      	movs	r2, #2
 80062ea:	409a      	lsls	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80c5 	beq.w	8006480 <HAL_DMA_IRQHandler+0xce8>
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80bf 	beq.w	8006480 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	2202      	movs	r2, #2
 800630c:	409a      	lsls	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d018      	beq.n	800634e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 813a 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006338:	e134      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8130 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800634c:	e12a      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8089 	bne.w	800646c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2b      	ldr	r2, [pc, #172]	; (800640c <HAL_DMA_IRQHandler+0xc74>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d04a      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <HAL_DMA_IRQHandler+0xc78>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d045      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a28      	ldr	r2, [pc, #160]	; (8006414 <HAL_DMA_IRQHandler+0xc7c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d040      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a26      	ldr	r2, [pc, #152]	; (8006418 <HAL_DMA_IRQHandler+0xc80>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d03b      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a25      	ldr	r2, [pc, #148]	; (800641c <HAL_DMA_IRQHandler+0xc84>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d036      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a23      	ldr	r2, [pc, #140]	; (8006420 <HAL_DMA_IRQHandler+0xc88>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d031      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_DMA_IRQHandler+0xc8c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d02c      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a20      	ldr	r2, [pc, #128]	; (8006428 <HAL_DMA_IRQHandler+0xc90>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d027      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1f      	ldr	r2, [pc, #124]	; (800642c <HAL_DMA_IRQHandler+0xc94>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d022      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_DMA_IRQHandler+0xc98>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_DMA_IRQHandler+0xc9c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d018      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_DMA_IRQHandler+0xca0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a19      	ldr	r2, [pc, #100]	; (800643c <HAL_DMA_IRQHandler+0xca4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_DMA_IRQHandler+0xca8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a16      	ldr	r2, [pc, #88]	; (8006444 <HAL_DMA_IRQHandler+0xcac>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_DMA_IRQHandler+0xc62>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a14      	ldr	r2, [pc, #80]	; (8006448 <HAL_DMA_IRQHandler+0xcb0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d128      	bne.n	800644c <HAL_DMA_IRQHandler+0xcb4>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0214 	bic.w	r2, r2, #20
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e027      	b.n	800645c <HAL_DMA_IRQHandler+0xcc4>
 800640c:	40020010 	.word	0x40020010
 8006410:	40020028 	.word	0x40020028
 8006414:	40020040 	.word	0x40020040
 8006418:	40020058 	.word	0x40020058
 800641c:	40020070 	.word	0x40020070
 8006420:	40020088 	.word	0x40020088
 8006424:	400200a0 	.word	0x400200a0
 8006428:	400200b8 	.word	0x400200b8
 800642c:	40020410 	.word	0x40020410
 8006430:	40020428 	.word	0x40020428
 8006434:	40020440 	.word	0x40020440
 8006438:	40020458 	.word	0x40020458
 800643c:	40020470 	.word	0x40020470
 8006440:	40020488 	.word	0x40020488
 8006444:	400204a0 	.word	0x400204a0
 8006448:	400204b8 	.word	0x400204b8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 020a 	bic.w	r2, r2, #10
 800645a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8097 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800647e:	e091      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2208      	movs	r2, #8
 800648a:	409a      	lsls	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8088 	beq.w	80065a6 <HAL_DMA_IRQHandler+0xe0e>
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8082 	beq.w	80065a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a41      	ldr	r2, [pc, #260]	; (80065ac <HAL_DMA_IRQHandler+0xe14>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d04a      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a3f      	ldr	r2, [pc, #252]	; (80065b0 <HAL_DMA_IRQHandler+0xe18>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d045      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3e      	ldr	r2, [pc, #248]	; (80065b4 <HAL_DMA_IRQHandler+0xe1c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d040      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <HAL_DMA_IRQHandler+0xe20>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d03b      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <HAL_DMA_IRQHandler+0xe24>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d036      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a39      	ldr	r2, [pc, #228]	; (80065c0 <HAL_DMA_IRQHandler+0xe28>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d031      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a38      	ldr	r2, [pc, #224]	; (80065c4 <HAL_DMA_IRQHandler+0xe2c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d02c      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a36      	ldr	r2, [pc, #216]	; (80065c8 <HAL_DMA_IRQHandler+0xe30>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d027      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a35      	ldr	r2, [pc, #212]	; (80065cc <HAL_DMA_IRQHandler+0xe34>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d022      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a33      	ldr	r2, [pc, #204]	; (80065d0 <HAL_DMA_IRQHandler+0xe38>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01d      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <HAL_DMA_IRQHandler+0xe3c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d018      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a30      	ldr	r2, [pc, #192]	; (80065d8 <HAL_DMA_IRQHandler+0xe40>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2f      	ldr	r2, [pc, #188]	; (80065dc <HAL_DMA_IRQHandler+0xe44>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <HAL_DMA_IRQHandler+0xe48>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <HAL_DMA_IRQHandler+0xe4c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_DMA_IRQHandler+0xdaa>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <HAL_DMA_IRQHandler+0xe50>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d108      	bne.n	8006554 <HAL_DMA_IRQHandler+0xdbc>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 021c 	bic.w	r2, r2, #28
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e007      	b.n	8006564 <HAL_DMA_IRQHandler+0xdcc>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 020e 	bic.w	r2, r2, #14
 8006562:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
 800659a:	e004      	b.n	80065a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40020010 	.word	0x40020010
 80065b0:	40020028 	.word	0x40020028
 80065b4:	40020040 	.word	0x40020040
 80065b8:	40020058 	.word	0x40020058
 80065bc:	40020070 	.word	0x40020070
 80065c0:	40020088 	.word	0x40020088
 80065c4:	400200a0 	.word	0x400200a0
 80065c8:	400200b8 	.word	0x400200b8
 80065cc:	40020410 	.word	0x40020410
 80065d0:	40020428 	.word	0x40020428
 80065d4:	40020440 	.word	0x40020440
 80065d8:	40020458 	.word	0x40020458
 80065dc:	40020470 	.word	0x40020470
 80065e0:	40020488 	.word	0x40020488
 80065e4:	400204a0 	.word	0x400204a0
 80065e8:	400204b8 	.word	0x400204b8

080065ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a42      	ldr	r2, [pc, #264]	; (8006704 <DMA_CalcBaseAndBitshift+0x118>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d04a      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a41      	ldr	r2, [pc, #260]	; (8006708 <DMA_CalcBaseAndBitshift+0x11c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d045      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3f      	ldr	r2, [pc, #252]	; (800670c <DMA_CalcBaseAndBitshift+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d040      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3e      	ldr	r2, [pc, #248]	; (8006710 <DMA_CalcBaseAndBitshift+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d03b      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3c      	ldr	r2, [pc, #240]	; (8006714 <DMA_CalcBaseAndBitshift+0x128>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d036      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3b      	ldr	r2, [pc, #236]	; (8006718 <DMA_CalcBaseAndBitshift+0x12c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d031      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a39      	ldr	r2, [pc, #228]	; (800671c <DMA_CalcBaseAndBitshift+0x130>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d02c      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a38      	ldr	r2, [pc, #224]	; (8006720 <DMA_CalcBaseAndBitshift+0x134>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d027      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a36      	ldr	r2, [pc, #216]	; (8006724 <DMA_CalcBaseAndBitshift+0x138>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d022      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a35      	ldr	r2, [pc, #212]	; (8006728 <DMA_CalcBaseAndBitshift+0x13c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01d      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a33      	ldr	r2, [pc, #204]	; (800672c <DMA_CalcBaseAndBitshift+0x140>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a32      	ldr	r2, [pc, #200]	; (8006730 <DMA_CalcBaseAndBitshift+0x144>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a30      	ldr	r2, [pc, #192]	; (8006734 <DMA_CalcBaseAndBitshift+0x148>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <DMA_CalcBaseAndBitshift+0x14c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <DMA_CalcBaseAndBitshift+0x150>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xa8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <DMA_CalcBaseAndBitshift+0x154>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <DMA_CalcBaseAndBitshift+0xac>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <DMA_CalcBaseAndBitshift+0xae>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d024      	beq.n	80066e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	3b10      	subs	r3, #16
 80066a6:	4a27      	ldr	r2, [pc, #156]	; (8006744 <DMA_CalcBaseAndBitshift+0x158>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	4a24      	ldr	r2, [pc, #144]	; (8006748 <DMA_CalcBaseAndBitshift+0x15c>)
 80066b8:	5cd3      	ldrb	r3, [r2, r3]
 80066ba:	461a      	mov	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d908      	bls.n	80066d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b1f      	ldr	r3, [pc, #124]	; (800674c <DMA_CalcBaseAndBitshift+0x160>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	1d1a      	adds	r2, r3, #4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	659a      	str	r2, [r3, #88]	; 0x58
 80066d6:	e00d      	b.n	80066f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <DMA_CalcBaseAndBitshift+0x160>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6593      	str	r3, [r2, #88]	; 0x58
 80066e6:	e005      	b.n	80066f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	40020010 	.word	0x40020010
 8006708:	40020028 	.word	0x40020028
 800670c:	40020040 	.word	0x40020040
 8006710:	40020058 	.word	0x40020058
 8006714:	40020070 	.word	0x40020070
 8006718:	40020088 	.word	0x40020088
 800671c:	400200a0 	.word	0x400200a0
 8006720:	400200b8 	.word	0x400200b8
 8006724:	40020410 	.word	0x40020410
 8006728:	40020428 	.word	0x40020428
 800672c:	40020440 	.word	0x40020440
 8006730:	40020458 	.word	0x40020458
 8006734:	40020470 	.word	0x40020470
 8006738:	40020488 	.word	0x40020488
 800673c:	400204a0 	.word	0x400204a0
 8006740:	400204b8 	.word	0x400204b8
 8006744:	aaaaaaab 	.word	0xaaaaaaab
 8006748:	0800ef84 	.word	0x0800ef84
 800674c:	fffffc00 	.word	0xfffffc00

08006750 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d120      	bne.n	80067a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	2b03      	cmp	r3, #3
 800676a:	d858      	bhi.n	800681e <DMA_CheckFifoParam+0xce>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <DMA_CheckFifoParam+0x24>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006785 	.word	0x08006785
 8006778:	08006797 	.word	0x08006797
 800677c:	08006785 	.word	0x08006785
 8006780:	0800681f 	.word	0x0800681f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d048      	beq.n	8006822 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006794:	e045      	b.n	8006822 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800679e:	d142      	bne.n	8006826 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067a4:	e03f      	b.n	8006826 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ae:	d123      	bne.n	80067f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d838      	bhi.n	800682a <DMA_CheckFifoParam+0xda>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <DMA_CheckFifoParam+0x70>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067d7 	.word	0x080067d7
 80067c8:	080067d1 	.word	0x080067d1
 80067cc:	080067e9 	.word	0x080067e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
        break;
 80067d4:	e030      	b.n	8006838 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d025      	beq.n	800682e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067e6:	e022      	b.n	800682e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067f0:	d11f      	bne.n	8006832 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067f6:	e01c      	b.n	8006832 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d902      	bls.n	8006806 <DMA_CheckFifoParam+0xb6>
 8006800:	2b03      	cmp	r3, #3
 8006802:	d003      	beq.n	800680c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006804:	e018      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
        break;
 800680a:	e015      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
    break;
 800681c:	e00b      	b.n	8006836 <DMA_CheckFifoParam+0xe6>
        break;
 800681e:	bf00      	nop
 8006820:	e00a      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        break;
 8006822:	bf00      	nop
 8006824:	e008      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        break;
 8006826:	bf00      	nop
 8006828:	e006      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        break;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <DMA_CheckFifoParam+0xe8>
    break;
 8006836:	bf00      	nop
    }
  }

  return status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop

08006848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a38      	ldr	r2, [pc, #224]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a36      	ldr	r2, [pc, #216]	; (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a35      	ldr	r2, [pc, #212]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a33      	ldr	r2, [pc, #204]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a32      	ldr	r2, [pc, #200]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a30      	ldr	r2, [pc, #192]	; (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2f      	ldr	r2, [pc, #188]	; (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	3b08      	subs	r3, #8
 80068b8:	4a28      	ldr	r2, [pc, #160]	; (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4b26      	ldr	r3, [pc, #152]	; (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a24      	ldr	r2, [pc, #144]	; (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068e4:	e024      	b.n	8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	3b10      	subs	r3, #16
 80068ee:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4a1c      	ldr	r2, [pc, #112]	; (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d806      	bhi.n	800690e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d902      	bls.n	800690e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3308      	adds	r3, #8
 800690c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a16      	ldr	r2, [pc, #88]	; (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006920:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2201      	movs	r2, #1
 800692a:	409a      	lsls	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	58025408 	.word	0x58025408
 8006940:	5802541c 	.word	0x5802541c
 8006944:	58025430 	.word	0x58025430
 8006948:	58025444 	.word	0x58025444
 800694c:	58025458 	.word	0x58025458
 8006950:	5802546c 	.word	0x5802546c
 8006954:	58025480 	.word	0x58025480
 8006958:	58025494 	.word	0x58025494
 800695c:	cccccccd 	.word	0xcccccccd
 8006960:	16009600 	.word	0x16009600
 8006964:	58025880 	.word	0x58025880
 8006968:	aaaaaaab 	.word	0xaaaaaaab
 800696c:	400204b8 	.word	0x400204b8
 8006970:	4002040f 	.word	0x4002040f
 8006974:	10008200 	.word	0x10008200
 8006978:	40020880 	.word	0x40020880

0800697c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d04a      	beq.n	8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d847      	bhi.n	8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a25      	ldr	r2, [pc, #148]	; (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a24      	ldr	r2, [pc, #144]	; (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d01d      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1e      	ldr	r2, [pc, #120]	; (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1b      	ldr	r2, [pc, #108]	; (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d101      	bne.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069ec:	2300      	movs	r3, #0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4b17      	ldr	r3, [pc, #92]	; (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a04:	671a      	str	r2, [r3, #112]	; 0x70
 8006a06:	e009      	b.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	2201      	movs	r2, #1
 8006a22:	409a      	lsls	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	58025408 	.word	0x58025408
 8006a38:	5802541c 	.word	0x5802541c
 8006a3c:	58025430 	.word	0x58025430
 8006a40:	58025444 	.word	0x58025444
 8006a44:	58025458 	.word	0x58025458
 8006a48:	5802546c 	.word	0x5802546c
 8006a4c:	58025480 	.word	0x58025480
 8006a50:	58025494 	.word	0x58025494
 8006a54:	1600963f 	.word	0x1600963f
 8006a58:	58025940 	.word	0x58025940
 8006a5c:	1000823f 	.word	0x1000823f
 8006a60:	40020940 	.word	0x40020940

08006a64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e0cf      	b.n	8006c16 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2223      	movs	r2, #35	; 0x23
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fd f89f 	bl	8003bcc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a8e:	4b64      	ldr	r3, [pc, #400]	; (8006c20 <HAL_ETH_Init+0x1bc>)
 8006a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a94:	4a62      	ldr	r2, [pc, #392]	; (8006c20 <HAL_ETH_Init+0x1bc>)
 8006a96:	f043 0302 	orr.w	r3, r3, #2
 8006a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a9e:	4b60      	ldr	r3, [pc, #384]	; (8006c20 <HAL_ETH_Init+0x1bc>)
 8006aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7a1b      	ldrb	r3, [r3, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7fd fc8b 	bl	80043d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8006aba:	e003      	b.n	8006ac4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006abc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006ac0:	f7fd fc86 	bl	80043d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006ac4:	4b57      	ldr	r3, [pc, #348]	; (8006c24 <HAL_ETH_Init+0x1c0>)
 8006ac6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ade:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ae0:	f7fd fc3a 	bl	8004358 <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006ae6:	e011      	b.n	8006b0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006ae8:	f7fd fc36 	bl	8004358 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006af6:	d909      	bls.n	8006b0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2204      	movs	r2, #4
 8006afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	22e0      	movs	r2, #224	; 0xe0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e084      	b.n	8006c16 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e4      	bne.n	8006ae8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f886 	bl	8006c30 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006b24:	f001 fefc 	bl	8008920 <HAL_RCC_GetHCLKFreq>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4a3f      	ldr	r2, [pc, #252]	; (8006c28 <HAL_ETH_Init+0x1c4>)
 8006b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b30:	0c9a      	lsrs	r2, r3, #18
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3a01      	subs	r2, #1
 8006b38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa71 	bl	8007024 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006b4e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	22e0      	movs	r2, #224	; 0xe0
 8006b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e049      	b.n	8006c16 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006b8e:	4b27      	ldr	r3, [pc, #156]	; (8006c2c <HAL_ETH_Init+0x1c8>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6952      	ldr	r2, [r2, #20]
 8006b96:	0051      	lsls	r1, r2, #1
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ba2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fad9 	bl	800715e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb1f 	bl	80071f0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	3305      	adds	r3, #5
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	021a      	lsls	r2, r3, #8
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	061a      	lsls	r2, r3, #24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	3302      	adds	r3, #2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	3301      	adds	r3, #1
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bf0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006bfe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006c00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2210      	movs	r2, #16
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	58024400 	.word	0x58024400
 8006c24:	58000400 	.word	0x58000400
 8006c28:	431bde83 	.word	0x431bde83
 8006c2c:	ffff8001 	.word	0xffff8001

08006c30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006c4a:	f001 fe69 	bl	8008920 <HAL_RCC_GetHCLKFreq>
 8006c4e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d908      	bls.n	8006c6a <HAL_ETH_SetMDIOClockRange+0x3a>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d804      	bhi.n	8006c6a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	e027      	b.n	8006cba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d908      	bls.n	8006c84 <HAL_ETH_SetMDIOClockRange+0x54>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d204      	bcs.n	8006c84 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	e01a      	b.n	8006cba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d303      	bcc.n	8006c94 <HAL_ETH_SetMDIOClockRange+0x64>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d911      	bls.n	8006cb8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d908      	bls.n	8006cae <HAL_ETH_SetMDIOClockRange+0x7e>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4a0f      	ldr	r2, [pc, #60]	; (8006cdc <HAL_ETH_SetMDIOClockRange+0xac>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d804      	bhi.n	8006cae <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e005      	b.n	8006cba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e000      	b.n	8006cba <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006cb8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	01312cff 	.word	0x01312cff
 8006cd0:	02160ebf 	.word	0x02160ebf
 8006cd4:	03938700 	.word	0x03938700
 8006cd8:	05f5e0ff 	.word	0x05f5e0ff
 8006cdc:	08f0d17f 	.word	0x08f0d17f

08006ce0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006cf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	791b      	ldrb	r3, [r3, #4]
 8006cf8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	7b1b      	ldrb	r3, [r3, #12]
 8006d00:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	7b5b      	ldrb	r3, [r3, #13]
 8006d08:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	7b9b      	ldrb	r3, [r3, #14]
 8006d10:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	7bdb      	ldrb	r3, [r3, #15]
 8006d18:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d102      	bne.n	8006d2a <ETH_SetMACConfig+0x4a>
 8006d24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d28:	e000      	b.n	8006d2c <ETH_SetMACConfig+0x4c>
 8006d2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	7c52      	ldrb	r2, [r2, #17]
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d102      	bne.n	8006d3c <ETH_SetMACConfig+0x5c>
 8006d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d3a:	e000      	b.n	8006d3e <ETH_SetMACConfig+0x5e>
 8006d3c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	7c9b      	ldrb	r3, [r3, #18]
 8006d44:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d46:	431a      	orrs	r2, r3
               macconf->Speed |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d4c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006d52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	7f1b      	ldrb	r3, [r3, #28]
 8006d58:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	7f5b      	ldrb	r3, [r3, #29]
 8006d60:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	7f92      	ldrb	r2, [r2, #30]
 8006d68:	2a00      	cmp	r2, #0
 8006d6a:	d102      	bne.n	8006d72 <ETH_SetMACConfig+0x92>
 8006d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d70:	e000      	b.n	8006d74 <ETH_SetMACConfig+0x94>
 8006d72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	7fdb      	ldrb	r3, [r3, #31]
 8006d7a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d102      	bne.n	8006d8e <ETH_SetMACConfig+0xae>
 8006d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d8c:	e000      	b.n	8006d90 <ETH_SetMACConfig+0xb0>
 8006d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006d90:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006da0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <ETH_SetMACConfig+0x22c>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	68f9      	ldr	r1, [r7, #12]
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dde:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006de0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	d102      	bne.n	8006df2 <ETH_SetMACConfig+0x112>
 8006dec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006df0:	e000      	b.n	8006df4 <ETH_SetMACConfig+0x114>
 8006df2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006df4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4b42      	ldr	r3, [pc, #264]	; (8006f10 <ETH_SetMACConfig+0x230>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <ETH_SetMACConfig+0x234>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6812      	ldr	r2, [r2, #0]
 8006e30:	68f9      	ldr	r1, [r7, #12]
 8006e32:	430b      	orrs	r3, r1
 8006e34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d101      	bne.n	8006e52 <ETH_SetMACConfig+0x172>
 8006e4e:	2280      	movs	r2, #128	; 0x80
 8006e50:	e000      	b.n	8006e54 <ETH_SetMACConfig+0x174>
 8006e52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006e54:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e66:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006e84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e92:	f023 0103 	bic.w	r1, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006eaa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	d101      	bne.n	8006ece <ETH_SetMACConfig+0x1ee>
 8006eca:	2240      	movs	r2, #64	; 0x40
 8006ecc:	e000      	b.n	8006ed0 <ETH_SetMACConfig+0x1f0>
 8006ece:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006ed0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ed8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006ee2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ef0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	00048083 	.word	0x00048083
 8006f10:	c0f88000 	.word	0xc0f88000
 8006f14:	fffffef0 	.word	0xfffffef0

08006f18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4b38      	ldr	r3, [pc, #224]	; (8007010 <ETH_SetDMAConfig+0xf8>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	6811      	ldr	r1, [r2, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f3e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	7b1b      	ldrb	r3, [r3, #12]
 8006f50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <ETH_SetDMAConfig+0xfc>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f70:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	7b5b      	ldrb	r3, [r3, #13]
 8006f76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f88:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006f8c:	4b22      	ldr	r3, [pc, #136]	; (8007018 <ETH_SetDMAConfig+0x100>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	68f9      	ldr	r1, [r7, #12]
 8006f96:	430b      	orrs	r3, r1
 8006f98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	7d1b      	ldrb	r3, [r3, #20]
 8006fa8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006faa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	7f5b      	ldrb	r3, [r3, #29]
 8006fb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006fc2:	4b16      	ldr	r3, [pc, #88]	; (800701c <ETH_SetDMAConfig+0x104>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	7f1b      	ldrb	r3, [r3, #28]
 8006fda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <ETH_SetDMAConfig+0x108>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6812      	ldr	r2, [r2, #0]
 8006ff8:	68f9      	ldr	r1, [r7, #12]
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007000:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	ffff87fd 	.word	0xffff87fd
 8007014:	ffff2ffe 	.word	0xffff2ffe
 8007018:	fffec000 	.word	0xfffec000
 800701c:	ffc0efef 	.word	0xffc0efef
 8007020:	7fc0ffff 	.word	0x7fc0ffff

08007024 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b0a4      	sub	sp, #144	; 0x90
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007032:	2300      	movs	r3, #0
 8007034:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800703c:	2300      	movs	r3, #0
 800703e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007064:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800706c:	2300      	movs	r3, #0
 800706e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007070:	2300      	movs	r3, #0
 8007072:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800707c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007080:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007082:	2300      	movs	r3, #0
 8007084:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007088:	2300      	movs	r3, #0
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007092:	2300      	movs	r3, #0
 8007094:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800709e:	2300      	movs	r3, #0
 80070a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80070a6:	2300      	movs	r3, #0
 80070a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80070bc:	2320      	movs	r3, #32
 80070be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80070ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80070d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070d8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80070e0:	2302      	movs	r3, #2
 80070e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80070fe:	2300      	movs	r3, #0
 8007100:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fde6 	bl	8006ce0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007114:	2301      	movs	r3, #1
 8007116:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007118:	2301      	movs	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007120:	2300      	movs	r3, #0
 8007122:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007126:	2300      	movs	r3, #0
 8007128:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800712a:	2300      	movs	r3, #0
 800712c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800712e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007132:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007134:	2300      	movs	r3, #0
 8007136:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800713c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800713e:	2300      	movs	r3, #0
 8007140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007144:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fee1 	bl	8006f18 <ETH_SetDMAConfig>
}
 8007156:	bf00      	nop
 8007158:	3790      	adds	r7, #144	; 0x90
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e01d      	b.n	80071a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68d9      	ldr	r1, [r3, #12]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4613      	mov	r3, r2
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	440b      	add	r3, r1
 800717c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2200      	movs	r2, #0
 8007194:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	3206      	adds	r2, #6
 800719e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d9de      	bls.n	800716c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	461a      	mov	r2, r3
 80071be:	2303      	movs	r3, #3
 80071c0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e023      	b.n	8007246 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6919      	ldr	r1, [r3, #16]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4613      	mov	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	4413      	add	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	440b      	add	r3, r1
 800720e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	3212      	adds	r2, #18
 800723c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d9d8      	bls.n	80071fe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007272:	461a      	mov	r2, r3
 8007274:	2303      	movs	r3, #3
 8007276:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b089      	sub	sp, #36	; 0x24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072ba:	4b89      	ldr	r3, [pc, #548]	; (80074e0 <HAL_GPIO_Init+0x234>)
 80072bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072be:	e194      	b.n	80075ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	2101      	movs	r1, #1
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	fa01 f303 	lsl.w	r3, r1, r3
 80072cc:	4013      	ands	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 8186 	beq.w	80075e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d005      	beq.n	80072f0 <HAL_GPIO_Init+0x44>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d130      	bne.n	8007352 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	2203      	movs	r2, #3
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	43db      	mvns	r3, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4013      	ands	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	4313      	orrs	r3, r2
 8007318:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007326:	2201      	movs	r2, #1
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	43db      	mvns	r3, r3
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	4013      	ands	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	f003 0201 	and.w	r2, r3, #1
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	4313      	orrs	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d017      	beq.n	800738e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	2203      	movs	r2, #3
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d123      	bne.n	80073e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	08da      	lsrs	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3208      	adds	r2, #8
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	220f      	movs	r2, #15
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	43db      	mvns	r3, r3
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	4013      	ands	r3, r2
 80073bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	08da      	lsrs	r2, r3, #3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3208      	adds	r2, #8
 80073dc:	69b9      	ldr	r1, [r7, #24]
 80073de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	2203      	movs	r2, #3
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	43db      	mvns	r3, r3
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4013      	ands	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 0203 	and.w	r2, r3, #3
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4313      	orrs	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80e0 	beq.w	80075e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007424:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <HAL_GPIO_Init+0x238>)
 8007426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800742a:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <HAL_GPIO_Init+0x238>)
 800742c:	f043 0302 	orr.w	r3, r3, #2
 8007430:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007434:	4b2b      	ldr	r3, [pc, #172]	; (80074e4 <HAL_GPIO_Init+0x238>)
 8007436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <HAL_GPIO_Init+0x23c>)
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	089b      	lsrs	r3, r3, #2
 8007448:	3302      	adds	r3, #2
 800744a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	220f      	movs	r2, #15
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	43db      	mvns	r3, r3
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	4013      	ands	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a20      	ldr	r2, [pc, #128]	; (80074ec <HAL_GPIO_Init+0x240>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d052      	beq.n	8007514 <HAL_GPIO_Init+0x268>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <HAL_GPIO_Init+0x244>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d031      	beq.n	80074da <HAL_GPIO_Init+0x22e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <HAL_GPIO_Init+0x248>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d02b      	beq.n	80074d6 <HAL_GPIO_Init+0x22a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <HAL_GPIO_Init+0x24c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d025      	beq.n	80074d2 <HAL_GPIO_Init+0x226>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <HAL_GPIO_Init+0x250>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01f      	beq.n	80074ce <HAL_GPIO_Init+0x222>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <HAL_GPIO_Init+0x254>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d019      	beq.n	80074ca <HAL_GPIO_Init+0x21e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <HAL_GPIO_Init+0x258>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d013      	beq.n	80074c6 <HAL_GPIO_Init+0x21a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <HAL_GPIO_Init+0x25c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00d      	beq.n	80074c2 <HAL_GPIO_Init+0x216>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a18      	ldr	r2, [pc, #96]	; (800750c <HAL_GPIO_Init+0x260>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d007      	beq.n	80074be <HAL_GPIO_Init+0x212>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a17      	ldr	r2, [pc, #92]	; (8007510 <HAL_GPIO_Init+0x264>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d101      	bne.n	80074ba <HAL_GPIO_Init+0x20e>
 80074b6:	2309      	movs	r3, #9
 80074b8:	e02d      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074ba:	230a      	movs	r3, #10
 80074bc:	e02b      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074be:	2308      	movs	r3, #8
 80074c0:	e029      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074c2:	2307      	movs	r3, #7
 80074c4:	e027      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074c6:	2306      	movs	r3, #6
 80074c8:	e025      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074ca:	2305      	movs	r3, #5
 80074cc:	e023      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074ce:	2304      	movs	r3, #4
 80074d0:	e021      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074d2:	2303      	movs	r3, #3
 80074d4:	e01f      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e01d      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074da:	2301      	movs	r3, #1
 80074dc:	e01b      	b.n	8007516 <HAL_GPIO_Init+0x26a>
 80074de:	bf00      	nop
 80074e0:	58000080 	.word	0x58000080
 80074e4:	58024400 	.word	0x58024400
 80074e8:	58000400 	.word	0x58000400
 80074ec:	58020000 	.word	0x58020000
 80074f0:	58020400 	.word	0x58020400
 80074f4:	58020800 	.word	0x58020800
 80074f8:	58020c00 	.word	0x58020c00
 80074fc:	58021000 	.word	0x58021000
 8007500:	58021400 	.word	0x58021400
 8007504:	58021800 	.word	0x58021800
 8007508:	58021c00 	.word	0x58021c00
 800750c:	58022000 	.word	0x58022000
 8007510:	58022400 	.word	0x58022400
 8007514:	2300      	movs	r3, #0
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	f002 0203 	and.w	r2, r2, #3
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	4093      	lsls	r3, r2
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4313      	orrs	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007526:	4938      	ldr	r1, [pc, #224]	; (8007608 <HAL_GPIO_Init+0x35c>)
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	3302      	adds	r3, #2
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800755a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	43db      	mvns	r3, r3
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	4013      	ands	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	43db      	mvns	r3, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	4013      	ands	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4013      	ands	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f47f ae63 	bne.w	80072c0 <HAL_GPIO_Init+0x14>
  }
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	3724      	adds	r7, #36	; 0x24
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	58000400 	.word	0x58000400

0800760c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	887b      	ldrh	r3, [r7, #2]
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	e001      	b.n	800762e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	807b      	strh	r3, [r7, #2]
 8007648:	4613      	mov	r3, r2
 800764a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800764c:	787b      	ldrb	r3, [r7, #1]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007652:	887a      	ldrh	r2, [r7, #2]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007658:	e003      	b.n	8007662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800765a:	887b      	ldrh	r3, [r7, #2]
 800765c:	041a      	lsls	r2, r3, #16
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	619a      	str	r2, [r3, #24]
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007680:	887a      	ldrh	r2, [r7, #2]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4013      	ands	r3, r2
 8007686:	041a      	lsls	r2, r3, #16
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	43d9      	mvns	r1, r3
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	400b      	ands	r3, r1
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	619a      	str	r2, [r3, #24]
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80076ac:	4a08      	ldr	r2, [pc, #32]	; (80076d0 <HAL_HSEM_FastTake+0x2c>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3320      	adds	r3, #32
 80076b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <HAL_HSEM_FastTake+0x30>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d101      	bne.n	80076c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e000      	b.n	80076c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	58026400 	.word	0x58026400
 80076d4:	80000300 	.word	0x80000300

080076d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80076e2:	4906      	ldr	r1, [pc, #24]	; (80076fc <HAL_HSEM_Release+0x24>)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	58026400 	.word	0x58026400

08007700 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b08f      	sub	sp, #60	; 0x3c
 8007704:	af0a      	add	r7, sp, #40	; 0x28
 8007706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e116      	b.n	8007940 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fc fc81 	bl	8004034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2203      	movs	r2, #3
 8007736:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f005 f977 	bl	800ca44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	687e      	ldr	r6, [r7, #4]
 800775e:	466d      	mov	r5, sp
 8007760:	f106 0410 	add.w	r4, r6, #16
 8007764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800776a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800776c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007770:	e885 0003 	stmia.w	r5, {r0, r1}
 8007774:	1d33      	adds	r3, r6, #4
 8007776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007778:	6838      	ldr	r0, [r7, #0]
 800777a:	f005 f8f5 	bl	800c968 <USB_CoreInit>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0d7      	b.n	8007940 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f005 f965 	bl	800ca66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e04a      	b.n	8007838 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	333d      	adds	r3, #61	; 0x3d
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	333c      	adds	r3, #60	; 0x3c
 80077c6:	7bfa      	ldrb	r2, [r7, #15]
 80077c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077ca:	7bfa      	ldrb	r2, [r7, #15]
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	b298      	uxth	r0, r3
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3344      	adds	r3, #68	; 0x44
 80077de:	4602      	mov	r2, r0
 80077e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	3340      	adds	r3, #64	; 0x40
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3348      	adds	r3, #72	; 0x48
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800780a:	7bfa      	ldrb	r2, [r7, #15]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	334c      	adds	r3, #76	; 0x4c
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800781e:	7bfa      	ldrb	r2, [r7, #15]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	3354      	adds	r3, #84	; 0x54
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	3301      	adds	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	7bfa      	ldrb	r2, [r7, #15]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3af      	bcc.n	80077a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	e044      	b.n	80078d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007848:	7bfa      	ldrb	r2, [r7, #15]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800785e:	7bfa      	ldrb	r2, [r7, #15]
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007870:	7bfa      	ldrb	r2, [r7, #15]
 8007872:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007874:	7bfa      	ldrb	r2, [r7, #15]
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800788a:	7bfa      	ldrb	r2, [r7, #15]
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078b6:	7bfa      	ldrb	r2, [r7, #15]
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	3301      	adds	r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]
 80078d2:	7bfa      	ldrb	r2, [r7, #15]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d3b5      	bcc.n	8007848 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	687e      	ldr	r6, [r7, #4]
 80078e4:	466d      	mov	r5, sp
 80078e6:	f106 0410 	add.w	r4, r6, #16
 80078ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80078fa:	1d33      	adds	r3, r6, #4
 80078fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078fe:	6838      	ldr	r0, [r7, #0]
 8007900:	f005 f8fe 	bl	800cb00 <USB_DevInit>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e014      	b.n	8007940 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	2b01      	cmp	r3, #1
 800792c:	d102      	bne.n	8007934 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f80a 	bl	8007948 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f005 fabc 	bl	800ceb6 <USB_DevDisconnect>

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007948 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_PCDEx_ActivateLPM+0x44>)
 8007978:	4313      	orrs	r3, r2
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	10000003 	.word	0x10000003

08007990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007998:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d00a      	beq.n	80079ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079a4:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e040      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e03e      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079ba:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80079c2:	491f      	ldr	r1, [pc, #124]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079ca:	f7fc fcc5 	bl	8004358 <HAL_GetTick>
 80079ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079d0:	e009      	b.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079d2:	f7fc fcc1 	bl	8004358 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e0:	d901      	bls.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e028      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f2:	d1ee      	bne.n	80079d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b1e      	cmp	r3, #30
 80079f8:	d008      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b2e      	cmp	r3, #46	; 0x2e
 80079fe:	d005      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b1d      	cmp	r3, #29
 8007a04:	d002      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b2d      	cmp	r3, #45	; 0x2d
 8007a0a:	d114      	bne.n	8007a36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007a0c:	f7fc fca4 	bl	8004358 <HAL_GetTick>
 8007a10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a12:	e009      	b.n	8007a28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a14:	f7fc fca0 	bl	8004358 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a22:	d901      	bls.n	8007a28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e007      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a34:	d1ee      	bne.n	8007a14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024800 	.word	0x58024800

08007a44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4a04      	ldr	r2, [pc, #16]	; (8007a60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a52:	60d3      	str	r3, [r2, #12]
}
 8007a54:	bf00      	nop
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	58024800 	.word	0x58024800

08007a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	; 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f000 bc1d 	b.w	80082b2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8087 	beq.w	8007b94 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a86:	4b99      	ldr	r3, [pc, #612]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a90:	4b96      	ldr	r3, [pc, #600]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d007      	beq.n	8007aac <HAL_RCC_OscConfig+0x48>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b18      	cmp	r3, #24
 8007aa0:	d110      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x60>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d10b      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aac:	4b8f      	ldr	r3, [pc, #572]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d06c      	beq.n	8007b92 <HAL_RCC_OscConfig+0x12e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d168      	bne.n	8007b92 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e3f6      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d106      	bne.n	8007adc <HAL_RCC_OscConfig+0x78>
 8007ace:	4b87      	ldr	r3, [pc, #540]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a86      	ldr	r2, [pc, #536]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	e02e      	b.n	8007b3a <HAL_RCC_OscConfig+0xd6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10c      	bne.n	8007afe <HAL_RCC_OscConfig+0x9a>
 8007ae4:	4b81      	ldr	r3, [pc, #516]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a80      	ldr	r2, [pc, #512]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4b7e      	ldr	r3, [pc, #504]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a7d      	ldr	r2, [pc, #500]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e01d      	b.n	8007b3a <HAL_RCC_OscConfig+0xd6>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b06:	d10c      	bne.n	8007b22 <HAL_RCC_OscConfig+0xbe>
 8007b08:	4b78      	ldr	r3, [pc, #480]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a77      	ldr	r2, [pc, #476]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4b75      	ldr	r3, [pc, #468]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a74      	ldr	r2, [pc, #464]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	e00b      	b.n	8007b3a <HAL_RCC_OscConfig+0xd6>
 8007b22:	4b72      	ldr	r3, [pc, #456]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a71      	ldr	r2, [pc, #452]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b6f      	ldr	r3, [pc, #444]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a6e      	ldr	r2, [pc, #440]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b42:	f7fc fc09 	bl	8004358 <HAL_GetTick>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b4a:	f7fc fc05 	bl	8004358 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b64      	cmp	r3, #100	; 0x64
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e3aa      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b5c:	4b63      	ldr	r3, [pc, #396]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCC_OscConfig+0xe6>
 8007b68:	e014      	b.n	8007b94 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6a:	f7fc fbf5 	bl	8004358 <HAL_GetTick>
 8007b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b72:	f7fc fbf1 	bl	8004358 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b64      	cmp	r3, #100	; 0x64
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e396      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b84:	4b59      	ldr	r3, [pc, #356]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f0      	bne.n	8007b72 <HAL_RCC_OscConfig+0x10e>
 8007b90:	e000      	b.n	8007b94 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80cb 	beq.w	8007d38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba2:	4b52      	ldr	r3, [pc, #328]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007baa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bac:	4b4f      	ldr	r3, [pc, #316]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x164>
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	2b18      	cmp	r3, #24
 8007bbc:	d156      	bne.n	8007c6c <HAL_RCC_OscConfig+0x208>
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d151      	bne.n	8007c6c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bc8:	4b48      	ldr	r3, [pc, #288]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_RCC_OscConfig+0x17c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e368      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007be0:	4b42      	ldr	r3, [pc, #264]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f023 0219 	bic.w	r2, r3, #25
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	493f      	ldr	r1, [pc, #252]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bf2:	f7fc fbb1 	bl	8004358 <HAL_GetTick>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bfa:	f7fc fbad 	bl	8004358 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e352      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c0c:	4b37      	ldr	r3, [pc, #220]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c18:	f7fc fbce 	bl	80043b8 <HAL_GetREVID>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d817      	bhi.n	8007c56 <HAL_RCC_OscConfig+0x1f2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d108      	bne.n	8007c40 <HAL_RCC_OscConfig+0x1dc>
 8007c2e:	4b2f      	ldr	r3, [pc, #188]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c36:	4a2d      	ldr	r2, [pc, #180]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c3c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c3e:	e07b      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c40:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	4927      	ldr	r1, [pc, #156]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c54:	e070      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c56:	4b25      	ldr	r3, [pc, #148]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	061b      	lsls	r3, r3, #24
 8007c64:	4921      	ldr	r1, [pc, #132]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c6a:	e065      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d048      	beq.n	8007d06 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c74:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f023 0219 	bic.w	r2, r3, #25
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	491a      	ldr	r1, [pc, #104]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c86:	f7fc fb67 	bl	8004358 <HAL_GetTick>
 8007c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c8e:	f7fc fb63 	bl	8004358 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e308      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca0:	4b12      	ldr	r3, [pc, #72]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cac:	f7fc fb84 	bl	80043b8 <HAL_GetREVID>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d81a      	bhi.n	8007cf0 <HAL_RCC_OscConfig+0x28c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d108      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x270>
 8007cc2:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cca:	4a08      	ldr	r2, [pc, #32]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd0:	6053      	str	r3, [r2, #4]
 8007cd2:	e031      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	4902      	ldr	r1, [pc, #8]	; (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	604b      	str	r3, [r1, #4]
 8007ce8:	e026      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cea:	bf00      	nop
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	4997      	ldr	r1, [pc, #604]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	604b      	str	r3, [r1, #4]
 8007d04:	e018      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d06:	4b95      	ldr	r3, [pc, #596]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a94      	ldr	r2, [pc, #592]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d12:	f7fc fb21 	bl	8004358 <HAL_GetTick>
 8007d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d18:	e008      	b.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d1a:	f7fc fb1d 	bl	8004358 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e2c2      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d2c:	4b8b      	ldr	r3, [pc, #556]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f0      	bne.n	8007d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a9 	beq.w	8007e98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d46:	4b85      	ldr	r3, [pc, #532]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d50:	4b82      	ldr	r3, [pc, #520]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCC_OscConfig+0x308>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b18      	cmp	r3, #24
 8007d60:	d13a      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d135      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d6c:	4b7b      	ldr	r3, [pc, #492]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e296      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d84:	f7fc fb18 	bl	80043b8 <HAL_GetREVID>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d817      	bhi.n	8007dc2 <HAL_RCC_OscConfig+0x35e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d108      	bne.n	8007dac <HAL_RCC_OscConfig+0x348>
 8007d9a:	4b70      	ldr	r3, [pc, #448]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007da2:	4a6e      	ldr	r2, [pc, #440]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007daa:	e075      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dac:	4b6b      	ldr	r3, [pc, #428]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	069b      	lsls	r3, r3, #26
 8007dba:	4968      	ldr	r1, [pc, #416]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc0:	e06a      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc2:	4b66      	ldr	r3, [pc, #408]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	4962      	ldr	r1, [pc, #392]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dd6:	e05f      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d042      	beq.n	8007e66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007de0:	4b5e      	ldr	r3, [pc, #376]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5d      	ldr	r2, [pc, #372]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fc fab4 	bl	8004358 <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007df4:	f7fc fab0 	bl	8004358 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e255      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e06:	4b55      	ldr	r3, [pc, #340]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e12:	f7fc fad1 	bl	80043b8 <HAL_GetREVID>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d817      	bhi.n	8007e50 <HAL_RCC_OscConfig+0x3ec>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d108      	bne.n	8007e3a <HAL_RCC_OscConfig+0x3d6>
 8007e28:	4b4c      	ldr	r3, [pc, #304]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e30:	4a4a      	ldr	r2, [pc, #296]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e02e      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e3a:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	069b      	lsls	r3, r3, #26
 8007e48:	4944      	ldr	r1, [pc, #272]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	604b      	str	r3, [r1, #4]
 8007e4e:	e023      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e50:	4b42      	ldr	r3, [pc, #264]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	493f      	ldr	r1, [pc, #252]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60cb      	str	r3, [r1, #12]
 8007e64:	e018      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e66:	4b3d      	ldr	r3, [pc, #244]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3c      	ldr	r2, [pc, #240]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e72:	f7fc fa71 	bl	8004358 <HAL_GetTick>
 8007e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e78:	e008      	b.n	8007e8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e7a:	f7fc fa6d 	bl	8004358 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e212      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e8c:	4b33      	ldr	r3, [pc, #204]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f0      	bne.n	8007e7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d036      	beq.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d019      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eac:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fc fa4e 	bl	8004358 <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fc fa4a 	bl	8004358 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e1ef      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ed2:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x45c>
 8007ede:	e018      	b.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eec:	f7fc fa34 	bl	8004358 <HAL_GetTick>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ef4:	f7fc fa30 	bl	8004358 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e1d5      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d039      	beq.n	8007f92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01c      	beq.n	8007f60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f32:	f7fc fa11 	bl	8004358 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f3a:	f7fc fa0d 	bl	8004358 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e1b2      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x4d6>
 8007f58:	e01b      	b.n	8007f92 <HAL_RCC_OscConfig+0x52e>
 8007f5a:	bf00      	nop
 8007f5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f60:	4b9b      	ldr	r3, [pc, #620]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a9a      	ldr	r2, [pc, #616]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f6c:	f7fc f9f4 	bl	8004358 <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f74:	f7fc f9f0 	bl	8004358 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e195      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f86:	4b92      	ldr	r3, [pc, #584]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8081 	beq.w	80080a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fa0:	4b8c      	ldr	r3, [pc, #560]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a8b      	ldr	r2, [pc, #556]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fac:	f7fc f9d4 	bl	8004358 <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007fb4:	f7fc f9d0 	bl	8004358 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e175      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc6:	4b83      	ldr	r3, [pc, #524]	; (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x584>
 8007fda:	4b7d      	ldr	r3, [pc, #500]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	4a7c      	ldr	r2, [pc, #496]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe6:	e02d      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <HAL_RCC_OscConfig+0x5a6>
 8007ff0:	4b77      	ldr	r3, [pc, #476]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	4a76      	ldr	r2, [pc, #472]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffc:	4b74      	ldr	r3, [pc, #464]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	4a73      	ldr	r2, [pc, #460]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008002:	f023 0304 	bic.w	r3, r3, #4
 8008006:	6713      	str	r3, [r2, #112]	; 0x70
 8008008:	e01c      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d10c      	bne.n	800802c <HAL_RCC_OscConfig+0x5c8>
 8008012:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4a6e      	ldr	r2, [pc, #440]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008018:	f043 0304 	orr.w	r3, r3, #4
 800801c:	6713      	str	r3, [r2, #112]	; 0x70
 800801e:	4b6c      	ldr	r3, [pc, #432]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	4a6b      	ldr	r2, [pc, #428]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6713      	str	r3, [r2, #112]	; 0x70
 800802a:	e00b      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800802c:	4b68      	ldr	r3, [pc, #416]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008030:	4a67      	ldr	r2, [pc, #412]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	; 0x70
 8008038:	4b65      	ldr	r3, [pc, #404]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	4a64      	ldr	r2, [pc, #400]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d015      	beq.n	8008078 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804c:	f7fc f984 	bl	8004358 <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008052:	e00a      	b.n	800806a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008054:	f7fc f980 	bl	8004358 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e123      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806a:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0ee      	beq.n	8008054 <HAL_RCC_OscConfig+0x5f0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fc f96e 	bl	8004358 <HAL_GetTick>
 800807c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800807e:	e00a      	b.n	8008096 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008080:	f7fc f96a 	bl	8004358 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	f241 3288 	movw	r2, #5000	; 0x1388
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e10d      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008096:	4b4e      	ldr	r3, [pc, #312]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ee      	bne.n	8008080 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 8102 	beq.w	80082b0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080ac:	4b48      	ldr	r3, [pc, #288]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080b4:	2b18      	cmp	r3, #24
 80080b6:	f000 80bd 	beq.w	8008234 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f040 809e 	bne.w	8008200 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a41      	ldr	r2, [pc, #260]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fc f942 	bl	8004358 <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080d8:	f7fc f93e 	bl	8004358 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e0e3      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080f6:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fa:	4b37      	ldr	r3, [pc, #220]	; (80081d8 <HAL_RCC_OscConfig+0x774>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008106:	0112      	lsls	r2, r2, #4
 8008108:	430a      	orrs	r2, r1
 800810a:	4931      	ldr	r1, [pc, #196]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	628b      	str	r3, [r1, #40]	; 0x28
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	3b01      	subs	r3, #1
 8008116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	3b01      	subs	r3, #1
 8008120:	025b      	lsls	r3, r3, #9
 8008122:	b29b      	uxth	r3, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008138:	3b01      	subs	r3, #1
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008140:	4923      	ldr	r1, [pc, #140]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008146:	4b22      	ldr	r3, [pc, #136]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a21      	ldr	r2, [pc, #132]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008152:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008156:	4b21      	ldr	r3, [pc, #132]	; (80081dc <HAL_RCC_OscConfig+0x778>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800815e:	00d2      	lsls	r2, r2, #3
 8008160:	491b      	ldr	r1, [pc, #108]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008166:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	f023 020c 	bic.w	r2, r3, #12
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	4917      	ldr	r1, [pc, #92]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	f023 0202 	bic.w	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008184:	4912      	ldr	r1, [pc, #72]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008186:	4313      	orrs	r3, r2
 8008188:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008196:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800819c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	4a0a      	ldr	r2, [pc, #40]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c6:	f7fc f8c7 	bl	8004358 <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081cc:	e011      	b.n	80081f2 <HAL_RCC_OscConfig+0x78e>
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58024800 	.word	0x58024800
 80081d8:	fffffc0c 	.word	0xfffffc0c
 80081dc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fc f8ba 	bl	8004358 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e05f      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081f2:	4b32      	ldr	r3, [pc, #200]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f0      	beq.n	80081e0 <HAL_RCC_OscConfig+0x77c>
 80081fe:	e057      	b.n	80082b0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008200:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a2d      	ldr	r2, [pc, #180]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 8008206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800820a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fc f8a4 	bl	8004358 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008214:	f7fc f8a0 	bl	8004358 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e045      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008226:	4b25      	ldr	r3, [pc, #148]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f0      	bne.n	8008214 <HAL_RCC_OscConfig+0x7b0>
 8008232:	e03d      	b.n	80082b0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008234:	4b21      	ldr	r3, [pc, #132]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800823a:	4b20      	ldr	r3, [pc, #128]	; (80082bc <HAL_RCC_OscConfig+0x858>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b01      	cmp	r3, #1
 8008246:	d031      	beq.n	80082ac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f003 0203 	and.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d12a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d122      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008272:	429a      	cmp	r2, r3
 8008274:	d11a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	0a5b      	lsrs	r3, r3, #9
 800827a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d111      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d108      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400

080082c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e19c      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082d4:	4b8a      	ldr	r3, [pc, #552]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 030f 	and.w	r3, r3, #15
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d910      	bls.n	8008304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e2:	4b87      	ldr	r3, [pc, #540]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f023 020f 	bic.w	r2, r3, #15
 80082ea:	4985      	ldr	r1, [pc, #532]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f2:	4b83      	ldr	r3, [pc, #524]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d001      	beq.n	8008304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e184      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	d010      	beq.n	8008332 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	4b7b      	ldr	r3, [pc, #492]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800831c:	429a      	cmp	r2, r3
 800831e:	d908      	bls.n	8008332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008320:	4b78      	ldr	r3, [pc, #480]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	4975      	ldr	r1, [pc, #468]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800832e:	4313      	orrs	r3, r2
 8008330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d010      	beq.n	8008360 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	4b70      	ldr	r3, [pc, #448]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800834a:	429a      	cmp	r2, r3
 800834c:	d908      	bls.n	8008360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800834e:	4b6d      	ldr	r3, [pc, #436]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	496a      	ldr	r1, [pc, #424]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800835c:	4313      	orrs	r3, r2
 800835e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	4b64      	ldr	r3, [pc, #400]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008378:	429a      	cmp	r2, r3
 800837a:	d908      	bls.n	800838e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800837c:	4b61      	ldr	r3, [pc, #388]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	495e      	ldr	r1, [pc, #376]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800838a:	4313      	orrs	r3, r2
 800838c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	d010      	beq.n	80083bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69da      	ldr	r2, [r3, #28]
 800839e:	4b59      	ldr	r3, [pc, #356]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d908      	bls.n	80083bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80083aa:	4b56      	ldr	r3, [pc, #344]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	4953      	ldr	r1, [pc, #332]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	4b4d      	ldr	r3, [pc, #308]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d908      	bls.n	80083ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d8:	4b4a      	ldr	r3, [pc, #296]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f023 020f 	bic.w	r2, r3, #15
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4947      	ldr	r1, [pc, #284]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d055      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083f6:	4b43      	ldr	r3, [pc, #268]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	4940      	ldr	r1, [pc, #256]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008404:	4313      	orrs	r3, r2
 8008406:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d107      	bne.n	8008420 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008410:	4b3c      	ldr	r3, [pc, #240]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d121      	bne.n	8008460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e0f6      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b03      	cmp	r3, #3
 8008426:	d107      	bne.n	8008438 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008428:	4b36      	ldr	r3, [pc, #216]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d115      	bne.n	8008460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e0ea      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d107      	bne.n	8008450 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008440:	4b30      	ldr	r3, [pc, #192]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e0de      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008450:	4b2c      	ldr	r3, [pc, #176]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0d6      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008460:	4b28      	ldr	r3, [pc, #160]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f023 0207 	bic.w	r2, r3, #7
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4925      	ldr	r1, [pc, #148]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 800846e:	4313      	orrs	r3, r2
 8008470:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008472:	f7fb ff71 	bl	8004358 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008478:	e00a      	b.n	8008490 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800847a:	f7fb ff6d 	bl	8004358 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	f241 3288 	movw	r2, #5000	; 0x1388
 8008488:	4293      	cmp	r3, r2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e0be      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008490:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	429a      	cmp	r2, r3
 80084a0:	d1eb      	bne.n	800847a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d208      	bcs.n	80084d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f023 020f 	bic.w	r2, r3, #15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	490e      	ldr	r1, [pc, #56]	; (8008504 <HAL_RCC_ClockConfig+0x244>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d214      	bcs.n	8008508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 020f 	bic.w	r2, r3, #15
 80084e6:	4906      	ldr	r1, [pc, #24]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ee:	4b04      	ldr	r3, [pc, #16]	; (8008500 <HAL_RCC_ClockConfig+0x240>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d005      	beq.n	8008508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e086      	b.n	800860e <HAL_RCC_ClockConfig+0x34e>
 8008500:	52002000 	.word	0x52002000
 8008504:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d010      	beq.n	8008536 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	4b3f      	ldr	r3, [pc, #252]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008520:	429a      	cmp	r2, r3
 8008522:	d208      	bcs.n	8008536 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008524:	4b3c      	ldr	r3, [pc, #240]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	4939      	ldr	r1, [pc, #228]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008532:	4313      	orrs	r3, r2
 8008534:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	4b34      	ldr	r3, [pc, #208]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800854e:	429a      	cmp	r2, r3
 8008550:	d208      	bcs.n	8008564 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008552:	4b31      	ldr	r3, [pc, #196]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	492e      	ldr	r1, [pc, #184]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008560:	4313      	orrs	r3, r2
 8008562:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b00      	cmp	r3, #0
 800856e:	d010      	beq.n	8008592 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699a      	ldr	r2, [r3, #24]
 8008574:	4b28      	ldr	r3, [pc, #160]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800857c:	429a      	cmp	r2, r3
 800857e:	d208      	bcs.n	8008592 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008580:	4b25      	ldr	r3, [pc, #148]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	4922      	ldr	r1, [pc, #136]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 800858e:	4313      	orrs	r3, r2
 8008590:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d010      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69da      	ldr	r2, [r3, #28]
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d208      	bcs.n	80085c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085ae:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	4917      	ldr	r1, [pc, #92]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80085c0:	f000 f834 	bl	800862c <HAL_RCC_GetSysClockFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	4912      	ldr	r1, [pc, #72]	; (800861c <HAL_RCC_ClockConfig+0x35c>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
 80085dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <HAL_RCC_ClockConfig+0x358>)
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	4a0d      	ldr	r2, [pc, #52]	; (800861c <HAL_RCC_ClockConfig+0x35c>)
 80085e8:	5cd3      	ldrb	r3, [r2, r3]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	fa22 f303 	lsr.w	r3, r2, r3
 80085f4:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <HAL_RCC_ClockConfig+0x360>)
 80085f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085f8:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <HAL_RCC_ClockConfig+0x364>)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085fe:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <HAL_RCC_ClockConfig+0x368>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7fb fe5e 	bl	80042c4 <HAL_InitTick>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	58024400 	.word	0x58024400
 800861c:	0800da34 	.word	0x0800da34
 8008620:	24000008 	.word	0x24000008
 8008624:	24000004 	.word	0x24000004
 8008628:	2400001c 	.word	0x2400001c

0800862c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800862c:	b480      	push	{r7}
 800862e:	b089      	sub	sp, #36	; 0x24
 8008630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008632:	4bb3      	ldr	r3, [pc, #716]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800863a:	2b18      	cmp	r3, #24
 800863c:	f200 8155 	bhi.w	80088ea <HAL_RCC_GetSysClockFreq+0x2be>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	080086ad 	.word	0x080086ad
 800864c:	080088eb 	.word	0x080088eb
 8008650:	080088eb 	.word	0x080088eb
 8008654:	080088eb 	.word	0x080088eb
 8008658:	080088eb 	.word	0x080088eb
 800865c:	080088eb 	.word	0x080088eb
 8008660:	080088eb 	.word	0x080088eb
 8008664:	080088eb 	.word	0x080088eb
 8008668:	080086d3 	.word	0x080086d3
 800866c:	080088eb 	.word	0x080088eb
 8008670:	080088eb 	.word	0x080088eb
 8008674:	080088eb 	.word	0x080088eb
 8008678:	080088eb 	.word	0x080088eb
 800867c:	080088eb 	.word	0x080088eb
 8008680:	080088eb 	.word	0x080088eb
 8008684:	080088eb 	.word	0x080088eb
 8008688:	080086d9 	.word	0x080086d9
 800868c:	080088eb 	.word	0x080088eb
 8008690:	080088eb 	.word	0x080088eb
 8008694:	080088eb 	.word	0x080088eb
 8008698:	080088eb 	.word	0x080088eb
 800869c:	080088eb 	.word	0x080088eb
 80086a0:	080088eb 	.word	0x080088eb
 80086a4:	080088eb 	.word	0x080088eb
 80086a8:	080086df 	.word	0x080086df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ac:	4b94      	ldr	r3, [pc, #592]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086b8:	4b91      	ldr	r3, [pc, #580]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	08db      	lsrs	r3, r3, #3
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	4a90      	ldr	r2, [pc, #576]	; (8008904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80086ca:	e111      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086cc:	4b8d      	ldr	r3, [pc, #564]	; (8008904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086ce:	61bb      	str	r3, [r7, #24]
    break;
 80086d0:	e10e      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80086d2:	4b8d      	ldr	r3, [pc, #564]	; (8008908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086d4:	61bb      	str	r3, [r7, #24]
    break;
 80086d6:	e10b      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80086d8:	4b8c      	ldr	r3, [pc, #560]	; (800890c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086da:	61bb      	str	r3, [r7, #24]
    break;
 80086dc:	e108      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086de:	4b88      	ldr	r3, [pc, #544]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80086e8:	4b85      	ldr	r3, [pc, #532]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086f4:	4b82      	ldr	r3, [pc, #520]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086fe:	4b80      	ldr	r3, [pc, #512]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	08db      	lsrs	r3, r3, #3
 8008704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80e1 	beq.w	80088e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b02      	cmp	r3, #2
 8008726:	f000 8083 	beq.w	8008830 <HAL_RCC_GetSysClockFreq+0x204>
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b02      	cmp	r3, #2
 800872e:	f200 80a1 	bhi.w	8008874 <HAL_RCC_GetSysClockFreq+0x248>
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_RCC_GetSysClockFreq+0x114>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d056      	beq.n	80087ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800873e:	e099      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	4b6f      	ldr	r3, [pc, #444]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d02d      	beq.n	80087a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800874c:	4b6c      	ldr	r3, [pc, #432]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a6b      	ldr	r2, [pc, #428]	; (8008904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008776:	4b62      	ldr	r3, [pc, #392]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008786:	ed97 6a02 	vldr	s12, [r7, #8]
 800878a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80087a6:	e087      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008914 <HAL_RCC_GetSysClockFreq+0x2e8>
 80087b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ba:	4b51      	ldr	r3, [pc, #324]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008910 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ea:	e065      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008918 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fe:	4b40      	ldr	r3, [pc, #256]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008812:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008910 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882e:	e043      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800891c <HAL_RCC_GetSysClockFreq+0x2f0>
 800883e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008842:	4b2f      	ldr	r3, [pc, #188]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	ed97 6a02 	vldr	s12, [r7, #8]
 8008856:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800885a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008872:	e021      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008918 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008896:	ed97 6a02 	vldr	s12, [r7, #8]
 800889a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80088b8:	4b11      	ldr	r3, [pc, #68]	; (8008900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	0a5b      	lsrs	r3, r3, #9
 80088be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c2:	3301      	adds	r3, #1
 80088c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088dc:	ee17 3a90 	vmov	r3, s15
 80088e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80088e2:	e005      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
    break;
 80088e8:	e002      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80088ea:	4b07      	ldr	r3, [pc, #28]	; (8008908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088ec:	61bb      	str	r3, [r7, #24]
    break;
 80088ee:	bf00      	nop
  }

  return sysclockfreq;
 80088f0:	69bb      	ldr	r3, [r7, #24]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3724      	adds	r7, #36	; 0x24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
 8008904:	03d09000 	.word	0x03d09000
 8008908:	003d0900 	.word	0x003d0900
 800890c:	007a1200 	.word	0x007a1200
 8008910:	46000000 	.word	0x46000000
 8008914:	4c742400 	.word	0x4c742400
 8008918:	4a742400 	.word	0x4a742400
 800891c:	4af42400 	.word	0x4af42400

08008920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008926:	f7ff fe81 	bl	800862c <HAL_RCC_GetSysClockFreq>
 800892a:	4602      	mov	r2, r0
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <HAL_RCC_GetHCLKFreq+0x50>)
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	0a1b      	lsrs	r3, r3, #8
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	490f      	ldr	r1, [pc, #60]	; (8008974 <HAL_RCC_GetHCLKFreq+0x54>)
 8008938:	5ccb      	ldrb	r3, [r1, r3]
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <HAL_RCC_GetHCLKFreq+0x50>)
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	4a09      	ldr	r2, [pc, #36]	; (8008974 <HAL_RCC_GetHCLKFreq+0x54>)
 800894e:	5cd3      	ldrb	r3, [r2, r3]
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	fa22 f303 	lsr.w	r3, r2, r3
 800895a:	4a07      	ldr	r2, [pc, #28]	; (8008978 <HAL_RCC_GetHCLKFreq+0x58>)
 800895c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800895e:	4a07      	ldr	r2, [pc, #28]	; (800897c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008964:	4b04      	ldr	r3, [pc, #16]	; (8008978 <HAL_RCC_GetHCLKFreq+0x58>)
 8008966:	681b      	ldr	r3, [r3, #0]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	58024400 	.word	0x58024400
 8008974:	0800da34 	.word	0x0800da34
 8008978:	24000008 	.word	0x24000008
 800897c:	24000004 	.word	0x24000004

08008980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008984:	f7ff ffcc 	bl	8008920 <HAL_RCC_GetHCLKFreq>
 8008988:	4602      	mov	r2, r0
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	4904      	ldr	r1, [pc, #16]	; (80089a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008996:	5ccb      	ldrb	r3, [r1, r3]
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	58024400 	.word	0x58024400
 80089a8:	0800da34 	.word	0x0800da34

080089ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80089b0:	f7ff ffb6 	bl	8008920 <HAL_RCC_GetHCLKFreq>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	4904      	ldr	r1, [pc, #16]	; (80089d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089c2:	5ccb      	ldrb	r3, [r1, r3]
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	58024400 	.word	0x58024400
 80089d4:	0800da34 	.word	0x0800da34

080089d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80089e0:	2300      	movs	r3, #0
 80089e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089e4:	2300      	movs	r3, #0
 80089e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d03f      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089fc:	d02a      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80089fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a02:	d824      	bhi.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a08:	d018      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a0e:	d81e      	bhi.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a18:	d007      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a1a:	e018      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a1c:	4ba3      	ldr	r3, [pc, #652]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4aa2      	ldr	r2, [pc, #648]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a28:	e015      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	2102      	movs	r1, #2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 f9d5 	bl	8009de0 <RCCEx_PLL2_Config>
 8008a36:	4603      	mov	r3, r0
 8008a38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a3a:	e00c      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3324      	adds	r3, #36	; 0x24
 8008a40:	2102      	movs	r1, #2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 fa7e 	bl	8009f44 <RCCEx_PLL3_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a4c:	e003      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
      break;
 8008a52:	e000      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d109      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a5c:	4b93      	ldr	r3, [pc, #588]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a68:	4990      	ldr	r1, [pc, #576]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8008a6e:	e001      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d03d      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d826      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa5 	.word	0x08008aa5
 8008a94:	08008ab3 	.word	0x08008ab3
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	08008add 	.word	0x08008add
 8008aa0:	08008add 	.word	0x08008add
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa4:	4b81      	ldr	r3, [pc, #516]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4a80      	ldr	r2, [pc, #512]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ab0:	e015      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 f991 	bl	8009de0 <RCCEx_PLL2_Config>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ac2:	e00c      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 fa3a 	bl	8009f44 <RCCEx_PLL3_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ad4:	e003      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ada:	e000      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d109      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ae4:	4b71      	ldr	r3, [pc, #452]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae8:	f023 0207 	bic.w	r2, r3, #7
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af0:	496e      	ldr	r1, [pc, #440]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	650b      	str	r3, [r1, #80]	; 0x50
 8008af6:	e001      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d042      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b10:	d02b      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b16:	d825      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b18:	2bc0      	cmp	r3, #192	; 0xc0
 8008b1a:	d028      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b1e:	d821      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d016      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008b24:	2b80      	cmp	r3, #128	; 0x80
 8008b26:	d81d      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d007      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008b30:	e018      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b32:	4b5e      	ldr	r3, [pc, #376]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	4a5d      	ldr	r2, [pc, #372]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b3e:	e017      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3304      	adds	r3, #4
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 f94a 	bl	8009de0 <RCCEx_PLL2_Config>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b50:	e00e      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3324      	adds	r3, #36	; 0x24
 8008b56:	2100      	movs	r1, #0
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 f9f3 	bl	8009f44 <RCCEx_PLL3_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b62:	e005      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
      break;
 8008b68:	e002      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b6a:	bf00      	nop
 8008b6c:	e000      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d109      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b76:	4b4d      	ldr	r3, [pc, #308]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b82:	494a      	ldr	r1, [pc, #296]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	650b      	str	r3, [r1, #80]	; 0x50
 8008b88:	e001      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d049      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ba4:	d030      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008baa:	d82a      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bb0:	d02c      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008bb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bb6:	d824      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bbc:	d018      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc2:	d81e      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bcc:	d007      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008bce:	e018      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd0:	4b36      	ldr	r3, [pc, #216]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4a35      	ldr	r2, [pc, #212]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bdc:	e017      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	2100      	movs	r1, #0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f8fb 	bl	8009de0 <RCCEx_PLL2_Config>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008bee:	e00e      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3324      	adds	r3, #36	; 0x24
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 f9a4 	bl	8009f44 <RCCEx_PLL3_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c00:	e005      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]
      break;
 8008c06:	e002      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c08:	bf00      	nop
 8008c0a:	e000      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c14:	4b25      	ldr	r3, [pc, #148]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c22:	4922      	ldr	r1, [pc, #136]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	658b      	str	r3, [r1, #88]	; 0x58
 8008c28:	e001      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d04b      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c44:	d030      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c4a:	d82a      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c50:	d02e      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c56:	d824      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c5c:	d018      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c62:	d81e      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c6c:	d007      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c6e:	e018      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c70:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4a0d      	ldr	r2, [pc, #52]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c7c:	e019      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 f8ab 	bl	8009de0 <RCCEx_PLL2_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c8e:	e010      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3324      	adds	r3, #36	; 0x24
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 f954 	bl	8009f44 <RCCEx_PLL3_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ca0:	e007      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca6:	e004      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008ca8:	bf00      	nop
 8008caa:	e002      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008cac:	58024400 	.word	0x58024400
      break;
 8008cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cb8:	4b99      	ldr	r3, [pc, #612]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cc6:	4996      	ldr	r1, [pc, #600]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	658b      	str	r3, [r1, #88]	; 0x58
 8008ccc:	e001      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d032      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ce2:	2b30      	cmp	r3, #48	; 0x30
 8008ce4:	d01c      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008ce6:	2b30      	cmp	r3, #48	; 0x30
 8008ce8:	d817      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d00c      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d813      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d016      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d10f      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfa:	4b89      	ldr	r3, [pc, #548]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a88      	ldr	r2, [pc, #544]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d06:	e00e      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f866 	bl	8009de0 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d18:	e005      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1e:	e002      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d2c:	4b7c      	ldr	r3, [pc, #496]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d38:	4979      	ldr	r1, [pc, #484]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d3e:	e001      	b.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d047      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d58:	d030      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d5e:	d82a      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d64:	d02c      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008d66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d6a:	d824      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d70:	d018      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d76:	d81e      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d80:	d007      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008d82:	e018      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b66      	ldr	r3, [pc, #408]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a65      	ldr	r2, [pc, #404]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d90:	e017      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3304      	adds	r3, #4
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f821 	bl	8009de0 <RCCEx_PLL2_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008da2:	e00e      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 f8ca 	bl	8009f44 <RCCEx_PLL3_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008db4:	e005      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d109      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dc8:	4b55      	ldr	r3, [pc, #340]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd4:	4952      	ldr	r1, [pc, #328]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8008dda:	e001      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d049      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df4:	d02e      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dfa:	d828      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008dfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e00:	d02a      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e06:	d822      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e0c:	d026      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e12:	d81c      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e18:	d010      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e1e:	d816      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01d      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d111      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ffd5 	bl	8009de0 <RCCEx_PLL2_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e3a:	e012      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3324      	adds	r3, #36	; 0x24
 8008e40:	2101      	movs	r1, #1
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 f87e 	bl	8009f44 <RCCEx_PLL3_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e4c:	e009      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
      break;
 8008e52:	e006      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e54:	bf00      	nop
 8008e56:	e004      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e68:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e74:	492a      	ldr	r1, [pc, #168]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	650b      	str	r3, [r1, #80]	; 0x50
 8008e7a:	e001      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d04d      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e96:	d02e      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9c:	d828      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d02a      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea8:	d822      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eae:	d026      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eb4:	d81c      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eba:	d010      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec0:	d816      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01d      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eca:	d111      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 ff84 	bl	8009de0 <RCCEx_PLL2_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008edc:	e012      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3324      	adds	r3, #36	; 0x24
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 f82d 	bl	8009f44 <RCCEx_PLL3_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008eee:	e009      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef4:	e006      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10c      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f18:	4901      	ldr	r1, [pc, #4]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f1e:	e003      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d02f      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f3c:	d00e      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f42:	d814      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d015      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f4c:	d10f      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4e:	4baf      	ldr	r3, [pc, #700]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	4aae      	ldr	r2, [pc, #696]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f5a:	e00c      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	2101      	movs	r1, #1
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 ff3c 	bl	8009de0 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f6c:	e003      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
      break;
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f7c:	4ba3      	ldr	r3, [pc, #652]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f88:	49a0      	ldr	r1, [pc, #640]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f8e:	e001      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d032      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d81b      	bhi.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008fa8:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fe7 	.word	0x08008fe7
 8008fb4:	08008fc1 	.word	0x08008fc1
 8008fb8:	08008fcf 	.word	0x08008fcf
 8008fbc:	08008fe7 	.word	0x08008fe7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc0:	4b92      	ldr	r3, [pc, #584]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	4a91      	ldr	r2, [pc, #580]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008fcc:	e00c      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	2102      	movs	r1, #2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 ff03 	bl	8009de0 <RCCEx_PLL2_Config>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008fde:	e003      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fee:	4b87      	ldr	r3, [pc, #540]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	f023 0203 	bic.w	r2, r3, #3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffa:	4984      	ldr	r1, [pc, #528]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009000:	e001      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8086 	beq.w	8009120 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009014:	4b7e      	ldr	r3, [pc, #504]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a7d      	ldr	r2, [pc, #500]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800901a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009020:	f7fb f99a 	bl	8004358 <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009026:	e009      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009028:	f7fb f996 	bl	8004358 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b64      	cmp	r3, #100	; 0x64
 8009034:	d902      	bls.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	75fb      	strb	r3, [r7, #23]
        break;
 800903a:	e005      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800903c:	4b74      	ldr	r3, [pc, #464]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0ef      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d166      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800904e:	4b6f      	ldr	r3, [pc, #444]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009058:	4053      	eors	r3, r2
 800905a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800905e:	2b00      	cmp	r3, #0
 8009060:	d013      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009062:	4b6a      	ldr	r3, [pc, #424]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800906c:	4b67      	ldr	r3, [pc, #412]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	4a66      	ldr	r2, [pc, #408]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009076:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009078:	4b64      	ldr	r3, [pc, #400]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	4a63      	ldr	r2, [pc, #396]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800907e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009082:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009084:	4a61      	ldr	r2, [pc, #388]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009094:	d115      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009096:	f7fb f95f 	bl	8004358 <HAL_GetTick>
 800909a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800909c:	e00b      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800909e:	f7fb f95b 	bl	8004358 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d902      	bls.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	75fb      	strb	r3, [r7, #23]
            break;
 80090b4:	e005      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090b6:	4b55      	ldr	r3, [pc, #340]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0ed      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d126      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090d6:	d10d      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80090d8:	4b4c      	ldr	r3, [pc, #304]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090e6:	0919      	lsrs	r1, r3, #4
 80090e8:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80090ea:	400b      	ands	r3, r1
 80090ec:	4947      	ldr	r1, [pc, #284]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	610b      	str	r3, [r1, #16]
 80090f2:	e005      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80090f4:	4b45      	ldr	r3, [pc, #276]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	4a44      	ldr	r2, [pc, #272]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090fe:	6113      	str	r3, [r2, #16]
 8009100:	4b42      	ldr	r3, [pc, #264]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800910a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800910e:	493f      	ldr	r1, [pc, #252]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009110:	4313      	orrs	r3, r2
 8009112:	670b      	str	r3, [r1, #112]	; 0x70
 8009114:	e004      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	75bb      	strb	r3, [r7, #22]
 800911a:	e001      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8085 	beq.w	8009238 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009132:	2b28      	cmp	r3, #40	; 0x28
 8009134:	d866      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009219 	.word	0x08009219
 8009140:	08009205 	.word	0x08009205
 8009144:	08009205 	.word	0x08009205
 8009148:	08009205 	.word	0x08009205
 800914c:	08009205 	.word	0x08009205
 8009150:	08009205 	.word	0x08009205
 8009154:	08009205 	.word	0x08009205
 8009158:	08009205 	.word	0x08009205
 800915c:	080091e1 	.word	0x080091e1
 8009160:	08009205 	.word	0x08009205
 8009164:	08009205 	.word	0x08009205
 8009168:	08009205 	.word	0x08009205
 800916c:	08009205 	.word	0x08009205
 8009170:	08009205 	.word	0x08009205
 8009174:	08009205 	.word	0x08009205
 8009178:	08009205 	.word	0x08009205
 800917c:	080091f3 	.word	0x080091f3
 8009180:	08009205 	.word	0x08009205
 8009184:	08009205 	.word	0x08009205
 8009188:	08009205 	.word	0x08009205
 800918c:	08009205 	.word	0x08009205
 8009190:	08009205 	.word	0x08009205
 8009194:	08009205 	.word	0x08009205
 8009198:	08009205 	.word	0x08009205
 800919c:	08009219 	.word	0x08009219
 80091a0:	08009205 	.word	0x08009205
 80091a4:	08009205 	.word	0x08009205
 80091a8:	08009205 	.word	0x08009205
 80091ac:	08009205 	.word	0x08009205
 80091b0:	08009205 	.word	0x08009205
 80091b4:	08009205 	.word	0x08009205
 80091b8:	08009205 	.word	0x08009205
 80091bc:	08009219 	.word	0x08009219
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009205 	.word	0x08009205
 80091c8:	08009205 	.word	0x08009205
 80091cc:	08009205 	.word	0x08009205
 80091d0:	08009205 	.word	0x08009205
 80091d4:	08009205 	.word	0x08009205
 80091d8:	08009205 	.word	0x08009205
 80091dc:	08009219 	.word	0x08009219
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3304      	adds	r3, #4
 80091e4:	2101      	movs	r1, #1
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fdfa 	bl	8009de0 <RCCEx_PLL2_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80091f0:	e013      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3324      	adds	r3, #36	; 0x24
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fea3 	bl	8009f44 <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009202:	e00a      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]
      break;
 8009208:	e007      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800920a:	bf00      	nop
 800920c:	58024400 	.word	0x58024400
 8009210:	58024800 	.word	0x58024800
 8009214:	00ffffcf 	.word	0x00ffffcf
      break;
 8009218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009220:	4b96      	ldr	r3, [pc, #600]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800922c:	4993      	ldr	r1, [pc, #588]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800922e:	4313      	orrs	r3, r2
 8009230:	654b      	str	r3, [r1, #84]	; 0x54
 8009232:	e001      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d038      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009248:	2b05      	cmp	r3, #5
 800924a:	d821      	bhi.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009297 	.word	0x08009297
 8009258:	0800926d 	.word	0x0800926d
 800925c:	0800927f 	.word	0x0800927f
 8009260:	08009297 	.word	0x08009297
 8009264:	08009297 	.word	0x08009297
 8009268:	08009297 	.word	0x08009297
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	2101      	movs	r1, #1
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fdb4 	bl	8009de0 <RCCEx_PLL2_Config>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800927c:	e00c      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3324      	adds	r3, #36	; 0x24
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fe5d 	bl	8009f44 <RCCEx_PLL3_Config>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800928e:	e003      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
      break;
 8009294:	e000      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800929e:	4b77      	ldr	r3, [pc, #476]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a2:	f023 0207 	bic.w	r2, r3, #7
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092aa:	4974      	ldr	r1, [pc, #464]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	654b      	str	r3, [r1, #84]	; 0x54
 80092b0:	e001      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d03a      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c8:	2b05      	cmp	r3, #5
 80092ca:	d821      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	08009317 	.word	0x08009317
 80092d8:	080092ed 	.word	0x080092ed
 80092dc:	080092ff 	.word	0x080092ff
 80092e0:	08009317 	.word	0x08009317
 80092e4:	08009317 	.word	0x08009317
 80092e8:	08009317 	.word	0x08009317
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3304      	adds	r3, #4
 80092f0:	2101      	movs	r1, #1
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fd74 	bl	8009de0 <RCCEx_PLL2_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80092fc:	e00c      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3324      	adds	r3, #36	; 0x24
 8009302:	2101      	movs	r1, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fe1d 	bl	8009f44 <RCCEx_PLL3_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800930e:	e003      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
      break;
 8009314:	e000      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800931e:	4b57      	ldr	r3, [pc, #348]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009322:	f023 0207 	bic.w	r2, r3, #7
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932c:	4953      	ldr	r1, [pc, #332]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800932e:	4313      	orrs	r3, r2
 8009330:	658b      	str	r3, [r1, #88]	; 0x58
 8009332:	e001      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d04b      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800934e:	d02e      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009354:	d828      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d02a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009360:	d822      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009366:	d026      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800936c:	d81c      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009372:	d010      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009378:	d816      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01d      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800937e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009382:	d111      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fd28 	bl	8009de0 <RCCEx_PLL2_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009394:	e012      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3324      	adds	r3, #36	; 0x24
 800939a:	2102      	movs	r1, #2
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fdd1 	bl	8009f44 <RCCEx_PLL3_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093a6:	e009      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
      break;
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093ae:	bf00      	nop
 80093b0:	e004      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093b2:	bf00      	nop
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093c2:	4b2e      	ldr	r3, [pc, #184]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d0:	492a      	ldr	r1, [pc, #168]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	654b      	str	r3, [r1, #84]	; 0x54
 80093d6:	e001      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d04d      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093f2:	d02e      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80093f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093f8:	d828      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fe:	d02a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009404:	d822      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800940a:	d026      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800940c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009410:	d81c      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009416:	d010      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800941c:	d816      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01d      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009426:	d111      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fcd6 	bl	8009de0 <RCCEx_PLL2_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009438:	e012      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fd7f 	bl	8009f44 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800944a:	e009      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e006      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009452:	bf00      	nop
 8009454:	e004      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009456:	bf00      	nop
 8009458:	e002      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800945a:	bf00      	nop
 800945c:	e000      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800945e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10c      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009474:	4901      	ldr	r1, [pc, #4]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009476:	4313      	orrs	r3, r2
 8009478:	658b      	str	r3, [r1, #88]	; 0x58
 800947a:	e003      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800947c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948c:	2b00      	cmp	r3, #0
 800948e:	d04b      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009496:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800949a:	d02e      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800949c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094a0:	d828      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a6:	d02a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80094a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ac:	d822      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094b2:	d026      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80094b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094b8:	d81c      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094be:	d010      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80094c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c4:	d816      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01d      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ce:	d111      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fc82 	bl	8009de0 <RCCEx_PLL2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094e0:	e012      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3324      	adds	r3, #36	; 0x24
 80094e6:	2102      	movs	r1, #2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fd2b 	bl	8009f44 <RCCEx_PLL3_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094f2:	e009      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
      break;
 80094f8:	e006      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80094fa:	bf00      	nop
 80094fc:	e004      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80094fe:	bf00      	nop
 8009500:	e002      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800950e:	4b9d      	ldr	r3, [pc, #628]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800951c:	4999      	ldr	r1, [pc, #612]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800951e:	4313      	orrs	r3, r2
 8009520:	658b      	str	r3, [r1, #88]	; 0x58
 8009522:	e001      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01a      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953e:	d10a      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	2102      	movs	r1, #2
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fcfc 	bl	8009f44 <RCCEx_PLL3_Config>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009556:	4b8b      	ldr	r3, [pc, #556]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009564:	4987      	ldr	r1, [pc, #540]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009566:	4313      	orrs	r3, r2
 8009568:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800957c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009580:	d10a      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3324      	adds	r3, #36	; 0x24
 8009586:	2102      	movs	r1, #2
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fcdb 	bl	8009f44 <RCCEx_PLL3_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009598:	4b7a      	ldr	r3, [pc, #488]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800959a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a6:	4977      	ldr	r1, [pc, #476]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d034      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c2:	d01d      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80095c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c8:	d817      	bhi.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80095ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d2:	d009      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80095d4:	e011      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	3304      	adds	r3, #4
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fbff 	bl	8009de0 <RCCEx_PLL2_Config>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80095e6:	e00c      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	2102      	movs	r1, #2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fca8 	bl	8009f44 <RCCEx_PLL3_Config>
 80095f4:	4603      	mov	r3, r0
 80095f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80095f8:	e003      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
      break;
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009608:	4b5e      	ldr	r3, [pc, #376]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800960a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009616:	495b      	ldr	r1, [pc, #364]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009618:	4313      	orrs	r3, r2
 800961a:	658b      	str	r3, [r1, #88]	; 0x58
 800961c:	e001      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d033      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009638:	d01c      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800963e:	d816      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009644:	d003      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800964a:	d007      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800964c:	e00f      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800964e:	4b4d      	ldr	r3, [pc, #308]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	4a4c      	ldr	r2, [pc, #304]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800965a:	e00c      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3324      	adds	r3, #36	; 0x24
 8009660:	2101      	movs	r1, #1
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fc6e 	bl	8009f44 <RCCEx_PLL3_Config>
 8009668:	4603      	mov	r3, r0
 800966a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800966c:	e003      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	75fb      	strb	r3, [r7, #23]
      break;
 8009672:	e000      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800967c:	4b41      	ldr	r3, [pc, #260]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800967e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800968a:	493e      	ldr	r1, [pc, #248]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800968c:	4313      	orrs	r3, r2
 800968e:	654b      	str	r3, [r1, #84]	; 0x54
 8009690:	e001      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009692:	7dfb      	ldrb	r3, [r7, #23]
 8009694:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d029      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80096aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ae:	d007      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80096b0:	e00f      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b2:	4b34      	ldr	r3, [pc, #208]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b6:	4a33      	ldr	r2, [pc, #204]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096be:	e00b      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	2102      	movs	r1, #2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fb8a 	bl	8009de0 <RCCEx_PLL2_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	75fb      	strb	r3, [r7, #23]
      break;
 80096d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096de:	4b29      	ldr	r3, [pc, #164]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ea:	4926      	ldr	r1, [pc, #152]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096f0:	e001      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3324      	adds	r3, #36	; 0x24
 8009706:	2102      	movs	r1, #2
 8009708:	4618      	mov	r0, r3
 800970a:	f000 fc1b 	bl	8009f44 <RCCEx_PLL3_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d033      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972c:	d017      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800972e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009732:	d811      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009738:	d013      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800973a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973e:	d80b      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d010      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800974a:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	4a0d      	ldr	r2, [pc, #52]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009756:	e007      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
      break;
 800975c:	e004      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800975e:	bf00      	nop
 8009760:	e002      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009762:	bf00      	nop
 8009764:	e000      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800976e:	4b05      	ldr	r3, [pc, #20]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800977a:	4902      	ldr	r1, [pc, #8]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800977c:	4313      	orrs	r3, r2
 800977e:	654b      	str	r3, [r1, #84]	; 0x54
 8009780:	e004      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009782:	bf00      	nop
 8009784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009798:	4b31      	ldr	r3, [pc, #196]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a4:	492e      	ldr	r1, [pc, #184]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80097b6:	4b2a      	ldr	r3, [pc, #168]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097c4:	4926      	ldr	r1, [pc, #152]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d008      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e2:	491f      	ldr	r1, [pc, #124]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00d      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80097f4:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	4a19      	ldr	r2, [pc, #100]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097fe:	6113      	str	r3, [r2, #16]
 8009800:	4b17      	ldr	r3, [pc, #92]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800980a:	4915      	ldr	r1, [pc, #84]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800980c:	4313      	orrs	r3, r2
 800980e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	da08      	bge.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009818:	4b11      	ldr	r3, [pc, #68]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800981a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	490e      	ldr	r1, [pc, #56]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009826:	4313      	orrs	r3, r2
 8009828:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d009      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009844:	4906      	ldr	r1, [pc, #24]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009846:	4313      	orrs	r3, r2
 8009848:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800984a:	7dbb      	ldrb	r3, [r7, #22]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	58024400 	.word	0x58024400

08009864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009868:	f7ff f85a 	bl	8008920 <HAL_RCC_GetHCLKFreq>
 800986c:	4602      	mov	r2, r0
 800986e:	4b06      	ldr	r3, [pc, #24]	; (8009888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	091b      	lsrs	r3, r3, #4
 8009874:	f003 0307 	and.w	r3, r3, #7
 8009878:	4904      	ldr	r1, [pc, #16]	; (800988c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800987a:	5ccb      	ldrb	r3, [r1, r3]
 800987c:	f003 031f 	and.w	r3, r3, #31
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	58024400 	.word	0x58024400
 800988c:	0800da34 	.word	0x0800da34

08009890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009898:	4ba1      	ldr	r3, [pc, #644]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f003 0303 	and.w	r3, r3, #3
 80098a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80098a2:	4b9f      	ldr	r3, [pc, #636]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	0b1b      	lsrs	r3, r3, #12
 80098a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098ae:	4b9c      	ldr	r3, [pc, #624]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	091b      	lsrs	r3, r3, #4
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098ba:	4b99      	ldr	r3, [pc, #612]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098be:	08db      	lsrs	r3, r3, #3
 80098c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8111 	beq.w	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f000 8083 	beq.w	80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	f200 80a1 	bhi.w	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d056      	beq.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098fa:	e099      	b.n	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098fc:	4b88      	ldr	r3, [pc, #544]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02d      	beq.n	8009964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009908:	4b85      	ldr	r3, [pc, #532]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	4a84      	ldr	r2, [pc, #528]	; (8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
 8009918:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a03 	vldr	s12, [r7, #12]
 8009946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009962:	e087      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b6a      	ldr	r3, [pc, #424]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a03 	vldr	s12, [r7, #12]
 800998a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a6:	e065      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ba:	4b59      	ldr	r3, [pc, #356]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ea:	e043      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2e:	e021      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	0a5b      	lsrs	r3, r3, #9
 8009a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9a:	ee17 2a90 	vmov	r2, s15
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009aa2:	4b1f      	ldr	r3, [pc, #124]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aac:	ee07 3a90 	vmov	s15, r3
 8009ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac8:	ee17 2a90 	vmov	r2, s15
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ad0:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	0e1b      	lsrs	r3, r3, #24
 8009ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af6:	ee17 2a90 	vmov	r2, s15
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009afe:	e008      	b.n	8009b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	609a      	str	r2, [r3, #8]
}
 8009b12:	bf00      	nop
 8009b14:	3724      	adds	r7, #36	; 0x24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	46000000 	.word	0x46000000
 8009b2c:	4c742400 	.word	0x4c742400
 8009b30:	4a742400 	.word	0x4a742400
 8009b34:	4af42400 	.word	0x4af42400

08009b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	; 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b40:	4ba1      	ldr	r3, [pc, #644]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b4a:	4b9f      	ldr	r3, [pc, #636]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	0d1b      	lsrs	r3, r3, #20
 8009b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b56:	4b9c      	ldr	r3, [pc, #624]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b62:	4b99      	ldr	r3, [pc, #612]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b66:	08db      	lsrs	r3, r3, #3
 8009b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 8111 	beq.w	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	f000 8083 	beq.w	8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	f200 80a1 	bhi.w	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d056      	beq.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ba2:	e099      	b.n	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba4:	4b88      	ldr	r3, [pc, #544]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d02d      	beq.n	8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bb0:	4b85      	ldr	r3, [pc, #532]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	08db      	lsrs	r3, r3, #3
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	4a84      	ldr	r2, [pc, #528]	; (8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b7b      	ldr	r3, [pc, #492]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c0a:	e087      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1e:	4b6a      	ldr	r3, [pc, #424]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4e:	e065      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c62:	4b59      	ldr	r3, [pc, #356]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c92:	e043      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca6:	4b48      	ldr	r3, [pc, #288]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cd6:	e021      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cea:	4b37      	ldr	r3, [pc, #220]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d1c:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d42:	ee17 2a90 	vmov	r2, s15
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d4a:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	0c1b      	lsrs	r3, r3, #16
 8009d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d70:	ee17 2a90 	vmov	r2, s15
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	0e1b      	lsrs	r3, r3, #24
 8009d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d9e:	ee17 2a90 	vmov	r2, s15
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009da6:	e008      	b.n	8009dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
}
 8009dba:	bf00      	nop
 8009dbc:	3724      	adds	r7, #36	; 0x24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
 8009dcc:	03d09000 	.word	0x03d09000
 8009dd0:	46000000 	.word	0x46000000
 8009dd4:	4c742400 	.word	0x4c742400
 8009dd8:	4a742400 	.word	0x4a742400
 8009ddc:	4af42400 	.word	0x4af42400

08009de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dee:	4b53      	ldr	r3, [pc, #332]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d101      	bne.n	8009dfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e099      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dfe:	4b4f      	ldr	r3, [pc, #316]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4e      	ldr	r2, [pc, #312]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e0a:	f7fa faa5 	bl	8004358 <HAL_GetTick>
 8009e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e10:	e008      	b.n	8009e24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e12:	f7fa faa1 	bl	8004358 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e086      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e24:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f0      	bne.n	8009e12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e30:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	031b      	lsls	r3, r3, #12
 8009e3e:	493f      	ldr	r1, [pc, #252]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	628b      	str	r3, [r1, #40]	; 0x28
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	025b      	lsls	r3, r3, #9
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	061b      	lsls	r3, r3, #24
 8009e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e74:	4931      	ldr	r1, [pc, #196]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e7a:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	492d      	ldr	r1, [pc, #180]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e8c:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f023 0220 	bic.w	r2, r3, #32
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	4928      	ldr	r1, [pc, #160]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e9e:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a26      	ldr	r2, [pc, #152]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	f023 0310 	bic.w	r3, r3, #16
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eae:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <RCCEx_PLL2_Config+0x160>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	69d2      	ldr	r2, [r2, #28]
 8009eb6:	00d2      	lsls	r2, r2, #3
 8009eb8:	4920      	ldr	r1, [pc, #128]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ebe:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	4a1e      	ldr	r2, [pc, #120]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	f043 0310 	orr.w	r3, r3, #16
 8009ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009edc:	e00f      	b.n	8009efe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d106      	bne.n	8009ef2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	4a14      	ldr	r2, [pc, #80]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ef0:	e005      	b.n	8009efe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ef2:	4b12      	ldr	r3, [pc, #72]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	4a11      	ldr	r2, [pc, #68]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009efe:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a0e      	ldr	r2, [pc, #56]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f0a:	f7fa fa25 	bl	8004358 <HAL_GetTick>
 8009f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f10:	e008      	b.n	8009f24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f12:	f7fa fa21 	bl	8004358 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e006      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0f0      	beq.n	8009f12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	ffff0007 	.word	0xffff0007

08009f44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f52:	4b53      	ldr	r3, [pc, #332]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d101      	bne.n	8009f62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e099      	b.n	800a096 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f62:	4b4f      	ldr	r3, [pc, #316]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a4e      	ldr	r2, [pc, #312]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f6e:	f7fa f9f3 	bl	8004358 <HAL_GetTick>
 8009f72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f74:	e008      	b.n	8009f88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f76:	f7fa f9ef 	bl	8004358 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d901      	bls.n	8009f88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e086      	b.n	800a096 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f88:	4b45      	ldr	r3, [pc, #276]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1f0      	bne.n	8009f76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f94:	4b42      	ldr	r3, [pc, #264]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	051b      	lsls	r3, r3, #20
 8009fa2:	493f      	ldr	r1, [pc, #252]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	025b      	lsls	r3, r3, #9
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	041b      	lsls	r3, r3, #16
 8009fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	061b      	lsls	r3, r3, #24
 8009fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fd8:	4931      	ldr	r1, [pc, #196]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fde:	4b30      	ldr	r3, [pc, #192]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	492d      	ldr	r1, [pc, #180]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	4928      	ldr	r1, [pc, #160]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a002:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a00e:	4b24      	ldr	r3, [pc, #144]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a012:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <RCCEx_PLL3_Config+0x160>)
 800a014:	4013      	ands	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	69d2      	ldr	r2, [r2, #28]
 800a01a:	00d2      	lsls	r2, r2, #3
 800a01c:	4920      	ldr	r1, [pc, #128]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a022:	4b1f      	ldr	r3, [pc, #124]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d106      	bne.n	800a042 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a03a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a03e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a040:	e00f      	b.n	800a062 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d106      	bne.n	800a056 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a048:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a04e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a054:	e005      	b.n	800a062 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4a11      	ldr	r2, [pc, #68]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a05c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a0e      	ldr	r2, [pc, #56]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a06c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a06e:	f7fa f973 	bl	8004358 <HAL_GetTick>
 800a072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a074:	e008      	b.n	800a088 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a076:	f7fa f96f 	bl	8004358 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d901      	bls.n	800a088 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e006      	b.n	800a096 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0f0      	beq.n	800a076 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	ffff0007 	.word	0xffff0007

0800a0a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e0f1      	b.n	800a29e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a78      	ldr	r2, [pc, #480]	; (800a2a8 <HAL_SPI_Init+0x200>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d00f      	beq.n	800a0ea <HAL_SPI_Init+0x42>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a77      	ldr	r2, [pc, #476]	; (800a2ac <HAL_SPI_Init+0x204>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00a      	beq.n	800a0ea <HAL_SPI_Init+0x42>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a75      	ldr	r2, [pc, #468]	; (800a2b0 <HAL_SPI_Init+0x208>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d005      	beq.n	800a0ea <HAL_SPI_Init+0x42>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d901      	bls.n	800a0ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e0d9      	b.n	800a29e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fba2 	bl	800a834 <SPI_GetPacketSize>
 800a0f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a6c      	ldr	r2, [pc, #432]	; (800a2a8 <HAL_SPI_Init+0x200>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00c      	beq.n	800a116 <HAL_SPI_Init+0x6e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a6a      	ldr	r2, [pc, #424]	; (800a2ac <HAL_SPI_Init+0x204>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d007      	beq.n	800a116 <HAL_SPI_Init+0x6e>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a69      	ldr	r2, [pc, #420]	; (800a2b0 <HAL_SPI_Init+0x208>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d002      	beq.n	800a116 <HAL_SPI_Init+0x6e>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b08      	cmp	r3, #8
 800a114:	d811      	bhi.n	800a13a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a11a:	4a63      	ldr	r2, [pc, #396]	; (800a2a8 <HAL_SPI_Init+0x200>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d009      	beq.n	800a134 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a61      	ldr	r2, [pc, #388]	; (800a2ac <HAL_SPI_Init+0x204>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d004      	beq.n	800a134 <HAL_SPI_Init+0x8c>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a60      	ldr	r2, [pc, #384]	; (800a2b0 <HAL_SPI_Init+0x208>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d104      	bne.n	800a13e <HAL_SPI_Init+0x96>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b10      	cmp	r3, #16
 800a138:	d901      	bls.n	800a13e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e0af      	b.n	800a29e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7f9 fe08 	bl	8003d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0201 	bic.w	r2, r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a17a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a184:	d119      	bne.n	800a1ba <HAL_SPI_Init+0x112>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a18e:	d103      	bne.n	800a198 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a194:	2b00      	cmp	r3, #0
 800a196:	d008      	beq.n	800a1aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10c      	bne.n	800a1ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a1a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a8:	d107      	bne.n	800a1ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69da      	ldr	r2, [r3, #28]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1cc:	ea42 0103 	orr.w	r1, r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a21a:	ea42 0103 	orr.w	r1, r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d113      	bne.n	800a25a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a244:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a258:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 0201 	bic.w	r2, r2, #1
 800a268:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	40013000 	.word	0x40013000
 800a2ac:	40003800 	.word	0x40003800
 800a2b0:	40003c00 	.word	0x40003c00

0800a2b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08a      	sub	sp, #40	; 0x28
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3320      	adds	r3, #32
 800a2ca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d101      	bne.n	800a2de <HAL_SPI_Transmit+0x2a>
 800a2da:	2302      	movs	r3, #2
 800a2dc:	e1d7      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2e6:	f7fa f837 	bl	8004358 <HAL_GetTick>
 800a2ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d007      	beq.n	800a308 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a304:	7efb      	ldrb	r3, [r7, #27]
 800a306:	e1c2      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_SPI_Transmit+0x60>
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d107      	bne.n	800a324 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a320:	7efb      	ldrb	r3, [r7, #27]
 800a322:	e1b4      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2203      	movs	r2, #3
 800a328:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	88fa      	ldrh	r2, [r7, #6]
 800a346:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a374:	d107      	bne.n	800a386 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a384:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	4b96      	ldr	r3, [pc, #600]	; (800a5e8 <HAL_SPI_Transmit+0x334>)
 800a38e:	4013      	ands	r3, r2
 800a390:	88f9      	ldrh	r1, [r7, #6]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	6812      	ldr	r2, [r2, #0]
 800a396:	430b      	orrs	r3, r1
 800a398:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f042 0201 	orr.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3b2:	d107      	bne.n	800a3c4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b0f      	cmp	r3, #15
 800a3ca:	d947      	bls.n	800a45c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a3cc:	e03f      	b.n	800a44e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d114      	bne.n	800a406 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a404:	e023      	b.n	800a44e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a406:	f7f9 ffa7 	bl	8004358 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d803      	bhi.n	800a41e <HAL_SPI_Transmit+0x16a>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d102      	bne.n	800a424 <HAL_SPI_Transmit+0x170>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d114      	bne.n	800a44e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f937 	bl	800a698 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e11f      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1b9      	bne.n	800a3ce <HAL_SPI_Transmit+0x11a>
 800a45a:	e0f2      	b.n	800a642 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	2b07      	cmp	r3, #7
 800a462:	f240 80e7 	bls.w	800a634 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a466:	e05d      	b.n	800a524 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b02      	cmp	r3, #2
 800a474:	d132      	bne.n	800a4dc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d918      	bls.n	800a4b4 <HAL_SPI_Transmit+0x200>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d014      	beq.n	800a4b4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6812      	ldr	r2, [r2, #0]
 800a494:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a49a:	1d1a      	adds	r2, r3, #4
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b02      	subs	r3, #2
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a4b2:	e037      	b.n	800a524 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c2:	1c9a      	adds	r2, r3, #2
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a4da:	e023      	b.n	800a524 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4dc:	f7f9 ff3c 	bl	8004358 <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d803      	bhi.n	800a4f4 <HAL_SPI_Transmit+0x240>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d102      	bne.n	800a4fa <HAL_SPI_Transmit+0x246>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d114      	bne.n	800a524 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f8cc 	bl	800a698 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e0b4      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d19b      	bne.n	800a468 <HAL_SPI_Transmit+0x1b4>
 800a530:	e087      	b.n	800a642 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d155      	bne.n	800a5ec <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d918      	bls.n	800a57e <HAL_SPI_Transmit+0x2ca>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a550:	2b40      	cmp	r3, #64	; 0x40
 800a552:	d914      	bls.n	800a57e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a570:	b29b      	uxth	r3, r3
 800a572:	3b04      	subs	r3, #4
 800a574:	b29a      	uxth	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a57c:	e05a      	b.n	800a634 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d917      	bls.n	800a5ba <HAL_SPI_Transmit+0x306>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d013      	beq.n	800a5ba <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a596:	881a      	ldrh	r2, [r3, #0]
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a0:	1c9a      	adds	r2, r3, #2
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	3b02      	subs	r3, #2
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a5b8:	e03c      	b.n	800a634 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3320      	adds	r3, #32
 800a5c4:	7812      	ldrb	r2, [r2, #0]
 800a5c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a5e4:	e026      	b.n	800a634 <HAL_SPI_Transmit+0x380>
 800a5e6:	bf00      	nop
 800a5e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5ec:	f7f9 feb4 	bl	8004358 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d803      	bhi.n	800a604 <HAL_SPI_Transmit+0x350>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d102      	bne.n	800a60a <HAL_SPI_Transmit+0x356>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d114      	bne.n	800a634 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f844 	bl	800a698 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a61e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e02c      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f47f af78 	bne.w	800a532 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2200      	movs	r2, #0
 800a64a:	2108      	movs	r1, #8
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f8c3 	bl	800a7d8 <SPI_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d007      	beq.n	800a668 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65e:	f043 0220 	orr.w	r2, r3, #32
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 f815 	bl	800a698 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e000      	b.n	800a68e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a68c:	7efb      	ldrb	r3, [r7, #27]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3720      	adds	r7, #32
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop

0800a698 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0208 	orr.w	r2, r2, #8
 800a6b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0210 	orr.w	r2, r2, #16
 800a6c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6919      	ldr	r1, [r3, #16]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	4b3c      	ldr	r3, [pc, #240]	; (800a7d4 <SPI_CloseTransfer+0x13c>)
 800a6e4:	400b      	ands	r3, r1
 800a6e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a6f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b04      	cmp	r3, #4
 800a702:	d014      	beq.n	800a72e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00f      	beq.n	800a72e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f042 0220 	orr.w	r2, r2, #32
 800a72c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b03      	cmp	r3, #3
 800a738:	d014      	beq.n	800a764 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00f      	beq.n	800a764 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a74a:	f043 0204 	orr.w	r2, r3, #4
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a762:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00f      	beq.n	800a78e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a774:	f043 0201 	orr.w	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699a      	ldr	r2, [r3, #24]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00f      	beq.n	800a7b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79e:	f043 0208 	orr.w	r2, r3, #8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	fffffc90 	.word	0xfffffc90

0800a7d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7e8:	e010      	b.n	800a80c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7ea:	f7f9 fdb5 	bl	8004358 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d803      	bhi.n	800a802 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d102      	bne.n	800a808 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e00f      	b.n	800a82c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695a      	ldr	r2, [r3, #20]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	429a      	cmp	r2, r3
 800a81a:	bf0c      	ite	eq
 800a81c:	2301      	moveq	r3, #1
 800a81e:	2300      	movne	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	429a      	cmp	r2, r3
 800a828:	d0df      	beq.n	800a7ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a840:	095b      	lsrs	r3, r3, #5
 800a842:	3301      	adds	r3, #1
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	3307      	adds	r3, #7
 800a852:	08db      	lsrs	r3, r3, #3
 800a854:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e049      	b.n	800a910 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f9 fad5 	bl	8003e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2202      	movs	r2, #2
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f000 fa23 	bl	800acf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d001      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e054      	b.n	800a9da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a26      	ldr	r2, [pc, #152]	; (800a9e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d022      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95a:	d01d      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a22      	ldr	r2, [pc, #136]	; (800a9ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d018      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a21      	ldr	r2, [pc, #132]	; (800a9f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d013      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a1f      	ldr	r2, [pc, #124]	; (800a9f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00e      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a1e      	ldr	r2, [pc, #120]	; (800a9f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d009      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a1c      	ldr	r2, [pc, #112]	; (800a9fc <HAL_TIM_Base_Start_IT+0xe4>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d004      	beq.n	800a998 <HAL_TIM_Base_Start_IT+0x80>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a1b      	ldr	r2, [pc, #108]	; (800aa00 <HAL_TIM_Base_Start_IT+0xe8>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d115      	bne.n	800a9c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	4b19      	ldr	r3, [pc, #100]	; (800aa04 <HAL_TIM_Base_Start_IT+0xec>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b06      	cmp	r3, #6
 800a9a8:	d015      	beq.n	800a9d6 <HAL_TIM_Base_Start_IT+0xbe>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b0:	d011      	beq.n	800a9d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 0201 	orr.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c2:	e008      	b.n	800a9d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	e000      	b.n	800a9d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	40000c00 	.word	0x40000c00
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40001800 	.word	0x40001800
 800aa00:	40014000 	.word	0x40014000
 800aa04:	00010007 	.word	0x00010007

0800aa08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0201 	bic.w	r2, r2, #1
 800aa1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6a1a      	ldr	r2, [r3, #32]
 800aa26:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10f      	bne.n	800aa50 <HAL_TIM_Base_Stop_IT+0x48>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6a1a      	ldr	r2, [r3, #32]
 800aa36:	f240 4344 	movw	r3, #1092	; 0x444
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d107      	bne.n	800aa50 <HAL_TIM_Base_Stop_IT+0x48>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 0201 	bic.w	r2, r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d122      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f003 0302 	and.w	r3, r3, #2
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d11b      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f06f 0202 	mvn.w	r2, #2
 800aa92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f905 	bl	800acb8 <HAL_TIM_IC_CaptureCallback>
 800aaae:	e005      	b.n	800aabc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f8f7 	bl	800aca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f908 	bl	800accc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d122      	bne.n	800ab16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0304 	and.w	r3, r3, #4
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d11b      	bne.n	800ab16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f06f 0204 	mvn.w	r2, #4
 800aae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f8db 	bl	800acb8 <HAL_TIM_IC_CaptureCallback>
 800ab02:	e005      	b.n	800ab10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f8cd 	bl	800aca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f8de 	bl	800accc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d122      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d11b      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f06f 0208 	mvn.w	r2, #8
 800ab3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2204      	movs	r2, #4
 800ab40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f8b1 	bl	800acb8 <HAL_TIM_IC_CaptureCallback>
 800ab56:	e005      	b.n	800ab64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f8a3 	bl	800aca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f8b4 	bl	800accc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d122      	bne.n	800abbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f003 0310 	and.w	r3, r3, #16
 800ab82:	2b10      	cmp	r3, #16
 800ab84:	d11b      	bne.n	800abbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f06f 0210 	mvn.w	r2, #16
 800ab8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2208      	movs	r2, #8
 800ab94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f887 	bl	800acb8 <HAL_TIM_IC_CaptureCallback>
 800abaa:	e005      	b.n	800abb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f879 	bl	800aca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f88a 	bl	800accc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d10e      	bne.n	800abea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d107      	bne.n	800abea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f06f 0201 	mvn.w	r2, #1
 800abe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7f8 fb95 	bl	8003314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d10e      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	2b80      	cmp	r3, #128	; 0x80
 800ac04:	d107      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f9a1 	bl	800af58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac24:	d10e      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac30:	2b80      	cmp	r3, #128	; 0x80
 800ac32:	d107      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f994 	bl	800af6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	d10e      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5c:	2b40      	cmp	r3, #64	; 0x40
 800ac5e:	d107      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f838 	bl	800ace0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b20      	cmp	r3, #32
 800ac7c:	d10e      	bne.n	800ac9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b20      	cmp	r3, #32
 800ac8a:	d107      	bne.n	800ac9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0220 	mvn.w	r2, #32
 800ac94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f954 	bl	800af44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a40      	ldr	r2, [pc, #256]	; (800ae08 <TIM_Base_SetConfig+0x114>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d013      	beq.n	800ad34 <TIM_Base_SetConfig+0x40>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad12:	d00f      	beq.n	800ad34 <TIM_Base_SetConfig+0x40>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a3d      	ldr	r2, [pc, #244]	; (800ae0c <TIM_Base_SetConfig+0x118>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00b      	beq.n	800ad34 <TIM_Base_SetConfig+0x40>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a3c      	ldr	r2, [pc, #240]	; (800ae10 <TIM_Base_SetConfig+0x11c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d007      	beq.n	800ad34 <TIM_Base_SetConfig+0x40>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a3b      	ldr	r2, [pc, #236]	; (800ae14 <TIM_Base_SetConfig+0x120>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d003      	beq.n	800ad34 <TIM_Base_SetConfig+0x40>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a3a      	ldr	r2, [pc, #232]	; (800ae18 <TIM_Base_SetConfig+0x124>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d108      	bne.n	800ad46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a2f      	ldr	r2, [pc, #188]	; (800ae08 <TIM_Base_SetConfig+0x114>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d01f      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad54:	d01b      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a2c      	ldr	r2, [pc, #176]	; (800ae0c <TIM_Base_SetConfig+0x118>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d017      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a2b      	ldr	r2, [pc, #172]	; (800ae10 <TIM_Base_SetConfig+0x11c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d013      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a2a      	ldr	r2, [pc, #168]	; (800ae14 <TIM_Base_SetConfig+0x120>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00f      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a29      	ldr	r2, [pc, #164]	; (800ae18 <TIM_Base_SetConfig+0x124>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00b      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a28      	ldr	r2, [pc, #160]	; (800ae1c <TIM_Base_SetConfig+0x128>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d007      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a27      	ldr	r2, [pc, #156]	; (800ae20 <TIM_Base_SetConfig+0x12c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_Base_SetConfig+0x9a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a26      	ldr	r2, [pc, #152]	; (800ae24 <TIM_Base_SetConfig+0x130>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d108      	bne.n	800ada0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a10      	ldr	r2, [pc, #64]	; (800ae08 <TIM_Base_SetConfig+0x114>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00f      	beq.n	800adec <TIM_Base_SetConfig+0xf8>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a12      	ldr	r2, [pc, #72]	; (800ae18 <TIM_Base_SetConfig+0x124>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d00b      	beq.n	800adec <TIM_Base_SetConfig+0xf8>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a11      	ldr	r2, [pc, #68]	; (800ae1c <TIM_Base_SetConfig+0x128>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d007      	beq.n	800adec <TIM_Base_SetConfig+0xf8>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a10      	ldr	r2, [pc, #64]	; (800ae20 <TIM_Base_SetConfig+0x12c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d003      	beq.n	800adec <TIM_Base_SetConfig+0xf8>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a0f      	ldr	r2, [pc, #60]	; (800ae24 <TIM_Base_SetConfig+0x130>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d103      	bne.n	800adf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	615a      	str	r2, [r3, #20]
}
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40000400 	.word	0x40000400
 800ae10:	40000800 	.word	0x40000800
 800ae14:	40000c00 	.word	0x40000c00
 800ae18:	40010400 	.word	0x40010400
 800ae1c:	40014000 	.word	0x40014000
 800ae20:	40014400 	.word	0x40014400
 800ae24:	40014800 	.word	0x40014800

0800ae28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e06d      	b.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a30      	ldr	r2, [pc, #192]	; (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a2f      	ldr	r2, [pc, #188]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d108      	bne.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a20      	ldr	r2, [pc, #128]	; (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d022      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb2:	d01d      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a1d      	ldr	r2, [pc, #116]	; (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d018      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a1c      	ldr	r2, [pc, #112]	; (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d013      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1a      	ldr	r2, [pc, #104]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d00e      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a15      	ldr	r2, [pc, #84]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d009      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a16      	ldr	r2, [pc, #88]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d004      	beq.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a15      	ldr	r2, [pc, #84]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d10c      	bne.n	800af0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	40010000 	.word	0x40010000
 800af2c:	40010400 	.word	0x40010400
 800af30:	40000400 	.word	0x40000400
 800af34:	40000800 	.word	0x40000800
 800af38:	40000c00 	.word	0x40000c00
 800af3c:	40001800 	.word	0x40001800
 800af40:	40014000 	.word	0x40014000

0800af44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e042      	b.n	800b018 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d106      	bne.n	800afaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f8 ff73 	bl	8003e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2224      	movs	r2, #36	; 0x24
 800afae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f022 0201 	bic.w	r2, r2, #1
 800afc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fbea 	bl	800b79c <UART_SetConfig>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e022      	b.n	800b018 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 f946 	bl	800c26c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800affe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0201 	orr.w	r2, r2, #1
 800b00e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f9cd 	bl	800c3b0 <UART_CheckIdleState>
 800b016:	4603      	mov	r3, r0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b0ba      	sub	sp, #232	; 0xe8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b04a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b04e:	4013      	ands	r3, r2
 800b050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d11b      	bne.n	800b094 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b060:	f003 0320 	and.w	r3, r3, #32
 800b064:	2b00      	cmp	r3, #0
 800b066:	d015      	beq.n	800b094 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d009      	beq.n	800b094 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 835a 	beq.w	800b73e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
      }
      return;
 800b092:	e354      	b.n	800b73e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 811f 	beq.w	800b2dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b09e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b0a2:	4b8b      	ldr	r3, [pc, #556]	; (800b2d0 <HAL_UART_IRQHandler+0x2b0>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b0aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b0ae:	4b89      	ldr	r3, [pc, #548]	; (800b2d4 <HAL_UART_IRQHandler+0x2b4>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 8112 	beq.w	800b2dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d011      	beq.n	800b0e8 <HAL_UART_IRQHandler+0xc8>
 800b0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0de:	f043 0201 	orr.w	r2, r3, #1
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d011      	beq.n	800b118 <HAL_UART_IRQHandler+0xf8>
 800b0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2202      	movs	r2, #2
 800b106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b10e:	f043 0204 	orr.w	r2, r3, #4
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d011      	beq.n	800b148 <HAL_UART_IRQHandler+0x128>
 800b124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00b      	beq.n	800b148 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2204      	movs	r2, #4
 800b136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b13e:	f043 0202 	orr.w	r2, r3, #2
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b00      	cmp	r3, #0
 800b152:	d017      	beq.n	800b184 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b158:	f003 0320 	and.w	r3, r3, #32
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d105      	bne.n	800b16c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b160:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b164:	4b5a      	ldr	r3, [pc, #360]	; (800b2d0 <HAL_UART_IRQHandler+0x2b0>)
 800b166:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00b      	beq.n	800b184 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2208      	movs	r2, #8
 800b172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b17a:	f043 0208 	orr.w	r2, r3, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d012      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x196>
 800b190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00c      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ac:	f043 0220 	orr.w	r2, r3, #32
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 82c0 	beq.w	800b742 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d013      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d2:	f003 0320 	and.w	r3, r3, #32
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20a:	2b40      	cmp	r3, #64	; 0x40
 800b20c:	d005      	beq.n	800b21a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b20e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b216:	2b00      	cmp	r3, #0
 800b218:	d04f      	beq.n	800b2ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 f9dc 	bl	800c5d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d141      	bne.n	800b2b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b24c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b25a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b25e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1d9      	bne.n	800b22e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d013      	beq.n	800b2aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b286:	4a14      	ldr	r2, [pc, #80]	; (800b2d8 <HAL_UART_IRQHandler+0x2b8>)
 800b288:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fa f83c 	bl	800530c <HAL_DMA_Abort_IT>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d017      	beq.n	800b2ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a8:	e00f      	b.n	800b2ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fa60 	bl	800b770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b0:	e00b      	b.n	800b2ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa5c 	bl	800b770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b8:	e007      	b.n	800b2ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa58 	bl	800b770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b2c8:	e23b      	b.n	800b742 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ca:	bf00      	nop
    return;
 800b2cc:	e239      	b.n	800b742 <HAL_UART_IRQHandler+0x722>
 800b2ce:	bf00      	nop
 800b2d0:	10000001 	.word	0x10000001
 800b2d4:	04000120 	.word	0x04000120
 800b2d8:	0800c6a5 	.word	0x0800c6a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	f040 81ce 	bne.w	800b682 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ea:	f003 0310 	and.w	r3, r3, #16
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 81c7 	beq.w	800b682 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f8:	f003 0310 	and.w	r3, r3, #16
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 81c0 	beq.w	800b682 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2210      	movs	r2, #16
 800b308:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b314:	2b40      	cmp	r3, #64	; 0x40
 800b316:	f040 813b 	bne.w	800b590 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a8b      	ldr	r2, [pc, #556]	; (800b550 <HAL_UART_IRQHandler+0x530>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d059      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a89      	ldr	r2, [pc, #548]	; (800b554 <HAL_UART_IRQHandler+0x534>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d053      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a87      	ldr	r2, [pc, #540]	; (800b558 <HAL_UART_IRQHandler+0x538>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d04d      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a85      	ldr	r2, [pc, #532]	; (800b55c <HAL_UART_IRQHandler+0x53c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d047      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a83      	ldr	r2, [pc, #524]	; (800b560 <HAL_UART_IRQHandler+0x540>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d041      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a81      	ldr	r2, [pc, #516]	; (800b564 <HAL_UART_IRQHandler+0x544>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d03b      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a7f      	ldr	r2, [pc, #508]	; (800b568 <HAL_UART_IRQHandler+0x548>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d035      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a7d      	ldr	r2, [pc, #500]	; (800b56c <HAL_UART_IRQHandler+0x54c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d02f      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a7b      	ldr	r2, [pc, #492]	; (800b570 <HAL_UART_IRQHandler+0x550>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d029      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a79      	ldr	r2, [pc, #484]	; (800b574 <HAL_UART_IRQHandler+0x554>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d023      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a77      	ldr	r2, [pc, #476]	; (800b578 <HAL_UART_IRQHandler+0x558>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d01d      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a75      	ldr	r2, [pc, #468]	; (800b57c <HAL_UART_IRQHandler+0x55c>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d017      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a73      	ldr	r2, [pc, #460]	; (800b580 <HAL_UART_IRQHandler+0x560>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d011      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a71      	ldr	r2, [pc, #452]	; (800b584 <HAL_UART_IRQHandler+0x564>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00b      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a6f      	ldr	r2, [pc, #444]	; (800b588 <HAL_UART_IRQHandler+0x568>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d005      	beq.n	800b3da <HAL_UART_IRQHandler+0x3ba>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a6d      	ldr	r2, [pc, #436]	; (800b58c <HAL_UART_IRQHandler+0x56c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d105      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x3c6>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	e004      	b.n	800b3f0 <HAL_UART_IRQHandler+0x3d0>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 81a4 	beq.w	800b746 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b408:	429a      	cmp	r2, r3
 800b40a:	f080 819c 	bcs.w	800b746 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b422:	f000 8086 	beq.w	800b532 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b432:	e853 3f00 	ldrex	r3, [r3]
 800b436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b43a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b43e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b454:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b45c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1da      	bne.n	800b426 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3308      	adds	r3, #8
 800b476:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b482:	f023 0301 	bic.w	r3, r3, #1
 800b486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3308      	adds	r3, #8
 800b490:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b494:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b498:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b49c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e1      	bne.n	800b470 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e3      	bne.n	800b4ac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b502:	f023 0310 	bic.w	r3, r3, #16
 800b506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b514:	65bb      	str	r3, [r7, #88]	; 0x58
 800b516:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b51a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e4      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f9 fbcf 	bl	8004cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b53e:	b29b      	uxth	r3, r3
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	b29b      	uxth	r3, r3
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f91c 	bl	800b784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b54c:	e0fb      	b.n	800b746 <HAL_UART_IRQHandler+0x726>
 800b54e:	bf00      	nop
 800b550:	40020010 	.word	0x40020010
 800b554:	40020028 	.word	0x40020028
 800b558:	40020040 	.word	0x40020040
 800b55c:	40020058 	.word	0x40020058
 800b560:	40020070 	.word	0x40020070
 800b564:	40020088 	.word	0x40020088
 800b568:	400200a0 	.word	0x400200a0
 800b56c:	400200b8 	.word	0x400200b8
 800b570:	40020410 	.word	0x40020410
 800b574:	40020428 	.word	0x40020428
 800b578:	40020440 	.word	0x40020440
 800b57c:	40020458 	.word	0x40020458
 800b580:	40020470 	.word	0x40020470
 800b584:	40020488 	.word	0x40020488
 800b588:	400204a0 	.word	0x400204a0
 800b58c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 80cc 	beq.w	800b74a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b5b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 80c7 	beq.w	800b74a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5de:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e4      	bne.n	800b5bc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	623b      	str	r3, [r7, #32]
   return(result);
 800b602:	6a3a      	ldr	r2, [r7, #32]
 800b604:	4b54      	ldr	r3, [pc, #336]	; (800b758 <HAL_UART_IRQHandler+0x738>)
 800b606:	4013      	ands	r3, r2
 800b608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3308      	adds	r3, #8
 800b612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b616:	633a      	str	r2, [r7, #48]	; 0x30
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b61e:	e841 2300 	strex	r3, r2, [r1]
 800b622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1e3      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f023 0310 	bic.w	r3, r3, #16
 800b652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b660:	61fb      	str	r3, [r7, #28]
 800b662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b664:	69b9      	ldr	r1, [r7, #24]
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	e841 2300 	strex	r3, r2, [r1]
 800b66c:	617b      	str	r3, [r7, #20]
   return(result);
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e4      	bne.n	800b63e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f882 	bl	800b784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b680:	e063      	b.n	800b74a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00e      	beq.n	800b6ac <HAL_UART_IRQHandler+0x68c>
 800b68e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d008      	beq.n	800b6ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 f83e 	bl	800c726 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6aa:	e051      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d014      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d008      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d03a      	beq.n	800b74e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
    }
    return;
 800b6e0:	e035      	b.n	800b74e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d009      	beq.n	800b702 <HAL_UART_IRQHandler+0x6e2>
 800b6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 ffe8 	bl	800c6d0 <UART_EndTransmit_IT>
    return;
 800b700:	e026      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <HAL_UART_IRQHandler+0x702>
 800b70e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b712:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 f817 	bl	800c74e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b720:	e016      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <HAL_UART_IRQHandler+0x730>
 800b72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b732:	2b00      	cmp	r3, #0
 800b734:	da0c      	bge.n	800b750 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 ffff 	bl	800c73a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b73c:	e008      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
      return;
 800b73e:	bf00      	nop
 800b740:	e006      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
    return;
 800b742:	bf00      	nop
 800b744:	e004      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
      return;
 800b746:	bf00      	nop
 800b748:	e002      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
      return;
 800b74a:	bf00      	nop
 800b74c:	e000      	b.n	800b750 <HAL_UART_IRQHandler+0x730>
    return;
 800b74e:	bf00      	nop
  }
}
 800b750:	37e8      	adds	r7, #232	; 0xe8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	effffffe 	.word	0xeffffffe

0800b75c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7a0:	b092      	sub	sp, #72	; 0x48
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4bbe      	ldr	r3, [pc, #760]	; (800bac4 <UART_SetConfig+0x328>)
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	68da      	ldr	r2, [r3, #12]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4ab3      	ldr	r2, [pc, #716]	; (800bac8 <UART_SetConfig+0x32c>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d004      	beq.n	800b808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b804:	4313      	orrs	r3, r2
 800b806:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689a      	ldr	r2, [r3, #8]
 800b80e:	4baf      	ldr	r3, [pc, #700]	; (800bacc <UART_SetConfig+0x330>)
 800b810:	4013      	ands	r3, r2
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b818:	430b      	orrs	r3, r1
 800b81a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	f023 010f 	bic.w	r1, r3, #15
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4aa6      	ldr	r2, [pc, #664]	; (800bad0 <UART_SetConfig+0x334>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d177      	bne.n	800b92c <UART_SetConfig+0x190>
 800b83c:	4ba5      	ldr	r3, [pc, #660]	; (800bad4 <UART_SetConfig+0x338>)
 800b83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b844:	2b28      	cmp	r3, #40	; 0x28
 800b846:	d86d      	bhi.n	800b924 <UART_SetConfig+0x188>
 800b848:	a201      	add	r2, pc, #4	; (adr r2, 800b850 <UART_SetConfig+0xb4>)
 800b84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84e:	bf00      	nop
 800b850:	0800b8f5 	.word	0x0800b8f5
 800b854:	0800b925 	.word	0x0800b925
 800b858:	0800b925 	.word	0x0800b925
 800b85c:	0800b925 	.word	0x0800b925
 800b860:	0800b925 	.word	0x0800b925
 800b864:	0800b925 	.word	0x0800b925
 800b868:	0800b925 	.word	0x0800b925
 800b86c:	0800b925 	.word	0x0800b925
 800b870:	0800b8fd 	.word	0x0800b8fd
 800b874:	0800b925 	.word	0x0800b925
 800b878:	0800b925 	.word	0x0800b925
 800b87c:	0800b925 	.word	0x0800b925
 800b880:	0800b925 	.word	0x0800b925
 800b884:	0800b925 	.word	0x0800b925
 800b888:	0800b925 	.word	0x0800b925
 800b88c:	0800b925 	.word	0x0800b925
 800b890:	0800b905 	.word	0x0800b905
 800b894:	0800b925 	.word	0x0800b925
 800b898:	0800b925 	.word	0x0800b925
 800b89c:	0800b925 	.word	0x0800b925
 800b8a0:	0800b925 	.word	0x0800b925
 800b8a4:	0800b925 	.word	0x0800b925
 800b8a8:	0800b925 	.word	0x0800b925
 800b8ac:	0800b925 	.word	0x0800b925
 800b8b0:	0800b90d 	.word	0x0800b90d
 800b8b4:	0800b925 	.word	0x0800b925
 800b8b8:	0800b925 	.word	0x0800b925
 800b8bc:	0800b925 	.word	0x0800b925
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b925 	.word	0x0800b925
 800b8c8:	0800b925 	.word	0x0800b925
 800b8cc:	0800b925 	.word	0x0800b925
 800b8d0:	0800b915 	.word	0x0800b915
 800b8d4:	0800b925 	.word	0x0800b925
 800b8d8:	0800b925 	.word	0x0800b925
 800b8dc:	0800b925 	.word	0x0800b925
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b925 	.word	0x0800b925
 800b8e8:	0800b925 	.word	0x0800b925
 800b8ec:	0800b925 	.word	0x0800b925
 800b8f0:	0800b91d 	.word	0x0800b91d
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fa:	e222      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b8fc:	2304      	movs	r3, #4
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b902:	e21e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b904:	2308      	movs	r3, #8
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90a:	e21a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b90c:	2310      	movs	r3, #16
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b912:	e216      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b914:	2320      	movs	r3, #32
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91a:	e212      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b91c:	2340      	movs	r3, #64	; 0x40
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b922:	e20e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b924:	2380      	movs	r3, #128	; 0x80
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92a:	e20a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a69      	ldr	r2, [pc, #420]	; (800bad8 <UART_SetConfig+0x33c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d130      	bne.n	800b998 <UART_SetConfig+0x1fc>
 800b936:	4b67      	ldr	r3, [pc, #412]	; (800bad4 <UART_SetConfig+0x338>)
 800b938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	2b05      	cmp	r3, #5
 800b940:	d826      	bhi.n	800b990 <UART_SetConfig+0x1f4>
 800b942:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <UART_SetConfig+0x1ac>)
 800b944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b948:	0800b961 	.word	0x0800b961
 800b94c:	0800b969 	.word	0x0800b969
 800b950:	0800b971 	.word	0x0800b971
 800b954:	0800b979 	.word	0x0800b979
 800b958:	0800b981 	.word	0x0800b981
 800b95c:	0800b989 	.word	0x0800b989
 800b960:	2300      	movs	r3, #0
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b966:	e1ec      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b96e:	e1e8      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b976:	e1e4      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97e:	e1e0      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b980:	2320      	movs	r3, #32
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b986:	e1dc      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b98e:	e1d8      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b990:	2380      	movs	r3, #128	; 0x80
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b996:	e1d4      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a4f      	ldr	r2, [pc, #316]	; (800badc <UART_SetConfig+0x340>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d130      	bne.n	800ba04 <UART_SetConfig+0x268>
 800b9a2:	4b4c      	ldr	r3, [pc, #304]	; (800bad4 <UART_SetConfig+0x338>)
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b05      	cmp	r3, #5
 800b9ac:	d826      	bhi.n	800b9fc <UART_SetConfig+0x260>
 800b9ae:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <UART_SetConfig+0x218>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800b9cd 	.word	0x0800b9cd
 800b9b8:	0800b9d5 	.word	0x0800b9d5
 800b9bc:	0800b9dd 	.word	0x0800b9dd
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d2:	e1b6      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9da:	e1b2      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e2:	e1ae      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ea:	e1aa      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9f2:	e1a6      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9fa:	e1a2      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800b9fc:	2380      	movs	r3, #128	; 0x80
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba02:	e19e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a35      	ldr	r2, [pc, #212]	; (800bae0 <UART_SetConfig+0x344>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d130      	bne.n	800ba70 <UART_SetConfig+0x2d4>
 800ba0e:	4b31      	ldr	r3, [pc, #196]	; (800bad4 <UART_SetConfig+0x338>)
 800ba10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d826      	bhi.n	800ba68 <UART_SetConfig+0x2cc>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <UART_SetConfig+0x284>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba49 	.word	0x0800ba49
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba3e:	e180      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba40:	2304      	movs	r3, #4
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba46:	e17c      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba48:	2308      	movs	r3, #8
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba4e:	e178      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba50:	2310      	movs	r3, #16
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba56:	e174      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba5e:	e170      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba60:	2340      	movs	r3, #64	; 0x40
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba66:	e16c      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba68:	2380      	movs	r3, #128	; 0x80
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba6e:	e168      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a1b      	ldr	r2, [pc, #108]	; (800bae4 <UART_SetConfig+0x348>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d142      	bne.n	800bb00 <UART_SetConfig+0x364>
 800ba7a:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <UART_SetConfig+0x338>)
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d838      	bhi.n	800baf8 <UART_SetConfig+0x35c>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <UART_SetConfig+0x2f0>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800baad 	.word	0x0800baad
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bae9 	.word	0x0800bae9
 800baa0:	0800baf1 	.word	0x0800baf1
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baaa:	e14a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bab2:	e146      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baba:	e142      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bac2:	e13e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bac4:	cfff69f3 	.word	0xcfff69f3
 800bac8:	58000c00 	.word	0x58000c00
 800bacc:	11fff4ff 	.word	0x11fff4ff
 800bad0:	40011000 	.word	0x40011000
 800bad4:	58024400 	.word	0x58024400
 800bad8:	40004400 	.word	0x40004400
 800badc:	40004800 	.word	0x40004800
 800bae0:	40004c00 	.word	0x40004c00
 800bae4:	40005000 	.word	0x40005000
 800bae8:	2320      	movs	r3, #32
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baee:	e128      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800baf0:	2340      	movs	r3, #64	; 0x40
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf6:	e124      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800baf8:	2380      	movs	r3, #128	; 0x80
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafe:	e120      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4acb      	ldr	r2, [pc, #812]	; (800be34 <UART_SetConfig+0x698>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d176      	bne.n	800bbf8 <UART_SetConfig+0x45c>
 800bb0a:	4bcb      	ldr	r3, [pc, #812]	; (800be38 <UART_SetConfig+0x69c>)
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb12:	2b28      	cmp	r3, #40	; 0x28
 800bb14:	d86c      	bhi.n	800bbf0 <UART_SetConfig+0x454>
 800bb16:	a201      	add	r2, pc, #4	; (adr r2, 800bb1c <UART_SetConfig+0x380>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bbc1 	.word	0x0800bbc1
 800bb20:	0800bbf1 	.word	0x0800bbf1
 800bb24:	0800bbf1 	.word	0x0800bbf1
 800bb28:	0800bbf1 	.word	0x0800bbf1
 800bb2c:	0800bbf1 	.word	0x0800bbf1
 800bb30:	0800bbf1 	.word	0x0800bbf1
 800bb34:	0800bbf1 	.word	0x0800bbf1
 800bb38:	0800bbf1 	.word	0x0800bbf1
 800bb3c:	0800bbc9 	.word	0x0800bbc9
 800bb40:	0800bbf1 	.word	0x0800bbf1
 800bb44:	0800bbf1 	.word	0x0800bbf1
 800bb48:	0800bbf1 	.word	0x0800bbf1
 800bb4c:	0800bbf1 	.word	0x0800bbf1
 800bb50:	0800bbf1 	.word	0x0800bbf1
 800bb54:	0800bbf1 	.word	0x0800bbf1
 800bb58:	0800bbf1 	.word	0x0800bbf1
 800bb5c:	0800bbd1 	.word	0x0800bbd1
 800bb60:	0800bbf1 	.word	0x0800bbf1
 800bb64:	0800bbf1 	.word	0x0800bbf1
 800bb68:	0800bbf1 	.word	0x0800bbf1
 800bb6c:	0800bbf1 	.word	0x0800bbf1
 800bb70:	0800bbf1 	.word	0x0800bbf1
 800bb74:	0800bbf1 	.word	0x0800bbf1
 800bb78:	0800bbf1 	.word	0x0800bbf1
 800bb7c:	0800bbd9 	.word	0x0800bbd9
 800bb80:	0800bbf1 	.word	0x0800bbf1
 800bb84:	0800bbf1 	.word	0x0800bbf1
 800bb88:	0800bbf1 	.word	0x0800bbf1
 800bb8c:	0800bbf1 	.word	0x0800bbf1
 800bb90:	0800bbf1 	.word	0x0800bbf1
 800bb94:	0800bbf1 	.word	0x0800bbf1
 800bb98:	0800bbf1 	.word	0x0800bbf1
 800bb9c:	0800bbe1 	.word	0x0800bbe1
 800bba0:	0800bbf1 	.word	0x0800bbf1
 800bba4:	0800bbf1 	.word	0x0800bbf1
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bbf1 	.word	0x0800bbf1
 800bbb0:	0800bbf1 	.word	0x0800bbf1
 800bbb4:	0800bbf1 	.word	0x0800bbf1
 800bbb8:	0800bbf1 	.word	0x0800bbf1
 800bbbc:	0800bbe9 	.word	0x0800bbe9
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbc6:	e0bc      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbce:	e0b8      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd6:	e0b4      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbde:	e0b0      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe6:	e0ac      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbee:	e0a8      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbf0:	2380      	movs	r3, #128	; 0x80
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf6:	e0a4      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a8f      	ldr	r2, [pc, #572]	; (800be3c <UART_SetConfig+0x6a0>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d130      	bne.n	800bc64 <UART_SetConfig+0x4c8>
 800bc02:	4b8d      	ldr	r3, [pc, #564]	; (800be38 <UART_SetConfig+0x69c>)
 800bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc06:	f003 0307 	and.w	r3, r3, #7
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	d826      	bhi.n	800bc5c <UART_SetConfig+0x4c0>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <UART_SetConfig+0x478>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc2d 	.word	0x0800bc2d
 800bc18:	0800bc35 	.word	0x0800bc35
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc4d 	.word	0x0800bc4d
 800bc28:	0800bc55 	.word	0x0800bc55
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc32:	e086      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3a:	e082      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc42:	e07e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4a:	e07a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc52:	e076      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5a:	e072      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc5c:	2380      	movs	r3, #128	; 0x80
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc62:	e06e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a75      	ldr	r2, [pc, #468]	; (800be40 <UART_SetConfig+0x6a4>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d130      	bne.n	800bcd0 <UART_SetConfig+0x534>
 800bc6e:	4b72      	ldr	r3, [pc, #456]	; (800be38 <UART_SetConfig+0x69c>)
 800bc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d826      	bhi.n	800bcc8 <UART_SetConfig+0x52c>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <UART_SetConfig+0x4e4>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bca1 	.word	0x0800bca1
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc9e:	e050      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca6:	e04c      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bca8:	2308      	movs	r3, #8
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcae:	e048      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb6:	e044      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcbe:	e040      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bcc0:	2340      	movs	r3, #64	; 0x40
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc6:	e03c      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bcc8:	2380      	movs	r3, #128	; 0x80
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcce:	e038      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a5b      	ldr	r2, [pc, #364]	; (800be44 <UART_SetConfig+0x6a8>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <UART_SetConfig+0x5a0>
 800bcda:	4b57      	ldr	r3, [pc, #348]	; (800be38 <UART_SetConfig+0x69c>)
 800bcdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <UART_SetConfig+0x598>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <UART_SetConfig+0x550>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2302      	movs	r3, #2
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0a:	e01a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd12:	e016      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1a:	e012      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd22:	e00e      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2a:	e00a      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd2c:	2340      	movs	r3, #64	; 0x40
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd32:	e006      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd34:	2380      	movs	r3, #128	; 0x80
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3a:	e002      	b.n	800bd42 <UART_SetConfig+0x5a6>
 800bd3c:	2380      	movs	r3, #128	; 0x80
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a3f      	ldr	r2, [pc, #252]	; (800be44 <UART_SetConfig+0x6a8>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	f040 80f8 	bne.w	800bf3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	dc46      	bgt.n	800bde4 <UART_SetConfig+0x648>
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	f2c0 8082 	blt.w	800be60 <UART_SetConfig+0x6c4>
 800bd5c:	3b02      	subs	r3, #2
 800bd5e:	2b1e      	cmp	r3, #30
 800bd60:	d87e      	bhi.n	800be60 <UART_SetConfig+0x6c4>
 800bd62:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <UART_SetConfig+0x5cc>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bdeb 	.word	0x0800bdeb
 800bd6c:	0800be61 	.word	0x0800be61
 800bd70:	0800bdf3 	.word	0x0800bdf3
 800bd74:	0800be61 	.word	0x0800be61
 800bd78:	0800be61 	.word	0x0800be61
 800bd7c:	0800be61 	.word	0x0800be61
 800bd80:	0800be03 	.word	0x0800be03
 800bd84:	0800be61 	.word	0x0800be61
 800bd88:	0800be61 	.word	0x0800be61
 800bd8c:	0800be61 	.word	0x0800be61
 800bd90:	0800be61 	.word	0x0800be61
 800bd94:	0800be61 	.word	0x0800be61
 800bd98:	0800be61 	.word	0x0800be61
 800bd9c:	0800be61 	.word	0x0800be61
 800bda0:	0800be13 	.word	0x0800be13
 800bda4:	0800be61 	.word	0x0800be61
 800bda8:	0800be61 	.word	0x0800be61
 800bdac:	0800be61 	.word	0x0800be61
 800bdb0:	0800be61 	.word	0x0800be61
 800bdb4:	0800be61 	.word	0x0800be61
 800bdb8:	0800be61 	.word	0x0800be61
 800bdbc:	0800be61 	.word	0x0800be61
 800bdc0:	0800be61 	.word	0x0800be61
 800bdc4:	0800be61 	.word	0x0800be61
 800bdc8:	0800be61 	.word	0x0800be61
 800bdcc:	0800be61 	.word	0x0800be61
 800bdd0:	0800be61 	.word	0x0800be61
 800bdd4:	0800be61 	.word	0x0800be61
 800bdd8:	0800be61 	.word	0x0800be61
 800bddc:	0800be61 	.word	0x0800be61
 800bde0:	0800be53 	.word	0x0800be53
 800bde4:	2b40      	cmp	r3, #64	; 0x40
 800bde6:	d037      	beq.n	800be58 <UART_SetConfig+0x6bc>
 800bde8:	e03a      	b.n	800be60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bdea:	f7fd fd3b 	bl	8009864 <HAL_RCCEx_GetD3PCLK1Freq>
 800bdee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bdf0:	e03c      	b.n	800be6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd fd4a 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be00:	e034      	b.n	800be6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be02:	f107 0318 	add.w	r3, r7, #24
 800be06:	4618      	mov	r0, r3
 800be08:	f7fd fe96 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be10:	e02c      	b.n	800be6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <UART_SetConfig+0x69c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d016      	beq.n	800be4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be1e:	4b06      	ldr	r3, [pc, #24]	; (800be38 <UART_SetConfig+0x69c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	08db      	lsrs	r3, r3, #3
 800be24:	f003 0303 	and.w	r3, r3, #3
 800be28:	4a07      	ldr	r2, [pc, #28]	; (800be48 <UART_SetConfig+0x6ac>)
 800be2a:	fa22 f303 	lsr.w	r3, r2, r3
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be30:	e01c      	b.n	800be6c <UART_SetConfig+0x6d0>
 800be32:	bf00      	nop
 800be34:	40011400 	.word	0x40011400
 800be38:	58024400 	.word	0x58024400
 800be3c:	40007800 	.word	0x40007800
 800be40:	40007c00 	.word	0x40007c00
 800be44:	58000c00 	.word	0x58000c00
 800be48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800be4c:	4b9d      	ldr	r3, [pc, #628]	; (800c0c4 <UART_SetConfig+0x928>)
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be50:	e00c      	b.n	800be6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be52:	4b9d      	ldr	r3, [pc, #628]	; (800c0c8 <UART_SetConfig+0x92c>)
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be56:	e009      	b.n	800be6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be5e:	e005      	b.n	800be6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 81de 	beq.w	800c230 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	4a94      	ldr	r2, [pc, #592]	; (800c0cc <UART_SetConfig+0x930>)
 800be7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be7e:	461a      	mov	r2, r3
 800be80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be82:	fbb3 f3f2 	udiv	r3, r3, r2
 800be86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	4613      	mov	r3, r2
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	4413      	add	r3, r2
 800be92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be94:	429a      	cmp	r2, r3
 800be96:	d305      	bcc.n	800bea4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d903      	bls.n	800beac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800beaa:	e1c1      	b.n	800c230 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	2200      	movs	r2, #0
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	60fa      	str	r2, [r7, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	4a84      	ldr	r2, [pc, #528]	; (800c0cc <UART_SetConfig+0x930>)
 800beba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2200      	movs	r2, #0
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	607a      	str	r2, [r7, #4]
 800bec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bece:	f7f4 fa57 	bl	8000380 <__aeabi_uldivmod>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4610      	mov	r0, r2
 800bed8:	4619      	mov	r1, r3
 800beda:	f04f 0200 	mov.w	r2, #0
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	020b      	lsls	r3, r1, #8
 800bee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bee8:	0202      	lsls	r2, r0, #8
 800beea:	6979      	ldr	r1, [r7, #20]
 800beec:	6849      	ldr	r1, [r1, #4]
 800beee:	0849      	lsrs	r1, r1, #1
 800bef0:	2000      	movs	r0, #0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4605      	mov	r5, r0
 800bef6:	eb12 0804 	adds.w	r8, r2, r4
 800befa:	eb43 0905 	adc.w	r9, r3, r5
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	469a      	mov	sl, r3
 800bf06:	4693      	mov	fp, r2
 800bf08:	4652      	mov	r2, sl
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7f4 fa36 	bl	8000380 <__aeabi_uldivmod>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4613      	mov	r3, r2
 800bf1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf22:	d308      	bcc.n	800bf36 <UART_SetConfig+0x79a>
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf2a:	d204      	bcs.n	800bf36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf32:	60da      	str	r2, [r3, #12]
 800bf34:	e17c      	b.n	800c230 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bf3c:	e178      	b.n	800c230 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf46:	f040 80c5 	bne.w	800c0d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bf4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	dc48      	bgt.n	800bfe4 <UART_SetConfig+0x848>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	db7b      	blt.n	800c04e <UART_SetConfig+0x8b2>
 800bf56:	2b20      	cmp	r3, #32
 800bf58:	d879      	bhi.n	800c04e <UART_SetConfig+0x8b2>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <UART_SetConfig+0x7c4>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bfeb 	.word	0x0800bfeb
 800bf64:	0800bff3 	.word	0x0800bff3
 800bf68:	0800c04f 	.word	0x0800c04f
 800bf6c:	0800c04f 	.word	0x0800c04f
 800bf70:	0800bffb 	.word	0x0800bffb
 800bf74:	0800c04f 	.word	0x0800c04f
 800bf78:	0800c04f 	.word	0x0800c04f
 800bf7c:	0800c04f 	.word	0x0800c04f
 800bf80:	0800c00b 	.word	0x0800c00b
 800bf84:	0800c04f 	.word	0x0800c04f
 800bf88:	0800c04f 	.word	0x0800c04f
 800bf8c:	0800c04f 	.word	0x0800c04f
 800bf90:	0800c04f 	.word	0x0800c04f
 800bf94:	0800c04f 	.word	0x0800c04f
 800bf98:	0800c04f 	.word	0x0800c04f
 800bf9c:	0800c04f 	.word	0x0800c04f
 800bfa0:	0800c01b 	.word	0x0800c01b
 800bfa4:	0800c04f 	.word	0x0800c04f
 800bfa8:	0800c04f 	.word	0x0800c04f
 800bfac:	0800c04f 	.word	0x0800c04f
 800bfb0:	0800c04f 	.word	0x0800c04f
 800bfb4:	0800c04f 	.word	0x0800c04f
 800bfb8:	0800c04f 	.word	0x0800c04f
 800bfbc:	0800c04f 	.word	0x0800c04f
 800bfc0:	0800c04f 	.word	0x0800c04f
 800bfc4:	0800c04f 	.word	0x0800c04f
 800bfc8:	0800c04f 	.word	0x0800c04f
 800bfcc:	0800c04f 	.word	0x0800c04f
 800bfd0:	0800c04f 	.word	0x0800c04f
 800bfd4:	0800c04f 	.word	0x0800c04f
 800bfd8:	0800c04f 	.word	0x0800c04f
 800bfdc:	0800c04f 	.word	0x0800c04f
 800bfe0:	0800c041 	.word	0x0800c041
 800bfe4:	2b40      	cmp	r3, #64	; 0x40
 800bfe6:	d02e      	beq.n	800c046 <UART_SetConfig+0x8aa>
 800bfe8:	e031      	b.n	800c04e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfea:	f7fc fcc9 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800bfee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bff0:	e033      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bff2:	f7fc fcdb 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 800bff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bff8:	e02f      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fd fc46 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c008:	e027      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c00a:	f107 0318 	add.w	r3, r7, #24
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd fd92 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c018:	e01f      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c01a:	4b2d      	ldr	r3, [pc, #180]	; (800c0d0 <UART_SetConfig+0x934>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b00      	cmp	r3, #0
 800c024:	d009      	beq.n	800c03a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c026:	4b2a      	ldr	r3, [pc, #168]	; (800c0d0 <UART_SetConfig+0x934>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	4a24      	ldr	r2, [pc, #144]	; (800c0c4 <UART_SetConfig+0x928>)
 800c032:	fa22 f303 	lsr.w	r3, r2, r3
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c038:	e00f      	b.n	800c05a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c03a:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <UART_SetConfig+0x928>)
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03e:	e00c      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c040:	4b21      	ldr	r3, [pc, #132]	; (800c0c8 <UART_SetConfig+0x92c>)
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e009      	b.n	800c05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c04c:	e005      	b.n	800c05a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80e7 	beq.w	800c230 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	4a19      	ldr	r2, [pc, #100]	; (800c0cc <UART_SetConfig+0x930>)
 800c068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c06c:	461a      	mov	r2, r3
 800c06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c070:	fbb3 f3f2 	udiv	r3, r3, r2
 800c074:	005a      	lsls	r2, r3, #1
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	085b      	lsrs	r3, r3, #1
 800c07c:	441a      	add	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	fbb2 f3f3 	udiv	r3, r2, r3
 800c086:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	2b0f      	cmp	r3, #15
 800c08c:	d916      	bls.n	800c0bc <UART_SetConfig+0x920>
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d212      	bcs.n	800c0bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f023 030f 	bic.w	r3, r3, #15
 800c09e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	085b      	lsrs	r3, r3, #1
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c0b8:	60da      	str	r2, [r3, #12]
 800c0ba:	e0b9      	b.n	800c230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c0c2:	e0b5      	b.n	800c230 <UART_SetConfig+0xa94>
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	003d0900 	.word	0x003d0900
 800c0cc:	0800ef8c 	.word	0x0800ef8c
 800c0d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	dc49      	bgt.n	800c170 <UART_SetConfig+0x9d4>
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	db7c      	blt.n	800c1da <UART_SetConfig+0xa3e>
 800c0e0:	2b20      	cmp	r3, #32
 800c0e2:	d87a      	bhi.n	800c1da <UART_SetConfig+0xa3e>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <UART_SetConfig+0x950>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c177 	.word	0x0800c177
 800c0f0:	0800c17f 	.word	0x0800c17f
 800c0f4:	0800c1db 	.word	0x0800c1db
 800c0f8:	0800c1db 	.word	0x0800c1db
 800c0fc:	0800c187 	.word	0x0800c187
 800c100:	0800c1db 	.word	0x0800c1db
 800c104:	0800c1db 	.word	0x0800c1db
 800c108:	0800c1db 	.word	0x0800c1db
 800c10c:	0800c197 	.word	0x0800c197
 800c110:	0800c1db 	.word	0x0800c1db
 800c114:	0800c1db 	.word	0x0800c1db
 800c118:	0800c1db 	.word	0x0800c1db
 800c11c:	0800c1db 	.word	0x0800c1db
 800c120:	0800c1db 	.word	0x0800c1db
 800c124:	0800c1db 	.word	0x0800c1db
 800c128:	0800c1db 	.word	0x0800c1db
 800c12c:	0800c1a7 	.word	0x0800c1a7
 800c130:	0800c1db 	.word	0x0800c1db
 800c134:	0800c1db 	.word	0x0800c1db
 800c138:	0800c1db 	.word	0x0800c1db
 800c13c:	0800c1db 	.word	0x0800c1db
 800c140:	0800c1db 	.word	0x0800c1db
 800c144:	0800c1db 	.word	0x0800c1db
 800c148:	0800c1db 	.word	0x0800c1db
 800c14c:	0800c1db 	.word	0x0800c1db
 800c150:	0800c1db 	.word	0x0800c1db
 800c154:	0800c1db 	.word	0x0800c1db
 800c158:	0800c1db 	.word	0x0800c1db
 800c15c:	0800c1db 	.word	0x0800c1db
 800c160:	0800c1db 	.word	0x0800c1db
 800c164:	0800c1db 	.word	0x0800c1db
 800c168:	0800c1db 	.word	0x0800c1db
 800c16c:	0800c1cd 	.word	0x0800c1cd
 800c170:	2b40      	cmp	r3, #64	; 0x40
 800c172:	d02e      	beq.n	800c1d2 <UART_SetConfig+0xa36>
 800c174:	e031      	b.n	800c1da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c176:	f7fc fc03 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800c17a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c17c:	e033      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c17e:	f7fc fc15 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 800c182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c184:	e02f      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fd fb80 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c194:	e027      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c196:	f107 0318 	add.w	r3, r7, #24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fd fccc 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a4:	e01f      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1a6:	4b2d      	ldr	r3, [pc, #180]	; (800c25c <UART_SetConfig+0xac0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0320 	and.w	r3, r3, #32
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d009      	beq.n	800c1c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1b2:	4b2a      	ldr	r3, [pc, #168]	; (800c25c <UART_SetConfig+0xac0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	08db      	lsrs	r3, r3, #3
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	4a28      	ldr	r2, [pc, #160]	; (800c260 <UART_SetConfig+0xac4>)
 800c1be:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1c4:	e00f      	b.n	800c1e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c1c6:	4b26      	ldr	r3, [pc, #152]	; (800c260 <UART_SetConfig+0xac4>)
 800c1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ca:	e00c      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1cc:	4b25      	ldr	r3, [pc, #148]	; (800c264 <UART_SetConfig+0xac8>)
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d0:	e009      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e005      	b.n	800c1e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c1e4:	bf00      	nop
    }

    if (pclk != 0U)
 800c1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d021      	beq.n	800c230 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	4a1d      	ldr	r2, [pc, #116]	; (800c268 <UART_SetConfig+0xacc>)
 800c1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	441a      	add	r2, r3
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c20e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	2b0f      	cmp	r3, #15
 800c214:	d909      	bls.n	800c22a <UART_SetConfig+0xa8e>
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c21c:	d205      	bcs.n	800c22a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	b29a      	uxth	r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60da      	str	r2, [r3, #12]
 800c228:	e002      	b.n	800c230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2201      	movs	r2, #1
 800c234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2200      	movs	r2, #0
 800c244:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2200      	movs	r2, #0
 800c24a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c24c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c250:	4618      	mov	r0, r3
 800c252:	3748      	adds	r7, #72	; 0x48
 800c254:	46bd      	mov	sp, r7
 800c256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c25a:	bf00      	nop
 800c25c:	58024400 	.word	0x58024400
 800c260:	03d09000 	.word	0x03d09000
 800c264:	003d0900 	.word	0x003d0900
 800c268:	0800ef8c 	.word	0x0800ef8c

0800c26c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00a      	beq.n	800c296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00a      	beq.n	800c2b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00a      	beq.n	800c2da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2de:	f003 0308 	and.w	r3, r3, #8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00a      	beq.n	800c2fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c300:	f003 0310 	and.w	r3, r3, #16
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00a      	beq.n	800c31e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	430a      	orrs	r2, r1
 800c31c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c322:	f003 0320 	and.w	r3, r3, #32
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	430a      	orrs	r2, r1
 800c33e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01a      	beq.n	800c382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c36a:	d10a      	bne.n	800c382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	605a      	str	r2, [r3, #4]
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3c0:	f7f7 ffca 	bl	8004358 <HAL_GetTick>
 800c3c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0308 	and.w	r3, r3, #8
 800c3d0:	2b08      	cmp	r3, #8
 800c3d2:	d10e      	bne.n	800c3f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f82f 	bl	800c446 <UART_WaitOnFlagUntilTimeout>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e025      	b.n	800c43e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b04      	cmp	r3, #4
 800c3fe:	d10e      	bne.n	800c41e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f819 	bl	800c446 <UART_WaitOnFlagUntilTimeout>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e00f      	b.n	800c43e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2220      	movs	r2, #32
 800c422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2220      	movs	r2, #32
 800c42a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b09c      	sub	sp, #112	; 0x70
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	603b      	str	r3, [r7, #0]
 800c452:	4613      	mov	r3, r2
 800c454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c456:	e0a9      	b.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	f000 80a5 	beq.w	800c5ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c462:	f7f7 ff79 	bl	8004358 <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c46e:	429a      	cmp	r2, r3
 800c470:	d302      	bcc.n	800c478 <UART_WaitOnFlagUntilTimeout+0x32>
 800c472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c474:	2b00      	cmp	r3, #0
 800c476:	d140      	bne.n	800c4fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c480:	e853 3f00 	ldrex	r3, [r3]
 800c484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c48c:	667b      	str	r3, [r7, #100]	; 0x64
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c496:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c498:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c49c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c49e:	e841 2300 	strex	r3, r2, [r1]
 800c4a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1e6      	bne.n	800c478 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	f023 0301 	bic.w	r3, r3, #1
 800c4c0:	663b      	str	r3, [r7, #96]	; 0x60
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e5      	bne.n	800c4aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e069      	b.n	800c5ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d051      	beq.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c516:	d149      	bne.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c520:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	e853 3f00 	ldrex	r3, [r3]
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c536:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c540:	637b      	str	r3, [r7, #52]	; 0x34
 800c542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c548:	e841 2300 	strex	r3, r2, [r1]
 800c54c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e6      	bne.n	800c522 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3308      	adds	r3, #8
 800c55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	e853 3f00 	ldrex	r3, [r3]
 800c562:	613b      	str	r3, [r7, #16]
   return(result);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f023 0301 	bic.w	r3, r3, #1
 800c56a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3308      	adds	r3, #8
 800c572:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c574:	623a      	str	r2, [r7, #32]
 800c576:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c578:	69f9      	ldr	r1, [r7, #28]
 800c57a:	6a3a      	ldr	r2, [r7, #32]
 800c57c:	e841 2300 	strex	r3, r2, [r1]
 800c580:	61bb      	str	r3, [r7, #24]
   return(result);
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e5      	bne.n	800c554 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2220      	movs	r2, #32
 800c594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e010      	b.n	800c5ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	69da      	ldr	r2, [r3, #28]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2301      	moveq	r3, #1
 800c5be:	2300      	movne	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	f43f af46 	beq.w	800c458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3770      	adds	r7, #112	; 0x70
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b095      	sub	sp, #84	; 0x54
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c600:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c606:	e841 2300 	strex	r3, r2, [r1]
 800c60a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1e6      	bne.n	800c5e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3308      	adds	r3, #8
 800c618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	e853 3f00 	ldrex	r3, [r3]
 800c620:	61fb      	str	r3, [r7, #28]
   return(result);
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	4b1e      	ldr	r3, [pc, #120]	; (800c6a0 <UART_EndRxTransfer+0xc8>)
 800c626:	4013      	ands	r3, r2
 800c628:	64bb      	str	r3, [r7, #72]	; 0x48
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3308      	adds	r3, #8
 800c630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c632:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c63a:	e841 2300 	strex	r3, r2, [r1]
 800c63e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e5      	bne.n	800c612 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d118      	bne.n	800c680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	e853 3f00 	ldrex	r3, [r3]
 800c65a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f023 0310 	bic.w	r3, r3, #16
 800c662:	647b      	str	r3, [r7, #68]	; 0x44
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	461a      	mov	r2, r3
 800c66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66c:	61bb      	str	r3, [r7, #24]
 800c66e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6979      	ldr	r1, [r7, #20]
 800c672:	69ba      	ldr	r2, [r7, #24]
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	613b      	str	r3, [r7, #16]
   return(result);
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e6      	bne.n	800c64e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2220      	movs	r2, #32
 800c684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c694:	bf00      	nop
 800c696:	3754      	adds	r7, #84	; 0x54
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	effffffe 	.word	0xeffffffe

0800c6a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff f854 	bl	800b770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c8:	bf00      	nop
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	61bb      	str	r3, [r7, #24]
 800c6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6979      	ldr	r1, [r7, #20]
 800c6fc:	69ba      	ldr	r2, [r7, #24]
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	613b      	str	r3, [r7, #16]
   return(result);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e6      	bne.n	800c6d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff f81f 	bl	800b75c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c71e:	bf00      	nop
 800c720:	3720      	adds	r7, #32
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c72e:	bf00      	nop
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c762:	b480      	push	{r7}
 800c764:	b085      	sub	sp, #20
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_UARTEx_DisableFifoMode+0x16>
 800c774:	2302      	movs	r3, #2
 800c776:	e027      	b.n	800c7c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2224      	movs	r2, #36	; 0x24
 800c784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 0201 	bic.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e02d      	b.n	800c848 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2224      	movs	r2, #36	; 0x24
 800c7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0201 	bic.w	r2, r2, #1
 800c812:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f84f 	bl	800c8cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c860:	2b01      	cmp	r3, #1
 800c862:	d101      	bne.n	800c868 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c864:	2302      	movs	r3, #2
 800c866:	e02d      	b.n	800c8c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2224      	movs	r2, #36	; 0x24
 800c874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f022 0201 	bic.w	r2, r2, #1
 800c88e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f811 	bl	800c8cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d108      	bne.n	800c8ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8ec:	e031      	b.n	800c952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8ee:	2310      	movs	r3, #16
 800c8f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8f2:	2310      	movs	r3, #16
 800c8f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	0e5b      	lsrs	r3, r3, #25
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 0307 	and.w	r3, r3, #7
 800c904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	0f5b      	lsrs	r3, r3, #29
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	f003 0307 	and.w	r3, r3, #7
 800c914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c916:	7bbb      	ldrb	r3, [r7, #14]
 800c918:	7b3a      	ldrb	r2, [r7, #12]
 800c91a:	4911      	ldr	r1, [pc, #68]	; (800c960 <UARTEx_SetNbDataToProcess+0x94>)
 800c91c:	5c8a      	ldrb	r2, [r1, r2]
 800c91e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c922:	7b3a      	ldrb	r2, [r7, #12]
 800c924:	490f      	ldr	r1, [pc, #60]	; (800c964 <UARTEx_SetNbDataToProcess+0x98>)
 800c926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c928:	fb93 f3f2 	sdiv	r3, r3, r2
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	7b7a      	ldrb	r2, [r7, #13]
 800c938:	4909      	ldr	r1, [pc, #36]	; (800c960 <UARTEx_SetNbDataToProcess+0x94>)
 800c93a:	5c8a      	ldrb	r2, [r1, r2]
 800c93c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c940:	7b7a      	ldrb	r2, [r7, #13]
 800c942:	4908      	ldr	r1, [pc, #32]	; (800c964 <UARTEx_SetNbDataToProcess+0x98>)
 800c944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c946:	fb93 f3f2 	sdiv	r3, r3, r2
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	0800efa4 	.word	0x0800efa4
 800c964:	0800efac 	.word	0x0800efac

0800c968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c968:	b084      	sub	sp, #16
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	f107 001c 	add.w	r0, r7, #28
 800c976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d120      	bne.n	800c9c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68da      	ldr	r2, [r3, #12]
 800c990:	4b2a      	ldr	r3, [pc, #168]	; (800ca3c <USB_CoreInit+0xd4>)
 800c992:	4013      	ands	r3, r2
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d105      	bne.n	800c9b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 faac 	bl	800cf14 <USB_CoreReset>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	e01a      	b.n	800c9f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 faa0 	bl	800cf14 <USB_CoreReset>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	639a      	str	r2, [r3, #56]	; 0x38
 800c9ea:	e005      	b.n	800c9f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d116      	bne.n	800ca2c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	; (800ca40 <USB_CoreInit+0xd8>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f043 0206 	orr.w	r2, r3, #6
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	f043 0220 	orr.w	r2, r3, #32
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca38:	b004      	add	sp, #16
 800ca3a:	4770      	bx	lr
 800ca3c:	ffbdffbf 	.word	0xffbdffbf
 800ca40:	03ee0000 	.word	0x03ee0000

0800ca44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f023 0201 	bic.w	r2, r3, #1
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d115      	bne.n	800cab4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca94:	2001      	movs	r0, #1
 800ca96:	f7f7 fc6b 	bl	8004370 <HAL_Delay>
      ms++;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa29 	bl	800cef8 <USB_GetMode>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d01e      	beq.n	800caea <USB_SetCurrentMode+0x84>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b31      	cmp	r3, #49	; 0x31
 800cab0:	d9f0      	bls.n	800ca94 <USB_SetCurrentMode+0x2e>
 800cab2:	e01a      	b.n	800caea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d115      	bne.n	800cae6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cac6:	2001      	movs	r0, #1
 800cac8:	f7f7 fc52 	bl	8004370 <HAL_Delay>
      ms++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fa10 	bl	800cef8 <USB_GetMode>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <USB_SetCurrentMode+0x84>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b31      	cmp	r3, #49	; 0x31
 800cae2:	d9f0      	bls.n	800cac6 <USB_SetCurrentMode+0x60>
 800cae4:	e001      	b.n	800caea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e005      	b.n	800caf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b32      	cmp	r3, #50	; 0x32
 800caee:	d101      	bne.n	800caf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb00:	b084      	sub	sp, #16
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	e009      	b.n	800cb34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3340      	adds	r3, #64	; 0x40
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	3301      	adds	r3, #1
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	2b0e      	cmp	r3, #14
 800cb38:	d9f2      	bls.n	800cb20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11c      	bne.n	800cb7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb4e:	f043 0302 	orr.w	r3, r3, #2
 800cb52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	e005      	b.n	800cb86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb98:	4619      	mov	r1, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba0:	461a      	mov	r2, r3
 800cba2:	680b      	ldr	r3, [r1, #0]
 800cba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d10c      	bne.n	800cbc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d104      	bne.n	800cbbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f965 	bl	800ce84 <USB_SetDevSpeed>
 800cbba:	e008      	b.n	800cbce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f960 	bl	800ce84 <USB_SetDevSpeed>
 800cbc4:	e003      	b.n	800cbce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cbc6:	2103      	movs	r1, #3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f95b 	bl	800ce84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbce:	2110      	movs	r1, #16
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f8f3 	bl	800cdbc <USB_FlushTxFifo>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f91f 	bl	800ce24 <USB_FlushRxFifo>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc02:	461a      	mov	r2, r3
 800cc04:	2300      	movs	r3, #0
 800cc06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0e:	461a      	mov	r2, r3
 800cc10:	2300      	movs	r3, #0
 800cc12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc14:	2300      	movs	r3, #0
 800cc16:	613b      	str	r3, [r7, #16]
 800cc18:	e043      	b.n	800cca2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc30:	d118      	bne.n	800cc64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc44:	461a      	mov	r2, r3
 800cc46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	e013      	b.n	800cc76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	015a      	lsls	r2, r3, #5
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	4413      	add	r3, r2
 800cc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	e008      	b.n	800cc76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc70:	461a      	mov	r2, r3
 800cc72:	2300      	movs	r3, #0
 800cc74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc82:	461a      	mov	r2, r3
 800cc84:	2300      	movs	r3, #0
 800cc86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	461a      	mov	r2, r3
 800cc96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d3b7      	bcc.n	800cc1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccaa:	2300      	movs	r3, #0
 800ccac:	613b      	str	r3, [r7, #16]
 800ccae:	e043      	b.n	800cd38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccc6:	d118      	bne.n	800ccfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	015a      	lsls	r2, r3, #5
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	e013      	b.n	800cd0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	e008      	b.n	800cd0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	015a      	lsls	r2, r3, #5
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	4413      	add	r3, r2
 800cd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd06:	461a      	mov	r2, r3
 800cd08:	2300      	movs	r3, #0
 800cd0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	015a      	lsls	r2, r3, #5
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3301      	adds	r3, #1
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3b7      	bcc.n	800ccb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cd60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d105      	bne.n	800cd74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	f043 0210 	orr.w	r2, r3, #16
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699a      	ldr	r2, [r3, #24]
 800cd78:	4b0e      	ldr	r3, [pc, #56]	; (800cdb4 <USB_DevInit+0x2b4>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	f043 0208 	orr.w	r2, r3, #8
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d105      	bne.n	800cda4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <USB_DevInit+0x2b8>)
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdb0:	b004      	add	sp, #16
 800cdb2:	4770      	bx	lr
 800cdb4:	803c3800 	.word	0x803c3800
 800cdb8:	40000004 	.word	0x40000004

0800cdbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	4a13      	ldr	r2, [pc, #76]	; (800ce20 <USB_FlushTxFifo+0x64>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d901      	bls.n	800cddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e01b      	b.n	800ce14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	daf2      	bge.n	800cdca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	019b      	lsls	r3, r3, #6
 800cdec:	f043 0220 	orr.w	r2, r3, #32
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	4a08      	ldr	r2, [pc, #32]	; (800ce20 <USB_FlushTxFifo+0x64>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d901      	bls.n	800ce06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce02:	2303      	movs	r3, #3
 800ce04:	e006      	b.n	800ce14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b20      	cmp	r3, #32
 800ce10:	d0f0      	beq.n	800cdf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	00030d40 	.word	0x00030d40

0800ce24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4a11      	ldr	r2, [pc, #68]	; (800ce80 <USB_FlushRxFifo+0x5c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d901      	bls.n	800ce42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e018      	b.n	800ce74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	daf2      	bge.n	800ce30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2210      	movs	r2, #16
 800ce52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	3301      	adds	r3, #1
 800ce58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <USB_FlushRxFifo+0x5c>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d901      	bls.n	800ce66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e006      	b.n	800ce74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	f003 0310 	and.w	r3, r3, #16
 800ce6e:	2b10      	cmp	r3, #16
 800ce70:	d0f0      	beq.n	800ce54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	00030d40 	.word	0x00030d40

0800ce84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cea4:	4313      	orrs	r3, r2
 800cea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cee4:	f043 0302 	orr.w	r3, r3, #2
 800cee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	f003 0301 	and.w	r3, r3, #1
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4a13      	ldr	r2, [pc, #76]	; (800cf78 <USB_CoreReset+0x64>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d901      	bls.n	800cf32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e01b      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	daf2      	bge.n	800cf20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	f043 0201 	orr.w	r2, r3, #1
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <USB_CoreReset+0x64>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d901      	bls.n	800cf5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e006      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d0f0      	beq.n	800cf4a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	00030d40 	.word	0x00030d40

0800cf7c <__errno>:
 800cf7c:	4b01      	ldr	r3, [pc, #4]	; (800cf84 <__errno+0x8>)
 800cf7e:	6818      	ldr	r0, [r3, #0]
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	24000024 	.word	0x24000024

0800cf88 <__libc_init_array>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	4d0d      	ldr	r5, [pc, #52]	; (800cfc0 <__libc_init_array+0x38>)
 800cf8c:	4c0d      	ldr	r4, [pc, #52]	; (800cfc4 <__libc_init_array+0x3c>)
 800cf8e:	1b64      	subs	r4, r4, r5
 800cf90:	10a4      	asrs	r4, r4, #2
 800cf92:	2600      	movs	r6, #0
 800cf94:	42a6      	cmp	r6, r4
 800cf96:	d109      	bne.n	800cfac <__libc_init_array+0x24>
 800cf98:	4d0b      	ldr	r5, [pc, #44]	; (800cfc8 <__libc_init_array+0x40>)
 800cf9a:	4c0c      	ldr	r4, [pc, #48]	; (800cfcc <__libc_init_array+0x44>)
 800cf9c:	f000 fc8e 	bl	800d8bc <_init>
 800cfa0:	1b64      	subs	r4, r4, r5
 800cfa2:	10a4      	asrs	r4, r4, #2
 800cfa4:	2600      	movs	r6, #0
 800cfa6:	42a6      	cmp	r6, r4
 800cfa8:	d105      	bne.n	800cfb6 <__libc_init_array+0x2e>
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}
 800cfac:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb0:	4798      	blx	r3
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	e7ee      	b.n	800cf94 <__libc_init_array+0xc>
 800cfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfba:	4798      	blx	r3
 800cfbc:	3601      	adds	r6, #1
 800cfbe:	e7f2      	b.n	800cfa6 <__libc_init_array+0x1e>
 800cfc0:	0800eff0 	.word	0x0800eff0
 800cfc4:	0800eff0 	.word	0x0800eff0
 800cfc8:	0800eff0 	.word	0x0800eff0
 800cfcc:	0800eff4 	.word	0x0800eff4

0800cfd0 <memset>:
 800cfd0:	4402      	add	r2, r0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d100      	bne.n	800cfda <memset+0xa>
 800cfd8:	4770      	bx	lr
 800cfda:	f803 1b01 	strb.w	r1, [r3], #1
 800cfde:	e7f9      	b.n	800cfd4 <memset+0x4>

0800cfe0 <_free_r>:
 800cfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfe2:	2900      	cmp	r1, #0
 800cfe4:	d044      	beq.n	800d070 <_free_r+0x90>
 800cfe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfea:	9001      	str	r0, [sp, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f1a1 0404 	sub.w	r4, r1, #4
 800cff2:	bfb8      	it	lt
 800cff4:	18e4      	addlt	r4, r4, r3
 800cff6:	f000 f903 	bl	800d200 <__malloc_lock>
 800cffa:	4a1e      	ldr	r2, [pc, #120]	; (800d074 <_free_r+0x94>)
 800cffc:	9801      	ldr	r0, [sp, #4]
 800cffe:	6813      	ldr	r3, [r2, #0]
 800d000:	b933      	cbnz	r3, 800d010 <_free_r+0x30>
 800d002:	6063      	str	r3, [r4, #4]
 800d004:	6014      	str	r4, [r2, #0]
 800d006:	b003      	add	sp, #12
 800d008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d00c:	f000 b8fe 	b.w	800d20c <__malloc_unlock>
 800d010:	42a3      	cmp	r3, r4
 800d012:	d908      	bls.n	800d026 <_free_r+0x46>
 800d014:	6825      	ldr	r5, [r4, #0]
 800d016:	1961      	adds	r1, r4, r5
 800d018:	428b      	cmp	r3, r1
 800d01a:	bf01      	itttt	eq
 800d01c:	6819      	ldreq	r1, [r3, #0]
 800d01e:	685b      	ldreq	r3, [r3, #4]
 800d020:	1949      	addeq	r1, r1, r5
 800d022:	6021      	streq	r1, [r4, #0]
 800d024:	e7ed      	b.n	800d002 <_free_r+0x22>
 800d026:	461a      	mov	r2, r3
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	b10b      	cbz	r3, 800d030 <_free_r+0x50>
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d9fa      	bls.n	800d026 <_free_r+0x46>
 800d030:	6811      	ldr	r1, [r2, #0]
 800d032:	1855      	adds	r5, r2, r1
 800d034:	42a5      	cmp	r5, r4
 800d036:	d10b      	bne.n	800d050 <_free_r+0x70>
 800d038:	6824      	ldr	r4, [r4, #0]
 800d03a:	4421      	add	r1, r4
 800d03c:	1854      	adds	r4, r2, r1
 800d03e:	42a3      	cmp	r3, r4
 800d040:	6011      	str	r1, [r2, #0]
 800d042:	d1e0      	bne.n	800d006 <_free_r+0x26>
 800d044:	681c      	ldr	r4, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	6053      	str	r3, [r2, #4]
 800d04a:	4421      	add	r1, r4
 800d04c:	6011      	str	r1, [r2, #0]
 800d04e:	e7da      	b.n	800d006 <_free_r+0x26>
 800d050:	d902      	bls.n	800d058 <_free_r+0x78>
 800d052:	230c      	movs	r3, #12
 800d054:	6003      	str	r3, [r0, #0]
 800d056:	e7d6      	b.n	800d006 <_free_r+0x26>
 800d058:	6825      	ldr	r5, [r4, #0]
 800d05a:	1961      	adds	r1, r4, r5
 800d05c:	428b      	cmp	r3, r1
 800d05e:	bf04      	itt	eq
 800d060:	6819      	ldreq	r1, [r3, #0]
 800d062:	685b      	ldreq	r3, [r3, #4]
 800d064:	6063      	str	r3, [r4, #4]
 800d066:	bf04      	itt	eq
 800d068:	1949      	addeq	r1, r1, r5
 800d06a:	6021      	streq	r1, [r4, #0]
 800d06c:	6054      	str	r4, [r2, #4]
 800d06e:	e7ca      	b.n	800d006 <_free_r+0x26>
 800d070:	b003      	add	sp, #12
 800d072:	bd30      	pop	{r4, r5, pc}
 800d074:	24000eb0 	.word	0x24000eb0

0800d078 <sbrk_aligned>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4e0e      	ldr	r6, [pc, #56]	; (800d0b4 <sbrk_aligned+0x3c>)
 800d07c:	460c      	mov	r4, r1
 800d07e:	6831      	ldr	r1, [r6, #0]
 800d080:	4605      	mov	r5, r0
 800d082:	b911      	cbnz	r1, 800d08a <sbrk_aligned+0x12>
 800d084:	f000 f88c 	bl	800d1a0 <_sbrk_r>
 800d088:	6030      	str	r0, [r6, #0]
 800d08a:	4621      	mov	r1, r4
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 f887 	bl	800d1a0 <_sbrk_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d00a      	beq.n	800d0ac <sbrk_aligned+0x34>
 800d096:	1cc4      	adds	r4, r0, #3
 800d098:	f024 0403 	bic.w	r4, r4, #3
 800d09c:	42a0      	cmp	r0, r4
 800d09e:	d007      	beq.n	800d0b0 <sbrk_aligned+0x38>
 800d0a0:	1a21      	subs	r1, r4, r0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f000 f87c 	bl	800d1a0 <_sbrk_r>
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	d101      	bne.n	800d0b0 <sbrk_aligned+0x38>
 800d0ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	24000eb4 	.word	0x24000eb4

0800d0b8 <_malloc_r>:
 800d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0bc:	1ccd      	adds	r5, r1, #3
 800d0be:	f025 0503 	bic.w	r5, r5, #3
 800d0c2:	3508      	adds	r5, #8
 800d0c4:	2d0c      	cmp	r5, #12
 800d0c6:	bf38      	it	cc
 800d0c8:	250c      	movcc	r5, #12
 800d0ca:	2d00      	cmp	r5, #0
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	db01      	blt.n	800d0d4 <_malloc_r+0x1c>
 800d0d0:	42a9      	cmp	r1, r5
 800d0d2:	d905      	bls.n	800d0e0 <_malloc_r+0x28>
 800d0d4:	230c      	movs	r3, #12
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	2600      	movs	r6, #0
 800d0da:	4630      	mov	r0, r6
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e0:	4e2e      	ldr	r6, [pc, #184]	; (800d19c <_malloc_r+0xe4>)
 800d0e2:	f000 f88d 	bl	800d200 <__malloc_lock>
 800d0e6:	6833      	ldr	r3, [r6, #0]
 800d0e8:	461c      	mov	r4, r3
 800d0ea:	bb34      	cbnz	r4, 800d13a <_malloc_r+0x82>
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f7ff ffc2 	bl	800d078 <sbrk_aligned>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	d14d      	bne.n	800d196 <_malloc_r+0xde>
 800d0fa:	6834      	ldr	r4, [r6, #0]
 800d0fc:	4626      	mov	r6, r4
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d140      	bne.n	800d184 <_malloc_r+0xcc>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	4631      	mov	r1, r6
 800d106:	4638      	mov	r0, r7
 800d108:	eb04 0803 	add.w	r8, r4, r3
 800d10c:	f000 f848 	bl	800d1a0 <_sbrk_r>
 800d110:	4580      	cmp	r8, r0
 800d112:	d13a      	bne.n	800d18a <_malloc_r+0xd2>
 800d114:	6821      	ldr	r1, [r4, #0]
 800d116:	3503      	adds	r5, #3
 800d118:	1a6d      	subs	r5, r5, r1
 800d11a:	f025 0503 	bic.w	r5, r5, #3
 800d11e:	3508      	adds	r5, #8
 800d120:	2d0c      	cmp	r5, #12
 800d122:	bf38      	it	cc
 800d124:	250c      	movcc	r5, #12
 800d126:	4629      	mov	r1, r5
 800d128:	4638      	mov	r0, r7
 800d12a:	f7ff ffa5 	bl	800d078 <sbrk_aligned>
 800d12e:	3001      	adds	r0, #1
 800d130:	d02b      	beq.n	800d18a <_malloc_r+0xd2>
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	442b      	add	r3, r5
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	e00e      	b.n	800d158 <_malloc_r+0xa0>
 800d13a:	6822      	ldr	r2, [r4, #0]
 800d13c:	1b52      	subs	r2, r2, r5
 800d13e:	d41e      	bmi.n	800d17e <_malloc_r+0xc6>
 800d140:	2a0b      	cmp	r2, #11
 800d142:	d916      	bls.n	800d172 <_malloc_r+0xba>
 800d144:	1961      	adds	r1, r4, r5
 800d146:	42a3      	cmp	r3, r4
 800d148:	6025      	str	r5, [r4, #0]
 800d14a:	bf18      	it	ne
 800d14c:	6059      	strne	r1, [r3, #4]
 800d14e:	6863      	ldr	r3, [r4, #4]
 800d150:	bf08      	it	eq
 800d152:	6031      	streq	r1, [r6, #0]
 800d154:	5162      	str	r2, [r4, r5]
 800d156:	604b      	str	r3, [r1, #4]
 800d158:	4638      	mov	r0, r7
 800d15a:	f104 060b 	add.w	r6, r4, #11
 800d15e:	f000 f855 	bl	800d20c <__malloc_unlock>
 800d162:	f026 0607 	bic.w	r6, r6, #7
 800d166:	1d23      	adds	r3, r4, #4
 800d168:	1af2      	subs	r2, r6, r3
 800d16a:	d0b6      	beq.n	800d0da <_malloc_r+0x22>
 800d16c:	1b9b      	subs	r3, r3, r6
 800d16e:	50a3      	str	r3, [r4, r2]
 800d170:	e7b3      	b.n	800d0da <_malloc_r+0x22>
 800d172:	6862      	ldr	r2, [r4, #4]
 800d174:	42a3      	cmp	r3, r4
 800d176:	bf0c      	ite	eq
 800d178:	6032      	streq	r2, [r6, #0]
 800d17a:	605a      	strne	r2, [r3, #4]
 800d17c:	e7ec      	b.n	800d158 <_malloc_r+0xa0>
 800d17e:	4623      	mov	r3, r4
 800d180:	6864      	ldr	r4, [r4, #4]
 800d182:	e7b2      	b.n	800d0ea <_malloc_r+0x32>
 800d184:	4634      	mov	r4, r6
 800d186:	6876      	ldr	r6, [r6, #4]
 800d188:	e7b9      	b.n	800d0fe <_malloc_r+0x46>
 800d18a:	230c      	movs	r3, #12
 800d18c:	603b      	str	r3, [r7, #0]
 800d18e:	4638      	mov	r0, r7
 800d190:	f000 f83c 	bl	800d20c <__malloc_unlock>
 800d194:	e7a1      	b.n	800d0da <_malloc_r+0x22>
 800d196:	6025      	str	r5, [r4, #0]
 800d198:	e7de      	b.n	800d158 <_malloc_r+0xa0>
 800d19a:	bf00      	nop
 800d19c:	24000eb0 	.word	0x24000eb0

0800d1a0 <_sbrk_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_sbrk_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f7f6 ffee 	bl	800418c <_sbrk>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_sbrk_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_sbrk_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	24000eb8 	.word	0x24000eb8

0800d1c0 <siprintf>:
 800d1c0:	b40e      	push	{r1, r2, r3}
 800d1c2:	b500      	push	{lr}
 800d1c4:	b09c      	sub	sp, #112	; 0x70
 800d1c6:	ab1d      	add	r3, sp, #116	; 0x74
 800d1c8:	9002      	str	r0, [sp, #8]
 800d1ca:	9006      	str	r0, [sp, #24]
 800d1cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1d0:	4809      	ldr	r0, [pc, #36]	; (800d1f8 <siprintf+0x38>)
 800d1d2:	9107      	str	r1, [sp, #28]
 800d1d4:	9104      	str	r1, [sp, #16]
 800d1d6:	4909      	ldr	r1, [pc, #36]	; (800d1fc <siprintf+0x3c>)
 800d1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1dc:	9105      	str	r1, [sp, #20]
 800d1de:	6800      	ldr	r0, [r0, #0]
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	a902      	add	r1, sp, #8
 800d1e4:	f000 f874 	bl	800d2d0 <_svfiprintf_r>
 800d1e8:	9b02      	ldr	r3, [sp, #8]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	b01c      	add	sp, #112	; 0x70
 800d1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1f4:	b003      	add	sp, #12
 800d1f6:	4770      	bx	lr
 800d1f8:	24000024 	.word	0x24000024
 800d1fc:	ffff0208 	.word	0xffff0208

0800d200 <__malloc_lock>:
 800d200:	4801      	ldr	r0, [pc, #4]	; (800d208 <__malloc_lock+0x8>)
 800d202:	f000 baf9 	b.w	800d7f8 <__retarget_lock_acquire_recursive>
 800d206:	bf00      	nop
 800d208:	24000ebc 	.word	0x24000ebc

0800d20c <__malloc_unlock>:
 800d20c:	4801      	ldr	r0, [pc, #4]	; (800d214 <__malloc_unlock+0x8>)
 800d20e:	f000 baf4 	b.w	800d7fa <__retarget_lock_release_recursive>
 800d212:	bf00      	nop
 800d214:	24000ebc 	.word	0x24000ebc

0800d218 <__ssputs_r>:
 800d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21c:	688e      	ldr	r6, [r1, #8]
 800d21e:	429e      	cmp	r6, r3
 800d220:	4682      	mov	sl, r0
 800d222:	460c      	mov	r4, r1
 800d224:	4690      	mov	r8, r2
 800d226:	461f      	mov	r7, r3
 800d228:	d838      	bhi.n	800d29c <__ssputs_r+0x84>
 800d22a:	898a      	ldrh	r2, [r1, #12]
 800d22c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d230:	d032      	beq.n	800d298 <__ssputs_r+0x80>
 800d232:	6825      	ldr	r5, [r4, #0]
 800d234:	6909      	ldr	r1, [r1, #16]
 800d236:	eba5 0901 	sub.w	r9, r5, r1
 800d23a:	6965      	ldr	r5, [r4, #20]
 800d23c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d244:	3301      	adds	r3, #1
 800d246:	444b      	add	r3, r9
 800d248:	106d      	asrs	r5, r5, #1
 800d24a:	429d      	cmp	r5, r3
 800d24c:	bf38      	it	cc
 800d24e:	461d      	movcc	r5, r3
 800d250:	0553      	lsls	r3, r2, #21
 800d252:	d531      	bpl.n	800d2b8 <__ssputs_r+0xa0>
 800d254:	4629      	mov	r1, r5
 800d256:	f7ff ff2f 	bl	800d0b8 <_malloc_r>
 800d25a:	4606      	mov	r6, r0
 800d25c:	b950      	cbnz	r0, 800d274 <__ssputs_r+0x5c>
 800d25e:	230c      	movs	r3, #12
 800d260:	f8ca 3000 	str.w	r3, [sl]
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26a:	81a3      	strh	r3, [r4, #12]
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295
 800d270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d274:	6921      	ldr	r1, [r4, #16]
 800d276:	464a      	mov	r2, r9
 800d278:	f000 fac0 	bl	800d7fc <memcpy>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	6126      	str	r6, [r4, #16]
 800d28a:	6165      	str	r5, [r4, #20]
 800d28c:	444e      	add	r6, r9
 800d28e:	eba5 0509 	sub.w	r5, r5, r9
 800d292:	6026      	str	r6, [r4, #0]
 800d294:	60a5      	str	r5, [r4, #8]
 800d296:	463e      	mov	r6, r7
 800d298:	42be      	cmp	r6, r7
 800d29a:	d900      	bls.n	800d29e <__ssputs_r+0x86>
 800d29c:	463e      	mov	r6, r7
 800d29e:	6820      	ldr	r0, [r4, #0]
 800d2a0:	4632      	mov	r2, r6
 800d2a2:	4641      	mov	r1, r8
 800d2a4:	f000 fab8 	bl	800d818 <memmove>
 800d2a8:	68a3      	ldr	r3, [r4, #8]
 800d2aa:	1b9b      	subs	r3, r3, r6
 800d2ac:	60a3      	str	r3, [r4, #8]
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	4433      	add	r3, r6
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e7db      	b.n	800d270 <__ssputs_r+0x58>
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	f000 fac7 	bl	800d84c <_realloc_r>
 800d2be:	4606      	mov	r6, r0
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d1e1      	bne.n	800d288 <__ssputs_r+0x70>
 800d2c4:	6921      	ldr	r1, [r4, #16]
 800d2c6:	4650      	mov	r0, sl
 800d2c8:	f7ff fe8a 	bl	800cfe0 <_free_r>
 800d2cc:	e7c7      	b.n	800d25e <__ssputs_r+0x46>
	...

0800d2d0 <_svfiprintf_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	4698      	mov	r8, r3
 800d2d6:	898b      	ldrh	r3, [r1, #12]
 800d2d8:	061b      	lsls	r3, r3, #24
 800d2da:	b09d      	sub	sp, #116	; 0x74
 800d2dc:	4607      	mov	r7, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	4614      	mov	r4, r2
 800d2e2:	d50e      	bpl.n	800d302 <_svfiprintf_r+0x32>
 800d2e4:	690b      	ldr	r3, [r1, #16]
 800d2e6:	b963      	cbnz	r3, 800d302 <_svfiprintf_r+0x32>
 800d2e8:	2140      	movs	r1, #64	; 0x40
 800d2ea:	f7ff fee5 	bl	800d0b8 <_malloc_r>
 800d2ee:	6028      	str	r0, [r5, #0]
 800d2f0:	6128      	str	r0, [r5, #16]
 800d2f2:	b920      	cbnz	r0, 800d2fe <_svfiprintf_r+0x2e>
 800d2f4:	230c      	movs	r3, #12
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	e0d1      	b.n	800d4a2 <_svfiprintf_r+0x1d2>
 800d2fe:	2340      	movs	r3, #64	; 0x40
 800d300:	616b      	str	r3, [r5, #20]
 800d302:	2300      	movs	r3, #0
 800d304:	9309      	str	r3, [sp, #36]	; 0x24
 800d306:	2320      	movs	r3, #32
 800d308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d310:	2330      	movs	r3, #48	; 0x30
 800d312:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4bc <_svfiprintf_r+0x1ec>
 800d316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d31a:	f04f 0901 	mov.w	r9, #1
 800d31e:	4623      	mov	r3, r4
 800d320:	469a      	mov	sl, r3
 800d322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d326:	b10a      	cbz	r2, 800d32c <_svfiprintf_r+0x5c>
 800d328:	2a25      	cmp	r2, #37	; 0x25
 800d32a:	d1f9      	bne.n	800d320 <_svfiprintf_r+0x50>
 800d32c:	ebba 0b04 	subs.w	fp, sl, r4
 800d330:	d00b      	beq.n	800d34a <_svfiprintf_r+0x7a>
 800d332:	465b      	mov	r3, fp
 800d334:	4622      	mov	r2, r4
 800d336:	4629      	mov	r1, r5
 800d338:	4638      	mov	r0, r7
 800d33a:	f7ff ff6d 	bl	800d218 <__ssputs_r>
 800d33e:	3001      	adds	r0, #1
 800d340:	f000 80aa 	beq.w	800d498 <_svfiprintf_r+0x1c8>
 800d344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d346:	445a      	add	r2, fp
 800d348:	9209      	str	r2, [sp, #36]	; 0x24
 800d34a:	f89a 3000 	ldrb.w	r3, [sl]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 80a2 	beq.w	800d498 <_svfiprintf_r+0x1c8>
 800d354:	2300      	movs	r3, #0
 800d356:	f04f 32ff 	mov.w	r2, #4294967295
 800d35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d35e:	f10a 0a01 	add.w	sl, sl, #1
 800d362:	9304      	str	r3, [sp, #16]
 800d364:	9307      	str	r3, [sp, #28]
 800d366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d36a:	931a      	str	r3, [sp, #104]	; 0x68
 800d36c:	4654      	mov	r4, sl
 800d36e:	2205      	movs	r2, #5
 800d370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d374:	4851      	ldr	r0, [pc, #324]	; (800d4bc <_svfiprintf_r+0x1ec>)
 800d376:	f7f2 ffb3 	bl	80002e0 <memchr>
 800d37a:	9a04      	ldr	r2, [sp, #16]
 800d37c:	b9d8      	cbnz	r0, 800d3b6 <_svfiprintf_r+0xe6>
 800d37e:	06d0      	lsls	r0, r2, #27
 800d380:	bf44      	itt	mi
 800d382:	2320      	movmi	r3, #32
 800d384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d388:	0711      	lsls	r1, r2, #28
 800d38a:	bf44      	itt	mi
 800d38c:	232b      	movmi	r3, #43	; 0x2b
 800d38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d392:	f89a 3000 	ldrb.w	r3, [sl]
 800d396:	2b2a      	cmp	r3, #42	; 0x2a
 800d398:	d015      	beq.n	800d3c6 <_svfiprintf_r+0xf6>
 800d39a:	9a07      	ldr	r2, [sp, #28]
 800d39c:	4654      	mov	r4, sl
 800d39e:	2000      	movs	r0, #0
 800d3a0:	f04f 0c0a 	mov.w	ip, #10
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3aa:	3b30      	subs	r3, #48	; 0x30
 800d3ac:	2b09      	cmp	r3, #9
 800d3ae:	d94e      	bls.n	800d44e <_svfiprintf_r+0x17e>
 800d3b0:	b1b0      	cbz	r0, 800d3e0 <_svfiprintf_r+0x110>
 800d3b2:	9207      	str	r2, [sp, #28]
 800d3b4:	e014      	b.n	800d3e0 <_svfiprintf_r+0x110>
 800d3b6:	eba0 0308 	sub.w	r3, r0, r8
 800d3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	9304      	str	r3, [sp, #16]
 800d3c2:	46a2      	mov	sl, r4
 800d3c4:	e7d2      	b.n	800d36c <_svfiprintf_r+0x9c>
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	1d19      	adds	r1, r3, #4
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	9103      	str	r1, [sp, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bfbb      	ittet	lt
 800d3d2:	425b      	neglt	r3, r3
 800d3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d3d8:	9307      	strge	r3, [sp, #28]
 800d3da:	9307      	strlt	r3, [sp, #28]
 800d3dc:	bfb8      	it	lt
 800d3de:	9204      	strlt	r2, [sp, #16]
 800d3e0:	7823      	ldrb	r3, [r4, #0]
 800d3e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3e4:	d10c      	bne.n	800d400 <_svfiprintf_r+0x130>
 800d3e6:	7863      	ldrb	r3, [r4, #1]
 800d3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ea:	d135      	bne.n	800d458 <_svfiprintf_r+0x188>
 800d3ec:	9b03      	ldr	r3, [sp, #12]
 800d3ee:	1d1a      	adds	r2, r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	9203      	str	r2, [sp, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	bfb8      	it	lt
 800d3f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3fc:	3402      	adds	r4, #2
 800d3fe:	9305      	str	r3, [sp, #20]
 800d400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4cc <_svfiprintf_r+0x1fc>
 800d404:	7821      	ldrb	r1, [r4, #0]
 800d406:	2203      	movs	r2, #3
 800d408:	4650      	mov	r0, sl
 800d40a:	f7f2 ff69 	bl	80002e0 <memchr>
 800d40e:	b140      	cbz	r0, 800d422 <_svfiprintf_r+0x152>
 800d410:	2340      	movs	r3, #64	; 0x40
 800d412:	eba0 000a 	sub.w	r0, r0, sl
 800d416:	fa03 f000 	lsl.w	r0, r3, r0
 800d41a:	9b04      	ldr	r3, [sp, #16]
 800d41c:	4303      	orrs	r3, r0
 800d41e:	3401      	adds	r4, #1
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d426:	4826      	ldr	r0, [pc, #152]	; (800d4c0 <_svfiprintf_r+0x1f0>)
 800d428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d42c:	2206      	movs	r2, #6
 800d42e:	f7f2 ff57 	bl	80002e0 <memchr>
 800d432:	2800      	cmp	r0, #0
 800d434:	d038      	beq.n	800d4a8 <_svfiprintf_r+0x1d8>
 800d436:	4b23      	ldr	r3, [pc, #140]	; (800d4c4 <_svfiprintf_r+0x1f4>)
 800d438:	bb1b      	cbnz	r3, 800d482 <_svfiprintf_r+0x1b2>
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	3307      	adds	r3, #7
 800d43e:	f023 0307 	bic.w	r3, r3, #7
 800d442:	3308      	adds	r3, #8
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d448:	4433      	add	r3, r6
 800d44a:	9309      	str	r3, [sp, #36]	; 0x24
 800d44c:	e767      	b.n	800d31e <_svfiprintf_r+0x4e>
 800d44e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d452:	460c      	mov	r4, r1
 800d454:	2001      	movs	r0, #1
 800d456:	e7a5      	b.n	800d3a4 <_svfiprintf_r+0xd4>
 800d458:	2300      	movs	r3, #0
 800d45a:	3401      	adds	r4, #1
 800d45c:	9305      	str	r3, [sp, #20]
 800d45e:	4619      	mov	r1, r3
 800d460:	f04f 0c0a 	mov.w	ip, #10
 800d464:	4620      	mov	r0, r4
 800d466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d46a:	3a30      	subs	r2, #48	; 0x30
 800d46c:	2a09      	cmp	r2, #9
 800d46e:	d903      	bls.n	800d478 <_svfiprintf_r+0x1a8>
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0c5      	beq.n	800d400 <_svfiprintf_r+0x130>
 800d474:	9105      	str	r1, [sp, #20]
 800d476:	e7c3      	b.n	800d400 <_svfiprintf_r+0x130>
 800d478:	fb0c 2101 	mla	r1, ip, r1, r2
 800d47c:	4604      	mov	r4, r0
 800d47e:	2301      	movs	r3, #1
 800d480:	e7f0      	b.n	800d464 <_svfiprintf_r+0x194>
 800d482:	ab03      	add	r3, sp, #12
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	462a      	mov	r2, r5
 800d488:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <_svfiprintf_r+0x1f8>)
 800d48a:	a904      	add	r1, sp, #16
 800d48c:	4638      	mov	r0, r7
 800d48e:	f3af 8000 	nop.w
 800d492:	1c42      	adds	r2, r0, #1
 800d494:	4606      	mov	r6, r0
 800d496:	d1d6      	bne.n	800d446 <_svfiprintf_r+0x176>
 800d498:	89ab      	ldrh	r3, [r5, #12]
 800d49a:	065b      	lsls	r3, r3, #25
 800d49c:	f53f af2c 	bmi.w	800d2f8 <_svfiprintf_r+0x28>
 800d4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4a2:	b01d      	add	sp, #116	; 0x74
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a8:	ab03      	add	r3, sp, #12
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	462a      	mov	r2, r5
 800d4ae:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <_svfiprintf_r+0x1f8>)
 800d4b0:	a904      	add	r1, sp, #16
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	f000 f87a 	bl	800d5ac <_printf_i>
 800d4b8:	e7eb      	b.n	800d492 <_svfiprintf_r+0x1c2>
 800d4ba:	bf00      	nop
 800d4bc:	0800efb4 	.word	0x0800efb4
 800d4c0:	0800efbe 	.word	0x0800efbe
 800d4c4:	00000000 	.word	0x00000000
 800d4c8:	0800d219 	.word	0x0800d219
 800d4cc:	0800efba 	.word	0x0800efba

0800d4d0 <_printf_common>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	4616      	mov	r6, r2
 800d4d6:	4699      	mov	r9, r3
 800d4d8:	688a      	ldr	r2, [r1, #8]
 800d4da:	690b      	ldr	r3, [r1, #16]
 800d4dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	bfb8      	it	lt
 800d4e4:	4613      	movlt	r3, r2
 800d4e6:	6033      	str	r3, [r6, #0]
 800d4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	b10a      	cbz	r2, 800d4f6 <_printf_common+0x26>
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	6033      	str	r3, [r6, #0]
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	0699      	lsls	r1, r3, #26
 800d4fa:	bf42      	ittt	mi
 800d4fc:	6833      	ldrmi	r3, [r6, #0]
 800d4fe:	3302      	addmi	r3, #2
 800d500:	6033      	strmi	r3, [r6, #0]
 800d502:	6825      	ldr	r5, [r4, #0]
 800d504:	f015 0506 	ands.w	r5, r5, #6
 800d508:	d106      	bne.n	800d518 <_printf_common+0x48>
 800d50a:	f104 0a19 	add.w	sl, r4, #25
 800d50e:	68e3      	ldr	r3, [r4, #12]
 800d510:	6832      	ldr	r2, [r6, #0]
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	42ab      	cmp	r3, r5
 800d516:	dc26      	bgt.n	800d566 <_printf_common+0x96>
 800d518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d51c:	1e13      	subs	r3, r2, #0
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	bf18      	it	ne
 800d522:	2301      	movne	r3, #1
 800d524:	0692      	lsls	r2, r2, #26
 800d526:	d42b      	bmi.n	800d580 <_printf_common+0xb0>
 800d528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d52c:	4649      	mov	r1, r9
 800d52e:	4638      	mov	r0, r7
 800d530:	47c0      	blx	r8
 800d532:	3001      	adds	r0, #1
 800d534:	d01e      	beq.n	800d574 <_printf_common+0xa4>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	68e5      	ldr	r5, [r4, #12]
 800d53a:	6832      	ldr	r2, [r6, #0]
 800d53c:	f003 0306 	and.w	r3, r3, #6
 800d540:	2b04      	cmp	r3, #4
 800d542:	bf08      	it	eq
 800d544:	1aad      	subeq	r5, r5, r2
 800d546:	68a3      	ldr	r3, [r4, #8]
 800d548:	6922      	ldr	r2, [r4, #16]
 800d54a:	bf0c      	ite	eq
 800d54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d550:	2500      	movne	r5, #0
 800d552:	4293      	cmp	r3, r2
 800d554:	bfc4      	itt	gt
 800d556:	1a9b      	subgt	r3, r3, r2
 800d558:	18ed      	addgt	r5, r5, r3
 800d55a:	2600      	movs	r6, #0
 800d55c:	341a      	adds	r4, #26
 800d55e:	42b5      	cmp	r5, r6
 800d560:	d11a      	bne.n	800d598 <_printf_common+0xc8>
 800d562:	2000      	movs	r0, #0
 800d564:	e008      	b.n	800d578 <_printf_common+0xa8>
 800d566:	2301      	movs	r3, #1
 800d568:	4652      	mov	r2, sl
 800d56a:	4649      	mov	r1, r9
 800d56c:	4638      	mov	r0, r7
 800d56e:	47c0      	blx	r8
 800d570:	3001      	adds	r0, #1
 800d572:	d103      	bne.n	800d57c <_printf_common+0xac>
 800d574:	f04f 30ff 	mov.w	r0, #4294967295
 800d578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57c:	3501      	adds	r5, #1
 800d57e:	e7c6      	b.n	800d50e <_printf_common+0x3e>
 800d580:	18e1      	adds	r1, r4, r3
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	2030      	movs	r0, #48	; 0x30
 800d586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d58a:	4422      	add	r2, r4
 800d58c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d594:	3302      	adds	r3, #2
 800d596:	e7c7      	b.n	800d528 <_printf_common+0x58>
 800d598:	2301      	movs	r3, #1
 800d59a:	4622      	mov	r2, r4
 800d59c:	4649      	mov	r1, r9
 800d59e:	4638      	mov	r0, r7
 800d5a0:	47c0      	blx	r8
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d0e6      	beq.n	800d574 <_printf_common+0xa4>
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7d9      	b.n	800d55e <_printf_common+0x8e>
	...

0800d5ac <_printf_i>:
 800d5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b0:	7e0f      	ldrb	r7, [r1, #24]
 800d5b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b4:	2f78      	cmp	r7, #120	; 0x78
 800d5b6:	4691      	mov	r9, r2
 800d5b8:	4680      	mov	r8, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5c2:	d807      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5c4:	2f62      	cmp	r7, #98	; 0x62
 800d5c6:	d80a      	bhi.n	800d5de <_printf_i+0x32>
 800d5c8:	2f00      	cmp	r7, #0
 800d5ca:	f000 80d8 	beq.w	800d77e <_printf_i+0x1d2>
 800d5ce:	2f58      	cmp	r7, #88	; 0x58
 800d5d0:	f000 80a3 	beq.w	800d71a <_printf_i+0x16e>
 800d5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5dc:	e03a      	b.n	800d654 <_printf_i+0xa8>
 800d5de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5e2:	2b15      	cmp	r3, #21
 800d5e4:	d8f6      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5e6:	a101      	add	r1, pc, #4	; (adr r1, 800d5ec <_printf_i+0x40>)
 800d5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5ec:	0800d645 	.word	0x0800d645
 800d5f0:	0800d659 	.word	0x0800d659
 800d5f4:	0800d5d5 	.word	0x0800d5d5
 800d5f8:	0800d5d5 	.word	0x0800d5d5
 800d5fc:	0800d5d5 	.word	0x0800d5d5
 800d600:	0800d5d5 	.word	0x0800d5d5
 800d604:	0800d659 	.word	0x0800d659
 800d608:	0800d5d5 	.word	0x0800d5d5
 800d60c:	0800d5d5 	.word	0x0800d5d5
 800d610:	0800d5d5 	.word	0x0800d5d5
 800d614:	0800d5d5 	.word	0x0800d5d5
 800d618:	0800d765 	.word	0x0800d765
 800d61c:	0800d689 	.word	0x0800d689
 800d620:	0800d747 	.word	0x0800d747
 800d624:	0800d5d5 	.word	0x0800d5d5
 800d628:	0800d5d5 	.word	0x0800d5d5
 800d62c:	0800d787 	.word	0x0800d787
 800d630:	0800d5d5 	.word	0x0800d5d5
 800d634:	0800d689 	.word	0x0800d689
 800d638:	0800d5d5 	.word	0x0800d5d5
 800d63c:	0800d5d5 	.word	0x0800d5d5
 800d640:	0800d74f 	.word	0x0800d74f
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	1d1a      	adds	r2, r3, #4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	602a      	str	r2, [r5, #0]
 800d64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d654:	2301      	movs	r3, #1
 800d656:	e0a3      	b.n	800d7a0 <_printf_i+0x1f4>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	6829      	ldr	r1, [r5, #0]
 800d65c:	0606      	lsls	r6, r0, #24
 800d65e:	f101 0304 	add.w	r3, r1, #4
 800d662:	d50a      	bpl.n	800d67a <_printf_i+0xce>
 800d664:	680e      	ldr	r6, [r1, #0]
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	2e00      	cmp	r6, #0
 800d66a:	da03      	bge.n	800d674 <_printf_i+0xc8>
 800d66c:	232d      	movs	r3, #45	; 0x2d
 800d66e:	4276      	negs	r6, r6
 800d670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d674:	485e      	ldr	r0, [pc, #376]	; (800d7f0 <_printf_i+0x244>)
 800d676:	230a      	movs	r3, #10
 800d678:	e019      	b.n	800d6ae <_printf_i+0x102>
 800d67a:	680e      	ldr	r6, [r1, #0]
 800d67c:	602b      	str	r3, [r5, #0]
 800d67e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d682:	bf18      	it	ne
 800d684:	b236      	sxthne	r6, r6
 800d686:	e7ef      	b.n	800d668 <_printf_i+0xbc>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	6820      	ldr	r0, [r4, #0]
 800d68c:	1d19      	adds	r1, r3, #4
 800d68e:	6029      	str	r1, [r5, #0]
 800d690:	0601      	lsls	r1, r0, #24
 800d692:	d501      	bpl.n	800d698 <_printf_i+0xec>
 800d694:	681e      	ldr	r6, [r3, #0]
 800d696:	e002      	b.n	800d69e <_printf_i+0xf2>
 800d698:	0646      	lsls	r6, r0, #25
 800d69a:	d5fb      	bpl.n	800d694 <_printf_i+0xe8>
 800d69c:	881e      	ldrh	r6, [r3, #0]
 800d69e:	4854      	ldr	r0, [pc, #336]	; (800d7f0 <_printf_i+0x244>)
 800d6a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2308      	moveq	r3, #8
 800d6a6:	230a      	movne	r3, #10
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ae:	6865      	ldr	r5, [r4, #4]
 800d6b0:	60a5      	str	r5, [r4, #8]
 800d6b2:	2d00      	cmp	r5, #0
 800d6b4:	bfa2      	ittt	ge
 800d6b6:	6821      	ldrge	r1, [r4, #0]
 800d6b8:	f021 0104 	bicge.w	r1, r1, #4
 800d6bc:	6021      	strge	r1, [r4, #0]
 800d6be:	b90e      	cbnz	r6, 800d6c4 <_printf_i+0x118>
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	d04d      	beq.n	800d760 <_printf_i+0x1b4>
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d6ce:	5dc7      	ldrb	r7, [r0, r7]
 800d6d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d4:	4637      	mov	r7, r6
 800d6d6:	42bb      	cmp	r3, r7
 800d6d8:	460e      	mov	r6, r1
 800d6da:	d9f4      	bls.n	800d6c6 <_printf_i+0x11a>
 800d6dc:	2b08      	cmp	r3, #8
 800d6de:	d10b      	bne.n	800d6f8 <_printf_i+0x14c>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	07de      	lsls	r6, r3, #31
 800d6e4:	d508      	bpl.n	800d6f8 <_printf_i+0x14c>
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	6861      	ldr	r1, [r4, #4]
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	bfde      	ittt	le
 800d6ee:	2330      	movle	r3, #48	; 0x30
 800d6f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6f8:	1b52      	subs	r2, r2, r5
 800d6fa:	6122      	str	r2, [r4, #16]
 800d6fc:	f8cd a000 	str.w	sl, [sp]
 800d700:	464b      	mov	r3, r9
 800d702:	aa03      	add	r2, sp, #12
 800d704:	4621      	mov	r1, r4
 800d706:	4640      	mov	r0, r8
 800d708:	f7ff fee2 	bl	800d4d0 <_printf_common>
 800d70c:	3001      	adds	r0, #1
 800d70e:	d14c      	bne.n	800d7aa <_printf_i+0x1fe>
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	b004      	add	sp, #16
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	4835      	ldr	r0, [pc, #212]	; (800d7f0 <_printf_i+0x244>)
 800d71c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d720:	6829      	ldr	r1, [r5, #0]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	f851 6b04 	ldr.w	r6, [r1], #4
 800d728:	6029      	str	r1, [r5, #0]
 800d72a:	061d      	lsls	r5, r3, #24
 800d72c:	d514      	bpl.n	800d758 <_printf_i+0x1ac>
 800d72e:	07df      	lsls	r7, r3, #31
 800d730:	bf44      	itt	mi
 800d732:	f043 0320 	orrmi.w	r3, r3, #32
 800d736:	6023      	strmi	r3, [r4, #0]
 800d738:	b91e      	cbnz	r6, 800d742 <_printf_i+0x196>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	f023 0320 	bic.w	r3, r3, #32
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	2310      	movs	r3, #16
 800d744:	e7b0      	b.n	800d6a8 <_printf_i+0xfc>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f043 0320 	orr.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	2378      	movs	r3, #120	; 0x78
 800d750:	4828      	ldr	r0, [pc, #160]	; (800d7f4 <_printf_i+0x248>)
 800d752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d756:	e7e3      	b.n	800d720 <_printf_i+0x174>
 800d758:	0659      	lsls	r1, r3, #25
 800d75a:	bf48      	it	mi
 800d75c:	b2b6      	uxthmi	r6, r6
 800d75e:	e7e6      	b.n	800d72e <_printf_i+0x182>
 800d760:	4615      	mov	r5, r2
 800d762:	e7bb      	b.n	800d6dc <_printf_i+0x130>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	6826      	ldr	r6, [r4, #0]
 800d768:	6961      	ldr	r1, [r4, #20]
 800d76a:	1d18      	adds	r0, r3, #4
 800d76c:	6028      	str	r0, [r5, #0]
 800d76e:	0635      	lsls	r5, r6, #24
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	d501      	bpl.n	800d778 <_printf_i+0x1cc>
 800d774:	6019      	str	r1, [r3, #0]
 800d776:	e002      	b.n	800d77e <_printf_i+0x1d2>
 800d778:	0670      	lsls	r0, r6, #25
 800d77a:	d5fb      	bpl.n	800d774 <_printf_i+0x1c8>
 800d77c:	8019      	strh	r1, [r3, #0]
 800d77e:	2300      	movs	r3, #0
 800d780:	6123      	str	r3, [r4, #16]
 800d782:	4615      	mov	r5, r2
 800d784:	e7ba      	b.n	800d6fc <_printf_i+0x150>
 800d786:	682b      	ldr	r3, [r5, #0]
 800d788:	1d1a      	adds	r2, r3, #4
 800d78a:	602a      	str	r2, [r5, #0]
 800d78c:	681d      	ldr	r5, [r3, #0]
 800d78e:	6862      	ldr	r2, [r4, #4]
 800d790:	2100      	movs	r1, #0
 800d792:	4628      	mov	r0, r5
 800d794:	f7f2 fda4 	bl	80002e0 <memchr>
 800d798:	b108      	cbz	r0, 800d79e <_printf_i+0x1f2>
 800d79a:	1b40      	subs	r0, r0, r5
 800d79c:	6060      	str	r0, [r4, #4]
 800d79e:	6863      	ldr	r3, [r4, #4]
 800d7a0:	6123      	str	r3, [r4, #16]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a8:	e7a8      	b.n	800d6fc <_printf_i+0x150>
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	462a      	mov	r2, r5
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	47d0      	blx	sl
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d0ab      	beq.n	800d710 <_printf_i+0x164>
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	079b      	lsls	r3, r3, #30
 800d7bc:	d413      	bmi.n	800d7e6 <_printf_i+0x23a>
 800d7be:	68e0      	ldr	r0, [r4, #12]
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	4298      	cmp	r0, r3
 800d7c4:	bfb8      	it	lt
 800d7c6:	4618      	movlt	r0, r3
 800d7c8:	e7a4      	b.n	800d714 <_printf_i+0x168>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	47d0      	blx	sl
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d09b      	beq.n	800d710 <_printf_i+0x164>
 800d7d8:	3501      	adds	r5, #1
 800d7da:	68e3      	ldr	r3, [r4, #12]
 800d7dc:	9903      	ldr	r1, [sp, #12]
 800d7de:	1a5b      	subs	r3, r3, r1
 800d7e0:	42ab      	cmp	r3, r5
 800d7e2:	dcf2      	bgt.n	800d7ca <_printf_i+0x21e>
 800d7e4:	e7eb      	b.n	800d7be <_printf_i+0x212>
 800d7e6:	2500      	movs	r5, #0
 800d7e8:	f104 0619 	add.w	r6, r4, #25
 800d7ec:	e7f5      	b.n	800d7da <_printf_i+0x22e>
 800d7ee:	bf00      	nop
 800d7f0:	0800efc5 	.word	0x0800efc5
 800d7f4:	0800efd6 	.word	0x0800efd6

0800d7f8 <__retarget_lock_acquire_recursive>:
 800d7f8:	4770      	bx	lr

0800d7fa <__retarget_lock_release_recursive>:
 800d7fa:	4770      	bx	lr

0800d7fc <memcpy>:
 800d7fc:	440a      	add	r2, r1
 800d7fe:	4291      	cmp	r1, r2
 800d800:	f100 33ff 	add.w	r3, r0, #4294967295
 800d804:	d100      	bne.n	800d808 <memcpy+0xc>
 800d806:	4770      	bx	lr
 800d808:	b510      	push	{r4, lr}
 800d80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d812:	4291      	cmp	r1, r2
 800d814:	d1f9      	bne.n	800d80a <memcpy+0xe>
 800d816:	bd10      	pop	{r4, pc}

0800d818 <memmove>:
 800d818:	4288      	cmp	r0, r1
 800d81a:	b510      	push	{r4, lr}
 800d81c:	eb01 0402 	add.w	r4, r1, r2
 800d820:	d902      	bls.n	800d828 <memmove+0x10>
 800d822:	4284      	cmp	r4, r0
 800d824:	4623      	mov	r3, r4
 800d826:	d807      	bhi.n	800d838 <memmove+0x20>
 800d828:	1e43      	subs	r3, r0, #1
 800d82a:	42a1      	cmp	r1, r4
 800d82c:	d008      	beq.n	800d840 <memmove+0x28>
 800d82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d836:	e7f8      	b.n	800d82a <memmove+0x12>
 800d838:	4402      	add	r2, r0
 800d83a:	4601      	mov	r1, r0
 800d83c:	428a      	cmp	r2, r1
 800d83e:	d100      	bne.n	800d842 <memmove+0x2a>
 800d840:	bd10      	pop	{r4, pc}
 800d842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d84a:	e7f7      	b.n	800d83c <memmove+0x24>

0800d84c <_realloc_r>:
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	4680      	mov	r8, r0
 800d852:	4614      	mov	r4, r2
 800d854:	460e      	mov	r6, r1
 800d856:	b921      	cbnz	r1, 800d862 <_realloc_r+0x16>
 800d858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d85c:	4611      	mov	r1, r2
 800d85e:	f7ff bc2b 	b.w	800d0b8 <_malloc_r>
 800d862:	b92a      	cbnz	r2, 800d870 <_realloc_r+0x24>
 800d864:	f7ff fbbc 	bl	800cfe0 <_free_r>
 800d868:	4625      	mov	r5, r4
 800d86a:	4628      	mov	r0, r5
 800d86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d870:	f000 f81b 	bl	800d8aa <_malloc_usable_size_r>
 800d874:	4284      	cmp	r4, r0
 800d876:	4607      	mov	r7, r0
 800d878:	d802      	bhi.n	800d880 <_realloc_r+0x34>
 800d87a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d87e:	d812      	bhi.n	800d8a6 <_realloc_r+0x5a>
 800d880:	4621      	mov	r1, r4
 800d882:	4640      	mov	r0, r8
 800d884:	f7ff fc18 	bl	800d0b8 <_malloc_r>
 800d888:	4605      	mov	r5, r0
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d0ed      	beq.n	800d86a <_realloc_r+0x1e>
 800d88e:	42bc      	cmp	r4, r7
 800d890:	4622      	mov	r2, r4
 800d892:	4631      	mov	r1, r6
 800d894:	bf28      	it	cs
 800d896:	463a      	movcs	r2, r7
 800d898:	f7ff ffb0 	bl	800d7fc <memcpy>
 800d89c:	4631      	mov	r1, r6
 800d89e:	4640      	mov	r0, r8
 800d8a0:	f7ff fb9e 	bl	800cfe0 <_free_r>
 800d8a4:	e7e1      	b.n	800d86a <_realloc_r+0x1e>
 800d8a6:	4635      	mov	r5, r6
 800d8a8:	e7df      	b.n	800d86a <_realloc_r+0x1e>

0800d8aa <_malloc_usable_size_r>:
 800d8aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8ae:	1f18      	subs	r0, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	bfbc      	itt	lt
 800d8b4:	580b      	ldrlt	r3, [r1, r0]
 800d8b6:	18c0      	addlt	r0, r0, r3
 800d8b8:	4770      	bx	lr
	...

0800d8bc <_init>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	bf00      	nop
 800d8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c2:	bc08      	pop	{r3}
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	4770      	bx	lr

0800d8c8 <_fini>:
 800d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ca:	bf00      	nop
 800d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ce:	bc08      	pop	{r3}
 800d8d0:	469e      	mov	lr, r3
 800d8d2:	4770      	bx	lr
