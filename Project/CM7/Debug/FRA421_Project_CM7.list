
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a3c  0801124c  0801124c  0002124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c88  08012c88  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012c88  08012c88  00022c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c90  08012c90  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c90  08012c90  00022c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c94  08012c94  00022c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012c98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08012d20  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  08012d80  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08012de0  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08012de0  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   000264a2  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  0005a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a08  00000000  00000000  0005bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023bb4  00000000  00000000  0009b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937e7  00000000  00000000  000bec9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00252486  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076e4  00000000  00000000  002524d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011234 	.word	0x08011234

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08011234 	.word	0x08011234

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}
	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	e00d      	b.n	80016d4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffad 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	3301      	adds	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ee      	bls.n	80016b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3308      	adds	r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001714:	6979      	ldr	r1, [r7, #20]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff83 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3310      	adds	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d9ee      	bls.n	800170c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	e00d      	b.n	8001750 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff ff6f 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9ee      	bls.n	8001734 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001776:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3368      	adds	r3, #104	; 0x68
 800177c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3368      	adds	r3, #104	; 0x68
 8001782:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
 8001788:	e010      	b.n	80017ac <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d104      	bne.n	80017a0 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	77bb      	strb	r3, [r7, #30]
			break;
 800179e:	e008      	b.n	80017b2 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	d9eb      	bls.n	800178a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d134      	bne.n	8001828 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <YUGIOH_Reborn+0xd0>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3308      	adds	r3, #8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69b8      	ldr	r0, [r7, #24]
 80017e4:	f7fe ff4e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	3301      	adds	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3368      	adds	r3, #104	; 0x68
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00c      	b.n	8001822 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f7fe ff3a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3310      	adds	r3, #16
 8001814:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b13      	cmp	r3, #19
 8001826:	ddef      	ble.n	8001808 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	aaaaaaab 	.word	0xaaaaaaab

08001834 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001842:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800184a:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	799a      	ldrb	r2, [r3, #6]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <YUGIOH_Ancient_Rules+0x54>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0899      	lsrs	r1, r3, #2
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3308      	adds	r3, #8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe ff03 	bl	8000684 <YUGIOH_card_copy>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab

0800188c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	e00c      	b.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3310      	adds	r3, #16
 80018ca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ef      	bls.n	80018b8 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e00c      	b.n	80018f8 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3310      	adds	r3, #16
 80018f0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	3301      	adds	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d9ef      	bls.n	80018de <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	889a      	ldrh	r2, [r3, #4]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	0089      	lsls	r1, r1, #2
 800190a:	440b      	add	r3, r1
 800190c:	4619      	mov	r1, r3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	809a      	strh	r2, [r3, #4]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800193c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001944:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	799a      	ldrb	r2, [r3, #6]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <YUGIOH_Stop_Defense+0x68>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	0899      	lsrs	r1, r3, #2
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <YUGIOH_Stop_Defense+0x5a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
	}

}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab

08001998 <YUGIOH_Clear_Card_In_Main_To_GY>:

void YUGIOH_Clear_Card_In_Main_To_GY(Player *player,YUGIOH_Card *card)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck = &player->cardOnBoard[0];;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
	uint8_t idx = 255;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i < 6; ++i)
 80019ac:	2300      	movs	r3, #0
 80019ae:	72bb      	strb	r3, [r7, #10]
 80019b0:	e00e      	b.n	80019d0 <YUGIOH_Clear_Card_In_Main_To_GY+0x38>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d102      	bne.n	80019c4 <YUGIOH_Clear_Card_In_Main_To_GY+0x2c>
		{
			idx = i;
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	72fb      	strb	r3, [r7, #11]
			break;
 80019c2:	e008      	b.n	80019d6 <YUGIOH_Clear_Card_In_Main_To_GY+0x3e>
		}
		ptrCardCheck++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3310      	adds	r3, #16
 80019c8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 6; ++i)
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	3301      	adds	r3, #1
 80019ce:	72bb      	strb	r3, [r7, #10]
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d9ed      	bls.n	80019b2 <YUGIOH_Clear_Card_In_Main_To_GY+0x1a>
	}

	if (idx != 255) {
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d009      	beq.n	80019f0 <YUGIOH_Clear_Card_In_Main_To_GY+0x58>

		ptrCardCheck = &player->cardOnBoard[idx];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	3308      	adds	r3, #8
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
		YUGIOH_To_GY(player, ptrCardCheck);
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe19 	bl	8001622 <YUGIOH_To_GY>
	}

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e016      	b.n	8001a3c <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10a      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7a5b      	ldrb	r3, [r3, #9]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d102      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e009      	b.n	8001a44 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3310      	adds	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	dde5      	ble.n	8001a0e <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8001a42:	23ff      	movs	r3, #255	; 0xff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e016      	b.n	8001a94 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10a      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e009      	b.n	8001a9c <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	dde5      	ble.n	8001a66 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8001a9a:	23ff      	movs	r3, #255	; 0xff
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00c      	b.n	8001ad6 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3310      	adds	r3, #16
 8001ace:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	ddef      	ble.n	8001abc <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001af8:	2303      	movs	r3, #3
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e00c      	b.n	8001b18 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	ddef      	ble.n	8001afe <YUGIOH_Monster_Activated+0x14>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MainGUI>:
void MainGUI()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <MainGUI+0x15c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	9202      	str	r2, [sp, #8]
 8001b38:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <MainGUI+0x160>)
 8001b46:	2105      	movs	r1, #5
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f005 faa2 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <MainGUI+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <MainGUI+0x164>)
 8001b62:	2114      	movs	r1, #20
 8001b64:	2005      	movs	r0, #5
 8001b66:	f005 fa94 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <MainGUI+0x15c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9202      	str	r2, [sp, #8]
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9200      	str	r2, [sp, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <MainGUI+0x168>)
 8001b7e:	2123      	movs	r1, #35	; 0x23
 8001b80:	2005      	movs	r0, #5
 8001b82:	f005 fa86 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <MainGUI+0x15c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <MainGUI+0x16c>)
 8001b9a:	2123      	movs	r1, #35	; 0x23
 8001b9c:	203c      	movs	r0, #60	; 0x3c
 8001b9e:	f005 fa2e 	bl	8006ffe <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MainGUI+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <MainGUI+0x170>)
 8001bb6:	2132      	movs	r1, #50	; 0x32
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f005 fa6a 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MainGUI+0x15c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <MainGUI+0x174>)
 8001bd2:	213c      	movs	r1, #60	; 0x3c
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f005 fa5c 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MainGUI+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MainGUI+0x178>)
 8001bee:	2105      	movs	r1, #5
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f005 fa04 	bl	8006ffe <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MainGUI+0x15c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	9202      	str	r2, [sp, #8]
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MainGUI+0x164>)
 8001c0a:	2114      	movs	r1, #20
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f005 f9f6 	bl	8006ffe <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MainGUI+0x15c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MainGUI+0x17c>)
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f005 f9e8 	bl	8006ffe <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MainGUI+0x15c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MainGUI+0x16c>)
 8001c42:	2123      	movs	r1, #35	; 0x23
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f005 fa24 	bl	8007092 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MainGUI+0x15c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <MainGUI+0x170>)
 8001c5e:	2132      	movs	r1, #50	; 0x32
 8001c60:	2000      	movs	r0, #0
 8001c62:	f005 f9cc 	bl	8006ffe <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MainGUI+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <MainGUI+0x174>)
 8001c7a:	213c      	movs	r1, #60	; 0x3c
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f005 f9be 	bl	8006ffe <ST7735_WriteString>
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	0801124c 	.word	0x0801124c
 8001c90:	08011258 	.word	0x08011258
 8001c94:	08011268 	.word	0x08011268
 8001c98:	08011270 	.word	0x08011270
 8001c9c:	08011278 	.word	0x08011278
 8001ca0:	0801128c 	.word	0x0801128c
 8001ca4:	080112a0 	.word	0x080112a0
 8001ca8:	080112ac 	.word	0x080112ac

08001cac <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <LCDvalue+0x134>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <LCDvalue+0x138>)
 8001cc0:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <LCDvalue+0x13c>)
 8001cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <LCDvalue+0x140>)
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f7fe fb57 	bl	8000380 <__aeabi_uldivmod>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	817b      	strh	r3, [r7, #10]
	time -= a;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <LCDvalue+0x138>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <LCDvalue+0x138>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <LCDvalue+0x138>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4940      	ldr	r1, [pc, #256]	; (8001df0 <LCDvalue+0x144>)
 8001cf0:	4840      	ldr	r0, [pc, #256]	; (8001df4 <LCDvalue+0x148>)
 8001cf2:	f00e ff21 	bl	8010b38 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e012      	b.n	8001d22 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8001cfc:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <LCDvalue+0x148>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <LCDvalue+0x70>
			t_c[i] = 32;
 8001d08:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <LCDvalue+0x148>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2220      	movs	r2, #32
 8001d10:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <LCDvalue+0x148>)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dde9      	ble.n	8001cfc <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <LCDvalue+0x138>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 811d 	bne.w	8001f6c <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001d32:	4831      	ldr	r0, [pc, #196]	; (8001df8 <LCDvalue+0x14c>)
 8001d34:	f00c fb24 	bl	800e380 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <LCDvalue+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f005 fbc4 	bl	80074cc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f005 fbd2 	bl	80074ee <ST7735_FillScreen1>
		while(time == 0){
 8001d4a:	e10a      	b.n	8001f62 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d15e      	bne.n	8001e14 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <LCDvalue+0x150>)
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	221f      	movs	r2, #31
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <LCDvalue+0x154>)
 8001d6e:	2123      	movs	r1, #35	; 0x23
 8001d70:	200f      	movs	r0, #15
 8001d72:	f005 f9d8 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <LCDvalue+0x158>)
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <LCDvalue+0x15c>)
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	2005      	movs	r0, #5
 8001d94:	f005 f9c7 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <LCDvalue+0x150>)
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <LCDvalue+0x160>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	2014      	movs	r0, #20
 8001db6:	f005 f9b6 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <LCDvalue+0x158>)
 8001dc0:	9203      	str	r2, [sp, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <LCDvalue+0x164>)
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f005 f9a5 	bl	8007126 <ST7735_WriteStringNSS>
 8001ddc:	e0c1      	b.n	8001f62 <LCDvalue+0x2b6>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000174 	.word	0x24000174
 8001de8:	24000ea0 	.word	0x24000ea0
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	080112b4 	.word	0x080112b4
 8001df4:	24000170 	.word	0x24000170
 8001df8:	240002e8 	.word	0x240002e8
 8001dfc:	24000014 	.word	0x24000014
 8001e00:	080112b8 	.word	0x080112b8
 8001e04:	2400000c 	.word	0x2400000c
 8001e08:	080112c4 	.word	0x080112c4
 8001e0c:	080112d8 	.word	0x080112d8
 8001e10:	080112e0 	.word	0x080112e0
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80a3 	bne.w	8001f62 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4ba1      	ldr	r3, [pc, #644]	; (80020a8 <LCDvalue+0x3fc>)
 8001e22:	9203      	str	r2, [sp, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	221f      	movs	r2, #31
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	9200      	str	r2, [sp, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a9e      	ldr	r2, [pc, #632]	; (80020ac <LCDvalue+0x400>)
 8001e34:	2119      	movs	r1, #25
 8001e36:	200f      	movs	r0, #15
 8001e38:	f005 f975 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <LCDvalue+0x404>)
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <LCDvalue+0x408>)
 8001e56:	2132      	movs	r1, #50	; 0x32
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f005 f964 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <LCDvalue+0x3fc>)
 8001e64:	9203      	str	r2, [sp, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <LCDvalue+0x40c>)
 8001e78:	2119      	movs	r1, #25
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f005 f953 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <LCDvalue+0x404>)
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a88      	ldr	r2, [pc, #544]	; (80020bc <LCDvalue+0x410>)
 8001e9a:	2132      	movs	r1, #50	; 0x32
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f005 f942 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <LCDvalue+0x404>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9203      	str	r2, [sp, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <LCDvalue+0x414>)
 8001eba:	2141      	movs	r1, #65	; 0x41
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f005 f932 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <LCDvalue+0x404>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <LCDvalue+0x414>)
 8001eda:	2141      	movs	r1, #65	; 0x41
 8001edc:	2000      	movs	r0, #0
 8001ede:	f005 f922 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <LCDvalue+0x404>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	9203      	str	r2, [sp, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ef0:	9201      	str	r2, [sp, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <LCDvalue+0x418>)
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	2000      	movs	r0, #0
 8001efe:	f005 f912 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <LCDvalue+0x404>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	9203      	str	r2, [sp, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	9202      	str	r2, [sp, #8]
 8001f0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f10:	9201      	str	r2, [sp, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <LCDvalue+0x41c>)
 8001f1a:	2173      	movs	r1, #115	; 0x73
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f005 f902 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <LCDvalue+0x404>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a64      	ldr	r2, [pc, #400]	; (80020cc <LCDvalue+0x420>)
 8001f3a:	2173      	movs	r1, #115	; 0x73
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f005 f8f2 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LCDvalue+0x404>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <LCDvalue+0x424>)
 8001f5a:	215a      	movs	r1, #90	; 0x5a
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f005 f8e2 	bl	8007126 <ST7735_WriteStringNSS>
		while(time == 0){
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <LCDvalue+0x428>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f43f aef0 	beq.w	8001d4c <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4959      	ldr	r1, [pc, #356]	; (80020d8 <LCDvalue+0x42c>)
 8001f74:	4859      	ldr	r0, [pc, #356]	; (80020dc <LCDvalue+0x430>)
 8001f76:	f00e fddf 	bl	8010b38 <siprintf>
	if(C_LP_ATK[3] == 0){
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <LCDvalue+0x430>)
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <LCDvalue+0x430>)
 8001f84:	789a      	ldrb	r2, [r3, #2]
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <LCDvalue+0x430>)
 8001f88:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <LCDvalue+0x430>)
 8001f8c:	785a      	ldrb	r2, [r3, #1]
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <LCDvalue+0x430>)
 8001f90:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <LCDvalue+0x430>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <LCDvalue+0x430>)
 8001f98:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <LCDvalue+0x430>)
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <LCDvalue+0x404>)
 8001fa6:	9203      	str	r2, [sp, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <LCDvalue+0x430>)
 8001fba:	2114      	movs	r1, #20
 8001fbc:	205a      	movs	r0, #90	; 0x5a
 8001fbe:	f005 f8b2 	bl	8007126 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <LCDvalue+0x404>)
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <LCDvalue+0x434>)
 8001fdc:	2132      	movs	r1, #50	; 0x32
 8001fde:	2069      	movs	r0, #105	; 0x69
 8001fe0:	f005 f8a1 	bl	8007126 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	493b      	ldr	r1, [pc, #236]	; (80020d8 <LCDvalue+0x42c>)
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <LCDvalue+0x438>)
 8001fee:	f00e fda3 	bl	8010b38 <siprintf>
	if(C_LP_DEF[3] == 0){
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <LCDvalue+0x438>)
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <LCDvalue+0x438>)
 8001ffc:	789a      	ldrb	r2, [r3, #2]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCDvalue+0x438>)
 8002000:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <LCDvalue+0x438>)
 8002004:	785a      	ldrb	r2, [r3, #1]
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <LCDvalue+0x438>)
 8002008:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <LCDvalue+0x438>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <LCDvalue+0x438>)
 8002010:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <LCDvalue+0x438>)
 8002014:	2220      	movs	r2, #32
 8002016:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <LCDvalue+0x404>)
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <LCDvalue+0x438>)
 8002032:	2114      	movs	r1, #20
 8002034:	205a      	movs	r0, #90	; 0x5a
 8002036:	f005 f876 	bl	8007126 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <LCDvalue+0x404>)
 8002040:	9203      	str	r2, [sp, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <LCDvalue+0x43c>)
 8002054:	2132      	movs	r1, #50	; 0x32
 8002056:	2069      	movs	r0, #105	; 0x69
 8002058:	f005 f865 	bl	8007126 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <LCDvalue+0x440>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <LCDvalue+0x42c>)
 8002064:	4822      	ldr	r0, [pc, #136]	; (80020f0 <LCDvalue+0x444>)
 8002066:	f00e fd67 	bl	8010b38 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <LCDvalue+0x404>)
 800206c:	2200      	movs	r2, #0
 800206e:	9203      	str	r2, [sp, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <LCDvalue+0x444>)
 8002082:	2123      	movs	r1, #35	; 0x23
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	f005 f84e 	bl	8007126 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LCDvalue+0x404>)
 800208c:	2201      	movs	r2, #1
 800208e:	9203      	str	r2, [sp, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <LCDvalue+0x444>)
 80020a2:	2123      	movs	r1, #35	; 0x23
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	e025      	b.n	80020f4 <LCDvalue+0x448>
 80020a8:	24000014 	.word	0x24000014
 80020ac:	080112b8 	.word	0x080112b8
 80020b0:	2400000c 	.word	0x2400000c
 80020b4:	080112c4 	.word	0x080112c4
 80020b8:	080112d8 	.word	0x080112d8
 80020bc:	080112e0 	.word	0x080112e0
 80020c0:	0801128c 	.word	0x0801128c
 80020c4:	080112f4 	.word	0x080112f4
 80020c8:	08011300 	.word	0x08011300
 80020cc:	08011310 	.word	0x08011310
 80020d0:	0801131c 	.word	0x0801131c
 80020d4:	24000174 	.word	0x24000174
 80020d8:	080112b4 	.word	0x080112b4
 80020dc:	24000164 	.word	0x24000164
 80020e0:	24000170 	.word	0x24000170
 80020e4:	24000168 	.word	0x24000168
 80020e8:	0801132c 	.word	0x0801132c
 80020ec:	24000176 	.word	0x24000176
 80020f0:	2400016c 	.word	0x2400016c
 80020f4:	f005 f817 	bl	8007126 <ST7735_WriteStringNSS>

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3304      	adds	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002122:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8002140:	2108      	movs	r1, #8
 8002142:	48ad      	ldr	r0, [pc, #692]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002144:	f008 ff1e 	bl	800af84 <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8002150:	2102      	movs	r1, #2
 8002152:	48aa      	ldr	r0, [pc, #680]	; (80023fc <GAME_PLAY_Management+0x2fc>)
 8002154:	f008 ff16 	bl	800af84 <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8002160:	2104      	movs	r1, #4
 8002162:	48a5      	ldr	r0, [pc, #660]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002164:	f008 ff0e 	bl	800af84 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8002170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002174:	48a2      	ldr	r0, [pc, #648]	; (8002400 <GAME_PLAY_Management+0x300>)
 8002176:	f008 ff05 	bl	800af84 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002188:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b04      	cmp	r3, #4
 800219a:	f200 829f 	bhi.w	80026dc <GAME_PLAY_Management+0x5dc>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <GAME_PLAY_Management+0xa4>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b9 	.word	0x080021b9
 80021a8:	08002435 	.word	0x08002435
 80021ac:	0800259b 	.word	0x0800259b
 80021b0:	08002619 	.word	0x08002619
 80021b4:	08002697 	.word	0x08002697
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8f      	ldr	r2, [pc, #572]	; (8002408 <GAME_PLAY_Management+0x308>)
 80021cc:	2105      	movs	r1, #5
 80021ce:	2005      	movs	r0, #5
 80021d0:	f004 ff15 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a89      	ldr	r2, [pc, #548]	; (800240c <GAME_PLAY_Management+0x30c>)
 80021e8:	210f      	movs	r1, #15
 80021ea:	2000      	movs	r0, #0
 80021ec:	f004 ff07 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <GAME_PLAY_Management+0x310>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a84      	ldr	r2, [pc, #528]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002204:	2123      	movs	r1, #35	; 0x23
 8002206:	2008      	movs	r0, #8
 8002208:	f004 fef9 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <GAME_PLAY_Management+0x310>)
 800220e:	2200      	movs	r2, #0
 8002210:	9202      	str	r2, [sp, #8]
 8002212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <GAME_PLAY_Management+0x318>)
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	2019      	movs	r0, #25
 8002224:	f004 feeb 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <GAME_PLAY_Management+0x304>)
 800222a:	2200      	movs	r2, #0
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a74      	ldr	r2, [pc, #464]	; (800240c <GAME_PLAY_Management+0x30c>)
 800223c:	214b      	movs	r1, #75	; 0x4b
 800223e:	2000      	movs	r0, #0
 8002240:	f004 fedd 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002246:	2200      	movs	r2, #0
 8002248:	9202      	str	r2, [sp, #8]
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a71      	ldr	r2, [pc, #452]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002258:	215a      	movs	r1, #90	; 0x5a
 800225a:	2000      	movs	r0, #0
 800225c:	f004 fecf 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002262:	2200      	movs	r2, #0
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002274:	215a      	movs	r1, #90	; 0x5a
 8002276:	205d      	movs	r0, #93	; 0x5d
 8002278:	f004 fec1 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <GAME_PLAY_Management+0x304>)
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <GAME_PLAY_Management+0x324>)
 8002290:	2169      	movs	r1, #105	; 0x69
 8002292:	2000      	movs	r0, #0
 8002294:	f004 feb3 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <GAME_PLAY_Management+0x304>)
 800229a:	2200      	movs	r2, #0
 800229c:	9202      	str	r2, [sp, #8]
 800229e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <GAME_PLAY_Management+0x328>)
 80022ac:	2169      	movs	r1, #105	; 0x69
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f004 fea5 	bl	8006ffe <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	9202      	str	r2, [sp, #8]
 80022ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a59      	ldr	r2, [pc, #356]	; (800242c <GAME_PLAY_Management+0x32c>)
 80022c8:	2105      	movs	r1, #5
 80022ca:	2005      	movs	r0, #5
 80022cc:	f004 fee1 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <GAME_PLAY_Management+0x30c>)
 80022e4:	210f      	movs	r1, #15
 80022e6:	2000      	movs	r0, #0
 80022e8:	f004 fed3 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <GAME_PLAY_Management+0x310>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a45      	ldr	r2, [pc, #276]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002300:	2123      	movs	r1, #35	; 0x23
 8002302:	2008      	movs	r0, #8
 8002304:	f004 fec5 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <GAME_PLAY_Management+0x310>)
 800230a:	2200      	movs	r2, #0
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <GAME_PLAY_Management+0x318>)
 800231c:	213c      	movs	r1, #60	; 0x3c
 800231e:	2014      	movs	r0, #20
 8002320:	f004 feb7 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002326:	2200      	movs	r2, #0
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <GAME_PLAY_Management+0x30c>)
 8002338:	214b      	movs	r1, #75	; 0x4b
 800233a:	2000      	movs	r0, #0
 800233c:	f004 fea9 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002342:	2200      	movs	r2, #0
 8002344:	9202      	str	r2, [sp, #8]
 8002346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002354:	215a      	movs	r1, #90	; 0x5a
 8002356:	2000      	movs	r0, #0
 8002358:	f004 fe9b 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <GAME_PLAY_Management+0x304>)
 800235e:	2200      	movs	r2, #0
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002370:	215a      	movs	r1, #90	; 0x5a
 8002372:	205d      	movs	r0, #93	; 0x5d
 8002374:	f004 fe8d 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <GAME_PLAY_Management+0x304>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <GAME_PLAY_Management+0x324>)
 800238c:	2169      	movs	r1, #105	; 0x69
 800238e:	2000      	movs	r0, #0
 8002390:	f004 fe7f 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <GAME_PLAY_Management+0x328>)
 80023a8:	2169      	movs	r1, #105	; 0x69
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f004 fe71 	bl	8007092 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80023b0:	2108      	movs	r1, #8
 80023b2:	481f      	ldr	r0, [pc, #124]	; (8002430 <GAME_PLAY_Management+0x330>)
 80023b4:	f008 fde6 	bl	800af84 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80023be:	2000      	movs	r0, #0
 80023c0:	f005 f884 	bl	80074cc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f005 f892 	bl	80074ee <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80023d2:	e183      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
			state_game->PlyerAction_State = PS_AFK;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80023f4:	e172      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
 80023f6:	bf00      	nop
 80023f8:	58020800 	.word	0x58020800
 80023fc:	58020400 	.word	0x58020400
 8002400:	58021400 	.word	0x58021400
 8002404:	2400000c 	.word	0x2400000c
 8002408:	080112a0 	.word	0x080112a0
 800240c:	0801128c 	.word	0x0801128c
 8002410:	24000014 	.word	0x24000014
 8002414:	08011330 	.word	0x08011330
 8002418:	0801133c 	.word	0x0801133c
 800241c:	08011344 	.word	0x08011344
 8002420:	08011354 	.word	0x08011354
 8002424:	0801135c 	.word	0x0801135c
 8002428:	0801132c 	.word	0x0801132c
 800242c:	0801124c 	.word	0x0801124c
 8002430:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002434:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4aa8      	ldr	r2, [pc, #672]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 8002448:	2105      	movs	r1, #5
 800244a:	2005      	movs	r0, #5
 800244c:	f004 fdd7 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002450:	4ba4      	ldr	r3, [pc, #656]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002452:	2200      	movs	r2, #0
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4aa2      	ldr	r2, [pc, #648]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002464:	210f      	movs	r1, #15
 8002466:	2000      	movs	r0, #0
 8002468:	f004 fdc9 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800246c:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a9d      	ldr	r2, [pc, #628]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 8002480:	2123      	movs	r1, #35	; 0x23
 8002482:	2019      	movs	r0, #25
 8002484:	f004 fdbb 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002488:	4b99      	ldr	r3, [pc, #612]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800248a:	2200      	movs	r2, #0
 800248c:	9202      	str	r2, [sp, #8]
 800248e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002492:	9201      	str	r2, [sp, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a97      	ldr	r2, [pc, #604]	; (80026f8 <GAME_PLAY_Management+0x5f8>)
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	2021      	movs	r0, #33	; 0x21
 80024a0:	f004 fdad 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024a4:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	9202      	str	r2, [sp, #8]
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8d      	ldr	r2, [pc, #564]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 80024b8:	214b      	movs	r1, #75	; 0x4b
 80024ba:	2000      	movs	r0, #0
 80024bc:	f004 fd9f 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c0:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 80024d4:	2105      	movs	r1, #5
 80024d6:	2005      	movs	r0, #5
 80024d8:	f004 fddb 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7f      	ldr	r2, [pc, #508]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 80024f0:	210f      	movs	r1, #15
 80024f2:	2000      	movs	r0, #0
 80024f4:	f004 fdcd 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80024f8:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 800250c:	2123      	movs	r1, #35	; 0x23
 800250e:	2019      	movs	r0, #25
 8002510:	f004 fdbf 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002514:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 8002516:	2200      	movs	r2, #0
 8002518:	9202      	str	r2, [sp, #8]
 800251a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a76      	ldr	r2, [pc, #472]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	2025      	movs	r0, #37	; 0x25
 800252c:	f004 fdb1 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002530:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002532:	2200      	movs	r2, #0
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002544:	214b      	movs	r1, #75	; 0x4b
 8002546:	2000      	movs	r0, #0
 8002548:	f004 fda3 	bl	8007092 <ST7735_WriteString1>
		HAL_Delay(1500);
 800254c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002550:	f005 fbca 	bl	8007ce8 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8002554:	2000      	movs	r0, #0
 8002556:	f004 ffb9 	bl	80074cc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 800255a:	2000      	movs	r0, #0
 800255c:	f004 ffc7 	bl	80074ee <ST7735_FillScreen1>
		MainGUI();
 8002560:	f7ff fae4 	bl	8001b2c <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800256a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002572:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8002574:	69f8      	ldr	r0, [r7, #28]
 8002576:	f7fe ff83 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7fe ff80 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->firstAtk_Turn_Flag = 1;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8

		state_game->MainGame_State = first_player;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8002598:	e0a0      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case first_player:
		if (state_game -> F_flag == 0){
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12b      	bne.n	80025fc <GAME_PLAY_Management+0x4fc>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80025a4:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	9202      	str	r2, [sp, #8]
 80025aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025ae:	9201      	str	r2, [sp, #4]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	9200      	str	r2, [sp, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a53      	ldr	r2, [pc, #332]	; (8002704 <GAME_PLAY_Management+0x604>)
 80025b8:	215a      	movs	r1, #90	; 0x5a
 80025ba:	200f      	movs	r0, #15
 80025bc:	f004 fd69 	bl	8007092 <ST7735_WriteString1>
			HAL_Delay(1500);
 80025c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025c4:	f005 fb90 	bl	8007ce8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 80025c8:	2300      	movs	r3, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2326      	movs	r3, #38	; 0x26
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	215a      	movs	r1, #90	; 0x5a
 80025d2:	2000      	movs	r0, #0
 80025d4:	f004 fe7c 	bl	80072d0 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025de:	3301      	adds	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <GAME_PLAY_Management+0x608>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <GAME_PLAY_Management+0x608>)
 80025fa:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002608:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f87d 	bl	8002710 <GAME_PLAY_Phase_Management>
		break;
 8002616:	e061      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case second_player:
		if (state_game -> S_flag == 0){
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12b      	bne.n	800267a <GAME_PLAY_Management+0x57a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8002622:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 8002624:	2200      	movs	r2, #0
 8002626:	9202      	str	r2, [sp, #8]
 8002628:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a33      	ldr	r2, [pc, #204]	; (8002704 <GAME_PLAY_Management+0x604>)
 8002636:	215a      	movs	r1, #90	; 0x5a
 8002638:	200f      	movs	r0, #15
 800263a:	f004 fce0 	bl	8006ffe <ST7735_WriteString>
			HAL_Delay(1500);
 800263e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002642:	f005 fb51 	bl	8007ce8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2326      	movs	r3, #38	; 0x26
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	215a      	movs	r1, #90	; 0x5a
 8002650:	2000      	movs	r0, #0
 8002652:	f004 fdc9 	bl	80071e8 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <GAME_PLAY_Management+0x608>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <GAME_PLAY_Management+0x608>)
 8002678:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002680:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f83e 	bl	8002710 <GAME_PLAY_Phase_Management>
		break;
 8002694:	e022      	b.n	80026dc <GAME_PLAY_Management+0x5dc>
	case Game_Ended:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8002696:	2108      	movs	r1, #8
 8002698:	481c      	ldr	r0, [pc, #112]	; (800270c <GAME_PLAY_Management+0x60c>)
 800269a:	f008 fc73 	bl	800af84 <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <GAME_PLAY_Management+0x5ba>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f004 ff11 	bl	80074cc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f004 ff1f 	bl	80074ee <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80026b8:	e00f      	b.n	80026da <GAME_PLAY_Management+0x5da>
			state_game->PlyerAction_State = PS_AFK;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80026da:	bf00      	nop
	}
}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2400000c 	.word	0x2400000c
 80026e8:	080112a0 	.word	0x080112a0
 80026ec:	0801128c 	.word	0x0801128c
 80026f0:	24000014 	.word	0x24000014
 80026f4:	0801136c 	.word	0x0801136c
 80026f8:	08011374 	.word	0x08011374
 80026fc:	0801124c 	.word	0x0801124c
 8002700:	0801137c 	.word	0x0801137c
 8002704:	08011384 	.word	0x08011384
 8002708:	24000176 	.word	0x24000176
 800270c:	58020000 	.word	0x58020000

08002710 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8002716:	af04      	add	r7, sp, #16
 8002718:	f507 7418 	add.w	r4, r7, #608	; 0x260
 800271c:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8002720:	6020      	str	r0, [r4, #0]
 8002722:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8002726:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 800272a:	6001      	str	r1, [r0, #0]
 800272c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002730:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8002734:	600a      	str	r2, [r1, #0]
 8002736:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800273a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800273e:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8002740:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002744:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800274e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8002752:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002756:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8002760:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8002764:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002768:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002772:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 8002776:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800277a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800277e:	4618      	mov	r0, r3
 8002780:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8002784:	461a      	mov	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f00e f8de 	bl	8010948 <memset>

	switch (PAS) {
 800278c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002790:	2b03      	cmp	r3, #3
 8002792:	f203 85ed 	bhi.w	8006370 <GAME_PLAY_Phase_Management+0x3c60>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <GAME_PLAY_Phase_Management+0x8c>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	08006363 	.word	0x08006363
 80027a0:	080027ad 	.word	0x080027ad
 80027a4:	08002905 	.word	0x08002905
 80027a8:	08004e8d 	.word	0x08004e8d
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80027ac:	48b1      	ldr	r0, [pc, #708]	; (8002a74 <GAME_PLAY_Phase_Management+0x364>)
 80027ae:	f00b fd6f 	bl	800e290 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80027b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80027ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f7ff fa71 	bl	8001cac <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027ca:	4bab      	ldr	r3, [pc, #684]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	9202      	str	r2, [sp, #8]
 80027d0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027d4:	9201      	str	r2, [sp, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	9200      	str	r2, [sp, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4aa7      	ldr	r2, [pc, #668]	; (8002a7c <GAME_PLAY_Phase_Management+0x36c>)
 80027de:	2123      	movs	r1, #35	; 0x23
 80027e0:	206e      	movs	r0, #110	; 0x6e
 80027e2:	f004 fc0c 	bl	8006ffe <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027e6:	4ba4      	ldr	r3, [pc, #656]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	9202      	str	r2, [sp, #8]
 80027ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027f0:	9201      	str	r2, [sp, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4aa0      	ldr	r2, [pc, #640]	; (8002a7c <GAME_PLAY_Phase_Management+0x36c>)
 80027fa:	2123      	movs	r1, #35	; 0x23
 80027fc:	206e      	movs	r0, #110	; 0x6e
 80027fe:	f004 fc48 	bl	8007092 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002802:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002806:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b9a      	ldr	r3, [pc, #616]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002810:	9203      	str	r2, [sp, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a97      	ldr	r2, [pc, #604]	; (8002a80 <GAME_PLAY_Phase_Management+0x370>)
 8002824:	215a      	movs	r1, #90	; 0x5a
 8002826:	2005      	movs	r0, #5
 8002828:	f004 fc7d 	bl	8007126 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800282c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002830:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	9200      	str	r2, [sp, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a8d      	ldr	r2, [pc, #564]	; (8002a84 <GAME_PLAY_Phase_Management+0x374>)
 800284e:	215a      	movs	r1, #90	; 0x5a
 8002850:	2005      	movs	r0, #5
 8002852:	f004 fc68 	bl	8007126 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8002856:	2101      	movs	r1, #1
 8002858:	488b      	ldr	r0, [pc, #556]	; (8002a88 <GAME_PLAY_Phase_Management+0x378>)
 800285a:	f008 fb93 	bl	800af84 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f043 8580 	bne.w	8006366 <GAME_PLAY_Phase_Management+0x3c56>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8002866:	2000      	movs	r0, #0
 8002868:	f004 fe30 	bl	80074cc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 800286c:	2000      	movs	r0, #0
 800286e:	f004 fe3e 	bl	80074ee <ST7735_FillScreen1>
			MainGUI();
 8002872:	f7ff f95b 	bl	8001b2c <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8002876:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800287a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002886:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800288a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8002896:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800289a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 80028a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a8:	f005 fa1e 	bl	8007ce8 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80028ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028b0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80028ba:	9203      	str	r2, [sp, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	9202      	str	r2, [sp, #8]
 80028c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	9200      	str	r2, [sp, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6c      	ldr	r2, [pc, #432]	; (8002a80 <GAME_PLAY_Phase_Management+0x370>)
 80028ce:	215a      	movs	r1, #90	; 0x5a
 80028d0:	2005      	movs	r0, #5
 80028d2:	f004 fc28 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80028d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 80028e4:	9203      	str	r2, [sp, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	9202      	str	r2, [sp, #8]
 80028ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <GAME_PLAY_Phase_Management+0x37c>)
 80028f8:	215a      	movs	r1, #90	; 0x5a
 80028fa:	2005      	movs	r0, #5
 80028fc:	f004 fc13 	bl	8007126 <ST7735_WriteStringNSS>
		}
		break;
 8002900:	f003 bd31 	b.w	8006366 <GAME_PLAY_Phase_Management+0x3c56>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8002904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002908:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800290c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002910:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	f7ff f9c8 	bl	8001cac <LCDvalue>

		switch (PMS)
 800291c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8002920:	2b07      	cmp	r3, #7
 8002922:	f203 8522 	bhi.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <GAME_PLAY_Phase_Management+0x21c>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08004e5d 	.word	0x08004e5d
 8002930:	0800294d 	.word	0x0800294d
 8002934:	08002c27 	.word	0x08002c27
 8002938:	08002da9 	.word	0x08002da9
 800293c:	0800341d 	.word	0x0800341d
 8002940:	08003de9 	.word	0x08003de9
 8002944:	08003bd9 	.word	0x08003bd9
 8002948:	080039bd 	.word	0x080039bd
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 800294c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 813a 	bne.w	8002bd2 <GAME_PLAY_Phase_Management+0x4c2>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002960:	2200      	movs	r2, #0
 8002962:	9202      	str	r2, [sp, #8]
 8002964:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a47      	ldr	r2, [pc, #284]	; (8002a90 <GAME_PLAY_Phase_Management+0x380>)
 8002972:	2123      	movs	r1, #35	; 0x23
 8002974:	206e      	movs	r0, #110	; 0x6e
 8002976:	f004 fb42 	bl	8006ffe <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 800297c:	2200      	movs	r2, #0
 800297e:	9202      	str	r2, [sp, #8]
 8002980:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <GAME_PLAY_Phase_Management+0x380>)
 800298e:	2123      	movs	r1, #35	; 0x23
 8002990:	206e      	movs	r0, #110	; 0x6e
 8002992:	f004 fb7e 	bl	8007092 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8002996:	2101      	movs	r1, #1
 8002998:	483b      	ldr	r0, [pc, #236]	; (8002a88 <GAME_PLAY_Phase_Management+0x378>)
 800299a:	f008 faf3 	bl	800af84 <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8103 	bne.w	8002bac <GAME_PLAY_Phase_Management+0x49c>
						== GPIO_PIN_RESET){
					if (state_game->firstAtk_Turn_Flag != 1)
 80029a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d071      	beq.n	8002a9c <GAME_PLAY_Phase_Management+0x38c>
					{
						ST7735_FillScreen(ST7735_BLACK);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f004 fd87 	bl	80074cc <ST7735_FillScreen>
						ST7735_FillScreen1(ST7735_BLACK);
 80029be:	2000      	movs	r0, #0
 80029c0:	f004 fd95 	bl	80074ee <ST7735_FillScreen1>
						MainGUI();
 80029c4:	f7ff f8b2 	bl	8001b2c <MainGUI>
						state_game->action = 50;
 80029c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2232      	movs	r2, #50	; 0x32
 80029d4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_AFK;
 80029d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						YUGIOH_Monster_Activated(playerAtk);
 80029e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f7ff f87b 	bl	8001aea <YUGIOH_Monster_Activated>
						state_game->PlyerAction_State = Battle_Phase;
 80029f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002a04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						HAL_Delay(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f005 f966 	bl	8007ce8 <HAL_Delay>
						ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8002a1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002a2a:	9203      	str	r2, [sp, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	9202      	str	r2, [sp, #8]
 8002a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a34:	9201      	str	r2, [sp, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <GAME_PLAY_Phase_Management+0x384>)
 8002a3e:	215a      	movs	r1, #90	; 0x5a
 8002a40:	2005      	movs	r0, #5
 8002a42:	f004 fb70 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002a46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <GAME_PLAY_Phase_Management+0x368>)
 8002a54:	9203      	str	r2, [sp, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5e:	9201      	str	r2, [sp, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <GAME_PLAY_Phase_Management+0x388>)
 8002a68:	215a      	movs	r1, #90	; 0x5a
 8002a6a:	2005      	movs	r0, #5
 8002a6c:	f004 fb5b 	bl	8007126 <ST7735_WriteStringNSS>
 8002a70:	e09c      	b.n	8002bac <GAME_PLAY_Phase_Management+0x49c>
 8002a72:	bf00      	nop
 8002a74:	240002e8 	.word	0x240002e8
 8002a78:	2400000c 	.word	0x2400000c
 8002a7c:	08011390 	.word	0x08011390
 8002a80:	08011394 	.word	0x08011394
 8002a84:	080113a4 	.word	0x080113a4
 8002a88:	58020800 	.word	0x58020800
 8002a8c:	080113b0 	.word	0x080113b0
 8002a90:	080113c0 	.word	0x080113c0
 8002a94:	080113c4 	.word	0x080113c4
 8002a98:	080113d4 	.word	0x080113d4
					}
					else
					{
						state_game->firstAtk_Turn_Flag = 0;
 8002a9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aa0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002aac:	48b8      	ldr	r0, [pc, #736]	; (8002d90 <GAME_PLAY_Phase_Management+0x680>)
 8002aae:	f00b fc67 	bl	800e380 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8002ab2:	49b8      	ldr	r1, [pc, #736]	; (8002d94 <GAME_PLAY_Phase_Management+0x684>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002ac0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ac4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2326      	movs	r3, #38	; 0x26
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	215a      	movs	r1, #90	; 0x5a
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f004 fc6d 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002ade:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ae2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	4bab      	ldr	r3, [pc, #684]	; (8002d98 <GAME_PLAY_Phase_Management+0x688>)
 8002aec:	9203      	str	r2, [sp, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4aa7      	ldr	r2, [pc, #668]	; (8002d9c <GAME_PLAY_Phase_Management+0x68c>)
 8002b00:	215a      	movs	r1, #90	; 0x5a
 8002b02:	200f      	movs	r0, #15
 8002b04:	f004 fb0f 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8002b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b0c:	f005 f8ec 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002b10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2326      	movs	r3, #38	; 0x26
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	215a      	movs	r1, #90	; 0x5a
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f004 fc45 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002b2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b32:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2326      	movs	r3, #38	; 0x26
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	215a      	movs	r1, #90	; 0x5a
 8002b46:	2000      	movs	r0, #0
 8002b48:	f004 fc36 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8002b4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8002b5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	f7fe ffa0 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8002b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d108      	bne.n	8002b8c <GAME_PLAY_Phase_Management+0x47c>
							state_game->MainGame_State = second_player;
 8002b7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2203      	movs	r2, #3
 8002b86:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8002b8a:	e007      	b.n	8002b9c <GAME_PLAY_Phase_Management+0x48c>
						}
						else{
							state_game->MainGame_State = first_player;
 8002b8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8002b9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ba0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					}
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002bac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb0:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb8:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002bbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bc0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f7fd fdc3 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002bce:	f002 b948 	b.w	8004e62 <GAME_PLAY_Phase_Management+0x2752>
			else if (state_game->action == 1)
 8002bd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f042 813f 	bne.w	8004e62 <GAME_PLAY_Phase_Management+0x2752>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002be4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002be8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2326      	movs	r3, #38	; 0x26
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	215a      	movs	r1, #90	; 0x5a
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f004 fbdb 	bl	80073b8 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8002c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8002c12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002c22:	f002 b91e 	b.w	8004e62 <GAME_PLAY_Phase_Management+0x2752>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <GAME_PLAY_Phase_Management+0x690>)
 8002c34:	9203      	str	r2, [sp, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	9202      	str	r2, [sp, #8]
 8002c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	9200      	str	r2, [sp, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <GAME_PLAY_Phase_Management+0x694>)
 8002c48:	215a      	movs	r1, #90	; 0x5a
 8002c4a:	2005      	movs	r0, #5
 8002c4c:	f004 fa6b 	bl	8007126 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002c50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c54:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c5e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c70:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d147      	bne.n	8002d14 <GAME_PLAY_Phase_Management+0x604>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002c84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	789b      	ldrb	r3, [r3, #2]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <GAME_PLAY_Phase_Management+0x59e>
					ptrYugiohCard_src->cardState = 0;
 8002c94:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002c98:	2200      	movs	r2, #0
 8002c9a:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002c9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ca0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002caa:	f002 b8dd 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x2758>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8002cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f042 80d4 	bne.w	8004e68 <GAME_PLAY_Phase_Management+0x2758>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8002cc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cc8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f7fe febf 	bl	8001a50 <YUGIOH_Check_Spell_On_board>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002cd8:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002cdc:	2bff      	cmp	r3, #255	; 0xff
 8002cde:	d00c      	beq.n	8002cfa <GAME_PLAY_Phase_Management+0x5ea>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8002ce0:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002ce4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002ce8:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3308      	adds	r3, #8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fcfc 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8002cfa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002cfe:	2201      	movs	r2, #1
 8002d00:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002d02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
			break;
 8002d10:	f002 b8aa 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x2758>
			else if (state_game->action == 2)
 8002d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	f042 80a1 	bne.w	8004e68 <GAME_PLAY_Phase_Management+0x2758>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2326      	movs	r3, #38	; 0x26
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	215a      	movs	r1, #90	; 0x5a
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f004 fb3a 	bl	80073b8 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002d44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d48:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2326      	movs	r3, #38	; 0x26
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	215a      	movs	r1, #90	; 0x5a
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f004 fb2b 	bl	80073b8 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002d62:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002d66:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d6a:	f7fd fc8b 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8002d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8002d7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002d8c:	f002 b86c 	b.w	8004e68 <GAME_PLAY_Phase_Management+0x2758>
 8002d90:	240002e8 	.word	0x240002e8
 8002d94:	24000ea0 	.word	0x24000ea0
 8002d98:	24000014 	.word	0x24000014
 8002d9c:	080113e4 	.word	0x080113e4
 8002da0:	2400000c 	.word	0x2400000c
 8002da4:	080113f0 	.word	0x080113f0
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002da8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002db6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002dba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	f042 8051 	bne.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002dcc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	f040 8087 	bne.w	8002ee6 <GAME_PLAY_Phase_Management+0x7d6>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ddc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	4b9d      	ldr	r3, [pc, #628]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002de6:	9203      	str	r2, [sp, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	9202      	str	r2, [sp, #8]
 8002dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df0:	9201      	str	r2, [sp, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	9200      	str	r2, [sp, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a99      	ldr	r2, [pc, #612]	; (8003060 <GAME_PLAY_Phase_Management+0x950>)
 8002dfa:	215a      	movs	r1, #90	; 0x5a
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f004 f992 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e06:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	4b93      	ldr	r3, [pc, #588]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002e10:	9203      	str	r2, [sp, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	9202      	str	r2, [sp, #8]
 8002e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e1a:	9201      	str	r2, [sp, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	9200      	str	r2, [sp, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a90      	ldr	r2, [pc, #576]	; (8003064 <GAME_PLAY_Phase_Management+0x954>)
 8002e24:	215a      	movs	r1, #90	; 0x5a
 8002e26:	2005      	movs	r0, #5
 8002e28:	f004 f97d 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002e3a:	9203      	str	r2, [sp, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	9202      	str	r2, [sp, #8]
 8002e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e44:	9201      	str	r2, [sp, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a86      	ldr	r2, [pc, #536]	; (8003068 <GAME_PLAY_Phase_Management+0x958>)
 8002e4e:	2169      	movs	r1, #105	; 0x69
 8002e50:	2005      	movs	r0, #5
 8002e52:	f004 f968 	bl	8007126 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002e56:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002e5e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002e62:	799a      	ldrb	r2, [r3, #6]
 8002e64:	4b81      	ldr	r3, [pc, #516]	; (800306c <GAME_PLAY_Phase_Management+0x95c>)
 8002e66:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6a:	0899      	lsrs	r1, r3, #2
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002e7a:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002e7e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e82:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3308      	adds	r3, #8
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002e92:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002e96:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002e9a:	f7fd fbf3 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002e9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ea2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f7fe fac4 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002eac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eb0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002eba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fbe0 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002ec4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ec8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002ed2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002ee2:	f001 bfc4 	b.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
				else if (ptrYugiohCard_src->cardType == 2)
 8002ee6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	f040 8146 	bne.w	800317e <GAME_PLAY_Phase_Management+0xa6e>
					state_game->count_chain = 1;
 8002ef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ef6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8002f00:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f04:	789b      	ldrb	r3, [r3, #2]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	f040 80b6 	bne.w	8003078 <GAME_PLAY_Phase_Management+0x968>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002f0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002f1a:	9203      	str	r2, [sp, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	9202      	str	r2, [sp, #8]
 8002f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f24:	9201      	str	r2, [sp, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	; (8003070 <GAME_PLAY_Phase_Management+0x960>)
 8002f2e:	215a      	movs	r1, #90	; 0x5a
 8002f30:	2005      	movs	r0, #5
 8002f32:	f004 f8f8 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f3a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <GAME_PLAY_Phase_Management+0x94c>)
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	9201      	str	r2, [sp, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	9200      	str	r2, [sp, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a47      	ldr	r2, [pc, #284]	; (8003074 <GAME_PLAY_Phase_Management+0x964>)
 8002f58:	215a      	movs	r1, #90	; 0x5a
 8002f5a:	2005      	movs	r0, #5
 8002f5c:	f004 f8e3 	bl	8007126 <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002f60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002f6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	f7fe fb07 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002f90:	f7fd fb78 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002f94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fa2:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002fac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fba:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fda:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002fe4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fe8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2326      	movs	r3, #38	; 0x26
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	215a      	movs	r1, #90	; 0x5a
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f004 f9db 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003002:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003006:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2326      	movs	r3, #38	; 0x26
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	215a      	movs	r1, #90	; 0x5a
 800301a:	2000      	movs	r0, #0
 800301c:	f004 f9cc 	bl	80073b8 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003020:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003024:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	f7fe fa03 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800302e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003032:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800303c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fb1f 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8003046:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800304a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2207      	movs	r2, #7
 8003052:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003056:	f001 bf0a 	b.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
 800305a:	bf00      	nop
 800305c:	2400000c 	.word	0x2400000c
 8003060:	08011400 	.word	0x08011400
 8003064:	08011410 	.word	0x08011410
 8003068:	08011420 	.word	0x08011420
 800306c:	aaaaaaab 	.word	0xaaaaaaab
 8003070:	08011428 	.word	0x08011428
 8003074:	08011440 	.word	0x08011440
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003078:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800307c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b98      	ldr	r3, [pc, #608]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a94      	ldr	r2, [pc, #592]	; (80032ec <GAME_PLAY_Phase_Management+0xbdc>)
 800309a:	215a      	movs	r1, #90	; 0x5a
 800309c:	2005      	movs	r0, #5
 800309e:	f004 f842 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030a6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	4b8e      	ldr	r3, [pc, #568]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80030b0:	9203      	str	r2, [sp, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	9202      	str	r2, [sp, #8]
 80030b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a8b      	ldr	r2, [pc, #556]	; (80032f0 <GAME_PLAY_Phase_Management+0xbe0>)
 80030c4:	215a      	movs	r1, #90	; 0x5a
 80030c6:	2005      	movs	r0, #5
 80030c8:	f004 f82d 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b83      	ldr	r3, [pc, #524]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <GAME_PLAY_Phase_Management+0xbe4>)
 80030ee:	2169      	movs	r1, #105	; 0x69
 80030f0:	2005      	movs	r0, #5
 80030f2:	f004 f818 	bl	8007126 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80030f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80030fa:	799a      	ldrb	r2, [r3, #6]
 80030fc:	4b7e      	ldr	r3, [pc, #504]	; (80032f8 <GAME_PLAY_Phase_Management+0xbe8>)
 80030fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003102:	0899      	lsrs	r1, r3, #2
 8003104:	460b      	mov	r3, r1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003112:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8003116:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800311a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	3308      	adds	r3, #8
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800312a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800312e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8003132:	f7fd faa7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800313a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	f7fe f978 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003144:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003152:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fa94 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800315c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003160:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800316a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800316e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800317a:	f001 be78 	b.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
				else if (ptrYugiohCard_src->cardType == 1)
 800317e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f041 8672 	bne.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
					state_game->test = 2;
 800318a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800318e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 800319a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	f200 80b1 	bhi.w	8003308 <GAME_PLAY_Phase_Management+0xbf8>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80031a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	4b4d      	ldr	r3, [pc, #308]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	9202      	str	r2, [sp, #8]
 80031ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4d      	ldr	r2, [pc, #308]	; (80032fc <GAME_PLAY_Phase_Management+0xbec>)
 80031c8:	215a      	movs	r1, #90	; 0x5a
 80031ca:	2005      	movs	r0, #5
 80031cc:	f003 ffab 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80031d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 80031de:	9203      	str	r2, [sp, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	9202      	str	r2, [sp, #8]
 80031e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80031e8:	9201      	str	r2, [sp, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	9200      	str	r2, [sp, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a43      	ldr	r2, [pc, #268]	; (8003300 <GAME_PLAY_Phase_Management+0xbf0>)
 80031f2:	2169      	movs	r1, #105	; 0x69
 80031f4:	2005      	movs	r0, #5
 80031f6:	f003 ff96 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80031fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003208:	9203      	str	r2, [sp, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	9202      	str	r2, [sp, #8]
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	9201      	str	r2, [sp, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <GAME_PLAY_Phase_Management+0xbf4>)
 800321c:	215a      	movs	r1, #90	; 0x5a
 800321e:	2005      	movs	r0, #5
 8003220:	f003 ff81 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003224:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003228:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <GAME_PLAY_Phase_Management+0xbd8>)
 8003232:	9203      	str	r2, [sp, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	9202      	str	r2, [sp, #8]
 8003238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	9200      	str	r2, [sp, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <GAME_PLAY_Phase_Management+0xbf0>)
 8003246:	2169      	movs	r1, #105	; 0x69
 8003248:	2005      	movs	r0, #5
 800324a:	f003 ff6c 	bl	8007126 <ST7735_WriteStringNSS>
						state_game->test = 1;
 800324e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003252:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800325e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003262:	799a      	ldrb	r2, [r3, #6]
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <GAME_PLAY_Phase_Management+0xbe8>)
 8003266:	fba3 1302 	umull	r1, r3, r3, r2
 800326a:	0899      	lsrs	r1, r3, #2
 800326c:	460b      	mov	r3, r1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800327a:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 800327e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003282:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3308      	adds	r3, #8
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	4413      	add	r3, r2
 800328e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003292:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003296:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800329a:	f7fd f9f3 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800329e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	f7fe f8c4 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80032ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032ba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f9e0 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80032c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80032d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80032e2:	f001 bdc4 	b.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
 80032e6:	bf00      	nop
 80032e8:	2400000c 	.word	0x2400000c
 80032ec:	08011400 	.word	0x08011400
 80032f0:	08011410 	.word	0x08011410
 80032f4:	08011420 	.word	0x08011420
 80032f8:	aaaaaaab 	.word	0xaaaaaaab
 80032fc:	08011454 	.word	0x08011454
 8003300:	08011460 	.word	0x08011460
 8003304:	0801146c 	.word	0x0801146c
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003308:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800330c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2326      	movs	r3, #38	; 0x26
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	215a      	movs	r1, #90	; 0x5a
 8003320:	2000      	movs	r0, #0
 8003322:	f004 f849 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003326:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800332a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2326      	movs	r3, #38	; 0x26
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	215a      	movs	r1, #90	; 0x5a
 800333e:	2000      	movs	r0, #0
 8003340:	f004 f83a 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(5, 90, "You advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003344:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003348:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 8003352:	9203      	str	r2, [sp, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	9202      	str	r2, [sp, #8]
 8003358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7e      	ldr	r2, [pc, #504]	; (8003560 <GAME_PLAY_Phase_Management+0xe50>)
 8003366:	215a      	movs	r1, #90	; 0x5a
 8003368:	2005      	movs	r0, #5
 800336a:	f003 fedc 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800336e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003372:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b78      	ldr	r3, [pc, #480]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 8003390:	2169      	movs	r1, #105	; 0x69
 8003392:	2005      	movs	r0, #5
 8003394:	f003 fec7 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003398:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800339c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	4b6d      	ldr	r3, [pc, #436]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80033a6:	9203      	str	r2, [sp, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	9202      	str	r2, [sp, #8]
 80033ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <GAME_PLAY_Phase_Management+0xe58>)
 80033ba:	215a      	movs	r1, #90	; 0x5a
 80033bc:	2005      	movs	r0, #5
 80033be:	f003 feb2 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80033c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80033d0:	9203      	str	r2, [sp, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033da:	9201      	str	r2, [sp, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a60      	ldr	r2, [pc, #384]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 80033e4:	2169      	movs	r1, #105	; 0x69
 80033e6:	2005      	movs	r0, #5
 80033e8:	f003 fe9d 	bl	8007126 <ST7735_WriteStringNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80033ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f7fe f81d 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80033fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2204      	movs	r2, #4
 8003406:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8003408:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800340c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2204      	movs	r2, #4
 8003414:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003418:	f001 bd29 	b.w	8004e6e <GAME_PLAY_Phase_Management+0x275e>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800341c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003420:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800342a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 800342e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003432:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11f      	bne.n	800347e <GAME_PLAY_Phase_Management+0xd6e>
			{
				state_game->action = 0;
 800343e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003442:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800344c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003450:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800345c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003460:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f7fd ffe5 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 800346a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800346e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f93a 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 800347e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003482:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d172      	bne.n	8003574 <GAME_PLAY_Phase_Management+0xe64>
			{
				// Reading Until RFID action += 1 Mean Card Detected

				ST7735_WriteStringNSS(5, 90, "Add 2 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800348e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003492:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800349c:	9203      	str	r2, [sp, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	9202      	str	r2, [sp, #8]
 80034a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a6:	9201      	str	r2, [sp, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	9200      	str	r2, [sp, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <GAME_PLAY_Phase_Management+0xe5c>)
 80034b0:	215a      	movs	r1, #90	; 0x5a
 80034b2:	2005      	movs	r0, #5
 80034b4:	f003 fe37 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80034b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80034c6:	9203      	str	r2, [sp, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80034d0:	9201      	str	r2, [sp, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <GAME_PLAY_Phase_Management+0xe60>)
 80034da:	2169      	movs	r1, #105	; 0x69
 80034dc:	2005      	movs	r0, #5
 80034de:	f003 fe22 	bl	8007126 <ST7735_WriteStringNSS>

				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80034e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 80034f0:	9203      	str	r2, [sp, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	9202      	str	r2, [sp, #8]
 80034f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fa:	9201      	str	r2, [sp, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	9200      	str	r2, [sp, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <GAME_PLAY_Phase_Management+0xe58>)
 8003504:	215a      	movs	r1, #90	; 0x5a
 8003506:	2005      	movs	r0, #5
 8003508:	f003 fe0d 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800350c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003510:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <GAME_PLAY_Phase_Management+0xe4c>)
 800351a:	9203      	str	r2, [sp, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	9202      	str	r2, [sp, #8]
 8003520:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003524:	9201      	str	r2, [sp, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	9200      	str	r2, [sp, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <GAME_PLAY_Phase_Management+0xe54>)
 800352e:	2169      	movs	r1, #105	; 0x69
 8003530:	2005      	movs	r0, #5
 8003532:	f003 fdf8 	bl	8007126 <ST7735_WriteStringNSS>

				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 8003536:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800353a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800353e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003542:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003546:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800354a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f7fd fa0e 	bl	8000974 <Player_Reading_Card_Monster_SPS>

					state_game->action = 0;
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
				}
			}
			break;
 8003558:	f001 bc8c 	b.w	8004e74 <GAME_PLAY_Phase_Management+0x2764>
 800355c:	2400000c 	.word	0x2400000c
 8003560:	0801147c 	.word	0x0801147c
 8003564:	08011488 	.word	0x08011488
 8003568:	08011490 	.word	0x08011490
 800356c:	0801149c 	.word	0x0801149c
 8003570:	080114ac 	.word	0x080114ac
			else if (state_game->action == 5)
 8003574:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003578:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d166      	bne.n	8003652 <GAME_PLAY_Phase_Management+0xf42>
				ST7735_WriteStringNSS(5, 90, "Add 1 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003584:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003588:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4bb3      	ldr	r3, [pc, #716]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	9200      	str	r2, [sp, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4aaf      	ldr	r2, [pc, #700]	; (8003864 <GAME_PLAY_Phase_Management+0x1154>)
 80035a6:	215a      	movs	r1, #90	; 0x5a
 80035a8:	2005      	movs	r0, #5
 80035aa:	f003 fdbc 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80035ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4ba9      	ldr	r3, [pc, #676]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80035bc:	9203      	str	r2, [sp, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	9200      	str	r2, [sp, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4aa6      	ldr	r2, [pc, #664]	; (8003868 <GAME_PLAY_Phase_Management+0x1158>)
 80035d0:	2169      	movs	r1, #105	; 0x69
 80035d2:	2005      	movs	r0, #5
 80035d4:	f003 fda7 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80035d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80035e6:	9203      	str	r2, [sp, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	9202      	str	r2, [sp, #8]
 80035ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	9200      	str	r2, [sp, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a9c      	ldr	r2, [pc, #624]	; (800386c <GAME_PLAY_Phase_Management+0x115c>)
 80035fa:	215a      	movs	r1, #90	; 0x5a
 80035fc:	2005      	movs	r0, #5
 80035fe:	f003 fd92 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003606:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	4b94      	ldr	r3, [pc, #592]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003610:	9203      	str	r2, [sp, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	9202      	str	r2, [sp, #8]
 8003616:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	9200      	str	r2, [sp, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a93      	ldr	r2, [pc, #588]	; (8003870 <GAME_PLAY_Phase_Management+0x1160>)
 8003624:	2169      	movs	r1, #105	; 0x69
 8003626:	2005      	movs	r0, #5
 8003628:	f003 fd7d 	bl	8007126 <ST7735_WriteStringNSS>
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800362c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003630:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003634:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003638:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800363c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003640:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7fd f993 	bl	8000974 <Player_Reading_Card_Monster_SPS>
			break;
 800364e:	f001 bc11 	b.w	8004e74 <GAME_PLAY_Phase_Management+0x2764>
			else if (state_game->action == 6)
 8003652:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003656:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b06      	cmp	r3, #6
 8003660:	f041 8408 	bne.w	8004e74 <GAME_PLAY_Phase_Management+0x2764>
				uint8_t monsterflag = 0 ;
 8003664:	2300      	movs	r3, #0
 8003666:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 800366a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800366e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003678:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800367c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d804      	bhi.n	8003690 <GAME_PLAY_Phase_Management+0xf80>
					monsterflag += 1;
 8003686:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800368a:	3301      	adds	r3, #1
 800368c:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst++;
 8003690:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003694:	3310      	adds	r3, #16
 8003696:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800369a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800369e:	78db      	ldrb	r3, [r3, #3]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d804      	bhi.n	80036ae <GAME_PLAY_Phase_Management+0xf9e>
					monsterflag += 1;
 80036a4:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80036a8:	3301      	adds	r3, #1
 80036aa:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				if (monsterflag == 2)
 80036ae:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	f040 80e6 	bne.w	8003884 <GAME_PLAY_Phase_Management+0x1174>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80036b8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80036bc:	799a      	ldrb	r2, [r3, #6]
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <GAME_PLAY_Phase_Management+0x1164>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	0899      	lsrs	r1, r3, #2
 80036c6:	460b      	mov	r3, r1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	440b      	add	r3, r1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80036d4:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80036d8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80036dc:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3308      	adds	r3, #8
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80036ec:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80036f0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80036f4:	f7fc ffc6 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80036f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8003706:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800370a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800370e:	4611      	mov	r1, r2
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f7fd ff86 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8003716:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800371a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003724:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003728:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800372c:	4611      	mov	r1, r2
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	f7fd ff77 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003734:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003738:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f7fd fe79 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003742:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003746:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003750:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc ff95 	bl	8000684 <YUGIOH_card_copy>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800375a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800375e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2326      	movs	r3, #38	; 0x26
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	215a      	movs	r1, #90	; 0x5a
 8003772:	2000      	movs	r0, #0
 8003774:	f003 fe20 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003778:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800377c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2326      	movs	r3, #38	; 0x26
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	215a      	movs	r1, #90	; 0x5a
 8003790:	2000      	movs	r0, #0
 8003792:	f003 fe11 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800379a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037a4:	9203      	str	r2, [sp, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	9202      	str	r2, [sp, #8]
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <GAME_PLAY_Phase_Management+0x1168>)
 80037b8:	215a      	movs	r1, #90	; 0x5a
 80037ba:	2005      	movs	r0, #5
 80037bc:	f003 fcb3 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80037c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037ce:	9203      	str	r2, [sp, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	9202      	str	r2, [sp, #8]
 80037d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	9200      	str	r2, [sp, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <GAME_PLAY_Phase_Management+0x116c>)
 80037e2:	2169      	movs	r1, #105	; 0x69
 80037e4:	2005      	movs	r0, #5
 80037e6:	f003 fc9e 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80037ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037ee:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 80037f8:	9203      	str	r2, [sp, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	9202      	str	r2, [sp, #8]
 80037fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003802:	9201      	str	r2, [sp, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	9200      	str	r2, [sp, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <GAME_PLAY_Phase_Management+0x1170>)
 800380c:	215a      	movs	r1, #90	; 0x5a
 800380e:	2005      	movs	r0, #5
 8003810:	f003 fc89 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003814:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003818:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <GAME_PLAY_Phase_Management+0x1150>)
 8003822:	9203      	str	r2, [sp, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <GAME_PLAY_Phase_Management+0x116c>)
 8003836:	2169      	movs	r1, #105	; 0x69
 8003838:	2005      	movs	r0, #5
 800383a:	f003 fc74 	bl	8007126 <ST7735_WriteStringNSS>
					state_game->action = 0;
 800383e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003842:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800384c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003850:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800385c:	f001 bb0a 	b.w	8004e74 <GAME_PLAY_Phase_Management+0x2764>
 8003860:	2400000c 	.word	0x2400000c
 8003864:	080114b8 	.word	0x080114b8
 8003868:	080114ac 	.word	0x080114ac
 800386c:	08011490 	.word	0x08011490
 8003870:	08011488 	.word	0x08011488
 8003874:	aaaaaaab 	.word	0xaaaaaaab
 8003878:	08011454 	.word	0x08011454
 800387c:	080114c8 	.word	0x080114c8
 8003880:	0801146c 	.word	0x0801146c
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003884:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003888:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2326      	movs	r3, #38	; 0x26
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	215a      	movs	r1, #90	; 0x5a
 800389c:	2000      	movs	r0, #0
 800389e:	f003 fd8b 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80038a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038a6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	2300      	movs	r3, #0
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2326      	movs	r3, #38	; 0x26
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	215a      	movs	r1, #90	; 0x5a
 80038ba:	2000      	movs	r0, #0
 80038bc:	f003 fd7c 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80038c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	4bbc      	ldr	r3, [pc, #752]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	9202      	str	r2, [sp, #8]
 80038d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d8:	9201      	str	r2, [sp, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	9200      	str	r2, [sp, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4ab8      	ldr	r2, [pc, #736]	; (8003bc4 <GAME_PLAY_Phase_Management+0x14b4>)
 80038e2:	215a      	movs	r1, #90	; 0x5a
 80038e4:	2005      	movs	r0, #5
 80038e6:	f003 fc1e 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80038ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	4bb2      	ldr	r3, [pc, #712]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80038f8:	9203      	str	r2, [sp, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003902:	9201      	str	r2, [sp, #4]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4aaf      	ldr	r2, [pc, #700]	; (8003bc8 <GAME_PLAY_Phase_Management+0x14b8>)
 800390c:	2169      	movs	r1, #105	; 0x69
 800390e:	2005      	movs	r0, #5
 8003910:	f003 fc09 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003914:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003918:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	4ba7      	ldr	r3, [pc, #668]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 8003922:	9203      	str	r2, [sp, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392c:	9201      	str	r2, [sp, #4]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4aa5      	ldr	r2, [pc, #660]	; (8003bcc <GAME_PLAY_Phase_Management+0x14bc>)
 8003936:	215a      	movs	r1, #90	; 0x5a
 8003938:	2005      	movs	r0, #5
 800393a:	f003 fbf4 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800393e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003942:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	4b9d      	ldr	r3, [pc, #628]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 800394c:	9203      	str	r2, [sp, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	9202      	str	r2, [sp, #8]
 8003952:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	9200      	str	r2, [sp, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a9a      	ldr	r2, [pc, #616]	; (8003bc8 <GAME_PLAY_Phase_Management+0x14b8>)
 8003960:	2169      	movs	r1, #105	; 0x69
 8003962:	2005      	movs	r0, #5
 8003964:	f003 fbdf 	bl	8007126 <ST7735_WriteStringNSS>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003968:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800396c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	f7fd fd5f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8003976:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800397a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8003984:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003988:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fc fe75 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 800399a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800399e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80039a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80039b8:	f001 ba5c 	b.w	8004e74 <GAME_PLAY_Phase_Management+0x2764>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80039bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	4b7d      	ldr	r3, [pc, #500]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80039ca:	9203      	str	r2, [sp, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	9202      	str	r2, [sp, #8]
 80039d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d4:	9201      	str	r2, [sp, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	9200      	str	r2, [sp, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <GAME_PLAY_Phase_Management+0x14c0>)
 80039de:	215a      	movs	r1, #90	; 0x5a
 80039e0:	2005      	movs	r0, #5
 80039e2:	f003 fba0 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80039e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <GAME_PLAY_Phase_Management+0x14b0>)
 80039f4:	9203      	str	r2, [sp, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	9202      	str	r2, [sp, #8]
 80039fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fe:	9201      	str	r2, [sp, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	9200      	str	r2, [sp, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a73      	ldr	r2, [pc, #460]	; (8003bd4 <GAME_PLAY_Phase_Management+0x14c4>)
 8003a08:	215a      	movs	r1, #90	; 0x5a
 8003a0a:	2005      	movs	r0, #5
 8003a0c:	f003 fb8b 	bl	8007126 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8003a10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a14:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d138      	bne.n	8003a92 <GAME_PLAY_Phase_Management+0x1382>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8003a20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	789b      	ldrb	r3, [r3, #2]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <GAME_PLAY_Phase_Management+0x135c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a34:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2326      	movs	r3, #38	; 0x26
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	215a      	movs	r1, #90	; 0x5a
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f003 fcb5 	bl	80073b8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8003a4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2205      	movs	r2, #5
 8003a5a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8003a5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8003a6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a70:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003a74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a78:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003a7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a80:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f7fd f8df 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8003a8e:	f001 b9f4 	b.w	8004e7a <GAME_PLAY_Phase_Management+0x276a>
			else if ((state_game->action == 5 )){
 8003a92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	f041 81eb 	bne.w	8004e7a <GAME_PLAY_Phase_Management+0x276a>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003aa8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2326      	movs	r3, #38	; 0x26
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	215a      	movs	r1, #90	; 0x5a
 8003abc:	2000      	movs	r0, #0
 8003abe:	f003 fc7b 	bl	80073b8 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ac6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ad0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8003ad4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ad8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003adc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f7fd ff89 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 8003aec:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8003af0:	2bff      	cmp	r3, #255	; 0xff
 8003af2:	d05b      	beq.n	8003bac <GAME_PLAY_Phase_Management+0x149c>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003af4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003af8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f7fd fd44 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8003b02:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8003b06:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b0a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3308      	adds	r3, #8
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003b1a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003b1e:	2200      	movs	r2, #0
 8003b20:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003b30:	4619      	mov	r1, r3
 8003b32:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003b36:	f7fc fda5 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8003b3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b48:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8003b52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003b60:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003b6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003b8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2206      	movs	r2, #6
 8003b96:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003b9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b9e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	701a      	strb	r2, [r3, #0]
			break;
 8003ba8:	f001 b967 	b.w	8004e7a <GAME_PLAY_Phase_Management+0x276a>
					state_game->action = 4;
 8003bac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	701a      	strb	r2, [r3, #0]
			break;
 8003bba:	f001 b95e 	b.w	8004e7a <GAME_PLAY_Phase_Management+0x276a>
 8003bbe:	bf00      	nop
 8003bc0:	2400000c 	.word	0x2400000c
 8003bc4:	080114d4 	.word	0x080114d4
 8003bc8:	08011488 	.word	0x08011488
 8003bcc:	080114e0 	.word	0x080114e0
 8003bd0:	080114f0 	.word	0x080114f0
 8003bd4:	08011508 	.word	0x08011508
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003bd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <GAME_PLAY_Phase_Management+0x16cc>)
 8003be6:	9203      	str	r2, [sp, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	9202      	str	r2, [sp, #8]
 8003bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf0:	9201      	str	r2, [sp, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	9200      	str	r2, [sp, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a79      	ldr	r2, [pc, #484]	; (8003de0 <GAME_PLAY_Phase_Management+0x16d0>)
 8003bfa:	215a      	movs	r1, #90	; 0x5a
 8003bfc:	2005      	movs	r0, #5
 8003bfe:	f003 fa92 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c06:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <GAME_PLAY_Phase_Management+0x16cc>)
 8003c10:	9203      	str	r2, [sp, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	9202      	str	r2, [sp, #8]
 8003c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1a:	9201      	str	r2, [sp, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	9200      	str	r2, [sp, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a70      	ldr	r2, [pc, #448]	; (8003de4 <GAME_PLAY_Phase_Management+0x16d4>)
 8003c24:	215a      	movs	r1, #90	; 0x5a
 8003c26:	2005      	movs	r0, #5
 8003c28:	f003 fa7d 	bl	8007126 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8003c2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c30:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d147      	bne.n	8003ccc <GAME_PLAY_Phase_Management+0x15bc>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8003c3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	789b      	ldrb	r3, [r3, #2]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d12c      	bne.n	8003ca6 <GAME_PLAY_Phase_Management+0x1596>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003c4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2326      	movs	r3, #38	; 0x26
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	215a      	movs	r1, #90	; 0x5a
 8003c64:	2000      	movs	r0, #0
 8003c66:	f003 fba7 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003c6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c6e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2326      	movs	r3, #38	; 0x26
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	215a      	movs	r1, #90	; 0x5a
 8003c82:	2000      	movs	r0, #0
 8003c84:	f003 fb98 	bl	80073b8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8003c88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8003c98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8003ca6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003caa:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cb2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003cb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	6809      	ldr	r1, [r1, #0]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	f7fc ffc2 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8003cc8:	f001 b8da 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x2770>
			else if ((state_game->action == 5 )){
 8003ccc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	f041 80d1 	bne.w	8004e80 <GAME_PLAY_Phase_Management+0x2770>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003cde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ce2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003cec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8003cf0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cf4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003cf8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7fd fe7b 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8003d08:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003d0c:	2bff      	cmp	r3, #255	; 0xff
 8003d0e:	d05b      	beq.n	8003dc8 <GAME_PLAY_Phase_Management+0x16b8>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003d10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d14:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f7fd fc36 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003d1e:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003d22:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d26:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003d36:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003d3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003d52:	f7fc fc97 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8003d56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d5a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d64:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8003d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003d7c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003d86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003d94:	3301      	adds	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003da6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003daa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2206      	movs	r2, #6
 8003db2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003db6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
			break;
 8003dc4:	f001 b85c 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x2770>
					state_game->action = 4;
 8003dc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dcc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	701a      	strb	r2, [r3, #0]
			break;
 8003dd6:	f001 b853 	b.w	8004e80 <GAME_PLAY_Phase_Management+0x2770>
 8003dda:	bf00      	nop
 8003ddc:	2400000c 	.word	0x2400000c
 8003de0:	08011508 	.word	0x08011508
 8003de4:	080114f0 	.word	0x080114f0
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003de8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b9a      	ldr	r3, [pc, #616]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003df6:	9203      	str	r2, [sp, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e00:	9201      	str	r2, [sp, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a96      	ldr	r2, [pc, #600]	; (8004064 <GAME_PLAY_Phase_Management+0x1954>)
 8003e0a:	215a      	movs	r1, #90	; 0x5a
 8003e0c:	2005      	movs	r0, #5
 8003e0e:	f003 f98a 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8003e12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e16:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	4b90      	ldr	r3, [pc, #576]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003e20:	9203      	str	r2, [sp, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	9202      	str	r2, [sp, #8]
 8003e26:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e2a:	9201      	str	r2, [sp, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	9200      	str	r2, [sp, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8d      	ldr	r2, [pc, #564]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8003e34:	2169      	movs	r1, #105	; 0x69
 8003e36:	2005      	movs	r0, #5
 8003e38:	f003 f975 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003e3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e40:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	4b85      	ldr	r3, [pc, #532]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	9202      	str	r2, [sp, #8]
 8003e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	9200      	str	r2, [sp, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a83      	ldr	r2, [pc, #524]	; (800406c <GAME_PLAY_Phase_Management+0x195c>)
 8003e5e:	215a      	movs	r1, #90	; 0x5a
 8003e60:	2005      	movs	r0, #5
 8003e62:	f003 f960 	bl	8007126 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8003e66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e6a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003e74:	9203      	str	r2, [sp, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	9202      	str	r2, [sp, #8]
 8003e7a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a78      	ldr	r2, [pc, #480]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8003e88:	2169      	movs	r1, #105	; 0x69
 8003e8a:	2005      	movs	r0, #5
 8003e8c:	f003 f94b 	bl	8007126 <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8003e90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ea2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003ea6:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8003eb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003eba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ec8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003ecc:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8003edc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ee0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	f040 82cd 	bne.w	8004488 <GAME_PLAY_Phase_Management+0x1d78>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8003eee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ef2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	785a      	ldrb	r2, [r3, #1]
 8003efa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003efe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f080 825d 	bcs.w	80043c8 <GAME_PLAY_Phase_Management+0x1cb8>
				{
					state_game->test = 165;
 8003f0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	22a5      	movs	r2, #165	; 0xa5
 8003f1a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003f1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f30:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003f34:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8003f44:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	f040 8096 	bne.w	800407c <GAME_PLAY_Phase_Management+0x196c>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003f50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fba4 	bl	80016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003f5c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fd16 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						//						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
						state_game->count_chain++;
 8003f6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003f88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003f92:	9203      	str	r2, [sp, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9c:	9201      	str	r2, [sp, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a32      	ldr	r2, [pc, #200]	; (8004070 <GAME_PLAY_Phase_Management+0x1960>)
 8003fa6:	215a      	movs	r1, #90	; 0x5a
 8003fa8:	2005      	movs	r0, #5
 8003faa:	f003 f8bc 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003fae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003fb8:	9203      	str	r2, [sp, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	9202      	str	r2, [sp, #8]
 8003fbe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003fc2:	9201      	str	r2, [sp, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	9200      	str	r2, [sp, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <GAME_PLAY_Phase_Management+0x1964>)
 8003fcc:	2169      	movs	r1, #105	; 0x69
 8003fce:	2005      	movs	r0, #5
 8003fd0:	f003 f8a9 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003fd4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8003fde:	9203      	str	r2, [sp, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe8:	9201      	str	r2, [sp, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	9200      	str	r2, [sp, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <GAME_PLAY_Phase_Management+0x1968>)
 8003ff2:	215a      	movs	r1, #90	; 0x5a
 8003ff4:	2005      	movs	r0, #5
 8003ff6:	f003 f896 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ffa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <GAME_PLAY_Phase_Management+0x1950>)
 8004004:	9203      	str	r2, [sp, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	9202      	str	r2, [sp, #8]
 800400a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <GAME_PLAY_Phase_Management+0x1958>)
 8004018:	2169      	movs	r1, #105	; 0x69
 800401a:	2005      	movs	r0, #5
 800401c:	f003 f883 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004024:	f003 fe60 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004028:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2300      	movs	r3, #0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2326      	movs	r3, #38	; 0x26
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	215a      	movs	r1, #90	; 0x5a
 800403c:	2000      	movs	r0, #0
 800403e:	f003 f9bb 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004042:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2326      	movs	r3, #38	; 0x26
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	215a      	movs	r1, #90	; 0x5a
 8004056:	2000      	movs	r0, #0
 8004058:	f003 f9ae 	bl	80073b8 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 800405c:	f000 bf13 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
 8004060:	2400000c 	.word	0x2400000c
 8004064:	08011524 	.word	0x08011524
 8004068:	08011534 	.word	0x08011534
 800406c:	08011544 	.word	0x08011544
 8004070:	08011558 	.word	0x08011558
 8004074:	08011568 	.word	0x08011568
 8004078:	08011570 	.word	0x08011570
					else if (ptrYugiohCard_src->cardSignature == 12)
 800407c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	f040 808c 	bne.w	80041a0 <GAME_PLAY_Phase_Management+0x1a90>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8004088:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7fd fb24 	bl	80016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 800409c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fc76 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80040ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80040c8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	4bb5      	ldr	r3, [pc, #724]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80040d2:	9203      	str	r2, [sp, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	9202      	str	r2, [sp, #8]
 80040d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040dc:	9201      	str	r2, [sp, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4ab1      	ldr	r2, [pc, #708]	; (80043ac <GAME_PLAY_Phase_Management+0x1c9c>)
 80040e6:	215a      	movs	r1, #90	; 0x5a
 80040e8:	2005      	movs	r0, #5
 80040ea:	f003 f81c 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80040ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	4bac      	ldr	r3, [pc, #688]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80040f8:	9203      	str	r2, [sp, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	9202      	str	r2, [sp, #8]
 80040fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	9200      	str	r2, [sp, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4aa9      	ldr	r2, [pc, #676]	; (80043b0 <GAME_PLAY_Phase_Management+0x1ca0>)
 800410c:	2169      	movs	r1, #105	; 0x69
 800410e:	2005      	movs	r0, #5
 8004110:	f003 f809 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004114:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	4ba2      	ldr	r3, [pc, #648]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 800411e:	9203      	str	r2, [sp, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	9202      	str	r2, [sp, #8]
 8004124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004128:	9201      	str	r2, [sp, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	9200      	str	r2, [sp, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4aa0      	ldr	r2, [pc, #640]	; (80043b4 <GAME_PLAY_Phase_Management+0x1ca4>)
 8004132:	215a      	movs	r1, #90	; 0x5a
 8004134:	2005      	movs	r0, #5
 8004136:	f002 fff6 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800413a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	4b99      	ldr	r3, [pc, #612]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004144:	9203      	str	r2, [sp, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	9202      	str	r2, [sp, #8]
 800414a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800414e:	9201      	str	r2, [sp, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a98      	ldr	r2, [pc, #608]	; (80043b8 <GAME_PLAY_Phase_Management+0x1ca8>)
 8004158:	2169      	movs	r1, #105	; 0x69
 800415a:	2005      	movs	r0, #5
 800415c:	f002 ffe3 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004164:	f003 fdc0 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004168:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2326      	movs	r3, #38	; 0x26
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	215a      	movs	r1, #90	; 0x5a
 800417c:	2000      	movs	r0, #0
 800417e:	f003 f91b 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004182:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2326      	movs	r3, #38	; 0x26
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	215a      	movs	r1, #90	; 0x5a
 8004196:	2000      	movs	r0, #0
 8004198:	f003 f90e 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 800419c:	f000 be73 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80041a0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b0d      	cmp	r3, #13
 80041a8:	d110      	bne.n	80041cc <GAME_PLAY_Phase_Management+0x1abc>
						state_game->test = 166;
 80041aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	22a6      	movs	r2, #166	; 0xa6
 80041b6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80041ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2205      	movs	r2, #5
 80041c6:	701a      	strb	r2, [r3, #0]
			break;
 80041c8:	f000 be5d 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80041cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b0e      	cmp	r3, #14
 80041d4:	d005      	beq.n	80041e2 <GAME_PLAY_Phase_Management+0x1ad2>
 80041d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	f040 8094 	bne.w	800430a <GAME_PLAY_Phase_Management+0x1bfa>
						state_game->test = 133;
 80041e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2285      	movs	r2, #133	; 0x85
 80041ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80041f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fd fb43 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8004206:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd fbc1 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004216:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800421a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	3301      	adds	r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800422a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004232:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 800423c:	9203      	str	r2, [sp, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	9202      	str	r2, [sp, #8]
 8004242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004246:	9201      	str	r2, [sp, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	9200      	str	r2, [sp, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <GAME_PLAY_Phase_Management+0x1cac>)
 8004250:	215a      	movs	r1, #90	; 0x5a
 8004252:	2005      	movs	r0, #5
 8004254:	f002 ff67 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004258:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004262:	9203      	str	r2, [sp, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	9202      	str	r2, [sp, #8]
 8004268:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800426c:	9201      	str	r2, [sp, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <GAME_PLAY_Phase_Management+0x1cb0>)
 8004276:	2169      	movs	r1, #105	; 0x69
 8004278:	2005      	movs	r0, #5
 800427a:	f002 ff54 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800427e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	4b48      	ldr	r3, [pc, #288]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 8004288:	9203      	str	r2, [sp, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	9202      	str	r2, [sp, #8]
 800428e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	9200      	str	r2, [sp, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <GAME_PLAY_Phase_Management+0x1ca4>)
 800429c:	215a      	movs	r1, #90	; 0x5a
 800429e:	2005      	movs	r0, #5
 80042a0:	f002 ff41 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <GAME_PLAY_Phase_Management+0x1c98>)
 80042ae:	9203      	str	r2, [sp, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	9200      	str	r2, [sp, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <GAME_PLAY_Phase_Management+0x1cb4>)
 80042c2:	2169      	movs	r1, #105	; 0x69
 80042c4:	2005      	movs	r0, #5
 80042c6:	f002 ff2e 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80042ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ce:	f003 fd0b 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80042d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	2300      	movs	r3, #0
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2326      	movs	r3, #38	; 0x26
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	215a      	movs	r1, #90	; 0x5a
 80042e6:	2000      	movs	r0, #0
 80042e8:	f003 f866 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2326      	movs	r3, #38	; 0x26
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	215a      	movs	r1, #90	; 0x5a
 8004300:	2000      	movs	r0, #0
 8004302:	f003 f859 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 8004306:	f000 bdbe 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					else if(ptrYugiohCard_src->cardSignature == 16)
 800430a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d110      	bne.n	8004336 <GAME_PLAY_Phase_Management+0x1c26>
						state_game->test = 124;
 8004314:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004318:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	227c      	movs	r2, #124	; 0x7c
 8004320:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8004324:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004328:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2205      	movs	r2, #5
 8004330:	701a      	strb	r2, [r3, #0]
			break;
 8004332:	f000 bda8 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8004336:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b11      	cmp	r3, #17
 800433e:	d108      	bne.n	8004352 <GAME_PLAY_Phase_Management+0x1c42>
						state_game->action = 5;
 8004340:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004344:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2205      	movs	r2, #5
 800434c:	701a      	strb	r2, [r3, #0]
			break;
 800434e:	f000 bd9a 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8004352:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b12      	cmp	r3, #18
 800435a:	d005      	beq.n	8004368 <GAME_PLAY_Phase_Management+0x1c58>
 800435c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b13      	cmp	r3, #19
 8004364:	f040 858f 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8004368:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 8588 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004376:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd f94e 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004386:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800438a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	3301      	adds	r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800439a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	705a      	strb	r2, [r3, #1]
			break;
 80043a2:	f000 bd70 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
 80043a6:	bf00      	nop
 80043a8:	2400000c 	.word	0x2400000c
 80043ac:	08011558 	.word	0x08011558
 80043b0:	08011580 	.word	0x08011580
 80043b4:	08011570 	.word	0x08011570
 80043b8:	08011534 	.word	0x08011534
 80043bc:	0801158c 	.word	0x0801158c
 80043c0:	0801159c 	.word	0x0801159c
 80043c4:	080115ac 	.word	0x080115ac
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80043c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2326      	movs	r3, #38	; 0x26
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	215a      	movs	r1, #90	; 0x5a
 80043e0:	2000      	movs	r0, #0
 80043e2:	f002 ffe9 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80043e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2326      	movs	r3, #38	; 0x26
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	215a      	movs	r1, #90	; 0x5a
 80043fe:	2000      	movs	r0, #0
 8004400:	f002 ffda 	bl	80073b8 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800440a:	e020      	b.n	800444e <GAME_PLAY_Phase_Management+0x1d3e>
						state_game->ptrChainUser[i] = &dummyPlayer;
 800440c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004410:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800441a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	f107 0210 	add.w	r2, r7, #16
 8004426:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8004428:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800442c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004436:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	f107 0210 	add.w	r2, r7, #16
 8004442:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004444:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004448:	3301      	adds	r3, #1
 800444a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800444e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004452:	2b05      	cmp	r3, #5
 8004454:	ddda      	ble.n	800440c <GAME_PLAY_Phase_Management+0x1cfc>
					state_game->ChainCount = 0;
 8004456:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800445a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 8004466:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800446a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8004474:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004478:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8004484:	f000 bcff 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
			else if (state_game->action == 5)
 8004488:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800448c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b05      	cmp	r3, #5
 8004496:	f040 80c1 	bne.w	800461c <GAME_PLAY_Phase_Management+0x1f0c>
				state_game->test = 167;
 800449a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800449e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	22a7      	movs	r2, #167	; 0xa7
 80044a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80044aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4619      	mov	r1, r3
 80044b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044bc:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80044c0:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 80044d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	789b      	ldrb	r3, [r3, #2]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d123      	bne.n	8004524 <GAME_PLAY_Phase_Management+0x1e14>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80044dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc ffa6 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 80044e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc f8fd 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 80044f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8004506:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800450a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	3301      	adds	r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800451a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	705a      	strb	r2, [r3, #1]
 8004522:	e028      	b.n	8004576 <GAME_PLAY_Phase_Management+0x1e66>
				else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004524:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d122      	bne.n	8004576 <GAME_PLAY_Phase_Management+0x1e66>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8004530:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc ff7c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 800453c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc f8d3 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 800454c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004550:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800455a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800455e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	3301      	adds	r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800456e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 8004576:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b0d      	cmp	r3, #13
 800457e:	d110      	bne.n	80045a2 <GAME_PLAY_Phase_Management+0x1e92>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8004580:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800458a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800458e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004592:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004596:	6809      	ldr	r1, [r1, #0]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f7fc fcb5 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 800459e:	f000 bc72 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80045a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d110      	bne.n	80045ce <GAME_PLAY_Phase_Management+0x1ebe>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 80045ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045b6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80045ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045be:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80045c2:	6809      	ldr	r1, [r1, #0]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	f7fc fd4d 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 80045ca:	f000 bc5c 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				else if (ptrYugiohCard_src->cardSignature == 17)
 80045ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b11      	cmp	r3, #17
 80045d6:	d110      	bne.n	80045fa <GAME_PLAY_Phase_Management+0x1eea>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 80045d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045e2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80045e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80045ee:	6809      	ldr	r1, [r1, #0]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f7fc fbdf 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 80045f6:	f000 bc46 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 80045fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004604:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004608:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800460c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004610:	6809      	ldr	r1, [r1, #0]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	f7fc f89e 	bl	8000754 <Player_Reading_Card>
			break;
 8004618:	f000 bc35 	b.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
			else if (state_game->action == 6)
 800461c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004620:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b06      	cmp	r3, #6
 800462a:	f040 842c 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				state_game->test = 169;
 800462e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004632:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	22a9      	movs	r2, #169	; 0xa9
 800463a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800463e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004642:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	4619      	mov	r1, r3
 800464c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004650:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004654:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	4413      	add	r3, r2
 800465e:	3304      	adds	r3, #4
 8004660:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 8004664:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b0d      	cmp	r3, #13
 800466c:	f040 819d 	bne.w	80049aa <GAME_PLAY_Phase_Management+0x229a>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004670:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	4b66      	ldr	r3, [pc, #408]	; (8004814 <GAME_PLAY_Phase_Management+0x2104>)
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	9202      	str	r2, [sp, #8]
 8004680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004684:	9201      	str	r2, [sp, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	9200      	str	r2, [sp, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a62      	ldr	r2, [pc, #392]	; (8004818 <GAME_PLAY_Phase_Management+0x2108>)
 800468e:	215a      	movs	r1, #90	; 0x5a
 8004690:	2005      	movs	r0, #5
 8004692:	f002 fd48 	bl	8007126 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8004696:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	789b      	ldrb	r3, [r3, #2]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80c4 	bne.w	800482c <GAME_PLAY_Phase_Management+0x211c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80046a4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2326      	movs	r3, #38	; 0x26
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	215a      	movs	r1, #90	; 0x5a
 80046b8:	2000      	movs	r0, #0
 80046ba:	f002 fe7d 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80046be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	22aa      	movs	r2, #170	; 0xaa
 80046ca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80046ce:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80046d8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80046dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80046e0:	2200      	movs	r2, #0
 80046e2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80046e4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046ee:	4619      	mov	r1, r3
 80046f0:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80046f4:	f7fb ffc6 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80046f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd f82e 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 8004704:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004708:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004712:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd f93b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004722:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004726:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004736:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800473e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	4b33      	ldr	r3, [pc, #204]	; (8004814 <GAME_PLAY_Phase_Management+0x2104>)
 8004748:	9203      	str	r2, [sp, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	9202      	str	r2, [sp, #8]
 800474e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a30      	ldr	r2, [pc, #192]	; (800481c <GAME_PLAY_Phase_Management+0x210c>)
 800475c:	215a      	movs	r1, #90	; 0x5a
 800475e:	2005      	movs	r0, #5
 8004760:	f002 fce1 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004764:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <GAME_PLAY_Phase_Management+0x2104>)
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004778:	9201      	str	r2, [sp, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	9200      	str	r2, [sp, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <GAME_PLAY_Phase_Management+0x2110>)
 8004782:	2169      	movs	r1, #105	; 0x69
 8004784:	2005      	movs	r0, #5
 8004786:	f002 fcce 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800478a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <GAME_PLAY_Phase_Management+0x2104>)
 8004794:	9203      	str	r2, [sp, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	9202      	str	r2, [sp, #8]
 800479a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	9200      	str	r2, [sp, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <GAME_PLAY_Phase_Management+0x2114>)
 80047a8:	215a      	movs	r1, #90	; 0x5a
 80047aa:	2005      	movs	r0, #5
 80047ac:	f002 fcbb 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <GAME_PLAY_Phase_Management+0x2104>)
 80047ba:	9203      	str	r2, [sp, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	9202      	str	r2, [sp, #8]
 80047c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80047c4:	9201      	str	r2, [sp, #4]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	9200      	str	r2, [sp, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <GAME_PLAY_Phase_Management+0x2118>)
 80047ce:	2169      	movs	r1, #105	; 0x69
 80047d0:	2005      	movs	r0, #5
 80047d2:	f002 fca8 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80047d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047da:	f003 fa85 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80047de:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2326      	movs	r3, #38	; 0x26
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	215a      	movs	r1, #90	; 0x5a
 80047f2:	2000      	movs	r0, #0
 80047f4:	f002 fde0 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	2300      	movs	r3, #0
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	2326      	movs	r3, #38	; 0x26
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	215a      	movs	r1, #90	; 0x5a
 800480c:	2000      	movs	r0, #0
 800480e:	f002 fdd3 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 8004812:	e338      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x2776>
 8004814:	2400000c 	.word	0x2400000c
 8004818:	080113f0 	.word	0x080113f0
 800481c:	08011558 	.word	0x08011558
 8004820:	080115b8 	.word	0x080115b8
 8004824:	08011570 	.word	0x08011570
 8004828:	08011534 	.word	0x08011534
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800482c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f040 8326 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800483a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	2300      	movs	r3, #0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2326      	movs	r3, #38	; 0x26
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	215a      	movs	r1, #90	; 0x5a
 800484e:	2000      	movs	r0, #0
 8004850:	f002 fdb2 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004854:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004858:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	22ab      	movs	r2, #171	; 0xab
 8004860:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004864:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800486e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004872:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004876:	2201      	movs	r2, #1
 8004878:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800487a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004884:	4619      	mov	r1, r3
 8004886:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800488a:	f7fb fefb 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 800488e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fc ff63 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 800489a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800489e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2204      	movs	r2, #4
 80048a6:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 80048a8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd f870 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80048b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	3301      	adds	r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80048d4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	4ba5      	ldr	r3, [pc, #660]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	9202      	str	r2, [sp, #8]
 80048e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e8:	9201      	str	r2, [sp, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	9200      	str	r2, [sp, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4aa1      	ldr	r2, [pc, #644]	; (8004b78 <GAME_PLAY_Phase_Management+0x2468>)
 80048f2:	215a      	movs	r1, #90	; 0x5a
 80048f4:	2005      	movs	r0, #5
 80048f6:	f002 fc16 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80048fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	4b9c      	ldr	r3, [pc, #624]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004904:	9203      	str	r2, [sp, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	9202      	str	r2, [sp, #8]
 800490a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	9200      	str	r2, [sp, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a99      	ldr	r2, [pc, #612]	; (8004b7c <GAME_PLAY_Phase_Management+0x246c>)
 8004918:	2169      	movs	r1, #105	; 0x69
 800491a:	2005      	movs	r0, #5
 800491c:	f002 fc03 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004920:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	4b92      	ldr	r3, [pc, #584]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 800492a:	9203      	str	r2, [sp, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004934:	9201      	str	r2, [sp, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	9200      	str	r2, [sp, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a90      	ldr	r2, [pc, #576]	; (8004b80 <GAME_PLAY_Phase_Management+0x2470>)
 800493e:	215a      	movs	r1, #90	; 0x5a
 8004940:	2005      	movs	r0, #5
 8004942:	f002 fbf0 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004946:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004950:	9203      	str	r2, [sp, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	9202      	str	r2, [sp, #8]
 8004956:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800495a:	9201      	str	r2, [sp, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	9200      	str	r2, [sp, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a88      	ldr	r2, [pc, #544]	; (8004b84 <GAME_PLAY_Phase_Management+0x2474>)
 8004964:	2169      	movs	r1, #105	; 0x69
 8004966:	2005      	movs	r0, #5
 8004968:	f002 fbdd 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800496c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004970:	f003 f9ba 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004974:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2326      	movs	r3, #38	; 0x26
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	215a      	movs	r1, #90	; 0x5a
 8004988:	2000      	movs	r0, #0
 800498a:	f002 fd15 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800498e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2300      	movs	r3, #0
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2326      	movs	r3, #38	; 0x26
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	215a      	movs	r1, #90	; 0x5a
 80049a2:	2000      	movs	r0, #0
 80049a4:	f002 fd08 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 80049a8:	e26d      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80049aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	f040 81aa 	bne.w	8004d0a <GAME_PLAY_Phase_Management+0x25fa>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80049b6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2326      	movs	r3, #38	; 0x26
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	215a      	movs	r1, #90	; 0x5a
 80049ca:	2000      	movs	r0, #0
 80049cc:	f002 fcf4 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80049d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 80049da:	9203      	str	r2, [sp, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	9202      	str	r2, [sp, #8]
 80049e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	9200      	str	r2, [sp, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a66      	ldr	r2, [pc, #408]	; (8004b88 <GAME_PLAY_Phase_Management+0x2478>)
 80049ee:	215a      	movs	r1, #90	; 0x5a
 80049f0:	2005      	movs	r0, #5
 80049f2:	f002 fb98 	bl	8007126 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80049f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	789b      	ldrb	r3, [r3, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 80c4 	bne.w	8004b8c <GAME_PLAY_Phase_Management+0x247c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004a04:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	2326      	movs	r3, #38	; 0x26
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	215a      	movs	r1, #90	; 0x5a
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f002 fccd 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8004a1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	22aa      	movs	r2, #170	; 0xaa
 8004a2a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004a2e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a38:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8004a3c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004a40:	2200      	movs	r2, #0
 8004a42:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004a44:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004a54:	f7fb fe16 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004a58:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc fee8 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004a64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004a72:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fc ff8b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004a82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a86:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004a9e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004aa8:	9203      	str	r2, [sp, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	9202      	str	r2, [sp, #8]
 8004aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab2:	9201      	str	r2, [sp, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	9200      	str	r2, [sp, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <GAME_PLAY_Phase_Management+0x2468>)
 8004abc:	215a      	movs	r1, #90	; 0x5a
 8004abe:	2005      	movs	r0, #5
 8004ac0:	f002 fb31 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004ac4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004ace:	9203      	str	r2, [sp, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	9202      	str	r2, [sp, #8]
 8004ad4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004ad8:	9201      	str	r2, [sp, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	9200      	str	r2, [sp, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <GAME_PLAY_Phase_Management+0x246c>)
 8004ae2:	2169      	movs	r1, #105	; 0x69
 8004ae4:	2005      	movs	r0, #5
 8004ae6:	f002 fb1e 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004aea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004af4:	9203      	str	r2, [sp, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	9202      	str	r2, [sp, #8]
 8004afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004afe:	9201      	str	r2, [sp, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	9200      	str	r2, [sp, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <GAME_PLAY_Phase_Management+0x2470>)
 8004b08:	215a      	movs	r1, #90	; 0x5a
 8004b0a:	2005      	movs	r0, #5
 8004b0c:	f002 fb0b 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b10:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <GAME_PLAY_Phase_Management+0x2464>)
 8004b1a:	9203      	str	r2, [sp, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	9202      	str	r2, [sp, #8]
 8004b20:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b24:	9201      	str	r2, [sp, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	9200      	str	r2, [sp, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <GAME_PLAY_Phase_Management+0x2474>)
 8004b2e:	2169      	movs	r1, #105	; 0x69
 8004b30:	2005      	movs	r0, #5
 8004b32:	f002 faf8 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b3a:	f003 f8d5 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b3e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2326      	movs	r3, #38	; 0x26
 8004b4e:	2280      	movs	r2, #128	; 0x80
 8004b50:	215a      	movs	r1, #90	; 0x5a
 8004b52:	2000      	movs	r0, #0
 8004b54:	f002 fc30 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	2300      	movs	r3, #0
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2326      	movs	r3, #38	; 0x26
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	215a      	movs	r1, #90	; 0x5a
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f002 fc23 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 8004b72:	e188      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x2776>
 8004b74:	2400000c 	.word	0x2400000c
 8004b78:	08011558 	.word	0x08011558
 8004b7c:	080115b8 	.word	0x080115b8
 8004b80:	08011570 	.word	0x08011570
 8004b84:	08011534 	.word	0x08011534
 8004b88:	080113f0 	.word	0x080113f0
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004b8c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 8176 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b9a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2326      	movs	r3, #38	; 0x26
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	215a      	movs	r1, #90	; 0x5a
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f002 fc02 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	22ab      	movs	r2, #171	; 0xab
 8004bc0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004bc4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004bd2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004bda:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004be4:	4619      	mov	r1, r3
 8004be6:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004bea:	f7fb fd4b 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004bee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc fe1d 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004bfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bfe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2204      	movs	r2, #4
 8004c06:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004c08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc fec0 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004c18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	3301      	adds	r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c2c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004c34:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	4ba4      	ldr	r3, [pc, #656]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	9202      	str	r2, [sp, #8]
 8004c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c48:	9201      	str	r2, [sp, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4aa0      	ldr	r2, [pc, #640]	; (8004ed4 <GAME_PLAY_Phase_Management+0x27c4>)
 8004c52:	215a      	movs	r1, #90	; 0x5a
 8004c54:	2005      	movs	r0, #5
 8004c56:	f002 fa66 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004c5a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004c64:	9203      	str	r2, [sp, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	9202      	str	r2, [sp, #8]
 8004c6a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c6e:	9201      	str	r2, [sp, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	9200      	str	r2, [sp, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a98      	ldr	r2, [pc, #608]	; (8004ed8 <GAME_PLAY_Phase_Management+0x27c8>)
 8004c78:	2169      	movs	r1, #105	; 0x69
 8004c7a:	2005      	movs	r0, #5
 8004c7c:	f002 fa53 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004c80:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004c8a:	9203      	str	r2, [sp, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	9202      	str	r2, [sp, #8]
 8004c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c94:	9201      	str	r2, [sp, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a8f      	ldr	r2, [pc, #572]	; (8004edc <GAME_PLAY_Phase_Management+0x27cc>)
 8004c9e:	215a      	movs	r1, #90	; 0x5a
 8004ca0:	2005      	movs	r0, #5
 8004ca2:	f002 fa40 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004ca6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	4b88      	ldr	r3, [pc, #544]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004cb0:	9203      	str	r2, [sp, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	9202      	str	r2, [sp, #8]
 8004cb6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cba:	9201      	str	r2, [sp, #4]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a87      	ldr	r2, [pc, #540]	; (8004ee0 <GAME_PLAY_Phase_Management+0x27d0>)
 8004cc4:	2169      	movs	r1, #105	; 0x69
 8004cc6:	2005      	movs	r0, #5
 8004cc8:	f002 fa2d 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cd0:	f003 f80a 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004cd4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2326      	movs	r3, #38	; 0x26
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	215a      	movs	r1, #90	; 0x5a
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f002 fb65 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004cee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2326      	movs	r3, #38	; 0x26
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	215a      	movs	r1, #90	; 0x5a
 8004d02:	2000      	movs	r0, #0
 8004d04:	f002 fb58 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 8004d08:	e0bd      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x2776>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8004d0a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b11      	cmp	r3, #17
 8004d12:	f040 80b8 	bne.w	8004e86 <GAME_PLAY_Phase_Management+0x2776>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8004d16:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8004d24:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004d34:	f7fb fca6 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8004d38:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7fc fdf0 	bl	800192c <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8004d4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2204      	movs	r2, #4
 8004d58:	701a      	strb	r2, [r3, #0]
					YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004d5a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc fe17 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
					state_game->count_chain++;
 8004d6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004d86:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004d90:	9203      	str	r2, [sp, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	9202      	str	r2, [sp, #8]
 8004d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d9a:	9201      	str	r2, [sp, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	9200      	str	r2, [sp, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a4c      	ldr	r2, [pc, #304]	; (8004ed4 <GAME_PLAY_Phase_Management+0x27c4>)
 8004da4:	215a      	movs	r1, #90	; 0x5a
 8004da6:	2005      	movs	r0, #5
 8004da8:	f002 f9bd 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004dac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004db6:	9203      	str	r2, [sp, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	9202      	str	r2, [sp, #8]
 8004dbc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	9200      	str	r2, [sp, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <GAME_PLAY_Phase_Management+0x27d4>)
 8004dca:	2169      	movs	r1, #105	; 0x69
 8004dcc:	2005      	movs	r0, #5
 8004dce:	f002 f9aa 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004dd2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004ddc:	9203      	str	r2, [sp, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	9202      	str	r2, [sp, #8]
 8004de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004de6:	9201      	str	r2, [sp, #4]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	9200      	str	r2, [sp, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <GAME_PLAY_Phase_Management+0x27cc>)
 8004df0:	215a      	movs	r1, #90	; 0x5a
 8004df2:	2005      	movs	r0, #5
 8004df4:	f002 f997 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004df8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	4b33      	ldr	r3, [pc, #204]	; (8004ed0 <GAME_PLAY_Phase_Management+0x27c0>)
 8004e02:	9203      	str	r2, [sp, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	9202      	str	r2, [sp, #8]
 8004e08:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e0c:	9201      	str	r2, [sp, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	9200      	str	r2, [sp, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <GAME_PLAY_Phase_Management+0x27d0>)
 8004e16:	2169      	movs	r1, #105	; 0x69
 8004e18:	2005      	movs	r0, #5
 8004e1a:	f002 f984 	bl	8007126 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8004e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e22:	f002 ff61 	bl	8007ce8 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004e26:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	2300      	movs	r3, #0
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2326      	movs	r3, #38	; 0x26
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	215a      	movs	r1, #90	; 0x5a
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f002 fabc 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004e40:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2326      	movs	r3, #38	; 0x26
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	215a      	movs	r1, #90	; 0x5a
 8004e54:	2000      	movs	r0, #0
 8004e56:	f002 faaf 	bl	80073b8 <ST7735_FillRectangleNSS>
			break;
 8004e5a:	e014      	b.n	8004e86 <GAME_PLAY_Phase_Management+0x2776>
			break;
 8004e5c:	bf00      	nop
 8004e5e:	f001 ba84 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e62:	bf00      	nop
 8004e64:	f001 ba81 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e68:	bf00      	nop
 8004e6a:	f001 ba7e 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e6e:	bf00      	nop
 8004e70:	f001 ba7b 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e74:	bf00      	nop
 8004e76:	f001 ba78 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e7a:	bf00      	nop
 8004e7c:	f001 ba75 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e80:	bf00      	nop
 8004e82:	f001 ba72 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
			break;
 8004e86:	bf00      	nop
		}
		break;
 8004e88:	f001 ba6f 	b.w	800636a <GAME_PLAY_Phase_Management+0x3c5a>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8004e8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e90:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004e94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e98:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e9c:	6811      	ldr	r1, [r2, #0]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	f7fc ff04 	bl	8001cac <LCDvalue>
			switch(PBS){
 8004ea4:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	f201 8260 	bhi.w	800636e <GAME_PLAY_Phase_Management+0x3c5e>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <GAME_PLAY_Phase_Management+0x27a4>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	0800634b 	.word	0x0800634b
 8004eb8:	08004ee9 	.word	0x08004ee9
 8004ebc:	08005619 	.word	0x08005619
 8004ec0:	080052e3 	.word	0x080052e3
 8004ec4:	0800594d 	.word	0x0800594d
 8004ec8:	08005c2d 	.word	0x08005c2d
 8004ecc:	08006171 	.word	0x08006171
 8004ed0:	2400000c 	.word	0x2400000c
 8004ed4:	08011558 	.word	0x08011558
 8004ed8:	080115b8 	.word	0x080115b8
 8004edc:	08011570 	.word	0x08011570
 8004ee0:	08011534 	.word	0x08011534
 8004ee4:	080115c8 	.word	0x080115c8
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004ee8:	4ba2      	ldr	r3, [pc, #648]	; (8005174 <GAME_PLAY_Phase_Management+0x2a64>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	9202      	str	r2, [sp, #8]
 8004eee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ef2:	9201      	str	r2, [sp, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	9200      	str	r2, [sp, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a9f      	ldr	r2, [pc, #636]	; (8005178 <GAME_PLAY_Phase_Management+0x2a68>)
 8004efc:	2123      	movs	r1, #35	; 0x23
 8004efe:	206e      	movs	r0, #110	; 0x6e
 8004f00:	f002 f87d 	bl	8006ffe <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004f04:	4b9b      	ldr	r3, [pc, #620]	; (8005174 <GAME_PLAY_Phase_Management+0x2a64>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	9202      	str	r2, [sp, #8]
 8004f0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f0e:	9201      	str	r2, [sp, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	9200      	str	r2, [sp, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a98      	ldr	r2, [pc, #608]	; (8005178 <GAME_PLAY_Phase_Management+0x2a68>)
 8004f18:	2123      	movs	r1, #35	; 0x23
 8004f1a:	206e      	movs	r0, #110	; 0x6e
 8004f1c:	f002 f8b9 	bl	8007092 <ST7735_WriteString1>
				if(state_game->action == 50){
 8004f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b32      	cmp	r3, #50	; 0x32
 8004f2e:	f040 809b 	bne.w	8005068 <GAME_PLAY_Phase_Management+0x2958>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8004f32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f36:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004f3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f3e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004f42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f46:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	6809      	ldr	r1, [r1, #0]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	f7fb fdd4 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8004f54:	2101      	movs	r1, #1
 8004f56:	4889      	ldr	r0, [pc, #548]	; (800517c <GAME_PLAY_Phase_Management+0x2a6c>)
 8004f58:	f006 f814 	bl	800af84 <HAL_GPIO_ReadPin>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f041 81f5 	bne.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004f64:	4886      	ldr	r0, [pc, #536]	; (8005180 <GAME_PLAY_Phase_Management+0x2a70>)
 8004f66:	f009 fa0b 	bl	800e380 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8004f6a:	4986      	ldr	r1, [pc, #536]	; (8005184 <GAME_PLAY_Phase_Management+0x2a74>)
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004f78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f7c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	2300      	movs	r3, #0
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	2326      	movs	r3, #38	; 0x26
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	215a      	movs	r1, #90	; 0x5a
 8004f90:	2000      	movs	r0, #0
 8004f92:	f002 fa11 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	4b79      	ldr	r3, [pc, #484]	; (8005188 <GAME_PLAY_Phase_Management+0x2a78>)
 8004fa4:	9203      	str	r2, [sp, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004fae:	9201      	str	r2, [sp, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	9200      	str	r2, [sp, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	; (800518c <GAME_PLAY_Phase_Management+0x2a7c>)
 8004fb8:	215a      	movs	r1, #90	; 0x5a
 8004fba:	200f      	movs	r0, #15
 8004fbc:	f002 f8b3 	bl	8007126 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004fc4:	f002 fe90 	bl	8007ce8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004fc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fcc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	2326      	movs	r3, #38	; 0x26
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	215a      	movs	r1, #90	; 0x5a
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f002 f9e9 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004fe6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2326      	movs	r3, #38	; 0x26
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	215a      	movs	r1, #90	; 0x5a
 8004ffe:	2000      	movs	r0, #0
 8005000:	f002 f9da 	bl	80073b8 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8005004:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005008:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8005012:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005016:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	f7fc fd44 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8005020:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005024:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800502e:	2b02      	cmp	r3, #2
 8005030:	d108      	bne.n	8005044 <GAME_PLAY_Phase_Management+0x2934>
							state_game->MainGame_State = second_player;
 8005032:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005036:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005042:	e007      	b.n	8005054 <GAME_PLAY_Phase_Management+0x2944>
						}
						else{
							state_game->MainGame_State = first_player;
 8005044:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005048:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8005054:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005058:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8005064:	f001 b973 	b.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
				else if(state_game->action == 51){
 8005068:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800506c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b33      	cmp	r3, #51	; 0x33
 8005076:	f041 816a 	bne.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800507a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800507e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	2300      	movs	r3, #0
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2326      	movs	r3, #38	; 0x26
 800508e:	2280      	movs	r2, #128	; 0x80
 8005090:	215a      	movs	r1, #90	; 0x5a
 8005092:	2000      	movs	r0, #0
 8005094:	f002 f990 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005098:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800509c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2326      	movs	r3, #38	; 0x26
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	215a      	movs	r1, #90	; 0x5a
 80050b0:	2000      	movs	r0, #0
 80050b2:	f002 f981 	bl	80073b8 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80050bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050c0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80050ca:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 80050ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80050d2:	799b      	ldrb	r3, [r3, #6]
 80050d4:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 80050d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3338      	adds	r3, #56	; 0x38
 80050e4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 80050ee:	e013      	b.n	8005118 <GAME_PLAY_Phase_Management+0x2a08>
						if(ptrYugiohCard_dst->cardData == 0){
 80050f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <GAME_PLAY_Phase_Management+0x29f4>
							check_def_mon++;
 80050fa:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80050fe:	3301      	adds	r3, #1
 8005100:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8005104:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005108:	3310      	adds	r3, #16
 800510a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 800510e:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8005112:	3301      	adds	r3, #1
 8005114:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8005118:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 800511c:	2b02      	cmp	r3, #2
 800511e:	d9e7      	bls.n	80050f0 <GAME_PLAY_Phase_Management+0x29e0>
					uint8_t flag_can_atk = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8005126:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800512a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005134:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8005138:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800513c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3338      	adds	r3, #56	; 0x38
 8005144:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8005148:	2300      	movs	r3, #0
 800514a:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 800514e:	e02c      	b.n	80051aa <GAME_PLAY_Phase_Management+0x2a9a>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8005150:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d11a      	bne.n	8005196 <GAME_PLAY_Phase_Management+0x2a86>
							if(ptrYugiohCard_dst->cardState == 1){
 8005160:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005164:	789b      	ldrb	r3, [r3, #2]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d112      	bne.n	8005190 <GAME_PLAY_Phase_Management+0x2a80>
								flag_can_atk = 2;
 800516a:	2302      	movs	r3, #2
 800516c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8005170:	e01f      	b.n	80051b2 <GAME_PLAY_Phase_Management+0x2aa2>
 8005172:	bf00      	nop
 8005174:	2400000c 	.word	0x2400000c
 8005178:	080115d8 	.word	0x080115d8
 800517c:	58020800 	.word	0x58020800
 8005180:	240002e8 	.word	0x240002e8
 8005184:	24000ea0 	.word	0x24000ea0
 8005188:	24000014 	.word	0x24000014
 800518c:	080113e4 	.word	0x080113e4
								flag_can_atk = 1;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 8005196:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800519a:	3310      	adds	r3, #16
 800519c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 80051a0:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 80051a4:	3301      	adds	r3, #1
 80051a6:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 80051aa:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d9ce      	bls.n	8005150 <GAME_PLAY_Phase_Management+0x2a40>
					if (check_def_mon < 3)
 80051b2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d810      	bhi.n	80051dc <GAME_PLAY_Phase_Management+0x2acc>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 80051ba:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 80051be:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80051c2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	4413      	add	r3, r2
 80051ce:	3304      	adds	r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <GAME_PLAY_Phase_Management+0x2acc>
							flag_can_atk = 1;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 80051dc:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d165      	bne.n	80052b0 <GAME_PLAY_Phase_Management+0x2ba0>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 80051e4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051e8:	7a1b      	ldrb	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d047      	beq.n	800527e <GAME_PLAY_Phase_Management+0x2b6e>
 80051ee:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d142      	bne.n	800527e <GAME_PLAY_Phase_Management+0x2b6e>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 80051f8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80051fc:	7a1b      	ldrb	r3, [r3, #8]
 80051fe:	3b01      	subs	r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005206:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8005208:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800520c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005216:	4619      	mov	r1, r3
 8005218:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800521c:	f7fb fa32 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8005220:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005224:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800522e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8005232:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8005236:	2b03      	cmp	r3, #3
 8005238:	d104      	bne.n	8005244 <GAME_PLAY_Phase_Management+0x2b34>
								ptrYugiohCard_dst->targetPosition = 99;
 800523a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800523e:	2263      	movs	r2, #99	; 0x63
 8005240:	71da      	strb	r2, [r3, #7]
 8005242:	e004      	b.n	800524e <GAME_PLAY_Phase_Management+0x2b3e>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8005244:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005248:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 800524c:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 800524e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005252:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	f7fc f8ec 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 800525c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005260:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2234      	movs	r2, #52	; 0x34
 8005268:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 800526a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800526e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2203      	movs	r2, #3
 8005276:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800527a:	f001 b868 	b.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
							state_game->test = 222;
 800527e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005282:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	22de      	movs	r2, #222	; 0xde
 800528a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 800528e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005292:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2232      	movs	r2, #50	; 0x32
 800529a:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800529c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80052ac:	f001 b84f 	b.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
						state_game->test = 223;
 80052b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	22df      	movs	r2, #223	; 0xdf
 80052bc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 80052c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2232      	movs	r2, #50	; 0x32
 80052cc:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80052ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80052de:	f001 b836 	b.w	800634e <GAME_PLAY_Phase_Management+0x3c3e>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80052e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	4bc5      	ldr	r3, [pc, #788]	; (8005604 <GAME_PLAY_Phase_Management+0x2ef4>)
 80052f0:	9203      	str	r2, [sp, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	9202      	str	r2, [sp, #8]
 80052f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052fa:	9201      	str	r2, [sp, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	9200      	str	r2, [sp, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4ac1      	ldr	r2, [pc, #772]	; (8005608 <GAME_PLAY_Phase_Management+0x2ef8>)
 8005304:	215a      	movs	r1, #90	; 0x5a
 8005306:	2005      	movs	r0, #5
 8005308:	f001 ff0d 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800530c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005310:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	4bba      	ldr	r3, [pc, #744]	; (8005604 <GAME_PLAY_Phase_Management+0x2ef4>)
 800531a:	9203      	str	r2, [sp, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	9202      	str	r2, [sp, #8]
 8005320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005324:	9201      	str	r2, [sp, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	9200      	str	r2, [sp, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4ab7      	ldr	r2, [pc, #732]	; (800560c <GAME_PLAY_Phase_Management+0x2efc>)
 800532e:	2169      	movs	r1, #105	; 0x69
 8005330:	2005      	movs	r0, #5
 8005332:	f001 fef8 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005336:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800533a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	4bb0      	ldr	r3, [pc, #704]	; (8005604 <GAME_PLAY_Phase_Management+0x2ef4>)
 8005344:	9203      	str	r2, [sp, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	9202      	str	r2, [sp, #8]
 800534a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	9200      	str	r2, [sp, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4aae      	ldr	r2, [pc, #696]	; (8005610 <GAME_PLAY_Phase_Management+0x2f00>)
 8005358:	215a      	movs	r1, #90	; 0x5a
 800535a:	2005      	movs	r0, #5
 800535c:	f001 fee3 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005360:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005364:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	4ba5      	ldr	r3, [pc, #660]	; (8005604 <GAME_PLAY_Phase_Management+0x2ef4>)
 800536e:	9203      	str	r2, [sp, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	9202      	str	r2, [sp, #8]
 8005374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005378:	9201      	str	r2, [sp, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	9200      	str	r2, [sp, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4aa4      	ldr	r2, [pc, #656]	; (8005614 <GAME_PLAY_Phase_Management+0x2f04>)
 8005382:	2169      	movs	r1, #105	; 0x69
 8005384:	2005      	movs	r0, #5
 8005386:	f001 fece 	bl	8007126 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 800538a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800538e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b34      	cmp	r3, #52	; 0x34
 8005398:	d141      	bne.n	800541e <GAME_PLAY_Phase_Management+0x2d0e>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800539a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800539e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d115      	bne.n	80053d6 <GAME_PLAY_Phase_Management+0x2cc6>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80053aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2204      	movs	r2, #4
 80053b6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 80053ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2236      	movs	r2, #54	; 0x36
 80053c6:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 80053c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 80053d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053da:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80053de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053e2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80053e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	6809      	ldr	r1, [r1, #0]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	f7fb fc2a 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80053f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053fc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005400:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005404:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8005408:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800540c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6809      	ldr	r1, [r1, #0]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	f7fb ff1b 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 800541a:	f000 bf9a 	b.w	8006352 <GAME_PLAY_Phase_Management+0x3c42>
				else if ((state_game->action == 53 ))
 800541e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005422:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b35      	cmp	r3, #53	; 0x35
 800542c:	f040 8791 	bne.w	8006352 <GAME_PLAY_Phase_Management+0x3c42>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005430:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005434:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2326      	movs	r3, #38	; 0x26
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	215a      	movs	r1, #90	; 0x5a
 8005448:	2000      	movs	r0, #0
 800544a:	f001 ffb5 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800544e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005452:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2326      	movs	r3, #38	; 0x26
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	215a      	movs	r1, #90	; 0x5a
 8005466:	2000      	movs	r0, #0
 8005468:	f001 ffa6 	bl	80073b8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800546c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005470:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800547a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 800547e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005482:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005486:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f7fc fab4 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 8005496:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d14f      	bne.n	8005540 <GAME_PLAY_Phase_Management+0x2e30>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80054a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f7fc f86e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80054ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80054b2:	2200      	movs	r2, #0
 80054b4:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80054b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80054c4:	4619      	mov	r1, r3
 80054c6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80054ca:	f7fb f8db 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 80054ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80054dc:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 80054e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80054f4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80054fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005502:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800550c:	3301      	adds	r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005514:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 800551e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005522:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800552e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005532:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2234      	movs	r2, #52	; 0x34
 800553a:	701a      	strb	r2, [r3, #0]
				break;
 800553c:	f000 bf09 	b.w	8006352 <GAME_PLAY_Phase_Management+0x3c42>
						if (idx != 255)
 8005540:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005544:	2bff      	cmp	r3, #255	; 0xff
 8005546:	f000 8704 	beq.w	8006352 <GAME_PLAY_Phase_Management+0x3c42>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 800554a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800554e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	f7fc f819 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8005558:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800555c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005560:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	3308      	adds	r3, #8
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	4413      	add	r3, r2
 800556c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005570:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005574:	2200      	movs	r2, #0
 8005576:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8005578:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800557c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005586:	4619      	mov	r1, r3
 8005588:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800558c:	f7fb f87a 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8005590:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005594:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800559e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80055a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80055b6:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80055c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80055ce:	3301      	adds	r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80055e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80055f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2234      	movs	r2, #52	; 0x34
 80055fc:	701a      	strb	r2, [r3, #0]
				break;
 80055fe:	f000 bea8 	b.w	8006352 <GAME_PLAY_Phase_Management+0x3c42>
 8005602:	bf00      	nop
 8005604:	2400000c 	.word	0x2400000c
 8005608:	080115dc 	.word	0x080115dc
 800560c:	080115ec 	.word	0x080115ec
 8005610:	080115f8 	.word	0x080115f8
 8005614:	08011608 	.word	0x08011608
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005618:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800561c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	4bc4      	ldr	r3, [pc, #784]	; (8005938 <GAME_PLAY_Phase_Management+0x3228>)
 8005626:	9203      	str	r2, [sp, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	9202      	str	r2, [sp, #8]
 800562c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005630:	9201      	str	r2, [sp, #4]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	9200      	str	r2, [sp, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4ac0      	ldr	r2, [pc, #768]	; (800593c <GAME_PLAY_Phase_Management+0x322c>)
 800563a:	215a      	movs	r1, #90	; 0x5a
 800563c:	2005      	movs	r0, #5
 800563e:	f001 fd72 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005642:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005646:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	4bba      	ldr	r3, [pc, #744]	; (8005938 <GAME_PLAY_Phase_Management+0x3228>)
 8005650:	9203      	str	r2, [sp, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565a:	9201      	str	r2, [sp, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	9200      	str	r2, [sp, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4ab7      	ldr	r2, [pc, #732]	; (8005940 <GAME_PLAY_Phase_Management+0x3230>)
 8005664:	2169      	movs	r1, #105	; 0x69
 8005666:	2005      	movs	r0, #5
 8005668:	f001 fd5d 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800566c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005670:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	4baf      	ldr	r3, [pc, #700]	; (8005938 <GAME_PLAY_Phase_Management+0x3228>)
 800567a:	9203      	str	r2, [sp, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	9202      	str	r2, [sp, #8]
 8005680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005684:	9201      	str	r2, [sp, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	9200      	str	r2, [sp, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4aad      	ldr	r2, [pc, #692]	; (8005944 <GAME_PLAY_Phase_Management+0x3234>)
 800568e:	215a      	movs	r1, #90	; 0x5a
 8005690:	2005      	movs	r0, #5
 8005692:	f001 fd48 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005696:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800569a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	4ba5      	ldr	r3, [pc, #660]	; (8005938 <GAME_PLAY_Phase_Management+0x3228>)
 80056a4:	9203      	str	r2, [sp, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	9202      	str	r2, [sp, #8]
 80056aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ae:	9201      	str	r2, [sp, #4]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	9200      	str	r2, [sp, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4aa4      	ldr	r2, [pc, #656]	; (8005948 <GAME_PLAY_Phase_Management+0x3238>)
 80056b8:	2169      	movs	r1, #105	; 0x69
 80056ba:	2005      	movs	r0, #5
 80056bc:	f001 fd33 	bl	8007126 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80056c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b34      	cmp	r3, #52	; 0x34
 80056ce:	d141      	bne.n	8005754 <GAME_PLAY_Phase_Management+0x3044>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80056d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d115      	bne.n	800570c <GAME_PLAY_Phase_Management+0x2ffc>
						//affect
						state_game->action = 54;
 80056e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2236      	movs	r2, #54	; 0x36
 80056ec:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80056ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80056fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005702:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2200      	movs	r2, #0
 800570a:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800570c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005710:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005714:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005718:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800571c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005720:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	6809      	ldr	r1, [r1, #0]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f7fb fa8f 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800572e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005732:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005736:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800573a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800573e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005742:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	6809      	ldr	r1, [r1, #0]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	f7fb fd80 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 8005750:	f000 be01 	b.w	8006356 <GAME_PLAY_Phase_Management+0x3c46>
				else if ((state_game->action == 53 )){
 8005754:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005758:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b35      	cmp	r3, #53	; 0x35
 8005762:	f040 85f8 	bne.w	8006356 <GAME_PLAY_Phase_Management+0x3c46>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005766:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800576a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2300      	movs	r3, #0
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2326      	movs	r3, #38	; 0x26
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	215a      	movs	r1, #90	; 0x5a
 800577e:	2000      	movs	r0, #0
 8005780:	f001 fe1a 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005784:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005788:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	2300      	movs	r3, #0
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2326      	movs	r3, #38	; 0x26
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	215a      	movs	r1, #90	; 0x5a
 800579c:	2000      	movs	r0, #0
 800579e:	f001 fe0b 	bl	80073b8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80057a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80057b0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 80057b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057b8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80057bc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	f7fc f919 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 80057cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d14f      	bne.n	8005876 <GAME_PLAY_Phase_Management+0x3166>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80057d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	f7fb fed3 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80057e4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80057e8:	2200      	movs	r2, #0
 80057ea:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80057ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80057fa:	4619      	mov	r1, r3
 80057fc:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005800:	f7fa ff40 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8005804:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005808:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005812:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800581c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005820:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800582a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8005834:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005838:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005842:	3301      	adds	r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800584a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 8005854:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005858:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2203      	movs	r2, #3
 8005860:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8005864:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005868:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2234      	movs	r2, #52	; 0x34
 8005870:	701a      	strb	r2, [r3, #0]
				break;
 8005872:	f000 bd70 	b.w	8006356 <GAME_PLAY_Phase_Management+0x3c46>
						if (idx != 255)
 8005876:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800587a:	2bff      	cmp	r3, #255	; 0xff
 800587c:	f000 856b 	beq.w	8006356 <GAME_PLAY_Phase_Management+0x3c46>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8005880:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005884:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	f7fb fe7e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800588e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8005892:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005896:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	3308      	adds	r3, #8
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	4413      	add	r3, r2
 80058a2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80058a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80058aa:	2200      	movs	r2, #0
 80058ac:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80058ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80058bc:	4619      	mov	r1, r3
 80058be:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80058c2:	f7fa fedf 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80058c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80058d4:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80058de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80058ec:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80058f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005904:	3301      	adds	r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800590c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005916:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800591a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8005926:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800592a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2234      	movs	r2, #52	; 0x34
 8005932:	701a      	strb	r2, [r3, #0]
				break;
 8005934:	f000 bd0f 	b.w	8006356 <GAME_PLAY_Phase_Management+0x3c46>
 8005938:	2400000c 	.word	0x2400000c
 800593c:	080115f8 	.word	0x080115f8
 8005940:	08011614 	.word	0x08011614
 8005944:	0801161c 	.word	0x0801161c
 8005948:	0801162c 	.word	0x0801162c
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800594c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005950:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	4bb2      	ldr	r3, [pc, #712]	; (8005c24 <GAME_PLAY_Phase_Management+0x3514>)
 800595a:	9203      	str	r2, [sp, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	9202      	str	r2, [sp, #8]
 8005960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005964:	9201      	str	r2, [sp, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	9200      	str	r2, [sp, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4aae      	ldr	r2, [pc, #696]	; (8005c28 <GAME_PLAY_Phase_Management+0x3518>)
 800596e:	215a      	movs	r1, #90	; 0x5a
 8005970:	2005      	movs	r0, #5
 8005972:	f001 fbd8 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005976:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800597a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	4ba8      	ldr	r3, [pc, #672]	; (8005c24 <GAME_PLAY_Phase_Management+0x3514>)
 8005984:	9203      	str	r2, [sp, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	9202      	str	r2, [sp, #8]
 800598a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598e:	9201      	str	r2, [sp, #4]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	9200      	str	r2, [sp, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4aa4      	ldr	r2, [pc, #656]	; (8005c28 <GAME_PLAY_Phase_Management+0x3518>)
 8005998:	215a      	movs	r1, #90	; 0x5a
 800599a:	2005      	movs	r0, #5
 800599c:	f001 fbc3 	bl	8007126 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 80059a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	4619      	mov	r1, r3
 80059ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059b2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80059b6:	f501 7394 	add.w	r3, r1, #296	; 0x128
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80059c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	4619      	mov	r1, r3
 80059d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059d8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80059dc:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	3304      	adds	r3, #4
 80059e8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 80059ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b36      	cmp	r3, #54	; 0x36
 80059fa:	f040 84ae 	bne.w	800635a <GAME_PLAY_Phase_Management+0x3c4a>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 80059fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	785a      	ldrb	r2, [r3, #1]
 8005a0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	f080 80a3 	bcs.w	8005b64 <GAME_PLAY_Phase_Management+0x3454>
					{
						state_game->test = 165;
 8005a1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	22a5      	movs	r2, #165	; 0xa5
 8005a2a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8005a2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a40:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005a44:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8005a54:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d11d      	bne.n	8005a9a <GAME_PLAY_Phase_Management+0x338a>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 8005a5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2262      	movs	r2, #98	; 0x62
 8005a66:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005a6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fb ff8f 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							//							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
							state_game->count_chain++;
 8005a7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	3301      	adds	r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8005a96:	f000 bc60 	b.w	800635a <GAME_PLAY_Phase_Management+0x3c4a>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8005a9a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b0e      	cmp	r3, #14
 8005aa2:	d004      	beq.n	8005aae <GAME_PLAY_Phase_Management+0x339e>
 8005aa4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d129      	bne.n	8005b02 <GAME_PLAY_Phase_Management+0x33f2>
							state_game->test = 133;
 8005aae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ab2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2285      	movs	r2, #133	; 0x85
 8005aba:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8005abe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fb fedd 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005ad2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fb ff5b 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							state_game->count_chain++;
 8005ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ae6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	3301      	adds	r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005af6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	705a      	strb	r2, [r3, #1]
				break;
 8005afe:	f000 bc2c 	b.w	800635a <GAME_PLAY_Phase_Management+0x3c4a>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8005b02:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b14      	cmp	r3, #20
 8005b0a:	f040 8426 	bne.w	800635a <GAME_PLAY_Phase_Management+0x3c4a>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005b0e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fb ff3d 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							if(state_game->MainGame_State == first_player){
 8005b1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d108      	bne.n	8005b42 <GAME_PLAY_Phase_Management+0x3432>
								state_game->MainGame_State = second_player;
 8005b30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005b40:	e007      	b.n	8005b52 <GAME_PLAY_Phase_Management+0x3442>
								state_game->MainGame_State = first_player;
 8005b42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8005b52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8005b62:	e3fa      	b.n	800635a <GAME_PLAY_Phase_Management+0x3c4a>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005b64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b68:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2326      	movs	r3, #38	; 0x26
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	215a      	movs	r1, #90	; 0x5a
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f001 fc1b 	bl	80073b8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005b82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b86:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2326      	movs	r3, #38	; 0x26
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	215a      	movs	r1, #90	; 0x5a
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f001 fc0c 	bl	80073b8 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005ba6:	e020      	b.n	8005bea <GAME_PLAY_Phase_Management+0x34da>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8005ba8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005bb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f107 0210 	add.w	r2, r7, #16
 8005bc2:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8005bc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005bd2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	f107 0210 	add.w	r2, r7, #16
 8005bde:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005be0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005be4:	3301      	adds	r3, #1
 8005be6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005bea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	ddda      	ble.n	8005ba8 <GAME_PLAY_Phase_Management+0x3498>
						state_game->ChainCount = 0;
 8005bf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bf6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8005c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2232      	movs	r2, #50	; 0x32
 8005c0e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8005c10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c14:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005c20:	e39b      	b.n	800635a <GAME_PLAY_Phase_Management+0x3c4a>
 8005c22:	bf00      	nop
 8005c24:	2400000c 	.word	0x2400000c
 8005c28:	0801163c 	.word	0x0801163c
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8005c2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c3a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8005c3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005c42:	791b      	ldrb	r3, [r3, #4]
 8005c44:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8005c48:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005c4c:	79db      	ldrb	r3, [r3, #7]
 8005c4e:	2b63      	cmp	r3, #99	; 0x63
 8005c50:	d122      	bne.n	8005c98 <GAME_PLAY_Phase_Management+0x3588>
				{
					playerDef->life_point -= atk*100;
 8005c52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c56:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	889a      	ldrh	r2, [r3, #4]
 8005c5e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	0249      	lsls	r1, r1, #9
 8005c68:	1ac9      	subs	r1, r1, r3
 8005c6a:	0089      	lsls	r1, r1, #2
 8005c6c:	4419      	add	r1, r3
 8005c6e:	00c9      	lsls	r1, r1, #3
 8005c70:	1acb      	subs	r3, r1, r3
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005c86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2206      	movs	r2, #6
 8005c92:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->PlyerAction_Battle_Substate = after_calculate;
						}

					}
				}
				break;
 8005c96:	e362      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8005c98:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005c9c:	79db      	ldrb	r3, [r3, #7]
 8005c9e:	2b62      	cmp	r3, #98	; 0x62
 8005ca0:	d108      	bne.n	8005cb4 <GAME_PLAY_Phase_Management+0x35a4>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005ca2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ca6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2206      	movs	r2, #6
 8005cae:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005cb2:	e354      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8005cb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cb8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8005cc4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005cc8:	79db      	ldrb	r3, [r3, #7]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cd0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005cd4:	010b      	lsls	r3, r1, #4
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8005ce0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ce4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2236      	movs	r2, #54	; 0x36
 8005cec:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8005cf0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005cf4:	789b      	ldrb	r3, [r3, #2]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8100 	bne.w	8005efc <GAME_PLAY_Phase_Management+0x37ec>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005cfc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	4b77      	ldr	r3, [pc, #476]	; (8005ee8 <GAME_PLAY_Phase_Management+0x37d8>)
 8005d0a:	9203      	str	r2, [sp, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	9202      	str	r2, [sp, #8]
 8005d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d14:	9201      	str	r2, [sp, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	9200      	str	r2, [sp, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a73      	ldr	r2, [pc, #460]	; (8005eec <GAME_PLAY_Phase_Management+0x37dc>)
 8005d1e:	215a      	movs	r1, #90	; 0x5a
 8005d20:	2005      	movs	r0, #5
 8005d22:	f001 fa00 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <GAME_PLAY_Phase_Management+0x37d8>)
 8005d34:	9203      	str	r2, [sp, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	9202      	str	r2, [sp, #8]
 8005d3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005d3e:	9201      	str	r2, [sp, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	9200      	str	r2, [sp, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6a      	ldr	r2, [pc, #424]	; (8005ef0 <GAME_PLAY_Phase_Management+0x37e0>)
 8005d48:	2169      	movs	r1, #105	; 0x69
 8005d4a:	2005      	movs	r0, #5
 8005d4c:	f001 f9eb 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005d50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d54:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	4b62      	ldr	r3, [pc, #392]	; (8005ee8 <GAME_PLAY_Phase_Management+0x37d8>)
 8005d5e:	9203      	str	r2, [sp, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	9202      	str	r2, [sp, #8]
 8005d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	9200      	str	r2, [sp, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a60      	ldr	r2, [pc, #384]	; (8005ef4 <GAME_PLAY_Phase_Management+0x37e4>)
 8005d72:	215a      	movs	r1, #90	; 0x5a
 8005d74:	2005      	movs	r0, #5
 8005d76:	f001 f9d6 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	4b58      	ldr	r3, [pc, #352]	; (8005ee8 <GAME_PLAY_Phase_Management+0x37d8>)
 8005d88:	9203      	str	r2, [sp, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	9202      	str	r2, [sp, #8]
 8005d8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005d92:	9201      	str	r2, [sp, #4]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	9200      	str	r2, [sp, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a57      	ldr	r2, [pc, #348]	; (8005ef8 <GAME_PLAY_Phase_Management+0x37e8>)
 8005d9c:	2169      	movs	r1, #105	; 0x69
 8005d9e:	2005      	movs	r0, #5
 8005da0:	f001 f9c1 	bl	8007126 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8005da4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005da8:	795b      	ldrb	r3, [r3, #5]
 8005daa:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8005dae:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005db2:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d25e      	bcs.n	8005e78 <GAME_PLAY_Phase_Management+0x3768>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005dba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2326      	movs	r3, #38	; 0x26
 8005dce:	2280      	movs	r2, #128	; 0x80
 8005dd0:	215a      	movs	r1, #90	; 0x5a
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f001 faf0 	bl	80073b8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ddc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2326      	movs	r3, #38	; 0x26
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	215a      	movs	r1, #90	; 0x5a
 8005df0:	2000      	movs	r0, #0
 8005df2:	f001 fae1 	bl	80073b8 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8005df6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dfa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	889a      	ldrh	r2, [r3, #4]
 8005e02:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8005e06:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	0249      	lsls	r1, r1, #9
 8005e12:	1ac9      	subs	r1, r1, r3
 8005e14:	0089      	lsls	r1, r1, #2
 8005e16:	4419      	add	r1, r3
 8005e18:	00c9      	lsls	r1, r1, #3
 8005e1a:	1acb      	subs	r3, r1, r3
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005e30:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005e34:	799b      	ldrb	r3, [r3, #6]
 8005e36:	4619      	mov	r1, r3
 8005e38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e3c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005e40:	010b      	lsls	r3, r1, #4
 8005e42:	3308      	adds	r3, #8
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	441a      	add	r2, r3
 8005e48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e4c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e50:	4611      	mov	r1, r2
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	f7fb fbe5 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005e58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f7fb fae7 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005e66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2206      	movs	r2, #6
 8005e72:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005e76:	e272      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
						else if(atk > def){
 8005e78:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005e7c:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005e80:	429a      	cmp	r2, r3
 8005e82:	f240 826c 	bls.w	800635e <GAME_PLAY_Phase_Management+0x3c4e>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005e86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	2300      	movs	r3, #0
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2326      	movs	r3, #38	; 0x26
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	215a      	movs	r1, #90	; 0x5a
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f001 fa8a 	bl	80073b8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005ea4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ea8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2326      	movs	r3, #38	; 0x26
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	215a      	movs	r1, #90	; 0x5a
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f001 fa7b 	bl	80073b8 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005ec2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ec6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005eca:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	f7fb fba7 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005ed4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ed8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2206      	movs	r2, #6
 8005ee0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005ee4:	e23b      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
 8005ee6:	bf00      	nop
 8005ee8:	2400000c 	.word	0x2400000c
 8005eec:	0801164c 	.word	0x0801164c
 8005ef0:	0801165c 	.word	0x0801165c
 8005ef4:	0801166c 	.word	0x0801166c
 8005ef8:	0801167c 	.word	0x0801167c
					else if(ptrYugiohCard_dst->cardState == 1){
 8005efc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 822b 	bne.w	800635e <GAME_PLAY_Phase_Management+0x3c4e>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005f08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	4b91      	ldr	r3, [pc, #580]	; (800615c <GAME_PLAY_Phase_Management+0x3a4c>)
 8005f16:	9203      	str	r2, [sp, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	9202      	str	r2, [sp, #8]
 8005f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f20:	9201      	str	r2, [sp, #4]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	9200      	str	r2, [sp, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a8d      	ldr	r2, [pc, #564]	; (8006160 <GAME_PLAY_Phase_Management+0x3a50>)
 8005f2a:	215a      	movs	r1, #90	; 0x5a
 8005f2c:	2005      	movs	r0, #5
 8005f2e:	f001 f8fa 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005f32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	4b87      	ldr	r3, [pc, #540]	; (800615c <GAME_PLAY_Phase_Management+0x3a4c>)
 8005f40:	9203      	str	r2, [sp, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	9202      	str	r2, [sp, #8]
 8005f46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f4a:	9201      	str	r2, [sp, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	9200      	str	r2, [sp, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a84      	ldr	r2, [pc, #528]	; (8006164 <GAME_PLAY_Phase_Management+0x3a54>)
 8005f54:	2169      	movs	r1, #105	; 0x69
 8005f56:	2005      	movs	r0, #5
 8005f58:	f001 f8e5 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005f5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f60:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	4b7c      	ldr	r3, [pc, #496]	; (800615c <GAME_PLAY_Phase_Management+0x3a4c>)
 8005f6a:	9203      	str	r2, [sp, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	9202      	str	r2, [sp, #8]
 8005f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f74:	9201      	str	r2, [sp, #4]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	9200      	str	r2, [sp, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a7a      	ldr	r2, [pc, #488]	; (8006168 <GAME_PLAY_Phase_Management+0x3a58>)
 8005f7e:	215a      	movs	r1, #90	; 0x5a
 8005f80:	2005      	movs	r0, #5
 8005f82:	f001 f8d0 	bl	8007126 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005f86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	4b72      	ldr	r3, [pc, #456]	; (800615c <GAME_PLAY_Phase_Management+0x3a4c>)
 8005f94:	9203      	str	r2, [sp, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	9202      	str	r2, [sp, #8]
 8005f9a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	9200      	str	r2, [sp, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a71      	ldr	r2, [pc, #452]	; (800616c <GAME_PLAY_Phase_Management+0x3a5c>)
 8005fa8:	2169      	movs	r1, #105	; 0x69
 8005faa:	2005      	movs	r0, #5
 8005fac:	f001 f8bb 	bl	8007126 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8005fb0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005fb4:	791b      	ldrb	r3, [r3, #4]
 8005fb6:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8005fba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	223c      	movs	r2, #60	; 0x3c
 8005fc6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8005fca:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005fce:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d266      	bcs.n	80060a4 <GAME_PLAY_Phase_Management+0x3994>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005fd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fda:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2326      	movs	r3, #38	; 0x26
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	215a      	movs	r1, #90	; 0x5a
 8005fee:	2000      	movs	r0, #0
 8005ff0:	f001 f9e2 	bl	80073b8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005ff4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ff8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	2300      	movs	r3, #0
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2326      	movs	r3, #38	; 0x26
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	215a      	movs	r1, #90	; 0x5a
 800600c:	2000      	movs	r0, #0
 800600e:	f001 f9d3 	bl	80073b8 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8006012:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006016:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	223d      	movs	r2, #61	; 0x3d
 800601e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8006022:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006026:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	889a      	ldrh	r2, [r3, #4]
 800602e:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8006032:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8006036:	1acb      	subs	r3, r1, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	0249      	lsls	r1, r1, #9
 800603e:	1ac9      	subs	r1, r1, r3
 8006040:	0089      	lsls	r1, r1, #2
 8006042:	4419      	add	r1, r3
 8006044:	00c9      	lsls	r1, r1, #3
 8006046:	1acb      	subs	r3, r1, r3
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	b29b      	uxth	r3, r3
 800604c:	4413      	add	r3, r2
 800604e:	b29a      	uxth	r2, r3
 8006050:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006054:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 800605c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006060:	799b      	ldrb	r3, [r3, #6]
 8006062:	4619      	mov	r1, r3
 8006064:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006068:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800606c:	010b      	lsls	r3, r1, #4
 800606e:	3308      	adds	r3, #8
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	441a      	add	r2, r3
 8006074:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006078:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800607c:	4611      	mov	r1, r2
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	f7fb facf 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8006084:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006088:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f7fb f9d1 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8006092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006096:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2206      	movs	r2, #6
 800609e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80060a2:	e15c      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
						else if(atk > atk2){
 80060a4:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 80060a8:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f240 8156 	bls.w	800635e <GAME_PLAY_Phase_Management+0x3c4e>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80060b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	2300      	movs	r3, #0
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2326      	movs	r3, #38	; 0x26
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	215a      	movs	r1, #90	; 0x5a
 80060ca:	2000      	movs	r0, #0
 80060cc:	f001 f974 	bl	80073b8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80060d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	2300      	movs	r3, #0
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	2326      	movs	r3, #38	; 0x26
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	215a      	movs	r1, #90	; 0x5a
 80060e8:	2000      	movs	r0, #0
 80060ea:	f001 f965 	bl	80073b8 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 80060ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2246      	movs	r2, #70	; 0x46
 80060fa:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 80060fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006102:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	889a      	ldrh	r2, [r3, #4]
 800610a:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 800610e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8006112:	1acb      	subs	r3, r1, r3
 8006114:	b29b      	uxth	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	0249      	lsls	r1, r1, #9
 800611a:	1ac9      	subs	r1, r1, r3
 800611c:	0089      	lsls	r1, r1, #2
 800611e:	4419      	add	r1, r3
 8006120:	00c9      	lsls	r1, r1, #3
 8006122:	1acb      	subs	r3, r1, r3
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	b29b      	uxth	r3, r3
 8006128:	4413      	add	r3, r2
 800612a:	b29a      	uxth	r2, r3
 800612c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006130:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8006138:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800613c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006140:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f7fb fa6c 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 800614a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800614e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2206      	movs	r2, #6
 8006156:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800615a:	e100      	b.n	800635e <GAME_PLAY_Phase_Management+0x3c4e>
 800615c:	2400000c 	.word	0x2400000c
 8006160:	0801164c 	.word	0x0801164c
 8006164:	08011690 	.word	0x08011690
 8006168:	0801166c 	.word	0x0801166c
 800616c:	080116a0 	.word	0x080116a0
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8006170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006174:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	4b7f      	ldr	r3, [pc, #508]	; (800637c <GAME_PLAY_Phase_Management+0x3c6c>)
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006188:	9201      	str	r2, [sp, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	9200      	str	r2, [sp, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7b      	ldr	r2, [pc, #492]	; (8006380 <GAME_PLAY_Phase_Management+0x3c70>)
 8006192:	215a      	movs	r1, #90	; 0x5a
 8006194:	2005      	movs	r0, #5
 8006196:	f000 ffc6 	bl	8007126 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800619a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800619e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	4b75      	ldr	r3, [pc, #468]	; (800637c <GAME_PLAY_Phase_Management+0x3c6c>)
 80061a8:	9203      	str	r2, [sp, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	9200      	str	r2, [sp, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a72      	ldr	r2, [pc, #456]	; (8006384 <GAME_PLAY_Phase_Management+0x3c74>)
 80061bc:	215a      	movs	r1, #90	; 0x5a
 80061be:	2005      	movs	r0, #5
 80061c0:	f000 ffb1 	bl	8007126 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80061c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80061d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 80061d6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80061da:	f7fa fa8a 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 80061de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061e2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	889b      	ldrh	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <GAME_PLAY_Phase_Management+0x3af2>
 80061ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061f2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	889b      	ldrh	r3, [r3, #4]
 80061fa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80061fe:	4293      	cmp	r3, r2
 8006200:	d94b      	bls.n	800629a <GAME_PLAY_Phase_Management+0x3b8a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	2300      	movs	r3, #0
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2326      	movs	r3, #38	; 0x26
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	215a      	movs	r1, #90	; 0x5a
 8006210:	2000      	movs	r0, #0
 8006212:	f001 f8d1 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8006216:	2300      	movs	r3, #0
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2326      	movs	r3, #38	; 0x26
 8006220:	2280      	movs	r2, #128	; 0x80
 8006222:	215a      	movs	r1, #90	; 0x5a
 8006224:	2000      	movs	r0, #0
 8006226:	f001 f8c7 	bl	80073b8 <ST7735_FillRectangleNSS>
					HAL_Delay(200);
 800622a:	20c8      	movs	r0, #200	; 0xc8
 800622c:	f001 fd5c 	bl	8007ce8 <HAL_Delay>
					ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,playerAtk->displayNSS);
 8006230:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006234:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	4b52      	ldr	r3, [pc, #328]	; (8006388 <GAME_PLAY_Phase_Management+0x3c78>)
 800623e:	9203      	str	r2, [sp, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	9202      	str	r2, [sp, #8]
 8006244:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8006248:	9201      	str	r2, [sp, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	9200      	str	r2, [sp, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a4e      	ldr	r2, [pc, #312]	; (800638c <GAME_PLAY_Phase_Management+0x3c7c>)
 8006252:	215a      	movs	r1, #90	; 0x5a
 8006254:	2014      	movs	r0, #20
 8006256:	f000 ff66 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerDef->displayNSS);
 800625a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800625e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	4b48      	ldr	r3, [pc, #288]	; (8006388 <GAME_PLAY_Phase_Management+0x3c78>)
 8006268:	9203      	str	r2, [sp, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	9202      	str	r2, [sp, #8]
 800626e:	221f      	movs	r2, #31
 8006270:	9201      	str	r2, [sp, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	9200      	str	r2, [sp, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a45      	ldr	r2, [pc, #276]	; (8006390 <GAME_PLAY_Phase_Management+0x3c80>)
 800627a:	215a      	movs	r1, #90	; 0x5a
 800627c:	200f      	movs	r0, #15
 800627e:	f000 ff52 	bl	8007126 <ST7735_WriteStringNSS>
					HAL_Delay(200);
 8006282:	20c8      	movs	r0, #200	; 0xc8
 8006284:	f001 fd30 	bl	8007ce8 <HAL_Delay>
					state_game->MainGame_State = Game_Ended;
 8006288:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800628c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2204      	movs	r2, #4
 8006294:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8006298:	e062      	b.n	8006360 <GAME_PLAY_Phase_Management+0x3c50>
					state_game->action = 50;
 800629a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800629e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2232      	movs	r2, #50	; 0x32
 80062a6:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80062a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	2326      	movs	r3, #38	; 0x26
 80062bc:	2280      	movs	r2, #128	; 0x80
 80062be:	215a      	movs	r1, #90	; 0x5a
 80062c0:	2000      	movs	r0, #0
 80062c2:	f001 f879 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80062c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2326      	movs	r3, #38	; 0x26
 80062da:	2280      	movs	r2, #128	; 0x80
 80062dc:	215a      	movs	r1, #90	; 0x5a
 80062de:	2000      	movs	r0, #0
 80062e0:	f001 f86a 	bl	80073b8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80062e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80062e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781a      	ldrb	r2, [r3, #0]
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <GAME_PLAY_Phase_Management+0x3c6c>)
 80062f2:	9203      	str	r2, [sp, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	9202      	str	r2, [sp, #8]
 80062f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062fc:	9201      	str	r2, [sp, #4]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	9200      	str	r2, [sp, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1e      	ldr	r2, [pc, #120]	; (8006380 <GAME_PLAY_Phase_Management+0x3c70>)
 8006306:	215a      	movs	r1, #90	; 0x5a
 8006308:	2005      	movs	r0, #5
 800630a:	f000 ff0c 	bl	8007126 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800630e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006312:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <GAME_PLAY_Phase_Management+0x3c6c>)
 800631c:	9203      	str	r2, [sp, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	9202      	str	r2, [sp, #8]
 8006322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006326:	9201      	str	r2, [sp, #4]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <GAME_PLAY_Phase_Management+0x3c74>)
 8006330:	215a      	movs	r1, #90	; 0x5a
 8006332:	2005      	movs	r0, #5
 8006334:	f000 fef7 	bl	8007126 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8006338:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800633c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8006348:	e00a      	b.n	8006360 <GAME_PLAY_Phase_Management+0x3c50>
				break;
 800634a:	bf00      	nop
 800634c:	e00f      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
				break;
 800634e:	bf00      	nop
 8006350:	e00d      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
				break;
 8006352:	bf00      	nop
 8006354:	e00b      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
				break;
 8006356:	bf00      	nop
 8006358:	e009      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
				break;
 800635a:	bf00      	nop
 800635c:	e007      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
				break;
 800635e:	bf00      	nop
			}
			break;
 8006360:	e005      	b.n	800636e <GAME_PLAY_Phase_Management+0x3c5e>
		break;
 8006362:	bf00      	nop
 8006364:	e004      	b.n	8006370 <GAME_PLAY_Phase_Management+0x3c60>
		break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <GAME_PLAY_Phase_Management+0x3c60>
		break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <GAME_PLAY_Phase_Management+0x3c60>
			break;
 800636e:	bf00      	nop

	}
}
 8006370:	bf00      	nop
 8006372:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}
 800637a:	bf00      	nop
 800637c:	2400000c 	.word	0x2400000c
 8006380:	080116b4 	.word	0x080116b4
 8006384:	080116c4 	.word	0x080116c4
 8006388:	24000014 	.word	0x24000014
 800638c:	080112d8 	.word	0x080112d8
 8006390:	080112b8 	.word	0x080112b8

08006394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006398:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <SystemInit+0xfc>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <SystemInit+0xfc>)
 80063a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80063a8:	4b39      	ldr	r3, [pc, #228]	; (8006490 <SystemInit+0xfc>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	4a38      	ldr	r2, [pc, #224]	; (8006490 <SystemInit+0xfc>)
 80063ae:	f043 0310 	orr.w	r3, r3, #16
 80063b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <SystemInit+0x100>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2b06      	cmp	r3, #6
 80063be:	d807      	bhi.n	80063d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063c0:	4b34      	ldr	r3, [pc, #208]	; (8006494 <SystemInit+0x100>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	4a32      	ldr	r2, [pc, #200]	; (8006494 <SystemInit+0x100>)
 80063ca:	f043 0307 	orr.w	r3, r3, #7
 80063ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80063d0:	4b31      	ldr	r3, [pc, #196]	; (8006498 <SystemInit+0x104>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a30      	ldr	r2, [pc, #192]	; (8006498 <SystemInit+0x104>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80063dc:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <SystemInit+0x104>)
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80063e2:	4b2d      	ldr	r3, [pc, #180]	; (8006498 <SystemInit+0x104>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	492c      	ldr	r1, [pc, #176]	; (8006498 <SystemInit+0x104>)
 80063e8:	4b2c      	ldr	r3, [pc, #176]	; (800649c <SystemInit+0x108>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <SystemInit+0x100>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80063fa:	4b26      	ldr	r3, [pc, #152]	; (8006494 <SystemInit+0x100>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 030f 	bic.w	r3, r3, #15
 8006402:	4a24      	ldr	r2, [pc, #144]	; (8006494 <SystemInit+0x100>)
 8006404:	f043 0307 	orr.w	r3, r3, #7
 8006408:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800640a:	4b23      	ldr	r3, [pc, #140]	; (8006498 <SystemInit+0x104>)
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006410:	4b21      	ldr	r3, [pc, #132]	; (8006498 <SystemInit+0x104>)
 8006412:	2200      	movs	r2, #0
 8006414:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <SystemInit+0x104>)
 8006418:	2200      	movs	r2, #0
 800641a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800641c:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <SystemInit+0x104>)
 800641e:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <SystemInit+0x10c>)
 8006420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <SystemInit+0x104>)
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <SystemInit+0x110>)
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <SystemInit+0x104>)
 800642a:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <SystemInit+0x114>)
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <SystemInit+0x104>)
 8006430:	2200      	movs	r2, #0
 8006432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006434:	4b18      	ldr	r3, [pc, #96]	; (8006498 <SystemInit+0x104>)
 8006436:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <SystemInit+0x114>)
 8006438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <SystemInit+0x104>)
 800643c:	2200      	movs	r2, #0
 800643e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <SystemInit+0x104>)
 8006442:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <SystemInit+0x114>)
 8006444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <SystemInit+0x104>)
 8006448:	2200      	movs	r2, #0
 800644a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800644c:	4b12      	ldr	r3, [pc, #72]	; (8006498 <SystemInit+0x104>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a11      	ldr	r2, [pc, #68]	; (8006498 <SystemInit+0x104>)
 8006452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006458:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <SystemInit+0x104>)
 800645a:	2200      	movs	r2, #0
 800645c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <SystemInit+0x118>)
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <SystemInit+0x118>)
 8006464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006468:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <SystemInit+0x11c>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <SystemInit+0x120>)
 8006470:	4013      	ands	r3, r2
 8006472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006476:	d202      	bcs.n	800647e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <SystemInit+0x124>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <SystemInit+0x128>)
 8006480:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006484:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8006486:	bf00      	nop
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	e000ed00 	.word	0xe000ed00
 8006494:	52002000 	.word	0x52002000
 8006498:	58024400 	.word	0x58024400
 800649c:	eaf6ed7f 	.word	0xeaf6ed7f
 80064a0:	02020200 	.word	0x02020200
 80064a4:	01ff0000 	.word	0x01ff0000
 80064a8:	01010280 	.word	0x01010280
 80064ac:	580000c0 	.word	0x580000c0
 80064b0:	5c001000 	.word	0x5c001000
 80064b4:	ffff0000 	.word	0xffff0000
 80064b8:	51008108 	.word	0x51008108
 80064bc:	52004000 	.word	0x52004000

080064c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80064c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ca:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80064cc:	bf00      	nop
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <main+0xec>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <main+0x24>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dcf4      	bgt.n	80064ce <main+0xe>
	if ( timeout < 0 )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da01      	bge.n	80064ee <main+0x2e>
	{
		Error_Handler();
 80064ea:	f000 fbeb 	bl	8006cc4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064ee:	f001 fb69 	bl	8007bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064f2:	f000 f863 	bl	80065bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80064f6:	f000 f8e5 	bl	80066c4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80064fa:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <main+0xec>)
 80064fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006500:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <main+0xec>)
 8006502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800650a:	4b28      	ldr	r3, [pc, #160]	; (80065ac <main+0xec>)
 800650c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8006518:	2000      	movs	r0, #0
 800651a:	f004 fd7f 	bl	800b01c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800651e:	2100      	movs	r1, #0
 8006520:	2000      	movs	r0, #0
 8006522:	f004 fd95 	bl	800b050 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8006526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800652c:	bf00      	nop
 800652e:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <main+0xec>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <main+0x84>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dcf4      	bgt.n	800652e <main+0x6e>
	if ( timeout < 0 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da01      	bge.n	800654e <main+0x8e>
	{
		Error_Handler();
 800654a:	f000 fbbb 	bl	8006cc4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800654e:	f000 fa6d 	bl	8006a2c <MX_GPIO_Init>
  MX_ETH_Init();
 8006552:	f000 f8e9 	bl	8006728 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8006556:	f000 f9c1 	bl	80068dc <MX_USART3_UART_Init>
  MX_DMA_Init();
 800655a:	f000 fa3f 	bl	80069dc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800655e:	f000 fa0b 	bl	8006978 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8006562:	f000 f92d 	bl	80067c0 <MX_SPI3_Init>
  MX_TIM7_Init();
 8006566:	f000 f983 	bl	8006870 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800656a:	f000 fcb3 	bl	8006ed4 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800656e:	2000      	movs	r0, #0
 8006570:	f000 ffbd 	bl	80074ee <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8006574:	2000      	movs	r0, #0
 8006576:	f000 ffa9 	bl	80074cc <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800657a:	f001 fba9 	bl	8007cd0 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <main+0xf0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2bc8      	cmp	r3, #200	; 0xc8
 8006588:	d9f7      	bls.n	800657a <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 800658a:	f001 fba1 	bl	8007cd0 <HAL_GetTick>
 800658e:	4603      	mov	r3, r0
 8006590:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <main+0xf0>)
 8006592:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006598:	4806      	ldr	r0, [pc, #24]	; (80065b4 <main+0xf4>)
 800659a:	f004 fd24 	bl	800afe6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800659e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80065a2:	4905      	ldr	r1, [pc, #20]	; (80065b8 <main+0xf8>)
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fb fdab 	bl	8002100 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80065aa:	e7e6      	b.n	800657a <main+0xba>
 80065ac:	58024400 	.word	0x58024400
 80065b0:	24000e9c 	.word	0x24000e9c
 80065b4:	58020400 	.word	0x58020400
 80065b8:	240009c0 	.word	0x240009c0

080065bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b09c      	sub	sp, #112	; 0x70
 80065c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c6:	224c      	movs	r2, #76	; 0x4c
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f00a f9bc 	bl	8010948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	2220      	movs	r2, #32
 80065d4:	2100      	movs	r1, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f00a f9b6 	bl	8010948 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80065dc:	2004      	movs	r0, #4
 80065de:	f004 fe93 	bl	800b308 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80065e2:	2300      	movs	r3, #0
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <SystemClock_Config+0xfc>)
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4a33      	ldr	r2, [pc, #204]	; (80066b8 <SystemClock_Config+0xfc>)
 80065ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065f0:	6193      	str	r3, [r2, #24]
 80065f2:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <SystemClock_Config+0xfc>)
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <SystemClock_Config+0x100>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a2e      	ldr	r2, [pc, #184]	; (80066bc <SystemClock_Config+0x100>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006608:	4b2c      	ldr	r3, [pc, #176]	; (80066bc <SystemClock_Config+0x100>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006614:	bf00      	nop
 8006616:	4b28      	ldr	r3, [pc, #160]	; (80066b8 <SystemClock_Config+0xfc>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006622:	d1f8      	bne.n	8006616 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006624:	4b26      	ldr	r3, [pc, #152]	; (80066c0 <SystemClock_Config+0x104>)
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f023 0303 	bic.w	r3, r3, #3
 800662c:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <SystemClock_Config+0x104>)
 800662e:	f043 0302 	orr.w	r3, r3, #2
 8006632:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006634:	2301      	movs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800663e:	2302      	movs	r3, #2
 8006640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006642:	2302      	movs	r3, #2
 8006644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006646:	2301      	movs	r3, #1
 8006648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800664a:	2378      	movs	r3, #120	; 0x78
 800664c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800664e:	2302      	movs	r3, #2
 8006650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006652:	2302      	movs	r3, #2
 8006654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006656:	2302      	movs	r3, #2
 8006658:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800665a:	230c      	movs	r3, #12
 800665c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800665e:	2300      	movs	r3, #0
 8006660:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666a:	4618      	mov	r0, r3
 800666c:	f004 feb6 	bl	800b3dc <HAL_RCC_OscConfig>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006676:	f000 fb25 	bl	8006cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800667a:	233f      	movs	r3, #63	; 0x3f
 800667c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800667e:	2303      	movs	r3, #3
 8006680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006686:	2308      	movs	r3, #8
 8006688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800668a:	2340      	movs	r3, #64	; 0x40
 800668c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006696:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	2104      	movs	r1, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f005 fac9 	bl	800bc38 <HAL_RCC_ClockConfig>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80066ac:	f000 fb0a 	bl	8006cc4 <Error_Handler>
  }
}
 80066b0:	bf00      	nop
 80066b2:	3770      	adds	r7, #112	; 0x70
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024800 	.word	0x58024800
 80066bc:	58000400 	.word	0x58000400
 80066c0:	58024400 	.word	0x58024400

080066c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b0b0      	sub	sp, #192	; 0xc0
 80066c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066ca:	1d3b      	adds	r3, r7, #4
 80066cc:	22bc      	movs	r2, #188	; 0xbc
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f00a f939 	bl	8010948 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80066d6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80066da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80066e0:	2318      	movs	r3, #24
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80066e4:	2302      	movs	r3, #2
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80066e8:	2304      	movs	r3, #4
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80066ec:	2302      	movs	r3, #2
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80066f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80066fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006702:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8006704:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f005 fe1e 	bl	800c350 <HAL_RCCEx_PeriphCLKConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800671a:	f000 fad3 	bl	8006cc4 <Error_Handler>
  }
}
 800671e:	bf00      	nop
 8006720:	37c0      	adds	r7, #192	; 0xc0
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <MX_ETH_Init+0x80>)
 800672e:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <MX_ETH_Init+0x84>)
 8006730:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006732:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <MX_ETH_Init+0x88>)
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8006738:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <MX_ETH_Init+0x88>)
 800673a:	2280      	movs	r2, #128	; 0x80
 800673c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800673e:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <MX_ETH_Init+0x88>)
 8006740:	22e1      	movs	r2, #225	; 0xe1
 8006742:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <MX_ETH_Init+0x88>)
 8006746:	2200      	movs	r2, #0
 8006748:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <MX_ETH_Init+0x88>)
 800674c:	2200      	movs	r2, #0
 800674e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006750:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <MX_ETH_Init+0x88>)
 8006752:	2200      	movs	r2, #0
 8006754:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <MX_ETH_Init+0x80>)
 8006758:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <MX_ETH_Init+0x88>)
 800675a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <MX_ETH_Init+0x80>)
 800675e:	2201      	movs	r2, #1
 8006760:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006762:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <MX_ETH_Init+0x80>)
 8006764:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <MX_ETH_Init+0x8c>)
 8006766:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006768:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <MX_ETH_Init+0x80>)
 800676a:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <MX_ETH_Init+0x90>)
 800676c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800676e:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <MX_ETH_Init+0x80>)
 8006770:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006774:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006776:	480c      	ldr	r0, [pc, #48]	; (80067a8 <MX_ETH_Init+0x80>)
 8006778:	f003 fe30 	bl	800a3dc <HAL_ETH_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8006782:	f000 fa9f 	bl	8006cc4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006786:	2238      	movs	r2, #56	; 0x38
 8006788:	2100      	movs	r1, #0
 800678a:	480c      	ldr	r0, [pc, #48]	; (80067bc <MX_ETH_Init+0x94>)
 800678c:	f00a f8dc 	bl	8010948 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <MX_ETH_Init+0x94>)
 8006792:	2221      	movs	r2, #33	; 0x21
 8006794:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <MX_ETH_Init+0x94>)
 8006798:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800679c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <MX_ETH_Init+0x94>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80067a4:	bf00      	nop
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	240001b0 	.word	0x240001b0
 80067ac:	40028000 	.word	0x40028000
 80067b0:	24000ea8 	.word	0x24000ea8
 80067b4:	240000e8 	.word	0x240000e8
 80067b8:	24000088 	.word	0x24000088
 80067bc:	24000178 	.word	0x24000178

080067c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80067c4:	4b28      	ldr	r3, [pc, #160]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067c6:	4a29      	ldr	r2, [pc, #164]	; (800686c <MX_SPI3_Init+0xac>)
 80067c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80067ca:	4b27      	ldr	r3, [pc, #156]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80067d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80067d2:	4b25      	ldr	r3, [pc, #148]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067d8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80067da:	4b23      	ldr	r3, [pc, #140]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067dc:	2207      	movs	r2, #7
 80067de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e0:	4b21      	ldr	r3, [pc, #132]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067e6:	4b20      	ldr	r3, [pc, #128]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80067f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80067f4:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <MX_SPI3_Init+0xa8>)
 80067fe:	2200      	movs	r2, #0
 8006800:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006804:	2200      	movs	r2, #0
 8006806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <MX_SPI3_Init+0xa8>)
 800680a:	2200      	movs	r2, #0
 800680c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800680e:	4b16      	ldr	r3, [pc, #88]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006810:	2200      	movs	r2, #0
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800681a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800681c:	4b12      	ldr	r3, [pc, #72]	; (8006868 <MX_SPI3_Init+0xa8>)
 800681e:	2200      	movs	r2, #0
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006824:	2200      	movs	r2, #0
 8006826:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <MX_SPI3_Init+0xa8>)
 800682a:	2200      	movs	r2, #0
 800682c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800682e:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006830:	2200      	movs	r2, #0
 8006832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006836:	2200      	movs	r2, #0
 8006838:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <MX_SPI3_Init+0xa8>)
 800683c:	2200      	movs	r2, #0
 800683e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006842:	2200      	movs	r2, #0
 8006844:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006846:	4b08      	ldr	r3, [pc, #32]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006848:	2200      	movs	r2, #0
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <MX_SPI3_Init+0xa8>)
 800684e:	2200      	movs	r2, #0
 8006850:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006852:	4805      	ldr	r0, [pc, #20]	; (8006868 <MX_SPI3_Init+0xa8>)
 8006854:	f007 f8e4 	bl	800da20 <HAL_SPI_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800685e:	f000 fa31 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	24000260 	.word	0x24000260
 800686c:	40003c00 	.word	0x40003c00

08006870 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006876:	1d3b      	adds	r3, r7, #4
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <MX_TIM7_Init+0x64>)
 8006882:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <MX_TIM7_Init+0x68>)
 8006884:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <MX_TIM7_Init+0x64>)
 8006888:	22ef      	movs	r2, #239	; 0xef
 800688a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <MX_TIM7_Init+0x64>)
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <MX_TIM7_Init+0x64>)
 8006894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006898:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <MX_TIM7_Init+0x64>)
 800689c:	2200      	movs	r2, #0
 800689e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80068a0:	480c      	ldr	r0, [pc, #48]	; (80068d4 <MX_TIM7_Init+0x64>)
 80068a2:	f007 fc9e 	bl	800e1e2 <HAL_TIM_Base_Init>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80068ac:	f000 fa0a 	bl	8006cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068b0:	2300      	movs	r3, #0
 80068b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	4619      	mov	r1, r3
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <MX_TIM7_Init+0x64>)
 80068be:	f007 ff6f 	bl	800e7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80068c8:	f000 f9fc 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	240002e8 	.word	0x240002e8
 80068d8:	40001400 	.word	0x40001400

080068dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068e0:	4b22      	ldr	r3, [pc, #136]	; (800696c <MX_USART3_UART_Init+0x90>)
 80068e2:	4a23      	ldr	r2, [pc, #140]	; (8006970 <MX_USART3_UART_Init+0x94>)
 80068e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80068e6:	4b21      	ldr	r3, [pc, #132]	; (800696c <MX_USART3_UART_Init+0x90>)
 80068e8:	4a22      	ldr	r2, [pc, #136]	; (8006974 <MX_USART3_UART_Init+0x98>)
 80068ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <MX_USART3_UART_Init+0x90>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <MX_USART3_UART_Init+0x90>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <MX_USART3_UART_Init+0x90>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006900:	220c      	movs	r2, #12
 8006902:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006906:	2200      	movs	r2, #0
 8006908:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <MX_USART3_UART_Init+0x90>)
 800690c:	2200      	movs	r2, #0
 800690e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006912:	2200      	movs	r2, #0
 8006914:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006918:	2200      	movs	r2, #0
 800691a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <MX_USART3_UART_Init+0x90>)
 800691e:	2200      	movs	r2, #0
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006922:	4812      	ldr	r0, [pc, #72]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006924:	f007 ffe8 	bl	800e8f8 <HAL_UART_Init>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800692e:	f000 f9c9 	bl	8006cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006932:	2100      	movs	r1, #0
 8006934:	480d      	ldr	r0, [pc, #52]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006936:	f009 fc09 	bl	801014c <HAL_UARTEx_SetTxFifoThreshold>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8006940:	f000 f9c0 	bl	8006cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006944:	2100      	movs	r1, #0
 8006946:	4809      	ldr	r0, [pc, #36]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006948:	f009 fc3e 	bl	80101c8 <HAL_UARTEx_SetRxFifoThreshold>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8006952:	f000 f9b7 	bl	8006cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006956:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_USART3_UART_Init+0x90>)
 8006958:	f009 fbbf 	bl	80100da <HAL_UARTEx_DisableFifoMode>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8006962:	f000 f9af 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	24000334 	.word	0x24000334
 8006970:	40004800 	.word	0x40004800
 8006974:	0005dc00 	.word	0x0005dc00

08006978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006980:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006984:	2209      	movs	r2, #9
 8006986:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006988:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800698a:	2202      	movs	r2, #2
 800698c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006990:	2200      	movs	r2, #0
 8006992:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006996:	2202      	movs	r2, #2
 8006998:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800699c:	2200      	movs	r2, #0
 800699e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069a0:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80069be:	4805      	ldr	r0, [pc, #20]	; (80069d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80069c0:	f004 fb5a 	bl	800b078 <HAL_PCD_Init>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80069ca:	f000 f97b 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	240004b4 	.word	0x240004b4
 80069d8:	40080000 	.word	0x40080000

080069dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069e2:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <MX_DMA_Init+0x4c>)
 80069e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80069e8:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <MX_DMA_Init+0x4c>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <MX_DMA_Init+0x4c>)
 80069f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	607b      	str	r3, [r7, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006a00:	2200      	movs	r2, #0
 8006a02:	2100      	movs	r1, #0
 8006a04:	200c      	movs	r0, #12
 8006a06:	f001 fa8e 	bl	8007f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006a0a:	200c      	movs	r0, #12
 8006a0c:	f001 faa5 	bl	8007f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006a10:	2200      	movs	r2, #0
 8006a12:	2100      	movs	r1, #0
 8006a14:	200f      	movs	r0, #15
 8006a16:	f001 fa86 	bl	8007f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006a1a:	200f      	movs	r0, #15
 8006a1c:	f001 fa9d 	bl	8007f5a <HAL_NVIC_EnableIRQ>

}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	58024400 	.word	0x58024400

08006a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08e      	sub	sp, #56	; 0x38
 8006a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a42:	4b8a      	ldr	r3, [pc, #552]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a48:	4a88      	ldr	r2, [pc, #544]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a52:	4b86      	ldr	r3, [pc, #536]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a60:	4b82      	ldr	r3, [pc, #520]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a66:	4a81      	ldr	r2, [pc, #516]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a70:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a7e:	4b7b      	ldr	r3, [pc, #492]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a84:	4a79      	ldr	r2, [pc, #484]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a8e:	4b77      	ldr	r3, [pc, #476]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9c:	4b73      	ldr	r3, [pc, #460]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa2:	4a72      	ldr	r2, [pc, #456]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006aac:	4b6f      	ldr	r3, [pc, #444]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006aba:	4b6c      	ldr	r3, [pc, #432]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac0:	4a6a      	ldr	r2, [pc, #424]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006ac2:	f043 0320 	orr.w	r3, r3, #32
 8006ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006aca:	4b68      	ldr	r3, [pc, #416]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ad8:	4b64      	ldr	r3, [pc, #400]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ade:	4a63      	ldr	r2, [pc, #396]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006ae0:	f043 0310 	orr.w	r3, r3, #16
 8006ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ae8:	4b60      	ldr	r3, [pc, #384]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006af6:	4b5d      	ldr	r3, [pc, #372]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006afc:	4a5b      	ldr	r2, [pc, #364]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006afe:	f043 0308 	orr.w	r3, r3, #8
 8006b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b06:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b14:	4b55      	ldr	r3, [pc, #340]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b1a:	4a54      	ldr	r2, [pc, #336]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b24:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <MX_GPIO_Init+0x240>)
 8006b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006b32:	2201      	movs	r2, #1
 8006b34:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8006b38:	484d      	ldr	r0, [pc, #308]	; (8006c70 <MX_GPIO_Init+0x244>)
 8006b3a:	f004 fa3b 	bl	800afb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b44:	484a      	ldr	r0, [pc, #296]	; (8006c70 <MX_GPIO_Init+0x244>)
 8006b46:	f004 fa35 	bl	800afb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b50:	4848      	ldr	r0, [pc, #288]	; (8006c74 <MX_GPIO_Init+0x248>)
 8006b52:	f004 fa2f 	bl	800afb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b5c:	4846      	ldr	r0, [pc, #280]	; (8006c78 <MX_GPIO_Init+0x24c>)
 8006b5e:	f004 fa29 	bl	800afb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006b62:	2201      	movs	r2, #1
 8006b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b68:	4844      	ldr	r0, [pc, #272]	; (8006c7c <MX_GPIO_Init+0x250>)
 8006b6a:	f004 fa23 	bl	800afb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8006b6e:	230d      	movs	r3, #13
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b72:	2300      	movs	r3, #0
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7e:	4619      	mov	r1, r3
 8006b80:	483f      	ldr	r0, [pc, #252]	; (8006c80 <MX_GPIO_Init+0x254>)
 8006b82:	f004 f84f 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006b86:	2308      	movs	r3, #8
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b96:	4619      	mov	r1, r3
 8006b98:	483a      	ldr	r0, [pc, #232]	; (8006c84 <MX_GPIO_Init+0x258>)
 8006b9a:	f004 f843 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8006baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4830      	ldr	r0, [pc, #192]	; (8006c74 <MX_GPIO_Init+0x248>)
 8006bb2:	f004 f837 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8006bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8006bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc8:	4619      	mov	r1, r3
 8006bca:	482f      	ldr	r0, [pc, #188]	; (8006c88 <MX_GPIO_Init+0x25c>)
 8006bcc:	f004 f82a 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8006bd0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bde:	2300      	movs	r3, #0
 8006be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be6:	4619      	mov	r1, r3
 8006be8:	4821      	ldr	r0, [pc, #132]	; (8006c70 <MX_GPIO_Init+0x244>)
 8006bea:	f004 f81b 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c04:	4619      	mov	r1, r3
 8006c06:	481b      	ldr	r0, [pc, #108]	; (8006c74 <MX_GPIO_Init+0x248>)
 8006c08:	f004 f80c 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c12:	2301      	movs	r3, #1
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c22:	4619      	mov	r1, r3
 8006c24:	4814      	ldr	r0, [pc, #80]	; (8006c78 <MX_GPIO_Init+0x24c>)
 8006c26:	f003 fffd 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	480f      	ldr	r0, [pc, #60]	; (8006c7c <MX_GPIO_Init+0x250>)
 8006c40:	f003 fff0 	bl	800ac24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c52:	2300      	movs	r3, #0
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4807      	ldr	r0, [pc, #28]	; (8006c7c <MX_GPIO_Init+0x250>)
 8006c5e:	f003 ffe1 	bl	800ac24 <HAL_GPIO_Init>

}
 8006c62:	bf00      	nop
 8006c64:	3738      	adds	r7, #56	; 0x38
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	58021000 	.word	0x58021000
 8006c74:	58020400 	.word	0x58020400
 8006c78:	58020c00 	.word	0x58020c00
 8006c7c:	58021800 	.word	0x58021800
 8006c80:	58020800 	.word	0x58020800
 8006c84:	58020000 	.word	0x58020000
 8006c88:	58021400 	.word	0x58021400

08006c8c <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006c8c:	b4b0      	push	{r4, r5, r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d10a      	bne.n	8006cb2 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ca6:	1854      	adds	r4, r2, r1
 8006ca8:	f143 0500 	adc.w	r5, r3, #0
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006cae:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bcb0      	pop	{r4, r5, r7}
 8006cba:	4770      	bx	lr
 8006cbc:	240002e8 	.word	0x240002e8
 8006cc0:	24000ea0 	.word	0x24000ea0

08006cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cc8:	b672      	cpsid	i
}
 8006cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006ccc:	e7fe      	b.n	8006ccc <Error_Handler+0x8>
	...

08006cd0 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cda:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <ST7735_Select+0x14>)
 8006cdc:	f004 f96a 	bl	800afb4 <HAL_GPIO_WritePin>
}
 8006ce0:	bf00      	nop
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	58021000 	.word	0x58021000

08006ce8 <ST7735_Unselect>:

void ST7735_Unselect() {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8006cec:	2201      	movs	r2, #1
 8006cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cf2:	4802      	ldr	r0, [pc, #8]	; (8006cfc <ST7735_Unselect+0x14>)
 8006cf4:	f004 f95e 	bl	800afb4 <HAL_GPIO_WritePin>
}
 8006cf8:	bf00      	nop
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58021000 	.word	0x58021000

08006d00 <ST7735_Select1>:
static void ST7735_Select1() {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006d04:	2200      	movs	r2, #0
 8006d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d0a:	4802      	ldr	r0, [pc, #8]	; (8006d14 <ST7735_Select1+0x14>)
 8006d0c:	f004 f952 	bl	800afb4 <HAL_GPIO_WritePin>
}
 8006d10:	bf00      	nop
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	58021000 	.word	0x58021000

08006d18 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d22:	4802      	ldr	r0, [pc, #8]	; (8006d2c <ST7735_Unselect1+0x14>)
 8006d24:	f004 f946 	bl	800afb4 <HAL_GPIO_WritePin>
}
 8006d28:	bf00      	nop
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	58021000 	.word	0x58021000

08006d30 <ST7735_Reset>:

static void ST7735_Reset() {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d3a:	4807      	ldr	r0, [pc, #28]	; (8006d58 <ST7735_Reset+0x28>)
 8006d3c:	f004 f93a 	bl	800afb4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006d40:	2005      	movs	r0, #5
 8006d42:	f000 ffd1 	bl	8007ce8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006d46:	2201      	movs	r2, #1
 8006d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d4c:	4802      	ldr	r0, [pc, #8]	; (8006d58 <ST7735_Reset+0x28>)
 8006d4e:	f004 f931 	bl	800afb4 <HAL_GPIO_WritePin>
}
 8006d52:	bf00      	nop
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	58021000 	.word	0x58021000

08006d5c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d6c:	4806      	ldr	r0, [pc, #24]	; (8006d88 <ST7735_WriteCommand+0x2c>)
 8006d6e:	f004 f921 	bl	800afb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006d72:	1df9      	adds	r1, r7, #7
 8006d74:	f04f 33ff 	mov.w	r3, #4294967295
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4804      	ldr	r0, [pc, #16]	; (8006d8c <ST7735_WriteCommand+0x30>)
 8006d7c:	f006 ff56 	bl	800dc2c <HAL_SPI_Transmit>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58021800 	.word	0x58021800
 8006d8c:	24000260 	.word	0x24000260

08006d90 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006da0:	4807      	ldr	r0, [pc, #28]	; (8006dc0 <ST7735_WriteData+0x30>)
 8006da2:	f004 f907 	bl	800afb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <ST7735_WriteData+0x34>)
 8006db2:	f006 ff3b 	bl	800dc2c <HAL_SPI_Transmit>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	58021800 	.word	0x58021800
 8006dc4:	24000260 	.word	0x24000260

08006dc8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8006dda:	e034      	b.n	8006e46 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff ffb7 	bl	8006d5c <ST7735_WriteCommand>

		numArgs = *addr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8006df8:	7abb      	ldrb	r3, [r7, #10]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e00:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006e02:	7abb      	ldrb	r3, [r7, #10]
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8006e0a:	7abb      	ldrb	r3, [r7, #10]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006e10:	7abb      	ldrb	r3, [r7, #10]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ffbb 	bl	8006d90 <ST7735_WriteData>
			addr += numArgs;
 8006e1a:	7abb      	ldrb	r3, [r7, #10]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	4413      	add	r3, r2
 8006e20:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006e22:	89bb      	ldrh	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006e32:	89bb      	ldrh	r3, [r7, #12]
 8006e34:	2bff      	cmp	r3, #255	; 0xff
 8006e36:	d102      	bne.n	8006e3e <ST7735_ExecuteCommandList+0x76>
 8006e38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e3c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8006e3e:	89bb      	ldrh	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 ff51 	bl	8007ce8 <HAL_Delay>
	while(numCommands--) {
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	1e5a      	subs	r2, r3, #1
 8006e4a:	73fa      	strb	r2, [r7, #15]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1c5      	bne.n	8006ddc <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8006e5a:	b590      	push	{r4, r7, lr}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	461a      	mov	r2, r3
 8006e68:	4623      	mov	r3, r4
 8006e6a:	71fb      	strb	r3, [r7, #7]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	71bb      	strb	r3, [r7, #6]
 8006e70:	460b      	mov	r3, r1
 8006e72:	717b      	strb	r3, [r7, #5]
 8006e74:	4613      	mov	r3, r2
 8006e76:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006e78:	202a      	movs	r0, #42	; 0x2a
 8006e7a:	f7ff ff6f 	bl	8006d5c <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8006e7e:	2300      	movs	r3, #0
 8006e80:	733b      	strb	r3, [r7, #12]
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	3302      	adds	r3, #2
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	737b      	strb	r3, [r7, #13]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73bb      	strb	r3, [r7, #14]
 8006e8e:	797b      	ldrb	r3, [r7, #5]
 8006e90:	3302      	adds	r3, #2
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff ff77 	bl	8006d90 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8006ea2:	202b      	movs	r0, #43	; 0x2b
 8006ea4:	f7ff ff5a 	bl	8006d5c <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8006ea8:	79bb      	ldrb	r3, [r7, #6]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8006eb0:	793b      	ldrb	r3, [r7, #4]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006eb8:	f107 030c 	add.w	r3, r7, #12
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff ff66 	bl	8006d90 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8006ec4:	202c      	movs	r0, #44	; 0x2c
 8006ec6:	f7ff ff49 	bl	8006d5c <ST7735_WriteCommand>
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd90      	pop	{r4, r7, pc}
	...

08006ed4 <ST7735_Init>:

void ST7735_Init() {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
	ST7735_Select();
 8006ed8:	f7ff fefa 	bl	8006cd0 <ST7735_Select>
	ST7735_Select1();
 8006edc:	f7ff ff10 	bl	8006d00 <ST7735_Select1>
	ST7735_Reset();
 8006ee0:	f7ff ff26 	bl	8006d30 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8006ee4:	4807      	ldr	r0, [pc, #28]	; (8006f04 <ST7735_Init+0x30>)
 8006ee6:	f7ff ff6f 	bl	8006dc8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8006eea:	4807      	ldr	r0, [pc, #28]	; (8006f08 <ST7735_Init+0x34>)
 8006eec:	f7ff ff6c 	bl	8006dc8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8006ef0:	4806      	ldr	r0, [pc, #24]	; (8006f0c <ST7735_Init+0x38>)
 8006ef2:	f7ff ff69 	bl	8006dc8 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8006ef6:	f7ff fef7 	bl	8006ce8 <ST7735_Unselect>
	ST7735_Unselect1();
 8006efa:	f7ff ff0d 	bl	8006d18 <ST7735_Unselect1>
}
 8006efe:	bf00      	nop
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08012bac 	.word	0x08012bac
 8006f08:	08012be8 	.word	0x08012be8
 8006f0c:	08012bf8 	.word	0x08012bf8

08006f10 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006f10:	b082      	sub	sp, #8
 8006f12:	b590      	push	{r4, r7, lr}
 8006f14:	b089      	sub	sp, #36	; 0x24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	80bb      	strh	r3, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	b2d8      	uxtb	r0, r3
 8006f2a:	88bb      	ldrh	r3, [r7, #4]
 8006f2c:	b2d9      	uxtb	r1, r3
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006f36:	4413      	add	r3, r2
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b2dc      	uxtb	r4, r3
 8006f3e:	88bb      	ldrh	r3, [r7, #4]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006f46:	4413      	add	r3, r2
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4622      	mov	r2, r4
 8006f50:	f7ff ff83 	bl	8006e5a <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e043      	b.n	8006fe2 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	3b20      	subs	r3, #32
 8006f60:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	440b      	add	r3, r1
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006f76:	2300      	movs	r3, #0
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e029      	b.n	8006fd0 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006f8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	743b      	strb	r3, [r7, #16]
 8006f96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006f9c:	f107 0310 	add.w	r3, r7, #16
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fef4 	bl	8006d90 <ST7735_WriteData>
 8006fa8:	e00f      	b.n	8006fca <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006faa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	733b      	strb	r3, [r7, #12]
 8006fb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8006fbe:	f107 030c 	add.w	r3, r7, #12
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fee3 	bl	8006d90 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d3cf      	bcc.n	8006f7c <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d3b5      	bcc.n	8006f5a <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	3724      	adds	r7, #36	; 0x24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006ffa:	b002      	add	sp, #8
 8006ffc:	4770      	bx	lr

08006ffe <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006ffe:	b082      	sub	sp, #8
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af04      	add	r7, sp, #16
 8007006:	603a      	str	r2, [r7, #0]
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	4603      	mov	r3, r0
 800700c:	80fb      	strh	r3, [r7, #6]
 800700e:	460b      	mov	r3, r1
 8007010:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8007012:	f7ff fe5d 	bl	8006cd0 <ST7735_Select>

	while(*str) {
 8007016:	e02d      	b.n	8007074 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	7d3a      	ldrb	r2, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	2b7f      	cmp	r3, #127	; 0x7f
 8007020:	dd13      	ble.n	800704a <ST7735_WriteString+0x4c>
			x = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8007026:	7d7b      	ldrb	r3, [r7, #21]
 8007028:	b29a      	uxth	r2, r3
 800702a:	88bb      	ldrh	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8007030:	88bb      	ldrh	r3, [r7, #4]
 8007032:	7d7a      	ldrb	r2, [r7, #21]
 8007034:	4413      	add	r3, r2
 8007036:	2b7f      	cmp	r3, #127	; 0x7f
 8007038:	dc21      	bgt.n	800707e <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b20      	cmp	r3, #32
 8007040:	d103      	bne.n	800704a <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	603b      	str	r3, [r7, #0]
				continue;
 8007048:	e014      	b.n	8007074 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	88b9      	ldrh	r1, [r7, #4]
 8007050:	88f8      	ldrh	r0, [r7, #6]
 8007052:	8c3b      	ldrh	r3, [r7, #32]
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	8bbb      	ldrh	r3, [r7, #28]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f7ff ff56 	bl	8006f10 <ST7735_WriteChar>
		x += font.width;
 8007064:	7d3b      	ldrb	r3, [r7, #20]
 8007066:	b29a      	uxth	r2, r3
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	4413      	add	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]
		str++;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	603b      	str	r3, [r7, #0]
	while(*str) {
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1cd      	bne.n	8007018 <ST7735_WriteString+0x1a>
 800707c:	e000      	b.n	8007080 <ST7735_WriteString+0x82>
				break;
 800707e:	bf00      	nop
	}

	ST7735_Unselect();
 8007080:	f7ff fe32 	bl	8006ce8 <ST7735_Unselect>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800708e:	b002      	add	sp, #8
 8007090:	4770      	bx	lr

08007092 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8007092:	b082      	sub	sp, #8
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af04      	add	r7, sp, #16
 800709a:	603a      	str	r2, [r7, #0]
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	4603      	mov	r3, r0
 80070a0:	80fb      	strh	r3, [r7, #6]
 80070a2:	460b      	mov	r3, r1
 80070a4:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 80070a6:	f7ff fe2b 	bl	8006d00 <ST7735_Select1>

	while(*str) {
 80070aa:	e02d      	b.n	8007108 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	7d3a      	ldrb	r2, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	2b7f      	cmp	r3, #127	; 0x7f
 80070b4:	dd13      	ble.n	80070de <ST7735_WriteString1+0x4c>
			x = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80070ba:	7d7b      	ldrb	r3, [r7, #21]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	88bb      	ldrh	r3, [r7, #4]
 80070c0:	4413      	add	r3, r2
 80070c2:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80070c4:	88bb      	ldrh	r3, [r7, #4]
 80070c6:	7d7a      	ldrb	r2, [r7, #21]
 80070c8:	4413      	add	r3, r2
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	dc21      	bgt.n	8007112 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d103      	bne.n	80070de <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	603b      	str	r3, [r7, #0]
				continue;
 80070dc:	e014      	b.n	8007108 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	88b9      	ldrh	r1, [r7, #4]
 80070e4:	88f8      	ldrh	r0, [r7, #6]
 80070e6:	8c3b      	ldrh	r3, [r7, #32]
 80070e8:	9302      	str	r3, [sp, #8]
 80070ea:	8bbb      	ldrh	r3, [r7, #28]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f7ff ff0c 	bl	8006f10 <ST7735_WriteChar>
		x += font.width;
 80070f8:	7d3b      	ldrb	r3, [r7, #20]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	4413      	add	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
		str++;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	603b      	str	r3, [r7, #0]
	while(*str) {
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1cd      	bne.n	80070ac <ST7735_WriteString1+0x1a>
 8007110:	e000      	b.n	8007114 <ST7735_WriteString1+0x82>
				break;
 8007112:	bf00      	nop
	}

	ST7735_Unselect1();
 8007114:	f7ff fe00 	bl	8006d18 <ST7735_Unselect1>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007122:	b002      	add	sp, #8
 8007124:	4770      	bx	lr

08007126 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8007126:	b082      	sub	sp, #8
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af04      	add	r7, sp, #16
 800712e:	603a      	str	r2, [r7, #0]
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	4603      	mov	r3, r0
 8007134:	80fb      	strh	r3, [r7, #6]
 8007136:	460b      	mov	r3, r1
 8007138:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 800713a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8007142:	f7ff fdc5 	bl	8006cd0 <ST7735_Select>
 8007146:	e034      	b.n	80071b2 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8007148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800714c:	2b01      	cmp	r3, #1
 800714e:	d130      	bne.n	80071b2 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8007150:	f7ff fdd6 	bl	8006d00 <ST7735_Select1>

	}


	while(*str) {
 8007154:	e02d      	b.n	80071b2 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	7d3a      	ldrb	r2, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	2b7f      	cmp	r3, #127	; 0x7f
 800715e:	dd13      	ble.n	8007188 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8007164:	7d7b      	ldrb	r3, [r7, #21]
 8007166:	b29a      	uxth	r2, r3
 8007168:	88bb      	ldrh	r3, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800716e:	88bb      	ldrh	r3, [r7, #4]
 8007170:	7d7a      	ldrb	r2, [r7, #21]
 8007172:	4413      	add	r3, r2
 8007174:	2b7f      	cmp	r3, #127	; 0x7f
 8007176:	dc21      	bgt.n	80071bc <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b20      	cmp	r3, #32
 800717e:	d103      	bne.n	8007188 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	603b      	str	r3, [r7, #0]
				continue;
 8007186:	e014      	b.n	80071b2 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	88b9      	ldrh	r1, [r7, #4]
 800718e:	88f8      	ldrh	r0, [r7, #6]
 8007190:	8c3b      	ldrh	r3, [r7, #32]
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	8bbb      	ldrh	r3, [r7, #28]
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f7ff feb7 	bl	8006f10 <ST7735_WriteChar>
		x += font.width;
 80071a2:	7d3b      	ldrb	r3, [r7, #20]
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	4413      	add	r3, r2
 80071aa:	80fb      	strh	r3, [r7, #6]
		str++;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	603b      	str	r3, [r7, #0]
	while(*str) {
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1cd      	bne.n	8007156 <ST7735_WriteStringNSS+0x30>
 80071ba:	e000      	b.n	80071be <ST7735_WriteStringNSS+0x98>
				break;
 80071bc:	bf00      	nop
	}
	if(NSS == 0){
 80071be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 80071c6:	f7ff fd8f 	bl	8006ce8 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80071ca:	e005      	b.n	80071d8 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80071cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80071d4:	f7ff fda0 	bl	8006d18 <ST7735_Unselect1>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e2:	b002      	add	sp, #8
 80071e4:	4770      	bx	lr
	...

080071e8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	4611      	mov	r1, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	4623      	mov	r3, r4
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	4603      	mov	r3, r0
 80071fc:	80bb      	strh	r3, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	807b      	strh	r3, [r7, #2]
 8007202:	4613      	mov	r3, r2
 8007204:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	2b7f      	cmp	r3, #127	; 0x7f
 800720a:	d858      	bhi.n	80072be <ST7735_FillRectangle+0xd6>
 800720c:	88bb      	ldrh	r3, [r7, #4]
 800720e:	2b7f      	cmp	r3, #127	; 0x7f
 8007210:	d855      	bhi.n	80072be <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	887b      	ldrh	r3, [r7, #2]
 8007216:	4413      	add	r3, r2
 8007218:	2b80      	cmp	r3, #128	; 0x80
 800721a:	dd03      	ble.n	8007224 <ST7735_FillRectangle+0x3c>
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007222:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8007224:	88ba      	ldrh	r2, [r7, #4]
 8007226:	883b      	ldrh	r3, [r7, #0]
 8007228:	4413      	add	r3, r2
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	dd03      	ble.n	8007236 <ST7735_FillRectangle+0x4e>
 800722e:	88bb      	ldrh	r3, [r7, #4]
 8007230:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007234:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8007236:	f7ff fd4b 	bl	8006cd0 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	b2d8      	uxtb	r0, r3
 800723e:	88bb      	ldrh	r3, [r7, #4]
 8007240:	b2d9      	uxtb	r1, r3
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	b2da      	uxtb	r2, r3
 8007246:	887b      	ldrh	r3, [r7, #2]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4413      	add	r3, r2
 800724c:	b2db      	uxtb	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b2dc      	uxtb	r4, r3
 8007252:	88bb      	ldrh	r3, [r7, #4]
 8007254:	b2da      	uxtb	r2, r3
 8007256:	883b      	ldrh	r3, [r7, #0]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	4413      	add	r3, r2
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	4622      	mov	r2, r4
 8007264:	f7ff fdf9 	bl	8006e5a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8007268:	8c3b      	ldrh	r3, [r7, #32]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	b2db      	uxtb	r3, r3
 8007270:	733b      	strb	r3, [r7, #12]
 8007272:	8c3b      	ldrh	r3, [r7, #32]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8007278:	2201      	movs	r2, #1
 800727a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800727e:	4812      	ldr	r0, [pc, #72]	; (80072c8 <ST7735_FillRectangle+0xe0>)
 8007280:	f003 fe98 	bl	800afb4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8007284:	883b      	ldrh	r3, [r7, #0]
 8007286:	80bb      	strh	r3, [r7, #4]
 8007288:	e013      	b.n	80072b2 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	80fb      	strh	r3, [r7, #6]
 800728e:	e00a      	b.n	80072a6 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007290:	f107 010c 	add.w	r1, r7, #12
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
 8007298:	2202      	movs	r2, #2
 800729a:	480c      	ldr	r0, [pc, #48]	; (80072cc <ST7735_FillRectangle+0xe4>)
 800729c:	f006 fcc6 	bl	800dc2c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	80fb      	strh	r3, [r7, #6]
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f1      	bne.n	8007290 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 80072ac:	88bb      	ldrh	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	80bb      	strh	r3, [r7, #4]
 80072b2:	88bb      	ldrh	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e8      	bne.n	800728a <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 80072b8:	f7ff fd16 	bl	8006ce8 <ST7735_Unselect>
 80072bc:	e000      	b.n	80072c0 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80072be:	bf00      	nop
}
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}
 80072c6:	bf00      	nop
 80072c8:	58021800 	.word	0x58021800
 80072cc:	24000260 	.word	0x24000260

080072d0 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4623      	mov	r3, r4
 80072e0:	80fb      	strh	r3, [r7, #6]
 80072e2:	4603      	mov	r3, r0
 80072e4:	80bb      	strh	r3, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	807b      	strh	r3, [r7, #2]
 80072ea:	4613      	mov	r3, r2
 80072ec:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	2b7f      	cmp	r3, #127	; 0x7f
 80072f2:	d858      	bhi.n	80073a6 <ST7735_FillRectangle1+0xd6>
 80072f4:	88bb      	ldrh	r3, [r7, #4]
 80072f6:	2b7f      	cmp	r3, #127	; 0x7f
 80072f8:	d855      	bhi.n	80073a6 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	887b      	ldrh	r3, [r7, #2]
 80072fe:	4413      	add	r3, r2
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	dd03      	ble.n	800730c <ST7735_FillRectangle1+0x3c>
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800730a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800730c:	88ba      	ldrh	r2, [r7, #4]
 800730e:	883b      	ldrh	r3, [r7, #0]
 8007310:	4413      	add	r3, r2
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	dd03      	ble.n	800731e <ST7735_FillRectangle1+0x4e>
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800731c:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 800731e:	f7ff fcef 	bl	8006d00 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	b2d8      	uxtb	r0, r3
 8007326:	88bb      	ldrh	r3, [r7, #4]
 8007328:	b2d9      	uxtb	r1, r3
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	887b      	ldrh	r3, [r7, #2]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	4413      	add	r3, r2
 8007334:	b2db      	uxtb	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b2dc      	uxtb	r4, r3
 800733a:	88bb      	ldrh	r3, [r7, #4]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	883b      	ldrh	r3, [r7, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4413      	add	r3, r2
 8007344:	b2db      	uxtb	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b2db      	uxtb	r3, r3
 800734a:	4622      	mov	r2, r4
 800734c:	f7ff fd85 	bl	8006e5a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8007350:	8c3b      	ldrh	r3, [r7, #32]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	b2db      	uxtb	r3, r3
 8007358:	733b      	strb	r3, [r7, #12]
 800735a:	8c3b      	ldrh	r3, [r7, #32]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8007360:	2201      	movs	r2, #1
 8007362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007366:	4812      	ldr	r0, [pc, #72]	; (80073b0 <ST7735_FillRectangle1+0xe0>)
 8007368:	f003 fe24 	bl	800afb4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800736c:	883b      	ldrh	r3, [r7, #0]
 800736e:	80bb      	strh	r3, [r7, #4]
 8007370:	e013      	b.n	800739a <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8007372:	887b      	ldrh	r3, [r7, #2]
 8007374:	80fb      	strh	r3, [r7, #6]
 8007376:	e00a      	b.n	800738e <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007378:	f107 010c 	add.w	r1, r7, #12
 800737c:	f04f 33ff 	mov.w	r3, #4294967295
 8007380:	2202      	movs	r2, #2
 8007382:	480c      	ldr	r0, [pc, #48]	; (80073b4 <ST7735_FillRectangle1+0xe4>)
 8007384:	f006 fc52 	bl	800dc2c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	3b01      	subs	r3, #1
 800738c:	80fb      	strh	r3, [r7, #6]
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f1      	bne.n	8007378 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8007394:	88bb      	ldrh	r3, [r7, #4]
 8007396:	3b01      	subs	r3, #1
 8007398:	80bb      	strh	r3, [r7, #4]
 800739a:	88bb      	ldrh	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e8      	bne.n	8007372 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 80073a0:	f7ff fcba 	bl	8006d18 <ST7735_Unselect1>
 80073a4:	e000      	b.n	80073a8 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80073a6:	bf00      	nop
}
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd90      	pop	{r4, r7, pc}
 80073ae:	bf00      	nop
 80073b0:	58021800 	.word	0x58021800
 80073b4:	24000260 	.word	0x24000260

080073b8 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	4623      	mov	r3, r4
 80073c8:	80fb      	strh	r3, [r7, #6]
 80073ca:	4603      	mov	r3, r0
 80073cc:	80bb      	strh	r3, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	807b      	strh	r3, [r7, #2]
 80073d2:	4613      	mov	r3, r2
 80073d4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b7f      	cmp	r3, #127	; 0x7f
 80073da:	d86e      	bhi.n	80074ba <ST7735_FillRectangleNSS+0x102>
 80073dc:	88bb      	ldrh	r3, [r7, #4]
 80073de:	2b7f      	cmp	r3, #127	; 0x7f
 80073e0:	d86b      	bhi.n	80074ba <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	4413      	add	r3, r2
 80073e8:	2b80      	cmp	r3, #128	; 0x80
 80073ea:	dd03      	ble.n	80073f4 <ST7735_FillRectangleNSS+0x3c>
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80073f2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80073f4:	88ba      	ldrh	r2, [r7, #4]
 80073f6:	883b      	ldrh	r3, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	2b80      	cmp	r3, #128	; 0x80
 80073fc:	dd03      	ble.n	8007406 <ST7735_FillRectangleNSS+0x4e>
 80073fe:	88bb      	ldrh	r3, [r7, #4]
 8007400:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007404:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8007406:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 800740e:	f7ff fc5f 	bl	8006cd0 <ST7735_Select>
 8007412:	e005      	b.n	8007420 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8007414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 800741c:	f7ff fc70 	bl	8006d00 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	b2d8      	uxtb	r0, r3
 8007424:	88bb      	ldrh	r3, [r7, #4]
 8007426:	b2d9      	uxtb	r1, r3
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4413      	add	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b2dc      	uxtb	r4, r3
 8007438:	88bb      	ldrh	r3, [r7, #4]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	883b      	ldrh	r3, [r7, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4413      	add	r3, r2
 8007442:	b2db      	uxtb	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	4622      	mov	r2, r4
 800744a:	f7ff fd06 	bl	8006e5a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800744e:	8c3b      	ldrh	r3, [r7, #32]
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	b29b      	uxth	r3, r3
 8007454:	b2db      	uxtb	r3, r3
 8007456:	733b      	strb	r3, [r7, #12]
 8007458:	8c3b      	ldrh	r3, [r7, #32]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800745e:	2201      	movs	r2, #1
 8007460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007464:	4817      	ldr	r0, [pc, #92]	; (80074c4 <ST7735_FillRectangleNSS+0x10c>)
 8007466:	f003 fda5 	bl	800afb4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800746a:	883b      	ldrh	r3, [r7, #0]
 800746c:	80bb      	strh	r3, [r7, #4]
 800746e:	e013      	b.n	8007498 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	80fb      	strh	r3, [r7, #6]
 8007474:	e00a      	b.n	800748c <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007476:	f107 010c 	add.w	r1, r7, #12
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	2202      	movs	r2, #2
 8007480:	4811      	ldr	r0, [pc, #68]	; (80074c8 <ST7735_FillRectangleNSS+0x110>)
 8007482:	f006 fbd3 	bl	800dc2c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	3b01      	subs	r3, #1
 800748a:	80fb      	strh	r3, [r7, #6]
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f1      	bne.n	8007476 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8007492:	88bb      	ldrh	r3, [r7, #4]
 8007494:	3b01      	subs	r3, #1
 8007496:	80bb      	strh	r3, [r7, #4]
 8007498:	88bb      	ldrh	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e8      	bne.n	8007470 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 800749e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 80074a6:	f7ff fc1f 	bl	8006ce8 <ST7735_Unselect>
 80074aa:	e007      	b.n	80074bc <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 80074ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d103      	bne.n	80074bc <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 80074b4:	f7ff fc30 	bl	8006d18 <ST7735_Unselect1>
 80074b8:	e000      	b.n	80074bc <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80074ba:	bf00      	nop
	}
}
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd90      	pop	{r4, r7, pc}
 80074c2:	bf00      	nop
 80074c4:	58021800 	.word	0x58021800
 80074c8:	24000260 	.word	0x24000260

080074cc <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	2280      	movs	r2, #128	; 0x80
 80074de:	2100      	movs	r1, #0
 80074e0:	2000      	movs	r0, #0
 80074e2:	f7ff fe81 	bl	80071e8 <ST7735_FillRectangle>
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	4603      	mov	r3, r0
 80074f6:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	2280      	movs	r2, #128	; 0x80
 8007500:	2100      	movs	r1, #0
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff fee4 	bl	80072d0 <ST7735_FillRectangle1>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <HAL_MspInit+0x30>)
 8007518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800751c:	4a08      	ldr	r2, [pc, #32]	; (8007540 <HAL_MspInit+0x30>)
 800751e:	f043 0302 	orr.w	r3, r3, #2
 8007522:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_MspInit+0x30>)
 8007528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	58024400 	.word	0x58024400

08007544 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	; 0x38
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800754c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	605a      	str	r2, [r3, #4]
 8007556:	609a      	str	r2, [r3, #8]
 8007558:	60da      	str	r2, [r3, #12]
 800755a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a59      	ldr	r2, [pc, #356]	; (80076c8 <HAL_ETH_MspInit+0x184>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f040 80ab 	bne.w	80076be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007568:	4b58      	ldr	r3, [pc, #352]	; (80076cc <HAL_ETH_MspInit+0x188>)
 800756a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800756e:	4a57      	ldr	r2, [pc, #348]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007574:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007578:	4b54      	ldr	r3, [pc, #336]	; (80076cc <HAL_ETH_MspInit+0x188>)
 800757a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800757e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007582:	623b      	str	r3, [r7, #32]
 8007584:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007586:	4b51      	ldr	r3, [pc, #324]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800758c:	4a4f      	ldr	r2, [pc, #316]	; (80076cc <HAL_ETH_MspInit+0x188>)
 800758e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007592:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007596:	4b4d      	ldr	r3, [pc, #308]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800759c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a0:	61fb      	str	r3, [r7, #28]
 80075a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80075a4:	4b49      	ldr	r3, [pc, #292]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075aa:	4a48      	ldr	r2, [pc, #288]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80075b4:	4b45      	ldr	r3, [pc, #276]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075c2:	4b42      	ldr	r3, [pc, #264]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c8:	4a40      	ldr	r2, [pc, #256]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075d2:	4b3e      	ldr	r3, [pc, #248]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e0:	4b3a      	ldr	r3, [pc, #232]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075e6:	4a39      	ldr	r2, [pc, #228]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075f0:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_ETH_MspInit+0x188>)
 80075f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075fe:	4b33      	ldr	r3, [pc, #204]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007604:	4a31      	ldr	r2, [pc, #196]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007606:	f043 0302 	orr.w	r3, r3, #2
 800760a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800760e:	4b2f      	ldr	r3, [pc, #188]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <HAL_ETH_MspInit+0x188>)
 800761e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <HAL_ETH_MspInit+0x188>)
 8007624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <HAL_ETH_MspInit+0x188>)
 800762e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800763a:	2332      	movs	r3, #50	; 0x32
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763e:	2302      	movs	r3, #2
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007646:	2300      	movs	r3, #0
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800764a:	230b      	movs	r3, #11
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800764e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007652:	4619      	mov	r1, r3
 8007654:	481e      	ldr	r0, [pc, #120]	; (80076d0 <HAL_ETH_MspInit+0x18c>)
 8007656:	f003 fae5 	bl	800ac24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800765a:	2386      	movs	r3, #134	; 0x86
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765e:	2302      	movs	r3, #2
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007662:	2300      	movs	r3, #0
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007666:	2300      	movs	r3, #0
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800766a:	230b      	movs	r3, #11
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007672:	4619      	mov	r1, r3
 8007674:	4817      	ldr	r0, [pc, #92]	; (80076d4 <HAL_ETH_MspInit+0x190>)
 8007676:	f003 fad5 	bl	800ac24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800767a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007680:	2302      	movs	r3, #2
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	2300      	movs	r3, #0
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007688:	2300      	movs	r3, #0
 800768a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800768c:	230b      	movs	r3, #11
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007694:	4619      	mov	r1, r3
 8007696:	4810      	ldr	r0, [pc, #64]	; (80076d8 <HAL_ETH_MspInit+0x194>)
 8007698:	f003 fac4 	bl	800ac24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800769c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a2:	2302      	movs	r3, #2
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076aa:	2300      	movs	r3, #0
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076ae:	230b      	movs	r3, #11
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b6:	4619      	mov	r1, r3
 80076b8:	4808      	ldr	r0, [pc, #32]	; (80076dc <HAL_ETH_MspInit+0x198>)
 80076ba:	f003 fab3 	bl	800ac24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80076be:	bf00      	nop
 80076c0:	3738      	adds	r7, #56	; 0x38
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40028000 	.word	0x40028000
 80076cc:	58024400 	.word	0x58024400
 80076d0:	58020800 	.word	0x58020800
 80076d4:	58020000 	.word	0x58020000
 80076d8:	58020400 	.word	0x58020400
 80076dc:	58021800 	.word	0x58021800

080076e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e8:	f107 0314 	add.w	r3, r7, #20
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <HAL_SPI_MspInit+0xc8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d14d      	bne.n	800779e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007702:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007708:	4a28      	ldr	r2, [pc, #160]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 800770a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007712:	4b26      	ldr	r3, [pc, #152]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007720:	4b22      	ldr	r3, [pc, #136]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007726:	4a21      	ldr	r2, [pc, #132]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007730:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800773e:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007744:	4a19      	ldr	r2, [pc, #100]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800774e:	4b17      	ldr	r3, [pc, #92]	; (80077ac <HAL_SPI_MspInit+0xcc>)
 8007750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800775c:	2304      	movs	r3, #4
 800775e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007760:	2302      	movs	r3, #2
 8007762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007764:	2302      	movs	r3, #2
 8007766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007768:	2300      	movs	r3, #0
 800776a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800776c:	2307      	movs	r3, #7
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	4619      	mov	r1, r3
 8007776:	480e      	ldr	r0, [pc, #56]	; (80077b0 <HAL_SPI_MspInit+0xd0>)
 8007778:	f003 fa54 	bl	800ac24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800777c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007782:	2302      	movs	r3, #2
 8007784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007786:	2302      	movs	r3, #2
 8007788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800778a:	2300      	movs	r3, #0
 800778c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800778e:	2306      	movs	r3, #6
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	4806      	ldr	r0, [pc, #24]	; (80077b4 <HAL_SPI_MspInit+0xd4>)
 800779a:	f003 fa43 	bl	800ac24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800779e:	bf00      	nop
 80077a0:	3728      	adds	r7, #40	; 0x28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	40003c00 	.word	0x40003c00
 80077ac:	58024400 	.word	0x58024400
 80077b0:	58020400 	.word	0x58020400
 80077b4:	58020800 	.word	0x58020800

080077b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0e      	ldr	r2, [pc, #56]	; (8007800 <HAL_TIM_Base_MspInit+0x48>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d116      	bne.n	80077f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <HAL_TIM_Base_MspInit+0x4c>)
 80077cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077d0:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <HAL_TIM_Base_MspInit+0x4c>)
 80077d2:	f043 0320 	orr.w	r3, r3, #32
 80077d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80077da:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <HAL_TIM_Base_MspInit+0x4c>)
 80077dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80077e8:	2200      	movs	r2, #0
 80077ea:	2100      	movs	r1, #0
 80077ec:	2037      	movs	r0, #55	; 0x37
 80077ee:	f000 fb9a 	bl	8007f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80077f2:	2037      	movs	r0, #55	; 0x37
 80077f4:	f000 fbb1 	bl	8007f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40001400 	.word	0x40001400
 8007804:	58024400 	.word	0x58024400

08007808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0b8      	sub	sp, #224	; 0xe0
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007810:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	609a      	str	r2, [r3, #8]
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007820:	f107 0310 	add.w	r3, r7, #16
 8007824:	22bc      	movs	r2, #188	; 0xbc
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f009 f88d 	bl	8010948 <memset>
  if(huart->Instance==USART3)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a57      	ldr	r2, [pc, #348]	; (8007990 <HAL_UART_MspInit+0x188>)
 8007834:	4293      	cmp	r3, r2
 8007836:	f040 80a6 	bne.w	8007986 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800783a:	2302      	movs	r3, #2
 800783c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800783e:	2300      	movs	r3, #0
 8007840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007844:	f107 0310 	add.w	r3, r7, #16
 8007848:	4618      	mov	r0, r3
 800784a:	f004 fd81 	bl	800c350 <HAL_RCCEx_PeriphCLKConfig>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8007854:	f7ff fa36 	bl	8006cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007858:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <HAL_UART_MspInit+0x18c>)
 800785a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800785e:	4a4d      	ldr	r2, [pc, #308]	; (8007994 <HAL_UART_MspInit+0x18c>)
 8007860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007868:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_UART_MspInit+0x18c>)
 800786a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800786e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007876:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_UART_MspInit+0x18c>)
 8007878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800787c:	4a45      	ldr	r2, [pc, #276]	; (8007994 <HAL_UART_MspInit+0x18c>)
 800787e:	f043 0308 	orr.w	r3, r3, #8
 8007882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007886:	4b43      	ldr	r3, [pc, #268]	; (8007994 <HAL_UART_MspInit+0x18c>)
 8007888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007894:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	2302      	movs	r3, #2
 800789e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80078ae:	2307      	movs	r3, #7
 80078b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80078b8:	4619      	mov	r1, r3
 80078ba:	4837      	ldr	r0, [pc, #220]	; (8007998 <HAL_UART_MspInit+0x190>)
 80078bc:	f003 f9b2 	bl	800ac24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80078c0:	4b36      	ldr	r3, [pc, #216]	; (800799c <HAL_UART_MspInit+0x194>)
 80078c2:	4a37      	ldr	r2, [pc, #220]	; (80079a0 <HAL_UART_MspInit+0x198>)
 80078c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80078c6:	4b35      	ldr	r3, [pc, #212]	; (800799c <HAL_UART_MspInit+0x194>)
 80078c8:	222d      	movs	r2, #45	; 0x2d
 80078ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078cc:	4b33      	ldr	r3, [pc, #204]	; (800799c <HAL_UART_MspInit+0x194>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078d2:	4b32      	ldr	r3, [pc, #200]	; (800799c <HAL_UART_MspInit+0x194>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078d8:	4b30      	ldr	r3, [pc, #192]	; (800799c <HAL_UART_MspInit+0x194>)
 80078da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078e0:	4b2e      	ldr	r3, [pc, #184]	; (800799c <HAL_UART_MspInit+0x194>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078e6:	4b2d      	ldr	r3, [pc, #180]	; (800799c <HAL_UART_MspInit+0x194>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80078ec:	4b2b      	ldr	r3, [pc, #172]	; (800799c <HAL_UART_MspInit+0x194>)
 80078ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078f4:	4b29      	ldr	r3, [pc, #164]	; (800799c <HAL_UART_MspInit+0x194>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078fa:	4b28      	ldr	r3, [pc, #160]	; (800799c <HAL_UART_MspInit+0x194>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007900:	4826      	ldr	r0, [pc, #152]	; (800799c <HAL_UART_MspInit+0x194>)
 8007902:	f000 fb45 	bl	8007f90 <HAL_DMA_Init>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800790c:	f7ff f9da 	bl	8006cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a22      	ldr	r2, [pc, #136]	; (800799c <HAL_UART_MspInit+0x194>)
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c
 8007916:	4a21      	ldr	r2, [pc, #132]	; (800799c <HAL_UART_MspInit+0x194>)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800791c:	4b21      	ldr	r3, [pc, #132]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800791e:	4a22      	ldr	r2, [pc, #136]	; (80079a8 <HAL_UART_MspInit+0x1a0>)
 8007920:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007924:	222e      	movs	r2, #46	; 0x2e
 8007926:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007930:	2200      	movs	r2, #0
 8007932:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007934:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800793a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800793c:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800793e:	2200      	movs	r2, #0
 8007940:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007942:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007948:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800794a:	2200      	movs	r2, #0
 800794c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800794e:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007950:	2200      	movs	r2, #0
 8007952:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007954:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007956:	2200      	movs	r2, #0
 8007958:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800795a:	4812      	ldr	r0, [pc, #72]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800795c:	f000 fb18 	bl	8007f90 <HAL_DMA_Init>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8007966:	f7ff f9ad 	bl	8006cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 800796e:	679a      	str	r2, [r3, #120]	; 0x78
 8007970:	4a0c      	ldr	r2, [pc, #48]	; (80079a4 <HAL_UART_MspInit+0x19c>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007976:	2200      	movs	r2, #0
 8007978:	2100      	movs	r1, #0
 800797a:	2027      	movs	r0, #39	; 0x27
 800797c:	f000 fad3 	bl	8007f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007980:	2027      	movs	r0, #39	; 0x27
 8007982:	f000 faea 	bl	8007f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007986:	bf00      	nop
 8007988:	37e0      	adds	r7, #224	; 0xe0
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40004800 	.word	0x40004800
 8007994:	58024400 	.word	0x58024400
 8007998:	58020c00 	.word	0x58020c00
 800799c:	240003c4 	.word	0x240003c4
 80079a0:	40020028 	.word	0x40020028
 80079a4:	2400043c 	.word	0x2400043c
 80079a8:	40020070 	.word	0x40020070

080079ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b4:	f107 0314 	add.w	r3, r7, #20
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <HAL_PCD_MspInit+0xa8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d13d      	bne.n	8007a4a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80079ce:	f003 fcf5 	bl	800b3bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d2:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 80079d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 80079e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80079f0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80079f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f6:	2302      	movs	r3, #2
 80079f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079fe:	2300      	movs	r3, #0
 8007a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007a02:	230a      	movs	r3, #10
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a06:	f107 0314 	add.w	r3, r7, #20
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4813      	ldr	r0, [pc, #76]	; (8007a5c <HAL_PCD_MspInit+0xb0>)
 8007a0e:	f003 f909 	bl	800ac24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a20:	f107 0314 	add.w	r3, r7, #20
 8007a24:	4619      	mov	r1, r3
 8007a26:	480d      	ldr	r0, [pc, #52]	; (8007a5c <HAL_PCD_MspInit+0xb0>)
 8007a28:	f003 f8fc 	bl	800ac24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 8007a2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 8007a34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <HAL_PCD_MspInit+0xac>)
 8007a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007a4a:	bf00      	nop
 8007a4c:	3728      	adds	r7, #40	; 0x28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40080000 	.word	0x40080000
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	58020000 	.word	0x58020000

08007a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007a64:	e7fe      	b.n	8007a64 <NMI_Handler+0x4>

08007a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a66:	b480      	push	{r7}
 8007a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a6a:	e7fe      	b.n	8007a6a <HardFault_Handler+0x4>

08007a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a70:	e7fe      	b.n	8007a70 <MemManage_Handler+0x4>

08007a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a76:	e7fe      	b.n	8007a76 <BusFault_Handler+0x4>

08007a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a7c:	e7fe      	b.n	8007a7c <UsageFault_Handler+0x4>

08007a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a9e:	bf00      	nop
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007aac:	f000 f8fc 	bl	8007ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ab0:	bf00      	nop
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007ab8:	4802      	ldr	r0, [pc, #8]	; (8007ac4 <DMA1_Stream1_IRQHandler+0x10>)
 8007aba:	f001 fb29 	bl	8009110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	240003c4 	.word	0x240003c4

08007ac8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007acc:	4802      	ldr	r0, [pc, #8]	; (8007ad8 <DMA1_Stream4_IRQHandler+0x10>)
 8007ace:	f001 fb1f 	bl	8009110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	2400043c 	.word	0x2400043c

08007adc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007ae0:	4802      	ldr	r0, [pc, #8]	; (8007aec <USART3_IRQHandler+0x10>)
 8007ae2:	f006 ff59 	bl	800e998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007ae6:	bf00      	nop
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	24000334 	.word	0x24000334

08007af0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007af4:	4802      	ldr	r0, [pc, #8]	; (8007b00 <TIM7_IRQHandler+0x10>)
 8007af6:	f006 fc72 	bl	800e3de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	240002e8 	.word	0x240002e8

08007b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b0c:	4a14      	ldr	r2, [pc, #80]	; (8007b60 <_sbrk+0x5c>)
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <_sbrk+0x60>)
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b18:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <_sbrk+0x64>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b20:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <_sbrk+0x64>)
 8007b22:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <_sbrk+0x68>)
 8007b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <_sbrk+0x64>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d207      	bcs.n	8007b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b34:	f008 fede 	bl	80108f4 <__errno>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	220c      	movs	r2, #12
 8007b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b42:	e009      	b.n	8007b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <_sbrk+0x64>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <_sbrk+0x64>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4413      	add	r3, r2
 8007b52:	4a05      	ldr	r2, [pc, #20]	; (8007b68 <_sbrk+0x64>)
 8007b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	24080000 	.word	0x24080000
 8007b64:	00000400 	.word	0x00000400
 8007b68:	24000eb0 	.word	0x24000eb0
 8007b6c:	24000ec8 	.word	0x24000ec8

08007b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ba8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007b74:	f7fe fc0e 	bl	8006394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b78:	480c      	ldr	r0, [pc, #48]	; (8007bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007b7a:	490d      	ldr	r1, [pc, #52]	; (8007bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007b7c:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007b80:	e002      	b.n	8007b88 <LoopCopyDataInit>

08007b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b86:	3304      	adds	r3, #4

08007b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b8c:	d3f9      	bcc.n	8007b82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b8e:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007b90:	4c0a      	ldr	r4, [pc, #40]	; (8007bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b94:	e001      	b.n	8007b9a <LoopFillZerobss>

08007b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b98:	3204      	adds	r2, #4

08007b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b9c:	d3fb      	bcc.n	8007b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b9e:	f008 feaf 	bl	8010900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ba2:	f7fe fc8d 	bl	80064c0 <main>
  bx  lr
 8007ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ba8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007bac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007bb0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8007bb4:	08012c98 	.word	0x08012c98
  ldr r2, =_sbss
 8007bb8:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8007bbc:	24000ec8 	.word	0x24000ec8

08007bc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007bc0:	e7fe      	b.n	8007bc0 <ADC3_IRQHandler>
	...

08007bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007bca:	2003      	movs	r0, #3
 8007bcc:	f000 f9a0 	bl	8007f10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007bd0:	f004 f9e8 	bl	800bfa4 <HAL_RCC_GetSysClockFreq>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <HAL_Init+0x68>)
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	4913      	ldr	r1, [pc, #76]	; (8007c30 <HAL_Init+0x6c>)
 8007be2:	5ccb      	ldrb	r3, [r1, r3]
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bee:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <HAL_Init+0x68>)
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	4a0e      	ldr	r2, [pc, #56]	; (8007c30 <HAL_Init+0x6c>)
 8007bf8:	5cd3      	ldrb	r3, [r2, r3]
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	4a0b      	ldr	r2, [pc, #44]	; (8007c34 <HAL_Init+0x70>)
 8007c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c08:	4a0b      	ldr	r2, [pc, #44]	; (8007c38 <HAL_Init+0x74>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f000 f814 	bl	8007c3c <HAL_InitTick>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e002      	b.n	8007c24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007c1e:	f7ff fc77 	bl	8007510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	58024400 	.word	0x58024400
 8007c30:	080116d4 	.word	0x080116d4
 8007c34:	24000008 	.word	0x24000008
 8007c38:	24000004 	.word	0x24000004

08007c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007c44:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <HAL_InitTick+0x60>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e021      	b.n	8007c94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007c50:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <HAL_InitTick+0x64>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <HAL_InitTick+0x60>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f985 	bl	8007f76 <HAL_SYSTICK_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e00e      	b.n	8007c94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b0f      	cmp	r3, #15
 8007c7a:	d80a      	bhi.n	8007c92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	f000 f94f 	bl	8007f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c88:	4a06      	ldr	r2, [pc, #24]	; (8007ca4 <HAL_InitTick+0x68>)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e000      	b.n	8007c94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	24000020 	.word	0x24000020
 8007ca0:	24000004 	.word	0x24000004
 8007ca4:	2400001c 	.word	0x2400001c

08007ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <HAL_IncTick+0x20>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <HAL_IncTick+0x24>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <HAL_IncTick+0x24>)
 8007cba:	6013      	str	r3, [r2, #0]
}
 8007cbc:	bf00      	nop
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	24000020 	.word	0x24000020
 8007ccc:	24000eb4 	.word	0x24000eb4

08007cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8007cd4:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <HAL_GetTick+0x14>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	24000eb4 	.word	0x24000eb4

08007ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cf0:	f7ff ffee 	bl	8007cd0 <HAL_GetTick>
 8007cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d005      	beq.n	8007d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_Delay+0x44>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d0e:	bf00      	nop
 8007d10:	f7ff ffde 	bl	8007cd0 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d8f7      	bhi.n	8007d10 <HAL_Delay+0x28>
  {
  }
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	24000020 	.word	0x24000020

08007d30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <HAL_GetREVID+0x14>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	0c1b      	lsrs	r3, r3, #16
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	5c001000 	.word	0x5c001000

08007d48 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007d50:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d58:	4904      	ldr	r1, [pc, #16]	; (8007d6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	604b      	str	r3, [r1, #4]
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	58000400 	.word	0x58000400

08007d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <__NVIC_SetPriorityGrouping+0x40>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <__NVIC_SetPriorityGrouping+0x44>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d9e:	4a04      	ldr	r2, [pc, #16]	; (8007db0 <__NVIC_SetPriorityGrouping+0x40>)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	60d3      	str	r3, [r2, #12]
}
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	e000ed00 	.word	0xe000ed00
 8007db4:	05fa0000 	.word	0x05fa0000

08007db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	0a1b      	lsrs	r3, r3, #8
 8007dc2:	f003 0307 	and.w	r3, r3, #7
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	e000ed00 	.word	0xe000ed00

08007dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	db0b      	blt.n	8007dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	f003 021f 	and.w	r2, r3, #31
 8007dec:	4907      	ldr	r1, [pc, #28]	; (8007e0c <__NVIC_EnableIRQ+0x38>)
 8007dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	2001      	movs	r0, #1
 8007df6:	fa00 f202 	lsl.w	r2, r0, r2
 8007dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	e000e100 	.word	0xe000e100

08007e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	6039      	str	r1, [r7, #0]
 8007e1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db0a      	blt.n	8007e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	490c      	ldr	r1, [pc, #48]	; (8007e5c <__NVIC_SetPriority+0x4c>)
 8007e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e2e:	0112      	lsls	r2, r2, #4
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	440b      	add	r3, r1
 8007e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e38:	e00a      	b.n	8007e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	4908      	ldr	r1, [pc, #32]	; (8007e60 <__NVIC_SetPriority+0x50>)
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	3b04      	subs	r3, #4
 8007e48:	0112      	lsls	r2, r2, #4
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	761a      	strb	r2, [r3, #24]
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	e000e100 	.word	0xe000e100
 8007e60:	e000ed00 	.word	0xe000ed00

08007e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b089      	sub	sp, #36	; 0x24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f1c3 0307 	rsb	r3, r3, #7
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	bf28      	it	cs
 8007e82:	2304      	movcs	r3, #4
 8007e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d902      	bls.n	8007e94 <NVIC_EncodePriority+0x30>
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	3b03      	subs	r3, #3
 8007e92:	e000      	b.n	8007e96 <NVIC_EncodePriority+0x32>
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e98:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	43da      	mvns	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	401a      	ands	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007eac:	f04f 31ff 	mov.w	r1, #4294967295
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	43d9      	mvns	r1, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ebc:	4313      	orrs	r3, r2
         );
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3724      	adds	r7, #36	; 0x24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007edc:	d301      	bcc.n	8007ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e00f      	b.n	8007f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <SysTick_Config+0x40>)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007eea:	210f      	movs	r1, #15
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	f7ff ff8e 	bl	8007e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <SysTick_Config+0x40>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007efa:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <SysTick_Config+0x40>)
 8007efc:	2207      	movs	r2, #7
 8007efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	e000e010 	.word	0xe000e010

08007f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff29 	bl	8007d70 <__NVIC_SetPriorityGrouping>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007f34:	f7ff ff40 	bl	8007db8 <__NVIC_GetPriorityGrouping>
 8007f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	f7ff ff90 	bl	8007e64 <NVIC_EncodePriority>
 8007f44:	4602      	mov	r2, r0
 8007f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff ff5f 	bl	8007e10 <__NVIC_SetPriority>
}
 8007f52:	bf00      	nop
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	4603      	mov	r3, r0
 8007f62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ff33 	bl	8007dd4 <__NVIC_EnableIRQ>
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff ffa4 	bl	8007ecc <SysTick_Config>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007f98:	f7ff fe9a 	bl	8007cd0 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e316      	b.n	80085d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a66      	ldr	r2, [pc, #408]	; (8008148 <HAL_DMA_Init+0x1b8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d04a      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a65      	ldr	r2, [pc, #404]	; (800814c <HAL_DMA_Init+0x1bc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d045      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a63      	ldr	r2, [pc, #396]	; (8008150 <HAL_DMA_Init+0x1c0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d040      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a62      	ldr	r2, [pc, #392]	; (8008154 <HAL_DMA_Init+0x1c4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d03b      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a60      	ldr	r2, [pc, #384]	; (8008158 <HAL_DMA_Init+0x1c8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d036      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a5f      	ldr	r2, [pc, #380]	; (800815c <HAL_DMA_Init+0x1cc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d031      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a5d      	ldr	r2, [pc, #372]	; (8008160 <HAL_DMA_Init+0x1d0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02c      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a5c      	ldr	r2, [pc, #368]	; (8008164 <HAL_DMA_Init+0x1d4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d027      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a5a      	ldr	r2, [pc, #360]	; (8008168 <HAL_DMA_Init+0x1d8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a59      	ldr	r2, [pc, #356]	; (800816c <HAL_DMA_Init+0x1dc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01d      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a57      	ldr	r2, [pc, #348]	; (8008170 <HAL_DMA_Init+0x1e0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a56      	ldr	r2, [pc, #344]	; (8008174 <HAL_DMA_Init+0x1e4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a54      	ldr	r2, [pc, #336]	; (8008178 <HAL_DMA_Init+0x1e8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a53      	ldr	r2, [pc, #332]	; (800817c <HAL_DMA_Init+0x1ec>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a51      	ldr	r2, [pc, #324]	; (8008180 <HAL_DMA_Init+0x1f0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_DMA_Init+0xb8>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a50      	ldr	r2, [pc, #320]	; (8008184 <HAL_DMA_Init+0x1f4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <HAL_DMA_Init+0xbc>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_DMA_Init+0xbe>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 813b 	beq.w	80082ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a37      	ldr	r2, [pc, #220]	; (8008148 <HAL_DMA_Init+0x1b8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d04a      	beq.n	8008104 <HAL_DMA_Init+0x174>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a36      	ldr	r2, [pc, #216]	; (800814c <HAL_DMA_Init+0x1bc>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d045      	beq.n	8008104 <HAL_DMA_Init+0x174>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_DMA_Init+0x1c0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d040      	beq.n	8008104 <HAL_DMA_Init+0x174>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a33      	ldr	r2, [pc, #204]	; (8008154 <HAL_DMA_Init+0x1c4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d03b      	beq.n	8008104 <HAL_DMA_Init+0x174>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a31      	ldr	r2, [pc, #196]	; (8008158 <HAL_DMA_Init+0x1c8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d036      	beq.n	8008104 <HAL_DMA_Init+0x174>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a30      	ldr	r2, [pc, #192]	; (800815c <HAL_DMA_Init+0x1cc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d031      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2e      	ldr	r2, [pc, #184]	; (8008160 <HAL_DMA_Init+0x1d0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d02c      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <HAL_DMA_Init+0x1d4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d027      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2b      	ldr	r2, [pc, #172]	; (8008168 <HAL_DMA_Init+0x1d8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d022      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2a      	ldr	r2, [pc, #168]	; (800816c <HAL_DMA_Init+0x1dc>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d01d      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a28      	ldr	r2, [pc, #160]	; (8008170 <HAL_DMA_Init+0x1e0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a27      	ldr	r2, [pc, #156]	; (8008174 <HAL_DMA_Init+0x1e4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a25      	ldr	r2, [pc, #148]	; (8008178 <HAL_DMA_Init+0x1e8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a24      	ldr	r2, [pc, #144]	; (800817c <HAL_DMA_Init+0x1ec>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a22      	ldr	r2, [pc, #136]	; (8008180 <HAL_DMA_Init+0x1f0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_DMA_Init+0x174>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <HAL_DMA_Init+0x1f4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d108      	bne.n	8008116 <HAL_DMA_Init+0x186>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e007      	b.n	8008126 <HAL_DMA_Init+0x196>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008126:	e02f      	b.n	8008188 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008128:	f7ff fdd2 	bl	8007cd0 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b05      	cmp	r3, #5
 8008134:	d928      	bls.n	8008188 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2203      	movs	r2, #3
 8008140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e246      	b.n	80085d6 <HAL_DMA_Init+0x646>
 8008148:	40020010 	.word	0x40020010
 800814c:	40020028 	.word	0x40020028
 8008150:	40020040 	.word	0x40020040
 8008154:	40020058 	.word	0x40020058
 8008158:	40020070 	.word	0x40020070
 800815c:	40020088 	.word	0x40020088
 8008160:	400200a0 	.word	0x400200a0
 8008164:	400200b8 	.word	0x400200b8
 8008168:	40020410 	.word	0x40020410
 800816c:	40020428 	.word	0x40020428
 8008170:	40020440 	.word	0x40020440
 8008174:	40020458 	.word	0x40020458
 8008178:	40020470 	.word	0x40020470
 800817c:	40020488 	.word	0x40020488
 8008180:	400204a0 	.word	0x400204a0
 8008184:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1c8      	bne.n	8008128 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4b83      	ldr	r3, [pc, #524]	; (80083b0 <HAL_DMA_Init+0x420>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80081ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d107      	bne.n	80081ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	4313      	orrs	r3, r2
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80081ec:	4b71      	ldr	r3, [pc, #452]	; (80083b4 <HAL_DMA_Init+0x424>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	4b71      	ldr	r3, [pc, #452]	; (80083b8 <HAL_DMA_Init+0x428>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f8:	d328      	bcc.n	800824c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b28      	cmp	r3, #40	; 0x28
 8008200:	d903      	bls.n	800820a <HAL_DMA_Init+0x27a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2b2e      	cmp	r3, #46	; 0x2e
 8008208:	d917      	bls.n	800823a <HAL_DMA_Init+0x2aa>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b3e      	cmp	r3, #62	; 0x3e
 8008210:	d903      	bls.n	800821a <HAL_DMA_Init+0x28a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b42      	cmp	r3, #66	; 0x42
 8008218:	d90f      	bls.n	800823a <HAL_DMA_Init+0x2aa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b46      	cmp	r3, #70	; 0x46
 8008220:	d903      	bls.n	800822a <HAL_DMA_Init+0x29a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b48      	cmp	r3, #72	; 0x48
 8008228:	d907      	bls.n	800823a <HAL_DMA_Init+0x2aa>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b4e      	cmp	r3, #78	; 0x4e
 8008230:	d905      	bls.n	800823e <HAL_DMA_Init+0x2ae>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b52      	cmp	r3, #82	; 0x52
 8008238:	d801      	bhi.n	800823e <HAL_DMA_Init+0x2ae>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <HAL_DMA_Init+0x2b0>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b04      	cmp	r3, #4
 8008274:	d117      	bne.n	80082a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00e      	beq.n	80082a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 ff1d 	bl	800a0c8 <DMA_CheckFifoParam>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d008      	beq.n	80082a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e197      	b.n	80085d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fe58 	bl	8009f64 <DMA_CalcBaseAndBitshift>
 80082b4:	4603      	mov	r3, r0
 80082b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	223f      	movs	r2, #63	; 0x3f
 80082c2:	409a      	lsls	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	e0cd      	b.n	8008466 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a3b      	ldr	r2, [pc, #236]	; (80083bc <HAL_DMA_Init+0x42c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d022      	beq.n	800831a <HAL_DMA_Init+0x38a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a39      	ldr	r2, [pc, #228]	; (80083c0 <HAL_DMA_Init+0x430>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01d      	beq.n	800831a <HAL_DMA_Init+0x38a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a38      	ldr	r2, [pc, #224]	; (80083c4 <HAL_DMA_Init+0x434>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d018      	beq.n	800831a <HAL_DMA_Init+0x38a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a36      	ldr	r2, [pc, #216]	; (80083c8 <HAL_DMA_Init+0x438>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <HAL_DMA_Init+0x38a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a35      	ldr	r2, [pc, #212]	; (80083cc <HAL_DMA_Init+0x43c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00e      	beq.n	800831a <HAL_DMA_Init+0x38a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <HAL_DMA_Init+0x440>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d009      	beq.n	800831a <HAL_DMA_Init+0x38a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a32      	ldr	r2, [pc, #200]	; (80083d4 <HAL_DMA_Init+0x444>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <HAL_DMA_Init+0x38a>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a30      	ldr	r2, [pc, #192]	; (80083d8 <HAL_DMA_Init+0x448>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d101      	bne.n	800831e <HAL_DMA_Init+0x38e>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <HAL_DMA_Init+0x390>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8097 	beq.w	8008454 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a24      	ldr	r2, [pc, #144]	; (80083bc <HAL_DMA_Init+0x42c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d021      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <HAL_DMA_Init+0x430>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01c      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a21      	ldr	r2, [pc, #132]	; (80083c4 <HAL_DMA_Init+0x434>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d017      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <HAL_DMA_Init+0x438>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d012      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <HAL_DMA_Init+0x43c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00d      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1c      	ldr	r2, [pc, #112]	; (80083d0 <HAL_DMA_Init+0x440>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d008      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <HAL_DMA_Init+0x444>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <HAL_DMA_Init+0x3e4>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a19      	ldr	r2, [pc, #100]	; (80083d8 <HAL_DMA_Init+0x448>)
 8008372:	4293      	cmp	r3, r2
 8008374:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4b12      	ldr	r3, [pc, #72]	; (80083dc <HAL_DMA_Init+0x44c>)
 8008392:	4013      	ands	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d020      	beq.n	80083e0 <HAL_DMA_Init+0x450>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b80      	cmp	r3, #128	; 0x80
 80083a4:	d102      	bne.n	80083ac <HAL_DMA_Init+0x41c>
 80083a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083aa:	e01a      	b.n	80083e2 <HAL_DMA_Init+0x452>
 80083ac:	2300      	movs	r3, #0
 80083ae:	e018      	b.n	80083e2 <HAL_DMA_Init+0x452>
 80083b0:	fe10803f 	.word	0xfe10803f
 80083b4:	5c001000 	.word	0x5c001000
 80083b8:	ffff0000 	.word	0xffff0000
 80083bc:	58025408 	.word	0x58025408
 80083c0:	5802541c 	.word	0x5802541c
 80083c4:	58025430 	.word	0x58025430
 80083c8:	58025444 	.word	0x58025444
 80083cc:	58025458 	.word	0x58025458
 80083d0:	5802546c 	.word	0x5802546c
 80083d4:	58025480 	.word	0x58025480
 80083d8:	58025494 	.word	0x58025494
 80083dc:	fffe000f 	.word	0xfffe000f
 80083e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	68d2      	ldr	r2, [r2, #12]
 80083e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80083f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80083f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008410:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	4b6e      	ldr	r3, [pc, #440]	; (80085e0 <HAL_DMA_Init+0x650>)
 8008428:	4413      	add	r3, r2
 800842a:	4a6e      	ldr	r2, [pc, #440]	; (80085e4 <HAL_DMA_Init+0x654>)
 800842c:	fba2 2303 	umull	r2, r3, r2, r3
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	009a      	lsls	r2, r3, #2
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 fd93 	bl	8009f64 <DMA_CalcBaseAndBitshift>
 800843e:	4603      	mov	r3, r0
 8008440:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	2201      	movs	r2, #1
 800844c:	409a      	lsls	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	e008      	b.n	8008466 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2240      	movs	r2, #64	; 0x40
 8008458:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2203      	movs	r2, #3
 800845e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e0b7      	b.n	80085d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a5f      	ldr	r2, [pc, #380]	; (80085e8 <HAL_DMA_Init+0x658>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d072      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a5d      	ldr	r2, [pc, #372]	; (80085ec <HAL_DMA_Init+0x65c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d06d      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a5c      	ldr	r2, [pc, #368]	; (80085f0 <HAL_DMA_Init+0x660>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d068      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a5a      	ldr	r2, [pc, #360]	; (80085f4 <HAL_DMA_Init+0x664>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d063      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a59      	ldr	r2, [pc, #356]	; (80085f8 <HAL_DMA_Init+0x668>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d05e      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a57      	ldr	r2, [pc, #348]	; (80085fc <HAL_DMA_Init+0x66c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d059      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a56      	ldr	r2, [pc, #344]	; (8008600 <HAL_DMA_Init+0x670>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d054      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a54      	ldr	r2, [pc, #336]	; (8008604 <HAL_DMA_Init+0x674>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d04f      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a53      	ldr	r2, [pc, #332]	; (8008608 <HAL_DMA_Init+0x678>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d04a      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a51      	ldr	r2, [pc, #324]	; (800860c <HAL_DMA_Init+0x67c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d045      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a50      	ldr	r2, [pc, #320]	; (8008610 <HAL_DMA_Init+0x680>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d040      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a4e      	ldr	r2, [pc, #312]	; (8008614 <HAL_DMA_Init+0x684>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d03b      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a4d      	ldr	r2, [pc, #308]	; (8008618 <HAL_DMA_Init+0x688>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d036      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a4b      	ldr	r2, [pc, #300]	; (800861c <HAL_DMA_Init+0x68c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d031      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a4a      	ldr	r2, [pc, #296]	; (8008620 <HAL_DMA_Init+0x690>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d02c      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a48      	ldr	r2, [pc, #288]	; (8008624 <HAL_DMA_Init+0x694>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d027      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a47      	ldr	r2, [pc, #284]	; (8008628 <HAL_DMA_Init+0x698>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d022      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a45      	ldr	r2, [pc, #276]	; (800862c <HAL_DMA_Init+0x69c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d01d      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a44      	ldr	r2, [pc, #272]	; (8008630 <HAL_DMA_Init+0x6a0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d018      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a42      	ldr	r2, [pc, #264]	; (8008634 <HAL_DMA_Init+0x6a4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a41      	ldr	r2, [pc, #260]	; (8008638 <HAL_DMA_Init+0x6a8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00e      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a3f      	ldr	r2, [pc, #252]	; (800863c <HAL_DMA_Init+0x6ac>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d009      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3e      	ldr	r2, [pc, #248]	; (8008640 <HAL_DMA_Init+0x6b0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d004      	beq.n	8008556 <HAL_DMA_Init+0x5c6>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3c      	ldr	r2, [pc, #240]	; (8008644 <HAL_DMA_Init+0x6b4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d101      	bne.n	800855a <HAL_DMA_Init+0x5ca>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <HAL_DMA_Init+0x5cc>
 800855a:	2300      	movs	r3, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d032      	beq.n	80085c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fe2d 	bl	800a1c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d102      	bne.n	8008574 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008588:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d010      	beq.n	80085b4 <HAL_DMA_Init+0x624>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b08      	cmp	r3, #8
 8008598:	d80c      	bhi.n	80085b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 feaa 	bl	800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085b0:	605a      	str	r2, [r3, #4]
 80085b2:	e008      	b.n	80085c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	a7fdabf8 	.word	0xa7fdabf8
 80085e4:	cccccccd 	.word	0xcccccccd
 80085e8:	40020010 	.word	0x40020010
 80085ec:	40020028 	.word	0x40020028
 80085f0:	40020040 	.word	0x40020040
 80085f4:	40020058 	.word	0x40020058
 80085f8:	40020070 	.word	0x40020070
 80085fc:	40020088 	.word	0x40020088
 8008600:	400200a0 	.word	0x400200a0
 8008604:	400200b8 	.word	0x400200b8
 8008608:	40020410 	.word	0x40020410
 800860c:	40020428 	.word	0x40020428
 8008610:	40020440 	.word	0x40020440
 8008614:	40020458 	.word	0x40020458
 8008618:	40020470 	.word	0x40020470
 800861c:	40020488 	.word	0x40020488
 8008620:	400204a0 	.word	0x400204a0
 8008624:	400204b8 	.word	0x400204b8
 8008628:	58025408 	.word	0x58025408
 800862c:	5802541c 	.word	0x5802541c
 8008630:	58025430 	.word	0x58025430
 8008634:	58025444 	.word	0x58025444
 8008638:	58025458 	.word	0x58025458
 800863c:	5802546c 	.word	0x5802546c
 8008640:	58025480 	.word	0x58025480
 8008644:	58025494 	.word	0x58025494

08008648 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008650:	f7ff fb3e 	bl	8007cd0 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e2dc      	b.n	8008c1a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d008      	beq.n	800867e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2280      	movs	r2, #128	; 0x80
 8008670:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e2cd      	b.n	8008c1a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a76      	ldr	r2, [pc, #472]	; (800885c <HAL_DMA_Abort+0x214>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d04a      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a74      	ldr	r2, [pc, #464]	; (8008860 <HAL_DMA_Abort+0x218>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d045      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a73      	ldr	r2, [pc, #460]	; (8008864 <HAL_DMA_Abort+0x21c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d040      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a71      	ldr	r2, [pc, #452]	; (8008868 <HAL_DMA_Abort+0x220>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d03b      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a70      	ldr	r2, [pc, #448]	; (800886c <HAL_DMA_Abort+0x224>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d036      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a6e      	ldr	r2, [pc, #440]	; (8008870 <HAL_DMA_Abort+0x228>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d031      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a6d      	ldr	r2, [pc, #436]	; (8008874 <HAL_DMA_Abort+0x22c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d02c      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a6b      	ldr	r2, [pc, #428]	; (8008878 <HAL_DMA_Abort+0x230>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d027      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a6a      	ldr	r2, [pc, #424]	; (800887c <HAL_DMA_Abort+0x234>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d022      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a68      	ldr	r2, [pc, #416]	; (8008880 <HAL_DMA_Abort+0x238>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01d      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a67      	ldr	r2, [pc, #412]	; (8008884 <HAL_DMA_Abort+0x23c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d018      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a65      	ldr	r2, [pc, #404]	; (8008888 <HAL_DMA_Abort+0x240>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d013      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a64      	ldr	r2, [pc, #400]	; (800888c <HAL_DMA_Abort+0x244>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00e      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a62      	ldr	r2, [pc, #392]	; (8008890 <HAL_DMA_Abort+0x248>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d009      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a61      	ldr	r2, [pc, #388]	; (8008894 <HAL_DMA_Abort+0x24c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d004      	beq.n	800871e <HAL_DMA_Abort+0xd6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a5f      	ldr	r2, [pc, #380]	; (8008898 <HAL_DMA_Abort+0x250>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <HAL_DMA_Abort+0xda>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <HAL_DMA_Abort+0xdc>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d013      	beq.n	8008750 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 021e 	bic.w	r2, r2, #30
 8008736:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695a      	ldr	r2, [r3, #20]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008746:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	617b      	str	r3, [r7, #20]
 800874e:	e00a      	b.n	8008766 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 020e 	bic.w	r2, r2, #14
 800875e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a3c      	ldr	r2, [pc, #240]	; (800885c <HAL_DMA_Abort+0x214>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d072      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a3a      	ldr	r2, [pc, #232]	; (8008860 <HAL_DMA_Abort+0x218>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d06d      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a39      	ldr	r2, [pc, #228]	; (8008864 <HAL_DMA_Abort+0x21c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d068      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a37      	ldr	r2, [pc, #220]	; (8008868 <HAL_DMA_Abort+0x220>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d063      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a36      	ldr	r2, [pc, #216]	; (800886c <HAL_DMA_Abort+0x224>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d05e      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a34      	ldr	r2, [pc, #208]	; (8008870 <HAL_DMA_Abort+0x228>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d059      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a33      	ldr	r2, [pc, #204]	; (8008874 <HAL_DMA_Abort+0x22c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d054      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a31      	ldr	r2, [pc, #196]	; (8008878 <HAL_DMA_Abort+0x230>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d04f      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a30      	ldr	r2, [pc, #192]	; (800887c <HAL_DMA_Abort+0x234>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d04a      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a2e      	ldr	r2, [pc, #184]	; (8008880 <HAL_DMA_Abort+0x238>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d045      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a2d      	ldr	r2, [pc, #180]	; (8008884 <HAL_DMA_Abort+0x23c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d040      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a2b      	ldr	r2, [pc, #172]	; (8008888 <HAL_DMA_Abort+0x240>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d03b      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a2a      	ldr	r2, [pc, #168]	; (800888c <HAL_DMA_Abort+0x244>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d036      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a28      	ldr	r2, [pc, #160]	; (8008890 <HAL_DMA_Abort+0x248>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d031      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a27      	ldr	r2, [pc, #156]	; (8008894 <HAL_DMA_Abort+0x24c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d02c      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a25      	ldr	r2, [pc, #148]	; (8008898 <HAL_DMA_Abort+0x250>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d027      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a24      	ldr	r2, [pc, #144]	; (800889c <HAL_DMA_Abort+0x254>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d022      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a22      	ldr	r2, [pc, #136]	; (80088a0 <HAL_DMA_Abort+0x258>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d01d      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <HAL_DMA_Abort+0x25c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d018      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a1f      	ldr	r2, [pc, #124]	; (80088a8 <HAL_DMA_Abort+0x260>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d013      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <HAL_DMA_Abort+0x264>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00e      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1c      	ldr	r2, [pc, #112]	; (80088b0 <HAL_DMA_Abort+0x268>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d009      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <HAL_DMA_Abort+0x26c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d004      	beq.n	8008856 <HAL_DMA_Abort+0x20e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a19      	ldr	r2, [pc, #100]	; (80088b8 <HAL_DMA_Abort+0x270>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d132      	bne.n	80088bc <HAL_DMA_Abort+0x274>
 8008856:	2301      	movs	r3, #1
 8008858:	e031      	b.n	80088be <HAL_DMA_Abort+0x276>
 800885a:	bf00      	nop
 800885c:	40020010 	.word	0x40020010
 8008860:	40020028 	.word	0x40020028
 8008864:	40020040 	.word	0x40020040
 8008868:	40020058 	.word	0x40020058
 800886c:	40020070 	.word	0x40020070
 8008870:	40020088 	.word	0x40020088
 8008874:	400200a0 	.word	0x400200a0
 8008878:	400200b8 	.word	0x400200b8
 800887c:	40020410 	.word	0x40020410
 8008880:	40020428 	.word	0x40020428
 8008884:	40020440 	.word	0x40020440
 8008888:	40020458 	.word	0x40020458
 800888c:	40020470 	.word	0x40020470
 8008890:	40020488 	.word	0x40020488
 8008894:	400204a0 	.word	0x400204a0
 8008898:	400204b8 	.word	0x400204b8
 800889c:	58025408 	.word	0x58025408
 80088a0:	5802541c 	.word	0x5802541c
 80088a4:	58025430 	.word	0x58025430
 80088a8:	58025444 	.word	0x58025444
 80088ac:	58025458 	.word	0x58025458
 80088b0:	5802546c 	.word	0x5802546c
 80088b4:	58025480 	.word	0x58025480
 80088b8:	58025494 	.word	0x58025494
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a6d      	ldr	r2, [pc, #436]	; (8008a8c <HAL_DMA_Abort+0x444>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d04a      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a6b      	ldr	r2, [pc, #428]	; (8008a90 <HAL_DMA_Abort+0x448>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d045      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a6a      	ldr	r2, [pc, #424]	; (8008a94 <HAL_DMA_Abort+0x44c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d040      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a68      	ldr	r2, [pc, #416]	; (8008a98 <HAL_DMA_Abort+0x450>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d03b      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a67      	ldr	r2, [pc, #412]	; (8008a9c <HAL_DMA_Abort+0x454>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d036      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a65      	ldr	r2, [pc, #404]	; (8008aa0 <HAL_DMA_Abort+0x458>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d031      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a64      	ldr	r2, [pc, #400]	; (8008aa4 <HAL_DMA_Abort+0x45c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d02c      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a62      	ldr	r2, [pc, #392]	; (8008aa8 <HAL_DMA_Abort+0x460>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d027      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a61      	ldr	r2, [pc, #388]	; (8008aac <HAL_DMA_Abort+0x464>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d022      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a5f      	ldr	r2, [pc, #380]	; (8008ab0 <HAL_DMA_Abort+0x468>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01d      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a5e      	ldr	r2, [pc, #376]	; (8008ab4 <HAL_DMA_Abort+0x46c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d018      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a5c      	ldr	r2, [pc, #368]	; (8008ab8 <HAL_DMA_Abort+0x470>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a5b      	ldr	r2, [pc, #364]	; (8008abc <HAL_DMA_Abort+0x474>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00e      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a59      	ldr	r2, [pc, #356]	; (8008ac0 <HAL_DMA_Abort+0x478>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d009      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a58      	ldr	r2, [pc, #352]	; (8008ac4 <HAL_DMA_Abort+0x47c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <HAL_DMA_Abort+0x32a>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a56      	ldr	r2, [pc, #344]	; (8008ac8 <HAL_DMA_Abort+0x480>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <HAL_DMA_Abort+0x33c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	e007      	b.n	8008994 <HAL_DMA_Abort+0x34c>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008994:	e013      	b.n	80089be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008996:	f7ff f99b 	bl	8007cd0 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	d90c      	bls.n	80089be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2203      	movs	r2, #3
 80089ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e12d      	b.n	8008c1a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e5      	bne.n	8008996 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <HAL_DMA_Abort+0x444>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d04a      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <HAL_DMA_Abort+0x448>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d045      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a2c      	ldr	r2, [pc, #176]	; (8008a94 <HAL_DMA_Abort+0x44c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d040      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <HAL_DMA_Abort+0x450>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d03b      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a29      	ldr	r2, [pc, #164]	; (8008a9c <HAL_DMA_Abort+0x454>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d036      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a27      	ldr	r2, [pc, #156]	; (8008aa0 <HAL_DMA_Abort+0x458>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d031      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a26      	ldr	r2, [pc, #152]	; (8008aa4 <HAL_DMA_Abort+0x45c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d02c      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a24      	ldr	r2, [pc, #144]	; (8008aa8 <HAL_DMA_Abort+0x460>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d027      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a23      	ldr	r2, [pc, #140]	; (8008aac <HAL_DMA_Abort+0x464>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d022      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a21      	ldr	r2, [pc, #132]	; (8008ab0 <HAL_DMA_Abort+0x468>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01d      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a20      	ldr	r2, [pc, #128]	; (8008ab4 <HAL_DMA_Abort+0x46c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d018      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <HAL_DMA_Abort+0x470>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <HAL_DMA_Abort+0x474>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00e      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <HAL_DMA_Abort+0x478>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d009      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <HAL_DMA_Abort+0x47c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d004      	beq.n	8008a6a <HAL_DMA_Abort+0x422>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <HAL_DMA_Abort+0x480>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d101      	bne.n	8008a6e <HAL_DMA_Abort+0x426>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <HAL_DMA_Abort+0x428>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d02b      	beq.n	8008acc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	223f      	movs	r2, #63	; 0x3f
 8008a84:	409a      	lsls	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	609a      	str	r2, [r3, #8]
 8008a8a:	e02a      	b.n	8008ae2 <HAL_DMA_Abort+0x49a>
 8008a8c:	40020010 	.word	0x40020010
 8008a90:	40020028 	.word	0x40020028
 8008a94:	40020040 	.word	0x40020040
 8008a98:	40020058 	.word	0x40020058
 8008a9c:	40020070 	.word	0x40020070
 8008aa0:	40020088 	.word	0x40020088
 8008aa4:	400200a0 	.word	0x400200a0
 8008aa8:	400200b8 	.word	0x400200b8
 8008aac:	40020410 	.word	0x40020410
 8008ab0:	40020428 	.word	0x40020428
 8008ab4:	40020440 	.word	0x40020440
 8008ab8:	40020458 	.word	0x40020458
 8008abc:	40020470 	.word	0x40020470
 8008ac0:	40020488 	.word	0x40020488
 8008ac4:	400204a0 	.word	0x400204a0
 8008ac8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2201      	movs	r2, #1
 8008adc:	409a      	lsls	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a4f      	ldr	r2, [pc, #316]	; (8008c24 <HAL_DMA_Abort+0x5dc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d072      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a4d      	ldr	r2, [pc, #308]	; (8008c28 <HAL_DMA_Abort+0x5e0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d06d      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a4c      	ldr	r2, [pc, #304]	; (8008c2c <HAL_DMA_Abort+0x5e4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d068      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <HAL_DMA_Abort+0x5e8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d063      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a49      	ldr	r2, [pc, #292]	; (8008c34 <HAL_DMA_Abort+0x5ec>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d05e      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a47      	ldr	r2, [pc, #284]	; (8008c38 <HAL_DMA_Abort+0x5f0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d059      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a46      	ldr	r2, [pc, #280]	; (8008c3c <HAL_DMA_Abort+0x5f4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d054      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a44      	ldr	r2, [pc, #272]	; (8008c40 <HAL_DMA_Abort+0x5f8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d04f      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a43      	ldr	r2, [pc, #268]	; (8008c44 <HAL_DMA_Abort+0x5fc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d04a      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a41      	ldr	r2, [pc, #260]	; (8008c48 <HAL_DMA_Abort+0x600>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d045      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a40      	ldr	r2, [pc, #256]	; (8008c4c <HAL_DMA_Abort+0x604>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d040      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a3e      	ldr	r2, [pc, #248]	; (8008c50 <HAL_DMA_Abort+0x608>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d03b      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a3d      	ldr	r2, [pc, #244]	; (8008c54 <HAL_DMA_Abort+0x60c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d036      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a3b      	ldr	r2, [pc, #236]	; (8008c58 <HAL_DMA_Abort+0x610>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d031      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a3a      	ldr	r2, [pc, #232]	; (8008c5c <HAL_DMA_Abort+0x614>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d02c      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a38      	ldr	r2, [pc, #224]	; (8008c60 <HAL_DMA_Abort+0x618>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d027      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a37      	ldr	r2, [pc, #220]	; (8008c64 <HAL_DMA_Abort+0x61c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d022      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a35      	ldr	r2, [pc, #212]	; (8008c68 <HAL_DMA_Abort+0x620>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01d      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a34      	ldr	r2, [pc, #208]	; (8008c6c <HAL_DMA_Abort+0x624>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d018      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a32      	ldr	r2, [pc, #200]	; (8008c70 <HAL_DMA_Abort+0x628>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a31      	ldr	r2, [pc, #196]	; (8008c74 <HAL_DMA_Abort+0x62c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00e      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a2f      	ldr	r2, [pc, #188]	; (8008c78 <HAL_DMA_Abort+0x630>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a2e      	ldr	r2, [pc, #184]	; (8008c7c <HAL_DMA_Abort+0x634>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d004      	beq.n	8008bd2 <HAL_DMA_Abort+0x58a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a2c      	ldr	r2, [pc, #176]	; (8008c80 <HAL_DMA_Abort+0x638>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_DMA_Abort+0x58e>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <HAL_DMA_Abort+0x590>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d015      	beq.n	8008c08 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008be4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00c      	beq.n	8008c08 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bfc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c06:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40020010 	.word	0x40020010
 8008c28:	40020028 	.word	0x40020028
 8008c2c:	40020040 	.word	0x40020040
 8008c30:	40020058 	.word	0x40020058
 8008c34:	40020070 	.word	0x40020070
 8008c38:	40020088 	.word	0x40020088
 8008c3c:	400200a0 	.word	0x400200a0
 8008c40:	400200b8 	.word	0x400200b8
 8008c44:	40020410 	.word	0x40020410
 8008c48:	40020428 	.word	0x40020428
 8008c4c:	40020440 	.word	0x40020440
 8008c50:	40020458 	.word	0x40020458
 8008c54:	40020470 	.word	0x40020470
 8008c58:	40020488 	.word	0x40020488
 8008c5c:	400204a0 	.word	0x400204a0
 8008c60:	400204b8 	.word	0x400204b8
 8008c64:	58025408 	.word	0x58025408
 8008c68:	5802541c 	.word	0x5802541c
 8008c6c:	58025430 	.word	0x58025430
 8008c70:	58025444 	.word	0x58025444
 8008c74:	58025458 	.word	0x58025458
 8008c78:	5802546c 	.word	0x5802546c
 8008c7c:	58025480 	.word	0x58025480
 8008c80:	58025494 	.word	0x58025494

08008c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e237      	b.n	8009106 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d004      	beq.n	8008cac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2280      	movs	r2, #128	; 0x80
 8008ca6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e22c      	b.n	8009106 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a5c      	ldr	r2, [pc, #368]	; (8008e24 <HAL_DMA_Abort_IT+0x1a0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d04a      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a5b      	ldr	r2, [pc, #364]	; (8008e28 <HAL_DMA_Abort_IT+0x1a4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d045      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a59      	ldr	r2, [pc, #356]	; (8008e2c <HAL_DMA_Abort_IT+0x1a8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d040      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a58      	ldr	r2, [pc, #352]	; (8008e30 <HAL_DMA_Abort_IT+0x1ac>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d03b      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a56      	ldr	r2, [pc, #344]	; (8008e34 <HAL_DMA_Abort_IT+0x1b0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d036      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a55      	ldr	r2, [pc, #340]	; (8008e38 <HAL_DMA_Abort_IT+0x1b4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d031      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a53      	ldr	r2, [pc, #332]	; (8008e3c <HAL_DMA_Abort_IT+0x1b8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d02c      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a52      	ldr	r2, [pc, #328]	; (8008e40 <HAL_DMA_Abort_IT+0x1bc>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d027      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a50      	ldr	r2, [pc, #320]	; (8008e44 <HAL_DMA_Abort_IT+0x1c0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d022      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a4f      	ldr	r2, [pc, #316]	; (8008e48 <HAL_DMA_Abort_IT+0x1c4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d01d      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a4d      	ldr	r2, [pc, #308]	; (8008e4c <HAL_DMA_Abort_IT+0x1c8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d018      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a4c      	ldr	r2, [pc, #304]	; (8008e50 <HAL_DMA_Abort_IT+0x1cc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d013      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a4a      	ldr	r2, [pc, #296]	; (8008e54 <HAL_DMA_Abort_IT+0x1d0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00e      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a49      	ldr	r2, [pc, #292]	; (8008e58 <HAL_DMA_Abort_IT+0x1d4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d009      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a47      	ldr	r2, [pc, #284]	; (8008e5c <HAL_DMA_Abort_IT+0x1d8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d004      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a46      	ldr	r2, [pc, #280]	; (8008e60 <HAL_DMA_Abort_IT+0x1dc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d101      	bne.n	8008d50 <HAL_DMA_Abort_IT+0xcc>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <HAL_DMA_Abort_IT+0xce>
 8008d50:	2300      	movs	r3, #0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8086 	beq.w	8008e64 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2f      	ldr	r2, [pc, #188]	; (8008e24 <HAL_DMA_Abort_IT+0x1a0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d04a      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2e      	ldr	r2, [pc, #184]	; (8008e28 <HAL_DMA_Abort_IT+0x1a4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d045      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a2c      	ldr	r2, [pc, #176]	; (8008e2c <HAL_DMA_Abort_IT+0x1a8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d040      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <HAL_DMA_Abort_IT+0x1ac>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d03b      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a29      	ldr	r2, [pc, #164]	; (8008e34 <HAL_DMA_Abort_IT+0x1b0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d036      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <HAL_DMA_Abort_IT+0x1b4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d031      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a26      	ldr	r2, [pc, #152]	; (8008e3c <HAL_DMA_Abort_IT+0x1b8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d02c      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a25      	ldr	r2, [pc, #148]	; (8008e40 <HAL_DMA_Abort_IT+0x1bc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d027      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a23      	ldr	r2, [pc, #140]	; (8008e44 <HAL_DMA_Abort_IT+0x1c0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d022      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_DMA_Abort_IT+0x1c4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d01d      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a20      	ldr	r2, [pc, #128]	; (8008e4c <HAL_DMA_Abort_IT+0x1c8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d018      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a1f      	ldr	r2, [pc, #124]	; (8008e50 <HAL_DMA_Abort_IT+0x1cc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <HAL_DMA_Abort_IT+0x1d0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00e      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a1c      	ldr	r2, [pc, #112]	; (8008e58 <HAL_DMA_Abort_IT+0x1d4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d009      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <HAL_DMA_Abort_IT+0x1d8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x17c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a19      	ldr	r2, [pc, #100]	; (8008e60 <HAL_DMA_Abort_IT+0x1dc>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d108      	bne.n	8008e12 <HAL_DMA_Abort_IT+0x18e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e178      	b.n	8009104 <HAL_DMA_Abort_IT+0x480>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e16f      	b.n	8009104 <HAL_DMA_Abort_IT+0x480>
 8008e24:	40020010 	.word	0x40020010
 8008e28:	40020028 	.word	0x40020028
 8008e2c:	40020040 	.word	0x40020040
 8008e30:	40020058 	.word	0x40020058
 8008e34:	40020070 	.word	0x40020070
 8008e38:	40020088 	.word	0x40020088
 8008e3c:	400200a0 	.word	0x400200a0
 8008e40:	400200b8 	.word	0x400200b8
 8008e44:	40020410 	.word	0x40020410
 8008e48:	40020428 	.word	0x40020428
 8008e4c:	40020440 	.word	0x40020440
 8008e50:	40020458 	.word	0x40020458
 8008e54:	40020470 	.word	0x40020470
 8008e58:	40020488 	.word	0x40020488
 8008e5c:	400204a0 	.word	0x400204a0
 8008e60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 020e 	bic.w	r2, r2, #14
 8008e72:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a6c      	ldr	r2, [pc, #432]	; (800902c <HAL_DMA_Abort_IT+0x3a8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d04a      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a6b      	ldr	r2, [pc, #428]	; (8009030 <HAL_DMA_Abort_IT+0x3ac>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d045      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a69      	ldr	r2, [pc, #420]	; (8009034 <HAL_DMA_Abort_IT+0x3b0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d040      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a68      	ldr	r2, [pc, #416]	; (8009038 <HAL_DMA_Abort_IT+0x3b4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d03b      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a66      	ldr	r2, [pc, #408]	; (800903c <HAL_DMA_Abort_IT+0x3b8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d036      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a65      	ldr	r2, [pc, #404]	; (8009040 <HAL_DMA_Abort_IT+0x3bc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d031      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a63      	ldr	r2, [pc, #396]	; (8009044 <HAL_DMA_Abort_IT+0x3c0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d02c      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a62      	ldr	r2, [pc, #392]	; (8009048 <HAL_DMA_Abort_IT+0x3c4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d027      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a60      	ldr	r2, [pc, #384]	; (800904c <HAL_DMA_Abort_IT+0x3c8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d022      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a5f      	ldr	r2, [pc, #380]	; (8009050 <HAL_DMA_Abort_IT+0x3cc>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d01d      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a5d      	ldr	r2, [pc, #372]	; (8009054 <HAL_DMA_Abort_IT+0x3d0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d018      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a5c      	ldr	r2, [pc, #368]	; (8009058 <HAL_DMA_Abort_IT+0x3d4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d013      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a5a      	ldr	r2, [pc, #360]	; (800905c <HAL_DMA_Abort_IT+0x3d8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00e      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a59      	ldr	r2, [pc, #356]	; (8009060 <HAL_DMA_Abort_IT+0x3dc>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d009      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a57      	ldr	r2, [pc, #348]	; (8009064 <HAL_DMA_Abort_IT+0x3e0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d004      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x290>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a56      	ldr	r2, [pc, #344]	; (8009068 <HAL_DMA_Abort_IT+0x3e4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d108      	bne.n	8008f26 <HAL_DMA_Abort_IT+0x2a2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e007      	b.n	8008f36 <HAL_DMA_Abort_IT+0x2b2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a3c      	ldr	r2, [pc, #240]	; (800902c <HAL_DMA_Abort_IT+0x3a8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d072      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a3a      	ldr	r2, [pc, #232]	; (8009030 <HAL_DMA_Abort_IT+0x3ac>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d06d      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a39      	ldr	r2, [pc, #228]	; (8009034 <HAL_DMA_Abort_IT+0x3b0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d068      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a37      	ldr	r2, [pc, #220]	; (8009038 <HAL_DMA_Abort_IT+0x3b4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d063      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a36      	ldr	r2, [pc, #216]	; (800903c <HAL_DMA_Abort_IT+0x3b8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d05e      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a34      	ldr	r2, [pc, #208]	; (8009040 <HAL_DMA_Abort_IT+0x3bc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d059      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a33      	ldr	r2, [pc, #204]	; (8009044 <HAL_DMA_Abort_IT+0x3c0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d054      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a31      	ldr	r2, [pc, #196]	; (8009048 <HAL_DMA_Abort_IT+0x3c4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d04f      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a30      	ldr	r2, [pc, #192]	; (800904c <HAL_DMA_Abort_IT+0x3c8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d04a      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a2e      	ldr	r2, [pc, #184]	; (8009050 <HAL_DMA_Abort_IT+0x3cc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d045      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <HAL_DMA_Abort_IT+0x3d0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d040      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a2b      	ldr	r2, [pc, #172]	; (8009058 <HAL_DMA_Abort_IT+0x3d4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d03b      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	; (800905c <HAL_DMA_Abort_IT+0x3d8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d036      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a28      	ldr	r2, [pc, #160]	; (8009060 <HAL_DMA_Abort_IT+0x3dc>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d031      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a27      	ldr	r2, [pc, #156]	; (8009064 <HAL_DMA_Abort_IT+0x3e0>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d02c      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a25      	ldr	r2, [pc, #148]	; (8009068 <HAL_DMA_Abort_IT+0x3e4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d027      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a24      	ldr	r2, [pc, #144]	; (800906c <HAL_DMA_Abort_IT+0x3e8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d022      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a22      	ldr	r2, [pc, #136]	; (8009070 <HAL_DMA_Abort_IT+0x3ec>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01d      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a21      	ldr	r2, [pc, #132]	; (8009074 <HAL_DMA_Abort_IT+0x3f0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d018      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1f      	ldr	r2, [pc, #124]	; (8009078 <HAL_DMA_Abort_IT+0x3f4>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1e      	ldr	r2, [pc, #120]	; (800907c <HAL_DMA_Abort_IT+0x3f8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <HAL_DMA_Abort_IT+0x3fc>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d009      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1b      	ldr	r2, [pc, #108]	; (8009084 <HAL_DMA_Abort_IT+0x400>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <HAL_DMA_Abort_IT+0x3a2>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a19      	ldr	r2, [pc, #100]	; (8009088 <HAL_DMA_Abort_IT+0x404>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d132      	bne.n	800908c <HAL_DMA_Abort_IT+0x408>
 8009026:	2301      	movs	r3, #1
 8009028:	e031      	b.n	800908e <HAL_DMA_Abort_IT+0x40a>
 800902a:	bf00      	nop
 800902c:	40020010 	.word	0x40020010
 8009030:	40020028 	.word	0x40020028
 8009034:	40020040 	.word	0x40020040
 8009038:	40020058 	.word	0x40020058
 800903c:	40020070 	.word	0x40020070
 8009040:	40020088 	.word	0x40020088
 8009044:	400200a0 	.word	0x400200a0
 8009048:	400200b8 	.word	0x400200b8
 800904c:	40020410 	.word	0x40020410
 8009050:	40020428 	.word	0x40020428
 8009054:	40020440 	.word	0x40020440
 8009058:	40020458 	.word	0x40020458
 800905c:	40020470 	.word	0x40020470
 8009060:	40020488 	.word	0x40020488
 8009064:	400204a0 	.word	0x400204a0
 8009068:	400204b8 	.word	0x400204b8
 800906c:	58025408 	.word	0x58025408
 8009070:	5802541c 	.word	0x5802541c
 8009074:	58025430 	.word	0x58025430
 8009078:	58025444 	.word	0x58025444
 800907c:	58025458 	.word	0x58025458
 8009080:	5802546c 	.word	0x5802546c
 8009084:	58025480 	.word	0x58025480
 8009088:	58025494 	.word	0x58025494
 800908c:	2300      	movs	r3, #0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d028      	beq.n	80090e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	2201      	movs	r2, #1
 80090b2:	409a      	lsls	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80090c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80090e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop

08009110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800911c:	4b67      	ldr	r3, [pc, #412]	; (80092bc <HAL_DMA_IRQHandler+0x1ac>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a67      	ldr	r2, [pc, #412]	; (80092c0 <HAL_DMA_IRQHandler+0x1b0>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	0a9b      	lsrs	r3, r3, #10
 8009128:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009134:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a5f      	ldr	r2, [pc, #380]	; (80092c4 <HAL_DMA_IRQHandler+0x1b4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d04a      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a5d      	ldr	r2, [pc, #372]	; (80092c8 <HAL_DMA_IRQHandler+0x1b8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d045      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a5c      	ldr	r2, [pc, #368]	; (80092cc <HAL_DMA_IRQHandler+0x1bc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d040      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a5a      	ldr	r2, [pc, #360]	; (80092d0 <HAL_DMA_IRQHandler+0x1c0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d03b      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a59      	ldr	r2, [pc, #356]	; (80092d4 <HAL_DMA_IRQHandler+0x1c4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d036      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a57      	ldr	r2, [pc, #348]	; (80092d8 <HAL_DMA_IRQHandler+0x1c8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d031      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a56      	ldr	r2, [pc, #344]	; (80092dc <HAL_DMA_IRQHandler+0x1cc>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d02c      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a54      	ldr	r2, [pc, #336]	; (80092e0 <HAL_DMA_IRQHandler+0x1d0>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d027      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a53      	ldr	r2, [pc, #332]	; (80092e4 <HAL_DMA_IRQHandler+0x1d4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d022      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a51      	ldr	r2, [pc, #324]	; (80092e8 <HAL_DMA_IRQHandler+0x1d8>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01d      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a50      	ldr	r2, [pc, #320]	; (80092ec <HAL_DMA_IRQHandler+0x1dc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d018      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a4e      	ldr	r2, [pc, #312]	; (80092f0 <HAL_DMA_IRQHandler+0x1e0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a4d      	ldr	r2, [pc, #308]	; (80092f4 <HAL_DMA_IRQHandler+0x1e4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00e      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a4b      	ldr	r2, [pc, #300]	; (80092f8 <HAL_DMA_IRQHandler+0x1e8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d009      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a4a      	ldr	r2, [pc, #296]	; (80092fc <HAL_DMA_IRQHandler+0x1ec>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d004      	beq.n	80091e2 <HAL_DMA_IRQHandler+0xd2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a48      	ldr	r2, [pc, #288]	; (8009300 <HAL_DMA_IRQHandler+0x1f0>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d101      	bne.n	80091e6 <HAL_DMA_IRQHandler+0xd6>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e000      	b.n	80091e8 <HAL_DMA_IRQHandler+0xd8>
 80091e6:	2300      	movs	r3, #0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 842b 	beq.w	8009a44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f2:	f003 031f 	and.w	r3, r3, #31
 80091f6:	2208      	movs	r2, #8
 80091f8:	409a      	lsls	r2, r3
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	4013      	ands	r3, r2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 80a2 	beq.w	8009348 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2e      	ldr	r2, [pc, #184]	; (80092c4 <HAL_DMA_IRQHandler+0x1b4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d04a      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a2d      	ldr	r2, [pc, #180]	; (80092c8 <HAL_DMA_IRQHandler+0x1b8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d045      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a2b      	ldr	r2, [pc, #172]	; (80092cc <HAL_DMA_IRQHandler+0x1bc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d040      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a2a      	ldr	r2, [pc, #168]	; (80092d0 <HAL_DMA_IRQHandler+0x1c0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d03b      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a28      	ldr	r2, [pc, #160]	; (80092d4 <HAL_DMA_IRQHandler+0x1c4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d036      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a27      	ldr	r2, [pc, #156]	; (80092d8 <HAL_DMA_IRQHandler+0x1c8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d031      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a25      	ldr	r2, [pc, #148]	; (80092dc <HAL_DMA_IRQHandler+0x1cc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d02c      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a24      	ldr	r2, [pc, #144]	; (80092e0 <HAL_DMA_IRQHandler+0x1d0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d027      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a22      	ldr	r2, [pc, #136]	; (80092e4 <HAL_DMA_IRQHandler+0x1d4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d022      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a21      	ldr	r2, [pc, #132]	; (80092e8 <HAL_DMA_IRQHandler+0x1d8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01d      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <HAL_DMA_IRQHandler+0x1dc>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d018      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1e      	ldr	r2, [pc, #120]	; (80092f0 <HAL_DMA_IRQHandler+0x1e0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a1c      	ldr	r2, [pc, #112]	; (80092f4 <HAL_DMA_IRQHandler+0x1e4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00e      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <HAL_DMA_IRQHandler+0x1e8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d009      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a19      	ldr	r2, [pc, #100]	; (80092fc <HAL_DMA_IRQHandler+0x1ec>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x194>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a18      	ldr	r2, [pc, #96]	; (8009300 <HAL_DMA_IRQHandler+0x1f0>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d12f      	bne.n	8009304 <HAL_DMA_IRQHandler+0x1f4>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bf14      	ite	ne
 80092b2:	2301      	movne	r3, #1
 80092b4:	2300      	moveq	r3, #0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	e02e      	b.n	8009318 <HAL_DMA_IRQHandler+0x208>
 80092ba:	bf00      	nop
 80092bc:	24000004 	.word	0x24000004
 80092c0:	1b4e81b5 	.word	0x1b4e81b5
 80092c4:	40020010 	.word	0x40020010
 80092c8:	40020028 	.word	0x40020028
 80092cc:	40020040 	.word	0x40020040
 80092d0:	40020058 	.word	0x40020058
 80092d4:	40020070 	.word	0x40020070
 80092d8:	40020088 	.word	0x40020088
 80092dc:	400200a0 	.word	0x400200a0
 80092e0:	400200b8 	.word	0x400200b8
 80092e4:	40020410 	.word	0x40020410
 80092e8:	40020428 	.word	0x40020428
 80092ec:	40020440 	.word	0x40020440
 80092f0:	40020458 	.word	0x40020458
 80092f4:	40020470 	.word	0x40020470
 80092f8:	40020488 	.word	0x40020488
 80092fc:	400204a0 	.word	0x400204a0
 8009300:	400204b8 	.word	0x400204b8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf14      	ite	ne
 8009312:	2301      	movne	r3, #1
 8009314:	2300      	moveq	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d015      	beq.n	8009348 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0204 	bic.w	r2, r2, #4
 800932a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009330:	f003 031f 	and.w	r3, r3, #31
 8009334:	2208      	movs	r2, #8
 8009336:	409a      	lsls	r2, r3
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009340:	f043 0201 	orr.w	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934c:	f003 031f 	and.w	r3, r3, #31
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	fa22 f303 	lsr.w	r3, r2, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d06e      	beq.n	800943c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a69      	ldr	r2, [pc, #420]	; (8009508 <HAL_DMA_IRQHandler+0x3f8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d04a      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a67      	ldr	r2, [pc, #412]	; (800950c <HAL_DMA_IRQHandler+0x3fc>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d045      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a66      	ldr	r2, [pc, #408]	; (8009510 <HAL_DMA_IRQHandler+0x400>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d040      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a64      	ldr	r2, [pc, #400]	; (8009514 <HAL_DMA_IRQHandler+0x404>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d03b      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a63      	ldr	r2, [pc, #396]	; (8009518 <HAL_DMA_IRQHandler+0x408>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d036      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a61      	ldr	r2, [pc, #388]	; (800951c <HAL_DMA_IRQHandler+0x40c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d031      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a60      	ldr	r2, [pc, #384]	; (8009520 <HAL_DMA_IRQHandler+0x410>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d02c      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a5e      	ldr	r2, [pc, #376]	; (8009524 <HAL_DMA_IRQHandler+0x414>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d027      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a5d      	ldr	r2, [pc, #372]	; (8009528 <HAL_DMA_IRQHandler+0x418>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d022      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a5b      	ldr	r2, [pc, #364]	; (800952c <HAL_DMA_IRQHandler+0x41c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d01d      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a5a      	ldr	r2, [pc, #360]	; (8009530 <HAL_DMA_IRQHandler+0x420>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d018      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a58      	ldr	r2, [pc, #352]	; (8009534 <HAL_DMA_IRQHandler+0x424>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a57      	ldr	r2, [pc, #348]	; (8009538 <HAL_DMA_IRQHandler+0x428>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d00e      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a55      	ldr	r2, [pc, #340]	; (800953c <HAL_DMA_IRQHandler+0x42c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d009      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a54      	ldr	r2, [pc, #336]	; (8009540 <HAL_DMA_IRQHandler+0x430>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d004      	beq.n	80093fe <HAL_DMA_IRQHandler+0x2ee>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a52      	ldr	r2, [pc, #328]	; (8009544 <HAL_DMA_IRQHandler+0x434>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d10a      	bne.n	8009414 <HAL_DMA_IRQHandler+0x304>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf14      	ite	ne
 800940c:	2301      	movne	r3, #1
 800940e:	2300      	moveq	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	e003      	b.n	800941c <HAL_DMA_IRQHandler+0x30c>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00d      	beq.n	800943c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	2201      	movs	r2, #1
 800942a:	409a      	lsls	r2, r3
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009434:	f043 0202 	orr.w	r2, r3, #2
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	2204      	movs	r2, #4
 8009446:	409a      	lsls	r2, r3
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	4013      	ands	r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 808f 	beq.w	8009570 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a2c      	ldr	r2, [pc, #176]	; (8009508 <HAL_DMA_IRQHandler+0x3f8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d04a      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a2a      	ldr	r2, [pc, #168]	; (800950c <HAL_DMA_IRQHandler+0x3fc>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d045      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a29      	ldr	r2, [pc, #164]	; (8009510 <HAL_DMA_IRQHandler+0x400>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d040      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a27      	ldr	r2, [pc, #156]	; (8009514 <HAL_DMA_IRQHandler+0x404>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d03b      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a26      	ldr	r2, [pc, #152]	; (8009518 <HAL_DMA_IRQHandler+0x408>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d036      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a24      	ldr	r2, [pc, #144]	; (800951c <HAL_DMA_IRQHandler+0x40c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d031      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a23      	ldr	r2, [pc, #140]	; (8009520 <HAL_DMA_IRQHandler+0x410>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d02c      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a21      	ldr	r2, [pc, #132]	; (8009524 <HAL_DMA_IRQHandler+0x414>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d027      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a20      	ldr	r2, [pc, #128]	; (8009528 <HAL_DMA_IRQHandler+0x418>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d022      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1e      	ldr	r2, [pc, #120]	; (800952c <HAL_DMA_IRQHandler+0x41c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01d      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1d      	ldr	r2, [pc, #116]	; (8009530 <HAL_DMA_IRQHandler+0x420>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d018      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <HAL_DMA_IRQHandler+0x424>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d013      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <HAL_DMA_IRQHandler+0x428>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00e      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a18      	ldr	r2, [pc, #96]	; (800953c <HAL_DMA_IRQHandler+0x42c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d009      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a17      	ldr	r2, [pc, #92]	; (8009540 <HAL_DMA_IRQHandler+0x430>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d004      	beq.n	80094f2 <HAL_DMA_IRQHandler+0x3e2>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a15      	ldr	r2, [pc, #84]	; (8009544 <HAL_DMA_IRQHandler+0x434>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d12a      	bne.n	8009548 <HAL_DMA_IRQHandler+0x438>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf14      	ite	ne
 8009500:	2301      	movne	r3, #1
 8009502:	2300      	moveq	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	e023      	b.n	8009550 <HAL_DMA_IRQHandler+0x440>
 8009508:	40020010 	.word	0x40020010
 800950c:	40020028 	.word	0x40020028
 8009510:	40020040 	.word	0x40020040
 8009514:	40020058 	.word	0x40020058
 8009518:	40020070 	.word	0x40020070
 800951c:	40020088 	.word	0x40020088
 8009520:	400200a0 	.word	0x400200a0
 8009524:	400200b8 	.word	0x400200b8
 8009528:	40020410 	.word	0x40020410
 800952c:	40020428 	.word	0x40020428
 8009530:	40020440 	.word	0x40020440
 8009534:	40020458 	.word	0x40020458
 8009538:	40020470 	.word	0x40020470
 800953c:	40020488 	.word	0x40020488
 8009540:	400204a0 	.word	0x400204a0
 8009544:	400204b8 	.word	0x400204b8
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00d      	beq.n	8009570 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2204      	movs	r2, #4
 800955e:	409a      	lsls	r2, r3
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009568:	f043 0204 	orr.w	r2, r3, #4
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009574:	f003 031f 	and.w	r3, r3, #31
 8009578:	2210      	movs	r2, #16
 800957a:	409a      	lsls	r2, r3
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	4013      	ands	r3, r2
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 80a6 	beq.w	80096d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a85      	ldr	r2, [pc, #532]	; (80097a0 <HAL_DMA_IRQHandler+0x690>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d04a      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a83      	ldr	r2, [pc, #524]	; (80097a4 <HAL_DMA_IRQHandler+0x694>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d045      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a82      	ldr	r2, [pc, #520]	; (80097a8 <HAL_DMA_IRQHandler+0x698>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d040      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a80      	ldr	r2, [pc, #512]	; (80097ac <HAL_DMA_IRQHandler+0x69c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d03b      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a7f      	ldr	r2, [pc, #508]	; (80097b0 <HAL_DMA_IRQHandler+0x6a0>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d036      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a7d      	ldr	r2, [pc, #500]	; (80097b4 <HAL_DMA_IRQHandler+0x6a4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d031      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a7c      	ldr	r2, [pc, #496]	; (80097b8 <HAL_DMA_IRQHandler+0x6a8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d02c      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a7a      	ldr	r2, [pc, #488]	; (80097bc <HAL_DMA_IRQHandler+0x6ac>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d027      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a79      	ldr	r2, [pc, #484]	; (80097c0 <HAL_DMA_IRQHandler+0x6b0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d022      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a77      	ldr	r2, [pc, #476]	; (80097c4 <HAL_DMA_IRQHandler+0x6b4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d01d      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a76      	ldr	r2, [pc, #472]	; (80097c8 <HAL_DMA_IRQHandler+0x6b8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d018      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a74      	ldr	r2, [pc, #464]	; (80097cc <HAL_DMA_IRQHandler+0x6bc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d013      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a73      	ldr	r2, [pc, #460]	; (80097d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00e      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a71      	ldr	r2, [pc, #452]	; (80097d4 <HAL_DMA_IRQHandler+0x6c4>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d009      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a70      	ldr	r2, [pc, #448]	; (80097d8 <HAL_DMA_IRQHandler+0x6c8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d004      	beq.n	8009626 <HAL_DMA_IRQHandler+0x516>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a6e      	ldr	r2, [pc, #440]	; (80097dc <HAL_DMA_IRQHandler+0x6cc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d10a      	bne.n	800963c <HAL_DMA_IRQHandler+0x52c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	bf14      	ite	ne
 8009634:	2301      	movne	r3, #1
 8009636:	2300      	moveq	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	e009      	b.n	8009650 <HAL_DMA_IRQHandler+0x540>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	2b00      	cmp	r3, #0
 8009648:	bf14      	ite	ne
 800964a:	2301      	movne	r3, #1
 800964c:	2300      	moveq	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d03e      	beq.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	2210      	movs	r2, #16
 800965e:	409a      	lsls	r2, r3
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d018      	beq.n	80096a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d108      	bne.n	8009692 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d024      	beq.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	4798      	blx	r3
 8009690:	e01f      	b.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009696:	2b00      	cmp	r3, #0
 8009698:	d01b      	beq.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
 80096a2:	e016      	b.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d107      	bne.n	80096c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0208 	bic.w	r2, r2, #8
 80096c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	2220      	movs	r2, #32
 80096dc:	409a      	lsls	r2, r3
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 8110 	beq.w	8009908 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a2c      	ldr	r2, [pc, #176]	; (80097a0 <HAL_DMA_IRQHandler+0x690>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d04a      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a2b      	ldr	r2, [pc, #172]	; (80097a4 <HAL_DMA_IRQHandler+0x694>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d045      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a29      	ldr	r2, [pc, #164]	; (80097a8 <HAL_DMA_IRQHandler+0x698>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d040      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a28      	ldr	r2, [pc, #160]	; (80097ac <HAL_DMA_IRQHandler+0x69c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d03b      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <HAL_DMA_IRQHandler+0x6a0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d036      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a25      	ldr	r2, [pc, #148]	; (80097b4 <HAL_DMA_IRQHandler+0x6a4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d031      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a23      	ldr	r2, [pc, #140]	; (80097b8 <HAL_DMA_IRQHandler+0x6a8>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d02c      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a22      	ldr	r2, [pc, #136]	; (80097bc <HAL_DMA_IRQHandler+0x6ac>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d027      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a20      	ldr	r2, [pc, #128]	; (80097c0 <HAL_DMA_IRQHandler+0x6b0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1f      	ldr	r2, [pc, #124]	; (80097c4 <HAL_DMA_IRQHandler+0x6b4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d01d      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1d      	ldr	r2, [pc, #116]	; (80097c8 <HAL_DMA_IRQHandler+0x6b8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1c      	ldr	r2, [pc, #112]	; (80097cc <HAL_DMA_IRQHandler+0x6bc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <HAL_DMA_IRQHandler+0x6c0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <HAL_DMA_IRQHandler+0x6c4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <HAL_DMA_IRQHandler+0x6c8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <HAL_DMA_IRQHandler+0x678>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a16      	ldr	r2, [pc, #88]	; (80097dc <HAL_DMA_IRQHandler+0x6cc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d12b      	bne.n	80097e0 <HAL_DMA_IRQHandler+0x6d0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b00      	cmp	r3, #0
 8009794:	bf14      	ite	ne
 8009796:	2301      	movne	r3, #1
 8009798:	2300      	moveq	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e02a      	b.n	80097f4 <HAL_DMA_IRQHandler+0x6e4>
 800979e:	bf00      	nop
 80097a0:	40020010 	.word	0x40020010
 80097a4:	40020028 	.word	0x40020028
 80097a8:	40020040 	.word	0x40020040
 80097ac:	40020058 	.word	0x40020058
 80097b0:	40020070 	.word	0x40020070
 80097b4:	40020088 	.word	0x40020088
 80097b8:	400200a0 	.word	0x400200a0
 80097bc:	400200b8 	.word	0x400200b8
 80097c0:	40020410 	.word	0x40020410
 80097c4:	40020428 	.word	0x40020428
 80097c8:	40020440 	.word	0x40020440
 80097cc:	40020458 	.word	0x40020458
 80097d0:	40020470 	.word	0x40020470
 80097d4:	40020488 	.word	0x40020488
 80097d8:	400204a0 	.word	0x400204a0
 80097dc:	400204b8 	.word	0x400204b8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf14      	ite	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	2300      	moveq	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 8087 	beq.w	8009908 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097fe:	f003 031f 	and.w	r3, r3, #31
 8009802:	2220      	movs	r2, #32
 8009804:	409a      	lsls	r2, r3
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b04      	cmp	r3, #4
 8009814:	d139      	bne.n	800988a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0216 	bic.w	r2, r2, #22
 8009824:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695a      	ldr	r2, [r3, #20]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009834:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <HAL_DMA_IRQHandler+0x736>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0208 	bic.w	r2, r2, #8
 8009854:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985a:	f003 031f 	and.w	r3, r3, #31
 800985e:	223f      	movs	r2, #63	; 0x3f
 8009860:	409a      	lsls	r2, r3
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 834a 	beq.w	8009f14 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
          }
          return;
 8009888:	e344      	b.n	8009f14 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d018      	beq.n	80098ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d108      	bne.n	80098b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d02c      	beq.n	8009908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
 80098b6:	e027      	b.n	8009908 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d023      	beq.n	8009908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
 80098c8:	e01e      	b.n	8009908 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10f      	bne.n	80098f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0210 	bic.w	r2, r2, #16
 80098e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8306 	beq.w	8009f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8088 	beq.w	8009a30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a7a      	ldr	r2, [pc, #488]	; (8009b18 <HAL_DMA_IRQHandler+0xa08>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d04a      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a79      	ldr	r2, [pc, #484]	; (8009b1c <HAL_DMA_IRQHandler+0xa0c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d045      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a77      	ldr	r2, [pc, #476]	; (8009b20 <HAL_DMA_IRQHandler+0xa10>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d040      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a76      	ldr	r2, [pc, #472]	; (8009b24 <HAL_DMA_IRQHandler+0xa14>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d03b      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a74      	ldr	r2, [pc, #464]	; (8009b28 <HAL_DMA_IRQHandler+0xa18>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d036      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a73      	ldr	r2, [pc, #460]	; (8009b2c <HAL_DMA_IRQHandler+0xa1c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d031      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a71      	ldr	r2, [pc, #452]	; (8009b30 <HAL_DMA_IRQHandler+0xa20>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d02c      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a70      	ldr	r2, [pc, #448]	; (8009b34 <HAL_DMA_IRQHandler+0xa24>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d027      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a6e      	ldr	r2, [pc, #440]	; (8009b38 <HAL_DMA_IRQHandler+0xa28>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d022      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a6d      	ldr	r2, [pc, #436]	; (8009b3c <HAL_DMA_IRQHandler+0xa2c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d01d      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a6b      	ldr	r2, [pc, #428]	; (8009b40 <HAL_DMA_IRQHandler+0xa30>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d018      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a6a      	ldr	r2, [pc, #424]	; (8009b44 <HAL_DMA_IRQHandler+0xa34>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d013      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a68      	ldr	r2, [pc, #416]	; (8009b48 <HAL_DMA_IRQHandler+0xa38>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00e      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a67      	ldr	r2, [pc, #412]	; (8009b4c <HAL_DMA_IRQHandler+0xa3c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d009      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a65      	ldr	r2, [pc, #404]	; (8009b50 <HAL_DMA_IRQHandler+0xa40>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d004      	beq.n	80099c8 <HAL_DMA_IRQHandler+0x8b8>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a64      	ldr	r2, [pc, #400]	; (8009b54 <HAL_DMA_IRQHandler+0xa44>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d108      	bne.n	80099da <HAL_DMA_IRQHandler+0x8ca>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0201 	bic.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e007      	b.n	80099ea <HAL_DMA_IRQHandler+0x8da>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0201 	bic.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d307      	bcc.n	8009a06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1f2      	bne.n	80099ea <HAL_DMA_IRQHandler+0x8da>
 8009a04:	e000      	b.n	8009a08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009a06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d004      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2203      	movs	r2, #3
 8009a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009a1e:	e003      	b.n	8009a28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8272 	beq.w	8009f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
 8009a42:	e26c      	b.n	8009f1e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a43      	ldr	r2, [pc, #268]	; (8009b58 <HAL_DMA_IRQHandler+0xa48>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d022      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a42      	ldr	r2, [pc, #264]	; (8009b5c <HAL_DMA_IRQHandler+0xa4c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d01d      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a40      	ldr	r2, [pc, #256]	; (8009b60 <HAL_DMA_IRQHandler+0xa50>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a3f      	ldr	r2, [pc, #252]	; (8009b64 <HAL_DMA_IRQHandler+0xa54>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a3d      	ldr	r2, [pc, #244]	; (8009b68 <HAL_DMA_IRQHandler+0xa58>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a3c      	ldr	r2, [pc, #240]	; (8009b6c <HAL_DMA_IRQHandler+0xa5c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a3a      	ldr	r2, [pc, #232]	; (8009b70 <HAL_DMA_IRQHandler+0xa60>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x984>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a39      	ldr	r2, [pc, #228]	; (8009b74 <HAL_DMA_IRQHandler+0xa64>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d101      	bne.n	8009a98 <HAL_DMA_IRQHandler+0x988>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <HAL_DMA_IRQHandler+0x98a>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 823f 	beq.w	8009f1e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	409a      	lsls	r2, r3
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80cd 	beq.w	8009c58 <HAL_DMA_IRQHandler+0xb48>
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80c7 	beq.w	8009c58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	409a      	lsls	r2, r3
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d049      	beq.n	8009b78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8210 	beq.w	8009f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b00:	e20a      	b.n	8009f18 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 8206 	beq.w	8009f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b14:	e200      	b.n	8009f18 <HAL_DMA_IRQHandler+0xe08>
 8009b16:	bf00      	nop
 8009b18:	40020010 	.word	0x40020010
 8009b1c:	40020028 	.word	0x40020028
 8009b20:	40020040 	.word	0x40020040
 8009b24:	40020058 	.word	0x40020058
 8009b28:	40020070 	.word	0x40020070
 8009b2c:	40020088 	.word	0x40020088
 8009b30:	400200a0 	.word	0x400200a0
 8009b34:	400200b8 	.word	0x400200b8
 8009b38:	40020410 	.word	0x40020410
 8009b3c:	40020428 	.word	0x40020428
 8009b40:	40020440 	.word	0x40020440
 8009b44:	40020458 	.word	0x40020458
 8009b48:	40020470 	.word	0x40020470
 8009b4c:	40020488 	.word	0x40020488
 8009b50:	400204a0 	.word	0x400204a0
 8009b54:	400204b8 	.word	0x400204b8
 8009b58:	58025408 	.word	0x58025408
 8009b5c:	5802541c 	.word	0x5802541c
 8009b60:	58025430 	.word	0x58025430
 8009b64:	58025444 	.word	0x58025444
 8009b68:	58025458 	.word	0x58025458
 8009b6c:	5802546c 	.word	0x5802546c
 8009b70:	58025480 	.word	0x58025480
 8009b74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d160      	bne.n	8009c44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a7f      	ldr	r2, [pc, #508]	; (8009d84 <HAL_DMA_IRQHandler+0xc74>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d04a      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a7d      	ldr	r2, [pc, #500]	; (8009d88 <HAL_DMA_IRQHandler+0xc78>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d045      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a7c      	ldr	r2, [pc, #496]	; (8009d8c <HAL_DMA_IRQHandler+0xc7c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d040      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a7a      	ldr	r2, [pc, #488]	; (8009d90 <HAL_DMA_IRQHandler+0xc80>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d03b      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a79      	ldr	r2, [pc, #484]	; (8009d94 <HAL_DMA_IRQHandler+0xc84>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d036      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a77      	ldr	r2, [pc, #476]	; (8009d98 <HAL_DMA_IRQHandler+0xc88>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d031      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a76      	ldr	r2, [pc, #472]	; (8009d9c <HAL_DMA_IRQHandler+0xc8c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d02c      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a74      	ldr	r2, [pc, #464]	; (8009da0 <HAL_DMA_IRQHandler+0xc90>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d027      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a73      	ldr	r2, [pc, #460]	; (8009da4 <HAL_DMA_IRQHandler+0xc94>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d022      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a71      	ldr	r2, [pc, #452]	; (8009da8 <HAL_DMA_IRQHandler+0xc98>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d01d      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a70      	ldr	r2, [pc, #448]	; (8009dac <HAL_DMA_IRQHandler+0xc9c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d018      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a6e      	ldr	r2, [pc, #440]	; (8009db0 <HAL_DMA_IRQHandler+0xca0>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d013      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a6d      	ldr	r2, [pc, #436]	; (8009db4 <HAL_DMA_IRQHandler+0xca4>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00e      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a6b      	ldr	r2, [pc, #428]	; (8009db8 <HAL_DMA_IRQHandler+0xca8>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d009      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a6a      	ldr	r2, [pc, #424]	; (8009dbc <HAL_DMA_IRQHandler+0xcac>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_DMA_IRQHandler+0xb12>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a68      	ldr	r2, [pc, #416]	; (8009dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d108      	bne.n	8009c34 <HAL_DMA_IRQHandler+0xb24>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0208 	bic.w	r2, r2, #8
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e007      	b.n	8009c44 <HAL_DMA_IRQHandler+0xb34>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0204 	bic.w	r2, r2, #4
 8009c42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8165 	beq.w	8009f18 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c56:	e15f      	b.n	8009f18 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5c:	f003 031f 	and.w	r3, r3, #31
 8009c60:	2202      	movs	r2, #2
 8009c62:	409a      	lsls	r2, r3
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80c5 	beq.w	8009df8 <HAL_DMA_IRQHandler+0xce8>
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 80bf 	beq.w	8009df8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	2202      	movs	r2, #2
 8009c84:	409a      	lsls	r2, r3
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d018      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 813a 	beq.w	8009f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cb0:	e134      	b.n	8009f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 8130 	beq.w	8009f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cc4:	e12a      	b.n	8009f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f040 8089 	bne.w	8009de4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a2b      	ldr	r2, [pc, #172]	; (8009d84 <HAL_DMA_IRQHandler+0xc74>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d04a      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a29      	ldr	r2, [pc, #164]	; (8009d88 <HAL_DMA_IRQHandler+0xc78>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d045      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a28      	ldr	r2, [pc, #160]	; (8009d8c <HAL_DMA_IRQHandler+0xc7c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d040      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a26      	ldr	r2, [pc, #152]	; (8009d90 <HAL_DMA_IRQHandler+0xc80>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d03b      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a25      	ldr	r2, [pc, #148]	; (8009d94 <HAL_DMA_IRQHandler+0xc84>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d036      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a23      	ldr	r2, [pc, #140]	; (8009d98 <HAL_DMA_IRQHandler+0xc88>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d031      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a22      	ldr	r2, [pc, #136]	; (8009d9c <HAL_DMA_IRQHandler+0xc8c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d02c      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a20      	ldr	r2, [pc, #128]	; (8009da0 <HAL_DMA_IRQHandler+0xc90>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d027      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a1f      	ldr	r2, [pc, #124]	; (8009da4 <HAL_DMA_IRQHandler+0xc94>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d022      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a1d      	ldr	r2, [pc, #116]	; (8009da8 <HAL_DMA_IRQHandler+0xc98>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01d      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a1c      	ldr	r2, [pc, #112]	; (8009dac <HAL_DMA_IRQHandler+0xc9c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d018      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1a      	ldr	r2, [pc, #104]	; (8009db0 <HAL_DMA_IRQHandler+0xca0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d013      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a19      	ldr	r2, [pc, #100]	; (8009db4 <HAL_DMA_IRQHandler+0xca4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00e      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <HAL_DMA_IRQHandler+0xca8>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d009      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <HAL_DMA_IRQHandler+0xcac>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d004      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xc62>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a14      	ldr	r2, [pc, #80]	; (8009dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d128      	bne.n	8009dc4 <HAL_DMA_IRQHandler+0xcb4>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0214 	bic.w	r2, r2, #20
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	e027      	b.n	8009dd4 <HAL_DMA_IRQHandler+0xcc4>
 8009d84:	40020010 	.word	0x40020010
 8009d88:	40020028 	.word	0x40020028
 8009d8c:	40020040 	.word	0x40020040
 8009d90:	40020058 	.word	0x40020058
 8009d94:	40020070 	.word	0x40020070
 8009d98:	40020088 	.word	0x40020088
 8009d9c:	400200a0 	.word	0x400200a0
 8009da0:	400200b8 	.word	0x400200b8
 8009da4:	40020410 	.word	0x40020410
 8009da8:	40020428 	.word	0x40020428
 8009dac:	40020440 	.word	0x40020440
 8009db0:	40020458 	.word	0x40020458
 8009db4:	40020470 	.word	0x40020470
 8009db8:	40020488 	.word	0x40020488
 8009dbc:	400204a0 	.word	0x400204a0
 8009dc0:	400204b8 	.word	0x400204b8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 020a 	bic.w	r2, r2, #10
 8009dd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8097 	beq.w	8009f1c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009df6:	e091      	b.n	8009f1c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	2208      	movs	r2, #8
 8009e02:	409a      	lsls	r2, r3
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8088 	beq.w	8009f1e <HAL_DMA_IRQHandler+0xe0e>
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f003 0308 	and.w	r3, r3, #8
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8082 	beq.w	8009f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a41      	ldr	r2, [pc, #260]	; (8009f24 <HAL_DMA_IRQHandler+0xe14>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d04a      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a3f      	ldr	r2, [pc, #252]	; (8009f28 <HAL_DMA_IRQHandler+0xe18>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d045      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a3e      	ldr	r2, [pc, #248]	; (8009f2c <HAL_DMA_IRQHandler+0xe1c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d040      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a3c      	ldr	r2, [pc, #240]	; (8009f30 <HAL_DMA_IRQHandler+0xe20>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d03b      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a3b      	ldr	r2, [pc, #236]	; (8009f34 <HAL_DMA_IRQHandler+0xe24>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d036      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a39      	ldr	r2, [pc, #228]	; (8009f38 <HAL_DMA_IRQHandler+0xe28>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d031      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a38      	ldr	r2, [pc, #224]	; (8009f3c <HAL_DMA_IRQHandler+0xe2c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d02c      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a36      	ldr	r2, [pc, #216]	; (8009f40 <HAL_DMA_IRQHandler+0xe30>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d027      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a35      	ldr	r2, [pc, #212]	; (8009f44 <HAL_DMA_IRQHandler+0xe34>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d022      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a33      	ldr	r2, [pc, #204]	; (8009f48 <HAL_DMA_IRQHandler+0xe38>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d01d      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a32      	ldr	r2, [pc, #200]	; (8009f4c <HAL_DMA_IRQHandler+0xe3c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d018      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a30      	ldr	r2, [pc, #192]	; (8009f50 <HAL_DMA_IRQHandler+0xe40>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d013      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a2f      	ldr	r2, [pc, #188]	; (8009f54 <HAL_DMA_IRQHandler+0xe44>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00e      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a2d      	ldr	r2, [pc, #180]	; (8009f58 <HAL_DMA_IRQHandler+0xe48>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a2c      	ldr	r2, [pc, #176]	; (8009f5c <HAL_DMA_IRQHandler+0xe4c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_DMA_IRQHandler+0xdaa>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <HAL_DMA_IRQHandler+0xe50>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d108      	bne.n	8009ecc <HAL_DMA_IRQHandler+0xdbc>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 021c 	bic.w	r2, r2, #28
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e007      	b.n	8009edc <HAL_DMA_IRQHandler+0xdcc>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 020e 	bic.w	r2, r2, #14
 8009eda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	409a      	lsls	r2, r3
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d009      	beq.n	8009f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	4798      	blx	r3
 8009f12:	e004      	b.n	8009f1e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009f14:	bf00      	nop
 8009f16:	e002      	b.n	8009f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f18:	bf00      	nop
 8009f1a:	e000      	b.n	8009f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	40020010 	.word	0x40020010
 8009f28:	40020028 	.word	0x40020028
 8009f2c:	40020040 	.word	0x40020040
 8009f30:	40020058 	.word	0x40020058
 8009f34:	40020070 	.word	0x40020070
 8009f38:	40020088 	.word	0x40020088
 8009f3c:	400200a0 	.word	0x400200a0
 8009f40:	400200b8 	.word	0x400200b8
 8009f44:	40020410 	.word	0x40020410
 8009f48:	40020428 	.word	0x40020428
 8009f4c:	40020440 	.word	0x40020440
 8009f50:	40020458 	.word	0x40020458
 8009f54:	40020470 	.word	0x40020470
 8009f58:	40020488 	.word	0x40020488
 8009f5c:	400204a0 	.word	0x400204a0
 8009f60:	400204b8 	.word	0x400204b8

08009f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a42      	ldr	r2, [pc, #264]	; (800a07c <DMA_CalcBaseAndBitshift+0x118>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d04a      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a41      	ldr	r2, [pc, #260]	; (800a080 <DMA_CalcBaseAndBitshift+0x11c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d045      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a3f      	ldr	r2, [pc, #252]	; (800a084 <DMA_CalcBaseAndBitshift+0x120>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d040      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a3e      	ldr	r2, [pc, #248]	; (800a088 <DMA_CalcBaseAndBitshift+0x124>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d03b      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a3c      	ldr	r2, [pc, #240]	; (800a08c <DMA_CalcBaseAndBitshift+0x128>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d036      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a3b      	ldr	r2, [pc, #236]	; (800a090 <DMA_CalcBaseAndBitshift+0x12c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d031      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a39      	ldr	r2, [pc, #228]	; (800a094 <DMA_CalcBaseAndBitshift+0x130>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d02c      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a38      	ldr	r2, [pc, #224]	; (800a098 <DMA_CalcBaseAndBitshift+0x134>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d027      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a36      	ldr	r2, [pc, #216]	; (800a09c <DMA_CalcBaseAndBitshift+0x138>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d022      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a35      	ldr	r2, [pc, #212]	; (800a0a0 <DMA_CalcBaseAndBitshift+0x13c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d01d      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a33      	ldr	r2, [pc, #204]	; (800a0a4 <DMA_CalcBaseAndBitshift+0x140>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d018      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <DMA_CalcBaseAndBitshift+0x144>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a30      	ldr	r2, [pc, #192]	; (800a0ac <DMA_CalcBaseAndBitshift+0x148>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00e      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a2f      	ldr	r2, [pc, #188]	; (800a0b0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d009      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a2d      	ldr	r2, [pc, #180]	; (800a0b4 <DMA_CalcBaseAndBitshift+0x150>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <DMA_CalcBaseAndBitshift+0xa8>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a2c      	ldr	r2, [pc, #176]	; (800a0b8 <DMA_CalcBaseAndBitshift+0x154>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d101      	bne.n	800a010 <DMA_CalcBaseAndBitshift+0xac>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <DMA_CalcBaseAndBitshift+0xae>
 800a010:	2300      	movs	r3, #0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d024      	beq.n	800a060 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	3b10      	subs	r3, #16
 800a01e:	4a27      	ldr	r2, [pc, #156]	; (800a0bc <DMA_CalcBaseAndBitshift+0x158>)
 800a020:	fba2 2303 	umull	r2, r3, r2, r3
 800a024:	091b      	lsrs	r3, r3, #4
 800a026:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	4a24      	ldr	r2, [pc, #144]	; (800a0c0 <DMA_CalcBaseAndBitshift+0x15c>)
 800a030:	5cd3      	ldrb	r3, [r2, r3]
 800a032:	461a      	mov	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d908      	bls.n	800a050 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	4b1f      	ldr	r3, [pc, #124]	; (800a0c4 <DMA_CalcBaseAndBitshift+0x160>)
 800a046:	4013      	ands	r3, r2
 800a048:	1d1a      	adds	r2, r3, #4
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	659a      	str	r2, [r3, #88]	; 0x58
 800a04e:	e00d      	b.n	800a06c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	4b1b      	ldr	r3, [pc, #108]	; (800a0c4 <DMA_CalcBaseAndBitshift+0x160>)
 800a058:	4013      	ands	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6593      	str	r3, [r2, #88]	; 0x58
 800a05e:	e005      	b.n	800a06c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	40020010 	.word	0x40020010
 800a080:	40020028 	.word	0x40020028
 800a084:	40020040 	.word	0x40020040
 800a088:	40020058 	.word	0x40020058
 800a08c:	40020070 	.word	0x40020070
 800a090:	40020088 	.word	0x40020088
 800a094:	400200a0 	.word	0x400200a0
 800a098:	400200b8 	.word	0x400200b8
 800a09c:	40020410 	.word	0x40020410
 800a0a0:	40020428 	.word	0x40020428
 800a0a4:	40020440 	.word	0x40020440
 800a0a8:	40020458 	.word	0x40020458
 800a0ac:	40020470 	.word	0x40020470
 800a0b0:	40020488 	.word	0x40020488
 800a0b4:	400204a0 	.word	0x400204a0
 800a0b8:	400204b8 	.word	0x400204b8
 800a0bc:	aaaaaaab 	.word	0xaaaaaaab
 800a0c0:	08012c24 	.word	0x08012c24
 800a0c4:	fffffc00 	.word	0xfffffc00

0800a0c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d120      	bne.n	800a11e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d858      	bhi.n	800a196 <DMA_CheckFifoParam+0xce>
 800a0e4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <DMA_CheckFifoParam+0x24>)
 800a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ea:	bf00      	nop
 800a0ec:	0800a0fd 	.word	0x0800a0fd
 800a0f0:	0800a10f 	.word	0x0800a10f
 800a0f4:	0800a0fd 	.word	0x0800a0fd
 800a0f8:	0800a197 	.word	0x0800a197
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d048      	beq.n	800a19a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a10c:	e045      	b.n	800a19a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a116:	d142      	bne.n	800a19e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a11c:	e03f      	b.n	800a19e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a126:	d123      	bne.n	800a170 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d838      	bhi.n	800a1a2 <DMA_CheckFifoParam+0xda>
 800a130:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <DMA_CheckFifoParam+0x70>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a149 	.word	0x0800a149
 800a13c:	0800a14f 	.word	0x0800a14f
 800a140:	0800a149 	.word	0x0800a149
 800a144:	0800a161 	.word	0x0800a161
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
        break;
 800a14c:	e030      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d025      	beq.n	800a1a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a15e:	e022      	b.n	800a1a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a168:	d11f      	bne.n	800a1aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a16e:	e01c      	b.n	800a1aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a174:	2b02      	cmp	r3, #2
 800a176:	d902      	bls.n	800a17e <DMA_CheckFifoParam+0xb6>
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d003      	beq.n	800a184 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a17c:	e018      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	73fb      	strb	r3, [r7, #15]
        break;
 800a182:	e015      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00e      	beq.n	800a1ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
    break;
 800a194:	e00b      	b.n	800a1ae <DMA_CheckFifoParam+0xe6>
        break;
 800a196:	bf00      	nop
 800a198:	e00a      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        break;
 800a19a:	bf00      	nop
 800a19c:	e008      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        break;
 800a19e:	bf00      	nop
 800a1a0:	e006      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1a2:	bf00      	nop
 800a1a4:	e004      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1a6:	bf00      	nop
 800a1a8:	e002      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1aa:	bf00      	nop
 800a1ac:	e000      	b.n	800a1b0 <DMA_CheckFifoParam+0xe8>
    break;
 800a1ae:	bf00      	nop
    }
  }

  return status;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop

0800a1c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a38      	ldr	r2, [pc, #224]	; (800a2b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d022      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a36      	ldr	r2, [pc, #216]	; (800a2b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01d      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a35      	ldr	r2, [pc, #212]	; (800a2bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d018      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a33      	ldr	r2, [pc, #204]	; (800a2c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d013      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a32      	ldr	r2, [pc, #200]	; (800a2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00e      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a30      	ldr	r2, [pc, #192]	; (800a2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d009      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a2f      	ldr	r2, [pc, #188]	; (800a2cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d004      	beq.n	800a21e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a2d      	ldr	r2, [pc, #180]	; (800a2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d101      	bne.n	800a222 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a222:	2300      	movs	r3, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01a      	beq.n	800a25e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	3b08      	subs	r3, #8
 800a230:	4a28      	ldr	r2, [pc, #160]	; (800a2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a232:	fba2 2303 	umull	r2, r3, r2, r3
 800a236:	091b      	lsrs	r3, r3, #4
 800a238:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4b26      	ldr	r3, [pc, #152]	; (800a2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a24      	ldr	r2, [pc, #144]	; (800a2dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a24c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	2201      	movs	r2, #1
 800a256:	409a      	lsls	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a25c:	e024      	b.n	800a2a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	3b10      	subs	r3, #16
 800a266:	4a1e      	ldr	r2, [pc, #120]	; (800a2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a268:	fba2 2303 	umull	r2, r3, r2, r3
 800a26c:	091b      	lsrs	r3, r3, #4
 800a26e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a1c      	ldr	r2, [pc, #112]	; (800a2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d806      	bhi.n	800a286 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4a1b      	ldr	r2, [pc, #108]	; (800a2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d902      	bls.n	800a286 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3308      	adds	r3, #8
 800a284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a16      	ldr	r2, [pc, #88]	; (800a2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f003 031f 	and.w	r3, r3, #31
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	409a      	lsls	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	58025408 	.word	0x58025408
 800a2b8:	5802541c 	.word	0x5802541c
 800a2bc:	58025430 	.word	0x58025430
 800a2c0:	58025444 	.word	0x58025444
 800a2c4:	58025458 	.word	0x58025458
 800a2c8:	5802546c 	.word	0x5802546c
 800a2cc:	58025480 	.word	0x58025480
 800a2d0:	58025494 	.word	0x58025494
 800a2d4:	cccccccd 	.word	0xcccccccd
 800a2d8:	16009600 	.word	0x16009600
 800a2dc:	58025880 	.word	0x58025880
 800a2e0:	aaaaaaab 	.word	0xaaaaaaab
 800a2e4:	400204b8 	.word	0x400204b8
 800a2e8:	4002040f 	.word	0x4002040f
 800a2ec:	10008200 	.word	0x10008200
 800a2f0:	40020880 	.word	0x40020880

0800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d04a      	beq.n	800a3a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d847      	bhi.n	800a3a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a25      	ldr	r2, [pc, #148]	; (800a3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d022      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a24      	ldr	r2, [pc, #144]	; (800a3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d01d      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a22      	ldr	r2, [pc, #136]	; (800a3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d018      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a21      	ldr	r2, [pc, #132]	; (800a3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d013      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1f      	ldr	r2, [pc, #124]	; (800a3bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d00e      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a1e      	ldr	r2, [pc, #120]	; (800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d009      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1c      	ldr	r2, [pc, #112]	; (800a3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d004      	beq.n	800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a1b      	ldr	r2, [pc, #108]	; (800a3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d101      	bne.n	800a364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a364:	2300      	movs	r3, #0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4b17      	ldr	r3, [pc, #92]	; (800a3cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	461a      	mov	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a37c:	671a      	str	r2, [r3, #112]	; 0x70
 800a37e:	e009      	b.n	800a394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	461a      	mov	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a11      	ldr	r2, [pc, #68]	; (800a3d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a392:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3b01      	subs	r3, #1
 800a398:	2201      	movs	r2, #1
 800a39a:	409a      	lsls	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	58025408 	.word	0x58025408
 800a3b0:	5802541c 	.word	0x5802541c
 800a3b4:	58025430 	.word	0x58025430
 800a3b8:	58025444 	.word	0x58025444
 800a3bc:	58025458 	.word	0x58025458
 800a3c0:	5802546c 	.word	0x5802546c
 800a3c4:	58025480 	.word	0x58025480
 800a3c8:	58025494 	.word	0x58025494
 800a3cc:	1600963f 	.word	0x1600963f
 800a3d0:	58025940 	.word	0x58025940
 800a3d4:	1000823f 	.word	0x1000823f
 800a3d8:	40020940 	.word	0x40020940

0800a3dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e0cf      	b.n	800a58e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2223      	movs	r2, #35	; 0x23
 800a3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7fd f89f 	bl	8007544 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a406:	4b64      	ldr	r3, [pc, #400]	; (800a598 <HAL_ETH_Init+0x1bc>)
 800a408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a40c:	4a62      	ldr	r2, [pc, #392]	; (800a598 <HAL_ETH_Init+0x1bc>)
 800a40e:	f043 0302 	orr.w	r3, r3, #2
 800a412:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a416:	4b60      	ldr	r3, [pc, #384]	; (800a598 <HAL_ETH_Init+0x1bc>)
 800a418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	60bb      	str	r3, [r7, #8]
 800a422:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	7a1b      	ldrb	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a42c:	2000      	movs	r0, #0
 800a42e:	f7fd fc8b 	bl	8007d48 <HAL_SYSCFG_ETHInterfaceSelect>
 800a432:	e003      	b.n	800a43c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a434:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a438:	f7fd fc86 	bl	8007d48 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a43c:	4b57      	ldr	r3, [pc, #348]	; (800a59c <HAL_ETH_Init+0x1c0>)
 800a43e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	6812      	ldr	r2, [r2, #0]
 800a44e:	f043 0301 	orr.w	r3, r3, #1
 800a452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a458:	f7fd fc3a 	bl	8007cd0 <HAL_GetTick>
 800a45c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a45e:	e011      	b.n	800a484 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a460:	f7fd fc36 	bl	8007cd0 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a46e:	d909      	bls.n	800a484 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2204      	movs	r2, #4
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	22e0      	movs	r2, #224	; 0xe0
 800a47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e084      	b.n	800a58e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e4      	bne.n	800a460 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f886 	bl	800a5a8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a49c:	f001 fefc 	bl	800c298 <HAL_RCC_GetHCLKFreq>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4a3f      	ldr	r2, [pc, #252]	; (800a5a0 <HAL_ETH_Init+0x1c4>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	0c9a      	lsrs	r2, r3, #18
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3a01      	subs	r2, #1
 800a4b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fa71 	bl	800a99c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a4c6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	22e0      	movs	r2, #224	; 0xe0
 800a4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e049      	b.n	800a58e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a506:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <HAL_ETH_Init+0x1c8>)
 800a508:	4013      	ands	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6952      	ldr	r2, [r2, #20]
 800a50e:	0051      	lsls	r1, r2, #1
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6812      	ldr	r2, [r2, #0]
 800a514:	430b      	orrs	r3, r1
 800a516:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a51a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fad9 	bl	800aad6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb1f 	bl	800ab68 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	3305      	adds	r3, #5
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	021a      	lsls	r2, r3, #8
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	3304      	adds	r3, #4
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	4619      	mov	r1, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	3303      	adds	r3, #3
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	061a      	lsls	r2, r3, #24
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	3302      	adds	r3, #2
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	041b      	lsls	r3, r3, #16
 800a55c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	3301      	adds	r3, #1
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a568:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a576:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a578:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2210      	movs	r2, #16
 800a588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	58024400 	.word	0x58024400
 800a59c:	58000400 	.word	0x58000400
 800a5a0:	431bde83 	.word	0x431bde83
 800a5a4:	ffff8001 	.word	0xffff8001

0800a5a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a5c2:	f001 fe69 	bl	800c298 <HAL_RCC_GetHCLKFreq>
 800a5c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	4a1e      	ldr	r2, [pc, #120]	; (800a644 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d908      	bls.n	800a5e2 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4a1d      	ldr	r2, [pc, #116]	; (800a648 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d804      	bhi.n	800a5e2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e027      	b.n	800a632 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a18      	ldr	r2, [pc, #96]	; (800a648 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d908      	bls.n	800a5fc <HAL_ETH_SetMDIOClockRange+0x54>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a17      	ldr	r2, [pc, #92]	; (800a64c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d204      	bcs.n	800a5fc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e01a      	b.n	800a632 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4a13      	ldr	r2, [pc, #76]	; (800a64c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d303      	bcc.n	800a60c <HAL_ETH_SetMDIOClockRange+0x64>
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4a12      	ldr	r2, [pc, #72]	; (800a650 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d911      	bls.n	800a630 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d908      	bls.n	800a626 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4a0f      	ldr	r2, [pc, #60]	; (800a654 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d804      	bhi.n	800a626 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	e005      	b.n	800a632 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	e000      	b.n	800a632 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a630:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a63c:	bf00      	nop
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	01312cff 	.word	0x01312cff
 800a648:	02160ebf 	.word	0x02160ebf
 800a64c:	03938700 	.word	0x03938700
 800a650:	05f5e0ff 	.word	0x05f5e0ff
 800a654:	08f0d17f 	.word	0x08f0d17f

0800a658 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a66a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	7b1b      	ldrb	r3, [r3, #12]
 800a678:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a67a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	7b5b      	ldrb	r3, [r3, #13]
 800a680:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	7b9b      	ldrb	r3, [r3, #14]
 800a688:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a68a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	7bdb      	ldrb	r3, [r3, #15]
 800a690:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a692:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	7c12      	ldrb	r2, [r2, #16]
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d102      	bne.n	800a6a2 <ETH_SetMACConfig+0x4a>
 800a69c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a6a0:	e000      	b.n	800a6a4 <ETH_SetMACConfig+0x4c>
 800a6a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a6a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	7c52      	ldrb	r2, [r2, #17]
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d102      	bne.n	800a6b4 <ETH_SetMACConfig+0x5c>
 800a6ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a6b2:	e000      	b.n	800a6b6 <ETH_SetMACConfig+0x5e>
 800a6b4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a6b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	7c9b      	ldrb	r3, [r3, #18]
 800a6bc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a6be:	431a      	orrs	r2, r3
               macconf->Speed |
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a6c4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a6ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	7f1b      	ldrb	r3, [r3, #28]
 800a6d0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a6d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	7f5b      	ldrb	r3, [r3, #29]
 800a6d8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a6da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	7f92      	ldrb	r2, [r2, #30]
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	d102      	bne.n	800a6ea <ETH_SetMACConfig+0x92>
 800a6e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6e8:	e000      	b.n	800a6ec <ETH_SetMACConfig+0x94>
 800a6ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a6ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	7fdb      	ldrb	r3, [r3, #31]
 800a6f2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a6f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a6fc:	2a00      	cmp	r2, #0
 800a6fe:	d102      	bne.n	800a706 <ETH_SetMACConfig+0xae>
 800a700:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a704:	e000      	b.n	800a708 <ETH_SetMACConfig+0xb0>
 800a706:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a708:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a70e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a716:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a718:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	4b56      	ldr	r3, [pc, #344]	; (800a884 <ETH_SetMACConfig+0x22c>)
 800a72a:	4013      	ands	r3, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	430b      	orrs	r3, r1
 800a734:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a742:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a74c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a74e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a756:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a758:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a760:	2a00      	cmp	r2, #0
 800a762:	d102      	bne.n	800a76a <ETH_SetMACConfig+0x112>
 800a764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a768:	e000      	b.n	800a76c <ETH_SetMACConfig+0x114>
 800a76a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a76c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	4b42      	ldr	r3, [pc, #264]	; (800a888 <ETH_SetMACConfig+0x230>)
 800a77e:	4013      	ands	r3, r2
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6812      	ldr	r2, [r2, #0]
 800a784:	68f9      	ldr	r1, [r7, #12]
 800a786:	430b      	orrs	r3, r1
 800a788:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a790:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	4b3a      	ldr	r3, [pc, #232]	; (800a88c <ETH_SetMACConfig+0x234>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	68f9      	ldr	r1, [r7, #12]
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a7b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a7ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	d101      	bne.n	800a7ca <ETH_SetMACConfig+0x172>
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	e000      	b.n	800a7cc <ETH_SetMACConfig+0x174>
 800a7ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a7cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7de:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6812      	ldr	r2, [r2, #0]
 800a7e8:	68f9      	ldr	r1, [r7, #12]
 800a7ea:	430b      	orrs	r3, r1
 800a7ec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a7f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a7fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80a:	f023 0103 	bic.w	r1, r3, #3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	430a      	orrs	r2, r1
 800a816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a822:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d101      	bne.n	800a846 <ETH_SetMACConfig+0x1ee>
 800a842:	2240      	movs	r2, #64	; 0x40
 800a844:	e000      	b.n	800a848 <ETH_SetMACConfig+0x1f0>
 800a846:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a848:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a850:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a85a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a868:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	430a      	orrs	r2, r1
 800a874:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	00048083 	.word	0x00048083
 800a888:	c0f88000 	.word	0xc0f88000
 800a88c:	fffffef0 	.word	0xfffffef0

0800a890 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b38      	ldr	r3, [pc, #224]	; (800a988 <ETH_SetDMAConfig+0xf8>)
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	6811      	ldr	r1, [r2, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	791b      	ldrb	r3, [r3, #4]
 800a8bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a8c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	7b1b      	ldrb	r3, [r3, #12]
 800a8c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	4b2c      	ldr	r3, [pc, #176]	; (800a98c <ETH_SetDMAConfig+0xfc>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6812      	ldr	r2, [r2, #0]
 800a8e0:	68f9      	ldr	r1, [r7, #12]
 800a8e2:	430b      	orrs	r3, r1
 800a8e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	7b5b      	ldrb	r3, [r3, #13]
 800a8ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a900:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a904:	4b22      	ldr	r3, [pc, #136]	; (800a990 <ETH_SetDMAConfig+0x100>)
 800a906:	4013      	ands	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6812      	ldr	r2, [r2, #0]
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	430b      	orrs	r3, r1
 800a910:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a914:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	7d1b      	ldrb	r3, [r3, #20]
 800a920:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a922:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	7f5b      	ldrb	r3, [r3, #29]
 800a928:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a936:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a93a:	4b16      	ldr	r3, [pc, #88]	; (800a994 <ETH_SetDMAConfig+0x104>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	6812      	ldr	r2, [r2, #0]
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	430b      	orrs	r3, r1
 800a946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a94a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	7f1b      	ldrb	r3, [r3, #28]
 800a952:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a958:	4313      	orrs	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a964:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a968:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <ETH_SetDMAConfig+0x108>)
 800a96a:	4013      	ands	r3, r2
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6812      	ldr	r2, [r2, #0]
 800a970:	68f9      	ldr	r1, [r7, #12]
 800a972:	430b      	orrs	r3, r1
 800a974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a978:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a97c:	bf00      	nop
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	ffff87fd 	.word	0xffff87fd
 800a98c:	ffff2ffe 	.word	0xffff2ffe
 800a990:	fffec000 	.word	0xfffec000
 800a994:	ffc0efef 	.word	0xffc0efef
 800a998:	7fc0ffff 	.word	0x7fc0ffff

0800a99c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b0a4      	sub	sp, #144	; 0x90
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a9d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a9f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a9f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800aa00:	2300      	movs	r3, #0
 800aa02:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800aa16:	2300      	movs	r3, #0
 800aa18:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800aa34:	2320      	movs	r3, #32
 800aa36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800aa46:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800aa4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa50:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800aa76:	2300      	movs	r3, #0
 800aa78:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800aa80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fde6 	bl	800a658 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800aa90:	2301      	movs	r3, #1
 800aa92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800aa94:	2300      	movs	r3, #0
 800aa96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800aaa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aaaa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800aab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aab4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800aabc:	f44f 7306 	mov.w	r3, #536	; 0x218
 800aac0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800aac2:	f107 0308 	add.w	r3, r7, #8
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff fee1 	bl	800a890 <ETH_SetDMAConfig>
}
 800aace:	bf00      	nop
 800aad0:	3790      	adds	r7, #144	; 0x90
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	e01d      	b.n	800ab20 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68d9      	ldr	r1, [r3, #12]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4613      	mov	r3, r2
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	4413      	add	r3, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	440b      	add	r3, r1
 800aaf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2200      	movs	r2, #0
 800ab06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	3206      	adds	r2, #6
 800ab16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d9de      	bls.n	800aae4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab34:	461a      	mov	r2, r3
 800ab36:	2303      	movs	r3, #3
 800ab38:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800ab5c:	bf00      	nop
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	e023      	b.n	800abbe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6919      	ldr	r1, [r3, #16]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	4413      	add	r3, r2
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	440b      	add	r3, r1
 800ab86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2200      	movs	r2, #0
 800ab92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2200      	movs	r2, #0
 800ab98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2200      	movs	r2, #0
 800aba4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2200      	movs	r2, #0
 800abaa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	3212      	adds	r2, #18
 800abb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d9d8      	bls.n	800ab76 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abea:	461a      	mov	r2, r3
 800abec:	2303      	movs	r3, #3
 800abee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
	...

0800ac24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b089      	sub	sp, #36	; 0x24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ac32:	4b89      	ldr	r3, [pc, #548]	; (800ae58 <HAL_GPIO_Init+0x234>)
 800ac34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ac36:	e194      	b.n	800af62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	fa01 f303 	lsl.w	r3, r1, r3
 800ac44:	4013      	ands	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 8186 	beq.w	800af5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d005      	beq.n	800ac68 <HAL_GPIO_Init+0x44>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d130      	bne.n	800acca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	2203      	movs	r2, #3
 800ac74:	fa02 f303 	lsl.w	r3, r2, r3
 800ac78:	43db      	mvns	r3, r3
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac9e:	2201      	movs	r2, #1
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	43db      	mvns	r3, r3
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	4013      	ands	r3, r2
 800acac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	091b      	lsrs	r3, r3, #4
 800acb4:	f003 0201 	and.w	r2, r3, #1
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	fa02 f303 	lsl.w	r3, r2, r3
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d017      	beq.n	800ad06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	2203      	movs	r2, #3
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	43db      	mvns	r3, r3
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	4013      	ands	r3, r2
 800acec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	fa02 f303 	lsl.w	r3, r2, r3
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	69ba      	ldr	r2, [r7, #24]
 800ad04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d123      	bne.n	800ad5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	08da      	lsrs	r2, r3, #3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3208      	adds	r2, #8
 800ad1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	f003 0307 	and.w	r3, r3, #7
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	220f      	movs	r2, #15
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	43db      	mvns	r3, r3
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	4013      	ands	r3, r2
 800ad34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	691a      	ldr	r2, [r3, #16]
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f003 0307 	and.w	r3, r3, #7
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	fa02 f303 	lsl.w	r3, r2, r3
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	08da      	lsrs	r2, r3, #3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3208      	adds	r2, #8
 800ad54:	69b9      	ldr	r1, [r7, #24]
 800ad56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	2203      	movs	r2, #3
 800ad66:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6a:	43db      	mvns	r3, r3
 800ad6c:	69ba      	ldr	r2, [r7, #24]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f003 0203 	and.w	r2, r3, #3
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 80e0 	beq.w	800af5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad9c:	4b2f      	ldr	r3, [pc, #188]	; (800ae5c <HAL_GPIO_Init+0x238>)
 800ad9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ada2:	4a2e      	ldr	r2, [pc, #184]	; (800ae5c <HAL_GPIO_Init+0x238>)
 800ada4:	f043 0302 	orr.w	r3, r3, #2
 800ada8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800adac:	4b2b      	ldr	r3, [pc, #172]	; (800ae5c <HAL_GPIO_Init+0x238>)
 800adae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800adba:	4a29      	ldr	r2, [pc, #164]	; (800ae60 <HAL_GPIO_Init+0x23c>)
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	089b      	lsrs	r3, r3, #2
 800adc0:	3302      	adds	r3, #2
 800adc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	220f      	movs	r2, #15
 800add2:	fa02 f303 	lsl.w	r3, r2, r3
 800add6:	43db      	mvns	r3, r3
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	4013      	ands	r3, r2
 800addc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a20      	ldr	r2, [pc, #128]	; (800ae64 <HAL_GPIO_Init+0x240>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d052      	beq.n	800ae8c <HAL_GPIO_Init+0x268>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a1f      	ldr	r2, [pc, #124]	; (800ae68 <HAL_GPIO_Init+0x244>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d031      	beq.n	800ae52 <HAL_GPIO_Init+0x22e>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a1e      	ldr	r2, [pc, #120]	; (800ae6c <HAL_GPIO_Init+0x248>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d02b      	beq.n	800ae4e <HAL_GPIO_Init+0x22a>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a1d      	ldr	r2, [pc, #116]	; (800ae70 <HAL_GPIO_Init+0x24c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d025      	beq.n	800ae4a <HAL_GPIO_Init+0x226>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a1c      	ldr	r2, [pc, #112]	; (800ae74 <HAL_GPIO_Init+0x250>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d01f      	beq.n	800ae46 <HAL_GPIO_Init+0x222>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a1b      	ldr	r2, [pc, #108]	; (800ae78 <HAL_GPIO_Init+0x254>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d019      	beq.n	800ae42 <HAL_GPIO_Init+0x21e>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a1a      	ldr	r2, [pc, #104]	; (800ae7c <HAL_GPIO_Init+0x258>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d013      	beq.n	800ae3e <HAL_GPIO_Init+0x21a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a19      	ldr	r2, [pc, #100]	; (800ae80 <HAL_GPIO_Init+0x25c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00d      	beq.n	800ae3a <HAL_GPIO_Init+0x216>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <HAL_GPIO_Init+0x260>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d007      	beq.n	800ae36 <HAL_GPIO_Init+0x212>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <HAL_GPIO_Init+0x264>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d101      	bne.n	800ae32 <HAL_GPIO_Init+0x20e>
 800ae2e:	2309      	movs	r3, #9
 800ae30:	e02d      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae32:	230a      	movs	r3, #10
 800ae34:	e02b      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae36:	2308      	movs	r3, #8
 800ae38:	e029      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae3a:	2307      	movs	r3, #7
 800ae3c:	e027      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae3e:	2306      	movs	r3, #6
 800ae40:	e025      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae42:	2305      	movs	r3, #5
 800ae44:	e023      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae46:	2304      	movs	r3, #4
 800ae48:	e021      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e01f      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e01d      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e01b      	b.n	800ae8e <HAL_GPIO_Init+0x26a>
 800ae56:	bf00      	nop
 800ae58:	58000080 	.word	0x58000080
 800ae5c:	58024400 	.word	0x58024400
 800ae60:	58000400 	.word	0x58000400
 800ae64:	58020000 	.word	0x58020000
 800ae68:	58020400 	.word	0x58020400
 800ae6c:	58020800 	.word	0x58020800
 800ae70:	58020c00 	.word	0x58020c00
 800ae74:	58021000 	.word	0x58021000
 800ae78:	58021400 	.word	0x58021400
 800ae7c:	58021800 	.word	0x58021800
 800ae80:	58021c00 	.word	0x58021c00
 800ae84:	58022000 	.word	0x58022000
 800ae88:	58022400 	.word	0x58022400
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	f002 0203 	and.w	r2, r2, #3
 800ae94:	0092      	lsls	r2, r2, #2
 800ae96:	4093      	lsls	r3, r2
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae9e:	4938      	ldr	r1, [pc, #224]	; (800af80 <HAL_GPIO_Init+0x35c>)
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	089b      	lsrs	r3, r3, #2
 800aea4:	3302      	adds	r3, #2
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aeac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	43db      	mvns	r3, r3
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	4013      	ands	r3, r2
 800aebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aeda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	43db      	mvns	r3, r3
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	4013      	ands	r3, r2
 800aeea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800af00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	43db      	mvns	r3, r3
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	4013      	ands	r3, r2
 800af16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	4313      	orrs	r3, r2
 800af2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	43db      	mvns	r3, r3
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	4013      	ands	r3, r2
 800af40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	3301      	adds	r3, #1
 800af60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	fa22 f303 	lsr.w	r3, r2, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f47f ae63 	bne.w	800ac38 <HAL_GPIO_Init+0x14>
  }
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	3724      	adds	r7, #36	; 0x24
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	58000400 	.word	0x58000400

0800af84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	691a      	ldr	r2, [r3, #16]
 800af94:	887b      	ldrh	r3, [r7, #2]
 800af96:	4013      	ands	r3, r2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800af9c:	2301      	movs	r3, #1
 800af9e:	73fb      	strb	r3, [r7, #15]
 800afa0:	e001      	b.n	800afa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	807b      	strh	r3, [r7, #2]
 800afc0:	4613      	mov	r3, r2
 800afc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800afc4:	787b      	ldrb	r3, [r7, #1]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800afca:	887a      	ldrh	r2, [r7, #2]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800afd0:	e003      	b.n	800afda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	041a      	lsls	r2, r3, #16
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	619a      	str	r2, [r3, #24]
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	460b      	mov	r3, r1
 800aff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aff8:	887a      	ldrh	r2, [r7, #2]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4013      	ands	r3, r2
 800affe:	041a      	lsls	r2, r3, #16
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	43d9      	mvns	r1, r3
 800b004:	887b      	ldrh	r3, [r7, #2]
 800b006:	400b      	ands	r3, r1
 800b008:	431a      	orrs	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	619a      	str	r2, [r3, #24]
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
	...

0800b01c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800b024:	4a08      	ldr	r2, [pc, #32]	; (800b048 <HAL_HSEM_FastTake+0x2c>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3320      	adds	r3, #32
 800b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <HAL_HSEM_FastTake+0x30>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d101      	bne.n	800b038 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	e000      	b.n	800b03a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	58026400 	.word	0x58026400
 800b04c:	80000300 	.word	0x80000300

0800b050 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800b05a:	4906      	ldr	r1, [pc, #24]	; (800b074 <HAL_HSEM_Release+0x24>)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	58026400 	.word	0x58026400

0800b078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b07a:	b08f      	sub	sp, #60	; 0x3c
 800b07c:	af0a      	add	r7, sp, #40	; 0x28
 800b07e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e116      	b.n	800b2b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fc fc81 	bl	80079ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2203      	movs	r2, #3
 800b0ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d102      	bne.n	800b0c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f005 f977 	bl	80103bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	687e      	ldr	r6, [r7, #4]
 800b0d6:	466d      	mov	r5, sp
 800b0d8:	f106 0410 	add.w	r4, r6, #16
 800b0dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b0e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b0e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800b0ec:	1d33      	adds	r3, r6, #4
 800b0ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b0f0:	6838      	ldr	r0, [r7, #0]
 800b0f2:	f005 f8f5 	bl	80102e0 <USB_CoreInit>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e0d7      	b.n	800b2b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f005 f965 	bl	80103de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
 800b118:	e04a      	b.n	800b1b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b11a:	7bfa      	ldrb	r2, [r7, #15]
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	4613      	mov	r3, r2
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	333d      	adds	r3, #61	; 0x3d
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b12e:	7bfa      	ldrb	r2, [r7, #15]
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	00db      	lsls	r3, r3, #3
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	333c      	adds	r3, #60	; 0x3c
 800b13e:	7bfa      	ldrb	r2, [r7, #15]
 800b140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b142:	7bfa      	ldrb	r2, [r7, #15]
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	b298      	uxth	r0, r3
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	3344      	adds	r3, #68	; 0x44
 800b156:	4602      	mov	r2, r0
 800b158:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b15a:	7bfa      	ldrb	r2, [r7, #15]
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	4613      	mov	r3, r2
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	440b      	add	r3, r1
 800b168:	3340      	adds	r3, #64	; 0x40
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b16e:	7bfa      	ldrb	r2, [r7, #15]
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	4613      	mov	r3, r2
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	3348      	adds	r3, #72	; 0x48
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b182:	7bfa      	ldrb	r2, [r7, #15]
 800b184:	6879      	ldr	r1, [r7, #4]
 800b186:	4613      	mov	r3, r2
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	440b      	add	r3, r1
 800b190:	334c      	adds	r3, #76	; 0x4c
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b196:	7bfa      	ldrb	r2, [r7, #15]
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3354      	adds	r3, #84	; 0x54
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	73fb      	strb	r3, [r7, #15]
 800b1b0:	7bfa      	ldrb	r2, [r7, #15]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d3af      	bcc.n	800b11a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
 800b1be:	e044      	b.n	800b24a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b1c0:	7bfa      	ldrb	r2, [r7, #15]
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b1d6:	7bfa      	ldrb	r2, [r7, #15]
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b1e8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b1ec:	7bfa      	ldrb	r2, [r7, #15]
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b1fe:	2200      	movs	r2, #0
 800b200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b202:	7bfa      	ldrb	r2, [r7, #15]
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b218:	7bfa      	ldrb	r2, [r7, #15]
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	4613      	mov	r3, r2
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	440b      	add	r3, r1
 800b226:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b22e:	7bfa      	ldrb	r2, [r7, #15]
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	440b      	add	r3, r1
 800b23c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	3301      	adds	r3, #1
 800b248:	73fb      	strb	r3, [r7, #15]
 800b24a:	7bfa      	ldrb	r2, [r7, #15]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d3b5      	bcc.n	800b1c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	603b      	str	r3, [r7, #0]
 800b25a:	687e      	ldr	r6, [r7, #4]
 800b25c:	466d      	mov	r5, sp
 800b25e:	f106 0410 	add.w	r4, r6, #16
 800b262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b26a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b26e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b272:	1d33      	adds	r3, r6, #4
 800b274:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f005 f8fe 	bl	8010478 <USB_DevInit>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e014      	b.n	800b2b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d102      	bne.n	800b2ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f80a 	bl	800b2c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f005 fabc 	bl	801082e <USB_DevDisconnect>

  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2ee:	4b05      	ldr	r3, [pc, #20]	; (800b304 <HAL_PCDEx_ActivateLPM+0x44>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	10000003 	.word	0x10000003

0800b308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	2b06      	cmp	r3, #6
 800b31a:	d00a      	beq.n	800b332 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b31c:	4b26      	ldr	r3, [pc, #152]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	429a      	cmp	r2, r3
 800b328:	d001      	beq.n	800b32e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e040      	b.n	800b3b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	e03e      	b.n	800b3b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b332:	4b21      	ldr	r3, [pc, #132]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b33a:	491f      	ldr	r1, [pc, #124]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b342:	f7fc fcc5 	bl	8007cd0 <HAL_GetTick>
 800b346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b348:	e009      	b.n	800b35e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b34a:	f7fc fcc1 	bl	8007cd0 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b358:	d901      	bls.n	800b35e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e028      	b.n	800b3b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b35e:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b36a:	d1ee      	bne.n	800b34a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b1e      	cmp	r3, #30
 800b370:	d008      	beq.n	800b384 <HAL_PWREx_ConfigSupply+0x7c>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b2e      	cmp	r3, #46	; 0x2e
 800b376:	d005      	beq.n	800b384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b1d      	cmp	r3, #29
 800b37c:	d002      	beq.n	800b384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b2d      	cmp	r3, #45	; 0x2d
 800b382:	d114      	bne.n	800b3ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b384:	f7fc fca4 	bl	8007cd0 <HAL_GetTick>
 800b388:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b38a:	e009      	b.n	800b3a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b38c:	f7fc fca0 	bl	8007cd0 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b39a:	d901      	bls.n	800b3a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e007      	b.n	800b3b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b3a0:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ac:	d1ee      	bne.n	800b38c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	58024800 	.word	0x58024800

0800b3bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	4a04      	ldr	r2, [pc, #16]	; (800b3d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b3c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3ca:	60d3      	str	r3, [r2, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	58024800 	.word	0x58024800

0800b3dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08c      	sub	sp, #48	; 0x30
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d102      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f000 bc1d 	b.w	800bc2a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 8087 	beq.w	800b50c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3fe:	4b99      	ldr	r3, [pc, #612]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b406:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b408:	4b96      	ldr	r3, [pc, #600]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b410:	2b10      	cmp	r3, #16
 800b412:	d007      	beq.n	800b424 <HAL_RCC_OscConfig+0x48>
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	2b18      	cmp	r3, #24
 800b418:	d110      	bne.n	800b43c <HAL_RCC_OscConfig+0x60>
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	2b02      	cmp	r3, #2
 800b422:	d10b      	bne.n	800b43c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b424:	4b8f      	ldr	r3, [pc, #572]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d06c      	beq.n	800b50a <HAL_RCC_OscConfig+0x12e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d168      	bne.n	800b50a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e3f6      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b444:	d106      	bne.n	800b454 <HAL_RCC_OscConfig+0x78>
 800b446:	4b87      	ldr	r3, [pc, #540]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a86      	ldr	r2, [pc, #536]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b44c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	e02e      	b.n	800b4b2 <HAL_RCC_OscConfig+0xd6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10c      	bne.n	800b476 <HAL_RCC_OscConfig+0x9a>
 800b45c:	4b81      	ldr	r3, [pc, #516]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a80      	ldr	r2, [pc, #512]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	4b7e      	ldr	r3, [pc, #504]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a7d      	ldr	r2, [pc, #500]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b46e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	e01d      	b.n	800b4b2 <HAL_RCC_OscConfig+0xd6>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b47e:	d10c      	bne.n	800b49a <HAL_RCC_OscConfig+0xbe>
 800b480:	4b78      	ldr	r3, [pc, #480]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a77      	ldr	r2, [pc, #476]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b48a:	6013      	str	r3, [r2, #0]
 800b48c:	4b75      	ldr	r3, [pc, #468]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a74      	ldr	r2, [pc, #464]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	e00b      	b.n	800b4b2 <HAL_RCC_OscConfig+0xd6>
 800b49a:	4b72      	ldr	r3, [pc, #456]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a71      	ldr	r2, [pc, #452]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b4a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	4b6f      	ldr	r3, [pc, #444]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a6e      	ldr	r2, [pc, #440]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b4ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d013      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ba:	f7fc fc09 	bl	8007cd0 <HAL_GetTick>
 800b4be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4c0:	e008      	b.n	800b4d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4c2:	f7fc fc05 	bl	8007cd0 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b64      	cmp	r3, #100	; 0x64
 800b4ce:	d901      	bls.n	800b4d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e3aa      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4d4:	4b63      	ldr	r3, [pc, #396]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0f0      	beq.n	800b4c2 <HAL_RCC_OscConfig+0xe6>
 800b4e0:	e014      	b.n	800b50c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e2:	f7fc fbf5 	bl	8007cd0 <HAL_GetTick>
 800b4e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b4e8:	e008      	b.n	800b4fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4ea:	f7fc fbf1 	bl	8007cd0 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b64      	cmp	r3, #100	; 0x64
 800b4f6:	d901      	bls.n	800b4fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e396      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b4fc:	4b59      	ldr	r3, [pc, #356]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1f0      	bne.n	800b4ea <HAL_RCC_OscConfig+0x10e>
 800b508:	e000      	b.n	800b50c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b50a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80cb 	beq.w	800b6b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b51a:	4b52      	ldr	r3, [pc, #328]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b522:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b524:	4b4f      	ldr	r3, [pc, #316]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d007      	beq.n	800b540 <HAL_RCC_OscConfig+0x164>
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	2b18      	cmp	r3, #24
 800b534:	d156      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x208>
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f003 0303 	and.w	r3, r3, #3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d151      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b540:	4b48      	ldr	r3, [pc, #288]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0304 	and.w	r3, r3, #4
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <HAL_RCC_OscConfig+0x17c>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e368      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b558:	4b42      	ldr	r3, [pc, #264]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f023 0219 	bic.w	r2, r3, #25
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	493f      	ldr	r1, [pc, #252]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b566:	4313      	orrs	r3, r2
 800b568:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b56a:	f7fc fbb1 	bl	8007cd0 <HAL_GetTick>
 800b56e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b570:	e008      	b.n	800b584 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b572:	f7fc fbad 	bl	8007cd0 <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d901      	bls.n	800b584 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e352      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b584:	4b37      	ldr	r3, [pc, #220]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0f0      	beq.n	800b572 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b590:	f7fc fbce 	bl	8007d30 <HAL_GetREVID>
 800b594:	4603      	mov	r3, r0
 800b596:	f241 0203 	movw	r2, #4099	; 0x1003
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d817      	bhi.n	800b5ce <HAL_RCC_OscConfig+0x1f2>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d108      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x1dc>
 800b5a6:	4b2f      	ldr	r3, [pc, #188]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b5ae:	4a2d      	ldr	r2, [pc, #180]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5b6:	e07b      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5b8:	4b2a      	ldr	r3, [pc, #168]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	031b      	lsls	r3, r3, #12
 800b5c6:	4927      	ldr	r1, [pc, #156]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5cc:	e070      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ce:	4b25      	ldr	r3, [pc, #148]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	061b      	lsls	r3, r3, #24
 800b5dc:	4921      	ldr	r1, [pc, #132]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5e2:	e065      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d048      	beq.n	800b67e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f023 0219 	bic.w	r2, r3, #25
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	491a      	ldr	r1, [pc, #104]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5fe:	f7fc fb67 	bl	8007cd0 <HAL_GetTick>
 800b602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b604:	e008      	b.n	800b618 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b606:	f7fc fb63 	bl	8007cd0 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d901      	bls.n	800b618 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e308      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b618:	4b12      	ldr	r3, [pc, #72]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0f0      	beq.n	800b606 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b624:	f7fc fb84 	bl	8007d30 <HAL_GetREVID>
 800b628:	4603      	mov	r3, r0
 800b62a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b62e:	4293      	cmp	r3, r2
 800b630:	d81a      	bhi.n	800b668 <HAL_RCC_OscConfig+0x28c>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	2b40      	cmp	r3, #64	; 0x40
 800b638:	d108      	bne.n	800b64c <HAL_RCC_OscConfig+0x270>
 800b63a:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b642:	4a08      	ldr	r2, [pc, #32]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b648:	6053      	str	r3, [r2, #4]
 800b64a:	e031      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
 800b64c:	4b05      	ldr	r3, [pc, #20]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	031b      	lsls	r3, r3, #12
 800b65a:	4902      	ldr	r1, [pc, #8]	; (800b664 <HAL_RCC_OscConfig+0x288>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	604b      	str	r3, [r1, #4]
 800b660:	e026      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
 800b662:	bf00      	nop
 800b664:	58024400 	.word	0x58024400
 800b668:	4b9a      	ldr	r3, [pc, #616]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	061b      	lsls	r3, r3, #24
 800b676:	4997      	ldr	r1, [pc, #604]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	604b      	str	r3, [r1, #4]
 800b67c:	e018      	b.n	800b6b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b67e:	4b95      	ldr	r3, [pc, #596]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a94      	ldr	r2, [pc, #592]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b684:	f023 0301 	bic.w	r3, r3, #1
 800b688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b68a:	f7fc fb21 	bl	8007cd0 <HAL_GetTick>
 800b68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b690:	e008      	b.n	800b6a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b692:	f7fc fb1d 	bl	8007cd0 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e2c2      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b6a4:	4b8b      	ldr	r3, [pc, #556]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f0      	bne.n	800b692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80a9 	beq.w	800b810 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6be:	4b85      	ldr	r3, [pc, #532]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6c8:	4b82      	ldr	r3, [pc, #520]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b08      	cmp	r3, #8
 800b6d2:	d007      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x308>
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	2b18      	cmp	r3, #24
 800b6d8:	d13a      	bne.n	800b750 <HAL_RCC_OscConfig+0x374>
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f003 0303 	and.w	r3, r3, #3
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d135      	bne.n	800b750 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b6e4:	4b7b      	ldr	r3, [pc, #492]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <HAL_RCC_OscConfig+0x320>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	2b80      	cmp	r3, #128	; 0x80
 800b6f6:	d001      	beq.n	800b6fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e296      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b6fc:	f7fc fb18 	bl	8007d30 <HAL_GetREVID>
 800b700:	4603      	mov	r3, r0
 800b702:	f241 0203 	movw	r2, #4099	; 0x1003
 800b706:	4293      	cmp	r3, r2
 800b708:	d817      	bhi.n	800b73a <HAL_RCC_OscConfig+0x35e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d108      	bne.n	800b724 <HAL_RCC_OscConfig+0x348>
 800b712:	4b70      	ldr	r3, [pc, #448]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b71a:	4a6e      	ldr	r2, [pc, #440]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b720:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b722:	e075      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b724:	4b6b      	ldr	r3, [pc, #428]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	069b      	lsls	r3, r3, #26
 800b732:	4968      	ldr	r1, [pc, #416]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b734:	4313      	orrs	r3, r2
 800b736:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b738:	e06a      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b73a:	4b66      	ldr	r3, [pc, #408]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	061b      	lsls	r3, r3, #24
 800b748:	4962      	ldr	r1, [pc, #392]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b74e:	e05f      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d042      	beq.n	800b7de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b758:	4b5e      	ldr	r3, [pc, #376]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a5d      	ldr	r2, [pc, #372]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b764:	f7fc fab4 	bl	8007cd0 <HAL_GetTick>
 800b768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b76c:	f7fc fab0 	bl	8007cd0 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e255      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b77e:	4b55      	ldr	r3, [pc, #340]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f0      	beq.n	800b76c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b78a:	f7fc fad1 	bl	8007d30 <HAL_GetREVID>
 800b78e:	4603      	mov	r3, r0
 800b790:	f241 0203 	movw	r2, #4099	; 0x1003
 800b794:	4293      	cmp	r3, r2
 800b796:	d817      	bhi.n	800b7c8 <HAL_RCC_OscConfig+0x3ec>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a1b      	ldr	r3, [r3, #32]
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d108      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x3d6>
 800b7a0:	4b4c      	ldr	r3, [pc, #304]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b7a8:	4a4a      	ldr	r2, [pc, #296]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7ae:	6053      	str	r3, [r2, #4]
 800b7b0:	e02e      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
 800b7b2:	4b48      	ldr	r3, [pc, #288]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	069b      	lsls	r3, r3, #26
 800b7c0:	4944      	ldr	r1, [pc, #272]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	604b      	str	r3, [r1, #4]
 800b7c6:	e023      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
 800b7c8:	4b42      	ldr	r3, [pc, #264]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	061b      	lsls	r3, r3, #24
 800b7d6:	493f      	ldr	r1, [pc, #252]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60cb      	str	r3, [r1, #12]
 800b7dc:	e018      	b.n	800b810 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b7de:	4b3d      	ldr	r3, [pc, #244]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a3c      	ldr	r2, [pc, #240]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b7e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ea:	f7fc fa71 	bl	8007cd0 <HAL_GetTick>
 800b7ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b7f0:	e008      	b.n	800b804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b7f2:	f7fc fa6d 	bl	8007cd0 <HAL_GetTick>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d901      	bls.n	800b804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e212      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b804:	4b33      	ldr	r3, [pc, #204]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1f0      	bne.n	800b7f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0308 	and.w	r3, r3, #8
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d036      	beq.n	800b88a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d019      	beq.n	800b858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b824:	4b2b      	ldr	r3, [pc, #172]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b828:	4a2a      	ldr	r2, [pc, #168]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b830:	f7fc fa4e 	bl	8007cd0 <HAL_GetTick>
 800b834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b836:	e008      	b.n	800b84a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b838:	f7fc fa4a 	bl	8007cd0 <HAL_GetTick>
 800b83c:	4602      	mov	r2, r0
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	2b02      	cmp	r3, #2
 800b844:	d901      	bls.n	800b84a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e1ef      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b84a:	4b22      	ldr	r3, [pc, #136]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b84e:	f003 0302 	and.w	r3, r3, #2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0f0      	beq.n	800b838 <HAL_RCC_OscConfig+0x45c>
 800b856:	e018      	b.n	800b88a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b858:	4b1e      	ldr	r3, [pc, #120]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b85c:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b85e:	f023 0301 	bic.w	r3, r3, #1
 800b862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b864:	f7fc fa34 	bl	8007cd0 <HAL_GetTick>
 800b868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b86a:	e008      	b.n	800b87e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b86c:	f7fc fa30 	bl	8007cd0 <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b02      	cmp	r3, #2
 800b878:	d901      	bls.n	800b87e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e1d5      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b87e:	4b15      	ldr	r3, [pc, #84]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1f0      	bne.n	800b86c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d039      	beq.n	800b90a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d01c      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b89e:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b8a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8aa:	f7fc fa11 	bl	8007cd0 <HAL_GetTick>
 800b8ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8b0:	e008      	b.n	800b8c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8b2:	f7fc fa0d 	bl	8007cd0 <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d901      	bls.n	800b8c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e1b2      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8c4:	4b03      	ldr	r3, [pc, #12]	; (800b8d4 <HAL_RCC_OscConfig+0x4f8>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d0f0      	beq.n	800b8b2 <HAL_RCC_OscConfig+0x4d6>
 800b8d0:	e01b      	b.n	800b90a <HAL_RCC_OscConfig+0x52e>
 800b8d2:	bf00      	nop
 800b8d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b8d8:	4b9b      	ldr	r3, [pc, #620]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a9a      	ldr	r2, [pc, #616]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8e4:	f7fc f9f4 	bl	8007cd0 <HAL_GetTick>
 800b8e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b8ea:	e008      	b.n	800b8fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8ec:	f7fc f9f0 	bl	8007cd0 <HAL_GetTick>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d901      	bls.n	800b8fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e195      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b8fe:	4b92      	ldr	r3, [pc, #584]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f0      	bne.n	800b8ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 8081 	beq.w	800ba1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b918:	4b8c      	ldr	r3, [pc, #560]	; (800bb4c <HAL_RCC_OscConfig+0x770>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a8b      	ldr	r2, [pc, #556]	; (800bb4c <HAL_RCC_OscConfig+0x770>)
 800b91e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b924:	f7fc f9d4 	bl	8007cd0 <HAL_GetTick>
 800b928:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b92a:	e008      	b.n	800b93e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b92c:	f7fc f9d0 	bl	8007cd0 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b64      	cmp	r3, #100	; 0x64
 800b938:	d901      	bls.n	800b93e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e175      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b93e:	4b83      	ldr	r3, [pc, #524]	; (800bb4c <HAL_RCC_OscConfig+0x770>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0f0      	beq.n	800b92c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d106      	bne.n	800b960 <HAL_RCC_OscConfig+0x584>
 800b952:	4b7d      	ldr	r3, [pc, #500]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b956:	4a7c      	ldr	r2, [pc, #496]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b958:	f043 0301 	orr.w	r3, r3, #1
 800b95c:	6713      	str	r3, [r2, #112]	; 0x70
 800b95e:	e02d      	b.n	800b9bc <HAL_RCC_OscConfig+0x5e0>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10c      	bne.n	800b982 <HAL_RCC_OscConfig+0x5a6>
 800b968:	4b77      	ldr	r3, [pc, #476]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96c:	4a76      	ldr	r2, [pc, #472]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b96e:	f023 0301 	bic.w	r3, r3, #1
 800b972:	6713      	str	r3, [r2, #112]	; 0x70
 800b974:	4b74      	ldr	r3, [pc, #464]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	4a73      	ldr	r2, [pc, #460]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b97a:	f023 0304 	bic.w	r3, r3, #4
 800b97e:	6713      	str	r3, [r2, #112]	; 0x70
 800b980:	e01c      	b.n	800b9bc <HAL_RCC_OscConfig+0x5e0>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	2b05      	cmp	r3, #5
 800b988:	d10c      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x5c8>
 800b98a:	4b6f      	ldr	r3, [pc, #444]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98e:	4a6e      	ldr	r2, [pc, #440]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b990:	f043 0304 	orr.w	r3, r3, #4
 800b994:	6713      	str	r3, [r2, #112]	; 0x70
 800b996:	4b6c      	ldr	r3, [pc, #432]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b99a:	4a6b      	ldr	r2, [pc, #428]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b99c:	f043 0301 	orr.w	r3, r3, #1
 800b9a0:	6713      	str	r3, [r2, #112]	; 0x70
 800b9a2:	e00b      	b.n	800b9bc <HAL_RCC_OscConfig+0x5e0>
 800b9a4:	4b68      	ldr	r3, [pc, #416]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a8:	4a67      	ldr	r2, [pc, #412]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b9aa:	f023 0301 	bic.w	r3, r3, #1
 800b9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b9b0:	4b65      	ldr	r3, [pc, #404]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	4a64      	ldr	r2, [pc, #400]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b9b6:	f023 0304 	bic.w	r3, r3, #4
 800b9ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d015      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c4:	f7fc f984 	bl	8007cd0 <HAL_GetTick>
 800b9c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9ca:	e00a      	b.n	800b9e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9cc:	f7fc f980 	bl	8007cd0 <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d901      	bls.n	800b9e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e123      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9e2:	4b59      	ldr	r3, [pc, #356]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800b9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0ee      	beq.n	800b9cc <HAL_RCC_OscConfig+0x5f0>
 800b9ee:	e014      	b.n	800ba1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9f0:	f7fc f96e 	bl	8007cd0 <HAL_GetTick>
 800b9f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b9f6:	e00a      	b.n	800ba0e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9f8:	f7fc f96a 	bl	8007cd0 <HAL_GetTick>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d901      	bls.n	800ba0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e10d      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba0e:	4b4e      	ldr	r3, [pc, #312]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba12:	f003 0302 	and.w	r3, r3, #2
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1ee      	bne.n	800b9f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 8102 	beq.w	800bc28 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ba24:	4b48      	ldr	r3, [pc, #288]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba2c:	2b18      	cmp	r3, #24
 800ba2e:	f000 80bd 	beq.w	800bbac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	f040 809e 	bne.w	800bb78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba3c:	4b42      	ldr	r3, [pc, #264]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a41      	ldr	r2, [pc, #260]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba48:	f7fc f942 	bl	8007cd0 <HAL_GetTick>
 800ba4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba4e:	e008      	b.n	800ba62 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba50:	f7fc f93e 	bl	8007cd0 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d901      	bls.n	800ba62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e0e3      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba62:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1f0      	bne.n	800ba50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba6e:	4b36      	ldr	r3, [pc, #216]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba72:	4b37      	ldr	r3, [pc, #220]	; (800bb50 <HAL_RCC_OscConfig+0x774>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ba7e:	0112      	lsls	r2, r2, #4
 800ba80:	430a      	orrs	r2, r1
 800ba82:	4931      	ldr	r1, [pc, #196]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	628b      	str	r3, [r1, #40]	; 0x28
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba96:	3b01      	subs	r3, #1
 800ba98:	025b      	lsls	r3, r3, #9
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	3b01      	subs	r3, #1
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab0:	3b01      	subs	r3, #1
 800bab2:	061b      	lsls	r3, r3, #24
 800bab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bab8:	4923      	ldr	r1, [pc, #140]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800baba:	4313      	orrs	r3, r2
 800babc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800babe:	4b22      	ldr	r3, [pc, #136]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	4a21      	ldr	r2, [pc, #132]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bac4:	f023 0301 	bic.w	r3, r3, #1
 800bac8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800baca:	4b1f      	ldr	r3, [pc, #124]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bace:	4b21      	ldr	r3, [pc, #132]	; (800bb54 <HAL_RCC_OscConfig+0x778>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bad6:	00d2      	lsls	r2, r2, #3
 800bad8:	491b      	ldr	r1, [pc, #108]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bada:	4313      	orrs	r3, r2
 800badc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bade:	4b1a      	ldr	r3, [pc, #104]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	f023 020c 	bic.w	r2, r3, #12
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baea:	4917      	ldr	r1, [pc, #92]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800baec:	4313      	orrs	r3, r2
 800baee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800baf0:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	f023 0202 	bic.w	r2, r3, #2
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	4912      	ldr	r1, [pc, #72]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb02:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	4a10      	ldr	r2, [pc, #64]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	4a0d      	ldr	r2, [pc, #52]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bb26:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	4a07      	ldr	r2, [pc, #28]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb2c:	f043 0301 	orr.w	r3, r3, #1
 800bb30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a04      	ldr	r2, [pc, #16]	; (800bb48 <HAL_RCC_OscConfig+0x76c>)
 800bb38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3e:	f7fc f8c7 	bl	8007cd0 <HAL_GetTick>
 800bb42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb44:	e011      	b.n	800bb6a <HAL_RCC_OscConfig+0x78e>
 800bb46:	bf00      	nop
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	58024800 	.word	0x58024800
 800bb50:	fffffc0c 	.word	0xfffffc0c
 800bb54:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb58:	f7fc f8ba 	bl	8007cd0 <HAL_GetTick>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d901      	bls.n	800bb6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e05f      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb6a:	4b32      	ldr	r3, [pc, #200]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0f0      	beq.n	800bb58 <HAL_RCC_OscConfig+0x77c>
 800bb76:	e057      	b.n	800bc28 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb78:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a2d      	ldr	r2, [pc, #180]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bb7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb84:	f7fc f8a4 	bl	8007cd0 <HAL_GetTick>
 800bb88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb8a:	e008      	b.n	800bb9e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb8c:	f7fc f8a0 	bl	8007cd0 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e045      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb9e:	4b25      	ldr	r3, [pc, #148]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f0      	bne.n	800bb8c <HAL_RCC_OscConfig+0x7b0>
 800bbaa:	e03d      	b.n	800bc28 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bbac:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bbb2:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <HAL_RCC_OscConfig+0x858>)
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d031      	beq.n	800bc24 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f003 0203 	and.w	r2, r3, #3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d12a      	bne.n	800bc24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	091b      	lsrs	r3, r3, #4
 800bbd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d122      	bne.n	800bc24 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d11a      	bne.n	800bc24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	0a5b      	lsrs	r3, r3, #9
 800bbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d111      	bne.n	800bc24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	0c1b      	lsrs	r3, r3, #16
 800bc04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d108      	bne.n	800bc24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	0e1b      	lsrs	r3, r3, #24
 800bc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d001      	beq.n	800bc28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3730      	adds	r7, #48	; 0x30
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400

0800bc38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e19c      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc4c:	4b8a      	ldr	r3, [pc, #552]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d910      	bls.n	800bc7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc5a:	4b87      	ldr	r3, [pc, #540]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f023 020f 	bic.w	r2, r3, #15
 800bc62:	4985      	ldr	r1, [pc, #532]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc6a:	4b83      	ldr	r3, [pc, #524]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 030f 	and.w	r3, r3, #15
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d001      	beq.n	800bc7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e184      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d010      	beq.n	800bcaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	691a      	ldr	r2, [r3, #16]
 800bc8c:	4b7b      	ldr	r3, [pc, #492]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d908      	bls.n	800bcaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bc98:	4b78      	ldr	r3, [pc, #480]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4975      	ldr	r1, [pc, #468]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0308 	and.w	r3, r3, #8
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d010      	beq.n	800bcd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695a      	ldr	r2, [r3, #20]
 800bcba:	4b70      	ldr	r3, [pc, #448]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d908      	bls.n	800bcd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bcc6:	4b6d      	ldr	r3, [pc, #436]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bcc8:	69db      	ldr	r3, [r3, #28]
 800bcca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	496a      	ldr	r1, [pc, #424]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0310 	and.w	r3, r3, #16
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d010      	beq.n	800bd06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699a      	ldr	r2, [r3, #24]
 800bce8:	4b64      	ldr	r3, [pc, #400]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d908      	bls.n	800bd06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bcf4:	4b61      	ldr	r3, [pc, #388]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	495e      	ldr	r1, [pc, #376]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0320 	and.w	r3, r3, #32
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d010      	beq.n	800bd34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69da      	ldr	r2, [r3, #28]
 800bd16:	4b59      	ldr	r3, [pc, #356]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d908      	bls.n	800bd34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bd22:	4b56      	ldr	r3, [pc, #344]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	4953      	ldr	r1, [pc, #332]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd30:	4313      	orrs	r3, r2
 800bd32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0302 	and.w	r3, r3, #2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d010      	beq.n	800bd62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	4b4d      	ldr	r3, [pc, #308]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d908      	bls.n	800bd62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd50:	4b4a      	ldr	r3, [pc, #296]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	f023 020f 	bic.w	r2, r3, #15
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	4947      	ldr	r1, [pc, #284]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d055      	beq.n	800be1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bd6e:	4b43      	ldr	r3, [pc, #268]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	4940      	ldr	r1, [pc, #256]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d107      	bne.n	800bd98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd88:	4b3c      	ldr	r3, [pc, #240]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d121      	bne.n	800bdd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0f6      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d107      	bne.n	800bdb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bda0:	4b36      	ldr	r3, [pc, #216]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d115      	bne.n	800bdd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e0ea      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d107      	bne.n	800bdc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bdb8:	4b30      	ldr	r3, [pc, #192]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e0de      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdc8:	4b2c      	ldr	r3, [pc, #176]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e0d6      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bdd8:	4b28      	ldr	r3, [pc, #160]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	f023 0207 	bic.w	r2, r3, #7
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4925      	ldr	r1, [pc, #148]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800bde6:	4313      	orrs	r3, r2
 800bde8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdea:	f7fb ff71 	bl	8007cd0 <HAL_GetTick>
 800bdee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdf0:	e00a      	b.n	800be08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdf2:	f7fb ff6d 	bl	8007cd0 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	4293      	cmp	r3, r2
 800be02:	d901      	bls.n	800be08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800be04:	2303      	movs	r3, #3
 800be06:	e0be      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	429a      	cmp	r2, r3
 800be18:	d1eb      	bne.n	800bdf2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d010      	beq.n	800be48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	4b14      	ldr	r3, [pc, #80]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f003 030f 	and.w	r3, r3, #15
 800be32:	429a      	cmp	r2, r3
 800be34:	d208      	bcs.n	800be48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	f023 020f 	bic.w	r2, r3, #15
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	490e      	ldr	r1, [pc, #56]	; (800be7c <HAL_RCC_ClockConfig+0x244>)
 800be44:	4313      	orrs	r3, r2
 800be46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be48:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d214      	bcs.n	800be80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be56:	4b08      	ldr	r3, [pc, #32]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f023 020f 	bic.w	r2, r3, #15
 800be5e:	4906      	ldr	r1, [pc, #24]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	4313      	orrs	r3, r2
 800be64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <HAL_RCC_ClockConfig+0x240>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 030f 	and.w	r3, r3, #15
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d005      	beq.n	800be80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e086      	b.n	800bf86 <HAL_RCC_ClockConfig+0x34e>
 800be78:	52002000 	.word	0x52002000
 800be7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d010      	beq.n	800beae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	691a      	ldr	r2, [r3, #16]
 800be90:	4b3f      	ldr	r3, [pc, #252]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be98:	429a      	cmp	r2, r3
 800be9a:	d208      	bcs.n	800beae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be9c:	4b3c      	ldr	r3, [pc, #240]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	4939      	ldr	r1, [pc, #228]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800beaa:	4313      	orrs	r3, r2
 800beac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0308 	and.w	r3, r3, #8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d010      	beq.n	800bedc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695a      	ldr	r2, [r3, #20]
 800bebe:	4b34      	ldr	r3, [pc, #208]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d208      	bcs.n	800bedc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800beca:	4b31      	ldr	r3, [pc, #196]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	492e      	ldr	r1, [pc, #184]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bed8:	4313      	orrs	r3, r2
 800beda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0310 	and.w	r3, r3, #16
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d010      	beq.n	800bf0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	699a      	ldr	r2, [r3, #24]
 800beec:	4b28      	ldr	r3, [pc, #160]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800beee:	69db      	ldr	r3, [r3, #28]
 800bef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d208      	bcs.n	800bf0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bef8:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	4922      	ldr	r1, [pc, #136]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0320 	and.w	r3, r3, #32
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d010      	beq.n	800bf38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	69da      	ldr	r2, [r3, #28]
 800bf1a:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d208      	bcs.n	800bf38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bf26:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	4917      	ldr	r1, [pc, #92]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf34:	4313      	orrs	r3, r2
 800bf36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bf38:	f000 f834 	bl	800bfa4 <HAL_RCC_GetSysClockFreq>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	4b14      	ldr	r3, [pc, #80]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	f003 030f 	and.w	r3, r3, #15
 800bf48:	4912      	ldr	r1, [pc, #72]	; (800bf94 <HAL_RCC_ClockConfig+0x35c>)
 800bf4a:	5ccb      	ldrb	r3, [r1, r3]
 800bf4c:	f003 031f 	and.w	r3, r3, #31
 800bf50:	fa22 f303 	lsr.w	r3, r2, r3
 800bf54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bf56:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <HAL_RCC_ClockConfig+0x358>)
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	f003 030f 	and.w	r3, r3, #15
 800bf5e:	4a0d      	ldr	r2, [pc, #52]	; (800bf94 <HAL_RCC_ClockConfig+0x35c>)
 800bf60:	5cd3      	ldrb	r3, [r2, r3]
 800bf62:	f003 031f 	and.w	r3, r3, #31
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	fa22 f303 	lsr.w	r3, r2, r3
 800bf6c:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <HAL_RCC_ClockConfig+0x360>)
 800bf6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bf70:	4a0a      	ldr	r2, [pc, #40]	; (800bf9c <HAL_RCC_ClockConfig+0x364>)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bf76:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <HAL_RCC_ClockConfig+0x368>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fb fe5e 	bl	8007c3c <HAL_InitTick>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	58024400 	.word	0x58024400
 800bf94:	080116d4 	.word	0x080116d4
 800bf98:	24000008 	.word	0x24000008
 800bf9c:	24000004 	.word	0x24000004
 800bfa0:	2400001c 	.word	0x2400001c

0800bfa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b089      	sub	sp, #36	; 0x24
 800bfa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bfaa:	4bb3      	ldr	r3, [pc, #716]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfb2:	2b18      	cmp	r3, #24
 800bfb4:	f200 8155 	bhi.w	800c262 <HAL_RCC_GetSysClockFreq+0x2be>
 800bfb8:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800c025 	.word	0x0800c025
 800bfc4:	0800c263 	.word	0x0800c263
 800bfc8:	0800c263 	.word	0x0800c263
 800bfcc:	0800c263 	.word	0x0800c263
 800bfd0:	0800c263 	.word	0x0800c263
 800bfd4:	0800c263 	.word	0x0800c263
 800bfd8:	0800c263 	.word	0x0800c263
 800bfdc:	0800c263 	.word	0x0800c263
 800bfe0:	0800c04b 	.word	0x0800c04b
 800bfe4:	0800c263 	.word	0x0800c263
 800bfe8:	0800c263 	.word	0x0800c263
 800bfec:	0800c263 	.word	0x0800c263
 800bff0:	0800c263 	.word	0x0800c263
 800bff4:	0800c263 	.word	0x0800c263
 800bff8:	0800c263 	.word	0x0800c263
 800bffc:	0800c263 	.word	0x0800c263
 800c000:	0800c051 	.word	0x0800c051
 800c004:	0800c263 	.word	0x0800c263
 800c008:	0800c263 	.word	0x0800c263
 800c00c:	0800c263 	.word	0x0800c263
 800c010:	0800c263 	.word	0x0800c263
 800c014:	0800c263 	.word	0x0800c263
 800c018:	0800c263 	.word	0x0800c263
 800c01c:	0800c263 	.word	0x0800c263
 800c020:	0800c057 	.word	0x0800c057
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c024:	4b94      	ldr	r3, [pc, #592]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 0320 	and.w	r3, r3, #32
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d009      	beq.n	800c044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c030:	4b91      	ldr	r3, [pc, #580]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	08db      	lsrs	r3, r3, #3
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	4a90      	ldr	r2, [pc, #576]	; (800c27c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c03c:	fa22 f303 	lsr.w	r3, r2, r3
 800c040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c042:	e111      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c044:	4b8d      	ldr	r3, [pc, #564]	; (800c27c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c046:	61bb      	str	r3, [r7, #24]
    break;
 800c048:	e10e      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c04a:	4b8d      	ldr	r3, [pc, #564]	; (800c280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c04c:	61bb      	str	r3, [r7, #24]
    break;
 800c04e:	e10b      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c050:	4b8c      	ldr	r3, [pc, #560]	; (800c284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c052:	61bb      	str	r3, [r7, #24]
    break;
 800c054:	e108      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c056:	4b88      	ldr	r3, [pc, #544]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c060:	4b85      	ldr	r3, [pc, #532]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c064:	091b      	lsrs	r3, r3, #4
 800c066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c06a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c06c:	4b82      	ldr	r3, [pc, #520]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c076:	4b80      	ldr	r3, [pc, #512]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07a:	08db      	lsrs	r3, r3, #3
 800c07c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	fb02 f303 	mul.w	r3, r2, r3
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 80e1 	beq.w	800c25c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	f000 8083 	beq.w	800c1a8 <HAL_RCC_GetSysClockFreq+0x204>
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	f200 80a1 	bhi.w	800c1ec <HAL_RCC_GetSysClockFreq+0x248>
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x114>
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d056      	beq.n	800c164 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c0b6:	e099      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b8:	4b6f      	ldr	r3, [pc, #444]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d02d      	beq.n	800c120 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0c4:	4b6c      	ldr	r3, [pc, #432]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	08db      	lsrs	r3, r3, #3
 800c0ca:	f003 0303 	and.w	r3, r3, #3
 800c0ce:	4a6b      	ldr	r2, [pc, #428]	; (800c27c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	ee07 3a90 	vmov	s15, r3
 800c0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ee:	4b62      	ldr	r3, [pc, #392]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c102:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c10e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c11e:	e087      	b.n	800c230 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	ee07 3a90 	vmov	s15, r3
 800c126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c28c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c132:	4b51      	ldr	r3, [pc, #324]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c142:	ed97 6a02 	vldr	s12, [r7, #8]
 800c146:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c162:	e065      	b.n	800c230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c290 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c176:	4b40      	ldr	r3, [pc, #256]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c186:	ed97 6a02 	vldr	s12, [r7, #8]
 800c18a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a6:	e043      	b.n	800c230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c294 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ba:	4b2f      	ldr	r3, [pc, #188]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ea:	e021      	b.n	800c230 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c290 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fe:	4b1e      	ldr	r3, [pc, #120]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c212:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c230:	4b11      	ldr	r3, [pc, #68]	; (800c278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c234:	0a5b      	lsrs	r3, r3, #9
 800c236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23a:	3301      	adds	r3, #1
 800c23c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	ee07 3a90 	vmov	s15, r3
 800c244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c248:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c254:	ee17 3a90 	vmov	r3, s15
 800c258:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c25a:	e005      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
    break;
 800c260:	e002      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c262:	4b07      	ldr	r3, [pc, #28]	; (800c280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c264:	61bb      	str	r3, [r7, #24]
    break;
 800c266:	bf00      	nop
  }

  return sysclockfreq;
 800c268:	69bb      	ldr	r3, [r7, #24]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3724      	adds	r7, #36	; 0x24
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	03d09000 	.word	0x03d09000
 800c280:	003d0900 	.word	0x003d0900
 800c284:	007a1200 	.word	0x007a1200
 800c288:	46000000 	.word	0x46000000
 800c28c:	4c742400 	.word	0x4c742400
 800c290:	4a742400 	.word	0x4a742400
 800c294:	4af42400 	.word	0x4af42400

0800c298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c29e:	f7ff fe81 	bl	800bfa4 <HAL_RCC_GetSysClockFreq>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	0a1b      	lsrs	r3, r3, #8
 800c2aa:	f003 030f 	and.w	r3, r3, #15
 800c2ae:	490f      	ldr	r1, [pc, #60]	; (800c2ec <HAL_RCC_GetHCLKFreq+0x54>)
 800c2b0:	5ccb      	ldrb	r3, [r1, r3]
 800c2b2:	f003 031f 	and.w	r3, r3, #31
 800c2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	f003 030f 	and.w	r3, r3, #15
 800c2c4:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <HAL_RCC_GetHCLKFreq+0x54>)
 800c2c6:	5cd3      	ldrb	r3, [r2, r3]
 800c2c8:	f003 031f 	and.w	r3, r3, #31
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d2:	4a07      	ldr	r2, [pc, #28]	; (800c2f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c2d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c2d6:	4a07      	ldr	r2, [pc, #28]	; (800c2f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c2dc:	4b04      	ldr	r3, [pc, #16]	; (800c2f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c2de:	681b      	ldr	r3, [r3, #0]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	58024400 	.word	0x58024400
 800c2ec:	080116d4 	.word	0x080116d4
 800c2f0:	24000008 	.word	0x24000008
 800c2f4:	24000004 	.word	0x24000004

0800c2f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c2fc:	f7ff ffcc 	bl	800c298 <HAL_RCC_GetHCLKFreq>
 800c300:	4602      	mov	r2, r0
 800c302:	4b06      	ldr	r3, [pc, #24]	; (800c31c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	091b      	lsrs	r3, r3, #4
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	4904      	ldr	r1, [pc, #16]	; (800c320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c30e:	5ccb      	ldrb	r3, [r1, r3]
 800c310:	f003 031f 	and.w	r3, r3, #31
 800c314:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c318:	4618      	mov	r0, r3
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	58024400 	.word	0x58024400
 800c320:	080116d4 	.word	0x080116d4

0800c324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c328:	f7ff ffb6 	bl	800c298 <HAL_RCC_GetHCLKFreq>
 800c32c:	4602      	mov	r2, r0
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	4904      	ldr	r1, [pc, #16]	; (800c34c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c33a:	5ccb      	ldrb	r3, [r1, r3]
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c344:	4618      	mov	r0, r3
 800c346:	bd80      	pop	{r7, pc}
 800c348:	58024400 	.word	0x58024400
 800c34c:	080116d4 	.word	0x080116d4

0800c350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c358:	2300      	movs	r3, #0
 800c35a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c35c:	2300      	movs	r3, #0
 800c35e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d03f      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c374:	d02a      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c376:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c37a:	d824      	bhi.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c37c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c380:	d018      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c386:	d81e      	bhi.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d003      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c38c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c390:	d007      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c392:	e018      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c394:	4ba3      	ldr	r3, [pc, #652]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	4aa2      	ldr	r2, [pc, #648]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c39e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c3a0:	e015      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 f9d5 	bl	800d758 <RCCEx_PLL2_Config>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c3b2:	e00c      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3324      	adds	r3, #36	; 0x24
 800c3b8:	2102      	movs	r1, #2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fa7e 	bl	800d8bc <RCCEx_PLL3_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c3c4:	e003      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ca:	e000      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c3cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d109      	bne.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c3d4:	4b93      	ldr	r3, [pc, #588]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e0:	4990      	ldr	r1, [pc, #576]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	650b      	str	r3, [r1, #80]	; 0x50
 800c3e6:	e001      	b.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d03d      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fc:	2b04      	cmp	r3, #4
 800c3fe:	d826      	bhi.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c400:	a201      	add	r2, pc, #4	; (adr r2, 800c408 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c406:	bf00      	nop
 800c408:	0800c41d 	.word	0x0800c41d
 800c40c:	0800c42b 	.word	0x0800c42b
 800c410:	0800c43d 	.word	0x0800c43d
 800c414:	0800c455 	.word	0x0800c455
 800c418:	0800c455 	.word	0x0800c455
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c41c:	4b81      	ldr	r3, [pc, #516]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a80      	ldr	r2, [pc, #512]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c428:	e015      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3304      	adds	r3, #4
 800c42e:	2100      	movs	r1, #0
 800c430:	4618      	mov	r0, r3
 800c432:	f001 f991 	bl	800d758 <RCCEx_PLL2_Config>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c43a:	e00c      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3324      	adds	r3, #36	; 0x24
 800c440:	2100      	movs	r1, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fa3a 	bl	800d8bc <RCCEx_PLL3_Config>
 800c448:	4603      	mov	r3, r0
 800c44a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c44c:	e003      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	75fb      	strb	r3, [r7, #23]
      break;
 800c452:	e000      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c454:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c45c:	4b71      	ldr	r3, [pc, #452]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c460:	f023 0207 	bic.w	r2, r3, #7
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c468:	496e      	ldr	r1, [pc, #440]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	650b      	str	r3, [r1, #80]	; 0x50
 800c46e:	e001      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d042      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c488:	d02b      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c48e:	d825      	bhi.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c490:	2bc0      	cmp	r3, #192	; 0xc0
 800c492:	d028      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c494:	2bc0      	cmp	r3, #192	; 0xc0
 800c496:	d821      	bhi.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c498:	2b80      	cmp	r3, #128	; 0x80
 800c49a:	d016      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d81d      	bhi.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c4a4:	2b40      	cmp	r3, #64	; 0x40
 800c4a6:	d007      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c4a8:	e018      	b.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4aa:	4b5e      	ldr	r3, [pc, #376]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	4a5d      	ldr	r2, [pc, #372]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c4b6:	e017      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	2100      	movs	r1, #0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f001 f94a 	bl	800d758 <RCCEx_PLL2_Config>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c4c8:	e00e      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3324      	adds	r3, #36	; 0x24
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f001 f9f3 	bl	800d8bc <RCCEx_PLL3_Config>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c4da:	e005      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	75fb      	strb	r3, [r7, #23]
      break;
 800c4e0:	e002      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c4e2:	bf00      	nop
 800c4e4:	e000      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c4e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d109      	bne.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c4ee:	4b4d      	ldr	r3, [pc, #308]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fa:	494a      	ldr	r1, [pc, #296]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	650b      	str	r3, [r1, #80]	; 0x50
 800c500:	e001      	b.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d049      	beq.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c51c:	d030      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c51e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c522:	d82a      	bhi.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c528:	d02c      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c52a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c52e:	d824      	bhi.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c534:	d018      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c53a:	d81e      	bhi.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c544:	d007      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c546:	e018      	b.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c548:	4b36      	ldr	r3, [pc, #216]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54c:	4a35      	ldr	r2, [pc, #212]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c54e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c554:	e017      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3304      	adds	r3, #4
 800c55a:	2100      	movs	r1, #0
 800c55c:	4618      	mov	r0, r3
 800c55e:	f001 f8fb 	bl	800d758 <RCCEx_PLL2_Config>
 800c562:	4603      	mov	r3, r0
 800c564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c566:	e00e      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3324      	adds	r3, #36	; 0x24
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 f9a4 	bl	800d8bc <RCCEx_PLL3_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c578:	e005      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	75fb      	strb	r3, [r7, #23]
      break;
 800c57e:	e002      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c580:	bf00      	nop
 800c582:	e000      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c584:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c58c:	4b25      	ldr	r3, [pc, #148]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c590:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c59a:	4922      	ldr	r1, [pc, #136]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	658b      	str	r3, [r1, #88]	; 0x58
 800c5a0:	e001      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d04b      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c5b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5bc:	d030      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c5be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5c2:	d82a      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c5c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5c8:	d02e      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c5ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5ce:	d824      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c5d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d4:	d018      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c5d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5da:	d81e      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c5e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5e4:	d007      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c5e6:	e018      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c5ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5f4:	e019      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f001 f8ab 	bl	800d758 <RCCEx_PLL2_Config>
 800c602:	4603      	mov	r3, r0
 800c604:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c606:	e010      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3324      	adds	r3, #36	; 0x24
 800c60c:	2100      	movs	r1, #0
 800c60e:	4618      	mov	r0, r3
 800c610:	f001 f954 	bl	800d8bc <RCCEx_PLL3_Config>
 800c614:	4603      	mov	r3, r0
 800c616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c618:	e007      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	75fb      	strb	r3, [r7, #23]
      break;
 800c61e:	e004      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c624:	58024400 	.word	0x58024400
      break;
 800c628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c630:	4b99      	ldr	r3, [pc, #612]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c634:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c63e:	4996      	ldr	r1, [pc, #600]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c640:	4313      	orrs	r3, r2
 800c642:	658b      	str	r3, [r1, #88]	; 0x58
 800c644:	e001      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d032      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c65a:	2b30      	cmp	r3, #48	; 0x30
 800c65c:	d01c      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c65e:	2b30      	cmp	r3, #48	; 0x30
 800c660:	d817      	bhi.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c662:	2b20      	cmp	r3, #32
 800c664:	d00c      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c666:	2b20      	cmp	r3, #32
 800c668:	d813      	bhi.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d016      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c66e:	2b10      	cmp	r3, #16
 800c670:	d10f      	bne.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c672:	4b89      	ldr	r3, [pc, #548]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	4a88      	ldr	r2, [pc, #544]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c67c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c67e:	e00e      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3304      	adds	r3, #4
 800c684:	2102      	movs	r1, #2
 800c686:	4618      	mov	r0, r3
 800c688:	f001 f866 	bl	800d758 <RCCEx_PLL2_Config>
 800c68c:	4603      	mov	r3, r0
 800c68e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c690:	e005      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	75fb      	strb	r3, [r7, #23]
      break;
 800c696:	e002      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c698:	bf00      	nop
 800c69a:	e000      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c69c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d109      	bne.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c6a4:	4b7c      	ldr	r3, [pc, #496]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b0:	4979      	ldr	r1, [pc, #484]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c6b6:	e001      	b.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d047      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6d0:	d030      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c6d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6d6:	d82a      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c6d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6dc:	d02c      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c6de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6e2:	d824      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6e8:	d018      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6ee:	d81e      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6f8:	d007      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c6fa:	e018      	b.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6fc:	4b66      	ldr	r3, [pc, #408]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c700:	4a65      	ldr	r2, [pc, #404]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c708:	e017      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3304      	adds	r3, #4
 800c70e:	2100      	movs	r1, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f001 f821 	bl	800d758 <RCCEx_PLL2_Config>
 800c716:	4603      	mov	r3, r0
 800c718:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c71a:	e00e      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3324      	adds	r3, #36	; 0x24
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f001 f8ca 	bl	800d8bc <RCCEx_PLL3_Config>
 800c728:	4603      	mov	r3, r0
 800c72a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c72c:	e005      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	75fb      	strb	r3, [r7, #23]
      break;
 800c732:	e002      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c734:	bf00      	nop
 800c736:	e000      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d109      	bne.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c740:	4b55      	ldr	r3, [pc, #340]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c744:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c74c:	4952      	ldr	r1, [pc, #328]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c74e:	4313      	orrs	r3, r2
 800c750:	650b      	str	r3, [r1, #80]	; 0x50
 800c752:	e001      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
 800c756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d049      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c76c:	d02e      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c76e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c772:	d828      	bhi.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c778:	d02a      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c77a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c77e:	d822      	bhi.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c780:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c784:	d026      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c786:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c78a:	d81c      	bhi.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c78c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c790:	d010      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c796:	d816      	bhi.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01d      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a0:	d111      	bne.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 ffd5 	bl	800d758 <RCCEx_PLL2_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c7b2:	e012      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3324      	adds	r3, #36	; 0x24
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f001 f87e 	bl	800d8bc <RCCEx_PLL3_Config>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c7c4:	e009      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ca:	e006      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c7cc:	bf00      	nop
 800c7ce:	e004      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c7d0:	bf00      	nop
 800c7d2:	e002      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c7d4:	bf00      	nop
 800c7d6:	e000      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c7d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d109      	bne.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c7e0:	4b2d      	ldr	r3, [pc, #180]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ec:	492a      	ldr	r1, [pc, #168]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	650b      	str	r3, [r1, #80]	; 0x50
 800c7f2:	e001      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d04d      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c80a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c80e:	d02e      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c814:	d828      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c81a:	d02a      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c820:	d822      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c826:	d026      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c82c:	d81c      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c832:	d010      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c838:	d816      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01d      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c83e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c842:	d111      	bne.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	3304      	adds	r3, #4
 800c848:	2101      	movs	r1, #1
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 ff84 	bl	800d758 <RCCEx_PLL2_Config>
 800c850:	4603      	mov	r3, r0
 800c852:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c854:	e012      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3324      	adds	r3, #36	; 0x24
 800c85a:	2101      	movs	r1, #1
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 f82d 	bl	800d8bc <RCCEx_PLL3_Config>
 800c862:	4603      	mov	r3, r0
 800c864:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c866:	e009      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]
      break;
 800c86c:	e006      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c86e:	bf00      	nop
 800c870:	e004      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c872:	bf00      	nop
 800c874:	e002      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c87a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10c      	bne.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c886:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c890:	4901      	ldr	r1, [pc, #4]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c892:	4313      	orrs	r3, r2
 800c894:	658b      	str	r3, [r1, #88]	; 0x58
 800c896:	e003      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d02f      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8b4:	d00e      	beq.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c8b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ba:	d814      	bhi.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d015      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c8c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8c4:	d10f      	bne.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8c6:	4baf      	ldr	r3, [pc, #700]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ca:	4aae      	ldr	r2, [pc, #696]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c8d2:	e00c      	b.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	2101      	movs	r1, #1
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 ff3c 	bl	800d758 <RCCEx_PLL2_Config>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c8e4:	e003      	b.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c8ea:	e000      	b.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c8ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c8f4:	4ba3      	ldr	r3, [pc, #652]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c900:	49a0      	ldr	r1, [pc, #640]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c902:	4313      	orrs	r3, r2
 800c904:	650b      	str	r3, [r1, #80]	; 0x50
 800c906:	e001      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c914:	2b00      	cmp	r3, #0
 800c916:	d032      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d81b      	bhi.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c920:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c95f 	.word	0x0800c95f
 800c92c:	0800c939 	.word	0x0800c939
 800c930:	0800c947 	.word	0x0800c947
 800c934:	0800c95f 	.word	0x0800c95f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c938:	4b92      	ldr	r3, [pc, #584]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	4a91      	ldr	r2, [pc, #580]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c944:	e00c      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3304      	adds	r3, #4
 800c94a:	2102      	movs	r1, #2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 ff03 	bl	800d758 <RCCEx_PLL2_Config>
 800c952:	4603      	mov	r3, r0
 800c954:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c956:	e003      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
      break;
 800c95c:	e000      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c95e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d109      	bne.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c966:	4b87      	ldr	r3, [pc, #540]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96a:	f023 0203 	bic.w	r2, r3, #3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c972:	4984      	ldr	r1, [pc, #528]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c974:	4313      	orrs	r3, r2
 800c976:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c978:	e001      	b.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 8086 	beq.w	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c98c:	4b7e      	ldr	r3, [pc, #504]	; (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a7d      	ldr	r2, [pc, #500]	; (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c998:	f7fb f99a 	bl	8007cd0 <HAL_GetTick>
 800c99c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c99e:	e009      	b.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9a0:	f7fb f996 	bl	8007cd0 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	2b64      	cmp	r3, #100	; 0x64
 800c9ac:	d902      	bls.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	75fb      	strb	r3, [r7, #23]
        break;
 800c9b2:	e005      	b.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c9b4:	4b74      	ldr	r3, [pc, #464]	; (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0ef      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d166      	bne.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c9c6:	4b6f      	ldr	r3, [pc, #444]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c9d0:	4053      	eors	r3, r2
 800c9d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d013      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9da:	4b6a      	ldr	r3, [pc, #424]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c9e4:	4b67      	ldr	r3, [pc, #412]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e8:	4a66      	ldr	r2, [pc, #408]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c9f0:	4b64      	ldr	r3, [pc, #400]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f4:	4a63      	ldr	r2, [pc, #396]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c9fc:	4a61      	ldr	r2, [pc, #388]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca0c:	d115      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca0e:	f7fb f95f 	bl	8007cd0 <HAL_GetTick>
 800ca12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca14:	e00b      	b.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca16:	f7fb f95b 	bl	8007cd0 <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d902      	bls.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	75fb      	strb	r3, [r7, #23]
            break;
 800ca2c:	e005      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca2e:	4b55      	ldr	r3, [pc, #340]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0ed      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d126      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca4e:	d10d      	bne.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ca50:	4b4c      	ldr	r3, [pc, #304]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca5e:	0919      	lsrs	r1, r3, #4
 800ca60:	4b4a      	ldr	r3, [pc, #296]	; (800cb8c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ca62:	400b      	ands	r3, r1
 800ca64:	4947      	ldr	r1, [pc, #284]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	610b      	str	r3, [r1, #16]
 800ca6a:	e005      	b.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ca6c:	4b45      	ldr	r3, [pc, #276]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	4a44      	ldr	r2, [pc, #272]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca76:	6113      	str	r3, [r2, #16]
 800ca78:	4b42      	ldr	r3, [pc, #264]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca86:	493f      	ldr	r1, [pc, #252]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	670b      	str	r3, [r1, #112]	; 0x70
 800ca8c:	e004      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	75bb      	strb	r3, [r7, #22]
 800ca92:	e001      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 8085 	beq.w	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caaa:	2b28      	cmp	r3, #40	; 0x28
 800caac:	d866      	bhi.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800caae:	a201      	add	r2, pc, #4	; (adr r2, 800cab4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab4:	0800cb91 	.word	0x0800cb91
 800cab8:	0800cb7d 	.word	0x0800cb7d
 800cabc:	0800cb7d 	.word	0x0800cb7d
 800cac0:	0800cb7d 	.word	0x0800cb7d
 800cac4:	0800cb7d 	.word	0x0800cb7d
 800cac8:	0800cb7d 	.word	0x0800cb7d
 800cacc:	0800cb7d 	.word	0x0800cb7d
 800cad0:	0800cb7d 	.word	0x0800cb7d
 800cad4:	0800cb59 	.word	0x0800cb59
 800cad8:	0800cb7d 	.word	0x0800cb7d
 800cadc:	0800cb7d 	.word	0x0800cb7d
 800cae0:	0800cb7d 	.word	0x0800cb7d
 800cae4:	0800cb7d 	.word	0x0800cb7d
 800cae8:	0800cb7d 	.word	0x0800cb7d
 800caec:	0800cb7d 	.word	0x0800cb7d
 800caf0:	0800cb7d 	.word	0x0800cb7d
 800caf4:	0800cb6b 	.word	0x0800cb6b
 800caf8:	0800cb7d 	.word	0x0800cb7d
 800cafc:	0800cb7d 	.word	0x0800cb7d
 800cb00:	0800cb7d 	.word	0x0800cb7d
 800cb04:	0800cb7d 	.word	0x0800cb7d
 800cb08:	0800cb7d 	.word	0x0800cb7d
 800cb0c:	0800cb7d 	.word	0x0800cb7d
 800cb10:	0800cb7d 	.word	0x0800cb7d
 800cb14:	0800cb91 	.word	0x0800cb91
 800cb18:	0800cb7d 	.word	0x0800cb7d
 800cb1c:	0800cb7d 	.word	0x0800cb7d
 800cb20:	0800cb7d 	.word	0x0800cb7d
 800cb24:	0800cb7d 	.word	0x0800cb7d
 800cb28:	0800cb7d 	.word	0x0800cb7d
 800cb2c:	0800cb7d 	.word	0x0800cb7d
 800cb30:	0800cb7d 	.word	0x0800cb7d
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cb7d 	.word	0x0800cb7d
 800cb3c:	0800cb7d 	.word	0x0800cb7d
 800cb40:	0800cb7d 	.word	0x0800cb7d
 800cb44:	0800cb7d 	.word	0x0800cb7d
 800cb48:	0800cb7d 	.word	0x0800cb7d
 800cb4c:	0800cb7d 	.word	0x0800cb7d
 800cb50:	0800cb7d 	.word	0x0800cb7d
 800cb54:	0800cb91 	.word	0x0800cb91
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fdfa 	bl	800d758 <RCCEx_PLL2_Config>
 800cb64:	4603      	mov	r3, r0
 800cb66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cb68:	e013      	b.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3324      	adds	r3, #36	; 0x24
 800cb6e:	2101      	movs	r1, #1
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fea3 	bl	800d8bc <RCCEx_PLL3_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cb7a:	e00a      	b.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb80:	e007      	b.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800cb82:	bf00      	nop
 800cb84:	58024400 	.word	0x58024400
 800cb88:	58024800 	.word	0x58024800
 800cb8c:	00ffffcf 	.word	0x00ffffcf
      break;
 800cb90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cb98:	4b96      	ldr	r3, [pc, #600]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cb9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cba4:	4993      	ldr	r1, [pc, #588]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cba6:	4313      	orrs	r3, r2
 800cba8:	654b      	str	r3, [r1, #84]	; 0x54
 800cbaa:	e001      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d038      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	d821      	bhi.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800cbc4:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800cbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cc0f 	.word	0x0800cc0f
 800cbd0:	0800cbe5 	.word	0x0800cbe5
 800cbd4:	0800cbf7 	.word	0x0800cbf7
 800cbd8:	0800cc0f 	.word	0x0800cc0f
 800cbdc:	0800cc0f 	.word	0x0800cc0f
 800cbe0:	0800cc0f 	.word	0x0800cc0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	2101      	movs	r1, #1
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fdb4 	bl	800d758 <RCCEx_PLL2_Config>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cbf4:	e00c      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3324      	adds	r3, #36	; 0x24
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 fe5d 	bl	800d8bc <RCCEx_PLL3_Config>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cc06:	e003      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc0c:	e000      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800cc0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d109      	bne.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc16:	4b77      	ldr	r3, [pc, #476]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1a:	f023 0207 	bic.w	r2, r3, #7
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc22:	4974      	ldr	r1, [pc, #464]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc24:	4313      	orrs	r3, r2
 800cc26:	654b      	str	r3, [r1, #84]	; 0x54
 800cc28:	e001      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0304 	and.w	r3, r3, #4
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d03a      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc40:	2b05      	cmp	r3, #5
 800cc42:	d821      	bhi.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800cc44:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800cc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4a:	bf00      	nop
 800cc4c:	0800cc8f 	.word	0x0800cc8f
 800cc50:	0800cc65 	.word	0x0800cc65
 800cc54:	0800cc77 	.word	0x0800cc77
 800cc58:	0800cc8f 	.word	0x0800cc8f
 800cc5c:	0800cc8f 	.word	0x0800cc8f
 800cc60:	0800cc8f 	.word	0x0800cc8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	3304      	adds	r3, #4
 800cc68:	2101      	movs	r1, #1
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fd74 	bl	800d758 <RCCEx_PLL2_Config>
 800cc70:	4603      	mov	r3, r0
 800cc72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cc74:	e00c      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3324      	adds	r3, #36	; 0x24
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fe1d 	bl	800d8bc <RCCEx_PLL3_Config>
 800cc82:	4603      	mov	r3, r0
 800cc84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cc86:	e003      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc8c:	e000      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800cc8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cc96:	4b57      	ldr	r3, [pc, #348]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc9a:	f023 0207 	bic.w	r2, r3, #7
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca4:	4953      	ldr	r1, [pc, #332]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cca6:	4313      	orrs	r3, r2
 800cca8:	658b      	str	r3, [r1, #88]	; 0x58
 800ccaa:	e001      	b.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0320 	and.w	r3, r3, #32
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d04b      	beq.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccc6:	d02e      	beq.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ccc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cccc:	d828      	bhi.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ccce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccd2:	d02a      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ccd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccd8:	d822      	bhi.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ccda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccde:	d026      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cce4:	d81c      	bhi.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccea:	d010      	beq.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800ccec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccf0:	d816      	bhi.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d01d      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800ccf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccfa:	d111      	bne.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	2100      	movs	r1, #0
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fd28 	bl	800d758 <RCCEx_PLL2_Config>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd0c:	e012      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3324      	adds	r3, #36	; 0x24
 800cd12:	2102      	movs	r1, #2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 fdd1 	bl	800d8bc <RCCEx_PLL3_Config>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd1e:	e009      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd20:	2301      	movs	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]
      break;
 800cd24:	e006      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd26:	bf00      	nop
 800cd28:	e004      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd2a:	bf00      	nop
 800cd2c:	e002      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd2e:	bf00      	nop
 800cd30:	e000      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cd32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cd3a:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd48:	492a      	ldr	r1, [pc, #168]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	654b      	str	r3, [r1, #84]	; 0x54
 800cd4e:	e001      	b.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d04d      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cd6a:	d02e      	beq.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cd6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cd70:	d828      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd76:	d02a      	beq.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cd78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd7c:	d822      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cd7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd82:	d026      	beq.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cd84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd88:	d81c      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cd8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd8e:	d010      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800cd90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd94:	d816      	bhi.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d01d      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800cd9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd9e:	d111      	bne.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3304      	adds	r3, #4
 800cda4:	2100      	movs	r1, #0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 fcd6 	bl	800d758 <RCCEx_PLL2_Config>
 800cdac:	4603      	mov	r3, r0
 800cdae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cdb0:	e012      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	2102      	movs	r1, #2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fd7f 	bl	800d8bc <RCCEx_PLL3_Config>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cdc2:	e009      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	75fb      	strb	r3, [r7, #23]
      break;
 800cdc8:	e006      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cdca:	bf00      	nop
 800cdcc:	e004      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cdce:	bf00      	nop
 800cdd0:	e002      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cdd2:	bf00      	nop
 800cdd4:	e000      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cdd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10c      	bne.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdec:	4901      	ldr	r1, [pc, #4]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	658b      	str	r3, [r1, #88]	; 0x58
 800cdf2:	e003      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800cdf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d04b      	beq.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce12:	d02e      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ce14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce18:	d828      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce1e:	d02a      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ce20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce24:	d822      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ce2a:	d026      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800ce2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ce30:	d81c      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce36:	d010      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ce38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce3c:	d816      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d01d      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800ce42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce46:	d111      	bne.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fc82 	bl	800d758 <RCCEx_PLL2_Config>
 800ce54:	4603      	mov	r3, r0
 800ce56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ce58:	e012      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3324      	adds	r3, #36	; 0x24
 800ce5e:	2102      	movs	r1, #2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fd2b 	bl	800d8bc <RCCEx_PLL3_Config>
 800ce66:	4603      	mov	r3, r0
 800ce68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ce6a:	e009      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce70:	e006      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ce72:	bf00      	nop
 800ce74:	e004      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ce76:	bf00      	nop
 800ce78:	e002      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ce7a:	bf00      	nop
 800ce7c:	e000      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ce7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ce86:	4b9d      	ldr	r3, [pc, #628]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce94:	4999      	ldr	r1, [pc, #612]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce96:	4313      	orrs	r3, r2
 800ce98:	658b      	str	r3, [r1, #88]	; 0x58
 800ce9a:	e001      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0308 	and.w	r3, r3, #8
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d01a      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ceb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceb6:	d10a      	bne.n	800cece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	2102      	movs	r1, #2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 fcfc 	bl	800d8bc <RCCEx_PLL3_Config>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cece:	4b8b      	ldr	r3, [pc, #556]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ced0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cedc:	4987      	ldr	r1, [pc, #540]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d01a      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cef8:	d10a      	bne.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3324      	adds	r3, #36	; 0x24
 800cefe:	2102      	movs	r1, #2
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 fcdb 	bl	800d8bc <RCCEx_PLL3_Config>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf10:	4b7a      	ldr	r3, [pc, #488]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf1e:	4977      	ldr	r1, [pc, #476]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d034      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf3a:	d01d      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800cf3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf40:	d817      	bhi.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800cf46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf4a:	d009      	beq.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800cf4c:	e011      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3304      	adds	r3, #4
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f000 fbff 	bl	800d758 <RCCEx_PLL2_Config>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cf5e:	e00c      	b.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3324      	adds	r3, #36	; 0x24
 800cf64:	2102      	movs	r1, #2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fca8 	bl	800d8bc <RCCEx_PLL3_Config>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cf70:	e003      	b.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	75fb      	strb	r3, [r7, #23]
      break;
 800cf76:	e000      	b.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800cf78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cf80:	4b5e      	ldr	r3, [pc, #376]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf8e:	495b      	ldr	r1, [pc, #364]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf90:	4313      	orrs	r3, r2
 800cf92:	658b      	str	r3, [r1, #88]	; 0x58
 800cf94:	e001      	b.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
 800cf98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d033      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cfb0:	d01c      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800cfb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cfb6:	d816      	bhi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800cfb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfbc:	d003      	beq.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800cfbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfc2:	d007      	beq.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800cfc4:	e00f      	b.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfc6:	4b4d      	ldr	r3, [pc, #308]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	4a4c      	ldr	r2, [pc, #304]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cfcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800cfd2:	e00c      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	3324      	adds	r3, #36	; 0x24
 800cfd8:	2101      	movs	r1, #1
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fc6e 	bl	800d8bc <RCCEx_PLL3_Config>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800cfe4:	e003      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	75fb      	strb	r3, [r7, #23]
      break;
 800cfea:	e000      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800cfec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cfee:	7dfb      	ldrb	r3, [r7, #23]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cff4:	4b41      	ldr	r3, [pc, #260]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d002:	493e      	ldr	r1, [pc, #248]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d004:	4313      	orrs	r3, r2
 800d006:	654b      	str	r3, [r1, #84]	; 0x54
 800d008:	e001      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d016:	2b00      	cmp	r3, #0
 800d018:	d029      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d003      	beq.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d026:	d007      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d028:	e00f      	b.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d02a:	4b34      	ldr	r3, [pc, #208]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02e:	4a33      	ldr	r2, [pc, #204]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d036:	e00b      	b.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3304      	adds	r3, #4
 800d03c:	2102      	movs	r1, #2
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fb8a 	bl	800d758 <RCCEx_PLL2_Config>
 800d044:	4603      	mov	r3, r0
 800d046:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d048:	e002      	b.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	75fb      	strb	r3, [r7, #23]
      break;
 800d04e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d050:	7dfb      	ldrb	r3, [r7, #23]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d109      	bne.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d056:	4b29      	ldr	r3, [pc, #164]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d05a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d062:	4926      	ldr	r1, [pc, #152]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d064:	4313      	orrs	r3, r2
 800d066:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d068:	e001      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3324      	adds	r3, #36	; 0x24
 800d07e:	2102      	movs	r1, #2
 800d080:	4618      	mov	r0, r3
 800d082:	f000 fc1b 	bl	800d8bc <RCCEx_PLL3_Config>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d033      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0a4:	d017      	beq.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d0a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0aa:	d811      	bhi.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0b0:	d013      	beq.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0b6:	d80b      	bhi.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d010      	beq.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d0bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0c0:	d106      	bne.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0c2:	4b0e      	ldr	r3, [pc, #56]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c6:	4a0d      	ldr	r2, [pc, #52]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d0ce:	e007      	b.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d0d4:	e004      	b.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d0d6:	bf00      	nop
 800d0d8:	e002      	b.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d0da:	bf00      	nop
 800d0dc:	e000      	b.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d0de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10c      	bne.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0e6:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	4902      	ldr	r1, [pc, #8]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	654b      	str	r3, [r1, #84]	; 0x54
 800d0f8:	e004      	b.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d0fa:	bf00      	nop
 800d0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d100:	7dfb      	ldrb	r3, [r7, #23]
 800d102:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d008      	beq.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d110:	4b31      	ldr	r3, [pc, #196]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d114:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11c:	492e      	ldr	r1, [pc, #184]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d11e:	4313      	orrs	r3, r2
 800d120:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d12e:	4b2a      	ldr	r3, [pc, #168]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d13c:	4926      	ldr	r1, [pc, #152]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d13e:	4313      	orrs	r3, r2
 800d140:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d008      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d14e:	4b22      	ldr	r3, [pc, #136]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d15a:	491f      	ldr	r1, [pc, #124]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00d      	beq.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d16c:	4b1a      	ldr	r3, [pc, #104]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	4a19      	ldr	r2, [pc, #100]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d176:	6113      	str	r3, [r2, #16]
 800d178:	4b17      	ldr	r3, [pc, #92]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d182:	4915      	ldr	r1, [pc, #84]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d184:	4313      	orrs	r3, r2
 800d186:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da08      	bge.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d190:	4b11      	ldr	r3, [pc, #68]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d19c:	490e      	ldr	r1, [pc, #56]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d1ae:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1bc:	4906      	ldr	r1, [pc, #24]	; (800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d1c2:	7dbb      	ldrb	r3, [r7, #22]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e000      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	58024400 	.word	0x58024400

0800d1dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d1e0:	f7ff f85a 	bl	800c298 <HAL_RCC_GetHCLKFreq>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	4b06      	ldr	r3, [pc, #24]	; (800d200 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	091b      	lsrs	r3, r3, #4
 800d1ec:	f003 0307 	and.w	r3, r3, #7
 800d1f0:	4904      	ldr	r1, [pc, #16]	; (800d204 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d1f2:	5ccb      	ldrb	r3, [r1, r3]
 800d1f4:	f003 031f 	and.w	r3, r3, #31
 800d1f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	58024400 	.word	0x58024400
 800d204:	080116d4 	.word	0x080116d4

0800d208 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d208:	b480      	push	{r7}
 800d20a:	b089      	sub	sp, #36	; 0x24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d210:	4ba1      	ldr	r3, [pc, #644]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d21a:	4b9f      	ldr	r3, [pc, #636]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	0b1b      	lsrs	r3, r3, #12
 800d220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d224:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d226:	4b9c      	ldr	r3, [pc, #624]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	091b      	lsrs	r3, r3, #4
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d232:	4b99      	ldr	r3, [pc, #612]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d236:	08db      	lsrs	r3, r3, #3
 800d238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	fb02 f303 	mul.w	r3, r2, r3
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 8111 	beq.w	800d478 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	f000 8083 	beq.w	800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	2b02      	cmp	r3, #2
 800d262:	f200 80a1 	bhi.w	800d3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d056      	beq.n	800d320 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d272:	e099      	b.n	800d3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d274:	4b88      	ldr	r3, [pc, #544]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f003 0320 	and.w	r3, r3, #32
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d02d      	beq.n	800d2dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d280:	4b85      	ldr	r3, [pc, #532]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	08db      	lsrs	r3, r3, #3
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	4a84      	ldr	r2, [pc, #528]	; (800d49c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d28c:	fa22 f303 	lsr.w	r3, r2, r3
 800d290:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	ee07 3a90 	vmov	s15, r3
 800d298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2aa:	4b7b      	ldr	r3, [pc, #492]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d2da:	e087      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	ee07 3a90 	vmov	s15, r3
 800d2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ee:	4b6a      	ldr	r3, [pc, #424]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f6:	ee07 3a90 	vmov	s15, r3
 800d2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d302:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d31a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d31e:	e065      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d332:	4b59      	ldr	r3, [pc, #356]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d342:	ed97 6a03 	vldr	s12, [r7, #12]
 800d346:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d362:	e043      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	ee07 3a90 	vmov	s15, r3
 800d36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d4ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d376:	4b48      	ldr	r3, [pc, #288]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37e:	ee07 3a90 	vmov	s15, r3
 800d382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d386:	ed97 6a03 	vldr	s12, [r7, #12]
 800d38a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3a6:	e021      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ba:	4b37      	ldr	r3, [pc, #220]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c2:	ee07 3a90 	vmov	s15, r3
 800d3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d3ec:	4b2a      	ldr	r3, [pc, #168]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f0:	0a5b      	lsrs	r3, r3, #9
 800d3f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f6:	ee07 3a90 	vmov	s15, r3
 800d3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d406:	edd7 6a07 	vldr	s13, [r7, #28]
 800d40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d412:	ee17 2a90 	vmov	r2, s15
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d41a:	4b1f      	ldr	r3, [pc, #124]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	0c1b      	lsrs	r3, r3, #16
 800d420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d424:	ee07 3a90 	vmov	s15, r3
 800d428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d430:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d434:	edd7 6a07 	vldr	s13, [r7, #28]
 800d438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d440:	ee17 2a90 	vmov	r2, s15
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d448:	4b13      	ldr	r3, [pc, #76]	; (800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44c:	0e1b      	lsrs	r3, r3, #24
 800d44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d452:	ee07 3a90 	vmov	s15, r3
 800d456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d45a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d45e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d462:	edd7 6a07 	vldr	s13, [r7, #28]
 800d466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d46e:	ee17 2a90 	vmov	r2, s15
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d476:	e008      	b.n	800d48a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	609a      	str	r2, [r3, #8]
}
 800d48a:	bf00      	nop
 800d48c:	3724      	adds	r7, #36	; 0x24
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	58024400 	.word	0x58024400
 800d49c:	03d09000 	.word	0x03d09000
 800d4a0:	46000000 	.word	0x46000000
 800d4a4:	4c742400 	.word	0x4c742400
 800d4a8:	4a742400 	.word	0x4a742400
 800d4ac:	4af42400 	.word	0x4af42400

0800d4b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b089      	sub	sp, #36	; 0x24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4b8:	4ba1      	ldr	r3, [pc, #644]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4bc:	f003 0303 	and.w	r3, r3, #3
 800d4c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d4c2:	4b9f      	ldr	r3, [pc, #636]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c6:	0d1b      	lsrs	r3, r3, #20
 800d4c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d4ce:	4b9c      	ldr	r3, [pc, #624]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d4da:	4b99      	ldr	r3, [pc, #612]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4de:	08db      	lsrs	r3, r3, #3
 800d4e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	fb02 f303 	mul.w	r3, r2, r3
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 8111 	beq.w	800d720 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	2b02      	cmp	r3, #2
 800d502:	f000 8083 	beq.w	800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	f200 80a1 	bhi.w	800d650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d056      	beq.n	800d5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d51a:	e099      	b.n	800d650 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d51c:	4b88      	ldr	r3, [pc, #544]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 0320 	and.w	r3, r3, #32
 800d524:	2b00      	cmp	r3, #0
 800d526:	d02d      	beq.n	800d584 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d528:	4b85      	ldr	r3, [pc, #532]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	08db      	lsrs	r3, r3, #3
 800d52e:	f003 0303 	and.w	r3, r3, #3
 800d532:	4a84      	ldr	r2, [pc, #528]	; (800d744 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d534:	fa22 f303 	lsr.w	r3, r2, r3
 800d538:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	ee07 3a90 	vmov	s15, r3
 800d540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d552:	4b7b      	ldr	r3, [pc, #492]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d55a:	ee07 3a90 	vmov	s15, r3
 800d55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d562:	ed97 6a03 	vldr	s12, [r7, #12]
 800d566:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d57e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d582:	e087      	b.n	800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d74c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d596:	4b6a      	ldr	r3, [pc, #424]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d5c6:	e065      	b.n	800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	ee07 3a90 	vmov	s15, r3
 800d5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5da:	4b59      	ldr	r3, [pc, #356]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d60a:	e043      	b.n	800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	ee07 3a90 	vmov	s15, r3
 800d612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d616:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d61e:	4b48      	ldr	r3, [pc, #288]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d626:	ee07 3a90 	vmov	s15, r3
 800d62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d632:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d64e:	e021      	b.n	800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d662:	4b37      	ldr	r3, [pc, #220]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d66a:	ee07 3a90 	vmov	s15, r3
 800d66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d672:	ed97 6a03 	vldr	s12, [r7, #12]
 800d676:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d68e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d692:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d694:	4b2a      	ldr	r3, [pc, #168]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d698:	0a5b      	lsrs	r3, r3, #9
 800d69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6ba:	ee17 2a90 	vmov	r2, s15
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d6c2:	4b1f      	ldr	r3, [pc, #124]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	0c1b      	lsrs	r3, r3, #16
 800d6c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6cc:	ee07 3a90 	vmov	s15, r3
 800d6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6e8:	ee17 2a90 	vmov	r2, s15
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d6f0:	4b13      	ldr	r3, [pc, #76]	; (800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f4:	0e1b      	lsrs	r3, r3, #24
 800d6f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d70a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d70e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d716:	ee17 2a90 	vmov	r2, s15
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d71e:	e008      	b.n	800d732 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	609a      	str	r2, [r3, #8]
}
 800d732:	bf00      	nop
 800d734:	3724      	adds	r7, #36	; 0x24
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	58024400 	.word	0x58024400
 800d744:	03d09000 	.word	0x03d09000
 800d748:	46000000 	.word	0x46000000
 800d74c:	4c742400 	.word	0x4c742400
 800d750:	4a742400 	.word	0x4a742400
 800d754:	4af42400 	.word	0x4af42400

0800d758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d766:	4b53      	ldr	r3, [pc, #332]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76a:	f003 0303 	and.w	r3, r3, #3
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d101      	bne.n	800d776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e099      	b.n	800d8aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d776:	4b4f      	ldr	r3, [pc, #316]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a4e      	ldr	r2, [pc, #312]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d77c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d782:	f7fa faa5 	bl	8007cd0 <HAL_GetTick>
 800d786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d788:	e008      	b.n	800d79c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d78a:	f7fa faa1 	bl	8007cd0 <HAL_GetTick>
 800d78e:	4602      	mov	r2, r0
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	2b02      	cmp	r3, #2
 800d796:	d901      	bls.n	800d79c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d798:	2303      	movs	r3, #3
 800d79a:	e086      	b.n	800d8aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d79c:	4b45      	ldr	r3, [pc, #276]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1f0      	bne.n	800d78a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d7a8:	4b42      	ldr	r3, [pc, #264]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	031b      	lsls	r3, r3, #12
 800d7b6:	493f      	ldr	r1, [pc, #252]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	025b      	lsls	r3, r3, #9
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	041b      	lsls	r3, r3, #16
 800d7da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	061b      	lsls	r3, r3, #24
 800d7e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7ec:	4931      	ldr	r1, [pc, #196]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7f2:	4b30      	ldr	r3, [pc, #192]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	695b      	ldr	r3, [r3, #20]
 800d7fe:	492d      	ldr	r1, [pc, #180]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d800:	4313      	orrs	r3, r2
 800d802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d804:	4b2b      	ldr	r3, [pc, #172]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d808:	f023 0220 	bic.w	r2, r3, #32
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	4928      	ldr	r1, [pc, #160]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d812:	4313      	orrs	r3, r2
 800d814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d816:	4b27      	ldr	r3, [pc, #156]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	4a26      	ldr	r2, [pc, #152]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d81c:	f023 0310 	bic.w	r3, r3, #16
 800d820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d822:	4b24      	ldr	r3, [pc, #144]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d826:	4b24      	ldr	r3, [pc, #144]	; (800d8b8 <RCCEx_PLL2_Config+0x160>)
 800d828:	4013      	ands	r3, r2
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	69d2      	ldr	r2, [r2, #28]
 800d82e:	00d2      	lsls	r2, r2, #3
 800d830:	4920      	ldr	r1, [pc, #128]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d832:	4313      	orrs	r3, r2
 800d834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d836:	4b1f      	ldr	r3, [pc, #124]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83a:	4a1e      	ldr	r2, [pc, #120]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d83c:	f043 0310 	orr.w	r3, r3, #16
 800d840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d848:	4b1a      	ldr	r3, [pc, #104]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84c:	4a19      	ldr	r2, [pc, #100]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d84e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d852:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d854:	e00f      	b.n	800d876 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d106      	bne.n	800d86a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d85c:	4b15      	ldr	r3, [pc, #84]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	4a14      	ldr	r2, [pc, #80]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d866:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d868:	e005      	b.n	800d876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d86a:	4b12      	ldr	r3, [pc, #72]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86e:	4a11      	ldr	r2, [pc, #68]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d876:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a0e      	ldr	r2, [pc, #56]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d87c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d882:	f7fa fa25 	bl	8007cd0 <HAL_GetTick>
 800d886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d888:	e008      	b.n	800d89c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d88a:	f7fa fa21 	bl	8007cd0 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	2b02      	cmp	r3, #2
 800d896:	d901      	bls.n	800d89c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e006      	b.n	800d8aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d89c:	4b05      	ldr	r3, [pc, #20]	; (800d8b4 <RCCEx_PLL2_Config+0x15c>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d0f0      	beq.n	800d88a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	58024400 	.word	0x58024400
 800d8b8:	ffff0007 	.word	0xffff0007

0800d8bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8ca:	4b53      	ldr	r3, [pc, #332]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ce:	f003 0303 	and.w	r3, r3, #3
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d101      	bne.n	800d8da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e099      	b.n	800da0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d8da:	4b4f      	ldr	r3, [pc, #316]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a4e      	ldr	r2, [pc, #312]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d8e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8e6:	f7fa f9f3 	bl	8007cd0 <HAL_GetTick>
 800d8ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8ec:	e008      	b.n	800d900 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d8ee:	f7fa f9ef 	bl	8007cd0 <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d901      	bls.n	800d900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e086      	b.n	800da0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d900:	4b45      	ldr	r3, [pc, #276]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1f0      	bne.n	800d8ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d90c:	4b42      	ldr	r3, [pc, #264]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	051b      	lsls	r3, r3, #20
 800d91a:	493f      	ldr	r1, [pc, #252]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d91c:	4313      	orrs	r3, r2
 800d91e:	628b      	str	r3, [r1, #40]	; 0x28
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	3b01      	subs	r3, #1
 800d926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	3b01      	subs	r3, #1
 800d930:	025b      	lsls	r3, r3, #9
 800d932:	b29b      	uxth	r3, r3
 800d934:	431a      	orrs	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	041b      	lsls	r3, r3, #16
 800d93e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d942:	431a      	orrs	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	3b01      	subs	r3, #1
 800d94a:	061b      	lsls	r3, r3, #24
 800d94c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d950:	4931      	ldr	r1, [pc, #196]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d952:	4313      	orrs	r3, r2
 800d954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d956:	4b30      	ldr	r3, [pc, #192]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	492d      	ldr	r1, [pc, #180]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d964:	4313      	orrs	r3, r2
 800d966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d968:	4b2b      	ldr	r3, [pc, #172]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	4928      	ldr	r1, [pc, #160]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d976:	4313      	orrs	r3, r2
 800d978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d97a:	4b27      	ldr	r3, [pc, #156]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97e:	4a26      	ldr	r2, [pc, #152]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d986:	4b24      	ldr	r3, [pc, #144]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <RCCEx_PLL3_Config+0x160>)
 800d98c:	4013      	ands	r3, r2
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	69d2      	ldr	r2, [r2, #28]
 800d992:	00d2      	lsls	r2, r2, #3
 800d994:	4920      	ldr	r1, [pc, #128]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d996:	4313      	orrs	r3, r2
 800d998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d99a:	4b1f      	ldr	r3, [pc, #124]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99e:	4a1e      	ldr	r2, [pc, #120]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d9ac:	4b1a      	ldr	r3, [pc, #104]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	4a19      	ldr	r2, [pc, #100]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9b8:	e00f      	b.n	800d9da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d106      	bne.n	800d9ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d9c0:	4b15      	ldr	r3, [pc, #84]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c4:	4a14      	ldr	r2, [pc, #80]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9cc:	e005      	b.n	800d9da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d9ce:	4b12      	ldr	r3, [pc, #72]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d2:	4a11      	ldr	r2, [pc, #68]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d9da:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a0e      	ldr	r2, [pc, #56]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800d9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9e6:	f7fa f973 	bl	8007cd0 <HAL_GetTick>
 800d9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9ec:	e008      	b.n	800da00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d9ee:	f7fa f96f 	bl	8007cd0 <HAL_GetTick>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d901      	bls.n	800da00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e006      	b.n	800da0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da00:	4b05      	ldr	r3, [pc, #20]	; (800da18 <RCCEx_PLL3_Config+0x15c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d0f0      	beq.n	800d9ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	58024400 	.word	0x58024400
 800da1c:	ffff0007 	.word	0xffff0007

0800da20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	e0f1      	b.n	800dc16 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a78      	ldr	r2, [pc, #480]	; (800dc20 <HAL_SPI_Init+0x200>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d00f      	beq.n	800da62 <HAL_SPI_Init+0x42>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a77      	ldr	r2, [pc, #476]	; (800dc24 <HAL_SPI_Init+0x204>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d00a      	beq.n	800da62 <HAL_SPI_Init+0x42>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a75      	ldr	r2, [pc, #468]	; (800dc28 <HAL_SPI_Init+0x208>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d005      	beq.n	800da62 <HAL_SPI_Init+0x42>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	2b0f      	cmp	r3, #15
 800da5c:	d901      	bls.n	800da62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e0d9      	b.n	800dc16 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fba2 	bl	800e1ac <SPI_GetPacketSize>
 800da68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a6c      	ldr	r2, [pc, #432]	; (800dc20 <HAL_SPI_Init+0x200>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d00c      	beq.n	800da8e <HAL_SPI_Init+0x6e>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a6a      	ldr	r2, [pc, #424]	; (800dc24 <HAL_SPI_Init+0x204>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d007      	beq.n	800da8e <HAL_SPI_Init+0x6e>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a69      	ldr	r2, [pc, #420]	; (800dc28 <HAL_SPI_Init+0x208>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d002      	beq.n	800da8e <HAL_SPI_Init+0x6e>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b08      	cmp	r3, #8
 800da8c:	d811      	bhi.n	800dab2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da92:	4a63      	ldr	r2, [pc, #396]	; (800dc20 <HAL_SPI_Init+0x200>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d009      	beq.n	800daac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a61      	ldr	r2, [pc, #388]	; (800dc24 <HAL_SPI_Init+0x204>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d004      	beq.n	800daac <HAL_SPI_Init+0x8c>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a60      	ldr	r2, [pc, #384]	; (800dc28 <HAL_SPI_Init+0x208>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d104      	bne.n	800dab6 <HAL_SPI_Init+0x96>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b10      	cmp	r3, #16
 800dab0:	d901      	bls.n	800dab6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e0af      	b.n	800dc16 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7f9 fe08 	bl	80076e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f022 0201 	bic.w	r2, r2, #1
 800dae6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800daf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dafc:	d119      	bne.n	800db32 <HAL_SPI_Init+0x112>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db06:	d103      	bne.n	800db10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d008      	beq.n	800db22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10c      	bne.n	800db32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db20:	d107      	bne.n	800db32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69da      	ldr	r2, [r3, #28]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	431a      	orrs	r2, r3
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db44:	ea42 0103 	orr.w	r1, r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68da      	ldr	r2, [r3, #12]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	430a      	orrs	r2, r1
 800db52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	431a      	orrs	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db62:	431a      	orrs	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	431a      	orrs	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	431a      	orrs	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	431a      	orrs	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	431a      	orrs	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db92:	ea42 0103 	orr.w	r1, r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	430a      	orrs	r2, r1
 800dba0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d113      	bne.n	800dbd2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f022 0201 	bic.w	r2, r2, #1
 800dbe0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	40013000 	.word	0x40013000
 800dc24:	40003800 	.word	0x40003800
 800dc28:	40003c00 	.word	0x40003c00

0800dc2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	; 0x28
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3320      	adds	r3, #32
 800dc42:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d101      	bne.n	800dc56 <HAL_SPI_Transmit+0x2a>
 800dc52:	2302      	movs	r3, #2
 800dc54:	e1d7      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc5e:	f7fa f837 	bl	8007cd0 <HAL_GetTick>
 800dc62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d007      	beq.n	800dc80 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dc70:	2302      	movs	r3, #2
 800dc72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dc7c:	7efb      	ldrb	r3, [r7, #27]
 800dc7e:	e1c2      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <HAL_SPI_Transmit+0x60>
 800dc86:	88fb      	ldrh	r3, [r7, #6]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d107      	bne.n	800dc9c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dc98:	7efb      	ldrb	r3, [r7, #27]
 800dc9a:	e1b4      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2203      	movs	r2, #3
 800dca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	88fa      	ldrh	r2, [r7, #6]
 800dcb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	88fa      	ldrh	r2, [r7, #6]
 800dcbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dcec:	d107      	bne.n	800dcfe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	4b96      	ldr	r3, [pc, #600]	; (800df60 <HAL_SPI_Transmit+0x334>)
 800dd06:	4013      	ands	r3, r2
 800dd08:	88f9      	ldrh	r1, [r7, #6]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	430b      	orrs	r3, r1
 800dd10:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f042 0201 	orr.w	r2, r2, #1
 800dd20:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd2a:	d107      	bne.n	800dd3c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	2b0f      	cmp	r3, #15
 800dd42:	d947      	bls.n	800ddd4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd44:	e03f      	b.n	800ddc6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	f003 0302 	and.w	r3, r3, #2
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d114      	bne.n	800dd7e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd64:	1d1a      	adds	r2, r3, #4
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	3b01      	subs	r3, #1
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd7c:	e023      	b.n	800ddc6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd7e:	f7f9 ffa7 	bl	8007cd0 <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d803      	bhi.n	800dd96 <HAL_SPI_Transmit+0x16a>
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd94:	d102      	bne.n	800dd9c <HAL_SPI_Transmit+0x170>
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d114      	bne.n	800ddc6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f000 f937 	bl	800e010 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e11f      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1b9      	bne.n	800dd46 <HAL_SPI_Transmit+0x11a>
 800ddd2:	e0f2      	b.n	800dfba <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	2b07      	cmp	r3, #7
 800ddda:	f240 80e7 	bls.w	800dfac <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ddde:	e05d      	b.n	800de9c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d132      	bne.n	800de54 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d918      	bls.n	800de2c <HAL_SPI_Transmit+0x200>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d014      	beq.n	800de2c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6812      	ldr	r2, [r2, #0]
 800de0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de12:	1d1a      	adds	r2, r3, #4
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de1e:	b29b      	uxth	r3, r3
 800de20:	3b02      	subs	r3, #2
 800de22:	b29a      	uxth	r2, r3
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de2a:	e037      	b.n	800de9c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de30:	881a      	ldrh	r2, [r3, #0]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de3a:	1c9a      	adds	r2, r3, #2
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de46:	b29b      	uxth	r3, r3
 800de48:	3b01      	subs	r3, #1
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de52:	e023      	b.n	800de9c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de54:	f7f9 ff3c 	bl	8007cd0 <HAL_GetTick>
 800de58:	4602      	mov	r2, r0
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d803      	bhi.n	800de6c <HAL_SPI_Transmit+0x240>
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6a:	d102      	bne.n	800de72 <HAL_SPI_Transmit+0x246>
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d114      	bne.n	800de9c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f000 f8cc 	bl	800e010 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800de98:	2303      	movs	r3, #3
 800de9a:	e0b4      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d19b      	bne.n	800dde0 <HAL_SPI_Transmit+0x1b4>
 800dea8:	e087      	b.n	800dfba <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	f003 0302 	and.w	r3, r3, #2
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d155      	bne.n	800df64 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800debe:	b29b      	uxth	r3, r3
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d918      	bls.n	800def6 <HAL_SPI_Transmit+0x2ca>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec8:	2b40      	cmp	r3, #64	; 0x40
 800deca:	d914      	bls.n	800def6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6812      	ldr	r2, [r2, #0]
 800ded6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dedc:	1d1a      	adds	r2, r3, #4
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dee8:	b29b      	uxth	r3, r3
 800deea:	3b04      	subs	r3, #4
 800deec:	b29a      	uxth	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800def4:	e05a      	b.n	800dfac <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800defc:	b29b      	uxth	r3, r3
 800defe:	2b01      	cmp	r3, #1
 800df00:	d917      	bls.n	800df32 <HAL_SPI_Transmit+0x306>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df06:	2b00      	cmp	r3, #0
 800df08:	d013      	beq.n	800df32 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df0e:	881a      	ldrh	r2, [r3, #0]
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df18:	1c9a      	adds	r2, r3, #2
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df24:	b29b      	uxth	r3, r3
 800df26:	3b02      	subs	r3, #2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df30:	e03c      	b.n	800dfac <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3320      	adds	r3, #32
 800df3c:	7812      	ldrb	r2, [r2, #0]
 800df3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df50:	b29b      	uxth	r3, r3
 800df52:	3b01      	subs	r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df5c:	e026      	b.n	800dfac <HAL_SPI_Transmit+0x380>
 800df5e:	bf00      	nop
 800df60:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df64:	f7f9 feb4 	bl	8007cd0 <HAL_GetTick>
 800df68:	4602      	mov	r2, r0
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	429a      	cmp	r2, r3
 800df72:	d803      	bhi.n	800df7c <HAL_SPI_Transmit+0x350>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7a:	d102      	bne.n	800df82 <HAL_SPI_Transmit+0x356>
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d114      	bne.n	800dfac <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f000 f844 	bl	800e010 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e02c      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f47f af78 	bne.w	800deaa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2108      	movs	r1, #8
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f8c3 	bl	800e150 <SPI_WaitOnFlagUntilTimeout>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d007      	beq.n	800dfe0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd6:	f043 0220 	orr.w	r2, r3, #32
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f000 f815 	bl	800e010 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e000      	b.n	800e006 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e004:	7efb      	ldrb	r3, [r7, #27]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3720      	adds	r7, #32
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop

0800e010 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	699a      	ldr	r2, [r3, #24]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f042 0208 	orr.w	r2, r2, #8
 800e02e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	699a      	ldr	r2, [r3, #24]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f042 0210 	orr.w	r2, r2, #16
 800e03e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f022 0201 	bic.w	r2, r2, #1
 800e04e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6919      	ldr	r1, [r3, #16]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	4b3c      	ldr	r3, [pc, #240]	; (800e14c <SPI_CloseTransfer+0x13c>)
 800e05c:	400b      	ands	r3, r1
 800e05e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e06e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b04      	cmp	r3, #4
 800e07a:	d014      	beq.n	800e0a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f003 0320 	and.w	r3, r3, #32
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00f      	beq.n	800e0a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e08c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	699a      	ldr	r2, [r3, #24]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f042 0220 	orr.w	r2, r2, #32
 800e0a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d014      	beq.n	800e0dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00f      	beq.n	800e0dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0c2:	f043 0204 	orr.w	r2, r3, #4
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	699a      	ldr	r2, [r3, #24]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00f      	beq.n	800e106 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ec:	f043 0201 	orr.w	r2, r3, #1
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	699a      	ldr	r2, [r3, #24]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e104:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00f      	beq.n	800e130 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e116:	f043 0208 	orr.w	r2, r3, #8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e12e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e140:	bf00      	nop
 800e142:	3714      	adds	r7, #20
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	fffffc90 	.word	0xfffffc90

0800e150 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	603b      	str	r3, [r7, #0]
 800e15c:	4613      	mov	r3, r2
 800e15e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e160:	e010      	b.n	800e184 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e162:	f7f9 fdb5 	bl	8007cd0 <HAL_GetTick>
 800e166:	4602      	mov	r2, r0
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	69ba      	ldr	r2, [r7, #24]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d803      	bhi.n	800e17a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e178:	d102      	bne.n	800e180 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e180:	2303      	movs	r3, #3
 800e182:	e00f      	b.n	800e1a4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	695a      	ldr	r2, [r3, #20]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	4013      	ands	r3, r2
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	429a      	cmp	r2, r3
 800e192:	bf0c      	ite	eq
 800e194:	2301      	moveq	r3, #1
 800e196:	2300      	movne	r3, #0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	461a      	mov	r2, r3
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d0df      	beq.n	800e162 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b8:	095b      	lsrs	r3, r3, #5
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	3307      	adds	r3, #7
 800e1ca:	08db      	lsrs	r3, r3, #3
 800e1cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3714      	adds	r7, #20
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b082      	sub	sp, #8
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e049      	b.n	800e288 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d106      	bne.n	800e20e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7f9 fad5 	bl	80077b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2202      	movs	r2, #2
 800e212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3304      	adds	r3, #4
 800e21e:	4619      	mov	r1, r3
 800e220:	4610      	mov	r0, r2
 800e222:	f000 fa23 	bl	800e66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d001      	beq.n	800e2a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e054      	b.n	800e352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f042 0201 	orr.w	r2, r2, #1
 800e2be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a26      	ldr	r2, [pc, #152]	; (800e360 <HAL_TIM_Base_Start_IT+0xd0>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d022      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2d2:	d01d      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a22      	ldr	r2, [pc, #136]	; (800e364 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d018      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a21      	ldr	r2, [pc, #132]	; (800e368 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d013      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a1f      	ldr	r2, [pc, #124]	; (800e36c <HAL_TIM_Base_Start_IT+0xdc>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d00e      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a1e      	ldr	r2, [pc, #120]	; (800e370 <HAL_TIM_Base_Start_IT+0xe0>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d009      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1c      	ldr	r2, [pc, #112]	; (800e374 <HAL_TIM_Base_Start_IT+0xe4>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d004      	beq.n	800e310 <HAL_TIM_Base_Start_IT+0x80>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a1b      	ldr	r2, [pc, #108]	; (800e378 <HAL_TIM_Base_Start_IT+0xe8>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d115      	bne.n	800e33c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	689a      	ldr	r2, [r3, #8]
 800e316:	4b19      	ldr	r3, [pc, #100]	; (800e37c <HAL_TIM_Base_Start_IT+0xec>)
 800e318:	4013      	ands	r3, r2
 800e31a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b06      	cmp	r3, #6
 800e320:	d015      	beq.n	800e34e <HAL_TIM_Base_Start_IT+0xbe>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e328:	d011      	beq.n	800e34e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f042 0201 	orr.w	r2, r2, #1
 800e338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33a:	e008      	b.n	800e34e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f042 0201 	orr.w	r2, r2, #1
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	e000      	b.n	800e350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e34e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	40010000 	.word	0x40010000
 800e364:	40000400 	.word	0x40000400
 800e368:	40000800 	.word	0x40000800
 800e36c:	40000c00 	.word	0x40000c00
 800e370:	40010400 	.word	0x40010400
 800e374:	40001800 	.word	0x40001800
 800e378:	40014000 	.word	0x40014000
 800e37c:	00010007 	.word	0x00010007

0800e380 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68da      	ldr	r2, [r3, #12]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f022 0201 	bic.w	r2, r2, #1
 800e396:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6a1a      	ldr	r2, [r3, #32]
 800e39e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10f      	bne.n	800e3c8 <HAL_TIM_Base_Stop_IT+0x48>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6a1a      	ldr	r2, [r3, #32]
 800e3ae:	f240 4344 	movw	r3, #1092	; 0x444
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d107      	bne.n	800e3c8 <HAL_TIM_Base_Stop_IT+0x48>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 0201 	bic.w	r2, r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d122      	bne.n	800e43a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	f003 0302 	and.w	r3, r3, #2
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d11b      	bne.n	800e43a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f06f 0202 	mvn.w	r2, #2
 800e40a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	699b      	ldr	r3, [r3, #24]
 800e418:	f003 0303 	and.w	r3, r3, #3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f905 	bl	800e630 <HAL_TIM_IC_CaptureCallback>
 800e426:	e005      	b.n	800e434 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f8f7 	bl	800e61c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f908 	bl	800e644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	f003 0304 	and.w	r3, r3, #4
 800e444:	2b04      	cmp	r3, #4
 800e446:	d122      	bne.n	800e48e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	f003 0304 	and.w	r3, r3, #4
 800e452:	2b04      	cmp	r3, #4
 800e454:	d11b      	bne.n	800e48e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f06f 0204 	mvn.w	r2, #4
 800e45e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2202      	movs	r2, #2
 800e464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f8db 	bl	800e630 <HAL_TIM_IC_CaptureCallback>
 800e47a:	e005      	b.n	800e488 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f8cd 	bl	800e61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f8de 	bl	800e644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	f003 0308 	and.w	r3, r3, #8
 800e498:	2b08      	cmp	r3, #8
 800e49a:	d122      	bne.n	800e4e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	f003 0308 	and.w	r3, r3, #8
 800e4a6:	2b08      	cmp	r3, #8
 800e4a8:	d11b      	bne.n	800e4e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f06f 0208 	mvn.w	r2, #8
 800e4b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2204      	movs	r2, #4
 800e4b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	69db      	ldr	r3, [r3, #28]
 800e4c0:	f003 0303 	and.w	r3, r3, #3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d003      	beq.n	800e4d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f8b1 	bl	800e630 <HAL_TIM_IC_CaptureCallback>
 800e4ce:	e005      	b.n	800e4dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f8a3 	bl	800e61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 f8b4 	bl	800e644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	f003 0310 	and.w	r3, r3, #16
 800e4ec:	2b10      	cmp	r3, #16
 800e4ee:	d122      	bne.n	800e536 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	f003 0310 	and.w	r3, r3, #16
 800e4fa:	2b10      	cmp	r3, #16
 800e4fc:	d11b      	bne.n	800e536 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f06f 0210 	mvn.w	r2, #16
 800e506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2208      	movs	r2, #8
 800e50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f887 	bl	800e630 <HAL_TIM_IC_CaptureCallback>
 800e522:	e005      	b.n	800e530 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f879 	bl	800e61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f88a 	bl	800e644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	f003 0301 	and.w	r3, r3, #1
 800e540:	2b01      	cmp	r3, #1
 800e542:	d10e      	bne.n	800e562 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d107      	bne.n	800e562 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f06f 0201 	mvn.w	r2, #1
 800e55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7f8 fb95 	bl	8006c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e56c:	2b80      	cmp	r3, #128	; 0x80
 800e56e:	d10e      	bne.n	800e58e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e57a:	2b80      	cmp	r3, #128	; 0x80
 800e57c:	d107      	bne.n	800e58e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f9a1 	bl	800e8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e59c:	d10e      	bne.n	800e5bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5a8:	2b80      	cmp	r3, #128	; 0x80
 800e5aa:	d107      	bne.n	800e5bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f994 	bl	800e8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	691b      	ldr	r3, [r3, #16]
 800e5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c6:	2b40      	cmp	r3, #64	; 0x40
 800e5c8:	d10e      	bne.n	800e5e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d4:	2b40      	cmp	r3, #64	; 0x40
 800e5d6:	d107      	bne.n	800e5e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f838 	bl	800e658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	691b      	ldr	r3, [r3, #16]
 800e5ee:	f003 0320 	and.w	r3, r3, #32
 800e5f2:	2b20      	cmp	r3, #32
 800e5f4:	d10e      	bne.n	800e614 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f003 0320 	and.w	r3, r3, #32
 800e600:	2b20      	cmp	r3, #32
 800e602:	d107      	bne.n	800e614 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f06f 0220 	mvn.w	r2, #32
 800e60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f954 	bl	800e8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4a40      	ldr	r2, [pc, #256]	; (800e780 <TIM_Base_SetConfig+0x114>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d013      	beq.n	800e6ac <TIM_Base_SetConfig+0x40>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e68a:	d00f      	beq.n	800e6ac <TIM_Base_SetConfig+0x40>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4a3d      	ldr	r2, [pc, #244]	; (800e784 <TIM_Base_SetConfig+0x118>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d00b      	beq.n	800e6ac <TIM_Base_SetConfig+0x40>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a3c      	ldr	r2, [pc, #240]	; (800e788 <TIM_Base_SetConfig+0x11c>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d007      	beq.n	800e6ac <TIM_Base_SetConfig+0x40>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a3b      	ldr	r2, [pc, #236]	; (800e78c <TIM_Base_SetConfig+0x120>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d003      	beq.n	800e6ac <TIM_Base_SetConfig+0x40>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a3a      	ldr	r2, [pc, #232]	; (800e790 <TIM_Base_SetConfig+0x124>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d108      	bne.n	800e6be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a2f      	ldr	r2, [pc, #188]	; (800e780 <TIM_Base_SetConfig+0x114>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d01f      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6cc:	d01b      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a2c      	ldr	r2, [pc, #176]	; (800e784 <TIM_Base_SetConfig+0x118>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d017      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a2b      	ldr	r2, [pc, #172]	; (800e788 <TIM_Base_SetConfig+0x11c>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d013      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a2a      	ldr	r2, [pc, #168]	; (800e78c <TIM_Base_SetConfig+0x120>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d00f      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a29      	ldr	r2, [pc, #164]	; (800e790 <TIM_Base_SetConfig+0x124>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d00b      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a28      	ldr	r2, [pc, #160]	; (800e794 <TIM_Base_SetConfig+0x128>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d007      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a27      	ldr	r2, [pc, #156]	; (800e798 <TIM_Base_SetConfig+0x12c>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d003      	beq.n	800e706 <TIM_Base_SetConfig+0x9a>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a26      	ldr	r2, [pc, #152]	; (800e79c <TIM_Base_SetConfig+0x130>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d108      	bne.n	800e718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e70c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	4313      	orrs	r3, r2
 800e716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	4313      	orrs	r3, r2
 800e724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	689a      	ldr	r2, [r3, #8]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a10      	ldr	r2, [pc, #64]	; (800e780 <TIM_Base_SetConfig+0x114>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d00f      	beq.n	800e764 <TIM_Base_SetConfig+0xf8>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a12      	ldr	r2, [pc, #72]	; (800e790 <TIM_Base_SetConfig+0x124>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d00b      	beq.n	800e764 <TIM_Base_SetConfig+0xf8>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4a11      	ldr	r2, [pc, #68]	; (800e794 <TIM_Base_SetConfig+0x128>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d007      	beq.n	800e764 <TIM_Base_SetConfig+0xf8>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a10      	ldr	r2, [pc, #64]	; (800e798 <TIM_Base_SetConfig+0x12c>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d003      	beq.n	800e764 <TIM_Base_SetConfig+0xf8>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a0f      	ldr	r2, [pc, #60]	; (800e79c <TIM_Base_SetConfig+0x130>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d103      	bne.n	800e76c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	691a      	ldr	r2, [r3, #16]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	615a      	str	r2, [r3, #20]
}
 800e772:	bf00      	nop
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	40010000 	.word	0x40010000
 800e784:	40000400 	.word	0x40000400
 800e788:	40000800 	.word	0x40000800
 800e78c:	40000c00 	.word	0x40000c00
 800e790:	40010400 	.word	0x40010400
 800e794:	40014000 	.word	0x40014000
 800e798:	40014400 	.word	0x40014400
 800e79c:	40014800 	.word	0x40014800

0800e7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d101      	bne.n	800e7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	e06d      	b.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a30      	ldr	r2, [pc, #192]	; (800e8a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d004      	beq.n	800e7ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a2f      	ldr	r2, [pc, #188]	; (800e8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d108      	bne.n	800e7fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e7f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a20      	ldr	r2, [pc, #128]	; (800e8a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d022      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e82a:	d01d      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a1d      	ldr	r2, [pc, #116]	; (800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d018      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a1c      	ldr	r2, [pc, #112]	; (800e8ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d013      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a1a      	ldr	r2, [pc, #104]	; (800e8b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00e      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a15      	ldr	r2, [pc, #84]	; (800e8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d009      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a16      	ldr	r2, [pc, #88]	; (800e8b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d004      	beq.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a15      	ldr	r2, [pc, #84]	; (800e8b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d10c      	bne.n	800e882 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e86e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	4313      	orrs	r3, r2
 800e878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3714      	adds	r7, #20
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr
 800e8a0:	40010000 	.word	0x40010000
 800e8a4:	40010400 	.word	0x40010400
 800e8a8:	40000400 	.word	0x40000400
 800e8ac:	40000800 	.word	0x40000800
 800e8b0:	40000c00 	.word	0x40000c00
 800e8b4:	40001800 	.word	0x40001800
 800e8b8:	40014000 	.word	0x40014000

0800e8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e8c4:	bf00      	nop
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e906:	2301      	movs	r3, #1
 800e908:	e042      	b.n	800e990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e910:	2b00      	cmp	r3, #0
 800e912:	d106      	bne.n	800e922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7f8 ff73 	bl	8007808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2224      	movs	r2, #36	; 0x24
 800e926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0201 	bic.w	r2, r2, #1
 800e938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fbea 	bl	800f114 <UART_SetConfig>
 800e940:	4603      	mov	r3, r0
 800e942:	2b01      	cmp	r3, #1
 800e944:	d101      	bne.n	800e94a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e946:	2301      	movs	r3, #1
 800e948:	e022      	b.n	800e990 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d002      	beq.n	800e958 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f001 f946 	bl	800fbe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f042 0201 	orr.w	r2, r2, #1
 800e986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f001 f9cd 	bl	800fd28 <UART_CheckIdleState>
 800e98e:	4603      	mov	r3, r0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b0ba      	sub	sp, #232	; 0xe8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	69db      	ldr	r3, [r3, #28]
 800e9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e9be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e9c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e9c6:	4013      	ands	r3, r2
 800e9c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e9cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11b      	bne.n	800ea0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9d8:	f003 0320 	and.w	r3, r3, #32
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d015      	beq.n	800ea0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9e4:	f003 0320 	and.w	r3, r3, #32
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d105      	bne.n	800e9f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e9ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d009      	beq.n	800ea0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 835a 	beq.w	800f0b6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	4798      	blx	r3
      }
      return;
 800ea0a:	e354      	b.n	800f0b6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 811f 	beq.w	800ec54 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ea1a:	4b8b      	ldr	r3, [pc, #556]	; (800ec48 <HAL_UART_IRQHandler+0x2b0>)
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ea22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea26:	4b89      	ldr	r3, [pc, #548]	; (800ec4c <HAL_UART_IRQHandler+0x2b4>)
 800ea28:	4013      	ands	r3, r2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8112 	beq.w	800ec54 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d011      	beq.n	800ea60 <HAL_UART_IRQHandler+0xc8>
 800ea3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00b      	beq.n	800ea60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea56:	f043 0201 	orr.w	r2, r3, #1
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea64:	f003 0302 	and.w	r3, r3, #2
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d011      	beq.n	800ea90 <HAL_UART_IRQHandler+0xf8>
 800ea6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00b      	beq.n	800ea90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea86:	f043 0204 	orr.w	r2, r3, #4
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d011      	beq.n	800eac0 <HAL_UART_IRQHandler+0x128>
 800ea9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2204      	movs	r2, #4
 800eaae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eab6:	f043 0202 	orr.w	r2, r3, #2
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac4:	f003 0308 	and.w	r3, r3, #8
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d017      	beq.n	800eafc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eacc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ead0:	f003 0320 	and.w	r3, r3, #32
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d105      	bne.n	800eae4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ead8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eadc:	4b5a      	ldr	r3, [pc, #360]	; (800ec48 <HAL_UART_IRQHandler+0x2b0>)
 800eade:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00b      	beq.n	800eafc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2208      	movs	r2, #8
 800eaea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaf2:	f043 0208 	orr.w	r2, r3, #8
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d012      	beq.n	800eb2e <HAL_UART_IRQHandler+0x196>
 800eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00c      	beq.n	800eb2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb24:	f043 0220 	orr.w	r2, r3, #32
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 82c0 	beq.w	800f0ba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb3e:	f003 0320 	and.w	r3, r3, #32
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d013      	beq.n	800eb6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb4a:	f003 0320 	and.w	r3, r3, #32
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d105      	bne.n	800eb5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d007      	beq.n	800eb6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb82:	2b40      	cmp	r3, #64	; 0x40
 800eb84:	d005      	beq.n	800eb92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eb86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d04f      	beq.n	800ec32 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f001 f9dc 	bl	800ff50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eba2:	2b40      	cmp	r3, #64	; 0x40
 800eba4:	d141      	bne.n	800ec2a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ebbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ebc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3308      	adds	r3, #8
 800ebce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ebd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ebd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ebde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ebe2:	e841 2300 	strex	r3, r2, [r1]
 800ebe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ebea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1d9      	bne.n	800eba6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d013      	beq.n	800ec22 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebfe:	4a14      	ldr	r2, [pc, #80]	; (800ec50 <HAL_UART_IRQHandler+0x2b8>)
 800ec00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fa f83c 	bl	8008c84 <HAL_DMA_Abort_IT>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d017      	beq.n	800ec42 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec20:	e00f      	b.n	800ec42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fa60 	bl	800f0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec28:	e00b      	b.n	800ec42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fa5c 	bl	800f0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec30:	e007      	b.n	800ec42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 fa58 	bl	800f0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ec40:	e23b      	b.n	800f0ba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec42:	bf00      	nop
    return;
 800ec44:	e239      	b.n	800f0ba <HAL_UART_IRQHandler+0x722>
 800ec46:	bf00      	nop
 800ec48:	10000001 	.word	0x10000001
 800ec4c:	04000120 	.word	0x04000120
 800ec50:	0801001d 	.word	0x0801001d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	f040 81ce 	bne.w	800effa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ec5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec62:	f003 0310 	and.w	r3, r3, #16
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 81c7 	beq.w	800effa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ec6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 81c0 	beq.w	800effa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2210      	movs	r2, #16
 800ec80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8c:	2b40      	cmp	r3, #64	; 0x40
 800ec8e:	f040 813b 	bne.w	800ef08 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a8b      	ldr	r2, [pc, #556]	; (800eec8 <HAL_UART_IRQHandler+0x530>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d059      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a89      	ldr	r2, [pc, #548]	; (800eecc <HAL_UART_IRQHandler+0x534>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d053      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a87      	ldr	r2, [pc, #540]	; (800eed0 <HAL_UART_IRQHandler+0x538>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d04d      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a85      	ldr	r2, [pc, #532]	; (800eed4 <HAL_UART_IRQHandler+0x53c>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d047      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a83      	ldr	r2, [pc, #524]	; (800eed8 <HAL_UART_IRQHandler+0x540>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d041      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a81      	ldr	r2, [pc, #516]	; (800eedc <HAL_UART_IRQHandler+0x544>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d03b      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a7f      	ldr	r2, [pc, #508]	; (800eee0 <HAL_UART_IRQHandler+0x548>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d035      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a7d      	ldr	r2, [pc, #500]	; (800eee4 <HAL_UART_IRQHandler+0x54c>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d02f      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a7b      	ldr	r2, [pc, #492]	; (800eee8 <HAL_UART_IRQHandler+0x550>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d029      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a79      	ldr	r2, [pc, #484]	; (800eeec <HAL_UART_IRQHandler+0x554>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d023      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a77      	ldr	r2, [pc, #476]	; (800eef0 <HAL_UART_IRQHandler+0x558>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d01d      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a75      	ldr	r2, [pc, #468]	; (800eef4 <HAL_UART_IRQHandler+0x55c>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d017      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a73      	ldr	r2, [pc, #460]	; (800eef8 <HAL_UART_IRQHandler+0x560>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d011      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a71      	ldr	r2, [pc, #452]	; (800eefc <HAL_UART_IRQHandler+0x564>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d00b      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a6f      	ldr	r2, [pc, #444]	; (800ef00 <HAL_UART_IRQHandler+0x568>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d005      	beq.n	800ed52 <HAL_UART_IRQHandler+0x3ba>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a6d      	ldr	r2, [pc, #436]	; (800ef04 <HAL_UART_IRQHandler+0x56c>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d105      	bne.n	800ed5e <HAL_UART_IRQHandler+0x3c6>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	e004      	b.n	800ed68 <HAL_UART_IRQHandler+0x3d0>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ed6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f000 81a4 	beq.w	800f0be <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ed80:	429a      	cmp	r2, r3
 800ed82:	f080 819c 	bcs.w	800f0be <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ed8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed94:	69db      	ldr	r3, [r3, #28]
 800ed96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed9a:	f000 8086 	beq.w	800eeaa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800edaa:	e853 3f00 	ldrex	r3, [r3]
 800edae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800edb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800edb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800edc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800edcc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800edd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800edd8:	e841 2300 	strex	r3, r2, [r1]
 800eddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ede0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1da      	bne.n	800ed9e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	3308      	adds	r3, #8
 800edee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edf2:	e853 3f00 	ldrex	r3, [r3]
 800edf6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800edf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edfa:	f023 0301 	bic.w	r3, r3, #1
 800edfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee18:	e841 2300 	strex	r3, r2, [r1]
 800ee1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1e1      	bne.n	800ede8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	3308      	adds	r3, #8
 800ee2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee2e:	e853 3f00 	ldrex	r3, [r3]
 800ee32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3308      	adds	r3, #8
 800ee44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ee48:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ee4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ee4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ee56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e3      	bne.n	800ee24 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2220      	movs	r2, #32
 800ee60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee72:	e853 3f00 	ldrex	r3, [r3]
 800ee76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ee78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee7a:	f023 0310 	bic.w	r3, r3, #16
 800ee7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ee92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee94:	e841 2300 	strex	r3, r2, [r1]
 800ee98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ee9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1e4      	bne.n	800ee6a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f9 fbcf 	bl	8008648 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f91c 	bl	800f0fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eec4:	e0fb      	b.n	800f0be <HAL_UART_IRQHandler+0x726>
 800eec6:	bf00      	nop
 800eec8:	40020010 	.word	0x40020010
 800eecc:	40020028 	.word	0x40020028
 800eed0:	40020040 	.word	0x40020040
 800eed4:	40020058 	.word	0x40020058
 800eed8:	40020070 	.word	0x40020070
 800eedc:	40020088 	.word	0x40020088
 800eee0:	400200a0 	.word	0x400200a0
 800eee4:	400200b8 	.word	0x400200b8
 800eee8:	40020410 	.word	0x40020410
 800eeec:	40020428 	.word	0x40020428
 800eef0:	40020440 	.word	0x40020440
 800eef4:	40020458 	.word	0x40020458
 800eef8:	40020470 	.word	0x40020470
 800eefc:	40020488 	.word	0x40020488
 800ef00:	400204a0 	.word	0x400204a0
 800ef04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f000 80cc 	beq.w	800f0c2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ef2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f000 80c7 	beq.w	800f0c2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3c:	e853 3f00 	ldrex	r3, [r3]
 800ef40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef56:	647b      	str	r3, [r7, #68]	; 0x44
 800ef58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef5e:	e841 2300 	strex	r3, r2, [r1]
 800ef62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1e4      	bne.n	800ef34 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	e853 3f00 	ldrex	r3, [r3]
 800ef78:	623b      	str	r3, [r7, #32]
   return(result);
 800ef7a:	6a3a      	ldr	r2, [r7, #32]
 800ef7c:	4b54      	ldr	r3, [pc, #336]	; (800f0d0 <HAL_UART_IRQHandler+0x738>)
 800ef7e:	4013      	ands	r3, r2
 800ef80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	3308      	adds	r3, #8
 800ef8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ef8e:	633a      	str	r2, [r7, #48]	; 0x30
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef96:	e841 2300 	strex	r3, r2, [r1]
 800ef9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1e3      	bne.n	800ef6a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2220      	movs	r2, #32
 800efa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	e853 3f00 	ldrex	r3, [r3]
 800efc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f023 0310 	bic.w	r3, r3, #16
 800efca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800efd8:	61fb      	str	r3, [r7, #28]
 800efda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efdc:	69b9      	ldr	r1, [r7, #24]
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	e841 2300 	strex	r3, r2, [r1]
 800efe4:	617b      	str	r3, [r7, #20]
   return(result);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1e4      	bne.n	800efb6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800efec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 f882 	bl	800f0fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eff8:	e063      	b.n	800f0c2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800effa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800effe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00e      	beq.n	800f024 <HAL_UART_IRQHandler+0x68c>
 800f006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f00a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d008      	beq.n	800f024 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f01a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f001 f83e 	bl	801009e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f022:	e051      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d014      	beq.n	800f05a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d105      	bne.n	800f048 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f044:	2b00      	cmp	r3, #0
 800f046:	d008      	beq.n	800f05a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d03a      	beq.n	800f0c6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	4798      	blx	r3
    }
    return;
 800f058:	e035      	b.n	800f0c6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f062:	2b00      	cmp	r3, #0
 800f064:	d009      	beq.n	800f07a <HAL_UART_IRQHandler+0x6e2>
 800f066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 ffe8 	bl	8010048 <UART_EndTransmit_IT>
    return;
 800f078:	e026      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f07e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f082:	2b00      	cmp	r3, #0
 800f084:	d009      	beq.n	800f09a <HAL_UART_IRQHandler+0x702>
 800f086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f08a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f001 f817 	bl	80100c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f098:	e016      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f09e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d010      	beq.n	800f0c8 <HAL_UART_IRQHandler+0x730>
 800f0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	da0c      	bge.n	800f0c8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 ffff 	bl	80100b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0b4:	e008      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f0b6:	bf00      	nop
 800f0b8:	e006      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
    return;
 800f0ba:	bf00      	nop
 800f0bc:	e004      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f0be:	bf00      	nop
 800f0c0:	e002      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f0c2:	bf00      	nop
 800f0c4:	e000      	b.n	800f0c8 <HAL_UART_IRQHandler+0x730>
    return;
 800f0c6:	bf00      	nop
  }
}
 800f0c8:	37e8      	adds	r7, #232	; 0xe8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	effffffe 	.word	0xeffffffe

0800f0d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f0f0:	bf00      	nop
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f108:	bf00      	nop
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f118:	b092      	sub	sp, #72	; 0x48
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	689a      	ldr	r2, [r3, #8]
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	431a      	orrs	r2, r3
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	69db      	ldr	r3, [r3, #28]
 800f138:	4313      	orrs	r3, r2
 800f13a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	4bbe      	ldr	r3, [pc, #760]	; (800f43c <UART_SetConfig+0x328>)
 800f144:	4013      	ands	r3, r2
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	6812      	ldr	r2, [r2, #0]
 800f14a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f14c:	430b      	orrs	r3, r1
 800f14e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	68da      	ldr	r2, [r3, #12]
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4ab3      	ldr	r2, [pc, #716]	; (800f440 <UART_SetConfig+0x32c>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d004      	beq.n	800f180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f17c:	4313      	orrs	r3, r2
 800f17e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	689a      	ldr	r2, [r3, #8]
 800f186:	4baf      	ldr	r3, [pc, #700]	; (800f444 <UART_SetConfig+0x330>)
 800f188:	4013      	ands	r3, r2
 800f18a:	697a      	ldr	r2, [r7, #20]
 800f18c:	6812      	ldr	r2, [r2, #0]
 800f18e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f190:	430b      	orrs	r3, r1
 800f192:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19a:	f023 010f 	bic.w	r1, r3, #15
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4aa6      	ldr	r2, [pc, #664]	; (800f448 <UART_SetConfig+0x334>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d177      	bne.n	800f2a4 <UART_SetConfig+0x190>
 800f1b4:	4ba5      	ldr	r3, [pc, #660]	; (800f44c <UART_SetConfig+0x338>)
 800f1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f1bc:	2b28      	cmp	r3, #40	; 0x28
 800f1be:	d86d      	bhi.n	800f29c <UART_SetConfig+0x188>
 800f1c0:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <UART_SetConfig+0xb4>)
 800f1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c6:	bf00      	nop
 800f1c8:	0800f26d 	.word	0x0800f26d
 800f1cc:	0800f29d 	.word	0x0800f29d
 800f1d0:	0800f29d 	.word	0x0800f29d
 800f1d4:	0800f29d 	.word	0x0800f29d
 800f1d8:	0800f29d 	.word	0x0800f29d
 800f1dc:	0800f29d 	.word	0x0800f29d
 800f1e0:	0800f29d 	.word	0x0800f29d
 800f1e4:	0800f29d 	.word	0x0800f29d
 800f1e8:	0800f275 	.word	0x0800f275
 800f1ec:	0800f29d 	.word	0x0800f29d
 800f1f0:	0800f29d 	.word	0x0800f29d
 800f1f4:	0800f29d 	.word	0x0800f29d
 800f1f8:	0800f29d 	.word	0x0800f29d
 800f1fc:	0800f29d 	.word	0x0800f29d
 800f200:	0800f29d 	.word	0x0800f29d
 800f204:	0800f29d 	.word	0x0800f29d
 800f208:	0800f27d 	.word	0x0800f27d
 800f20c:	0800f29d 	.word	0x0800f29d
 800f210:	0800f29d 	.word	0x0800f29d
 800f214:	0800f29d 	.word	0x0800f29d
 800f218:	0800f29d 	.word	0x0800f29d
 800f21c:	0800f29d 	.word	0x0800f29d
 800f220:	0800f29d 	.word	0x0800f29d
 800f224:	0800f29d 	.word	0x0800f29d
 800f228:	0800f285 	.word	0x0800f285
 800f22c:	0800f29d 	.word	0x0800f29d
 800f230:	0800f29d 	.word	0x0800f29d
 800f234:	0800f29d 	.word	0x0800f29d
 800f238:	0800f29d 	.word	0x0800f29d
 800f23c:	0800f29d 	.word	0x0800f29d
 800f240:	0800f29d 	.word	0x0800f29d
 800f244:	0800f29d 	.word	0x0800f29d
 800f248:	0800f28d 	.word	0x0800f28d
 800f24c:	0800f29d 	.word	0x0800f29d
 800f250:	0800f29d 	.word	0x0800f29d
 800f254:	0800f29d 	.word	0x0800f29d
 800f258:	0800f29d 	.word	0x0800f29d
 800f25c:	0800f29d 	.word	0x0800f29d
 800f260:	0800f29d 	.word	0x0800f29d
 800f264:	0800f29d 	.word	0x0800f29d
 800f268:	0800f295 	.word	0x0800f295
 800f26c:	2301      	movs	r3, #1
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f272:	e222      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f274:	2304      	movs	r3, #4
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27a:	e21e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f27c:	2308      	movs	r3, #8
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f282:	e21a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f284:	2310      	movs	r3, #16
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28a:	e216      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f28c:	2320      	movs	r3, #32
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f292:	e212      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f294:	2340      	movs	r3, #64	; 0x40
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29a:	e20e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f29c:	2380      	movs	r3, #128	; 0x80
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a2:	e20a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a69      	ldr	r2, [pc, #420]	; (800f450 <UART_SetConfig+0x33c>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d130      	bne.n	800f310 <UART_SetConfig+0x1fc>
 800f2ae:	4b67      	ldr	r3, [pc, #412]	; (800f44c <UART_SetConfig+0x338>)
 800f2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2b2:	f003 0307 	and.w	r3, r3, #7
 800f2b6:	2b05      	cmp	r3, #5
 800f2b8:	d826      	bhi.n	800f308 <UART_SetConfig+0x1f4>
 800f2ba:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <UART_SetConfig+0x1ac>)
 800f2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c0:	0800f2d9 	.word	0x0800f2d9
 800f2c4:	0800f2e1 	.word	0x0800f2e1
 800f2c8:	0800f2e9 	.word	0x0800f2e9
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f2f9 	.word	0x0800f2f9
 800f2d4:	0800f301 	.word	0x0800f301
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2de:	e1ec      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f2e0:	2304      	movs	r3, #4
 800f2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e6:	e1e8      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f2e8:	2308      	movs	r3, #8
 800f2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ee:	e1e4      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f2f0:	2310      	movs	r3, #16
 800f2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f6:	e1e0      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f2f8:	2320      	movs	r3, #32
 800f2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fe:	e1dc      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f300:	2340      	movs	r3, #64	; 0x40
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f306:	e1d8      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f308:	2380      	movs	r3, #128	; 0x80
 800f30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30e:	e1d4      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a4f      	ldr	r2, [pc, #316]	; (800f454 <UART_SetConfig+0x340>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d130      	bne.n	800f37c <UART_SetConfig+0x268>
 800f31a:	4b4c      	ldr	r3, [pc, #304]	; (800f44c <UART_SetConfig+0x338>)
 800f31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f31e:	f003 0307 	and.w	r3, r3, #7
 800f322:	2b05      	cmp	r3, #5
 800f324:	d826      	bhi.n	800f374 <UART_SetConfig+0x260>
 800f326:	a201      	add	r2, pc, #4	; (adr r2, 800f32c <UART_SetConfig+0x218>)
 800f328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32c:	0800f345 	.word	0x0800f345
 800f330:	0800f34d 	.word	0x0800f34d
 800f334:	0800f355 	.word	0x0800f355
 800f338:	0800f35d 	.word	0x0800f35d
 800f33c:	0800f365 	.word	0x0800f365
 800f340:	0800f36d 	.word	0x0800f36d
 800f344:	2300      	movs	r3, #0
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34a:	e1b6      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f34c:	2304      	movs	r3, #4
 800f34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f352:	e1b2      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f354:	2308      	movs	r3, #8
 800f356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35a:	e1ae      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f35c:	2310      	movs	r3, #16
 800f35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f362:	e1aa      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f364:	2320      	movs	r3, #32
 800f366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36a:	e1a6      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f36c:	2340      	movs	r3, #64	; 0x40
 800f36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f372:	e1a2      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f374:	2380      	movs	r3, #128	; 0x80
 800f376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37a:	e19e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a35      	ldr	r2, [pc, #212]	; (800f458 <UART_SetConfig+0x344>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d130      	bne.n	800f3e8 <UART_SetConfig+0x2d4>
 800f386:	4b31      	ldr	r3, [pc, #196]	; (800f44c <UART_SetConfig+0x338>)
 800f388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38a:	f003 0307 	and.w	r3, r3, #7
 800f38e:	2b05      	cmp	r3, #5
 800f390:	d826      	bhi.n	800f3e0 <UART_SetConfig+0x2cc>
 800f392:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <UART_SetConfig+0x284>)
 800f394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f398:	0800f3b1 	.word	0x0800f3b1
 800f39c:	0800f3b9 	.word	0x0800f3b9
 800f3a0:	0800f3c1 	.word	0x0800f3c1
 800f3a4:	0800f3c9 	.word	0x0800f3c9
 800f3a8:	0800f3d1 	.word	0x0800f3d1
 800f3ac:	0800f3d9 	.word	0x0800f3d9
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3b6:	e180      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3b8:	2304      	movs	r3, #4
 800f3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3be:	e17c      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3c0:	2308      	movs	r3, #8
 800f3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c6:	e178      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3c8:	2310      	movs	r3, #16
 800f3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ce:	e174      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3d0:	2320      	movs	r3, #32
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d6:	e170      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3d8:	2340      	movs	r3, #64	; 0x40
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3de:	e16c      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3e0:	2380      	movs	r3, #128	; 0x80
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e6:	e168      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a1b      	ldr	r2, [pc, #108]	; (800f45c <UART_SetConfig+0x348>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d142      	bne.n	800f478 <UART_SetConfig+0x364>
 800f3f2:	4b16      	ldr	r3, [pc, #88]	; (800f44c <UART_SetConfig+0x338>)
 800f3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f6:	f003 0307 	and.w	r3, r3, #7
 800f3fa:	2b05      	cmp	r3, #5
 800f3fc:	d838      	bhi.n	800f470 <UART_SetConfig+0x35c>
 800f3fe:	a201      	add	r2, pc, #4	; (adr r2, 800f404 <UART_SetConfig+0x2f0>)
 800f400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f404:	0800f41d 	.word	0x0800f41d
 800f408:	0800f425 	.word	0x0800f425
 800f40c:	0800f42d 	.word	0x0800f42d
 800f410:	0800f435 	.word	0x0800f435
 800f414:	0800f461 	.word	0x0800f461
 800f418:	0800f469 	.word	0x0800f469
 800f41c:	2300      	movs	r3, #0
 800f41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f422:	e14a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f424:	2304      	movs	r3, #4
 800f426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42a:	e146      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f42c:	2308      	movs	r3, #8
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f432:	e142      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f434:	2310      	movs	r3, #16
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43a:	e13e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f43c:	cfff69f3 	.word	0xcfff69f3
 800f440:	58000c00 	.word	0x58000c00
 800f444:	11fff4ff 	.word	0x11fff4ff
 800f448:	40011000 	.word	0x40011000
 800f44c:	58024400 	.word	0x58024400
 800f450:	40004400 	.word	0x40004400
 800f454:	40004800 	.word	0x40004800
 800f458:	40004c00 	.word	0x40004c00
 800f45c:	40005000 	.word	0x40005000
 800f460:	2320      	movs	r3, #32
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e128      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f468:	2340      	movs	r3, #64	; 0x40
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f46e:	e124      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f470:	2380      	movs	r3, #128	; 0x80
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f476:	e120      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4acb      	ldr	r2, [pc, #812]	; (800f7ac <UART_SetConfig+0x698>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d176      	bne.n	800f570 <UART_SetConfig+0x45c>
 800f482:	4bcb      	ldr	r3, [pc, #812]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f48a:	2b28      	cmp	r3, #40	; 0x28
 800f48c:	d86c      	bhi.n	800f568 <UART_SetConfig+0x454>
 800f48e:	a201      	add	r2, pc, #4	; (adr r2, 800f494 <UART_SetConfig+0x380>)
 800f490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f494:	0800f539 	.word	0x0800f539
 800f498:	0800f569 	.word	0x0800f569
 800f49c:	0800f569 	.word	0x0800f569
 800f4a0:	0800f569 	.word	0x0800f569
 800f4a4:	0800f569 	.word	0x0800f569
 800f4a8:	0800f569 	.word	0x0800f569
 800f4ac:	0800f569 	.word	0x0800f569
 800f4b0:	0800f569 	.word	0x0800f569
 800f4b4:	0800f541 	.word	0x0800f541
 800f4b8:	0800f569 	.word	0x0800f569
 800f4bc:	0800f569 	.word	0x0800f569
 800f4c0:	0800f569 	.word	0x0800f569
 800f4c4:	0800f569 	.word	0x0800f569
 800f4c8:	0800f569 	.word	0x0800f569
 800f4cc:	0800f569 	.word	0x0800f569
 800f4d0:	0800f569 	.word	0x0800f569
 800f4d4:	0800f549 	.word	0x0800f549
 800f4d8:	0800f569 	.word	0x0800f569
 800f4dc:	0800f569 	.word	0x0800f569
 800f4e0:	0800f569 	.word	0x0800f569
 800f4e4:	0800f569 	.word	0x0800f569
 800f4e8:	0800f569 	.word	0x0800f569
 800f4ec:	0800f569 	.word	0x0800f569
 800f4f0:	0800f569 	.word	0x0800f569
 800f4f4:	0800f551 	.word	0x0800f551
 800f4f8:	0800f569 	.word	0x0800f569
 800f4fc:	0800f569 	.word	0x0800f569
 800f500:	0800f569 	.word	0x0800f569
 800f504:	0800f569 	.word	0x0800f569
 800f508:	0800f569 	.word	0x0800f569
 800f50c:	0800f569 	.word	0x0800f569
 800f510:	0800f569 	.word	0x0800f569
 800f514:	0800f559 	.word	0x0800f559
 800f518:	0800f569 	.word	0x0800f569
 800f51c:	0800f569 	.word	0x0800f569
 800f520:	0800f569 	.word	0x0800f569
 800f524:	0800f569 	.word	0x0800f569
 800f528:	0800f569 	.word	0x0800f569
 800f52c:	0800f569 	.word	0x0800f569
 800f530:	0800f569 	.word	0x0800f569
 800f534:	0800f561 	.word	0x0800f561
 800f538:	2301      	movs	r3, #1
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e0bc      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f540:	2304      	movs	r3, #4
 800f542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f546:	e0b8      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f548:	2308      	movs	r3, #8
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54e:	e0b4      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f550:	2310      	movs	r3, #16
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f556:	e0b0      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f558:	2320      	movs	r3, #32
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f55e:	e0ac      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f560:	2340      	movs	r3, #64	; 0x40
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f566:	e0a8      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f568:	2380      	movs	r3, #128	; 0x80
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f56e:	e0a4      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a8f      	ldr	r2, [pc, #572]	; (800f7b4 <UART_SetConfig+0x6a0>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d130      	bne.n	800f5dc <UART_SetConfig+0x4c8>
 800f57a:	4b8d      	ldr	r3, [pc, #564]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f57e:	f003 0307 	and.w	r3, r3, #7
 800f582:	2b05      	cmp	r3, #5
 800f584:	d826      	bhi.n	800f5d4 <UART_SetConfig+0x4c0>
 800f586:	a201      	add	r2, pc, #4	; (adr r2, 800f58c <UART_SetConfig+0x478>)
 800f588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58c:	0800f5a5 	.word	0x0800f5a5
 800f590:	0800f5ad 	.word	0x0800f5ad
 800f594:	0800f5b5 	.word	0x0800f5b5
 800f598:	0800f5bd 	.word	0x0800f5bd
 800f59c:	0800f5c5 	.word	0x0800f5c5
 800f5a0:	0800f5cd 	.word	0x0800f5cd
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e086      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5ac:	2304      	movs	r3, #4
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b2:	e082      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5b4:	2308      	movs	r3, #8
 800f5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ba:	e07e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5bc:	2310      	movs	r3, #16
 800f5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c2:	e07a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5c4:	2320      	movs	r3, #32
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ca:	e076      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5cc:	2340      	movs	r3, #64	; 0x40
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d2:	e072      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5d4:	2380      	movs	r3, #128	; 0x80
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5da:	e06e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a75      	ldr	r2, [pc, #468]	; (800f7b8 <UART_SetConfig+0x6a4>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d130      	bne.n	800f648 <UART_SetConfig+0x534>
 800f5e6:	4b72      	ldr	r3, [pc, #456]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ea:	f003 0307 	and.w	r3, r3, #7
 800f5ee:	2b05      	cmp	r3, #5
 800f5f0:	d826      	bhi.n	800f640 <UART_SetConfig+0x52c>
 800f5f2:	a201      	add	r2, pc, #4	; (adr r2, 800f5f8 <UART_SetConfig+0x4e4>)
 800f5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f8:	0800f611 	.word	0x0800f611
 800f5fc:	0800f619 	.word	0x0800f619
 800f600:	0800f621 	.word	0x0800f621
 800f604:	0800f629 	.word	0x0800f629
 800f608:	0800f631 	.word	0x0800f631
 800f60c:	0800f639 	.word	0x0800f639
 800f610:	2300      	movs	r3, #0
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f616:	e050      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f618:	2304      	movs	r3, #4
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61e:	e04c      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f620:	2308      	movs	r3, #8
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f626:	e048      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f628:	2310      	movs	r3, #16
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62e:	e044      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f630:	2320      	movs	r3, #32
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f636:	e040      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f638:	2340      	movs	r3, #64	; 0x40
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63e:	e03c      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f640:	2380      	movs	r3, #128	; 0x80
 800f642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f646:	e038      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a5b      	ldr	r2, [pc, #364]	; (800f7bc <UART_SetConfig+0x6a8>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d130      	bne.n	800f6b4 <UART_SetConfig+0x5a0>
 800f652:	4b57      	ldr	r3, [pc, #348]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f656:	f003 0307 	and.w	r3, r3, #7
 800f65a:	2b05      	cmp	r3, #5
 800f65c:	d826      	bhi.n	800f6ac <UART_SetConfig+0x598>
 800f65e:	a201      	add	r2, pc, #4	; (adr r2, 800f664 <UART_SetConfig+0x550>)
 800f660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f664:	0800f67d 	.word	0x0800f67d
 800f668:	0800f685 	.word	0x0800f685
 800f66c:	0800f68d 	.word	0x0800f68d
 800f670:	0800f695 	.word	0x0800f695
 800f674:	0800f69d 	.word	0x0800f69d
 800f678:	0800f6a5 	.word	0x0800f6a5
 800f67c:	2302      	movs	r3, #2
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f682:	e01a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f684:	2304      	movs	r3, #4
 800f686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68a:	e016      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f68c:	2308      	movs	r3, #8
 800f68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f692:	e012      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f694:	2310      	movs	r3, #16
 800f696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69a:	e00e      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f69c:	2320      	movs	r3, #32
 800f69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a2:	e00a      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f6a4:	2340      	movs	r3, #64	; 0x40
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6aa:	e006      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f6ac:	2380      	movs	r3, #128	; 0x80
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b2:	e002      	b.n	800f6ba <UART_SetConfig+0x5a6>
 800f6b4:	2380      	movs	r3, #128	; 0x80
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a3f      	ldr	r2, [pc, #252]	; (800f7bc <UART_SetConfig+0x6a8>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	f040 80f8 	bne.w	800f8b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f6c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6ca:	2b20      	cmp	r3, #32
 800f6cc:	dc46      	bgt.n	800f75c <UART_SetConfig+0x648>
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	f2c0 8082 	blt.w	800f7d8 <UART_SetConfig+0x6c4>
 800f6d4:	3b02      	subs	r3, #2
 800f6d6:	2b1e      	cmp	r3, #30
 800f6d8:	d87e      	bhi.n	800f7d8 <UART_SetConfig+0x6c4>
 800f6da:	a201      	add	r2, pc, #4	; (adr r2, 800f6e0 <UART_SetConfig+0x5cc>)
 800f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e0:	0800f763 	.word	0x0800f763
 800f6e4:	0800f7d9 	.word	0x0800f7d9
 800f6e8:	0800f76b 	.word	0x0800f76b
 800f6ec:	0800f7d9 	.word	0x0800f7d9
 800f6f0:	0800f7d9 	.word	0x0800f7d9
 800f6f4:	0800f7d9 	.word	0x0800f7d9
 800f6f8:	0800f77b 	.word	0x0800f77b
 800f6fc:	0800f7d9 	.word	0x0800f7d9
 800f700:	0800f7d9 	.word	0x0800f7d9
 800f704:	0800f7d9 	.word	0x0800f7d9
 800f708:	0800f7d9 	.word	0x0800f7d9
 800f70c:	0800f7d9 	.word	0x0800f7d9
 800f710:	0800f7d9 	.word	0x0800f7d9
 800f714:	0800f7d9 	.word	0x0800f7d9
 800f718:	0800f78b 	.word	0x0800f78b
 800f71c:	0800f7d9 	.word	0x0800f7d9
 800f720:	0800f7d9 	.word	0x0800f7d9
 800f724:	0800f7d9 	.word	0x0800f7d9
 800f728:	0800f7d9 	.word	0x0800f7d9
 800f72c:	0800f7d9 	.word	0x0800f7d9
 800f730:	0800f7d9 	.word	0x0800f7d9
 800f734:	0800f7d9 	.word	0x0800f7d9
 800f738:	0800f7d9 	.word	0x0800f7d9
 800f73c:	0800f7d9 	.word	0x0800f7d9
 800f740:	0800f7d9 	.word	0x0800f7d9
 800f744:	0800f7d9 	.word	0x0800f7d9
 800f748:	0800f7d9 	.word	0x0800f7d9
 800f74c:	0800f7d9 	.word	0x0800f7d9
 800f750:	0800f7d9 	.word	0x0800f7d9
 800f754:	0800f7d9 	.word	0x0800f7d9
 800f758:	0800f7cb 	.word	0x0800f7cb
 800f75c:	2b40      	cmp	r3, #64	; 0x40
 800f75e:	d037      	beq.n	800f7d0 <UART_SetConfig+0x6bc>
 800f760:	e03a      	b.n	800f7d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f762:	f7fd fd3b 	bl	800d1dc <HAL_RCCEx_GetD3PCLK1Freq>
 800f766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f768:	e03c      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fd fd4a 	bl	800d208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f778:	e034      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f77a:	f107 0318 	add.w	r3, r7, #24
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd fe96 	bl	800d4b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f788:	e02c      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b00      	cmp	r3, #0
 800f794:	d016      	beq.n	800f7c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f796:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <UART_SetConfig+0x69c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	08db      	lsrs	r3, r3, #3
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	4a07      	ldr	r2, [pc, #28]	; (800f7c0 <UART_SetConfig+0x6ac>)
 800f7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7a8:	e01c      	b.n	800f7e4 <UART_SetConfig+0x6d0>
 800f7aa:	bf00      	nop
 800f7ac:	40011400 	.word	0x40011400
 800f7b0:	58024400 	.word	0x58024400
 800f7b4:	40007800 	.word	0x40007800
 800f7b8:	40007c00 	.word	0x40007c00
 800f7bc:	58000c00 	.word	0x58000c00
 800f7c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f7c4:	4b9d      	ldr	r3, [pc, #628]	; (800fa3c <UART_SetConfig+0x928>)
 800f7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c8:	e00c      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7ca:	4b9d      	ldr	r3, [pc, #628]	; (800fa40 <UART_SetConfig+0x92c>)
 800f7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ce:	e009      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7d6:	e005      	b.n	800f7e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f7e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	f000 81de 	beq.w	800fba8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f0:	4a94      	ldr	r2, [pc, #592]	; (800fa44 <UART_SetConfig+0x930>)
 800f7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	685a      	ldr	r2, [r3, #4]
 800f804:	4613      	mov	r3, r2
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	4413      	add	r3, r2
 800f80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d305      	bcc.n	800f81c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f818:	429a      	cmp	r2, r3
 800f81a:	d903      	bls.n	800f824 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f81c:	2301      	movs	r3, #1
 800f81e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f822:	e1c1      	b.n	800fba8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f826:	2200      	movs	r2, #0
 800f828:	60bb      	str	r3, [r7, #8]
 800f82a:	60fa      	str	r2, [r7, #12]
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f830:	4a84      	ldr	r2, [pc, #528]	; (800fa44 <UART_SetConfig+0x930>)
 800f832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f836:	b29b      	uxth	r3, r3
 800f838:	2200      	movs	r2, #0
 800f83a:	603b      	str	r3, [r7, #0]
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f846:	f7f0 fd9b 	bl	8000380 <__aeabi_uldivmod>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	4610      	mov	r0, r2
 800f850:	4619      	mov	r1, r3
 800f852:	f04f 0200 	mov.w	r2, #0
 800f856:	f04f 0300 	mov.w	r3, #0
 800f85a:	020b      	lsls	r3, r1, #8
 800f85c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f860:	0202      	lsls	r2, r0, #8
 800f862:	6979      	ldr	r1, [r7, #20]
 800f864:	6849      	ldr	r1, [r1, #4]
 800f866:	0849      	lsrs	r1, r1, #1
 800f868:	2000      	movs	r0, #0
 800f86a:	460c      	mov	r4, r1
 800f86c:	4605      	mov	r5, r0
 800f86e:	eb12 0804 	adds.w	r8, r2, r4
 800f872:	eb43 0905 	adc.w	r9, r3, r5
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	469a      	mov	sl, r3
 800f87e:	4693      	mov	fp, r2
 800f880:	4652      	mov	r2, sl
 800f882:	465b      	mov	r3, fp
 800f884:	4640      	mov	r0, r8
 800f886:	4649      	mov	r1, r9
 800f888:	f7f0 fd7a 	bl	8000380 <__aeabi_uldivmod>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4613      	mov	r3, r2
 800f892:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f89a:	d308      	bcc.n	800f8ae <UART_SetConfig+0x79a>
 800f89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8a2:	d204      	bcs.n	800f8ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8aa:	60da      	str	r2, [r3, #12]
 800f8ac:	e17c      	b.n	800fba8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f8b4:	e178      	b.n	800fba8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	69db      	ldr	r3, [r3, #28]
 800f8ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8be:	f040 80c5 	bne.w	800fa4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f8c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8c6:	2b20      	cmp	r3, #32
 800f8c8:	dc48      	bgt.n	800f95c <UART_SetConfig+0x848>
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	db7b      	blt.n	800f9c6 <UART_SetConfig+0x8b2>
 800f8ce:	2b20      	cmp	r3, #32
 800f8d0:	d879      	bhi.n	800f9c6 <UART_SetConfig+0x8b2>
 800f8d2:	a201      	add	r2, pc, #4	; (adr r2, 800f8d8 <UART_SetConfig+0x7c4>)
 800f8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d8:	0800f963 	.word	0x0800f963
 800f8dc:	0800f96b 	.word	0x0800f96b
 800f8e0:	0800f9c7 	.word	0x0800f9c7
 800f8e4:	0800f9c7 	.word	0x0800f9c7
 800f8e8:	0800f973 	.word	0x0800f973
 800f8ec:	0800f9c7 	.word	0x0800f9c7
 800f8f0:	0800f9c7 	.word	0x0800f9c7
 800f8f4:	0800f9c7 	.word	0x0800f9c7
 800f8f8:	0800f983 	.word	0x0800f983
 800f8fc:	0800f9c7 	.word	0x0800f9c7
 800f900:	0800f9c7 	.word	0x0800f9c7
 800f904:	0800f9c7 	.word	0x0800f9c7
 800f908:	0800f9c7 	.word	0x0800f9c7
 800f90c:	0800f9c7 	.word	0x0800f9c7
 800f910:	0800f9c7 	.word	0x0800f9c7
 800f914:	0800f9c7 	.word	0x0800f9c7
 800f918:	0800f993 	.word	0x0800f993
 800f91c:	0800f9c7 	.word	0x0800f9c7
 800f920:	0800f9c7 	.word	0x0800f9c7
 800f924:	0800f9c7 	.word	0x0800f9c7
 800f928:	0800f9c7 	.word	0x0800f9c7
 800f92c:	0800f9c7 	.word	0x0800f9c7
 800f930:	0800f9c7 	.word	0x0800f9c7
 800f934:	0800f9c7 	.word	0x0800f9c7
 800f938:	0800f9c7 	.word	0x0800f9c7
 800f93c:	0800f9c7 	.word	0x0800f9c7
 800f940:	0800f9c7 	.word	0x0800f9c7
 800f944:	0800f9c7 	.word	0x0800f9c7
 800f948:	0800f9c7 	.word	0x0800f9c7
 800f94c:	0800f9c7 	.word	0x0800f9c7
 800f950:	0800f9c7 	.word	0x0800f9c7
 800f954:	0800f9c7 	.word	0x0800f9c7
 800f958:	0800f9b9 	.word	0x0800f9b9
 800f95c:	2b40      	cmp	r3, #64	; 0x40
 800f95e:	d02e      	beq.n	800f9be <UART_SetConfig+0x8aa>
 800f960:	e031      	b.n	800f9c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f962:	f7fc fcc9 	bl	800c2f8 <HAL_RCC_GetPCLK1Freq>
 800f966:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f968:	e033      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f96a:	f7fc fcdb 	bl	800c324 <HAL_RCC_GetPCLK2Freq>
 800f96e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f970:	e02f      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f976:	4618      	mov	r0, r3
 800f978:	f7fd fc46 	bl	800d208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f980:	e027      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f982:	f107 0318 	add.w	r3, r7, #24
 800f986:	4618      	mov	r0, r3
 800f988:	f7fd fd92 	bl	800d4b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f990:	e01f      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f992:	4b2d      	ldr	r3, [pc, #180]	; (800fa48 <UART_SetConfig+0x934>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0320 	and.w	r3, r3, #32
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d009      	beq.n	800f9b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f99e:	4b2a      	ldr	r3, [pc, #168]	; (800fa48 <UART_SetConfig+0x934>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	08db      	lsrs	r3, r3, #3
 800f9a4:	f003 0303 	and.w	r3, r3, #3
 800f9a8:	4a24      	ldr	r2, [pc, #144]	; (800fa3c <UART_SetConfig+0x928>)
 800f9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9b0:	e00f      	b.n	800f9d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f9b2:	4b22      	ldr	r3, [pc, #136]	; (800fa3c <UART_SetConfig+0x928>)
 800f9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b6:	e00c      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9b8:	4b21      	ldr	r3, [pc, #132]	; (800fa40 <UART_SetConfig+0x92c>)
 800f9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9bc:	e009      	b.n	800f9d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9c4:	e005      	b.n	800f9d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f9d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 80e7 	beq.w	800fba8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9de:	4a19      	ldr	r2, [pc, #100]	; (800fa44 <UART_SetConfig+0x930>)
 800f9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ec:	005a      	lsls	r2, r3, #1
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	085b      	lsrs	r3, r3, #1
 800f9f4:	441a      	add	r2, r3
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	2b0f      	cmp	r3, #15
 800fa04:	d916      	bls.n	800fa34 <UART_SetConfig+0x920>
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa0c:	d212      	bcs.n	800fa34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	f023 030f 	bic.w	r3, r3, #15
 800fa16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa26:	4313      	orrs	r3, r2
 800fa28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa30:	60da      	str	r2, [r3, #12]
 800fa32:	e0b9      	b.n	800fba8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa3a:	e0b5      	b.n	800fba8 <UART_SetConfig+0xa94>
 800fa3c:	03d09000 	.word	0x03d09000
 800fa40:	003d0900 	.word	0x003d0900
 800fa44:	08012c2c 	.word	0x08012c2c
 800fa48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fa4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa50:	2b20      	cmp	r3, #32
 800fa52:	dc49      	bgt.n	800fae8 <UART_SetConfig+0x9d4>
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	db7c      	blt.n	800fb52 <UART_SetConfig+0xa3e>
 800fa58:	2b20      	cmp	r3, #32
 800fa5a:	d87a      	bhi.n	800fb52 <UART_SetConfig+0xa3e>
 800fa5c:	a201      	add	r2, pc, #4	; (adr r2, 800fa64 <UART_SetConfig+0x950>)
 800fa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa62:	bf00      	nop
 800fa64:	0800faef 	.word	0x0800faef
 800fa68:	0800faf7 	.word	0x0800faf7
 800fa6c:	0800fb53 	.word	0x0800fb53
 800fa70:	0800fb53 	.word	0x0800fb53
 800fa74:	0800faff 	.word	0x0800faff
 800fa78:	0800fb53 	.word	0x0800fb53
 800fa7c:	0800fb53 	.word	0x0800fb53
 800fa80:	0800fb53 	.word	0x0800fb53
 800fa84:	0800fb0f 	.word	0x0800fb0f
 800fa88:	0800fb53 	.word	0x0800fb53
 800fa8c:	0800fb53 	.word	0x0800fb53
 800fa90:	0800fb53 	.word	0x0800fb53
 800fa94:	0800fb53 	.word	0x0800fb53
 800fa98:	0800fb53 	.word	0x0800fb53
 800fa9c:	0800fb53 	.word	0x0800fb53
 800faa0:	0800fb53 	.word	0x0800fb53
 800faa4:	0800fb1f 	.word	0x0800fb1f
 800faa8:	0800fb53 	.word	0x0800fb53
 800faac:	0800fb53 	.word	0x0800fb53
 800fab0:	0800fb53 	.word	0x0800fb53
 800fab4:	0800fb53 	.word	0x0800fb53
 800fab8:	0800fb53 	.word	0x0800fb53
 800fabc:	0800fb53 	.word	0x0800fb53
 800fac0:	0800fb53 	.word	0x0800fb53
 800fac4:	0800fb53 	.word	0x0800fb53
 800fac8:	0800fb53 	.word	0x0800fb53
 800facc:	0800fb53 	.word	0x0800fb53
 800fad0:	0800fb53 	.word	0x0800fb53
 800fad4:	0800fb53 	.word	0x0800fb53
 800fad8:	0800fb53 	.word	0x0800fb53
 800fadc:	0800fb53 	.word	0x0800fb53
 800fae0:	0800fb53 	.word	0x0800fb53
 800fae4:	0800fb45 	.word	0x0800fb45
 800fae8:	2b40      	cmp	r3, #64	; 0x40
 800faea:	d02e      	beq.n	800fb4a <UART_SetConfig+0xa36>
 800faec:	e031      	b.n	800fb52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800faee:	f7fc fc03 	bl	800c2f8 <HAL_RCC_GetPCLK1Freq>
 800faf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800faf4:	e033      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800faf6:	f7fc fc15 	bl	800c324 <HAL_RCC_GetPCLK2Freq>
 800fafa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fafc:	e02f      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fafe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fb80 	bl	800d208 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb0c:	e027      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb0e:	f107 0318 	add.w	r3, r7, #24
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fd fccc 	bl	800d4b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb1c:	e01f      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb1e:	4b2d      	ldr	r3, [pc, #180]	; (800fbd4 <UART_SetConfig+0xac0>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f003 0320 	and.w	r3, r3, #32
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d009      	beq.n	800fb3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb2a:	4b2a      	ldr	r3, [pc, #168]	; (800fbd4 <UART_SetConfig+0xac0>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	08db      	lsrs	r3, r3, #3
 800fb30:	f003 0303 	and.w	r3, r3, #3
 800fb34:	4a28      	ldr	r2, [pc, #160]	; (800fbd8 <UART_SetConfig+0xac4>)
 800fb36:	fa22 f303 	lsr.w	r3, r2, r3
 800fb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb3c:	e00f      	b.n	800fb5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fb3e:	4b26      	ldr	r3, [pc, #152]	; (800fbd8 <UART_SetConfig+0xac4>)
 800fb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb42:	e00c      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb44:	4b25      	ldr	r3, [pc, #148]	; (800fbdc <UART_SetConfig+0xac8>)
 800fb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb48:	e009      	b.n	800fb5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb50:	e005      	b.n	800fb5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fb52:	2300      	movs	r3, #0
 800fb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb5c:	bf00      	nop
    }

    if (pclk != 0U)
 800fb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d021      	beq.n	800fba8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb68:	4a1d      	ldr	r2, [pc, #116]	; (800fbe0 <UART_SetConfig+0xacc>)
 800fb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb72:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	085b      	lsrs	r3, r3, #1
 800fb7c:	441a      	add	r2, r3
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	2b0f      	cmp	r3, #15
 800fb8c:	d909      	bls.n	800fba2 <UART_SetConfig+0xa8e>
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb94:	d205      	bcs.n	800fba2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	60da      	str	r2, [r3, #12]
 800fba0:	e002      	b.n	800fba8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fba2:	2301      	movs	r3, #1
 800fba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fbc4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3748      	adds	r7, #72	; 0x48
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fbd2:	bf00      	nop
 800fbd4:	58024400 	.word	0x58024400
 800fbd8:	03d09000 	.word	0x03d09000
 800fbdc:	003d0900 	.word	0x003d0900
 800fbe0:	08012c2c 	.word	0x08012c2c

0800fbe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00a      	beq.n	800fc0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	430a      	orrs	r2, r1
 800fc0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc12:	f003 0302 	and.w	r3, r3, #2
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00a      	beq.n	800fc30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	430a      	orrs	r2, r1
 800fc2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc34:	f003 0304 	and.w	r3, r3, #4
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00a      	beq.n	800fc52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	430a      	orrs	r2, r1
 800fc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc56:	f003 0308 	and.w	r3, r3, #8
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00a      	beq.n	800fc74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	430a      	orrs	r2, r1
 800fc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc78:	f003 0310 	and.w	r3, r3, #16
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00a      	beq.n	800fc96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	430a      	orrs	r2, r1
 800fc94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00a      	beq.n	800fcb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	689b      	ldr	r3, [r3, #8]
 800fca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	430a      	orrs	r2, r1
 800fcb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d01a      	beq.n	800fcfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	430a      	orrs	r2, r1
 800fcd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fce2:	d10a      	bne.n	800fcfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00a      	beq.n	800fd1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	430a      	orrs	r2, r1
 800fd1a:	605a      	str	r2, [r3, #4]
  }
}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd38:	f7f7 ffca 	bl	8007cd0 <HAL_GetTick>
 800fd3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f003 0308 	and.w	r3, r3, #8
 800fd48:	2b08      	cmp	r3, #8
 800fd4a:	d10e      	bne.n	800fd6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f82f 	bl	800fdbe <UART_WaitOnFlagUntilTimeout>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd66:	2303      	movs	r3, #3
 800fd68:	e025      	b.n	800fdb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f003 0304 	and.w	r3, r3, #4
 800fd74:	2b04      	cmp	r3, #4
 800fd76:	d10e      	bne.n	800fd96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f819 	bl	800fdbe <UART_WaitOnFlagUntilTimeout>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e00f      	b.n	800fdb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2220      	movs	r2, #32
 800fd9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2220      	movs	r2, #32
 800fda2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b09c      	sub	sp, #112	; 0x70
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	60f8      	str	r0, [r7, #12]
 800fdc6:	60b9      	str	r1, [r7, #8]
 800fdc8:	603b      	str	r3, [r7, #0]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdce:	e0a9      	b.n	800ff24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fdd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd6:	f000 80a5 	beq.w	800ff24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fdda:	f7f7 ff79 	bl	8007cd0 <HAL_GetTick>
 800fdde:	4602      	mov	r2, r0
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d302      	bcc.n	800fdf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800fdea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d140      	bne.n	800fe72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf8:	e853 3f00 	ldrex	r3, [r3]
 800fdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fe04:	667b      	str	r3, [r7, #100]	; 0x64
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe16:	e841 2300 	strex	r3, r2, [r1]
 800fe1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fe1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1e6      	bne.n	800fdf0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3308      	adds	r3, #8
 800fe28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe2c:	e853 3f00 	ldrex	r3, [r3]
 800fe30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	f023 0301 	bic.w	r3, r3, #1
 800fe38:	663b      	str	r3, [r7, #96]	; 0x60
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3308      	adds	r3, #8
 800fe40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe42:	64ba      	str	r2, [r7, #72]	; 0x48
 800fe44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe4a:	e841 2300 	strex	r3, r2, [r1]
 800fe4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fe50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1e5      	bne.n	800fe22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2220      	movs	r2, #32
 800fe5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fe6e:	2303      	movs	r3, #3
 800fe70:	e069      	b.n	800ff46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f003 0304 	and.w	r3, r3, #4
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d051      	beq.n	800ff24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	69db      	ldr	r3, [r3, #28]
 800fe86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe8e:	d149      	bne.n	800ff24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea2:	e853 3f00 	ldrex	r3, [r3]
 800fea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800feae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	461a      	mov	r2, r3
 800feb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feb8:	637b      	str	r3, [r7, #52]	; 0x34
 800feba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800febc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800febe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fec0:	e841 2300 	strex	r3, r2, [r1]
 800fec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1e6      	bne.n	800fe9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3308      	adds	r3, #8
 800fed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	e853 3f00 	ldrex	r3, [r3]
 800feda:	613b      	str	r3, [r7, #16]
   return(result);
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	66bb      	str	r3, [r7, #104]	; 0x68
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	3308      	adds	r3, #8
 800feea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800feec:	623a      	str	r2, [r7, #32]
 800feee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef0:	69f9      	ldr	r1, [r7, #28]
 800fef2:	6a3a      	ldr	r2, [r7, #32]
 800fef4:	e841 2300 	strex	r3, r2, [r1]
 800fef8:	61bb      	str	r3, [r7, #24]
   return(result);
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1e5      	bne.n	800fecc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2220      	movs	r2, #32
 800ff04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2220      	movs	r2, #32
 800ff14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ff20:	2303      	movs	r3, #3
 800ff22:	e010      	b.n	800ff46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	69da      	ldr	r2, [r3, #28]
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	4013      	ands	r3, r2
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	bf0c      	ite	eq
 800ff34:	2301      	moveq	r3, #1
 800ff36:	2300      	movne	r3, #0
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	79fb      	ldrb	r3, [r7, #7]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	f43f af46 	beq.w	800fdd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3770      	adds	r7, #112	; 0x70
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b095      	sub	sp, #84	; 0x54
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff60:	e853 3f00 	ldrex	r3, [r3]
 800ff64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff76:	643b      	str	r3, [r7, #64]	; 0x40
 800ff78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff7e:	e841 2300 	strex	r3, r2, [r1]
 800ff82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1e6      	bne.n	800ff58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	3308      	adds	r3, #8
 800ff90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff92:	6a3b      	ldr	r3, [r7, #32]
 800ff94:	e853 3f00 	ldrex	r3, [r3]
 800ff98:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff9a:	69fa      	ldr	r2, [r7, #28]
 800ff9c:	4b1e      	ldr	r3, [pc, #120]	; (8010018 <UART_EndRxTransfer+0xc8>)
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3308      	adds	r3, #8
 800ffa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ffac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffb2:	e841 2300 	strex	r3, r2, [r1]
 800ffb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1e5      	bne.n	800ff8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d118      	bne.n	800fff8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	e853 3f00 	ldrex	r3, [r3]
 800ffd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	f023 0310 	bic.w	r3, r3, #16
 800ffda:	647b      	str	r3, [r7, #68]	; 0x44
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffe4:	61bb      	str	r3, [r7, #24]
 800ffe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe8:	6979      	ldr	r1, [r7, #20]
 800ffea:	69ba      	ldr	r2, [r7, #24]
 800ffec:	e841 2300 	strex	r3, r2, [r1]
 800fff0:	613b      	str	r3, [r7, #16]
   return(result);
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1e6      	bne.n	800ffc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2220      	movs	r2, #32
 800fffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801000c:	bf00      	nop
 801000e:	3754      	adds	r7, #84	; 0x54
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr
 8010018:	effffffe 	.word	0xeffffffe

0801001c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f7ff f854 	bl	800f0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010040:	bf00      	nop
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b088      	sub	sp, #32
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	e853 3f00 	ldrex	r3, [r3]
 801005c:	60bb      	str	r3, [r7, #8]
   return(result);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010064:	61fb      	str	r3, [r7, #28]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	61bb      	str	r3, [r7, #24]
 8010070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010072:	6979      	ldr	r1, [r7, #20]
 8010074:	69ba      	ldr	r2, [r7, #24]
 8010076:	e841 2300 	strex	r3, r2, [r1]
 801007a:	613b      	str	r3, [r7, #16]
   return(result);
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1e6      	bne.n	8010050 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2220      	movs	r2, #32
 8010086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2200      	movs	r2, #0
 801008e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff f81f 	bl	800f0d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010096:	bf00      	nop
 8010098:	3720      	adds	r7, #32
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801009e:	b480      	push	{r7}
 80100a0:	b083      	sub	sp, #12
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80100a6:	bf00      	nop
 80100a8:	370c      	adds	r7, #12
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr

080100b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b083      	sub	sp, #12
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80100ba:	bf00      	nop
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80100c6:	b480      	push	{r7}
 80100c8:	b083      	sub	sp, #12
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80100ce:	bf00      	nop
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80100da:	b480      	push	{r7}
 80100dc:	b085      	sub	sp, #20
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d101      	bne.n	80100f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80100ec:	2302      	movs	r3, #2
 80100ee:	e027      	b.n	8010140 <HAL_UARTEx_DisableFifoMode+0x66>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2224      	movs	r2, #36	; 0x24
 80100fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f022 0201 	bic.w	r2, r2, #1
 8010116:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801011e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2220      	movs	r2, #32
 8010132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801015c:	2b01      	cmp	r3, #1
 801015e:	d101      	bne.n	8010164 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010160:	2302      	movs	r3, #2
 8010162:	e02d      	b.n	80101c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2201      	movs	r2, #1
 8010168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2224      	movs	r2, #36	; 0x24
 8010170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f022 0201 	bic.w	r2, r2, #1
 801018a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	430a      	orrs	r2, r1
 801019e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f84f 	bl	8010244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2220      	movs	r2, #32
 80101b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d101      	bne.n	80101e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80101dc:	2302      	movs	r3, #2
 80101de:	e02d      	b.n	801023c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2201      	movs	r2, #1
 80101e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2224      	movs	r2, #36	; 0x24
 80101ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f022 0201 	bic.w	r2, r2, #1
 8010206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	683a      	ldr	r2, [r7, #0]
 8010218:	430a      	orrs	r2, r1
 801021a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f811 	bl	8010244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2220      	movs	r2, #32
 801022e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010250:	2b00      	cmp	r3, #0
 8010252:	d108      	bne.n	8010266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2201      	movs	r2, #1
 8010258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2201      	movs	r2, #1
 8010260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010264:	e031      	b.n	80102ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010266:	2310      	movs	r3, #16
 8010268:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801026a:	2310      	movs	r3, #16
 801026c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	0e5b      	lsrs	r3, r3, #25
 8010276:	b2db      	uxtb	r3, r3
 8010278:	f003 0307 	and.w	r3, r3, #7
 801027c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	0f5b      	lsrs	r3, r3, #29
 8010286:	b2db      	uxtb	r3, r3
 8010288:	f003 0307 	and.w	r3, r3, #7
 801028c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801028e:	7bbb      	ldrb	r3, [r7, #14]
 8010290:	7b3a      	ldrb	r2, [r7, #12]
 8010292:	4911      	ldr	r1, [pc, #68]	; (80102d8 <UARTEx_SetNbDataToProcess+0x94>)
 8010294:	5c8a      	ldrb	r2, [r1, r2]
 8010296:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801029a:	7b3a      	ldrb	r2, [r7, #12]
 801029c:	490f      	ldr	r1, [pc, #60]	; (80102dc <UARTEx_SetNbDataToProcess+0x98>)
 801029e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	7b7a      	ldrb	r2, [r7, #13]
 80102b0:	4909      	ldr	r1, [pc, #36]	; (80102d8 <UARTEx_SetNbDataToProcess+0x94>)
 80102b2:	5c8a      	ldrb	r2, [r1, r2]
 80102b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80102b8:	7b7a      	ldrb	r2, [r7, #13]
 80102ba:	4908      	ldr	r1, [pc, #32]	; (80102dc <UARTEx_SetNbDataToProcess+0x98>)
 80102bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102be:	fb93 f3f2 	sdiv	r3, r3, r2
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80102ca:	bf00      	nop
 80102cc:	3714      	adds	r7, #20
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	08012c44 	.word	0x08012c44
 80102dc:	08012c4c 	.word	0x08012c4c

080102e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80102e0:	b084      	sub	sp, #16
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b084      	sub	sp, #16
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
 80102ea:	f107 001c 	add.w	r0, r7, #28
 80102ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d120      	bne.n	801033a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68da      	ldr	r2, [r3, #12]
 8010308:	4b2a      	ldr	r3, [pc, #168]	; (80103b4 <USB_CoreInit+0xd4>)
 801030a:	4013      	ands	r3, r2
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801031c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801031e:	2b01      	cmp	r3, #1
 8010320:	d105      	bne.n	801032e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 faac 	bl	801088c <USB_CoreReset>
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]
 8010338:	e01a      	b.n	8010370 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 faa0 	bl	801088c <USB_CoreReset>
 801034c:	4603      	mov	r3, r0
 801034e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	639a      	str	r2, [r3, #56]	; 0x38
 8010362:	e005      	b.n	8010370 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010372:	2b01      	cmp	r3, #1
 8010374:	d116      	bne.n	80103a4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010384:	4b0c      	ldr	r3, [pc, #48]	; (80103b8 <USB_CoreInit+0xd8>)
 8010386:	4313      	orrs	r3, r2
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	f043 0206 	orr.w	r2, r3, #6
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	f043 0220 	orr.w	r2, r3, #32
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80103b0:	b004      	add	sp, #16
 80103b2:	4770      	bx	lr
 80103b4:	ffbdffbf 	.word	0xffbdffbf
 80103b8:	03ee0000 	.word	0x03ee0000

080103bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f023 0201 	bic.w	r2, r3, #1
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b084      	sub	sp, #16
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	460b      	mov	r3, r1
 80103e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80103ea:	2300      	movs	r3, #0
 80103ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80103fa:	78fb      	ldrb	r3, [r7, #3]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d115      	bne.n	801042c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801040c:	2001      	movs	r0, #1
 801040e:	f7f7 fc6b 	bl	8007ce8 <HAL_Delay>
      ms++;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	3301      	adds	r3, #1
 8010416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 fa29 	bl	8010870 <USB_GetMode>
 801041e:	4603      	mov	r3, r0
 8010420:	2b01      	cmp	r3, #1
 8010422:	d01e      	beq.n	8010462 <USB_SetCurrentMode+0x84>
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2b31      	cmp	r3, #49	; 0x31
 8010428:	d9f0      	bls.n	801040c <USB_SetCurrentMode+0x2e>
 801042a:	e01a      	b.n	8010462 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801042c:	78fb      	ldrb	r3, [r7, #3]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d115      	bne.n	801045e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801043e:	2001      	movs	r0, #1
 8010440:	f7f7 fc52 	bl	8007ce8 <HAL_Delay>
      ms++;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	3301      	adds	r3, #1
 8010448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fa10 	bl	8010870 <USB_GetMode>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d005      	beq.n	8010462 <USB_SetCurrentMode+0x84>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b31      	cmp	r3, #49	; 0x31
 801045a:	d9f0      	bls.n	801043e <USB_SetCurrentMode+0x60>
 801045c:	e001      	b.n	8010462 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801045e:	2301      	movs	r3, #1
 8010460:	e005      	b.n	801046e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2b32      	cmp	r3, #50	; 0x32
 8010466:	d101      	bne.n	801046c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	e000      	b.n	801046e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801046c:	2300      	movs	r3, #0
}
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010478:	b084      	sub	sp, #16
 801047a:	b580      	push	{r7, lr}
 801047c:	b086      	sub	sp, #24
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801048a:	2300      	movs	r3, #0
 801048c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010492:	2300      	movs	r3, #0
 8010494:	613b      	str	r3, [r7, #16]
 8010496:	e009      	b.n	80104ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	3340      	adds	r3, #64	; 0x40
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4413      	add	r3, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	3301      	adds	r3, #1
 80104aa:	613b      	str	r3, [r7, #16]
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	2b0e      	cmp	r3, #14
 80104b0:	d9f2      	bls.n	8010498 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80104b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d11c      	bne.n	80104f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104c6:	f043 0302 	orr.w	r3, r3, #2
 80104ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	e005      	b.n	80104fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010504:	461a      	mov	r2, r3
 8010506:	2300      	movs	r3, #0
 8010508:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010510:	4619      	mov	r1, r3
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010518:	461a      	mov	r2, r3
 801051a:	680b      	ldr	r3, [r1, #0]
 801051c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010520:	2b01      	cmp	r3, #1
 8010522:	d10c      	bne.n	801053e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d104      	bne.n	8010534 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801052a:	2100      	movs	r1, #0
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 f965 	bl	80107fc <USB_SetDevSpeed>
 8010532:	e008      	b.n	8010546 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010534:	2101      	movs	r1, #1
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 f960 	bl	80107fc <USB_SetDevSpeed>
 801053c:	e003      	b.n	8010546 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801053e:	2103      	movs	r1, #3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f95b 	bl	80107fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010546:	2110      	movs	r1, #16
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 f8f3 	bl	8010734 <USB_FlushTxFifo>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d001      	beq.n	8010558 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 f91f 	bl	801079c <USB_FlushRxFifo>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d001      	beq.n	8010568 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010564:	2301      	movs	r3, #1
 8010566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801056e:	461a      	mov	r2, r3
 8010570:	2300      	movs	r3, #0
 8010572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801057a:	461a      	mov	r2, r3
 801057c:	2300      	movs	r3, #0
 801057e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010586:	461a      	mov	r2, r3
 8010588:	2300      	movs	r3, #0
 801058a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801058c:	2300      	movs	r3, #0
 801058e:	613b      	str	r3, [r7, #16]
 8010590:	e043      	b.n	801061a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	015a      	lsls	r2, r3, #5
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	4413      	add	r3, r2
 801059a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105a8:	d118      	bne.n	80105dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10a      	bne.n	80105c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105bc:	461a      	mov	r2, r3
 80105be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80105c2:	6013      	str	r3, [r2, #0]
 80105c4:	e013      	b.n	80105ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	015a      	lsls	r2, r3, #5
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d2:	461a      	mov	r2, r3
 80105d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80105d8:	6013      	str	r3, [r2, #0]
 80105da:	e008      	b.n	80105ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	015a      	lsls	r2, r3, #5
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	4413      	add	r3, r2
 80105e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105e8:	461a      	mov	r2, r3
 80105ea:	2300      	movs	r3, #0
 80105ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	015a      	lsls	r2, r3, #5
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	4413      	add	r3, r2
 80105f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fa:	461a      	mov	r2, r3
 80105fc:	2300      	movs	r3, #0
 80105fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	015a      	lsls	r2, r3, #5
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	4413      	add	r3, r2
 8010608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060c:	461a      	mov	r2, r3
 801060e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	3301      	adds	r3, #1
 8010618:	613b      	str	r3, [r7, #16]
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	693a      	ldr	r2, [r7, #16]
 801061e:	429a      	cmp	r2, r3
 8010620:	d3b7      	bcc.n	8010592 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010622:	2300      	movs	r3, #0
 8010624:	613b      	str	r3, [r7, #16]
 8010626:	e043      	b.n	80106b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	015a      	lsls	r2, r3, #5
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	4413      	add	r3, r2
 8010630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801063a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801063e:	d118      	bne.n	8010672 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d10a      	bne.n	801065c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	015a      	lsls	r2, r3, #5
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	4413      	add	r3, r2
 801064e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010652:	461a      	mov	r2, r3
 8010654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	e013      	b.n	8010684 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	015a      	lsls	r2, r3, #5
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	4413      	add	r3, r2
 8010664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010668:	461a      	mov	r2, r3
 801066a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	e008      	b.n	8010684 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	015a      	lsls	r2, r3, #5
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	4413      	add	r3, r2
 801067a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801067e:	461a      	mov	r2, r3
 8010680:	2300      	movs	r3, #0
 8010682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010690:	461a      	mov	r2, r3
 8010692:	2300      	movs	r3, #0
 8010694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	015a      	lsls	r2, r3, #5
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	4413      	add	r3, r2
 801069e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a2:	461a      	mov	r2, r3
 80106a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80106a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	3301      	adds	r3, #1
 80106ae:	613b      	str	r3, [r7, #16]
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d3b7      	bcc.n	8010628 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106be:	691b      	ldr	r3, [r3, #16]
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80106d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80106da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d105      	bne.n	80106ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	699b      	ldr	r3, [r3, #24]
 80106e4:	f043 0210 	orr.w	r2, r3, #16
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	699a      	ldr	r2, [r3, #24]
 80106f0:	4b0e      	ldr	r3, [pc, #56]	; (801072c <USB_DevInit+0x2b4>)
 80106f2:	4313      	orrs	r3, r2
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80106f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d005      	beq.n	801070a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	f043 0208 	orr.w	r2, r3, #8
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801070a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801070c:	2b01      	cmp	r3, #1
 801070e:	d105      	bne.n	801071c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	699a      	ldr	r2, [r3, #24]
 8010714:	4b06      	ldr	r3, [pc, #24]	; (8010730 <USB_DevInit+0x2b8>)
 8010716:	4313      	orrs	r3, r2
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801071c:	7dfb      	ldrb	r3, [r7, #23]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010728:	b004      	add	sp, #16
 801072a:	4770      	bx	lr
 801072c:	803c3800 	.word	0x803c3800
 8010730:	40000004 	.word	0x40000004

08010734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801073e:	2300      	movs	r3, #0
 8010740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	3301      	adds	r3, #1
 8010746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	4a13      	ldr	r2, [pc, #76]	; (8010798 <USB_FlushTxFifo+0x64>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d901      	bls.n	8010754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010750:	2303      	movs	r3, #3
 8010752:	e01b      	b.n	801078c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	daf2      	bge.n	8010742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801075c:	2300      	movs	r3, #0
 801075e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	019b      	lsls	r3, r3, #6
 8010764:	f043 0220 	orr.w	r2, r3, #32
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	3301      	adds	r3, #1
 8010770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	4a08      	ldr	r2, [pc, #32]	; (8010798 <USB_FlushTxFifo+0x64>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d901      	bls.n	801077e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	e006      	b.n	801078c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	f003 0320 	and.w	r3, r3, #32
 8010786:	2b20      	cmp	r3, #32
 8010788:	d0f0      	beq.n	801076c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr
 8010798:	00030d40 	.word	0x00030d40

0801079c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801079c:	b480      	push	{r7}
 801079e:	b085      	sub	sp, #20
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80107a4:	2300      	movs	r3, #0
 80107a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	3301      	adds	r3, #1
 80107ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	4a11      	ldr	r2, [pc, #68]	; (80107f8 <USB_FlushRxFifo+0x5c>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d901      	bls.n	80107ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80107b6:	2303      	movs	r3, #3
 80107b8:	e018      	b.n	80107ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	691b      	ldr	r3, [r3, #16]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	daf2      	bge.n	80107a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80107c2:	2300      	movs	r3, #0
 80107c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2210      	movs	r2, #16
 80107ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	3301      	adds	r3, #1
 80107d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <USB_FlushRxFifo+0x5c>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d901      	bls.n	80107de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80107da:	2303      	movs	r3, #3
 80107dc:	e006      	b.n	80107ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f003 0310 	and.w	r3, r3, #16
 80107e6:	2b10      	cmp	r3, #16
 80107e8:	d0f0      	beq.n	80107cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	00030d40 	.word	0x00030d40

080107fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	460b      	mov	r3, r1
 8010806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	78fb      	ldrb	r3, [r7, #3]
 8010816:	68f9      	ldr	r1, [r7, #12]
 8010818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801081c:	4313      	orrs	r3, r2
 801081e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3714      	adds	r7, #20
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801082e:	b480      	push	{r7}
 8010830:	b085      	sub	sp, #20
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010848:	f023 0303 	bic.w	r3, r3, #3
 801084c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801085c:	f043 0302 	orr.w	r3, r3, #2
 8010860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3714      	adds	r7, #20
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	695b      	ldr	r3, [r3, #20]
 801087c:	f003 0301 	and.w	r3, r3, #1
}
 8010880:	4618      	mov	r0, r3
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010894:	2300      	movs	r3, #0
 8010896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	3301      	adds	r3, #1
 801089c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	4a13      	ldr	r2, [pc, #76]	; (80108f0 <USB_CoreReset+0x64>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d901      	bls.n	80108aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80108a6:	2303      	movs	r3, #3
 80108a8:	e01b      	b.n	80108e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	691b      	ldr	r3, [r3, #16]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	daf2      	bge.n	8010898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	691b      	ldr	r3, [r3, #16]
 80108ba:	f043 0201 	orr.w	r2, r3, #1
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	3301      	adds	r3, #1
 80108c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	4a09      	ldr	r2, [pc, #36]	; (80108f0 <USB_CoreReset+0x64>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d901      	bls.n	80108d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80108d0:	2303      	movs	r3, #3
 80108d2:	e006      	b.n	80108e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d0f0      	beq.n	80108c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80108e0:	2300      	movs	r3, #0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3714      	adds	r7, #20
 80108e6:	46bd      	mov	sp, r7
 80108e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	00030d40 	.word	0x00030d40

080108f4 <__errno>:
 80108f4:	4b01      	ldr	r3, [pc, #4]	; (80108fc <__errno+0x8>)
 80108f6:	6818      	ldr	r0, [r3, #0]
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	24000024 	.word	0x24000024

08010900 <__libc_init_array>:
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	4d0d      	ldr	r5, [pc, #52]	; (8010938 <__libc_init_array+0x38>)
 8010904:	4c0d      	ldr	r4, [pc, #52]	; (801093c <__libc_init_array+0x3c>)
 8010906:	1b64      	subs	r4, r4, r5
 8010908:	10a4      	asrs	r4, r4, #2
 801090a:	2600      	movs	r6, #0
 801090c:	42a6      	cmp	r6, r4
 801090e:	d109      	bne.n	8010924 <__libc_init_array+0x24>
 8010910:	4d0b      	ldr	r5, [pc, #44]	; (8010940 <__libc_init_array+0x40>)
 8010912:	4c0c      	ldr	r4, [pc, #48]	; (8010944 <__libc_init_array+0x44>)
 8010914:	f000 fc8e 	bl	8011234 <_init>
 8010918:	1b64      	subs	r4, r4, r5
 801091a:	10a4      	asrs	r4, r4, #2
 801091c:	2600      	movs	r6, #0
 801091e:	42a6      	cmp	r6, r4
 8010920:	d105      	bne.n	801092e <__libc_init_array+0x2e>
 8010922:	bd70      	pop	{r4, r5, r6, pc}
 8010924:	f855 3b04 	ldr.w	r3, [r5], #4
 8010928:	4798      	blx	r3
 801092a:	3601      	adds	r6, #1
 801092c:	e7ee      	b.n	801090c <__libc_init_array+0xc>
 801092e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010932:	4798      	blx	r3
 8010934:	3601      	adds	r6, #1
 8010936:	e7f2      	b.n	801091e <__libc_init_array+0x1e>
 8010938:	08012c90 	.word	0x08012c90
 801093c:	08012c90 	.word	0x08012c90
 8010940:	08012c90 	.word	0x08012c90
 8010944:	08012c94 	.word	0x08012c94

08010948 <memset>:
 8010948:	4402      	add	r2, r0
 801094a:	4603      	mov	r3, r0
 801094c:	4293      	cmp	r3, r2
 801094e:	d100      	bne.n	8010952 <memset+0xa>
 8010950:	4770      	bx	lr
 8010952:	f803 1b01 	strb.w	r1, [r3], #1
 8010956:	e7f9      	b.n	801094c <memset+0x4>

08010958 <_free_r>:
 8010958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801095a:	2900      	cmp	r1, #0
 801095c:	d044      	beq.n	80109e8 <_free_r+0x90>
 801095e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010962:	9001      	str	r0, [sp, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f1a1 0404 	sub.w	r4, r1, #4
 801096a:	bfb8      	it	lt
 801096c:	18e4      	addlt	r4, r4, r3
 801096e:	f000 f903 	bl	8010b78 <__malloc_lock>
 8010972:	4a1e      	ldr	r2, [pc, #120]	; (80109ec <_free_r+0x94>)
 8010974:	9801      	ldr	r0, [sp, #4]
 8010976:	6813      	ldr	r3, [r2, #0]
 8010978:	b933      	cbnz	r3, 8010988 <_free_r+0x30>
 801097a:	6063      	str	r3, [r4, #4]
 801097c:	6014      	str	r4, [r2, #0]
 801097e:	b003      	add	sp, #12
 8010980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010984:	f000 b8fe 	b.w	8010b84 <__malloc_unlock>
 8010988:	42a3      	cmp	r3, r4
 801098a:	d908      	bls.n	801099e <_free_r+0x46>
 801098c:	6825      	ldr	r5, [r4, #0]
 801098e:	1961      	adds	r1, r4, r5
 8010990:	428b      	cmp	r3, r1
 8010992:	bf01      	itttt	eq
 8010994:	6819      	ldreq	r1, [r3, #0]
 8010996:	685b      	ldreq	r3, [r3, #4]
 8010998:	1949      	addeq	r1, r1, r5
 801099a:	6021      	streq	r1, [r4, #0]
 801099c:	e7ed      	b.n	801097a <_free_r+0x22>
 801099e:	461a      	mov	r2, r3
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	b10b      	cbz	r3, 80109a8 <_free_r+0x50>
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	d9fa      	bls.n	801099e <_free_r+0x46>
 80109a8:	6811      	ldr	r1, [r2, #0]
 80109aa:	1855      	adds	r5, r2, r1
 80109ac:	42a5      	cmp	r5, r4
 80109ae:	d10b      	bne.n	80109c8 <_free_r+0x70>
 80109b0:	6824      	ldr	r4, [r4, #0]
 80109b2:	4421      	add	r1, r4
 80109b4:	1854      	adds	r4, r2, r1
 80109b6:	42a3      	cmp	r3, r4
 80109b8:	6011      	str	r1, [r2, #0]
 80109ba:	d1e0      	bne.n	801097e <_free_r+0x26>
 80109bc:	681c      	ldr	r4, [r3, #0]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	6053      	str	r3, [r2, #4]
 80109c2:	4421      	add	r1, r4
 80109c4:	6011      	str	r1, [r2, #0]
 80109c6:	e7da      	b.n	801097e <_free_r+0x26>
 80109c8:	d902      	bls.n	80109d0 <_free_r+0x78>
 80109ca:	230c      	movs	r3, #12
 80109cc:	6003      	str	r3, [r0, #0]
 80109ce:	e7d6      	b.n	801097e <_free_r+0x26>
 80109d0:	6825      	ldr	r5, [r4, #0]
 80109d2:	1961      	adds	r1, r4, r5
 80109d4:	428b      	cmp	r3, r1
 80109d6:	bf04      	itt	eq
 80109d8:	6819      	ldreq	r1, [r3, #0]
 80109da:	685b      	ldreq	r3, [r3, #4]
 80109dc:	6063      	str	r3, [r4, #4]
 80109de:	bf04      	itt	eq
 80109e0:	1949      	addeq	r1, r1, r5
 80109e2:	6021      	streq	r1, [r4, #0]
 80109e4:	6054      	str	r4, [r2, #4]
 80109e6:	e7ca      	b.n	801097e <_free_r+0x26>
 80109e8:	b003      	add	sp, #12
 80109ea:	bd30      	pop	{r4, r5, pc}
 80109ec:	24000eb8 	.word	0x24000eb8

080109f0 <sbrk_aligned>:
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	4e0e      	ldr	r6, [pc, #56]	; (8010a2c <sbrk_aligned+0x3c>)
 80109f4:	460c      	mov	r4, r1
 80109f6:	6831      	ldr	r1, [r6, #0]
 80109f8:	4605      	mov	r5, r0
 80109fa:	b911      	cbnz	r1, 8010a02 <sbrk_aligned+0x12>
 80109fc:	f000 f88c 	bl	8010b18 <_sbrk_r>
 8010a00:	6030      	str	r0, [r6, #0]
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	f000 f887 	bl	8010b18 <_sbrk_r>
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	d00a      	beq.n	8010a24 <sbrk_aligned+0x34>
 8010a0e:	1cc4      	adds	r4, r0, #3
 8010a10:	f024 0403 	bic.w	r4, r4, #3
 8010a14:	42a0      	cmp	r0, r4
 8010a16:	d007      	beq.n	8010a28 <sbrk_aligned+0x38>
 8010a18:	1a21      	subs	r1, r4, r0
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f000 f87c 	bl	8010b18 <_sbrk_r>
 8010a20:	3001      	adds	r0, #1
 8010a22:	d101      	bne.n	8010a28 <sbrk_aligned+0x38>
 8010a24:	f04f 34ff 	mov.w	r4, #4294967295
 8010a28:	4620      	mov	r0, r4
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	24000ebc 	.word	0x24000ebc

08010a30 <_malloc_r>:
 8010a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a34:	1ccd      	adds	r5, r1, #3
 8010a36:	f025 0503 	bic.w	r5, r5, #3
 8010a3a:	3508      	adds	r5, #8
 8010a3c:	2d0c      	cmp	r5, #12
 8010a3e:	bf38      	it	cc
 8010a40:	250c      	movcc	r5, #12
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	4607      	mov	r7, r0
 8010a46:	db01      	blt.n	8010a4c <_malloc_r+0x1c>
 8010a48:	42a9      	cmp	r1, r5
 8010a4a:	d905      	bls.n	8010a58 <_malloc_r+0x28>
 8010a4c:	230c      	movs	r3, #12
 8010a4e:	603b      	str	r3, [r7, #0]
 8010a50:	2600      	movs	r6, #0
 8010a52:	4630      	mov	r0, r6
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a58:	4e2e      	ldr	r6, [pc, #184]	; (8010b14 <_malloc_r+0xe4>)
 8010a5a:	f000 f88d 	bl	8010b78 <__malloc_lock>
 8010a5e:	6833      	ldr	r3, [r6, #0]
 8010a60:	461c      	mov	r4, r3
 8010a62:	bb34      	cbnz	r4, 8010ab2 <_malloc_r+0x82>
 8010a64:	4629      	mov	r1, r5
 8010a66:	4638      	mov	r0, r7
 8010a68:	f7ff ffc2 	bl	80109f0 <sbrk_aligned>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	4604      	mov	r4, r0
 8010a70:	d14d      	bne.n	8010b0e <_malloc_r+0xde>
 8010a72:	6834      	ldr	r4, [r6, #0]
 8010a74:	4626      	mov	r6, r4
 8010a76:	2e00      	cmp	r6, #0
 8010a78:	d140      	bne.n	8010afc <_malloc_r+0xcc>
 8010a7a:	6823      	ldr	r3, [r4, #0]
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4638      	mov	r0, r7
 8010a80:	eb04 0803 	add.w	r8, r4, r3
 8010a84:	f000 f848 	bl	8010b18 <_sbrk_r>
 8010a88:	4580      	cmp	r8, r0
 8010a8a:	d13a      	bne.n	8010b02 <_malloc_r+0xd2>
 8010a8c:	6821      	ldr	r1, [r4, #0]
 8010a8e:	3503      	adds	r5, #3
 8010a90:	1a6d      	subs	r5, r5, r1
 8010a92:	f025 0503 	bic.w	r5, r5, #3
 8010a96:	3508      	adds	r5, #8
 8010a98:	2d0c      	cmp	r5, #12
 8010a9a:	bf38      	it	cc
 8010a9c:	250c      	movcc	r5, #12
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	f7ff ffa5 	bl	80109f0 <sbrk_aligned>
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	d02b      	beq.n	8010b02 <_malloc_r+0xd2>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	442b      	add	r3, r5
 8010aae:	6023      	str	r3, [r4, #0]
 8010ab0:	e00e      	b.n	8010ad0 <_malloc_r+0xa0>
 8010ab2:	6822      	ldr	r2, [r4, #0]
 8010ab4:	1b52      	subs	r2, r2, r5
 8010ab6:	d41e      	bmi.n	8010af6 <_malloc_r+0xc6>
 8010ab8:	2a0b      	cmp	r2, #11
 8010aba:	d916      	bls.n	8010aea <_malloc_r+0xba>
 8010abc:	1961      	adds	r1, r4, r5
 8010abe:	42a3      	cmp	r3, r4
 8010ac0:	6025      	str	r5, [r4, #0]
 8010ac2:	bf18      	it	ne
 8010ac4:	6059      	strne	r1, [r3, #4]
 8010ac6:	6863      	ldr	r3, [r4, #4]
 8010ac8:	bf08      	it	eq
 8010aca:	6031      	streq	r1, [r6, #0]
 8010acc:	5162      	str	r2, [r4, r5]
 8010ace:	604b      	str	r3, [r1, #4]
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f104 060b 	add.w	r6, r4, #11
 8010ad6:	f000 f855 	bl	8010b84 <__malloc_unlock>
 8010ada:	f026 0607 	bic.w	r6, r6, #7
 8010ade:	1d23      	adds	r3, r4, #4
 8010ae0:	1af2      	subs	r2, r6, r3
 8010ae2:	d0b6      	beq.n	8010a52 <_malloc_r+0x22>
 8010ae4:	1b9b      	subs	r3, r3, r6
 8010ae6:	50a3      	str	r3, [r4, r2]
 8010ae8:	e7b3      	b.n	8010a52 <_malloc_r+0x22>
 8010aea:	6862      	ldr	r2, [r4, #4]
 8010aec:	42a3      	cmp	r3, r4
 8010aee:	bf0c      	ite	eq
 8010af0:	6032      	streq	r2, [r6, #0]
 8010af2:	605a      	strne	r2, [r3, #4]
 8010af4:	e7ec      	b.n	8010ad0 <_malloc_r+0xa0>
 8010af6:	4623      	mov	r3, r4
 8010af8:	6864      	ldr	r4, [r4, #4]
 8010afa:	e7b2      	b.n	8010a62 <_malloc_r+0x32>
 8010afc:	4634      	mov	r4, r6
 8010afe:	6876      	ldr	r6, [r6, #4]
 8010b00:	e7b9      	b.n	8010a76 <_malloc_r+0x46>
 8010b02:	230c      	movs	r3, #12
 8010b04:	603b      	str	r3, [r7, #0]
 8010b06:	4638      	mov	r0, r7
 8010b08:	f000 f83c 	bl	8010b84 <__malloc_unlock>
 8010b0c:	e7a1      	b.n	8010a52 <_malloc_r+0x22>
 8010b0e:	6025      	str	r5, [r4, #0]
 8010b10:	e7de      	b.n	8010ad0 <_malloc_r+0xa0>
 8010b12:	bf00      	nop
 8010b14:	24000eb8 	.word	0x24000eb8

08010b18 <_sbrk_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4d06      	ldr	r5, [pc, #24]	; (8010b34 <_sbrk_r+0x1c>)
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4608      	mov	r0, r1
 8010b22:	602b      	str	r3, [r5, #0]
 8010b24:	f7f6 ffee 	bl	8007b04 <_sbrk>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	d102      	bne.n	8010b32 <_sbrk_r+0x1a>
 8010b2c:	682b      	ldr	r3, [r5, #0]
 8010b2e:	b103      	cbz	r3, 8010b32 <_sbrk_r+0x1a>
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	bd38      	pop	{r3, r4, r5, pc}
 8010b34:	24000ec0 	.word	0x24000ec0

08010b38 <siprintf>:
 8010b38:	b40e      	push	{r1, r2, r3}
 8010b3a:	b500      	push	{lr}
 8010b3c:	b09c      	sub	sp, #112	; 0x70
 8010b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8010b40:	9002      	str	r0, [sp, #8]
 8010b42:	9006      	str	r0, [sp, #24]
 8010b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b48:	4809      	ldr	r0, [pc, #36]	; (8010b70 <siprintf+0x38>)
 8010b4a:	9107      	str	r1, [sp, #28]
 8010b4c:	9104      	str	r1, [sp, #16]
 8010b4e:	4909      	ldr	r1, [pc, #36]	; (8010b74 <siprintf+0x3c>)
 8010b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b54:	9105      	str	r1, [sp, #20]
 8010b56:	6800      	ldr	r0, [r0, #0]
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	a902      	add	r1, sp, #8
 8010b5c:	f000 f874 	bl	8010c48 <_svfiprintf_r>
 8010b60:	9b02      	ldr	r3, [sp, #8]
 8010b62:	2200      	movs	r2, #0
 8010b64:	701a      	strb	r2, [r3, #0]
 8010b66:	b01c      	add	sp, #112	; 0x70
 8010b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b6c:	b003      	add	sp, #12
 8010b6e:	4770      	bx	lr
 8010b70:	24000024 	.word	0x24000024
 8010b74:	ffff0208 	.word	0xffff0208

08010b78 <__malloc_lock>:
 8010b78:	4801      	ldr	r0, [pc, #4]	; (8010b80 <__malloc_lock+0x8>)
 8010b7a:	f000 baf9 	b.w	8011170 <__retarget_lock_acquire_recursive>
 8010b7e:	bf00      	nop
 8010b80:	24000ec4 	.word	0x24000ec4

08010b84 <__malloc_unlock>:
 8010b84:	4801      	ldr	r0, [pc, #4]	; (8010b8c <__malloc_unlock+0x8>)
 8010b86:	f000 baf4 	b.w	8011172 <__retarget_lock_release_recursive>
 8010b8a:	bf00      	nop
 8010b8c:	24000ec4 	.word	0x24000ec4

08010b90 <__ssputs_r>:
 8010b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b94:	688e      	ldr	r6, [r1, #8]
 8010b96:	429e      	cmp	r6, r3
 8010b98:	4682      	mov	sl, r0
 8010b9a:	460c      	mov	r4, r1
 8010b9c:	4690      	mov	r8, r2
 8010b9e:	461f      	mov	r7, r3
 8010ba0:	d838      	bhi.n	8010c14 <__ssputs_r+0x84>
 8010ba2:	898a      	ldrh	r2, [r1, #12]
 8010ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ba8:	d032      	beq.n	8010c10 <__ssputs_r+0x80>
 8010baa:	6825      	ldr	r5, [r4, #0]
 8010bac:	6909      	ldr	r1, [r1, #16]
 8010bae:	eba5 0901 	sub.w	r9, r5, r1
 8010bb2:	6965      	ldr	r5, [r4, #20]
 8010bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	444b      	add	r3, r9
 8010bc0:	106d      	asrs	r5, r5, #1
 8010bc2:	429d      	cmp	r5, r3
 8010bc4:	bf38      	it	cc
 8010bc6:	461d      	movcc	r5, r3
 8010bc8:	0553      	lsls	r3, r2, #21
 8010bca:	d531      	bpl.n	8010c30 <__ssputs_r+0xa0>
 8010bcc:	4629      	mov	r1, r5
 8010bce:	f7ff ff2f 	bl	8010a30 <_malloc_r>
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	b950      	cbnz	r0, 8010bec <__ssputs_r+0x5c>
 8010bd6:	230c      	movs	r3, #12
 8010bd8:	f8ca 3000 	str.w	r3, [sl]
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295
 8010be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bec:	6921      	ldr	r1, [r4, #16]
 8010bee:	464a      	mov	r2, r9
 8010bf0:	f000 fac0 	bl	8011174 <memcpy>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	6126      	str	r6, [r4, #16]
 8010c02:	6165      	str	r5, [r4, #20]
 8010c04:	444e      	add	r6, r9
 8010c06:	eba5 0509 	sub.w	r5, r5, r9
 8010c0a:	6026      	str	r6, [r4, #0]
 8010c0c:	60a5      	str	r5, [r4, #8]
 8010c0e:	463e      	mov	r6, r7
 8010c10:	42be      	cmp	r6, r7
 8010c12:	d900      	bls.n	8010c16 <__ssputs_r+0x86>
 8010c14:	463e      	mov	r6, r7
 8010c16:	6820      	ldr	r0, [r4, #0]
 8010c18:	4632      	mov	r2, r6
 8010c1a:	4641      	mov	r1, r8
 8010c1c:	f000 fab8 	bl	8011190 <memmove>
 8010c20:	68a3      	ldr	r3, [r4, #8]
 8010c22:	1b9b      	subs	r3, r3, r6
 8010c24:	60a3      	str	r3, [r4, #8]
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	4433      	add	r3, r6
 8010c2a:	6023      	str	r3, [r4, #0]
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	e7db      	b.n	8010be8 <__ssputs_r+0x58>
 8010c30:	462a      	mov	r2, r5
 8010c32:	f000 fac7 	bl	80111c4 <_realloc_r>
 8010c36:	4606      	mov	r6, r0
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d1e1      	bne.n	8010c00 <__ssputs_r+0x70>
 8010c3c:	6921      	ldr	r1, [r4, #16]
 8010c3e:	4650      	mov	r0, sl
 8010c40:	f7ff fe8a 	bl	8010958 <_free_r>
 8010c44:	e7c7      	b.n	8010bd6 <__ssputs_r+0x46>
	...

08010c48 <_svfiprintf_r>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	4698      	mov	r8, r3
 8010c4e:	898b      	ldrh	r3, [r1, #12]
 8010c50:	061b      	lsls	r3, r3, #24
 8010c52:	b09d      	sub	sp, #116	; 0x74
 8010c54:	4607      	mov	r7, r0
 8010c56:	460d      	mov	r5, r1
 8010c58:	4614      	mov	r4, r2
 8010c5a:	d50e      	bpl.n	8010c7a <_svfiprintf_r+0x32>
 8010c5c:	690b      	ldr	r3, [r1, #16]
 8010c5e:	b963      	cbnz	r3, 8010c7a <_svfiprintf_r+0x32>
 8010c60:	2140      	movs	r1, #64	; 0x40
 8010c62:	f7ff fee5 	bl	8010a30 <_malloc_r>
 8010c66:	6028      	str	r0, [r5, #0]
 8010c68:	6128      	str	r0, [r5, #16]
 8010c6a:	b920      	cbnz	r0, 8010c76 <_svfiprintf_r+0x2e>
 8010c6c:	230c      	movs	r3, #12
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	e0d1      	b.n	8010e1a <_svfiprintf_r+0x1d2>
 8010c76:	2340      	movs	r3, #64	; 0x40
 8010c78:	616b      	str	r3, [r5, #20]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c7e:	2320      	movs	r3, #32
 8010c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c88:	2330      	movs	r3, #48	; 0x30
 8010c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e34 <_svfiprintf_r+0x1ec>
 8010c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c92:	f04f 0901 	mov.w	r9, #1
 8010c96:	4623      	mov	r3, r4
 8010c98:	469a      	mov	sl, r3
 8010c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c9e:	b10a      	cbz	r2, 8010ca4 <_svfiprintf_r+0x5c>
 8010ca0:	2a25      	cmp	r2, #37	; 0x25
 8010ca2:	d1f9      	bne.n	8010c98 <_svfiprintf_r+0x50>
 8010ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca8:	d00b      	beq.n	8010cc2 <_svfiprintf_r+0x7a>
 8010caa:	465b      	mov	r3, fp
 8010cac:	4622      	mov	r2, r4
 8010cae:	4629      	mov	r1, r5
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	f7ff ff6d 	bl	8010b90 <__ssputs_r>
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	f000 80aa 	beq.w	8010e10 <_svfiprintf_r+0x1c8>
 8010cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cbe:	445a      	add	r2, fp
 8010cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f000 80a2 	beq.w	8010e10 <_svfiprintf_r+0x1c8>
 8010ccc:	2300      	movs	r3, #0
 8010cce:	f04f 32ff 	mov.w	r2, #4294967295
 8010cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cd6:	f10a 0a01 	add.w	sl, sl, #1
 8010cda:	9304      	str	r3, [sp, #16]
 8010cdc:	9307      	str	r3, [sp, #28]
 8010cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8010ce4:	4654      	mov	r4, sl
 8010ce6:	2205      	movs	r2, #5
 8010ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cec:	4851      	ldr	r0, [pc, #324]	; (8010e34 <_svfiprintf_r+0x1ec>)
 8010cee:	f7ef faf7 	bl	80002e0 <memchr>
 8010cf2:	9a04      	ldr	r2, [sp, #16]
 8010cf4:	b9d8      	cbnz	r0, 8010d2e <_svfiprintf_r+0xe6>
 8010cf6:	06d0      	lsls	r0, r2, #27
 8010cf8:	bf44      	itt	mi
 8010cfa:	2320      	movmi	r3, #32
 8010cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d00:	0711      	lsls	r1, r2, #28
 8010d02:	bf44      	itt	mi
 8010d04:	232b      	movmi	r3, #43	; 0x2b
 8010d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d10:	d015      	beq.n	8010d3e <_svfiprintf_r+0xf6>
 8010d12:	9a07      	ldr	r2, [sp, #28]
 8010d14:	4654      	mov	r4, sl
 8010d16:	2000      	movs	r0, #0
 8010d18:	f04f 0c0a 	mov.w	ip, #10
 8010d1c:	4621      	mov	r1, r4
 8010d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d22:	3b30      	subs	r3, #48	; 0x30
 8010d24:	2b09      	cmp	r3, #9
 8010d26:	d94e      	bls.n	8010dc6 <_svfiprintf_r+0x17e>
 8010d28:	b1b0      	cbz	r0, 8010d58 <_svfiprintf_r+0x110>
 8010d2a:	9207      	str	r2, [sp, #28]
 8010d2c:	e014      	b.n	8010d58 <_svfiprintf_r+0x110>
 8010d2e:	eba0 0308 	sub.w	r3, r0, r8
 8010d32:	fa09 f303 	lsl.w	r3, r9, r3
 8010d36:	4313      	orrs	r3, r2
 8010d38:	9304      	str	r3, [sp, #16]
 8010d3a:	46a2      	mov	sl, r4
 8010d3c:	e7d2      	b.n	8010ce4 <_svfiprintf_r+0x9c>
 8010d3e:	9b03      	ldr	r3, [sp, #12]
 8010d40:	1d19      	adds	r1, r3, #4
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	9103      	str	r1, [sp, #12]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	bfbb      	ittet	lt
 8010d4a:	425b      	neglt	r3, r3
 8010d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d50:	9307      	strge	r3, [sp, #28]
 8010d52:	9307      	strlt	r3, [sp, #28]
 8010d54:	bfb8      	it	lt
 8010d56:	9204      	strlt	r2, [sp, #16]
 8010d58:	7823      	ldrb	r3, [r4, #0]
 8010d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d5c:	d10c      	bne.n	8010d78 <_svfiprintf_r+0x130>
 8010d5e:	7863      	ldrb	r3, [r4, #1]
 8010d60:	2b2a      	cmp	r3, #42	; 0x2a
 8010d62:	d135      	bne.n	8010dd0 <_svfiprintf_r+0x188>
 8010d64:	9b03      	ldr	r3, [sp, #12]
 8010d66:	1d1a      	adds	r2, r3, #4
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	9203      	str	r2, [sp, #12]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	bfb8      	it	lt
 8010d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d74:	3402      	adds	r4, #2
 8010d76:	9305      	str	r3, [sp, #20]
 8010d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e44 <_svfiprintf_r+0x1fc>
 8010d7c:	7821      	ldrb	r1, [r4, #0]
 8010d7e:	2203      	movs	r2, #3
 8010d80:	4650      	mov	r0, sl
 8010d82:	f7ef faad 	bl	80002e0 <memchr>
 8010d86:	b140      	cbz	r0, 8010d9a <_svfiprintf_r+0x152>
 8010d88:	2340      	movs	r3, #64	; 0x40
 8010d8a:	eba0 000a 	sub.w	r0, r0, sl
 8010d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8010d92:	9b04      	ldr	r3, [sp, #16]
 8010d94:	4303      	orrs	r3, r0
 8010d96:	3401      	adds	r4, #1
 8010d98:	9304      	str	r3, [sp, #16]
 8010d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9e:	4826      	ldr	r0, [pc, #152]	; (8010e38 <_svfiprintf_r+0x1f0>)
 8010da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010da4:	2206      	movs	r2, #6
 8010da6:	f7ef fa9b 	bl	80002e0 <memchr>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d038      	beq.n	8010e20 <_svfiprintf_r+0x1d8>
 8010dae:	4b23      	ldr	r3, [pc, #140]	; (8010e3c <_svfiprintf_r+0x1f4>)
 8010db0:	bb1b      	cbnz	r3, 8010dfa <_svfiprintf_r+0x1b2>
 8010db2:	9b03      	ldr	r3, [sp, #12]
 8010db4:	3307      	adds	r3, #7
 8010db6:	f023 0307 	bic.w	r3, r3, #7
 8010dba:	3308      	adds	r3, #8
 8010dbc:	9303      	str	r3, [sp, #12]
 8010dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc0:	4433      	add	r3, r6
 8010dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010dc4:	e767      	b.n	8010c96 <_svfiprintf_r+0x4e>
 8010dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dca:	460c      	mov	r4, r1
 8010dcc:	2001      	movs	r0, #1
 8010dce:	e7a5      	b.n	8010d1c <_svfiprintf_r+0xd4>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	3401      	adds	r4, #1
 8010dd4:	9305      	str	r3, [sp, #20]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	f04f 0c0a 	mov.w	ip, #10
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010de2:	3a30      	subs	r2, #48	; 0x30
 8010de4:	2a09      	cmp	r2, #9
 8010de6:	d903      	bls.n	8010df0 <_svfiprintf_r+0x1a8>
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d0c5      	beq.n	8010d78 <_svfiprintf_r+0x130>
 8010dec:	9105      	str	r1, [sp, #20]
 8010dee:	e7c3      	b.n	8010d78 <_svfiprintf_r+0x130>
 8010df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010df4:	4604      	mov	r4, r0
 8010df6:	2301      	movs	r3, #1
 8010df8:	e7f0      	b.n	8010ddc <_svfiprintf_r+0x194>
 8010dfa:	ab03      	add	r3, sp, #12
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	462a      	mov	r2, r5
 8010e00:	4b0f      	ldr	r3, [pc, #60]	; (8010e40 <_svfiprintf_r+0x1f8>)
 8010e02:	a904      	add	r1, sp, #16
 8010e04:	4638      	mov	r0, r7
 8010e06:	f3af 8000 	nop.w
 8010e0a:	1c42      	adds	r2, r0, #1
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	d1d6      	bne.n	8010dbe <_svfiprintf_r+0x176>
 8010e10:	89ab      	ldrh	r3, [r5, #12]
 8010e12:	065b      	lsls	r3, r3, #25
 8010e14:	f53f af2c 	bmi.w	8010c70 <_svfiprintf_r+0x28>
 8010e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e1a:	b01d      	add	sp, #116	; 0x74
 8010e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e20:	ab03      	add	r3, sp, #12
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	462a      	mov	r2, r5
 8010e26:	4b06      	ldr	r3, [pc, #24]	; (8010e40 <_svfiprintf_r+0x1f8>)
 8010e28:	a904      	add	r1, sp, #16
 8010e2a:	4638      	mov	r0, r7
 8010e2c:	f000 f87a 	bl	8010f24 <_printf_i>
 8010e30:	e7eb      	b.n	8010e0a <_svfiprintf_r+0x1c2>
 8010e32:	bf00      	nop
 8010e34:	08012c54 	.word	0x08012c54
 8010e38:	08012c5e 	.word	0x08012c5e
 8010e3c:	00000000 	.word	0x00000000
 8010e40:	08010b91 	.word	0x08010b91
 8010e44:	08012c5a 	.word	0x08012c5a

08010e48 <_printf_common>:
 8010e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e4c:	4616      	mov	r6, r2
 8010e4e:	4699      	mov	r9, r3
 8010e50:	688a      	ldr	r2, [r1, #8]
 8010e52:	690b      	ldr	r3, [r1, #16]
 8010e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	bfb8      	it	lt
 8010e5c:	4613      	movlt	r3, r2
 8010e5e:	6033      	str	r3, [r6, #0]
 8010e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e64:	4607      	mov	r7, r0
 8010e66:	460c      	mov	r4, r1
 8010e68:	b10a      	cbz	r2, 8010e6e <_printf_common+0x26>
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	6033      	str	r3, [r6, #0]
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	0699      	lsls	r1, r3, #26
 8010e72:	bf42      	ittt	mi
 8010e74:	6833      	ldrmi	r3, [r6, #0]
 8010e76:	3302      	addmi	r3, #2
 8010e78:	6033      	strmi	r3, [r6, #0]
 8010e7a:	6825      	ldr	r5, [r4, #0]
 8010e7c:	f015 0506 	ands.w	r5, r5, #6
 8010e80:	d106      	bne.n	8010e90 <_printf_common+0x48>
 8010e82:	f104 0a19 	add.w	sl, r4, #25
 8010e86:	68e3      	ldr	r3, [r4, #12]
 8010e88:	6832      	ldr	r2, [r6, #0]
 8010e8a:	1a9b      	subs	r3, r3, r2
 8010e8c:	42ab      	cmp	r3, r5
 8010e8e:	dc26      	bgt.n	8010ede <_printf_common+0x96>
 8010e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e94:	1e13      	subs	r3, r2, #0
 8010e96:	6822      	ldr	r2, [r4, #0]
 8010e98:	bf18      	it	ne
 8010e9a:	2301      	movne	r3, #1
 8010e9c:	0692      	lsls	r2, r2, #26
 8010e9e:	d42b      	bmi.n	8010ef8 <_printf_common+0xb0>
 8010ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ea4:	4649      	mov	r1, r9
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	47c0      	blx	r8
 8010eaa:	3001      	adds	r0, #1
 8010eac:	d01e      	beq.n	8010eec <_printf_common+0xa4>
 8010eae:	6823      	ldr	r3, [r4, #0]
 8010eb0:	68e5      	ldr	r5, [r4, #12]
 8010eb2:	6832      	ldr	r2, [r6, #0]
 8010eb4:	f003 0306 	and.w	r3, r3, #6
 8010eb8:	2b04      	cmp	r3, #4
 8010eba:	bf08      	it	eq
 8010ebc:	1aad      	subeq	r5, r5, r2
 8010ebe:	68a3      	ldr	r3, [r4, #8]
 8010ec0:	6922      	ldr	r2, [r4, #16]
 8010ec2:	bf0c      	ite	eq
 8010ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ec8:	2500      	movne	r5, #0
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	bfc4      	itt	gt
 8010ece:	1a9b      	subgt	r3, r3, r2
 8010ed0:	18ed      	addgt	r5, r5, r3
 8010ed2:	2600      	movs	r6, #0
 8010ed4:	341a      	adds	r4, #26
 8010ed6:	42b5      	cmp	r5, r6
 8010ed8:	d11a      	bne.n	8010f10 <_printf_common+0xc8>
 8010eda:	2000      	movs	r0, #0
 8010edc:	e008      	b.n	8010ef0 <_printf_common+0xa8>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	4652      	mov	r2, sl
 8010ee2:	4649      	mov	r1, r9
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	47c0      	blx	r8
 8010ee8:	3001      	adds	r0, #1
 8010eea:	d103      	bne.n	8010ef4 <_printf_common+0xac>
 8010eec:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef4:	3501      	adds	r5, #1
 8010ef6:	e7c6      	b.n	8010e86 <_printf_common+0x3e>
 8010ef8:	18e1      	adds	r1, r4, r3
 8010efa:	1c5a      	adds	r2, r3, #1
 8010efc:	2030      	movs	r0, #48	; 0x30
 8010efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f02:	4422      	add	r2, r4
 8010f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f0c:	3302      	adds	r3, #2
 8010f0e:	e7c7      	b.n	8010ea0 <_printf_common+0x58>
 8010f10:	2301      	movs	r3, #1
 8010f12:	4622      	mov	r2, r4
 8010f14:	4649      	mov	r1, r9
 8010f16:	4638      	mov	r0, r7
 8010f18:	47c0      	blx	r8
 8010f1a:	3001      	adds	r0, #1
 8010f1c:	d0e6      	beq.n	8010eec <_printf_common+0xa4>
 8010f1e:	3601      	adds	r6, #1
 8010f20:	e7d9      	b.n	8010ed6 <_printf_common+0x8e>
	...

08010f24 <_printf_i>:
 8010f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f28:	7e0f      	ldrb	r7, [r1, #24]
 8010f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f2c:	2f78      	cmp	r7, #120	; 0x78
 8010f2e:	4691      	mov	r9, r2
 8010f30:	4680      	mov	r8, r0
 8010f32:	460c      	mov	r4, r1
 8010f34:	469a      	mov	sl, r3
 8010f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f3a:	d807      	bhi.n	8010f4c <_printf_i+0x28>
 8010f3c:	2f62      	cmp	r7, #98	; 0x62
 8010f3e:	d80a      	bhi.n	8010f56 <_printf_i+0x32>
 8010f40:	2f00      	cmp	r7, #0
 8010f42:	f000 80d8 	beq.w	80110f6 <_printf_i+0x1d2>
 8010f46:	2f58      	cmp	r7, #88	; 0x58
 8010f48:	f000 80a3 	beq.w	8011092 <_printf_i+0x16e>
 8010f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f54:	e03a      	b.n	8010fcc <_printf_i+0xa8>
 8010f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f5a:	2b15      	cmp	r3, #21
 8010f5c:	d8f6      	bhi.n	8010f4c <_printf_i+0x28>
 8010f5e:	a101      	add	r1, pc, #4	; (adr r1, 8010f64 <_printf_i+0x40>)
 8010f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f64:	08010fbd 	.word	0x08010fbd
 8010f68:	08010fd1 	.word	0x08010fd1
 8010f6c:	08010f4d 	.word	0x08010f4d
 8010f70:	08010f4d 	.word	0x08010f4d
 8010f74:	08010f4d 	.word	0x08010f4d
 8010f78:	08010f4d 	.word	0x08010f4d
 8010f7c:	08010fd1 	.word	0x08010fd1
 8010f80:	08010f4d 	.word	0x08010f4d
 8010f84:	08010f4d 	.word	0x08010f4d
 8010f88:	08010f4d 	.word	0x08010f4d
 8010f8c:	08010f4d 	.word	0x08010f4d
 8010f90:	080110dd 	.word	0x080110dd
 8010f94:	08011001 	.word	0x08011001
 8010f98:	080110bf 	.word	0x080110bf
 8010f9c:	08010f4d 	.word	0x08010f4d
 8010fa0:	08010f4d 	.word	0x08010f4d
 8010fa4:	080110ff 	.word	0x080110ff
 8010fa8:	08010f4d 	.word	0x08010f4d
 8010fac:	08011001 	.word	0x08011001
 8010fb0:	08010f4d 	.word	0x08010f4d
 8010fb4:	08010f4d 	.word	0x08010f4d
 8010fb8:	080110c7 	.word	0x080110c7
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	1d1a      	adds	r2, r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	602a      	str	r2, [r5, #0]
 8010fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e0a3      	b.n	8011118 <_printf_i+0x1f4>
 8010fd0:	6820      	ldr	r0, [r4, #0]
 8010fd2:	6829      	ldr	r1, [r5, #0]
 8010fd4:	0606      	lsls	r6, r0, #24
 8010fd6:	f101 0304 	add.w	r3, r1, #4
 8010fda:	d50a      	bpl.n	8010ff2 <_printf_i+0xce>
 8010fdc:	680e      	ldr	r6, [r1, #0]
 8010fde:	602b      	str	r3, [r5, #0]
 8010fe0:	2e00      	cmp	r6, #0
 8010fe2:	da03      	bge.n	8010fec <_printf_i+0xc8>
 8010fe4:	232d      	movs	r3, #45	; 0x2d
 8010fe6:	4276      	negs	r6, r6
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fec:	485e      	ldr	r0, [pc, #376]	; (8011168 <_printf_i+0x244>)
 8010fee:	230a      	movs	r3, #10
 8010ff0:	e019      	b.n	8011026 <_printf_i+0x102>
 8010ff2:	680e      	ldr	r6, [r1, #0]
 8010ff4:	602b      	str	r3, [r5, #0]
 8010ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ffa:	bf18      	it	ne
 8010ffc:	b236      	sxthne	r6, r6
 8010ffe:	e7ef      	b.n	8010fe0 <_printf_i+0xbc>
 8011000:	682b      	ldr	r3, [r5, #0]
 8011002:	6820      	ldr	r0, [r4, #0]
 8011004:	1d19      	adds	r1, r3, #4
 8011006:	6029      	str	r1, [r5, #0]
 8011008:	0601      	lsls	r1, r0, #24
 801100a:	d501      	bpl.n	8011010 <_printf_i+0xec>
 801100c:	681e      	ldr	r6, [r3, #0]
 801100e:	e002      	b.n	8011016 <_printf_i+0xf2>
 8011010:	0646      	lsls	r6, r0, #25
 8011012:	d5fb      	bpl.n	801100c <_printf_i+0xe8>
 8011014:	881e      	ldrh	r6, [r3, #0]
 8011016:	4854      	ldr	r0, [pc, #336]	; (8011168 <_printf_i+0x244>)
 8011018:	2f6f      	cmp	r7, #111	; 0x6f
 801101a:	bf0c      	ite	eq
 801101c:	2308      	moveq	r3, #8
 801101e:	230a      	movne	r3, #10
 8011020:	2100      	movs	r1, #0
 8011022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011026:	6865      	ldr	r5, [r4, #4]
 8011028:	60a5      	str	r5, [r4, #8]
 801102a:	2d00      	cmp	r5, #0
 801102c:	bfa2      	ittt	ge
 801102e:	6821      	ldrge	r1, [r4, #0]
 8011030:	f021 0104 	bicge.w	r1, r1, #4
 8011034:	6021      	strge	r1, [r4, #0]
 8011036:	b90e      	cbnz	r6, 801103c <_printf_i+0x118>
 8011038:	2d00      	cmp	r5, #0
 801103a:	d04d      	beq.n	80110d8 <_printf_i+0x1b4>
 801103c:	4615      	mov	r5, r2
 801103e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011042:	fb03 6711 	mls	r7, r3, r1, r6
 8011046:	5dc7      	ldrb	r7, [r0, r7]
 8011048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801104c:	4637      	mov	r7, r6
 801104e:	42bb      	cmp	r3, r7
 8011050:	460e      	mov	r6, r1
 8011052:	d9f4      	bls.n	801103e <_printf_i+0x11a>
 8011054:	2b08      	cmp	r3, #8
 8011056:	d10b      	bne.n	8011070 <_printf_i+0x14c>
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	07de      	lsls	r6, r3, #31
 801105c:	d508      	bpl.n	8011070 <_printf_i+0x14c>
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	6861      	ldr	r1, [r4, #4]
 8011062:	4299      	cmp	r1, r3
 8011064:	bfde      	ittt	le
 8011066:	2330      	movle	r3, #48	; 0x30
 8011068:	f805 3c01 	strble.w	r3, [r5, #-1]
 801106c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011070:	1b52      	subs	r2, r2, r5
 8011072:	6122      	str	r2, [r4, #16]
 8011074:	f8cd a000 	str.w	sl, [sp]
 8011078:	464b      	mov	r3, r9
 801107a:	aa03      	add	r2, sp, #12
 801107c:	4621      	mov	r1, r4
 801107e:	4640      	mov	r0, r8
 8011080:	f7ff fee2 	bl	8010e48 <_printf_common>
 8011084:	3001      	adds	r0, #1
 8011086:	d14c      	bne.n	8011122 <_printf_i+0x1fe>
 8011088:	f04f 30ff 	mov.w	r0, #4294967295
 801108c:	b004      	add	sp, #16
 801108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011092:	4835      	ldr	r0, [pc, #212]	; (8011168 <_printf_i+0x244>)
 8011094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011098:	6829      	ldr	r1, [r5, #0]
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	f851 6b04 	ldr.w	r6, [r1], #4
 80110a0:	6029      	str	r1, [r5, #0]
 80110a2:	061d      	lsls	r5, r3, #24
 80110a4:	d514      	bpl.n	80110d0 <_printf_i+0x1ac>
 80110a6:	07df      	lsls	r7, r3, #31
 80110a8:	bf44      	itt	mi
 80110aa:	f043 0320 	orrmi.w	r3, r3, #32
 80110ae:	6023      	strmi	r3, [r4, #0]
 80110b0:	b91e      	cbnz	r6, 80110ba <_printf_i+0x196>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	f023 0320 	bic.w	r3, r3, #32
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	2310      	movs	r3, #16
 80110bc:	e7b0      	b.n	8011020 <_printf_i+0xfc>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	f043 0320 	orr.w	r3, r3, #32
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	2378      	movs	r3, #120	; 0x78
 80110c8:	4828      	ldr	r0, [pc, #160]	; (801116c <_printf_i+0x248>)
 80110ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110ce:	e7e3      	b.n	8011098 <_printf_i+0x174>
 80110d0:	0659      	lsls	r1, r3, #25
 80110d2:	bf48      	it	mi
 80110d4:	b2b6      	uxthmi	r6, r6
 80110d6:	e7e6      	b.n	80110a6 <_printf_i+0x182>
 80110d8:	4615      	mov	r5, r2
 80110da:	e7bb      	b.n	8011054 <_printf_i+0x130>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	6826      	ldr	r6, [r4, #0]
 80110e0:	6961      	ldr	r1, [r4, #20]
 80110e2:	1d18      	adds	r0, r3, #4
 80110e4:	6028      	str	r0, [r5, #0]
 80110e6:	0635      	lsls	r5, r6, #24
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	d501      	bpl.n	80110f0 <_printf_i+0x1cc>
 80110ec:	6019      	str	r1, [r3, #0]
 80110ee:	e002      	b.n	80110f6 <_printf_i+0x1d2>
 80110f0:	0670      	lsls	r0, r6, #25
 80110f2:	d5fb      	bpl.n	80110ec <_printf_i+0x1c8>
 80110f4:	8019      	strh	r1, [r3, #0]
 80110f6:	2300      	movs	r3, #0
 80110f8:	6123      	str	r3, [r4, #16]
 80110fa:	4615      	mov	r5, r2
 80110fc:	e7ba      	b.n	8011074 <_printf_i+0x150>
 80110fe:	682b      	ldr	r3, [r5, #0]
 8011100:	1d1a      	adds	r2, r3, #4
 8011102:	602a      	str	r2, [r5, #0]
 8011104:	681d      	ldr	r5, [r3, #0]
 8011106:	6862      	ldr	r2, [r4, #4]
 8011108:	2100      	movs	r1, #0
 801110a:	4628      	mov	r0, r5
 801110c:	f7ef f8e8 	bl	80002e0 <memchr>
 8011110:	b108      	cbz	r0, 8011116 <_printf_i+0x1f2>
 8011112:	1b40      	subs	r0, r0, r5
 8011114:	6060      	str	r0, [r4, #4]
 8011116:	6863      	ldr	r3, [r4, #4]
 8011118:	6123      	str	r3, [r4, #16]
 801111a:	2300      	movs	r3, #0
 801111c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011120:	e7a8      	b.n	8011074 <_printf_i+0x150>
 8011122:	6923      	ldr	r3, [r4, #16]
 8011124:	462a      	mov	r2, r5
 8011126:	4649      	mov	r1, r9
 8011128:	4640      	mov	r0, r8
 801112a:	47d0      	blx	sl
 801112c:	3001      	adds	r0, #1
 801112e:	d0ab      	beq.n	8011088 <_printf_i+0x164>
 8011130:	6823      	ldr	r3, [r4, #0]
 8011132:	079b      	lsls	r3, r3, #30
 8011134:	d413      	bmi.n	801115e <_printf_i+0x23a>
 8011136:	68e0      	ldr	r0, [r4, #12]
 8011138:	9b03      	ldr	r3, [sp, #12]
 801113a:	4298      	cmp	r0, r3
 801113c:	bfb8      	it	lt
 801113e:	4618      	movlt	r0, r3
 8011140:	e7a4      	b.n	801108c <_printf_i+0x168>
 8011142:	2301      	movs	r3, #1
 8011144:	4632      	mov	r2, r6
 8011146:	4649      	mov	r1, r9
 8011148:	4640      	mov	r0, r8
 801114a:	47d0      	blx	sl
 801114c:	3001      	adds	r0, #1
 801114e:	d09b      	beq.n	8011088 <_printf_i+0x164>
 8011150:	3501      	adds	r5, #1
 8011152:	68e3      	ldr	r3, [r4, #12]
 8011154:	9903      	ldr	r1, [sp, #12]
 8011156:	1a5b      	subs	r3, r3, r1
 8011158:	42ab      	cmp	r3, r5
 801115a:	dcf2      	bgt.n	8011142 <_printf_i+0x21e>
 801115c:	e7eb      	b.n	8011136 <_printf_i+0x212>
 801115e:	2500      	movs	r5, #0
 8011160:	f104 0619 	add.w	r6, r4, #25
 8011164:	e7f5      	b.n	8011152 <_printf_i+0x22e>
 8011166:	bf00      	nop
 8011168:	08012c65 	.word	0x08012c65
 801116c:	08012c76 	.word	0x08012c76

08011170 <__retarget_lock_acquire_recursive>:
 8011170:	4770      	bx	lr

08011172 <__retarget_lock_release_recursive>:
 8011172:	4770      	bx	lr

08011174 <memcpy>:
 8011174:	440a      	add	r2, r1
 8011176:	4291      	cmp	r1, r2
 8011178:	f100 33ff 	add.w	r3, r0, #4294967295
 801117c:	d100      	bne.n	8011180 <memcpy+0xc>
 801117e:	4770      	bx	lr
 8011180:	b510      	push	{r4, lr}
 8011182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011186:	f803 4f01 	strb.w	r4, [r3, #1]!
 801118a:	4291      	cmp	r1, r2
 801118c:	d1f9      	bne.n	8011182 <memcpy+0xe>
 801118e:	bd10      	pop	{r4, pc}

08011190 <memmove>:
 8011190:	4288      	cmp	r0, r1
 8011192:	b510      	push	{r4, lr}
 8011194:	eb01 0402 	add.w	r4, r1, r2
 8011198:	d902      	bls.n	80111a0 <memmove+0x10>
 801119a:	4284      	cmp	r4, r0
 801119c:	4623      	mov	r3, r4
 801119e:	d807      	bhi.n	80111b0 <memmove+0x20>
 80111a0:	1e43      	subs	r3, r0, #1
 80111a2:	42a1      	cmp	r1, r4
 80111a4:	d008      	beq.n	80111b8 <memmove+0x28>
 80111a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111ae:	e7f8      	b.n	80111a2 <memmove+0x12>
 80111b0:	4402      	add	r2, r0
 80111b2:	4601      	mov	r1, r0
 80111b4:	428a      	cmp	r2, r1
 80111b6:	d100      	bne.n	80111ba <memmove+0x2a>
 80111b8:	bd10      	pop	{r4, pc}
 80111ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111c2:	e7f7      	b.n	80111b4 <memmove+0x24>

080111c4 <_realloc_r>:
 80111c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c8:	4680      	mov	r8, r0
 80111ca:	4614      	mov	r4, r2
 80111cc:	460e      	mov	r6, r1
 80111ce:	b921      	cbnz	r1, 80111da <_realloc_r+0x16>
 80111d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111d4:	4611      	mov	r1, r2
 80111d6:	f7ff bc2b 	b.w	8010a30 <_malloc_r>
 80111da:	b92a      	cbnz	r2, 80111e8 <_realloc_r+0x24>
 80111dc:	f7ff fbbc 	bl	8010958 <_free_r>
 80111e0:	4625      	mov	r5, r4
 80111e2:	4628      	mov	r0, r5
 80111e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111e8:	f000 f81b 	bl	8011222 <_malloc_usable_size_r>
 80111ec:	4284      	cmp	r4, r0
 80111ee:	4607      	mov	r7, r0
 80111f0:	d802      	bhi.n	80111f8 <_realloc_r+0x34>
 80111f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111f6:	d812      	bhi.n	801121e <_realloc_r+0x5a>
 80111f8:	4621      	mov	r1, r4
 80111fa:	4640      	mov	r0, r8
 80111fc:	f7ff fc18 	bl	8010a30 <_malloc_r>
 8011200:	4605      	mov	r5, r0
 8011202:	2800      	cmp	r0, #0
 8011204:	d0ed      	beq.n	80111e2 <_realloc_r+0x1e>
 8011206:	42bc      	cmp	r4, r7
 8011208:	4622      	mov	r2, r4
 801120a:	4631      	mov	r1, r6
 801120c:	bf28      	it	cs
 801120e:	463a      	movcs	r2, r7
 8011210:	f7ff ffb0 	bl	8011174 <memcpy>
 8011214:	4631      	mov	r1, r6
 8011216:	4640      	mov	r0, r8
 8011218:	f7ff fb9e 	bl	8010958 <_free_r>
 801121c:	e7e1      	b.n	80111e2 <_realloc_r+0x1e>
 801121e:	4635      	mov	r5, r6
 8011220:	e7df      	b.n	80111e2 <_realloc_r+0x1e>

08011222 <_malloc_usable_size_r>:
 8011222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011226:	1f18      	subs	r0, r3, #4
 8011228:	2b00      	cmp	r3, #0
 801122a:	bfbc      	itt	lt
 801122c:	580b      	ldrlt	r3, [r1, r0]
 801122e:	18c0      	addlt	r0, r0, r3
 8011230:	4770      	bx	lr
	...

08011234 <_init>:
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	bf00      	nop
 8011238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801123a:	bc08      	pop	{r3}
 801123c:	469e      	mov	lr, r3
 801123e:	4770      	bx	lr

08011240 <_fini>:
 8011240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011242:	bf00      	nop
 8011244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011246:	bc08      	pop	{r3}
 8011248:	469e      	mov	lr, r3
 801124a:	4770      	bx	lr
