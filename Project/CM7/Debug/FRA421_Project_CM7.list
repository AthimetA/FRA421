
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d570  0800d570  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d570  0800d570  0001d570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d578  0800d578  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d578  0800d578  0001d578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d57c  0800d57c  0001d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d604  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d664  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800d6c4  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800d6c4  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f97e  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003678  00000000  00000000  0003faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001458  00000000  00000000  00043168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001380  00000000  00000000  000445c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  00045940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c376  00000000  00000000  00081ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187223  00000000  00000000  0009e217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0022543a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059ec  00000000  00000000  0022548c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bebc 	.word	0x0800bebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800bebc 	.word	0x0800bebc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b088      	sub	sp, #32
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3314      	adds	r3, #20
 80006fa:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	76fb      	strb	r3, [r7, #27]
 8000700:	e00b      	b.n	800071a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	69f9      	ldr	r1, [r7, #28]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffbb 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	330c      	adds	r3, #12
 8000712:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000714:	7efb      	ldrb	r3, [r7, #27]
 8000716:	3301      	adds	r3, #1
 8000718:	76fb      	strb	r3, [r7, #27]
 800071a:	7efb      	ldrb	r3, [r7, #27]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d9f0      	bls.n	8000702 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b088      	sub	sp, #32
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000744:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000746:	2300      	movs	r3, #0
 8000748:	76fb      	strb	r3, [r7, #27]
 800074a:	e00b      	b.n	8000764 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff96 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	330c      	adds	r3, #12
 800075c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	3301      	adds	r3, #1
 8000762:	76fb      	strb	r3, [r7, #27]
 8000764:	7efb      	ldrb	r3, [r7, #27]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d9f0      	bls.n	800074c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800078e:	61fb      	str	r3, [r7, #28]

		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000790:	2300      	movs	r3, #0
 8000792:	76fb      	strb	r3, [r7, #27]
 8000794:	e00b      	b.n	80007ae <YUGIOH_Clear_Card_All+0x3a>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	69f9      	ldr	r1, [r7, #28]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff71 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	330c      	adds	r3, #12
 80007a6:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007a8:	7efb      	ldrb	r3, [r7, #27]
 80007aa:	3301      	adds	r3, #1
 80007ac:	76fb      	strb	r3, [r7, #27]
 80007ae:	7efb      	ldrb	r3, [r7, #27]
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d9f0      	bls.n	8000796 <YUGIOH_Clear_Card_All+0x22>

		}
		ptrYUGIOHCard = player->GY;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	334c      	adds	r3, #76	; 0x4c
 80007b8:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007ba:	2300      	movs	r3, #0
 80007bc:	76bb      	strb	r3, [r7, #26]
 80007be:	e00b      	b.n	80007d8 <YUGIOH_Clear_Card_All+0x64>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	69f9      	ldr	r1, [r7, #28]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff5c 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	330c      	adds	r3, #12
 80007d0:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007d2:	7ebb      	ldrb	r3, [r7, #26]
 80007d4:	3301      	adds	r3, #1
 80007d6:	76bb      	strb	r3, [r7, #26]
 80007d8:	7ebb      	ldrb	r3, [r7, #26]
 80007da:	2b13      	cmp	r3, #19
 80007dc:	d9f0      	bls.n	80007c0 <YUGIOH_Clear_Card_All+0x4c>
		}
		ptrYUGIOHCard = player->cardOnBoard;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80007e4:	2300      	movs	r3, #0
 80007e6:	767b      	strb	r3, [r7, #25]
 80007e8:	e00b      	b.n	8000802 <YUGIOH_Clear_Card_All+0x8e>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	69f9      	ldr	r1, [r7, #28]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff47 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	330c      	adds	r3, #12
 80007fa:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80007fc:	7e7b      	ldrb	r3, [r7, #25]
 80007fe:	3301      	adds	r3, #1
 8000800:	767b      	strb	r3, [r7, #25]
 8000802:	7e7b      	ldrb	r3, [r7, #25]
 8000804:	2b05      	cmp	r3, #5
 8000806:	d9f0      	bls.n	80007ea <YUGIOH_Clear_Card_All+0x76>
		}

		ptrYUGIOHCard = &player->CardInPlayed;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800080e:	61fb      	str	r3, [r7, #28]
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	69f9      	ldr	r1, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff34 	bl	8000684 <YUGIOH_card_copy>
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000832:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800083a:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000842:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800084a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800084c:	2306      	movs	r3, #6
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00c      	b.n	800086c <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	6978      	ldr	r0, [r7, #20]
 8000856:	f7ff ff15 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3b0c      	subs	r3, #12
 800085e:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3b0c      	subs	r3, #12
 8000864:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b01      	subs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dcef      	bgt.n	8000852 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af04      	add	r7, sp, #16
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3304      	adds	r3, #4
 800088a:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3304      	adds	r3, #4
 8000890:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800089e:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80008a6:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f000 820b 	beq.w	8000cc6 <GAME_PLAY_Management+0x44a>
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	f300 8238 	bgt.w	8000d26 <GAME_PLAY_Management+0x4aa>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <GAME_PLAY_Management+0x46>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	f000 81d3 	beq.w	8000c66 <GAME_PLAY_Management+0x3ea>
			state_game->F_flag = 0;
		}
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 80008c0:	e231      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008c2:	4baa      	ldr	r3, [pc, #680]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	9202      	str	r2, [sp, #8]
 80008c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4aa6      	ldr	r2, [pc, #664]	; (8000b70 <GAME_PLAY_Management+0x2f4>)
 80008d6:	2105      	movs	r1, #5
 80008d8:	2005      	movs	r0, #5
 80008da:	f001 fe7a 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008de:	4ba3      	ldr	r3, [pc, #652]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	9202      	str	r2, [sp, #8]
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	9200      	str	r2, [sp, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4aa0      	ldr	r2, [pc, #640]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 80008f2:	210f      	movs	r1, #15
 80008f4:	2000      	movs	r0, #0
 80008f6:	f001 fe6c 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80008fa:	4b9f      	ldr	r3, [pc, #636]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	9202      	str	r2, [sp, #8]
 8000900:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a9b      	ldr	r2, [pc, #620]	; (8000b7c <GAME_PLAY_Management+0x300>)
 800090e:	2123      	movs	r1, #35	; 0x23
 8000910:	2008      	movs	r0, #8
 8000912:	f001 fe5e 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000916:	4b98      	ldr	r3, [pc, #608]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000918:	2200      	movs	r2, #0
 800091a:	9202      	str	r2, [sp, #8]
 800091c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a95      	ldr	r2, [pc, #596]	; (8000b80 <GAME_PLAY_Management+0x304>)
 800092a:	213c      	movs	r1, #60	; 0x3c
 800092c:	2019      	movs	r0, #25
 800092e:	f001 fe50 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000932:	4b8e      	ldr	r3, [pc, #568]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000934:	2200      	movs	r2, #0
 8000936:	9202      	str	r2, [sp, #8]
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	9201      	str	r2, [sp, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	9200      	str	r2, [sp, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a8b      	ldr	r2, [pc, #556]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000946:	214b      	movs	r1, #75	; 0x4b
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fe42 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800094e:	4b87      	ldr	r3, [pc, #540]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000950:	2200      	movs	r2, #0
 8000952:	9202      	str	r2, [sp, #8]
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a88      	ldr	r2, [pc, #544]	; (8000b84 <GAME_PLAY_Management+0x308>)
 8000962:	215a      	movs	r1, #90	; 0x5a
 8000964:	2000      	movs	r0, #0
 8000966:	f001 fe34 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800096a:	4b80      	ldr	r3, [pc, #512]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 800096c:	2200      	movs	r2, #0
 800096e:	9202      	str	r2, [sp, #8]
 8000970:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000974:	9201      	str	r2, [sp, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	9200      	str	r2, [sp, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a82      	ldr	r2, [pc, #520]	; (8000b88 <GAME_PLAY_Management+0x30c>)
 800097e:	215a      	movs	r1, #90	; 0x5a
 8000980:	205d      	movs	r0, #93	; 0x5d
 8000982:	f001 fe26 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000986:	4b79      	ldr	r3, [pc, #484]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000988:	2200      	movs	r2, #0
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000990:	9201      	str	r2, [sp, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a7c      	ldr	r2, [pc, #496]	; (8000b8c <GAME_PLAY_Management+0x310>)
 800099a:	2169      	movs	r1, #105	; 0x69
 800099c:	2000      	movs	r0, #0
 800099e:	f001 fe18 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009a2:	4b72      	ldr	r3, [pc, #456]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	9202      	str	r2, [sp, #8]
 80009a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a76      	ldr	r2, [pc, #472]	; (8000b90 <GAME_PLAY_Management+0x314>)
 80009b6:	2169      	movs	r1, #105	; 0x69
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f001 fe0a 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009be:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a70      	ldr	r2, [pc, #448]	; (8000b94 <GAME_PLAY_Management+0x318>)
 80009d2:	2105      	movs	r1, #5
 80009d4:	2005      	movs	r0, #5
 80009d6:	f001 fe46 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009da:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	9202      	str	r2, [sp, #8]
 80009e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	9200      	str	r2, [sp, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 80009ee:	210f      	movs	r1, #15
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fe38 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80009f6:	4b60      	ldr	r3, [pc, #384]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	9202      	str	r2, [sp, #8]
 80009fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a5c      	ldr	r2, [pc, #368]	; (8000b7c <GAME_PLAY_Management+0x300>)
 8000a0a:	2123      	movs	r1, #35	; 0x23
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f001 fe2a 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	9202      	str	r2, [sp, #8]
 8000a18:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a1c:	9201      	str	r2, [sp, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a56      	ldr	r2, [pc, #344]	; (8000b80 <GAME_PLAY_Management+0x304>)
 8000a26:	213c      	movs	r1, #60	; 0x3c
 8000a28:	2014      	movs	r0, #20
 8000a2a:	f001 fe1c 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	9202      	str	r2, [sp, #8]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000a42:	214b      	movs	r1, #75	; 0x4b
 8000a44:	2000      	movs	r0, #0
 8000a46:	f001 fe0e 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <GAME_PLAY_Management+0x308>)
 8000a5e:	215a      	movs	r1, #90	; 0x5a
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 fe00 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a70:	9201      	str	r2, [sp, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <GAME_PLAY_Management+0x30c>)
 8000a7a:	215a      	movs	r1, #90	; 0x5a
 8000a7c:	205d      	movs	r0, #93	; 0x5d
 8000a7e:	f001 fdf2 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a82:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	9202      	str	r2, [sp, #8]
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a3d      	ldr	r2, [pc, #244]	; (8000b8c <GAME_PLAY_Management+0x310>)
 8000a96:	2169      	movs	r1, #105	; 0x69
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 fde4 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	9202      	str	r2, [sp, #8]
 8000aa4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	9200      	str	r2, [sp, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a37      	ldr	r2, [pc, #220]	; (8000b90 <GAME_PLAY_Management+0x314>)
 8000ab2:	2169      	movs	r1, #105	; 0x69
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f001 fdd6 	bl	8002666 <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000aba:	2108      	movs	r1, #8
 8000abc:	4836      	ldr	r0, [pc, #216]	; (8000b98 <GAME_PLAY_Management+0x31c>)
 8000abe:	f005 fc2f 	bl	8006320 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 80c9 	bne.w	8000c5c <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ad0:	805a      	strh	r2, [r3, #2]
			ptrPlayer2->life_point = 4000;
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ad8:	805a      	strh	r2, [r3, #2]
			ST7735_FillScreen(ST7735_BLACK);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f001 fef6 	bl	80028cc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 ff04 	bl	80028ee <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	9201      	str	r2, [sp, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <GAME_PLAY_Management+0x2f4>)
 8000afa:	2105      	movs	r1, #5
 8000afc:	2005      	movs	r0, #5
 8000afe:	f001 fd68 	bl	80025d2 <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	9202      	str	r2, [sp, #8]
 8000b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	9200      	str	r2, [sp, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000b16:	210f      	movs	r1, #15
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 fd5a 	bl	80025d2 <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	9202      	str	r2, [sp, #8]
 8000b24:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <GAME_PLAY_Management+0x320>)
 8000b32:	2123      	movs	r1, #35	; 0x23
 8000b34:	2019      	movs	r0, #25
 8000b36:	f001 fd4c 	bl	80025d2 <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b44:	9201      	str	r2, [sp, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <GAME_PLAY_Management+0x324>)
 8000b4e:	213c      	movs	r1, #60	; 0x3c
 8000b50:	2021      	movs	r0, #33	; 0x21
 8000b52:	f001 fd3e 	bl	80025d2 <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	9202      	str	r2, [sp, #8]
 8000b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	e01c      	b.n	8000ba4 <GAME_PLAY_Management+0x328>
 8000b6a:	bf00      	nop
 8000b6c:	24000008 	.word	0x24000008
 8000b70:	0800bed4 	.word	0x0800bed4
 8000b74:	0800bee0 	.word	0x0800bee0
 8000b78:	24000010 	.word	0x24000010
 8000b7c:	0800bef4 	.word	0x0800bef4
 8000b80:	0800bf00 	.word	0x0800bf00
 8000b84:	0800bf08 	.word	0x0800bf08
 8000b88:	0800bf18 	.word	0x0800bf18
 8000b8c:	0800bf20 	.word	0x0800bf20
 8000b90:	0800bf30 	.word	0x0800bf30
 8000b94:	0800bf34 	.word	0x0800bf34
 8000b98:	58020000 	.word	0x58020000
 8000b9c:	0800bf40 	.word	0x0800bf40
 8000ba0:	0800bf48 	.word	0x0800bf48
 8000ba4:	4a62      	ldr	r2, [pc, #392]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000ba6:	214b      	movs	r1, #75	; 0x4b
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f001 fd12 	bl	80025d2 <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	9202      	str	r2, [sp, #8]
 8000bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <GAME_PLAY_Management+0x4bc>)
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f001 fd4e 	bl	8002666 <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bca:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	9202      	str	r2, [sp, #8]
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	9200      	str	r2, [sp, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a54      	ldr	r2, [pc, #336]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	2000      	movs	r0, #0
 8000be2:	f001 fd40 	bl	8002666 <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000bf0:	9201      	str	r2, [sp, #4]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	9200      	str	r2, [sp, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <GAME_PLAY_Management+0x4c4>)
 8000bfa:	2123      	movs	r1, #35	; 0x23
 8000bfc:	2019      	movs	r0, #25
 8000bfe:	f001 fd32 	bl	8002666 <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c02:	4b4e      	ldr	r3, [pc, #312]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	9202      	str	r2, [sp, #8]
 8000c08:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c0c:	9201      	str	r2, [sp, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a4b      	ldr	r2, [pc, #300]	; (8000d44 <GAME_PLAY_Management+0x4c8>)
 8000c16:	213c      	movs	r1, #60	; 0x3c
 8000c18:	2025      	movs	r0, #37	; 0x25
 8000c1a:	f001 fd24 	bl	8002666 <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	9202      	str	r2, [sp, #8]
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000c32:	214b      	movs	r1, #75	; 0x4b
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 fd16 	bl	8002666 <ST7735_WriteString1>
			HAL_Delay(3000);
 8000c3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c3e:	f002 fa21 	bl	8003084 <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f001 fe42 	bl	80028cc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f001 fe50 	bl	80028ee <ST7735_FillScreen1>
			MainGUI();
 8000c4e:	f000 fe3f 	bl	80018d0 <MainGUI>
			state_game->player_state = first_player;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000c5a:	e064      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2262      	movs	r2, #98	; 0x62
 8000c60:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000c64:	e05f      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		if (state_game -> F_flag == 0){
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d125      	bne.n	8000cbc <GAME_PLAY_Management+0x440>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9202      	str	r2, [sp, #8]
 8000c76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <GAME_PLAY_Management+0x4cc>)
 8000c84:	215a      	movs	r1, #90	; 0x5a
 8000c86:	200f      	movs	r0, #15
 8000c88:	f001 fced 	bl	8002666 <ST7735_WriteString1>
			HAL_Delay(2000);
 8000c8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c90:	f002 f9f8 	bl	8003084 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000c94:	2300      	movs	r3, #0
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2326      	movs	r3, #38	; 0x26
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	215a      	movs	r1, #90	; 0x5a
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 fda0 	bl	80027e4 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000caa:	3301      	adds	r3, #1
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
			state_game->S_flag = 0;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f844 	bl	8000d4c <GAME_PLAY_Phase_Management>
		break;
 8000cc4:	e02f      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		if (state_game -> S_flag == 0){
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d125      	bne.n	8000d1c <GAME_PLAY_Management+0x4a0>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	9202      	str	r2, [sp, #8]
 8000cd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000cda:	9201      	str	r2, [sp, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	9200      	str	r2, [sp, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <GAME_PLAY_Management+0x4cc>)
 8000ce4:	215a      	movs	r1, #90	; 0x5a
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f001 fc73 	bl	80025d2 <ST7735_WriteString>
			HAL_Delay(2000);
 8000cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cf0:	f002 f9c8 	bl	8003084 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2326      	movs	r3, #38	; 0x26
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	215a      	movs	r1, #90	; 0x5a
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f001 fcfc 	bl	80026fc <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
			state_game->F_flag = 0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f814 	bl	8000d4c <GAME_PLAY_Phase_Management>
		break;
 8000d24:	bf00      	nop
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800bee0 	.word	0x0800bee0
 8000d34:	24000008 	.word	0x24000008
 8000d38:	0800bf34 	.word	0x0800bf34
 8000d3c:	24000010 	.word	0x24000010
 8000d40:	0800bf40 	.word	0x0800bf40
 8000d44:	0800bf50 	.word	0x0800bf50
 8000d48:	0800bf58 	.word	0x0800bf58

08000d4c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Winner
	} STATE;
	STATE = state_game->STATE;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000d5c:	75fb      	strb	r3, [r7, #23]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000d64:	75bb      	strb	r3, [r7, #22]

    enum _BATTLE {
    	selection, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } BATTLE;
    BATTLE = state_game->BATTLE;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8000d6c:	757b      	strb	r3, [r7, #21]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3304      	adds	r3, #4
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
	Player *ptrPlayerDef = state_game->player;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	3304      	adds	r3, #4
 8000d78:	623b      	str	r3, [r7, #32]

	if (state_game->player_state == first_player) {
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <GAME_PLAY_Phase_Management+0x48>
		ptrPlayerAtk = &state_game->player[0];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3304      	adds	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[1];
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	e00b      	b.n	8000dac <GAME_PLAY_Phase_Management+0x60>
	} else if (state_game->player_state == second_player) {
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d106      	bne.n	8000dac <GAME_PLAY_Phase_Management+0x60>
		ptrPlayerAtk = &state_game->player[1];
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[0];
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	3304      	adds	r3, #4
 8000daa:	623b      	str	r3, [r7, #32]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	f200 850e 	bhi.w	80017d0 <GAME_PLAY_Phase_Management+0xa84>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <GAME_PLAY_Phase_Management+0x70>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000efb 	.word	0x08000efb
 8000dc4:	080013f3 	.word	0x080013f3
 8000dc8:	0800179b 	.word	0x0800179b
	case Drawn_Phase:
		//		ST7735_FillScreen(ST7735_BLACK);
		//		ST7735_FillScreen1(ST7735_BLACK);
		//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	49a5      	ldr	r1, [pc, #660]	; (8001068 <GAME_PLAY_Phase_Management+0x31c>)
 8000dd4:	48a5      	ldr	r0, [pc, #660]	; (800106c <GAME_PLAY_Phase_Management+0x320>)
 8000dd6:	f00a fcf3 	bl	800b7c0 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000dda:	4ba5      	ldr	r3, [pc, #660]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	9202      	str	r2, [sp, #8]
 8000de0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	9200      	str	r2, [sp, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a9f      	ldr	r2, [pc, #636]	; (800106c <GAME_PLAY_Phase_Management+0x320>)
 8000dee:	2114      	movs	r1, #20
 8000df0:	205a      	movs	r0, #90	; 0x5a
 8000df2:	f001 fbee 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000df6:	4b9e      	ldr	r3, [pc, #632]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	9202      	str	r2, [sp, #8]
 8000dfc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	9200      	str	r2, [sp, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a9a      	ldr	r2, [pc, #616]	; (8001074 <GAME_PLAY_Phase_Management+0x328>)
 8000e0a:	2123      	movs	r1, #35	; 0x23
 8000e0c:	203c      	movs	r0, #60	; 0x3c
 8000e0e:	f001 fbe0 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e12:	4b97      	ldr	r3, [pc, #604]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	9202      	str	r2, [sp, #8]
 8000e18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a94      	ldr	r2, [pc, #592]	; (8001078 <GAME_PLAY_Phase_Management+0x32c>)
 8000e26:	2132      	movs	r1, #50	; 0x32
 8000e28:	2069      	movs	r0, #105	; 0x69
 8000e2a:	f001 fbd2 	bl	80025d2 <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e2e:	4b90      	ldr	r3, [pc, #576]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	9202      	str	r2, [sp, #8]
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	9200      	str	r2, [sp, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a8e      	ldr	r2, [pc, #568]	; (800107c <GAME_PLAY_Phase_Management+0x330>)
 8000e42:	215a      	movs	r1, #90	; 0x5a
 8000e44:	2005      	movs	r0, #5
 8000e46:	f001 fbc4 	bl	80025d2 <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4985      	ldr	r1, [pc, #532]	; (8001068 <GAME_PLAY_Phase_Management+0x31c>)
 8000e52:	488b      	ldr	r0, [pc, #556]	; (8001080 <GAME_PLAY_Phase_Management+0x334>)
 8000e54:	f00a fcb4 	bl	800b7c0 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e58:	4b85      	ldr	r3, [pc, #532]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	9202      	str	r2, [sp, #8]
 8000e5e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	9200      	str	r2, [sp, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a85      	ldr	r2, [pc, #532]	; (8001080 <GAME_PLAY_Phase_Management+0x334>)
 8000e6c:	2114      	movs	r1, #20
 8000e6e:	205a      	movs	r0, #90	; 0x5a
 8000e70:	f001 fbf9 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000e74:	4b7e      	ldr	r3, [pc, #504]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7b      	ldr	r2, [pc, #492]	; (8001074 <GAME_PLAY_Phase_Management+0x328>)
 8000e88:	2123      	movs	r1, #35	; 0x23
 8000e8a:	203c      	movs	r0, #60	; 0x3c
 8000e8c:	f001 fbeb 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e90:	4b77      	ldr	r3, [pc, #476]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a75      	ldr	r2, [pc, #468]	; (8001078 <GAME_PLAY_Phase_Management+0x32c>)
 8000ea4:	2132      	movs	r1, #50	; 0x32
 8000ea6:	2069      	movs	r0, #105	; 0x69
 8000ea8:	f001 fbdd 	bl	8002666 <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	9202      	str	r2, [sp, #8]
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a71      	ldr	r2, [pc, #452]	; (8001084 <GAME_PLAY_Phase_Management+0x338>)
 8000ec0:	215a      	movs	r1, #90	; 0x5a
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f001 fbcf 	bl	8002666 <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	486f      	ldr	r0, [pc, #444]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000ecc:	f005 fa28 	bl	8006320 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 8477 	bne.w	80017c6 <GAME_PLAY_Phase_Management+0xa7a>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000eee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ef2:	f002 f8c7 	bl	8003084 <HAL_Delay>
		}
		break;
 8000ef6:	f000 bc66 	b.w	80017c6 <GAME_PLAY_Phase_Management+0xa7a>
	case Main_Phase:

		switch (MAIN)
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	f200 8464 	bhi.w	80017ca <GAME_PLAY_Phase_Management+0xa7e>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <GAME_PLAY_Phase_Management+0x1bc>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f25 	.word	0x08000f25
 8000f0c:	08000f71 	.word	0x08000f71
 8000f10:	08001095 	.word	0x08001095
 8000f14:	08001225 	.word	0x08001225
 8000f18:	080013d7 	.word	0x080013d7
 8000f1c:	08001389 	.word	0x08001389
 8000f20:	08001321 	.word	0x08001321
		{
		case await:
			if (state_game->action == 0)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d117      	bne.n	8000f5c <GAME_PLAY_Phase_Management+0x210>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4856      	ldr	r0, [pc, #344]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000f30:	f005 f9f6 	bl	8006320 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <GAME_PLAY_Phase_Management+0x204>
						== GPIO_PIN_RESET){
					state_game->action =50;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2232      	movs	r2, #50	; 0x32
 8000f3e:	701a      	strb	r2, [r3, #0]
					state_game->STATE = Battle_Phase;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2202      	movs	r2, #2
 8000f44:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
					HAL_Delay(1500);
 8000f48:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f4c:	f002 f89a 	bl	8003084 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fc41 	bl	80017dc <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000f5a:	e23e      	b.n	80013da <GAME_PLAY_Phase_Management+0x68e>
			else if (state_game->action == 1)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 823a 	bne.w	80013da <GAME_PLAY_Phase_Management+0x68e>
				state_game->MAIN = select_position;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000f6e:	e234      	b.n	80013da <GAME_PLAY_Phase_Management+0x68e>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f76:	613b      	str	r3, [r7, #16]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f7e:	61fb      	str	r3, [r7, #28]

			if (state_game->action == 1)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d15e      	bne.n	8001046 <GAME_PLAY_Phase_Management+0x2fa>
			{
				if (state_game->player_state == first_player)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d135      	bne.n	8000ffe <GAME_PLAY_Phase_Management+0x2b2>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000f92:	2108      	movs	r1, #8
 8000f94:	483c      	ldr	r0, [pc, #240]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000f96:	f005 f9c3 	bl	8006320 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d106      	bne.n	8000fae <GAME_PLAY_Phase_Management+0x262>
					{
						ptrYugiohCard_src->cardState = 1;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000fac:	e217      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4836      	ldr	r0, [pc, #216]	; (800108c <GAME_PLAY_Phase_Management+0x340>)
 8000fb2:	f005 f9b5 	bl	8006320 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d106      	bne.n	8000fca <GAME_PLAY_Phase_Management+0x27e>
						ptrYugiohCard_src->cardState = 0;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			break;
 8000fc8:	e209      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fce:	4830      	ldr	r0, [pc, #192]	; (8001090 <GAME_PLAY_Phase_Management+0x344>)
 8000fd0:	f005 f9a6 	bl	8006320 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d104      	bne.n	8000fe4 <GAME_PLAY_Phase_Management+0x298>
						state_game->test = 22;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2216      	movs	r2, #22
 8000fde:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000fe2:	e1fc      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000fe8:	f005 f99a 	bl	8006320 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 81f5 	bne.w	80013de <GAME_PLAY_Phase_Management+0x692>
						state_game->test = 33;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000ffc:	e1ef      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
				else if (state_game->player_state == second_player)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8001004:	2b02      	cmp	r3, #2
 8001006:	f040 81ea 	bne.w	80013de <GAME_PLAY_Phase_Management+0x692>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 800100a:	2104      	movs	r1, #4
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 800100e:	f005 f987 	bl	8006320 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <GAME_PLAY_Phase_Management+0x2da>
						ptrYugiohCard_src->cardState = 1;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2201      	movs	r2, #1
 800101c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2202      	movs	r2, #2
 8001022:	701a      	strb	r2, [r3, #0]
			break;
 8001024:	e1db      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8001026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102a:	4819      	ldr	r0, [pc, #100]	; (8001090 <GAME_PLAY_Phase_Management+0x344>)
 800102c:	f005 f978 	bl	8006320 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 81d3 	bne.w	80013de <GAME_PLAY_Phase_Management+0x692>
						ptrYugiohCard_src->cardState = 0;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2200      	movs	r2, #0
 800103c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2202      	movs	r2, #2
 8001042:	701a      	strb	r2, [r3, #0]
			break;
 8001044:	e1cb      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
			else if (state_game->action == 2)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f040 81c7 	bne.w	80013de <GAME_PLAY_Phase_Management+0x692>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001050:	69f9      	ldr	r1, [r7, #28]
 8001052:	6938      	ldr	r0, [r7, #16]
 8001054:	f7ff fb16 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2203      	movs	r2, #3
 800105c:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2202      	movs	r2, #2
 8001062:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001066:	e1ba      	b.n	80013de <GAME_PLAY_Phase_Management+0x692>
 8001068:	0800bf64 	.word	0x0800bf64
 800106c:	24000164 	.word	0x24000164
 8001070:	24000008 	.word	0x24000008
 8001074:	0800bf68 	.word	0x0800bf68
 8001078:	0800bf30 	.word	0x0800bf30
 800107c:	0800bf74 	.word	0x0800bf74
 8001080:	24000160 	.word	0x24000160
 8001084:	0800bf84 	.word	0x0800bf84
 8001088:	58020800 	.word	0x58020800
 800108c:	58020400 	.word	0x58020400
 8001090:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800109a:	613b      	str	r3, [r7, #16]

			if (state_game->action == 3)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	f040 819e 	bne.w	80013e2 <GAME_PLAY_Phase_Management+0x696>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d12a      	bne.n	8001104 <GAME_PLAY_Phase_Management+0x3b8>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	799a      	ldrb	r2, [r3, #6]
 80010b2:	4baa      	ldr	r3, [pc, #680]	; (800135c <GAME_PLAY_Phase_Management+0x610>)
 80010b4:	fba3 1302 	umull	r1, r3, r3, r2
 80010b8:	0899      	lsrs	r1, r3, #2
 80010ba:	460b      	mov	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	440b      	add	r3, r1
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	727b      	strb	r3, [r7, #9]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80010c6:	7a7a      	ldrb	r2, [r7, #9]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	61fb      	str	r3, [r7, #28]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80010d8:	69f9      	ldr	r1, [r7, #28]
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f7ff fad2 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80010e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010e2:	f7ff fb22 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80010ec:	6939      	ldr	r1, [r7, #16]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fac8 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8001102:	e16e      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x696>
				else if (ptrYugiohCard_src->cardType == 2)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d144      	bne.n	8001196 <GAME_PLAY_Phase_Management+0x44a>
					state_game->count_chain = 1;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d112      	bne.n	8001140 <GAME_PLAY_Phase_Management+0x3f4>
						state_game->test = 33;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2221      	movs	r2, #33	; 0x21
 800111e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001124:	f7ff fb01 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2204      	movs	r2, #4
 800112c:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001134:	61fb      	str	r3, [r7, #28]
						state_game->MAIN = chaining_main_DEF;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2206      	movs	r2, #6
 800113a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800113e:	e150      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x696>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	799a      	ldrb	r2, [r3, #6]
 8001144:	4b85      	ldr	r3, [pc, #532]	; (800135c <GAME_PLAY_Phase_Management+0x610>)
 8001146:	fba3 1302 	umull	r1, r3, r3, r2
 800114a:	0899      	lsrs	r1, r3, #2
 800114c:	460b      	mov	r3, r1
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	440b      	add	r3, r1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001158:	7aba      	ldrb	r2, [r7, #10]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001164:	4413      	add	r3, r2
 8001166:	3304      	adds	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	6938      	ldr	r0, [r7, #16]
 800116e:	f7ff fa89 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001174:	f7ff fad9 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa7f 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001194:	e125      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x696>
				else if (ptrYugiohCard_src->cardType == 1)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 8121 	bne.w	80013e2 <GAME_PLAY_Phase_Management+0x696>
					state_game->test = 2;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	78db      	ldrb	r3, [r3, #3]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d82e      	bhi.n	800120e <GAME_PLAY_Phase_Management+0x4c2>
						state_game->test = 1;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	799a      	ldrb	r2, [r3, #6]
 80011bc:	4b67      	ldr	r3, [pc, #412]	; (800135c <GAME_PLAY_Phase_Management+0x610>)
 80011be:	fba3 1302 	umull	r1, r3, r3, r2
 80011c2:	0899      	lsrs	r1, r3, #2
 80011c4:	460b      	mov	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	440b      	add	r3, r1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	72fb      	strb	r3, [r7, #11]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80011d0:	7afa      	ldrb	r2, [r7, #11]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011e2:	69f9      	ldr	r1, [r7, #28]
 80011e4:	6938      	ldr	r0, [r7, #16]
 80011e6:	f7ff fa4d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80011ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ec:	f7ff fa9d 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa43 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800120c:	e0e9      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x696>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800120e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001210:	f7ff fa8b 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2204      	movs	r2, #4
 8001218:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001222:	e0de      	b.n	80013e2 <GAME_PLAY_Phase_Management+0x696>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800122a:	613b      	str	r3, [r7, #16]

			if (state_game->action == 4)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d105      	bne.n	8001240 <GAME_PLAY_Phase_Management+0x4f4>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 facf 	bl	80017dc <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
				}
			}
				break;
 800123e:	e0d2      	b.n	80013e6 <GAME_PLAY_Phase_Management+0x69a>
			else if (state_game->action == 5)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d105      	bne.n	8001254 <GAME_PLAY_Phase_Management+0x508>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fac5 	bl	80017dc <Player_Reading_Card>
				break;
 8001252:	e0c8      	b.n	80013e6 <GAME_PLAY_Phase_Management+0x69a>
			else if (state_game->action == 6)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b06      	cmp	r3, #6
 800125a:	f040 80c4 	bne.w	80013e6 <GAME_PLAY_Phase_Management+0x69a>
				uint8_t monsterflag = 0 ;
 800125e:	2300      	movs	r3, #0
 8001260:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001268:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	78db      	ldrb	r3, [r3, #3]
 800126e:	2b04      	cmp	r3, #4
 8001270:	d802      	bhi.n	8001278 <GAME_PLAY_Phase_Management+0x52c>
					monsterflag += 1;
 8001272:	7efb      	ldrb	r3, [r7, #27]
 8001274:	3301      	adds	r3, #1
 8001276:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst++;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	330c      	adds	r3, #12
 800127c:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	78db      	ldrb	r3, [r3, #3]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d802      	bhi.n	800128c <GAME_PLAY_Phase_Management+0x540>
					monsterflag += 1;
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	3301      	adds	r3, #1
 800128a:	76fb      	strb	r3, [r7, #27]
				if (monsterflag == 2)
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d138      	bne.n	8001304 <GAME_PLAY_Phase_Management+0x5b8>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	799a      	ldrb	r2, [r3, #6]
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <GAME_PLAY_Phase_Management+0x610>)
 8001298:	fba3 1302 	umull	r1, r3, r3, r2
 800129c:	0899      	lsrs	r1, r3, #2
 800129e:	460b      	mov	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	440b      	add	r3, r1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	733b      	strb	r3, [r7, #12]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80012aa:	7b3a      	ldrb	r2, [r7, #12]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	4413      	add	r3, r2
 80012b8:	3304      	adds	r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80012bc:	69f9      	ldr	r1, [r7, #28]
 80012be:	6938      	ldr	r0, [r7, #16]
 80012c0:	f7ff f9e0 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[0]);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80012ca:	4619      	mov	r1, r3
 80012cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ce:	f000 fabe 	bl	800184e <YUGIOH_To_GY>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[1]);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80012d8:	4619      	mov	r1, r3
 80012da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012dc:	f000 fab7 	bl	800184e <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80012e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e2:	f7ff fa22 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f9c8 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				break;
 8001302:	e070      	b.n	80013e6 <GAME_PLAY_Phase_Management+0x69a>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001306:	f7ff fa10 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f7ff f9b3 	bl	8000684 <YUGIOH_card_copy>
				break;
 800131e:	e062      	b.n	80013e6 <GAME_PLAY_Phase_Management+0x69a>
		case chaining_main_DEF:
			state_game->test = 34;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2222      	movs	r2, #34	; 0x22
 8001324:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d119      	bne.n	8001364 <GAME_PLAY_Phase_Management+0x618>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fa51 	bl	80017dc <Player_Reading_Card>
				state_game->test = 35;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2223      	movs	r2, #35	; 0x23
 800133e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8001342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <GAME_PLAY_Phase_Management+0x614>)
 8001348:	f004 ffea 	bl	8006320 <HAL_GPIO_ReadPin>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d14b      	bne.n	80013ea <GAME_PLAY_Phase_Management+0x69e>
					state_game->MAIN = activate_effect;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 800135a:	e046      	b.n	80013ea <GAME_PLAY_Phase_Management+0x69e>
 800135c:	aaaaaaab 	.word	0xaaaaaaab
 8001360:	58021400 	.word	0x58021400
			else if ((state_game->action == 5 )){
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d13e      	bne.n	80013ea <GAME_PLAY_Phase_Management+0x69e>
				state_game->count_chain += 1;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2204      	movs	r2, #4
 8001384:	701a      	strb	r2, [r3, #0]
			break;
 8001386:	e030      	b.n	80013ea <GAME_PLAY_Phase_Management+0x69e>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d110      	bne.n	80013b2 <GAME_PLAY_Phase_Management+0x666>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001392:	6839      	ldr	r1, [r7, #0]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa21 	bl	80017dc <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 800139a:	2102      	movs	r1, #2
 800139c:	4892      	ldr	r0, [pc, #584]	; (80015e8 <GAME_PLAY_Phase_Management+0x89c>)
 800139e:	f004 ffbf 	bl	8006320 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d122      	bne.n	80013ee <GAME_PLAY_Phase_Management+0x6a2>
					state_game->MAIN = activate_effect;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2204      	movs	r2, #4
 80013ac:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80013b0:	e01d      	b.n	80013ee <GAME_PLAY_Phase_Management+0x6a2>
			else if ((state_game->action == 5 )){
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d119      	bne.n	80013ee <GAME_PLAY_Phase_Management+0x6a2>
				state_game->count_chain += 1;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2206      	movs	r2, #6
 80013ca:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2204      	movs	r2, #4
 80013d2:	701a      	strb	r2, [r3, #0]
			break;
 80013d4:	e00b      	b.n	80013ee <GAME_PLAY_Phase_Management+0x6a2>
//				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
//				YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
//				state_game->action = 0;
//				state_game->MAIN = await;
//			}
			break;
 80013d6:	bf00      	nop
 80013d8:	e1f7      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
			break;
 80013da:	bf00      	nop
 80013dc:	e1f5      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
			break;
 80013de:	bf00      	nop
 80013e0:	e1f3      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
			break;
 80013e2:	bf00      	nop
 80013e4:	e1f1      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
				break;
 80013e6:	bf00      	nop
 80013e8:	e1ef      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
			break;
 80013ea:	bf00      	nop
 80013ec:	e1ed      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
			break;
 80013ee:	bf00      	nop
		}
		break;
 80013f0:	e1eb      	b.n	80017ca <GAME_PLAY_Phase_Management+0xa7e>
		case Battle_Phase:

			switch(BATTLE){
 80013f2:	7d7b      	ldrb	r3, [r7, #21]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	f200 81d0 	bhi.w	800179a <GAME_PLAY_Phase_Management+0xa4e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <GAME_PLAY_Phase_Management+0x6b4>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001419 	.word	0x08001419
 8001404:	08001595 	.word	0x08001595
 8001408:	0800152b 	.word	0x0800152b
 800140c:	0800179b 	.word	0x0800179b
 8001410:	080015f5 	.word	0x080015f5
 8001414:	0800175f 	.word	0x0800175f
			case selection:
				//ATK action 50
				if(state_game->action == 50){
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b32      	cmp	r3, #50	; 0x32
 800141e:	d129      	bne.n	8001474 <GAME_PLAY_Phase_Management+0x728>
					Player_Reading_Card(RFIDmain, state_game, ptrPlayerDef);
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f9d9 	bl	80017dc <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800142a:	2101      	movs	r1, #1
 800142c:	486f      	ldr	r0, [pc, #444]	; (80015ec <GAME_PLAY_Phase_Management+0x8a0>)
 800142e:	f004 ff77 	bl	8006320 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 81a9 	bne.w	800178c <GAME_PLAY_Phase_Management+0xa40>
							== GPIO_PIN_RESET){
						if(state_game->player_state == first_player){
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <GAME_PLAY_Phase_Management+0x710>
							state_game->action = 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
							state_game->player_state = second_player;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
							state_game->STATE = Drawn_Phase;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 800145a:	e197      	b.n	800178c <GAME_PLAY_Phase_Management+0xa40>
							state_game->action = 0;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
							state_game->player_state = first_player;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
							state_game->STATE = Drawn_Phase;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			break;
 8001472:	e18b      	b.n	800178c <GAME_PLAY_Phase_Management+0xa40>
				else if(state_game->action == 51){
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b33      	cmp	r3, #51	; 0x33
 800147a:	f040 8187 	bne.w	800178c <GAME_PLAY_Phase_Management+0xa40>
					uint8_t check_def_mon = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	76bb      	strb	r3, [r7, #26]
					ptrYugiohCard_src = &ptrPlayerDef->cardOnBoard[3];
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	3328      	adds	r3, #40	; 0x28
 8001486:	613b      	str	r3, [r7, #16]
					for(uint8_t i = 0;i < 3; ++i){
 8001488:	2300      	movs	r3, #0
 800148a:	767b      	strb	r3, [r7, #25]
 800148c:	e009      	b.n	80014a2 <GAME_PLAY_Phase_Management+0x756>
						if(ptrYugiohCard_src->cardData == 0){
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <GAME_PLAY_Phase_Management+0x750>
							check_def_mon++;
 8001496:	7ebb      	ldrb	r3, [r7, #26]
 8001498:	3301      	adds	r3, #1
 800149a:	76bb      	strb	r3, [r7, #26]
					for(uint8_t i = 0;i < 3; ++i){
 800149c:	7e7b      	ldrb	r3, [r7, #25]
 800149e:	3301      	adds	r3, #1
 80014a0:	767b      	strb	r3, [r7, #25]
 80014a2:	7e7b      	ldrb	r3, [r7, #25]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d9f2      	bls.n	800148e <GAME_PLAY_Phase_Management+0x742>
					ptrYugiohCard_src = &ptrPlayerDef->ChainBuffer[0];
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80014ae:	613b      	str	r3, [r7, #16]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[3];
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	3328      	adds	r3, #40	; 0x28
 80014b4:	61fb      	str	r3, [r7, #28]
					for (uint8_t i = 0;i < 3; ++i) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	763b      	strb	r3, [r7, #24]
 80014ba:	e030      	b.n	800151e <GAME_PLAY_Phase_Management+0x7d2>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d124      	bne.n	8001512 <GAME_PLAY_Phase_Management+0x7c6>
							if(ptrYugiohCard_dst->cardState == 1){
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12a      	bne.n	8001526 <GAME_PLAY_Phase_Management+0x7da>
								YUGIOH_card_copy(ptrYugiohCard_dst, &ptrPlayerAtk->CardInPlayed);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014d6:	4619      	mov	r1, r3
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f7ff f8d3 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014e4:	61fb      	str	r3, [r7, #28]
								if(check_def_mon == 3){
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d103      	bne.n	80014f4 <GAME_PLAY_Phase_Management+0x7a8>
									ptrYugiohCard_dst->targetPosition = 99;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2263      	movs	r2, #99	; 0x63
 80014f0:	71da      	strb	r2, [r3, #7]
 80014f2:	e003      	b.n	80014fc <GAME_PLAY_Phase_Management+0x7b0>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	799a      	ldrb	r2, [r3, #6]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerDef);
 80014fc:	6a38      	ldr	r0, [r7, #32]
 80014fe:	f7ff f914 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2234      	movs	r2, #52	; 0x34
 8001506:	701a      	strb	r2, [r3, #0]
								state_game->BATTLE = counter_DEF;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
							break;
 8001510:	e009      	b.n	8001526 <GAME_PLAY_Phase_Management+0x7da>
						ptrYugiohCard_dst++;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	330c      	adds	r3, #12
 8001516:	61fb      	str	r3, [r7, #28]
					for (uint8_t i = 0;i < 3; ++i) {
 8001518:	7e3b      	ldrb	r3, [r7, #24]
 800151a:	3301      	adds	r3, #1
 800151c:	763b      	strb	r3, [r7, #24]
 800151e:	7e3b      	ldrb	r3, [r7, #24]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d9cb      	bls.n	80014bc <GAME_PLAY_Phase_Management+0x770>
			break;
 8001524:	e132      	b.n	800178c <GAME_PLAY_Phase_Management+0xa40>
							break;
 8001526:	bf00      	nop
			break;
 8001528:	e130      	b.n	800178c <GAME_PLAY_Phase_Management+0xa40>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b34      	cmp	r3, #52	; 0x34
 8001530:	d11d      	bne.n	800156e <GAME_PLAY_Phase_Management+0x822>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f950 	bl	80017dc <Player_Reading_Card>
//					state_game->test = 35;
					if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 800153c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001540:	482b      	ldr	r0, [pc, #172]	; (80015f0 <GAME_PLAY_Phase_Management+0x8a4>)
 8001542:	f004 feed 	bl	8006320 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <GAME_PLAY_Phase_Management+0x808>
						state_game->BATTLE = calculate_damage;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2204      	movs	r2, #4
 8001550:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					}
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8001554:	2102      	movs	r1, #2
 8001556:	4824      	ldr	r0, [pc, #144]	; (80015e8 <GAME_PLAY_Phase_Management+0x89c>)
 8001558:	f004 fee2 	bl	8006320 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 8116 	bne.w	8001790 <GAME_PLAY_Phase_Management+0xa44>
						state_game->BATTLE = calculate_damage;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->BATTLE = counter_ATK;
					state_game->action = 54;
				}
				break;
 800156c:	e110      	b.n	8001790 <GAME_PLAY_Phase_Management+0xa44>
				else if ((state_game->action == 53 )){
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b35      	cmp	r3, #53	; 0x35
 8001574:	f040 810c 	bne.w	8001790 <GAME_PLAY_Phase_Management+0xa44>
					state_game->count_chain += 1;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_ATK;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 54;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2236      	movs	r2, #54	; 0x36
 8001590:	701a      	strb	r2, [r3, #0]
				break;
 8001592:	e0fd      	b.n	8001790 <GAME_PLAY_Phase_Management+0xa44>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b36      	cmp	r3, #54	; 0x36
 800159a:	d111      	bne.n	80015c0 <GAME_PLAY_Phase_Management+0x874>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f91b 	bl	80017dc <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80015a6:	2102      	movs	r1, #2
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <GAME_PLAY_Phase_Management+0x89c>)
 80015aa:	f004 feb9 	bl	8006320 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 80ef 	bne.w	8001794 <GAME_PLAY_Phase_Management+0xa48>
						state_game->BATTLE = calculate_damage;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2204      	movs	r2, #4
 80015ba:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->BATTLE = counter_DEF;
					state_game->action = 52;
				}
				break;
 80015be:	e0e9      	b.n	8001794 <GAME_PLAY_Phase_Management+0xa48>
				else if ((state_game->action == 55 )){
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b37      	cmp	r3, #55	; 0x37
 80015c6:	f040 80e5 	bne.w	8001794 <GAME_PLAY_Phase_Management+0xa48>
					state_game->count_chain += 1;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	3301      	adds	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_DEF;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 52;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2234      	movs	r2, #52	; 0x34
 80015e2:	701a      	strb	r2, [r3, #0]
				break;
 80015e4:	e0d6      	b.n	8001794 <GAME_PLAY_Phase_Management+0xa48>
 80015e6:	bf00      	nop
 80015e8:	58020400 	.word	0x58020400
 80015ec:	58020800 	.word	0x58020800
 80015f0:	58021400 	.word	0x58021400
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015fa:	613b      	str	r3, [r7, #16]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	73fb      	strb	r3, [r7, #15]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	79db      	ldrb	r3, [r3, #7]
 8001606:	2b63      	cmp	r3, #99	; 0x63
 8001608:	d114      	bne.n	8001634 <GAME_PLAY_Phase_Management+0x8e8>
					ptrPlayerDef->life_point -= atk*100;
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	885a      	ldrh	r2, [r3, #2]
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	0249      	lsls	r1, r1, #9
 8001616:	1ac9      	subs	r1, r1, r3
 8001618:	0089      	lsls	r1, r1, #2
 800161a:	4419      	add	r1, r3
 800161c:	00c9      	lsls	r1, r1, #3
 800161e:	1acb      	subs	r3, r1, r3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	805a      	strh	r2, [r3, #2]
					state_game->BATTLE = after_calculate;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2205      	movs	r2, #5
 8001630:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				}

				ptrYugiohCard_dst = ptrPlayerDef->cardOnBoard;
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	3304      	adds	r3, #4
 8001638:	61fb      	str	r3, [r7, #28]

				ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	461a      	mov	r2, r3
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	4413      	add	r3, r2
 800164c:	3304      	adds	r3, #4
 800164e:	61fb      	str	r3, [r7, #28]

				state_game->test = 54;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2236      	movs	r2, #54	; 0x36
 8001654:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(ptrYugiohCard_dst->cardState == 0){
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d12b      	bne.n	80016b8 <GAME_PLAY_Phase_Management+0x96c>
//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	795b      	ldrb	r3, [r3, #5]
 8001664:	737b      	strb	r3, [r7, #13]
					if(atk < def){
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	429a      	cmp	r2, r3
 800166c:	d217      	bcs.n	800169e <GAME_PLAY_Phase_Management+0x952>
						ptrPlayerAtk->life_point -= (def-atk)*100;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	885a      	ldrh	r2, [r3, #2]
 8001672:	7b79      	ldrb	r1, [r7, #13]
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	0249      	lsls	r1, r1, #9
 800167e:	1ac9      	subs	r1, r1, r3
 8001680:	0089      	lsls	r1, r1, #2
 8001682:	4419      	add	r1, r3
 8001684:	00c9      	lsls	r1, r1, #3
 8001686:	1acb      	subs	r3, r1, r3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	b29b      	uxth	r3, r3
 800168c:	4413      	add	r3, r2
 800168e:	b29a      	uxth	r2, r3
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2205      	movs	r2, #5
 8001698:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
						ptrPlayerDef->life_point -= (atk-atk2)*100;
						state_game->BATTLE = after_calculate;
					}

				}
				break;
 800169c:	e07c      	b.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
					else if(atk > def){
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d978      	bls.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 80016a6:	69f9      	ldr	r1, [r7, #28]
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f000 f8d0 	bl	800184e <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 80016b6:	e06f      	b.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
				else if(ptrYugiohCard_dst->cardState == 1){
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d16b      	bne.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	73bb      	strb	r3, [r7, #14]
					state_game->test = 60;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	223c      	movs	r2, #60	; 0x3c
 80016ca:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if(atk < atk2){
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d21f      	bcs.n	8001716 <GAME_PLAY_Phase_Management+0x9ca>
						state_game->test = 61;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	223d      	movs	r2, #61	; 0x3d
 80016da:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						ptrPlayerAtk->life_point -= (atk2-atk)*100;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	885a      	ldrh	r2, [r3, #2]
 80016e2:	7bb9      	ldrb	r1, [r7, #14]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	0249      	lsls	r1, r1, #9
 80016ee:	1ac9      	subs	r1, r1, r3
 80016f0:	0089      	lsls	r1, r1, #2
 80016f2:	4419      	add	r1, r3
 80016f4:	00c9      	lsls	r1, r1, #3
 80016f6:	1acb      	subs	r3, r1, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	805a      	strh	r2, [r3, #2]
						YUGIOH_To_GY(ptrPlayerAtk, ptrYugiohCard_src);
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001708:	f000 f8a1 	bl	800184e <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2205      	movs	r2, #5
 8001710:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 8001714:	e040      	b.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
					else if(atk > atk2){
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	429a      	cmp	r2, r3
 800171c:	d93c      	bls.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
						state_game->test = 70;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2246      	movs	r2, #70	; 0x46
 8001722:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 8001726:	69f9      	ldr	r1, [r7, #28]
 8001728:	6a38      	ldr	r0, [r7, #32]
 800172a:	f000 f890 	bl	800184e <YUGIOH_To_GY>
						ptrPlayerDef->life_point -= (atk-atk2)*100;
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	885a      	ldrh	r2, [r3, #2]
 8001732:	7bf9      	ldrb	r1, [r7, #15]
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	1acb      	subs	r3, r1, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	0249      	lsls	r1, r1, #9
 800173e:	1ac9      	subs	r1, r1, r3
 8001740:	0089      	lsls	r1, r1, #2
 8001742:	4419      	add	r1, r3
 8001744:	00c9      	lsls	r1, r1, #3
 8001746:	1acb      	subs	r3, r1, r3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2205      	movs	r2, #5
 8001758:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 800175c:	e01c      	b.n	8001798 <GAME_PLAY_Phase_Management+0xa4c>
			case after_calculate:
				if(ptrPlayerDef->life_point == 0 || ptrPlayerDef->life_point >= 60000){
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	885b      	ldrh	r3, [r3, #2]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <GAME_PLAY_Phase_Management+0xa26>
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800176e:	4293      	cmp	r3, r2
 8001770:	d904      	bls.n	800177c <GAME_PLAY_Phase_Management+0xa30>
					state_game->STATE = Winner;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2203      	movs	r2, #3
 8001776:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				}
				else{
					state_game->action = 50;
					state_game->BATTLE = selection;
				}
				break;
 800177a:	e00e      	b.n	800179a <GAME_PLAY_Phase_Management+0xa4e>
					state_game->action = 50;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2232      	movs	r2, #50	; 0x32
 8001780:	701a      	strb	r2, [r3, #0]
					state_game->BATTLE = selection;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 800178a:	e006      	b.n	800179a <GAME_PLAY_Phase_Management+0xa4e>
			break;
 800178c:	bf00      	nop
 800178e:	e004      	b.n	800179a <GAME_PLAY_Phase_Management+0xa4e>
				break;
 8001790:	bf00      	nop
 8001792:	e002      	b.n	800179a <GAME_PLAY_Phase_Management+0xa4e>
				break;
 8001794:	bf00      	nop
 8001796:	e000      	b.n	800179a <GAME_PLAY_Phase_Management+0xa4e>
				break;
 8001798:	bf00      	nop
			}
		case Winner:
			if(HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800179a:	2108      	movs	r1, #8
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <GAME_PLAY_Phase_Management+0xa8c>)
 800179e:	f004 fdbf 	bl	8006320 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d112      	bne.n	80017ce <GAME_PLAY_Phase_Management+0xa82>
					== GPIO_PIN_RESET){
				state_game->player_state = ready;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
				state_game->STATE = Drawn_Phase;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				YUGIOH_Clear_Card_All(ptrPlayerAtk);
 80017b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017ba:	f7fe ffdb 	bl	8000774 <YUGIOH_Clear_Card_All>
				YUGIOH_Clear_Card_All(ptrPlayerDef);
 80017be:	6a38      	ldr	r0, [r7, #32]
 80017c0:	f7fe ffd8 	bl	8000774 <YUGIOH_Clear_Card_All>

			}
			break;
 80017c4:	e003      	b.n	80017ce <GAME_PLAY_Phase_Management+0xa82>
		break;
 80017c6:	bf00      	nop
 80017c8:	e002      	b.n	80017d0 <GAME_PLAY_Phase_Management+0xa84>
		break;
 80017ca:	bf00      	nop
 80017cc:	e000      	b.n	80017d0 <GAME_PLAY_Phase_Management+0xa84>
			break;
 80017ce:	bf00      	nop

	}
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	58020000 	.word	0x58020000

080017dc <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3328      	adds	r3, #40	; 0x28
 80017ec:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	3328      	adds	r3, #40	; 0x28
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3314      	adds	r3, #20
 8001808:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001810:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	78db      	ldrb	r3, [r3, #3]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d115      	bne.n	8001846 <Player_Reading_Card+0x6a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff f802 	bl	8000824 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001820:	6979      	ldr	r1, [r7, #20]
 8001822:	69b8      	ldr	r0, [r7, #24]
 8001824:	f7fe ff2e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_dst->targetPosition = 255;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	71da      	strb	r2, [r3, #7]
		RFID_Clear_Card_Bufffer(ptrRFID);
 800182e:	69f8      	ldr	r0, [r7, #28]
 8001830:	f7fe ff57 	bl	80006e2 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2200      	movs	r2, #0
 8001838:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	701a      	strb	r2, [r3, #0]
	}
}
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <YUGIOH_To_GY>:
	}
}

//void YUGIOH_Clear_Card_New_G(Player *player1,Player *player2) {

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	334c      	adds	r3, #76	; 0x4c
 8001868:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8001870:	61fb      	str	r3, [r7, #28]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	334c      	adds	r3, #76	; 0x4c
 8001876:	61bb      	str	r3, [r7, #24]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800187e:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001880:	2314      	movs	r3, #20
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00c      	b.n	80018a0 <YUGIOH_To_GY+0x52>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	69f8      	ldr	r0, [r7, #28]
 800188a:	f7fe fefb 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b0c      	subs	r3, #12
 8001892:	61fb      	str	r3, [r7, #28]
		ptrYugiohCard_Buffer_dst--;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3b0c      	subs	r3, #12
 8001898:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3b01      	subs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dcef      	bgt.n	8001886 <YUGIOH_To_GY+0x38>
	}

	ptrYugiohCard_Buffer_src = card;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	334c      	adds	r3, #76	; 0x4c
 80018ae:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	69f8      	ldr	r0, [r7, #28]
 80018b4:	f7fe fee6 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80018be:	69f9      	ldr	r1, [r7, #28]
 80018c0:	69b8      	ldr	r0, [r7, #24]
 80018c2:	f7fe fedf 	bl	8000684 <YUGIOH_card_copy>

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <MainGUI>:

void MainGUI(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <MainGUI+0x124>)
 80018d8:	2200      	movs	r2, #0
 80018da:	9202      	str	r2, [sp, #8]
 80018dc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	9200      	str	r2, [sp, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <MainGUI+0x128>)
 80018ea:	2105      	movs	r1, #5
 80018ec:	2005      	movs	r0, #5
 80018ee:	f000 feba 	bl	8002666 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <MainGUI+0x124>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	9202      	str	r2, [sp, #8]
 80018f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fc:	9201      	str	r2, [sp, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <MainGUI+0x12c>)
 8001906:	2114      	movs	r1, #20
 8001908:	2005      	movs	r0, #5
 800190a:	f000 feac 	bl	8002666 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <MainGUI+0x124>)
 8001910:	2200      	movs	r2, #0
 8001912:	9202      	str	r2, [sp, #8]
 8001914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	9200      	str	r2, [sp, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a37      	ldr	r2, [pc, #220]	; (8001a00 <MainGUI+0x130>)
 8001922:	2123      	movs	r1, #35	; 0x23
 8001924:	2005      	movs	r0, #5
 8001926:	f000 fe9e 	bl	8002666 <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <MainGUI+0x124>)
 800192c:	2200      	movs	r2, #0
 800192e:	9202      	str	r2, [sp, #8]
 8001930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	9200      	str	r2, [sp, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <MainGUI+0x134>)
 800193e:	2132      	movs	r1, #50	; 0x32
 8001940:	2000      	movs	r0, #0
 8001942:	f000 fe90 	bl	8002666 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <MainGUI+0x124>)
 8001948:	2200      	movs	r2, #0
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <MainGUI+0x138>)
 800195a:	213c      	movs	r1, #60	; 0x3c
 800195c:	2000      	movs	r0, #0
 800195e:	f000 fe82 	bl	8002666 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <MainGUI+0x124>)
 8001964:	2200      	movs	r2, #0
 8001966:	9202      	str	r2, [sp, #8]
 8001968:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800196c:	9201      	str	r2, [sp, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <MainGUI+0x13c>)
 8001976:	2105      	movs	r1, #5
 8001978:	2005      	movs	r0, #5
 800197a:	f000 fe2a 	bl	80025d2 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MainGUI+0x124>)
 8001980:	2200      	movs	r2, #0
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <MainGUI+0x12c>)
 8001992:	2114      	movs	r1, #20
 8001994:	2005      	movs	r0, #5
 8001996:	f000 fe1c 	bl	80025d2 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MainGUI+0x124>)
 800199c:	2200      	movs	r2, #0
 800199e:	9202      	str	r2, [sp, #8]
 80019a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <MainGUI+0x130>)
 80019ae:	2123      	movs	r1, #35	; 0x23
 80019b0:	2005      	movs	r0, #5
 80019b2:	f000 fe0e 	bl	80025d2 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MainGUI+0x124>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <MainGUI+0x134>)
 80019ca:	2132      	movs	r1, #50	; 0x32
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fe00 	bl	80025d2 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MainGUI+0x124>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	9202      	str	r2, [sp, #8]
 80019d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <MainGUI+0x138>)
 80019e6:	213c      	movs	r1, #60	; 0x3c
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 fdf2 	bl	80025d2 <ST7735_WriteString>
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000008 	.word	0x24000008
 80019f8:	0800bf34 	.word	0x0800bf34
 80019fc:	0800bf90 	.word	0x0800bf90
 8001a00:	0800bfa0 	.word	0x0800bfa0
 8001a04:	0800bfa8 	.word	0x0800bfa8
 8001a08:	0800bee0 	.word	0x0800bee0
 8001a0c:	0800bed4 	.word	0x0800bed4

08001a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <SystemInit+0xfc>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <SystemInit+0xfc>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <SystemInit+0xfc>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <SystemInit+0xfc>)
 8001a2a:	f043 0310 	orr.w	r3, r3, #16
 8001a2e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <SystemInit+0x100>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d807      	bhi.n	8001a4c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <SystemInit+0x100>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 030f 	bic.w	r3, r3, #15
 8001a44:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <SystemInit+0x100>)
 8001a46:	f043 0307 	orr.w	r3, r3, #7
 8001a4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <SystemInit+0x104>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <SystemInit+0x104>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <SystemInit+0x104>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <SystemInit+0x104>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	492c      	ldr	r1, [pc, #176]	; (8001b14 <SystemInit+0x104>)
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <SystemInit+0x108>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <SystemInit+0x100>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SystemInit+0x100>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 030f 	bic.w	r3, r3, #15
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <SystemInit+0x100>)
 8001a80:	f043 0307 	orr.w	r3, r3, #7
 8001a84:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <SystemInit+0x104>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <SystemInit+0x104>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <SystemInit+0x104>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <SystemInit+0x104>)
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <SystemInit+0x10c>)
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <SystemInit+0x104>)
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <SystemInit+0x110>)
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <SystemInit+0x104>)
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <SystemInit+0x114>)
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <SystemInit+0x104>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <SystemInit+0x104>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <SystemInit+0x114>)
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <SystemInit+0x104>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <SystemInit+0x104>)
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <SystemInit+0x114>)
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <SystemInit+0x104>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <SystemInit+0x104>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <SystemInit+0x104>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <SystemInit+0x104>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <SystemInit+0x118>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <SystemInit+0x118>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <SystemInit+0x11c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <SystemInit+0x120>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af2:	d202      	bcs.n	8001afa <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <SystemInit+0x124>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <SystemInit+0x128>)
 8001afc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b00:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	52002000 	.word	0x52002000
 8001b14:	58024400 	.word	0x58024400
 8001b18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b1c:	02020200 	.word	0x02020200
 8001b20:	01ff0000 	.word	0x01ff0000
 8001b24:	01010280 	.word	0x01010280
 8001b28:	580000c0 	.word	0x580000c0
 8001b2c:	5c001000 	.word	0x5c001000
 8001b30:	ffff0000 	.word	0xffff0000
 8001b34:	51008108 	.word	0x51008108
 8001b38:	52004000 	.word	0x52004000

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001b48:	bf00      	nop
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <main+0xe8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <main+0x24>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dcf4      	bgt.n	8001b4a <main+0xe>
	if ( timeout < 0 )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da01      	bge.n	8001b6a <main+0x2e>
	{
		Error_Handler();
 8001b66:	f000 fb97 	bl	8002298 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6a:	f001 f9f9 	bl	8002f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6e:	f000 f861 	bl	8001c34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b72:	f000 f8e3 	bl	8001d3c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <main+0xe8>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <main+0xe8>)
 8001b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <main+0xe8>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f004 fc0f 	bl	80063b8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f004 fc25 	bl	80063ec <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ba8:	bf00      	nop
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <main+0xe8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <main+0x84>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dcf4      	bgt.n	8001baa <main+0x6e>
	if ( timeout < 0 )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da01      	bge.n	8001bca <main+0x8e>
	{
		Error_Handler();
 8001bc6:	f000 fb67 	bl	8002298 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bca:	f000 fa35 	bl	8002038 <MX_GPIO_Init>
  MX_ETH_Init();
 8001bce:	f000 f8e7 	bl	8001da0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001bd2:	f000 f989 	bl	8001ee8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001bd6:	f000 fa07 	bl	8001fe8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001bda:	f000 f9d3 	bl	8001f84 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001bde:	f000 f92b 	bl	8001e38 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001be2:	f000 fc61 	bl	80024a8 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fe81 	bl	80028ee <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 fe6d 	bl	80028cc <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001bf2:	f001 fa3b 	bl	800306c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <main+0xec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2bc8      	cmp	r3, #200	; 0xc8
 8001c00:	d9f7      	bls.n	8001bf2 <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001c02:	f001 fa33 	bl	800306c <HAL_GetTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <main+0xec>)
 8001c0a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <main+0xf0>)
 8001c12:	f004 fbb6 	bl	8006382 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001c16:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001c1a:	4905      	ldr	r1, [pc, #20]	; (8001c30 <main+0xf4>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fe2d 	bl	800087c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001c22:	e7e6      	b.n	8001bf2 <main+0xb6>
 8001c24:	58024400 	.word	0x58024400
 8001c28:	24000c98 	.word	0x24000c98
 8001c2c:	58020400 	.word	0x58020400
 8001c30:	24000964 	.word	0x24000964

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09c      	sub	sp, #112	; 0x70
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	224c      	movs	r2, #76	; 0x4c
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f009 fcc4 	bl	800b5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f009 fcbe 	bl	800b5d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c54:	2004      	movs	r0, #4
 8001c56:	f004 fd25 	bl	80066a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <SystemClock_Config+0xfc>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <SystemClock_Config+0xfc>)
 8001c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <SystemClock_Config+0xfc>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <SystemClock_Config+0x100>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4a2e      	ldr	r2, [pc, #184]	; (8001d34 <SystemClock_Config+0x100>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <SystemClock_Config+0x100>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c8c:	bf00      	nop
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <SystemClock_Config+0xfc>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9a:	d1f8      	bne.n	8001c8e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <SystemClock_Config+0x104>)
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f023 0303 	bic.w	r3, r3, #3
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <SystemClock_Config+0x104>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001cc2:	2378      	movs	r3, #120	; 0x78
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fd48 	bl	8006778 <HAL_RCC_OscConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001cee:	f000 fad3 	bl	8002298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf2:	233f      	movs	r3, #63	; 0x3f
 8001cf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cfe:	2308      	movs	r3, #8
 8001d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2104      	movs	r1, #4
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 f95b 	bl	8006fd4 <HAL_RCC_ClockConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001d24:	f000 fab8 	bl	8002298 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3770      	adds	r7, #112	; 0x70
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	58024800 	.word	0x58024800
 8001d34:	58000400 	.word	0x58000400
 8001d38:	58024400 	.word	0x58024400

08001d3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0b0      	sub	sp, #192	; 0xc0
 8001d40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	22bc      	movs	r2, #188	; 0xbc
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f009 fc41 	bl	800b5d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001d4e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001d52:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001d58:	2318      	movs	r3, #24
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001d60:	2304      	movs	r3, #4
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001d7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fcb0 	bl	80076ec <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001d92:	f000 fa81 	bl	8002298 <Error_Handler>
  }
}
 8001d96:	bf00      	nop
 8001d98:	37c0      	adds	r7, #192	; 0xc0
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_ETH_Init+0x80>)
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <MX_ETH_Init+0x84>)
 8001da8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_ETH_Init+0x88>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_ETH_Init+0x88>)
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_ETH_Init+0x88>)
 8001db8:	22e1      	movs	r2, #225	; 0xe1
 8001dba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_ETH_Init+0x88>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_ETH_Init+0x88>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_ETH_Init+0x88>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ETH_Init+0x80>)
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_ETH_Init+0x88>)
 8001dd2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ETH_Init+0x80>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_ETH_Init+0x80>)
 8001ddc:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <MX_ETH_Init+0x8c>)
 8001dde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ETH_Init+0x80>)
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <MX_ETH_Init+0x90>)
 8001de4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_ETH_Init+0x80>)
 8001de8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_ETH_Init+0x80>)
 8001df0:	f003 fcc2 	bl	8005778 <HAL_ETH_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001dfa:	f000 fa4d 	bl	8002298 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001dfe:	2238      	movs	r2, #56	; 0x38
 8001e00:	2100      	movs	r1, #0
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <MX_ETH_Init+0x94>)
 8001e04:	f009 fbe4 	bl	800b5d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_ETH_Init+0x94>)
 8001e0a:	2221      	movs	r2, #33	; 0x21
 8001e0c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_ETH_Init+0x94>)
 8001e10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e14:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_ETH_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	240001a0 	.word	0x240001a0
 8001e24:	40028000 	.word	0x40028000
 8001e28:	24000c9c 	.word	0x24000c9c
 8001e2c:	240000e4 	.word	0x240000e4
 8001e30:	24000084 	.word	0x24000084
 8001e34:	24000168 	.word	0x24000168

08001e38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <MX_SPI3_Init+0xac>)
 8001e40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e50:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001ecc:	f006 ff76 	bl	8008dbc <HAL_SPI_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001ed6:	f000 f9df 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24000250 	.word	0x24000250
 8001ee4:	40003c00 	.word	0x40003c00

08001ee8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <MX_USART3_UART_Init+0x94>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <MX_USART3_UART_Init+0x98>)
 8001ef6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f0c:	220c      	movs	r2, #12
 8001f0e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f30:	f007 fb25 	bl	800957e <HAL_UART_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001f3a:	f000 f9ad 	bl	8002298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f42:	f008 ff47 	bl	800add4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001f4c:	f000 f9a4 	bl	8002298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f54:	f008 ff7c 	bl	800ae50 <HAL_UARTEx_SetRxFifoThreshold>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001f5e:	f000 f99b 	bl	8002298 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f64:	f008 fefd 	bl	800ad62 <HAL_UARTEx_DisableFifoMode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001f6e:	f000 f993 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	240002d8 	.word	0x240002d8
 8001f7c:	40004800 	.word	0x40004800
 8001f80:	0005dc00 	.word	0x0005dc00

08001f84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f8a:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f90:	2209      	movs	r2, #9
 8001f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f96:	2202      	movs	r2, #2
 8001f98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fcc:	f004 fa22 	bl	8006414 <HAL_PCD_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001fd6:	f000 f95f 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	24000458 	.word	0x24000458
 8001fe4:	40080000 	.word	0x40080000

08001fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_DMA_Init+0x4c>)
 8001ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <MX_DMA_Init+0x4c>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <MX_DMA_Init+0x4c>)
 8002000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	200c      	movs	r0, #12
 8002012:	f001 f956 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002016:	200c      	movs	r0, #12
 8002018:	f001 f96d 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	200f      	movs	r0, #15
 8002022:	f001 f94e 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002026:	200f      	movs	r0, #15
 8002028:	f001 f965 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024400 	.word	0x58024400

08002038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08e      	sub	sp, #56	; 0x38
 800203c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <MX_GPIO_Init+0x240>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a88      	ldr	r2, [pc, #544]	; (8002278 <MX_GPIO_Init+0x240>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b86      	ldr	r3, [pc, #536]	; (8002278 <MX_GPIO_Init+0x240>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206c:	4b82      	ldr	r3, [pc, #520]	; (8002278 <MX_GPIO_Init+0x240>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002072:	4a81      	ldr	r2, [pc, #516]	; (8002278 <MX_GPIO_Init+0x240>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <MX_GPIO_Init+0x240>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <MX_GPIO_Init+0x240>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002090:	4a79      	ldr	r2, [pc, #484]	; (8002278 <MX_GPIO_Init+0x240>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <MX_GPIO_Init+0x240>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b73      	ldr	r3, [pc, #460]	; (8002278 <MX_GPIO_Init+0x240>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ae:	4a72      	ldr	r2, [pc, #456]	; (8002278 <MX_GPIO_Init+0x240>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b8:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <MX_GPIO_Init+0x240>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c6:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <MX_GPIO_Init+0x240>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <MX_GPIO_Init+0x240>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d6:	4b68      	ldr	r3, [pc, #416]	; (8002278 <MX_GPIO_Init+0x240>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <MX_GPIO_Init+0x240>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	4a63      	ldr	r2, [pc, #396]	; (8002278 <MX_GPIO_Init+0x240>)
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <MX_GPIO_Init+0x240>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <MX_GPIO_Init+0x240>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	4a5b      	ldr	r2, [pc, #364]	; (8002278 <MX_GPIO_Init+0x240>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002112:	4b59      	ldr	r3, [pc, #356]	; (8002278 <MX_GPIO_Init+0x240>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <MX_GPIO_Init+0x240>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002126:	4a54      	ldr	r2, [pc, #336]	; (8002278 <MX_GPIO_Init+0x240>)
 8002128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002130:	4b51      	ldr	r3, [pc, #324]	; (8002278 <MX_GPIO_Init+0x240>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002144:	484d      	ldr	r0, [pc, #308]	; (800227c <MX_GPIO_Init+0x244>)
 8002146:	f004 f903 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002150:	484a      	ldr	r0, [pc, #296]	; (800227c <MX_GPIO_Init+0x244>)
 8002152:	f004 f8fd 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215c:	4848      	ldr	r0, [pc, #288]	; (8002280 <MX_GPIO_Init+0x248>)
 800215e:	f004 f8f7 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002168:	4846      	ldr	r0, [pc, #280]	; (8002284 <MX_GPIO_Init+0x24c>)
 800216a:	f004 f8f1 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002174:	4844      	ldr	r0, [pc, #272]	; (8002288 <MX_GPIO_Init+0x250>)
 8002176:	f004 f8eb 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800217a:	230d      	movs	r3, #13
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	483f      	ldr	r0, [pc, #252]	; (800228c <MX_GPIO_Init+0x254>)
 800218e:	f003 ff17 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8002192:	2308      	movs	r3, #8
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	483a      	ldr	r0, [pc, #232]	; (8002290 <MX_GPIO_Init+0x258>)
 80021a6:	f003 ff0b 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80021aa:	2302      	movs	r3, #2
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ba:	4619      	mov	r1, r3
 80021bc:	4830      	ldr	r0, [pc, #192]	; (8002280 <MX_GPIO_Init+0x248>)
 80021be:	f003 feff 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80021c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	482f      	ldr	r0, [pc, #188]	; (8002294 <MX_GPIO_Init+0x25c>)
 80021d8:	f003 fef2 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80021dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4821      	ldr	r0, [pc, #132]	; (800227c <MX_GPIO_Init+0x244>)
 80021f6:	f003 fee3 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80021fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	481b      	ldr	r0, [pc, #108]	; (8002280 <MX_GPIO_Init+0x248>)
 8002214:	f003 fed4 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	4814      	ldr	r0, [pc, #80]	; (8002284 <MX_GPIO_Init+0x24c>)
 8002232:	f003 fec5 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800223a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	480f      	ldr	r0, [pc, #60]	; (8002288 <MX_GPIO_Init+0x250>)
 800224c:	f003 feb8 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	4807      	ldr	r0, [pc, #28]	; (8002288 <MX_GPIO_Init+0x250>)
 800226a:	f003 fea9 	bl	8005fc0 <HAL_GPIO_Init>

}
 800226e:	bf00      	nop
 8002270:	3738      	adds	r7, #56	; 0x38
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400
 800227c:	58021000 	.word	0x58021000
 8002280:	58020400 	.word	0x58020400
 8002284:	58020c00 	.word	0x58020c00
 8002288:	58021800 	.word	0x58021800
 800228c:	58020800 	.word	0x58020800
 8002290:	58020000 	.word	0x58020000
 8002294:	58021400 	.word	0x58021400

08002298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022a0:	e7fe      	b.n	80022a0 <Error_Handler+0x8>
	...

080022a4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ae:	4802      	ldr	r0, [pc, #8]	; (80022b8 <ST7735_Select+0x14>)
 80022b0:	f004 f84e 	bl	8006350 <HAL_GPIO_WritePin>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	58021000 	.word	0x58021000

080022bc <ST7735_Unselect>:

void ST7735_Unselect() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c6:	4802      	ldr	r0, [pc, #8]	; (80022d0 <ST7735_Unselect+0x14>)
 80022c8:	f004 f842 	bl	8006350 <HAL_GPIO_WritePin>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58021000 	.word	0x58021000

080022d4 <ST7735_Select1>:
static void ST7735_Select1() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022de:	4802      	ldr	r0, [pc, #8]	; (80022e8 <ST7735_Select1+0x14>)
 80022e0:	f004 f836 	bl	8006350 <HAL_GPIO_WritePin>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	58021000 	.word	0x58021000

080022ec <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f6:	4802      	ldr	r0, [pc, #8]	; (8002300 <ST7735_Unselect1+0x14>)
 80022f8:	f004 f82a 	bl	8006350 <HAL_GPIO_WritePin>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	58021000 	.word	0x58021000

08002304 <ST7735_Reset>:

static void ST7735_Reset() {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <ST7735_Reset+0x28>)
 8002310:	f004 f81e 	bl	8006350 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002314:	2005      	movs	r0, #5
 8002316:	f000 feb5 	bl	8003084 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <ST7735_Reset+0x28>)
 8002322:	f004 f815 	bl	8006350 <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	58021000 	.word	0x58021000

08002330 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <ST7735_WriteCommand+0x2c>)
 8002342:	f004 f805 	bl	8006350 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002346:	1df9      	adds	r1, r7, #7
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	2201      	movs	r2, #1
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <ST7735_WriteCommand+0x30>)
 8002350:	f006 fe3a 	bl	8008fc8 <HAL_SPI_Transmit>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58021800 	.word	0x58021800
 8002360:	24000250 	.word	0x24000250

08002364 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <ST7735_WriteData+0x30>)
 8002376:	f003 ffeb 	bl	8006350 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <ST7735_WriteData+0x34>)
 8002386:	f006 fe1f 	bl	8008fc8 <HAL_SPI_Transmit>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	58021800 	.word	0x58021800
 8002398:	24000250 	.word	0x24000250

0800239c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80023ae:	e034      	b.n	800241a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffb7 	bl	8002330 <ST7735_WriteCommand>

        numArgs = *addr++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80023cc:	7abb      	ldrb	r3, [r7, #10]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80023d6:	7abb      	ldrb	r3, [r7, #10]
 80023d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023dc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80023de:	7abb      	ldrb	r3, [r7, #10]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80023e4:	7abb      	ldrb	r3, [r7, #10]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffbb 	bl	8002364 <ST7735_WriteData>
            addr += numArgs;
 80023ee:	7abb      	ldrb	r3, [r7, #10]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80023f6:	89bb      	ldrh	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002406:	89bb      	ldrh	r3, [r7, #12]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d102      	bne.n	8002412 <ST7735_ExecuteCommandList+0x76>
 800240c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002410:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002412:	89bb      	ldrh	r3, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe35 	bl	8003084 <HAL_Delay>
    while(numCommands--) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	73fa      	strb	r2, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1c5      	bne.n	80023b0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	4604      	mov	r4, r0
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4603      	mov	r3, r0
 8002442:	71bb      	strb	r3, [r7, #6]
 8002444:	460b      	mov	r3, r1
 8002446:	717b      	strb	r3, [r7, #5]
 8002448:	4613      	mov	r3, r2
 800244a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800244c:	202a      	movs	r0, #42	; 0x2a
 800244e:	f7ff ff6f 	bl	8002330 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002452:	2300      	movs	r3, #0
 8002454:	733b      	strb	r3, [r7, #12]
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	3302      	adds	r3, #2
 800245a:	b2db      	uxtb	r3, r3
 800245c:	737b      	strb	r3, [r7, #13]
 800245e:	2300      	movs	r3, #0
 8002460:	73bb      	strb	r3, [r7, #14]
 8002462:	797b      	ldrb	r3, [r7, #5]
 8002464:	3302      	adds	r3, #2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2104      	movs	r1, #4
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff77 	bl	8002364 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002476:	202b      	movs	r0, #43	; 0x2b
 8002478:	f7ff ff5a 	bl	8002330 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	3301      	adds	r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002484:	793b      	ldrb	r3, [r7, #4]
 8002486:	3301      	adds	r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	2104      	movs	r1, #4
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff66 	bl	8002364 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f7ff ff49 	bl	8002330 <ST7735_WriteCommand>
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}
	...

080024a8 <ST7735_Init>:

void ST7735_Init() {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    ST7735_Select();
 80024ac:	f7ff fefa 	bl	80022a4 <ST7735_Select>
    ST7735_Select1();
 80024b0:	f7ff ff10 	bl	80022d4 <ST7735_Select1>
    ST7735_Reset();
 80024b4:	f7ff ff26 	bl	8002304 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80024b8:	4807      	ldr	r0, [pc, #28]	; (80024d8 <ST7735_Init+0x30>)
 80024ba:	f7ff ff6f 	bl	800239c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <ST7735_Init+0x34>)
 80024c0:	f7ff ff6c 	bl	800239c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <ST7735_Init+0x38>)
 80024c6:	f7ff ff69 	bl	800239c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80024ca:	f7ff fef7 	bl	80022bc <ST7735_Unselect>
    ST7735_Unselect1();
 80024ce:	f7ff ff0d 	bl	80022ec <ST7735_Unselect1>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0800d494 	.word	0x0800d494
 80024dc:	0800d4d0 	.word	0x0800d4d0
 80024e0:	0800d4e0 	.word	0x0800d4e0

080024e4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80024e4:	b082      	sub	sp, #8
 80024e6:	b590      	push	{r4, r7, lr}
 80024e8:	b089      	sub	sp, #36	; 0x24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
 80024f2:	460b      	mov	r3, r1
 80024f4:	80bb      	strh	r3, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	b2d9      	uxtb	r1, r3
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800250a:	4413      	add	r3, r2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b2dc      	uxtb	r4, r3
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800251a:	4413      	add	r3, r2
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4622      	mov	r2, r4
 8002524:	f7ff ff83 	bl	800242e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e043      	b.n	80025b6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800252e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	3b20      	subs	r3, #32
 8002534:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4619      	mov	r1, r3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	440b      	add	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e029      	b.n	80025a4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002560:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b29b      	uxth	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	743b      	strb	r3, [r7, #16]
 800256a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800256c:	b2db      	uxtb	r3, r3
 800256e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	2102      	movs	r1, #2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fef4 	bl	8002364 <ST7735_WriteData>
 800257c:	e00f      	b.n	800259e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800257e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29b      	uxth	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	733b      	strb	r3, [r7, #12]
 800258a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800258e:	b2db      	uxtb	r3, r3
 8002590:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fee3 	bl	8002364 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025a8:	461a      	mov	r2, r3
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d3cf      	bcc.n	8002550 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ba:	461a      	mov	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d3b5      	bcc.n	800252e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80025ce:	b002      	add	sp, #8
 80025d0:	4770      	bx	lr

080025d2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80025d2:	b082      	sub	sp, #8
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af04      	add	r7, sp, #16
 80025da:	603a      	str	r2, [r7, #0]
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	460b      	mov	r3, r1
 80025e4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80025e6:	f7ff fe5d 	bl	80022a4 <ST7735_Select>

    while(*str) {
 80025ea:	e02d      	b.n	8002648 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	7d3a      	ldrb	r2, [r7, #20]
 80025f0:	4413      	add	r3, r2
 80025f2:	2b7f      	cmp	r3, #127	; 0x7f
 80025f4:	dd13      	ble.n	800261e <ST7735_WriteString+0x4c>
            x = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80025fa:	7d7b      	ldrb	r3, [r7, #21]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002604:	88bb      	ldrh	r3, [r7, #4]
 8002606:	7d7a      	ldrb	r2, [r7, #21]
 8002608:	4413      	add	r3, r2
 800260a:	2b7f      	cmp	r3, #127	; 0x7f
 800260c:	dc21      	bgt.n	8002652 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b20      	cmp	r3, #32
 8002614:	d103      	bne.n	800261e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	603b      	str	r3, [r7, #0]
                continue;
 800261c:	e014      	b.n	8002648 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	88b9      	ldrh	r1, [r7, #4]
 8002624:	88f8      	ldrh	r0, [r7, #6]
 8002626:	8c3b      	ldrh	r3, [r7, #32]
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	8bbb      	ldrh	r3, [r7, #28]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f7ff ff56 	bl	80024e4 <ST7735_WriteChar>
        x += font.width;
 8002638:	7d3b      	ldrb	r3, [r7, #20]
 800263a:	b29a      	uxth	r2, r3
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	4413      	add	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
        str++;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1cd      	bne.n	80025ec <ST7735_WriteString+0x1a>
 8002650:	e000      	b.n	8002654 <ST7735_WriteString+0x82>
                break;
 8002652:	bf00      	nop
    }

    ST7735_Unselect();
 8002654:	f7ff fe32 	bl	80022bc <ST7735_Unselect>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002662:	b002      	add	sp, #8
 8002664:	4770      	bx	lr

08002666 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002666:	b082      	sub	sp, #8
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af04      	add	r7, sp, #16
 800266e:	603a      	str	r2, [r7, #0]
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
 8002676:	460b      	mov	r3, r1
 8002678:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 800267a:	f7ff fe2b 	bl	80022d4 <ST7735_Select1>

    while(*str) {
 800267e:	e02d      	b.n	80026dc <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	7d3a      	ldrb	r2, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	2b7f      	cmp	r3, #127	; 0x7f
 8002688:	dd13      	ble.n	80026b2 <ST7735_WriteString1+0x4c>
            x = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800268e:	7d7b      	ldrb	r3, [r7, #21]
 8002690:	b29a      	uxth	r2, r3
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002698:	88bb      	ldrh	r3, [r7, #4]
 800269a:	7d7a      	ldrb	r2, [r7, #21]
 800269c:	4413      	add	r3, r2
 800269e:	2b7f      	cmp	r3, #127	; 0x7f
 80026a0:	dc21      	bgt.n	80026e6 <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d103      	bne.n	80026b2 <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	603b      	str	r3, [r7, #0]
                continue;
 80026b0:	e014      	b.n	80026dc <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	88b9      	ldrh	r1, [r7, #4]
 80026b8:	88f8      	ldrh	r0, [r7, #6]
 80026ba:	8c3b      	ldrh	r3, [r7, #32]
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	8bbb      	ldrh	r3, [r7, #28]
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f7ff ff0c 	bl	80024e4 <ST7735_WriteChar>
        x += font.width;
 80026cc:	7d3b      	ldrb	r3, [r7, #20]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4413      	add	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
        str++;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	603b      	str	r3, [r7, #0]
    while(*str) {
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1cd      	bne.n	8002680 <ST7735_WriteString1+0x1a>
 80026e4:	e000      	b.n	80026e8 <ST7735_WriteString1+0x82>
                break;
 80026e6:	bf00      	nop
    }

    ST7735_Unselect1();
 80026e8:	f7ff fe00 	bl	80022ec <ST7735_Unselect1>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026f6:	b002      	add	sp, #8
 80026f8:	4770      	bx	lr
	...

080026fc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4623      	mov	r3, r4
 800270c:	80fb      	strh	r3, [r7, #6]
 800270e:	4603      	mov	r3, r0
 8002710:	80bb      	strh	r3, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	807b      	strh	r3, [r7, #2]
 8002716:	4613      	mov	r3, r2
 8002718:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	2b7f      	cmp	r3, #127	; 0x7f
 800271e:	d858      	bhi.n	80027d2 <ST7735_FillRectangle+0xd6>
 8002720:	88bb      	ldrh	r3, [r7, #4]
 8002722:	2b7f      	cmp	r3, #127	; 0x7f
 8002724:	d855      	bhi.n	80027d2 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4413      	add	r3, r2
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	dd03      	ble.n	8002738 <ST7735_FillRectangle+0x3c>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002736:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002738:	88ba      	ldrh	r2, [r7, #4]
 800273a:	883b      	ldrh	r3, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	dd03      	ble.n	800274a <ST7735_FillRectangle+0x4e>
 8002742:	88bb      	ldrh	r3, [r7, #4]
 8002744:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002748:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800274a:	f7ff fdab 	bl	80022a4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	b2d8      	uxtb	r0, r3
 8002752:	88bb      	ldrh	r3, [r7, #4]
 8002754:	b2d9      	uxtb	r1, r3
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b2dc      	uxtb	r4, r3
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	883b      	ldrh	r3, [r7, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4413      	add	r3, r2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4622      	mov	r2, r4
 8002778:	f7ff fe59 	bl	800242e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800277c:	8c3b      	ldrh	r3, [r7, #32]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b29b      	uxth	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	733b      	strb	r3, [r7, #12]
 8002786:	8c3b      	ldrh	r3, [r7, #32]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002792:	4812      	ldr	r0, [pc, #72]	; (80027dc <ST7735_FillRectangle+0xe0>)
 8002794:	f003 fddc 	bl	8006350 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002798:	883b      	ldrh	r3, [r7, #0]
 800279a:	80bb      	strh	r3, [r7, #4]
 800279c:	e013      	b.n	80027c6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	80fb      	strh	r3, [r7, #6]
 80027a2:	e00a      	b.n	80027ba <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80027a4:	f107 010c 	add.w	r1, r7, #12
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	2202      	movs	r2, #2
 80027ae:	480c      	ldr	r0, [pc, #48]	; (80027e0 <ST7735_FillRectangle+0xe4>)
 80027b0:	f006 fc0a 	bl	8008fc8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	80fb      	strh	r3, [r7, #6]
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f1      	bne.n	80027a4 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80027c0:	88bb      	ldrh	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	80bb      	strh	r3, [r7, #4]
 80027c6:	88bb      	ldrh	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e8      	bne.n	800279e <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80027cc:	f7ff fd76 	bl	80022bc <ST7735_Unselect>
 80027d0:	e000      	b.n	80027d4 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80027d2:	bf00      	nop
}
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	bf00      	nop
 80027dc:	58021800 	.word	0x58021800
 80027e0:	24000250 	.word	0x24000250

080027e4 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	80fb      	strh	r3, [r7, #6]
 80027f6:	4603      	mov	r3, r0
 80027f8:	80bb      	strh	r3, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]
 80027fe:	4613      	mov	r3, r2
 8002800:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b7f      	cmp	r3, #127	; 0x7f
 8002806:	d858      	bhi.n	80028ba <ST7735_FillRectangle1+0xd6>
 8002808:	88bb      	ldrh	r3, [r7, #4]
 800280a:	2b7f      	cmp	r3, #127	; 0x7f
 800280c:	d855      	bhi.n	80028ba <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	4413      	add	r3, r2
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	dd03      	ble.n	8002820 <ST7735_FillRectangle1+0x3c>
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800281e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002820:	88ba      	ldrh	r2, [r7, #4]
 8002822:	883b      	ldrh	r3, [r7, #0]
 8002824:	4413      	add	r3, r2
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	dd03      	ble.n	8002832 <ST7735_FillRectangle1+0x4e>
 800282a:	88bb      	ldrh	r3, [r7, #4]
 800282c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002830:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8002832:	f7ff fd4f 	bl	80022d4 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4413      	add	r3, r2
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b2dc      	uxtb	r4, r3
 800284e:	88bb      	ldrh	r3, [r7, #4]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	883b      	ldrh	r3, [r7, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4413      	add	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4622      	mov	r2, r4
 8002860:	f7ff fde5 	bl	800242e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002864:	8c3b      	ldrh	r3, [r7, #32]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29b      	uxth	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	733b      	strb	r3, [r7, #12]
 800286e:	8c3b      	ldrh	r3, [r7, #32]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287a:	4812      	ldr	r0, [pc, #72]	; (80028c4 <ST7735_FillRectangle1+0xe0>)
 800287c:	f003 fd68 	bl	8006350 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002880:	883b      	ldrh	r3, [r7, #0]
 8002882:	80bb      	strh	r3, [r7, #4]
 8002884:	e013      	b.n	80028ae <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	e00a      	b.n	80028a2 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800288c:	f107 010c 	add.w	r1, r7, #12
 8002890:	f04f 33ff 	mov.w	r3, #4294967295
 8002894:	2202      	movs	r2, #2
 8002896:	480c      	ldr	r0, [pc, #48]	; (80028c8 <ST7735_FillRectangle1+0xe4>)
 8002898:	f006 fb96 	bl	8008fc8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	3b01      	subs	r3, #1
 80028a0:	80fb      	strh	r3, [r7, #6]
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f1      	bne.n	800288c <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80028a8:	88bb      	ldrh	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	80bb      	strh	r3, [r7, #4]
 80028ae:	88bb      	ldrh	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e8      	bne.n	8002886 <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80028b4:	f7ff fd1a 	bl	80022ec <ST7735_Unselect1>
 80028b8:	e000      	b.n	80028bc <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80028ba:	bf00      	nop
}
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	58021800 	.word	0x58021800
 80028c8:	24000250 	.word	0x24000250

080028cc <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	2100      	movs	r1, #0
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7ff ff0b 	bl	80026fc <ST7735_FillRectangle>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af02      	add	r7, sp, #8
 80028f4:	4603      	mov	r3, r0
 80028f6:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff ff6e 	bl	80027e4 <ST7735_FillRectangle1>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_MspInit+0x30>)
 8002918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800291c:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MspInit+0x30>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x30>)
 8002928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	58024400 	.word	0x58024400

08002944 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a59      	ldr	r2, [pc, #356]	; (8002ac8 <HAL_ETH_MspInit+0x184>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f040 80ab 	bne.w	8002abe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <HAL_ETH_MspInit+0x188>)
 800296a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002978:	4b54      	ldr	r3, [pc, #336]	; (8002acc <HAL_ETH_MspInit+0x188>)
 800297a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800297e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_ETH_MspInit+0x188>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80029a4:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029aa:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	4a40      	ldr	r2, [pc, #256]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_ETH_MspInit+0x188>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	4a31      	ldr	r2, [pc, #196]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_ETH_MspInit+0x188>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a3a:	2332      	movs	r3, #50	; 0x32
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	481e      	ldr	r0, [pc, #120]	; (8002ad0 <HAL_ETH_MspInit+0x18c>)
 8002a56:	f003 fab3 	bl	8005fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a5a:	2386      	movs	r3, #134	; 0x86
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a6a:	230b      	movs	r3, #11
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	4817      	ldr	r0, [pc, #92]	; (8002ad4 <HAL_ETH_MspInit+0x190>)
 8002a76:	f003 faa3 	bl	8005fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a8c:	230b      	movs	r3, #11
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	4619      	mov	r1, r3
 8002a96:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <HAL_ETH_MspInit+0x194>)
 8002a98:	f003 fa92 	bl	8005fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002a9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aae:	230b      	movs	r3, #11
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <HAL_ETH_MspInit+0x198>)
 8002aba:	f003 fa81 	bl	8005fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3738      	adds	r7, #56	; 0x38
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40028000 	.word	0x40028000
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	58020800 	.word	0x58020800
 8002ad4:	58020000 	.word	0x58020000
 8002ad8:	58020400 	.word	0x58020400
 8002adc:	58021800 	.word	0x58021800

08002ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_SPI_MspInit+0xc8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d14d      	bne.n	8002b9e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b08:	4a28      	ldr	r2, [pc, #160]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b64:	2302      	movs	r3, #2
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4619      	mov	r1, r3
 8002b76:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <HAL_SPI_MspInit+0xd0>)
 8002b78:	f003 fa22 	bl	8005fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b8e:	2306      	movs	r3, #6
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4619      	mov	r1, r3
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <HAL_SPI_MspInit+0xd4>)
 8002b9a:	f003 fa11 	bl	8005fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b9e:	bf00      	nop
 8002ba0:	3728      	adds	r7, #40	; 0x28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40003c00 	.word	0x40003c00
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	58020400 	.word	0x58020400
 8002bb4:	58020800 	.word	0x58020800

08002bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0b8      	sub	sp, #224	; 0xe0
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	22bc      	movs	r2, #188	; 0xbc
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f008 fcf9 	bl	800b5d0 <memset>
  if(huart->Instance==USART3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_UART_MspInit+0x188>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f040 80a6 	bne.w	8002d36 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bea:	2302      	movs	r3, #2
 8002bec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fd77 	bl	80076ec <HAL_RCCEx_PeriphCLKConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002c04:	f7ff fb48 	bl	8002298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c0e:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c18:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2c:	4a45      	ldr	r2, [pc, #276]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c2e:	f043 0308 	orr.w	r3, r3, #8
 8002c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c36:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_UART_MspInit+0x18c>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c5e:	2307      	movs	r3, #7
 8002c60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4837      	ldr	r0, [pc, #220]	; (8002d48 <HAL_UART_MspInit+0x190>)
 8002c6c:	f003 f9a8 	bl	8005fc0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_UART_MspInit+0x198>)
 8002c74:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002c76:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c78:	222d      	movs	r2, #45	; 0x2d
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c82:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002cb0:	4826      	ldr	r0, [pc, #152]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002cb2:	f000 fb3b 	bl	800332c <HAL_DMA_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002cbc:	f7ff faec 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002cc4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_UART_MspInit+0x194>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_UART_MspInit+0x1a0>)
 8002cd0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cd4:	222e      	movs	r2, #46	; 0x2e
 8002cd6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d0a:	4812      	ldr	r0, [pc, #72]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002d0c:	f000 fb0e 	bl	800332c <HAL_DMA_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002d16:	f7ff fabf 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002d1e:	679a      	str	r2, [r3, #120]	; 0x78
 8002d20:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <HAL_UART_MspInit+0x19c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2027      	movs	r0, #39	; 0x27
 8002d2c:	f000 fac9 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d30:	2027      	movs	r0, #39	; 0x27
 8002d32:	f000 fae0 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d36:	bf00      	nop
 8002d38:	37e0      	adds	r7, #224	; 0xe0
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40004800 	.word	0x40004800
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58020c00 	.word	0x58020c00
 8002d4c:	24000368 	.word	0x24000368
 8002d50:	40020028 	.word	0x40020028
 8002d54:	240003e0 	.word	0x240003e0
 8002d58:	40020070 	.word	0x40020070

08002d5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <HAL_PCD_MspInit+0xa8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d13d      	bne.n	8002dfa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002d7e:	f003 fceb 	bl	8006758 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002da0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002db2:	230a      	movs	r3, #10
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <HAL_PCD_MspInit+0xb0>)
 8002dbe:	f003 f8ff 	bl	8005fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	480d      	ldr	r0, [pc, #52]	; (8002e0c <HAL_PCD_MspInit+0xb0>)
 8002dd8:	f003 f8f2 	bl	8005fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002de8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_PCD_MspInit+0xac>)
 8002dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40080000 	.word	0x40080000
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58020000 	.word	0x58020000

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <NMI_Handler+0x4>

08002e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <HardFault_Handler+0x4>

08002e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <MemManage_Handler+0x4>

08002e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <BusFault_Handler+0x4>

08002e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <UsageFault_Handler+0x4>

08002e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5c:	f000 f8f2 	bl	8003044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <DMA1_Stream1_IRQHandler+0x10>)
 8002e6a:	f001 fb1f 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	24000368 	.word	0x24000368

08002e78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <DMA1_Stream4_IRQHandler+0x10>)
 8002e7e:	f001 fb15 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	240003e0 	.word	0x240003e0

08002e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <USART3_IRQHandler+0x10>)
 8002e92:	f006 fbc5 	bl	8009620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	240002d8 	.word	0x240002d8

08002ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <_sbrk+0x5c>)
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <_sbrk+0x60>)
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <_sbrk+0x64>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <_sbrk+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed0:	f008 fb54 	bl	800b57c <__errno>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	e009      	b.n	8002ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <_sbrk+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <_sbrk+0x64>)
 8002ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	24080000 	.word	0x24080000
 8002f00:	00000400 	.word	0x00000400
 8002f04:	24000ca4 	.word	0x24000ca4
 8002f08:	24000cc0 	.word	0x24000cc0

08002f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f10:	f7fe fd7e 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f008 fb25 	bl	800b588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3e:	f7fe fdfd 	bl	8001b3c <main>
  bx  lr
 8002f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f4c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002f50:	0800d580 	.word	0x0800d580
  ldr r2, =_sbss
 8002f54:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002f58:	24000cbc 	.word	0x24000cbc

08002f5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC3_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f000 f9a0 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f6c:	f004 f9e8 	bl	8007340 <HAL_RCC_GetSysClockFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_Init+0x68>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	4913      	ldr	r1, [pc, #76]	; (8002fcc <HAL_Init+0x6c>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_Init+0x68>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_Init+0x6c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_Init+0x70>)
 8002fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <HAL_Init+0x74>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f814 	bl	8002fd8 <HAL_InitTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e002      	b.n	8002fc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fba:	f7ff fca9 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	0800bfbc 	.word	0x0800bfbc
 8002fd0:	24000004 	.word	0x24000004
 8002fd4:	24000000 	.word	0x24000000

08002fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_InitTick+0x60>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e021      	b.n	8003030 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_InitTick+0x64>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_InitTick+0x60>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f985 	bl	8003312 <HAL_SYSTICK_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00e      	b.n	8003030 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d80a      	bhi.n	800302e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003018:	2200      	movs	r2, #0
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f000 f94f 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_InitTick+0x68>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	2400001c 	.word	0x2400001c
 800303c:	24000000 	.word	0x24000000
 8003040:	24000018 	.word	0x24000018

08003044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_IncTick+0x20>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x24>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4413      	add	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_IncTick+0x24>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	2400001c 	.word	0x2400001c
 8003068:	24000ca8 	.word	0x24000ca8

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	24000ca8 	.word	0x24000ca8

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d005      	beq.n	80030aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_Delay+0x44>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030aa:	bf00      	nop
 80030ac:	f7ff ffde 	bl	800306c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d8f7      	bhi.n	80030ac <HAL_Delay+0x28>
  {
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2400001c 	.word	0x2400001c

080030cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_GetREVID+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0c1b      	lsrs	r3, r3, #16
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	5c001000 	.word	0x5c001000

080030e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80030f4:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	58000400 	.word	0x58000400

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	05fa0000 	.word	0x05fa0000

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff40 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff90 	bl	8003200 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5f 	bl	80031ac <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff33 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa4 	bl	8003268 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff fe9a 	bl	800306c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e316      	b.n	8003972 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a66      	ldr	r2, [pc, #408]	; (80034e4 <HAL_DMA_Init+0x1b8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d04a      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <HAL_DMA_Init+0x1bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d045      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a63      	ldr	r2, [pc, #396]	; (80034ec <HAL_DMA_Init+0x1c0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d040      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a62      	ldr	r2, [pc, #392]	; (80034f0 <HAL_DMA_Init+0x1c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d03b      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a60      	ldr	r2, [pc, #384]	; (80034f4 <HAL_DMA_Init+0x1c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d036      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5f      	ldr	r2, [pc, #380]	; (80034f8 <HAL_DMA_Init+0x1cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d031      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5d      	ldr	r2, [pc, #372]	; (80034fc <HAL_DMA_Init+0x1d0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02c      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_DMA_Init+0x1d4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d027      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_DMA_Init+0x1d8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a59      	ldr	r2, [pc, #356]	; (8003508 <HAL_DMA_Init+0x1dc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01d      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_DMA_Init+0x1e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_DMA_Init+0x1e4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_DMA_Init+0x1e8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a53      	ldr	r2, [pc, #332]	; (8003518 <HAL_DMA_Init+0x1ec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a51      	ldr	r2, [pc, #324]	; (800351c <HAL_DMA_Init+0x1f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_Init+0xb8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a50      	ldr	r2, [pc, #320]	; (8003520 <HAL_DMA_Init+0x1f4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_DMA_Init+0xbc>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_DMA_Init+0xbe>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 813b 	beq.w	8003666 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a37      	ldr	r2, [pc, #220]	; (80034e4 <HAL_DMA_Init+0x1b8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d04a      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a36      	ldr	r2, [pc, #216]	; (80034e8 <HAL_DMA_Init+0x1bc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d045      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_DMA_Init+0x1c0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d040      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <HAL_DMA_Init+0x1c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d03b      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <HAL_DMA_Init+0x1c8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d036      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <HAL_DMA_Init+0x1cc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d031      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_DMA_Init+0x1d0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d02c      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <HAL_DMA_Init+0x1d4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d027      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_DMA_Init+0x1d8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d022      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <HAL_DMA_Init+0x1dc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01d      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_DMA_Init+0x1e0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d018      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_DMA_Init+0x1e4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_DMA_Init+0x1e8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a24      	ldr	r2, [pc, #144]	; (8003518 <HAL_DMA_Init+0x1ec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_DMA_Init+0x1f0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_DMA_Init+0x174>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_DMA_Init+0x1f4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <HAL_DMA_Init+0x186>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e007      	b.n	80034c2 <HAL_DMA_Init+0x196>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034c2:	e02f      	b.n	8003524 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c4:	f7ff fdd2 	bl	800306c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d928      	bls.n	8003524 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2203      	movs	r2, #3
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e246      	b.n	8003972 <HAL_DMA_Init+0x646>
 80034e4:	40020010 	.word	0x40020010
 80034e8:	40020028 	.word	0x40020028
 80034ec:	40020040 	.word	0x40020040
 80034f0:	40020058 	.word	0x40020058
 80034f4:	40020070 	.word	0x40020070
 80034f8:	40020088 	.word	0x40020088
 80034fc:	400200a0 	.word	0x400200a0
 8003500:	400200b8 	.word	0x400200b8
 8003504:	40020410 	.word	0x40020410
 8003508:	40020428 	.word	0x40020428
 800350c:	40020440 	.word	0x40020440
 8003510:	40020458 	.word	0x40020458
 8003514:	40020470 	.word	0x40020470
 8003518:	40020488 	.word	0x40020488
 800351c:	400204a0 	.word	0x400204a0
 8003520:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1c8      	bne.n	80034c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4b83      	ldr	r3, [pc, #524]	; (800374c <HAL_DMA_Init+0x420>)
 800353e:	4013      	ands	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800354a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003556:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b04      	cmp	r3, #4
 8003576:	d107      	bne.n	8003588 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4313      	orrs	r3, r2
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003588:	4b71      	ldr	r3, [pc, #452]	; (8003750 <HAL_DMA_Init+0x424>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b71      	ldr	r3, [pc, #452]	; (8003754 <HAL_DMA_Init+0x428>)
 800358e:	4013      	ands	r3, r2
 8003590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003594:	d328      	bcc.n	80035e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b28      	cmp	r3, #40	; 0x28
 800359c:	d903      	bls.n	80035a6 <HAL_DMA_Init+0x27a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b2e      	cmp	r3, #46	; 0x2e
 80035a4:	d917      	bls.n	80035d6 <HAL_DMA_Init+0x2aa>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b3e      	cmp	r3, #62	; 0x3e
 80035ac:	d903      	bls.n	80035b6 <HAL_DMA_Init+0x28a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b42      	cmp	r3, #66	; 0x42
 80035b4:	d90f      	bls.n	80035d6 <HAL_DMA_Init+0x2aa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b46      	cmp	r3, #70	; 0x46
 80035bc:	d903      	bls.n	80035c6 <HAL_DMA_Init+0x29a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b48      	cmp	r3, #72	; 0x48
 80035c4:	d907      	bls.n	80035d6 <HAL_DMA_Init+0x2aa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b4e      	cmp	r3, #78	; 0x4e
 80035cc:	d905      	bls.n	80035da <HAL_DMA_Init+0x2ae>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b52      	cmp	r3, #82	; 0x52
 80035d4:	d801      	bhi.n	80035da <HAL_DMA_Init+0x2ae>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_DMA_Init+0x2b0>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0307 	bic.w	r3, r3, #7
 80035fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b04      	cmp	r3, #4
 8003610:	d117      	bne.n	8003642 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 ff1d 	bl	8005464 <DMA_CheckFifoParam>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e197      	b.n	8003972 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fe58 	bl	8005300 <DMA_CalcBaseAndBitshift>
 8003650:	4603      	mov	r3, r0
 8003652:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	223f      	movs	r2, #63	; 0x3f
 800365e:	409a      	lsls	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e0cd      	b.n	8003802 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3b      	ldr	r2, [pc, #236]	; (8003758 <HAL_DMA_Init+0x42c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_DMA_Init+0x430>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_DMA_Init+0x434>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a36      	ldr	r2, [pc, #216]	; (8003764 <HAL_DMA_Init+0x438>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a35      	ldr	r2, [pc, #212]	; (8003768 <HAL_DMA_Init+0x43c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_DMA_Init+0x440>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a32      	ldr	r2, [pc, #200]	; (8003770 <HAL_DMA_Init+0x444>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_Init+0x38a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_DMA_Init+0x448>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_Init+0x38e>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_DMA_Init+0x390>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8097 	beq.w	80037f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a24      	ldr	r2, [pc, #144]	; (8003758 <HAL_DMA_Init+0x42c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d021      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_DMA_Init+0x430>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01c      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_DMA_Init+0x434>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d017      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_DMA_Init+0x438>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d012      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_DMA_Init+0x43c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_DMA_Init+0x440>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d008      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_DMA_Init+0x444>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <HAL_DMA_Init+0x3e4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_DMA_Init+0x448>)
 800370e:	4293      	cmp	r3, r2
 8003710:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_DMA_Init+0x44c>)
 800372e:	4013      	ands	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d020      	beq.n	800377c <HAL_DMA_Init+0x450>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d102      	bne.n	8003748 <HAL_DMA_Init+0x41c>
 8003742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003746:	e01a      	b.n	800377e <HAL_DMA_Init+0x452>
 8003748:	2300      	movs	r3, #0
 800374a:	e018      	b.n	800377e <HAL_DMA_Init+0x452>
 800374c:	fe10803f 	.word	0xfe10803f
 8003750:	5c001000 	.word	0x5c001000
 8003754:	ffff0000 	.word	0xffff0000
 8003758:	58025408 	.word	0x58025408
 800375c:	5802541c 	.word	0x5802541c
 8003760:	58025430 	.word	0x58025430
 8003764:	58025444 	.word	0x58025444
 8003768:	58025458 	.word	0x58025458
 800376c:	5802546c 	.word	0x5802546c
 8003770:	58025480 	.word	0x58025480
 8003774:	58025494 	.word	0x58025494
 8003778:	fffe000f 	.word	0xfffe000f
 800377c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800378c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800379c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b6e      	ldr	r3, [pc, #440]	; (800397c <HAL_DMA_Init+0x650>)
 80037c4:	4413      	add	r3, r2
 80037c6:	4a6e      	ldr	r2, [pc, #440]	; (8003980 <HAL_DMA_Init+0x654>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f001 fd93 	bl	8005300 <DMA_CalcBaseAndBitshift>
 80037da:	4603      	mov	r3, r0
 80037dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2201      	movs	r2, #1
 80037e8:	409a      	lsls	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e008      	b.n	8003802 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0b7      	b.n	8003972 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5f      	ldr	r2, [pc, #380]	; (8003984 <HAL_DMA_Init+0x658>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d072      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <HAL_DMA_Init+0x65c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d06d      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5c      	ldr	r2, [pc, #368]	; (800398c <HAL_DMA_Init+0x660>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d068      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_DMA_Init+0x664>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d063      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_DMA_Init+0x668>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d05e      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_DMA_Init+0x66c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d059      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_DMA_Init+0x670>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d054      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_DMA_Init+0x674>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d04f      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a53      	ldr	r2, [pc, #332]	; (80039a4 <HAL_DMA_Init+0x678>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HAL_DMA_Init+0x67c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a50      	ldr	r2, [pc, #320]	; (80039ac <HAL_DMA_Init+0x680>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4e      	ldr	r2, [pc, #312]	; (80039b0 <HAL_DMA_Init+0x684>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <HAL_DMA_Init+0x688>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_DMA_Init+0x68c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4a      	ldr	r2, [pc, #296]	; (80039bc <HAL_DMA_Init+0x690>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <HAL_DMA_Init+0x694>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a47      	ldr	r2, [pc, #284]	; (80039c4 <HAL_DMA_Init+0x698>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a45      	ldr	r2, [pc, #276]	; (80039c8 <HAL_DMA_Init+0x69c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a44      	ldr	r2, [pc, #272]	; (80039cc <HAL_DMA_Init+0x6a0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <HAL_DMA_Init+0x6a4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_DMA_Init+0x6a8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <HAL_DMA_Init+0x6ac>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <HAL_DMA_Init+0x6b0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Init+0x5c6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <HAL_DMA_Init+0x6b4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_DMA_Init+0x5ca>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_Init+0x5cc>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d032      	beq.n	8003962 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f001 fe2d 	bl	800555c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d102      	bne.n	8003910 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003924:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_DMA_Init+0x624>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d80c      	bhi.n	8003950 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f001 feaa 	bl	8005690 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e008      	b.n	8003962 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	a7fdabf8 	.word	0xa7fdabf8
 8003980:	cccccccd 	.word	0xcccccccd
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
 80039c4:	58025408 	.word	0x58025408
 80039c8:	5802541c 	.word	0x5802541c
 80039cc:	58025430 	.word	0x58025430
 80039d0:	58025444 	.word	0x58025444
 80039d4:	58025458 	.word	0x58025458
 80039d8:	5802546c 	.word	0x5802546c
 80039dc:	58025480 	.word	0x58025480
 80039e0:	58025494 	.word	0x58025494

080039e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff fb3e 	bl	800306c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2dc      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e2cd      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a76      	ldr	r2, [pc, #472]	; (8003bf8 <HAL_DMA_Abort+0x214>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d04a      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	; (8003bfc <HAL_DMA_Abort+0x218>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d045      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	; (8003c00 <HAL_DMA_Abort+0x21c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d040      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a71      	ldr	r2, [pc, #452]	; (8003c04 <HAL_DMA_Abort+0x220>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d03b      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a70      	ldr	r2, [pc, #448]	; (8003c08 <HAL_DMA_Abort+0x224>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d036      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	; (8003c0c <HAL_DMA_Abort+0x228>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d031      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6d      	ldr	r2, [pc, #436]	; (8003c10 <HAL_DMA_Abort+0x22c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d02c      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6b      	ldr	r2, [pc, #428]	; (8003c14 <HAL_DMA_Abort+0x230>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d027      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6a      	ldr	r2, [pc, #424]	; (8003c18 <HAL_DMA_Abort+0x234>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d022      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a68      	ldr	r2, [pc, #416]	; (8003c1c <HAL_DMA_Abort+0x238>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_DMA_Abort+0x23c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d018      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	; (8003c24 <HAL_DMA_Abort+0x240>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a64      	ldr	r2, [pc, #400]	; (8003c28 <HAL_DMA_Abort+0x244>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a62      	ldr	r2, [pc, #392]	; (8003c2c <HAL_DMA_Abort+0x248>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <HAL_DMA_Abort+0x24c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_DMA_Abort+0xd6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5f      	ldr	r2, [pc, #380]	; (8003c34 <HAL_DMA_Abort+0x250>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_DMA_Abort+0xda>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_DMA_Abort+0xdc>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 021e 	bic.w	r2, r2, #30
 8003ad2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e00a      	b.n	8003b02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 020e 	bic.w	r2, r2, #14
 8003afa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <HAL_DMA_Abort+0x214>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d072      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3a      	ldr	r2, [pc, #232]	; (8003bfc <HAL_DMA_Abort+0x218>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d06d      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a39      	ldr	r2, [pc, #228]	; (8003c00 <HAL_DMA_Abort+0x21c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d068      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <HAL_DMA_Abort+0x220>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d063      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_DMA_Abort+0x224>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d05e      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_DMA_Abort+0x228>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d059      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <HAL_DMA_Abort+0x22c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d054      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <HAL_DMA_Abort+0x230>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04f      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_DMA_Abort+0x234>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <HAL_DMA_Abort+0x238>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <HAL_DMA_Abort+0x23c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_DMA_Abort+0x240>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_DMA_Abort+0x244>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_DMA_Abort+0x248>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_DMA_Abort+0x24c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_DMA_Abort+0x250>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_DMA_Abort+0x254>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <HAL_DMA_Abort+0x258>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_DMA_Abort+0x25c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <HAL_DMA_Abort+0x260>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_DMA_Abort+0x264>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <HAL_DMA_Abort+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_DMA_Abort+0x26c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_Abort+0x20e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <HAL_DMA_Abort+0x270>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d132      	bne.n	8003c58 <HAL_DMA_Abort+0x274>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e031      	b.n	8003c5a <HAL_DMA_Abort+0x276>
 8003bf6:	bf00      	nop
 8003bf8:	40020010 	.word	0x40020010
 8003bfc:	40020028 	.word	0x40020028
 8003c00:	40020040 	.word	0x40020040
 8003c04:	40020058 	.word	0x40020058
 8003c08:	40020070 	.word	0x40020070
 8003c0c:	40020088 	.word	0x40020088
 8003c10:	400200a0 	.word	0x400200a0
 8003c14:	400200b8 	.word	0x400200b8
 8003c18:	40020410 	.word	0x40020410
 8003c1c:	40020428 	.word	0x40020428
 8003c20:	40020440 	.word	0x40020440
 8003c24:	40020458 	.word	0x40020458
 8003c28:	40020470 	.word	0x40020470
 8003c2c:	40020488 	.word	0x40020488
 8003c30:	400204a0 	.word	0x400204a0
 8003c34:	400204b8 	.word	0x400204b8
 8003c38:	58025408 	.word	0x58025408
 8003c3c:	5802541c 	.word	0x5802541c
 8003c40:	58025430 	.word	0x58025430
 8003c44:	58025444 	.word	0x58025444
 8003c48:	58025458 	.word	0x58025458
 8003c4c:	5802546c 	.word	0x5802546c
 8003c50:	58025480 	.word	0x58025480
 8003c54:	58025494 	.word	0x58025494
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6d      	ldr	r2, [pc, #436]	; (8003e28 <HAL_DMA_Abort+0x444>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04a      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <HAL_DMA_Abort+0x448>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d045      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6a      	ldr	r2, [pc, #424]	; (8003e30 <HAL_DMA_Abort+0x44c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <HAL_DMA_Abort+0x450>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03b      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a67      	ldr	r2, [pc, #412]	; (8003e38 <HAL_DMA_Abort+0x454>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d036      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_DMA_Abort+0x458>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a64      	ldr	r2, [pc, #400]	; (8003e40 <HAL_DMA_Abort+0x45c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d02c      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a62      	ldr	r2, [pc, #392]	; (8003e44 <HAL_DMA_Abort+0x460>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d027      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a61      	ldr	r2, [pc, #388]	; (8003e48 <HAL_DMA_Abort+0x464>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5f      	ldr	r2, [pc, #380]	; (8003e4c <HAL_DMA_Abort+0x468>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5e      	ldr	r2, [pc, #376]	; (8003e50 <HAL_DMA_Abort+0x46c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_DMA_Abort+0x470>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_DMA_Abort+0x474>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <HAL_DMA_Abort+0x478>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_DMA_Abort+0x47c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_Abort+0x32a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_DMA_Abort+0x480>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_Abort+0x33c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <HAL_DMA_Abort+0x34c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d30:	e013      	b.n	8003d5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7ff f99b 	bl	800306c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d90c      	bls.n	8003d5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12d      	b.n	8003fb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <HAL_DMA_Abort+0x444>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <HAL_DMA_Abort+0x448>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DMA_Abort+0x44c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_DMA_Abort+0x450>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_Abort+0x454>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <HAL_DMA_Abort+0x458>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_Abort+0x45c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <HAL_DMA_Abort+0x460>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_DMA_Abort+0x464>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_DMA_Abort+0x468>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_DMA_Abort+0x46c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_DMA_Abort+0x470>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_DMA_Abort+0x474>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_DMA_Abort+0x478>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_DMA_Abort+0x47c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_Abort+0x422>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_DMA_Abort+0x480>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Abort+0x426>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_DMA_Abort+0x428>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d02b      	beq.n	8003e68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	223f      	movs	r2, #63	; 0x3f
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	e02a      	b.n	8003e7e <HAL_DMA_Abort+0x49a>
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4f      	ldr	r2, [pc, #316]	; (8003fc0 <HAL_DMA_Abort+0x5dc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d072      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4d      	ldr	r2, [pc, #308]	; (8003fc4 <HAL_DMA_Abort+0x5e0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d06d      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4c      	ldr	r2, [pc, #304]	; (8003fc8 <HAL_DMA_Abort+0x5e4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d068      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	; (8003fcc <HAL_DMA_Abort+0x5e8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d063      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a49      	ldr	r2, [pc, #292]	; (8003fd0 <HAL_DMA_Abort+0x5ec>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d05e      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a47      	ldr	r2, [pc, #284]	; (8003fd4 <HAL_DMA_Abort+0x5f0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d059      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a46      	ldr	r2, [pc, #280]	; (8003fd8 <HAL_DMA_Abort+0x5f4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d054      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <HAL_DMA_Abort+0x5f8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04f      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <HAL_DMA_Abort+0x5fc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a41      	ldr	r2, [pc, #260]	; (8003fe4 <HAL_DMA_Abort+0x600>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	; (8003fe8 <HAL_DMA_Abort+0x604>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3e      	ldr	r2, [pc, #248]	; (8003fec <HAL_DMA_Abort+0x608>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <HAL_DMA_Abort+0x60c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <HAL_DMA_Abort+0x610>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ff8 <HAL_DMA_Abort+0x614>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a38      	ldr	r2, [pc, #224]	; (8003ffc <HAL_DMA_Abort+0x618>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <HAL_DMA_Abort+0x61c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a35      	ldr	r2, [pc, #212]	; (8004004 <HAL_DMA_Abort+0x620>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a34      	ldr	r2, [pc, #208]	; (8004008 <HAL_DMA_Abort+0x624>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a32      	ldr	r2, [pc, #200]	; (800400c <HAL_DMA_Abort+0x628>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a31      	ldr	r2, [pc, #196]	; (8004010 <HAL_DMA_Abort+0x62c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <HAL_DMA_Abort+0x630>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_DMA_Abort+0x634>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_Abort+0x58a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_DMA_Abort+0x638>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Abort+0x58e>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_DMA_Abort+0x590>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	58025408 	.word	0x58025408
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025444 	.word	0x58025444
 8004010:	58025458 	.word	0x58025458
 8004014:	5802546c 	.word	0x5802546c
 8004018:	58025480 	.word	0x58025480
 800401c:	58025494 	.word	0x58025494

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e237      	b.n	80044a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e22c      	b.n	80044a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5c      	ldr	r2, [pc, #368]	; (80041c0 <HAL_DMA_Abort_IT+0x1a0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d04a      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5b      	ldr	r2, [pc, #364]	; (80041c4 <HAL_DMA_Abort_IT+0x1a4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d045      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a59      	ldr	r2, [pc, #356]	; (80041c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d040      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_DMA_Abort_IT+0x1ac>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d03b      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a56      	ldr	r2, [pc, #344]	; (80041d0 <HAL_DMA_Abort_IT+0x1b0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d036      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a55      	ldr	r2, [pc, #340]	; (80041d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d031      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a53      	ldr	r2, [pc, #332]	; (80041d8 <HAL_DMA_Abort_IT+0x1b8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d02c      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_DMA_Abort_IT+0x1bc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d027      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a50      	ldr	r2, [pc, #320]	; (80041e0 <HAL_DMA_Abort_IT+0x1c0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4f      	ldr	r2, [pc, #316]	; (80041e4 <HAL_DMA_Abort_IT+0x1c4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a4d      	ldr	r2, [pc, #308]	; (80041e8 <HAL_DMA_Abort_IT+0x1c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a4c      	ldr	r2, [pc, #304]	; (80041ec <HAL_DMA_Abort_IT+0x1cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4a      	ldr	r2, [pc, #296]	; (80041f0 <HAL_DMA_Abort_IT+0x1d0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a49      	ldr	r2, [pc, #292]	; (80041f4 <HAL_DMA_Abort_IT+0x1d4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a47      	ldr	r2, [pc, #284]	; (80041f8 <HAL_DMA_Abort_IT+0x1d8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a46      	ldr	r2, [pc, #280]	; (80041fc <HAL_DMA_Abort_IT+0x1dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Abort_IT+0xcc>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_DMA_Abort_IT+0xce>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8086 	beq.w	8004200 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2f      	ldr	r2, [pc, #188]	; (80041c0 <HAL_DMA_Abort_IT+0x1a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2e      	ldr	r2, [pc, #184]	; (80041c4 <HAL_DMA_Abort_IT+0x1a4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <HAL_DMA_Abort_IT+0x1ac>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <HAL_DMA_Abort_IT+0x1b0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_DMA_Abort_IT+0x1b8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <HAL_DMA_Abort_IT+0x1bc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <HAL_DMA_Abort_IT+0x1c0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_DMA_Abort_IT+0x1c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_DMA_Abort_IT+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_DMA_Abort_IT+0x1cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <HAL_DMA_Abort_IT+0x1d0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_DMA_Abort_IT+0x1d4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_DMA_Abort_IT+0x1d8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Abort_IT+0x17c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_DMA_Abort_IT+0x1dc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <HAL_DMA_Abort_IT+0x18e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e178      	b.n	80044a0 <HAL_DMA_Abort_IT+0x480>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e16f      	b.n	80044a0 <HAL_DMA_Abort_IT+0x480>
 80041c0:	40020010 	.word	0x40020010
 80041c4:	40020028 	.word	0x40020028
 80041c8:	40020040 	.word	0x40020040
 80041cc:	40020058 	.word	0x40020058
 80041d0:	40020070 	.word	0x40020070
 80041d4:	40020088 	.word	0x40020088
 80041d8:	400200a0 	.word	0x400200a0
 80041dc:	400200b8 	.word	0x400200b8
 80041e0:	40020410 	.word	0x40020410
 80041e4:	40020428 	.word	0x40020428
 80041e8:	40020440 	.word	0x40020440
 80041ec:	40020458 	.word	0x40020458
 80041f0:	40020470 	.word	0x40020470
 80041f4:	40020488 	.word	0x40020488
 80041f8:	400204a0 	.word	0x400204a0
 80041fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 020e 	bic.w	r2, r2, #14
 800420e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6c      	ldr	r2, [pc, #432]	; (80043c8 <HAL_DMA_Abort_IT+0x3a8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d04a      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_DMA_Abort_IT+0x3ac>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d045      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a69      	ldr	r2, [pc, #420]	; (80043d0 <HAL_DMA_Abort_IT+0x3b0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d040      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <HAL_DMA_Abort_IT+0x3b4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d03b      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a66      	ldr	r2, [pc, #408]	; (80043d8 <HAL_DMA_Abort_IT+0x3b8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d036      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a65      	ldr	r2, [pc, #404]	; (80043dc <HAL_DMA_Abort_IT+0x3bc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d031      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a63      	ldr	r2, [pc, #396]	; (80043e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d02c      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a62      	ldr	r2, [pc, #392]	; (80043e4 <HAL_DMA_Abort_IT+0x3c4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d027      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a60      	ldr	r2, [pc, #384]	; (80043e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d022      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5f      	ldr	r2, [pc, #380]	; (80043ec <HAL_DMA_Abort_IT+0x3cc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01d      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5d      	ldr	r2, [pc, #372]	; (80043f0 <HAL_DMA_Abort_IT+0x3d0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5c      	ldr	r2, [pc, #368]	; (80043f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5a      	ldr	r2, [pc, #360]	; (80043f8 <HAL_DMA_Abort_IT+0x3d8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a59      	ldr	r2, [pc, #356]	; (80043fc <HAL_DMA_Abort_IT+0x3dc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a57      	ldr	r2, [pc, #348]	; (8004400 <HAL_DMA_Abort_IT+0x3e0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x290>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a56      	ldr	r2, [pc, #344]	; (8004404 <HAL_DMA_Abort_IT+0x3e4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d108      	bne.n	80042c2 <HAL_DMA_Abort_IT+0x2a2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e007      	b.n	80042d2 <HAL_DMA_Abort_IT+0x2b2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <HAL_DMA_Abort_IT+0x3a8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d072      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <HAL_DMA_Abort_IT+0x3ac>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d06d      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a39      	ldr	r2, [pc, #228]	; (80043d0 <HAL_DMA_Abort_IT+0x3b0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d068      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a37      	ldr	r2, [pc, #220]	; (80043d4 <HAL_DMA_Abort_IT+0x3b4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d063      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a36      	ldr	r2, [pc, #216]	; (80043d8 <HAL_DMA_Abort_IT+0x3b8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d05e      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a34      	ldr	r2, [pc, #208]	; (80043dc <HAL_DMA_Abort_IT+0x3bc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d059      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d054      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a31      	ldr	r2, [pc, #196]	; (80043e4 <HAL_DMA_Abort_IT+0x3c4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04f      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <HAL_DMA_Abort_IT+0x3cc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <HAL_DMA_Abort_IT+0x3d0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_DMA_Abort_IT+0x3d8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <HAL_DMA_Abort_IT+0x3dc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a27      	ldr	r2, [pc, #156]	; (8004400 <HAL_DMA_Abort_IT+0x3e0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a25      	ldr	r2, [pc, #148]	; (8004404 <HAL_DMA_Abort_IT+0x3e4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_DMA_Abort_IT+0x3e8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_DMA_Abort_IT+0x3ec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a21      	ldr	r2, [pc, #132]	; (8004410 <HAL_DMA_Abort_IT+0x3f0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_DMA_Abort_IT+0x3f4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <HAL_DMA_Abort_IT+0x3f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_DMA_Abort_IT+0x3fc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_DMA_Abort_IT+0x400>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x3a2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_DMA_Abort_IT+0x404>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d132      	bne.n	8004428 <HAL_DMA_Abort_IT+0x408>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e031      	b.n	800442a <HAL_DMA_Abort_IT+0x40a>
 80043c6:	bf00      	nop
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d028      	beq.n	8004480 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800445c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004474:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800447e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044b8:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_DMA_IRQHandler+0x1ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a67      	ldr	r2, [pc, #412]	; (800465c <HAL_DMA_IRQHandler+0x1b0>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5f      	ldr	r2, [pc, #380]	; (8004660 <HAL_DMA_IRQHandler+0x1b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <HAL_DMA_IRQHandler+0x1b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_DMA_IRQHandler+0x1bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5a      	ldr	r2, [pc, #360]	; (800466c <HAL_DMA_IRQHandler+0x1c0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a59      	ldr	r2, [pc, #356]	; (8004670 <HAL_DMA_IRQHandler+0x1c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a57      	ldr	r2, [pc, #348]	; (8004674 <HAL_DMA_IRQHandler+0x1c8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a56      	ldr	r2, [pc, #344]	; (8004678 <HAL_DMA_IRQHandler+0x1cc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a54      	ldr	r2, [pc, #336]	; (800467c <HAL_DMA_IRQHandler+0x1d0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a53      	ldr	r2, [pc, #332]	; (8004680 <HAL_DMA_IRQHandler+0x1d4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a51      	ldr	r2, [pc, #324]	; (8004684 <HAL_DMA_IRQHandler+0x1d8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a50      	ldr	r2, [pc, #320]	; (8004688 <HAL_DMA_IRQHandler+0x1dc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_DMA_IRQHandler+0x1e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <HAL_DMA_IRQHandler+0x1e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4b      	ldr	r2, [pc, #300]	; (8004694 <HAL_DMA_IRQHandler+0x1e8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_DMA_IRQHandler+0x1ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_IRQHandler+0xd2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a48      	ldr	r2, [pc, #288]	; (800469c <HAL_DMA_IRQHandler+0x1f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_DMA_IRQHandler+0xd6>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_DMA_IRQHandler+0xd8>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 842b 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2208      	movs	r2, #8
 8004594:	409a      	lsls	r2, r3
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80a2 	beq.w	80046e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2e      	ldr	r2, [pc, #184]	; (8004660 <HAL_DMA_IRQHandler+0x1b4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <HAL_DMA_IRQHandler+0x1b8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2b      	ldr	r2, [pc, #172]	; (8004668 <HAL_DMA_IRQHandler+0x1bc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <HAL_DMA_IRQHandler+0x1c0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a28      	ldr	r2, [pc, #160]	; (8004670 <HAL_DMA_IRQHandler+0x1c4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a27      	ldr	r2, [pc, #156]	; (8004674 <HAL_DMA_IRQHandler+0x1c8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a25      	ldr	r2, [pc, #148]	; (8004678 <HAL_DMA_IRQHandler+0x1cc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a24      	ldr	r2, [pc, #144]	; (800467c <HAL_DMA_IRQHandler+0x1d0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_DMA_IRQHandler+0x1d4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <HAL_DMA_IRQHandler+0x1d8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_DMA_IRQHandler+0x1dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_DMA_IRQHandler+0x1e0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_DMA_IRQHandler+0x1e4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_DMA_IRQHandler+0x1e8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_DMA_IRQHandler+0x1ec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_IRQHandler+0x194>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_DMA_IRQHandler+0x1f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d12f      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x1f4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e02e      	b.n	80046b4 <HAL_DMA_IRQHandler+0x208>
 8004656:	bf00      	nop
 8004658:	24000000 	.word	0x24000000
 800465c:	1b4e81b5 	.word	0x1b4e81b5
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2208      	movs	r2, #8
 80046d2:	409a      	lsls	r2, r3
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	fa22 f303 	lsr.w	r3, r2, r3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06e      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a69      	ldr	r2, [pc, #420]	; (80048a4 <HAL_DMA_IRQHandler+0x3f8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a67      	ldr	r2, [pc, #412]	; (80048a8 <HAL_DMA_IRQHandler+0x3fc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a66      	ldr	r2, [pc, #408]	; (80048ac <HAL_DMA_IRQHandler+0x400>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a64      	ldr	r2, [pc, #400]	; (80048b0 <HAL_DMA_IRQHandler+0x404>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a63      	ldr	r2, [pc, #396]	; (80048b4 <HAL_DMA_IRQHandler+0x408>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a61      	ldr	r2, [pc, #388]	; (80048b8 <HAL_DMA_IRQHandler+0x40c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a60      	ldr	r2, [pc, #384]	; (80048bc <HAL_DMA_IRQHandler+0x410>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5e      	ldr	r2, [pc, #376]	; (80048c0 <HAL_DMA_IRQHandler+0x414>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <HAL_DMA_IRQHandler+0x418>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5b      	ldr	r2, [pc, #364]	; (80048c8 <HAL_DMA_IRQHandler+0x41c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_DMA_IRQHandler+0x420>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_DMA_IRQHandler+0x424>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_DMA_IRQHandler+0x428>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a55      	ldr	r2, [pc, #340]	; (80048d8 <HAL_DMA_IRQHandler+0x42c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a54      	ldr	r2, [pc, #336]	; (80048dc <HAL_DMA_IRQHandler+0x430>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_IRQHandler+0x2ee>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_DMA_IRQHandler+0x434>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10a      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x304>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e003      	b.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0202 	orr.w	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2204      	movs	r2, #4
 80047e2:	409a      	lsls	r2, r3
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 808f 	beq.w	800490c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <HAL_DMA_IRQHandler+0x3f8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_DMA_IRQHandler+0x3fc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <HAL_DMA_IRQHandler+0x400>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <HAL_DMA_IRQHandler+0x404>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <HAL_DMA_IRQHandler+0x408>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <HAL_DMA_IRQHandler+0x40c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_DMA_IRQHandler+0x410>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <HAL_DMA_IRQHandler+0x414>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_DMA_IRQHandler+0x418>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_DMA_IRQHandler+0x41c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <HAL_DMA_IRQHandler+0x420>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_DMA_IRQHandler+0x424>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_DMA_IRQHandler+0x428>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_DMA_IRQHandler+0x42c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <HAL_DMA_IRQHandler+0x430>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_IRQHandler+0x3e2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <HAL_DMA_IRQHandler+0x434>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d12a      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x438>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e023      	b.n	80048ec <HAL_DMA_IRQHandler+0x440>
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2204      	movs	r2, #4
 80048fa:	409a      	lsls	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2210      	movs	r2, #16
 8004916:	409a      	lsls	r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a6 	beq.w	8004a6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a85      	ldr	r2, [pc, #532]	; (8004b3c <HAL_DMA_IRQHandler+0x690>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a83      	ldr	r2, [pc, #524]	; (8004b40 <HAL_DMA_IRQHandler+0x694>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a82      	ldr	r2, [pc, #520]	; (8004b44 <HAL_DMA_IRQHandler+0x698>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a80      	ldr	r2, [pc, #512]	; (8004b48 <HAL_DMA_IRQHandler+0x69c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7f      	ldr	r2, [pc, #508]	; (8004b4c <HAL_DMA_IRQHandler+0x6a0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7d      	ldr	r2, [pc, #500]	; (8004b50 <HAL_DMA_IRQHandler+0x6a4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7c      	ldr	r2, [pc, #496]	; (8004b54 <HAL_DMA_IRQHandler+0x6a8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7a      	ldr	r2, [pc, #488]	; (8004b58 <HAL_DMA_IRQHandler+0x6ac>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_DMA_IRQHandler+0x6b0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a77      	ldr	r2, [pc, #476]	; (8004b60 <HAL_DMA_IRQHandler+0x6b4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a76      	ldr	r2, [pc, #472]	; (8004b64 <HAL_DMA_IRQHandler+0x6b8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a74      	ldr	r2, [pc, #464]	; (8004b68 <HAL_DMA_IRQHandler+0x6bc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a73      	ldr	r2, [pc, #460]	; (8004b6c <HAL_DMA_IRQHandler+0x6c0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a71      	ldr	r2, [pc, #452]	; (8004b70 <HAL_DMA_IRQHandler+0x6c4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	; (8004b74 <HAL_DMA_IRQHandler+0x6c8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x516>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6e      	ldr	r2, [pc, #440]	; (8004b78 <HAL_DMA_IRQHandler+0x6cc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10a      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x52c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e009      	b.n	80049ec <HAL_DMA_IRQHandler+0x540>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03e      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2210      	movs	r2, #16
 80049fa:	409a      	lsls	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d024      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
 8004a2c:	e01f      	b.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01b      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
 8004a3e:	e016      	b.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2220      	movs	r2, #32
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8110 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <HAL_DMA_IRQHandler+0x690>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_DMA_IRQHandler+0x694>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <HAL_DMA_IRQHandler+0x698>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_DMA_IRQHandler+0x69c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <HAL_DMA_IRQHandler+0x6a0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_DMA_IRQHandler+0x6a4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_DMA_IRQHandler+0x6a8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_DMA_IRQHandler+0x6ac>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <HAL_DMA_IRQHandler+0x6b0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <HAL_DMA_IRQHandler+0x6b4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <HAL_DMA_IRQHandler+0x6b8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_DMA_IRQHandler+0x6bc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_DMA_IRQHandler+0x6c0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <HAL_DMA_IRQHandler+0x6c4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <HAL_DMA_IRQHandler+0x6c8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x678>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_DMA_IRQHandler+0x6cc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d12b      	bne.n	8004b7c <HAL_DMA_IRQHandler+0x6d0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e02a      	b.n	8004b90 <HAL_DMA_IRQHandler+0x6e4>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8087 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d139      	bne.n	8004c26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0216 	bic.w	r2, r2, #22
 8004bc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x736>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0208 	bic.w	r2, r2, #8
 8004bf0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	223f      	movs	r2, #63	; 0x3f
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 834a 	beq.w	80052b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
          }
          return;
 8004c24:	e344      	b.n	80052b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d018      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02c      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
 8004c52:	e027      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
 8004c64:	e01e      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0210 	bic.w	r2, r2, #16
 8004c82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8306 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8088 	beq.w	8004dcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	; (8004eb4 <HAL_DMA_IRQHandler+0xa08>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a79      	ldr	r2, [pc, #484]	; (8004eb8 <HAL_DMA_IRQHandler+0xa0c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	; (8004ebc <HAL_DMA_IRQHandler+0xa10>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a76      	ldr	r2, [pc, #472]	; (8004ec0 <HAL_DMA_IRQHandler+0xa14>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a74      	ldr	r2, [pc, #464]	; (8004ec4 <HAL_DMA_IRQHandler+0xa18>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	; (8004ec8 <HAL_DMA_IRQHandler+0xa1c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a71      	ldr	r2, [pc, #452]	; (8004ecc <HAL_DMA_IRQHandler+0xa20>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_DMA_IRQHandler+0xa24>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_DMA_IRQHandler+0xa28>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	; (8004ed8 <HAL_DMA_IRQHandler+0xa2c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	; (8004edc <HAL_DMA_IRQHandler+0xa30>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <HAL_DMA_IRQHandler+0xa34>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_DMA_IRQHandler+0xa38>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a67      	ldr	r2, [pc, #412]	; (8004ee8 <HAL_DMA_IRQHandler+0xa3c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a65      	ldr	r2, [pc, #404]	; (8004eec <HAL_DMA_IRQHandler+0xa40>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x8b8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a64      	ldr	r2, [pc, #400]	; (8004ef0 <HAL_DMA_IRQHandler+0xa44>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x8ca>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e007      	b.n	8004d86 <HAL_DMA_IRQHandler+0x8da>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d307      	bcc.n	8004da2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f2      	bne.n	8004d86 <HAL_DMA_IRQHandler+0x8da>
 8004da0:	e000      	b.n	8004da4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004da2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004dba:	e003      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8272 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
 8004dde:	e26c      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a43      	ldr	r2, [pc, #268]	; (8004ef4 <HAL_DMA_IRQHandler+0xa48>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <HAL_DMA_IRQHandler+0xa4c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01d      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a40      	ldr	r2, [pc, #256]	; (8004efc <HAL_DMA_IRQHandler+0xa50>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <HAL_DMA_IRQHandler+0xa54>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3d      	ldr	r2, [pc, #244]	; (8004f04 <HAL_DMA_IRQHandler+0xa58>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <HAL_DMA_IRQHandler+0xa5c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3a      	ldr	r2, [pc, #232]	; (8004f0c <HAL_DMA_IRQHandler+0xa60>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x984>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a39      	ldr	r2, [pc, #228]	; (8004f10 <HAL_DMA_IRQHandler+0xa64>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x988>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_DMA_IRQHandler+0x98a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 823f 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80cd 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0xb48>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80c7 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2204      	movs	r2, #4
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d049      	beq.n	8004f14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8210 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e20a      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8206 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e200      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
 8004eb2:	bf00      	nop
 8004eb4:	40020010 	.word	0x40020010
 8004eb8:	40020028 	.word	0x40020028
 8004ebc:	40020040 	.word	0x40020040
 8004ec0:	40020058 	.word	0x40020058
 8004ec4:	40020070 	.word	0x40020070
 8004ec8:	40020088 	.word	0x40020088
 8004ecc:	400200a0 	.word	0x400200a0
 8004ed0:	400200b8 	.word	0x400200b8
 8004ed4:	40020410 	.word	0x40020410
 8004ed8:	40020428 	.word	0x40020428
 8004edc:	40020440 	.word	0x40020440
 8004ee0:	40020458 	.word	0x40020458
 8004ee4:	40020470 	.word	0x40020470
 8004ee8:	40020488 	.word	0x40020488
 8004eec:	400204a0 	.word	0x400204a0
 8004ef0:	400204b8 	.word	0x400204b8
 8004ef4:	58025408 	.word	0x58025408
 8004ef8:	5802541c 	.word	0x5802541c
 8004efc:	58025430 	.word	0x58025430
 8004f00:	58025444 	.word	0x58025444
 8004f04:	58025458 	.word	0x58025458
 8004f08:	5802546c 	.word	0x5802546c
 8004f0c:	58025480 	.word	0x58025480
 8004f10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d160      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a7f      	ldr	r2, [pc, #508]	; (8005120 <HAL_DMA_IRQHandler+0xc74>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d04a      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7d      	ldr	r2, [pc, #500]	; (8005124 <HAL_DMA_IRQHandler+0xc78>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d045      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7c      	ldr	r2, [pc, #496]	; (8005128 <HAL_DMA_IRQHandler+0xc7c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d040      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a7a      	ldr	r2, [pc, #488]	; (800512c <HAL_DMA_IRQHandler+0xc80>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d03b      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a79      	ldr	r2, [pc, #484]	; (8005130 <HAL_DMA_IRQHandler+0xc84>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d036      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a77      	ldr	r2, [pc, #476]	; (8005134 <HAL_DMA_IRQHandler+0xc88>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a76      	ldr	r2, [pc, #472]	; (8005138 <HAL_DMA_IRQHandler+0xc8c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d02c      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a74      	ldr	r2, [pc, #464]	; (800513c <HAL_DMA_IRQHandler+0xc90>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d027      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a73      	ldr	r2, [pc, #460]	; (8005140 <HAL_DMA_IRQHandler+0xc94>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a71      	ldr	r2, [pc, #452]	; (8005144 <HAL_DMA_IRQHandler+0xc98>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a70      	ldr	r2, [pc, #448]	; (8005148 <HAL_DMA_IRQHandler+0xc9c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_DMA_IRQHandler+0xca0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6d      	ldr	r2, [pc, #436]	; (8005150 <HAL_DMA_IRQHandler+0xca4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6b      	ldr	r2, [pc, #428]	; (8005154 <HAL_DMA_IRQHandler+0xca8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_DMA_IRQHandler+0xcac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xb12>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a68      	ldr	r2, [pc, #416]	; (800515c <HAL_DMA_IRQHandler+0xcb0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0xb24>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0208 	bic.w	r2, r2, #8
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e007      	b.n	8004fe0 <HAL_DMA_IRQHandler+0xb34>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0204 	bic.w	r2, r2, #4
 8004fde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8165 	beq.w	80052b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff2:	e15f      	b.n	80052b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	409a      	lsls	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80c5 	beq.w	8005194 <HAL_DMA_IRQHandler+0xce8>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80bf 	beq.w	8005194 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	2202      	movs	r2, #2
 8005020:	409a      	lsls	r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d018      	beq.n	8005062 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 813a 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800504c:	e134      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8130 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005060:	e12a      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 8089 	bne.w	8005180 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <HAL_DMA_IRQHandler+0xc74>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d04a      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_DMA_IRQHandler+0xc78>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d045      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_DMA_IRQHandler+0xc7c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d040      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_DMA_IRQHandler+0xc80>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d03b      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_DMA_IRQHandler+0xc84>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d036      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_DMA_IRQHandler+0xc88>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d031      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_DMA_IRQHandler+0xc8c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d02c      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_DMA_IRQHandler+0xc90>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d027      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_DMA_IRQHandler+0xc94>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_DMA_IRQHandler+0xc98>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01d      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_DMA_IRQHandler+0xc9c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	; (800514c <HAL_DMA_IRQHandler+0xca0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_DMA_IRQHandler+0xca4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_DMA_IRQHandler+0xca8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <HAL_DMA_IRQHandler+0xcac>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_DMA_IRQHandler+0xc62>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a14      	ldr	r2, [pc, #80]	; (800515c <HAL_DMA_IRQHandler+0xcb0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d128      	bne.n	8005160 <HAL_DMA_IRQHandler+0xcb4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0214 	bic.w	r2, r2, #20
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e027      	b.n	8005170 <HAL_DMA_IRQHandler+0xcc4>
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 020a 	bic.w	r2, r2, #10
 800516e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8097 	beq.w	80052b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005192:	e091      	b.n	80052b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2208      	movs	r2, #8
 800519e:	409a      	lsls	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8088 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8082 	beq.w	80052ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a41      	ldr	r2, [pc, #260]	; (80052c0 <HAL_DMA_IRQHandler+0xe14>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3f      	ldr	r2, [pc, #252]	; (80052c4 <HAL_DMA_IRQHandler+0xe18>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3e      	ldr	r2, [pc, #248]	; (80052c8 <HAL_DMA_IRQHandler+0xe1c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <HAL_DMA_IRQHandler+0xe20>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <HAL_DMA_IRQHandler+0xe24>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a39      	ldr	r2, [pc, #228]	; (80052d4 <HAL_DMA_IRQHandler+0xe28>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a38      	ldr	r2, [pc, #224]	; (80052d8 <HAL_DMA_IRQHandler+0xe2c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a36      	ldr	r2, [pc, #216]	; (80052dc <HAL_DMA_IRQHandler+0xe30>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a35      	ldr	r2, [pc, #212]	; (80052e0 <HAL_DMA_IRQHandler+0xe34>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <HAL_DMA_IRQHandler+0xe38>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <HAL_DMA_IRQHandler+0xe3c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a30      	ldr	r2, [pc, #192]	; (80052ec <HAL_DMA_IRQHandler+0xe40>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_DMA_IRQHandler+0xe44>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_DMA_IRQHandler+0xe48>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <HAL_DMA_IRQHandler+0xe4c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_IRQHandler+0xdaa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <HAL_DMA_IRQHandler+0xe50>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <HAL_DMA_IRQHandler+0xdbc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 021c 	bic.w	r2, r2, #28
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e007      	b.n	8005278 <HAL_DMA_IRQHandler+0xdcc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 020e 	bic.w	r2, r2, #14
 8005276:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2201      	movs	r2, #1
 8005282:	409a      	lsls	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e004      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8

08005300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a42      	ldr	r2, [pc, #264]	; (8005418 <DMA_CalcBaseAndBitshift+0x118>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d04a      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a41      	ldr	r2, [pc, #260]	; (800541c <DMA_CalcBaseAndBitshift+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d045      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <DMA_CalcBaseAndBitshift+0x120>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d040      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a3e      	ldr	r2, [pc, #248]	; (8005424 <DMA_CalcBaseAndBitshift+0x124>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d03b      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a3c      	ldr	r2, [pc, #240]	; (8005428 <DMA_CalcBaseAndBitshift+0x128>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d036      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <DMA_CalcBaseAndBitshift+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d031      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a39      	ldr	r2, [pc, #228]	; (8005430 <DMA_CalcBaseAndBitshift+0x130>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02c      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a38      	ldr	r2, [pc, #224]	; (8005434 <DMA_CalcBaseAndBitshift+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d027      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a36      	ldr	r2, [pc, #216]	; (8005438 <DMA_CalcBaseAndBitshift+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a35      	ldr	r2, [pc, #212]	; (800543c <DMA_CalcBaseAndBitshift+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01d      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a33      	ldr	r2, [pc, #204]	; (8005440 <DMA_CalcBaseAndBitshift+0x140>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a32      	ldr	r2, [pc, #200]	; (8005444 <DMA_CalcBaseAndBitshift+0x144>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a30      	ldr	r2, [pc, #192]	; (8005448 <DMA_CalcBaseAndBitshift+0x148>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <DMA_CalcBaseAndBitshift+0x14c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2d      	ldr	r2, [pc, #180]	; (8005450 <DMA_CalcBaseAndBitshift+0x150>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <DMA_CalcBaseAndBitshift+0xa8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <DMA_CalcBaseAndBitshift+0x154>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <DMA_CalcBaseAndBitshift+0xac>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <DMA_CalcBaseAndBitshift+0xae>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d024      	beq.n	80053fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	3b10      	subs	r3, #16
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <DMA_CalcBaseAndBitshift+0x158>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	4a24      	ldr	r2, [pc, #144]	; (800545c <DMA_CalcBaseAndBitshift+0x15c>)
 80053cc:	5cd3      	ldrb	r3, [r2, r3]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d908      	bls.n	80053ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <DMA_CalcBaseAndBitshift+0x160>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	659a      	str	r2, [r3, #88]	; 0x58
 80053ea:	e00d      	b.n	8005408 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <DMA_CalcBaseAndBitshift+0x160>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
 80053fa:	e005      	b.n	8005408 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40020010 	.word	0x40020010
 800541c:	40020028 	.word	0x40020028
 8005420:	40020040 	.word	0x40020040
 8005424:	40020058 	.word	0x40020058
 8005428:	40020070 	.word	0x40020070
 800542c:	40020088 	.word	0x40020088
 8005430:	400200a0 	.word	0x400200a0
 8005434:	400200b8 	.word	0x400200b8
 8005438:	40020410 	.word	0x40020410
 800543c:	40020428 	.word	0x40020428
 8005440:	40020440 	.word	0x40020440
 8005444:	40020458 	.word	0x40020458
 8005448:	40020470 	.word	0x40020470
 800544c:	40020488 	.word	0x40020488
 8005450:	400204a0 	.word	0x400204a0
 8005454:	400204b8 	.word	0x400204b8
 8005458:	aaaaaaab 	.word	0xaaaaaaab
 800545c:	0800d50c 	.word	0x0800d50c
 8005460:	fffffc00 	.word	0xfffffc00

08005464 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d120      	bne.n	80054ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	2b03      	cmp	r3, #3
 800547e:	d858      	bhi.n	8005532 <DMA_CheckFifoParam+0xce>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <DMA_CheckFifoParam+0x24>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	08005499 	.word	0x08005499
 800548c:	080054ab 	.word	0x080054ab
 8005490:	08005499 	.word	0x08005499
 8005494:	08005533 	.word	0x08005533
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d048      	beq.n	8005536 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054a8:	e045      	b.n	8005536 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054b2:	d142      	bne.n	800553a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054b8:	e03f      	b.n	800553a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d123      	bne.n	800550c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d838      	bhi.n	800553e <DMA_CheckFifoParam+0xda>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <DMA_CheckFifoParam+0x70>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054eb 	.word	0x080054eb
 80054dc:	080054e5 	.word	0x080054e5
 80054e0:	080054fd 	.word	0x080054fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
        break;
 80054e8:	e030      	b.n	800554c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d025      	beq.n	8005542 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054fa:	e022      	b.n	8005542 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005504:	d11f      	bne.n	8005546 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800550a:	e01c      	b.n	8005546 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	2b02      	cmp	r3, #2
 8005512:	d902      	bls.n	800551a <DMA_CheckFifoParam+0xb6>
 8005514:	2b03      	cmp	r3, #3
 8005516:	d003      	beq.n	8005520 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005518:	e018      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
        break;
 800551e:	e015      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
    break;
 8005530:	e00b      	b.n	800554a <DMA_CheckFifoParam+0xe6>
        break;
 8005532:	bf00      	nop
 8005534:	e00a      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        break;
 8005536:	bf00      	nop
 8005538:	e008      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        break;
 800553a:	bf00      	nop
 800553c:	e006      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        break;
 800553e:	bf00      	nop
 8005540:	e004      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <DMA_CheckFifoParam+0xe8>
        break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <DMA_CheckFifoParam+0xe8>
    break;
 800554a:	bf00      	nop
    }
  }

  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop

0800555c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d022      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a36      	ldr	r2, [pc, #216]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01d      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a35      	ldr	r2, [pc, #212]	; (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a33      	ldr	r2, [pc, #204]	; (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a32      	ldr	r2, [pc, #200]	; (8005660 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a30      	ldr	r2, [pc, #192]	; (8005664 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2f      	ldr	r2, [pc, #188]	; (8005668 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2d      	ldr	r2, [pc, #180]	; (800566c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d101      	bne.n	80055be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01a      	beq.n	80055fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	3b08      	subs	r3, #8
 80055cc:	4a28      	ldr	r2, [pc, #160]	; (8005670 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4b26      	ldr	r3, [pc, #152]	; (8005674 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a24      	ldr	r2, [pc, #144]	; (8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055f8:	e024      	b.n	8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	3b10      	subs	r3, #16
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d806      	bhi.n	8005622 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d902      	bls.n	8005622 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3308      	adds	r3, #8
 8005620:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	; (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005634:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	58025408 	.word	0x58025408
 8005654:	5802541c 	.word	0x5802541c
 8005658:	58025430 	.word	0x58025430
 800565c:	58025444 	.word	0x58025444
 8005660:	58025458 	.word	0x58025458
 8005664:	5802546c 	.word	0x5802546c
 8005668:	58025480 	.word	0x58025480
 800566c:	58025494 	.word	0x58025494
 8005670:	cccccccd 	.word	0xcccccccd
 8005674:	16009600 	.word	0x16009600
 8005678:	58025880 	.word	0x58025880
 800567c:	aaaaaaab 	.word	0xaaaaaaab
 8005680:	400204b8 	.word	0x400204b8
 8005684:	4002040f 	.word	0x4002040f
 8005688:	10008200 	.word	0x10008200
 800568c:	40020880 	.word	0x40020880

08005690 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d04a      	beq.n	800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d847      	bhi.n	800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a25      	ldr	r2, [pc, #148]	; (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d022      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a24      	ldr	r2, [pc, #144]	; (800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d01d      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d018      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a21      	ldr	r2, [pc, #132]	; (8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1e      	ldr	r2, [pc, #120]	; (800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d101      	bne.n	8005700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005718:	671a      	str	r2, [r3, #112]	; 0x70
 800571a:	e009      	b.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a11      	ldr	r2, [pc, #68]	; (8005774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800572e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	58025408 	.word	0x58025408
 800574c:	5802541c 	.word	0x5802541c
 8005750:	58025430 	.word	0x58025430
 8005754:	58025444 	.word	0x58025444
 8005758:	58025458 	.word	0x58025458
 800575c:	5802546c 	.word	0x5802546c
 8005760:	58025480 	.word	0x58025480
 8005764:	58025494 	.word	0x58025494
 8005768:	1600963f 	.word	0x1600963f
 800576c:	58025940 	.word	0x58025940
 8005770:	1000823f 	.word	0x1000823f
 8005774:	40020940 	.word	0x40020940

08005778 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e0cf      	b.n	800592a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2223      	movs	r2, #35	; 0x23
 8005798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fd f8d1 	bl	8002944 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a2:	4b64      	ldr	r3, [pc, #400]	; (8005934 <HAL_ETH_Init+0x1bc>)
 80057a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057a8:	4a62      	ldr	r2, [pc, #392]	; (8005934 <HAL_ETH_Init+0x1bc>)
 80057aa:	f043 0302 	orr.w	r3, r3, #2
 80057ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057b2:	4b60      	ldr	r3, [pc, #384]	; (8005934 <HAL_ETH_Init+0x1bc>)
 80057b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7a1b      	ldrb	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7fd fc8b 	bl	80030e4 <HAL_SYSCFG_ETHInterfaceSelect>
 80057ce:	e003      	b.n	80057d8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80057d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80057d4:	f7fd fc86 	bl	80030e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80057d8:	4b57      	ldr	r3, [pc, #348]	; (8005938 <HAL_ETH_Init+0x1c0>)
 80057da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057f4:	f7fd fc3a 	bl	800306c <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80057fa:	e011      	b.n	8005820 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80057fc:	f7fd fc36 	bl	800306c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800580a:	d909      	bls.n	8005820 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	22e0      	movs	r2, #224	; 0xe0
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e084      	b.n	800592a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e4      	bne.n	80057fc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f886 	bl	8005944 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005838:	f001 fefc 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 800583c:	4603      	mov	r3, r0
 800583e:	4a3f      	ldr	r2, [pc, #252]	; (800593c <HAL_ETH_Init+0x1c4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	0c9a      	lsrs	r2, r3, #18
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3a01      	subs	r2, #1
 800584c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa71 	bl	8005d38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005862:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005872:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	22e0      	movs	r2, #224	; 0xe0
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e049      	b.n	800592a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <HAL_ETH_Init+0x1c8>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6952      	ldr	r2, [r2, #20]
 80058aa:	0051      	lsls	r1, r2, #1
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058b6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fad9 	bl	8005e72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fb1f 	bl	8005f04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	3305      	adds	r3, #5
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	3303      	adds	r3, #3
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	061a      	lsls	r2, r3, #24
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	3302      	adds	r3, #2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	3301      	adds	r3, #1
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005904:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005912:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2210      	movs	r2, #16
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	58024400 	.word	0x58024400
 8005938:	58000400 	.word	0x58000400
 800593c:	431bde83 	.word	0x431bde83
 8005940:	ffff8001 	.word	0xffff8001

08005944 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005954:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800595c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800595e:	f001 fe69 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8005962:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d908      	bls.n	800597e <HAL_ETH_SetMDIOClockRange+0x3a>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d804      	bhi.n	800597e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e027      	b.n	80059ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d908      	bls.n	8005998 <HAL_ETH_SetMDIOClockRange+0x54>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d204      	bcs.n	8005998 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e01a      	b.n	80059ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d303      	bcc.n	80059a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d911      	bls.n	80059cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a10      	ldr	r2, [pc, #64]	; (80059ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d908      	bls.n	80059c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d804      	bhi.n	80059c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e005      	b.n	80059ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e000      	b.n	80059ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80059cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	01312cff 	.word	0x01312cff
 80059e4:	02160ebf 	.word	0x02160ebf
 80059e8:	03938700 	.word	0x03938700
 80059ec:	05f5e0ff 	.word	0x05f5e0ff
 80059f0:	08f0d17f 	.word	0x08f0d17f

080059f4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	791b      	ldrb	r3, [r3, #4]
 8005a0c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	7b1b      	ldrb	r3, [r3, #12]
 8005a14:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	7b5b      	ldrb	r3, [r3, #13]
 8005a1c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	7b9b      	ldrb	r3, [r3, #14]
 8005a24:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	7bdb      	ldrb	r3, [r3, #15]
 8005a2c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	7c12      	ldrb	r2, [r2, #16]
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	d102      	bne.n	8005a3e <ETH_SetMACConfig+0x4a>
 8005a38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a3c:	e000      	b.n	8005a40 <ETH_SetMACConfig+0x4c>
 8005a3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a40:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	7c52      	ldrb	r2, [r2, #17]
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	d102      	bne.n	8005a50 <ETH_SetMACConfig+0x5c>
 8005a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a4e:	e000      	b.n	8005a52 <ETH_SetMACConfig+0x5e>
 8005a50:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7c9b      	ldrb	r3, [r3, #18]
 8005a58:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a5a:	431a      	orrs	r2, r3
               macconf->Speed |
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005a60:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7f1b      	ldrb	r3, [r3, #28]
 8005a6c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	7f5b      	ldrb	r3, [r3, #29]
 8005a74:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005a76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	7f92      	ldrb	r2, [r2, #30]
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d102      	bne.n	8005a86 <ETH_SetMACConfig+0x92>
 8005a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a84:	e000      	b.n	8005a88 <ETH_SetMACConfig+0x94>
 8005a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005a88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	7fdb      	ldrb	r3, [r3, #31]
 8005a8e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005a90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	d102      	bne.n	8005aa2 <ETH_SetMACConfig+0xae>
 8005a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa0:	e000      	b.n	8005aa4 <ETH_SetMACConfig+0xb0>
 8005aa2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005aa4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005ab4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b56      	ldr	r3, [pc, #344]	; (8005c20 <ETH_SetMACConfig+0x22c>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ade:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005ae0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ae8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005af2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005af4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	d102      	bne.n	8005b06 <ETH_SetMACConfig+0x112>
 8005b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b04:	e000      	b.n	8005b08 <ETH_SetMACConfig+0x114>
 8005b06:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b08:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <ETH_SetMACConfig+0x230>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	430b      	orrs	r3, r1
 8005b24:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b2c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <ETH_SetMACConfig+0x234>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b50:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d101      	bne.n	8005b66 <ETH_SetMACConfig+0x172>
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	e000      	b.n	8005b68 <ETH_SetMACConfig+0x174>
 8005b66:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005b68:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b7a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005b90:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005b98:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba6:	f023 0103 	bic.w	r1, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005bbe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	d101      	bne.n	8005be2 <ETH_SetMACConfig+0x1ee>
 8005bde:	2240      	movs	r2, #64	; 0x40
 8005be0:	e000      	b.n	8005be4 <ETH_SetMACConfig+0x1f0>
 8005be2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005be4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005bec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005bf6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	00048083 	.word	0x00048083
 8005c24:	c0f88000 	.word	0xc0f88000
 8005c28:	fffffef0 	.word	0xfffffef0

08005c2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b38      	ldr	r3, [pc, #224]	; (8005d24 <ETH_SetDMAConfig+0xf8>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	6811      	ldr	r1, [r2, #0]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c52:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
 8005c64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <ETH_SetDMAConfig+0xfc>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	68f9      	ldr	r1, [r7, #12]
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c84:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	7b5b      	ldrb	r3, [r3, #13]
 8005c8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005ca0:	4b22      	ldr	r3, [pc, #136]	; (8005d2c <ETH_SetDMAConfig+0x100>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	68f9      	ldr	r1, [r7, #12]
 8005caa:	430b      	orrs	r3, r1
 8005cac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cb0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	7d1b      	ldrb	r3, [r3, #20]
 8005cbc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	7f5b      	ldrb	r3, [r3, #29]
 8005cc4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <ETH_SetDMAConfig+0x104>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ce6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	7f1b      	ldrb	r3, [r3, #28]
 8005cee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d00:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <ETH_SetDMAConfig+0x108>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d14:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	ffff87fd 	.word	0xffff87fd
 8005d28:	ffff2ffe 	.word	0xffff2ffe
 8005d2c:	fffec000 	.word	0xfffec000
 8005d30:	ffc0efef 	.word	0xffc0efef
 8005d34:	7fc0ffff 	.word	0x7fc0ffff

08005d38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b0a4      	sub	sp, #144	; 0x90
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d46:	2300      	movs	r3, #0
 8005d48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005d90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005d94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005db2:	2300      	movs	r3, #0
 8005db4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005de2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005df4:	2302      	movs	r3, #2
 8005df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e12:	2300      	movs	r3, #0
 8005e14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fde6 	bl	80059f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005e58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fee1 	bl	8005c2c <ETH_SetDMAConfig>
}
 8005e6a:	bf00      	nop
 8005e6c:	3790      	adds	r7, #144	; 0x90
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e01d      	b.n	8005ebc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68d9      	ldr	r1, [r3, #12]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	3206      	adds	r2, #6
 8005eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d9de      	bls.n	8005e80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e023      	b.n	8005f5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6919      	ldr	r1, [r3, #16]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	3212      	adds	r2, #18
 8005f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d9d8      	bls.n	8005f12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f86:	461a      	mov	r2, r3
 8005f88:	2303      	movs	r3, #3
 8005f8a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fce:	4b89      	ldr	r3, [pc, #548]	; (80061f4 <HAL_GPIO_Init+0x234>)
 8005fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fd2:	e194      	b.n	80062fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8186 	beq.w	80062f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d005      	beq.n	8006004 <HAL_GPIO_Init+0x44>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d130      	bne.n	8006066 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	2203      	movs	r2, #3
 8006010:	fa02 f303 	lsl.w	r3, r2, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4013      	ands	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4313      	orrs	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800603a:	2201      	movs	r2, #1
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0201 	and.w	r2, r3, #1
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d017      	beq.n	80060a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	2203      	movs	r2, #3
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d123      	bne.n	80060f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	08da      	lsrs	r2, r3, #3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3208      	adds	r2, #8
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	220f      	movs	r2, #15
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	08da      	lsrs	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3208      	adds	r2, #8
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	2203      	movs	r2, #3
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 0203 	and.w	r2, r3, #3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80e0 	beq.w	80062f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006138:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <HAL_GPIO_Init+0x238>)
 800613a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800613e:	4a2e      	ldr	r2, [pc, #184]	; (80061f8 <HAL_GPIO_Init+0x238>)
 8006140:	f043 0302 	orr.w	r3, r3, #2
 8006144:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <HAL_GPIO_Init+0x238>)
 800614a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006156:	4a29      	ldr	r2, [pc, #164]	; (80061fc <HAL_GPIO_Init+0x23c>)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	3302      	adds	r3, #2
 800615e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4013      	ands	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <HAL_GPIO_Init+0x240>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d052      	beq.n	8006228 <HAL_GPIO_Init+0x268>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_GPIO_Init+0x244>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d031      	beq.n	80061ee <HAL_GPIO_Init+0x22e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <HAL_GPIO_Init+0x248>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d02b      	beq.n	80061ea <HAL_GPIO_Init+0x22a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1d      	ldr	r2, [pc, #116]	; (800620c <HAL_GPIO_Init+0x24c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d025      	beq.n	80061e6 <HAL_GPIO_Init+0x226>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_GPIO_Init+0x250>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01f      	beq.n	80061e2 <HAL_GPIO_Init+0x222>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <HAL_GPIO_Init+0x254>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d019      	beq.n	80061de <HAL_GPIO_Init+0x21e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	; (8006218 <HAL_GPIO_Init+0x258>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_GPIO_Init+0x21a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_GPIO_Init+0x25c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00d      	beq.n	80061d6 <HAL_GPIO_Init+0x216>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a18      	ldr	r2, [pc, #96]	; (8006220 <HAL_GPIO_Init+0x260>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <HAL_GPIO_Init+0x212>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a17      	ldr	r2, [pc, #92]	; (8006224 <HAL_GPIO_Init+0x264>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_GPIO_Init+0x20e>
 80061ca:	2309      	movs	r3, #9
 80061cc:	e02d      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061ce:	230a      	movs	r3, #10
 80061d0:	e02b      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061d2:	2308      	movs	r3, #8
 80061d4:	e029      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061d6:	2307      	movs	r3, #7
 80061d8:	e027      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061da:	2306      	movs	r3, #6
 80061dc:	e025      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061de:	2305      	movs	r3, #5
 80061e0:	e023      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061e2:	2304      	movs	r3, #4
 80061e4:	e021      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061e6:	2303      	movs	r3, #3
 80061e8:	e01f      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e01d      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e01b      	b.n	800622a <HAL_GPIO_Init+0x26a>
 80061f2:	bf00      	nop
 80061f4:	58000080 	.word	0x58000080
 80061f8:	58024400 	.word	0x58024400
 80061fc:	58000400 	.word	0x58000400
 8006200:	58020000 	.word	0x58020000
 8006204:	58020400 	.word	0x58020400
 8006208:	58020800 	.word	0x58020800
 800620c:	58020c00 	.word	0x58020c00
 8006210:	58021000 	.word	0x58021000
 8006214:	58021400 	.word	0x58021400
 8006218:	58021800 	.word	0x58021800
 800621c:	58021c00 	.word	0x58021c00
 8006220:	58022000 	.word	0x58022000
 8006224:	58022400 	.word	0x58022400
 8006228:	2300      	movs	r3, #0
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	f002 0203 	and.w	r2, r2, #3
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4093      	lsls	r3, r2
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800623a:	4938      	ldr	r1, [pc, #224]	; (800631c <HAL_GPIO_Init+0x35c>)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	3302      	adds	r3, #2
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800626e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800629c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	43db      	mvns	r3, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4013      	ands	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	f47f ae63 	bne.w	8005fd4 <HAL_GPIO_Init+0x14>
  }
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	3724      	adds	r7, #36	; 0x24
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	58000400 	.word	0x58000400

08006320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e001      	b.n	8006342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
 800635c:	4613      	mov	r3, r2
 800635e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006360:	787b      	ldrb	r3, [r7, #1]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006366:	887a      	ldrh	r2, [r7, #2]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800636c:	e003      	b.n	8006376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	041a      	lsls	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	619a      	str	r2, [r3, #24]
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006394:	887a      	ldrh	r2, [r7, #2]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4013      	ands	r3, r2
 800639a:	041a      	lsls	r2, r3, #16
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	43d9      	mvns	r1, r3
 80063a0:	887b      	ldrh	r3, [r7, #2]
 80063a2:	400b      	ands	r3, r1
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	619a      	str	r2, [r3, #24]
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <HAL_HSEM_FastTake+0x2c>)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3320      	adds	r3, #32
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <HAL_HSEM_FastTake+0x30>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e000      	b.n	80063d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	58026400 	.word	0x58026400
 80063e8:	80000300 	.word	0x80000300

080063ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80063f6:	4906      	ldr	r1, [pc, #24]	; (8006410 <HAL_HSEM_Release+0x24>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	58026400 	.word	0x58026400

08006414 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	b08f      	sub	sp, #60	; 0x3c
 8006418:	af0a      	add	r7, sp, #40	; 0x28
 800641a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e116      	b.n	8006654 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc fc8b 	bl	8002d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f004 fded 	bl	800b044 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	687e      	ldr	r6, [r7, #4]
 8006472:	466d      	mov	r5, sp
 8006474:	f106 0410 	add.w	r4, r6, #16
 8006478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800647a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800647c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800647e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006484:	e885 0003 	stmia.w	r5, {r0, r1}
 8006488:	1d33      	adds	r3, r6, #4
 800648a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f004 fd6b 	bl	800af68 <USB_CoreInit>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0d7      	b.n	8006654 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f004 fddb 	bl	800b066 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e04a      	b.n	800654c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064b6:	7bfa      	ldrb	r2, [r7, #15]
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	333d      	adds	r3, #61	; 0x3d
 80064c6:	2201      	movs	r2, #1
 80064c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	333c      	adds	r3, #60	; 0x3c
 80064da:	7bfa      	ldrb	r2, [r7, #15]
 80064dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064de:	7bfa      	ldrb	r2, [r7, #15]
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	b298      	uxth	r0, r3
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3344      	adds	r3, #68	; 0x44
 80064f2:	4602      	mov	r2, r0
 80064f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3340      	adds	r3, #64	; 0x40
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	3348      	adds	r3, #72	; 0x48
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	334c      	adds	r3, #76	; 0x4c
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006532:	7bfa      	ldrb	r2, [r7, #15]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3354      	adds	r3, #84	; 0x54
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	3301      	adds	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d3af      	bcc.n	80064b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e044      	b.n	80065e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006572:	7bfa      	ldrb	r2, [r7, #15]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006584:	7bfa      	ldrb	r2, [r7, #15]
 8006586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006588:	7bfa      	ldrb	r2, [r7, #15]
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800659e:	7bfa      	ldrb	r2, [r7, #15]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065b4:	7bfa      	ldrb	r2, [r7, #15]
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065ca:	7bfa      	ldrb	r2, [r7, #15]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	3301      	adds	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	7bfa      	ldrb	r2, [r7, #15]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3b5      	bcc.n	800655c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	687e      	ldr	r6, [r7, #4]
 80065f8:	466d      	mov	r5, sp
 80065fa:	f106 0410 	add.w	r4, r6, #16
 80065fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006606:	e894 0003 	ldmia.w	r4, {r0, r1}
 800660a:	e885 0003 	stmia.w	r5, {r0, r1}
 800660e:	1d33      	adds	r3, r6, #4
 8006610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006612:	6838      	ldr	r0, [r7, #0]
 8006614:	f004 fd74 	bl	800b100 <USB_DevInit>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e014      	b.n	8006654 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b01      	cmp	r3, #1
 8006640:	d102      	bne.n	8006648 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f80a 	bl	800665c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f004 ff32 	bl	800b4b6 <USB_DevDisconnect>

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800665c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800668c:	4313      	orrs	r3, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	10000003 	.word	0x10000003

080066a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80066ac:	4b29      	ldr	r3, [pc, #164]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d00a      	beq.n	80066ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066b8:	4b26      	ldr	r3, [pc, #152]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e040      	b.n	800674c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e03e      	b.n	800674c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80066d6:	491f      	ldr	r1, [pc, #124]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066de:	f7fc fcc5 	bl	800306c <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066e4:	e009      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066e6:	f7fc fcc1 	bl	800306c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f4:	d901      	bls.n	80066fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e028      	b.n	800674c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	d1ee      	bne.n	80066e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b1e      	cmp	r3, #30
 800670c:	d008      	beq.n	8006720 <HAL_PWREx_ConfigSupply+0x7c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b2e      	cmp	r3, #46	; 0x2e
 8006712:	d005      	beq.n	8006720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b1d      	cmp	r3, #29
 8006718:	d002      	beq.n	8006720 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b2d      	cmp	r3, #45	; 0x2d
 800671e:	d114      	bne.n	800674a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006720:	f7fc fca4 	bl	800306c <HAL_GetTick>
 8006724:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006726:	e009      	b.n	800673c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006728:	f7fc fca0 	bl	800306c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006736:	d901      	bls.n	800673c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e007      	b.n	800674c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_PWREx_ConfigSupply+0xb0>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006748:	d1ee      	bne.n	8006728 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	58024800 	.word	0x58024800

08006758 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006766:	60d3      	str	r3, [r2, #12]
}
 8006768:	bf00      	nop
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	58024800 	.word	0x58024800

08006778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	; 0x30
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f000 bc1d 	b.w	8006fc6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8087 	beq.w	80068a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800679a:	4b99      	ldr	r3, [pc, #612]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067a4:	4b96      	ldr	r3, [pc, #600]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d007      	beq.n	80067c0 <HAL_RCC_OscConfig+0x48>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	2b18      	cmp	r3, #24
 80067b4:	d110      	bne.n	80067d8 <HAL_RCC_OscConfig+0x60>
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d10b      	bne.n	80067d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	4b8f      	ldr	r3, [pc, #572]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d06c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x12e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d168      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e3f6      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e0:	d106      	bne.n	80067f0 <HAL_RCC_OscConfig+0x78>
 80067e2:	4b87      	ldr	r3, [pc, #540]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a86      	ldr	r2, [pc, #536]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e02e      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <HAL_RCC_OscConfig+0x9a>
 80067f8:	4b81      	ldr	r3, [pc, #516]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a80      	ldr	r2, [pc, #512]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4b7e      	ldr	r3, [pc, #504]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a7d      	ldr	r2, [pc, #500]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800680a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e01d      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681a:	d10c      	bne.n	8006836 <HAL_RCC_OscConfig+0xbe>
 800681c:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a77      	ldr	r2, [pc, #476]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a74      	ldr	r2, [pc, #464]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800682e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e00b      	b.n	800684e <HAL_RCC_OscConfig+0xd6>
 8006836:	4b72      	ldr	r3, [pc, #456]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a71      	ldr	r2, [pc, #452]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b6f      	ldr	r3, [pc, #444]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6e      	ldr	r2, [pc, #440]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d013      	beq.n	800687e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fc fc09 	bl	800306c <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800685e:	f7fc fc05 	bl	800306c <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b64      	cmp	r3, #100	; 0x64
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e3aa      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006870:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0xe6>
 800687c:	e014      	b.n	80068a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fc fbf5 	bl	800306c <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006886:	f7fc fbf1 	bl	800306c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b64      	cmp	r3, #100	; 0x64
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e396      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006898:	4b59      	ldr	r3, [pc, #356]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f0      	bne.n	8006886 <HAL_RCC_OscConfig+0x10e>
 80068a4:	e000      	b.n	80068a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80cb 	beq.w	8006a4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b52      	ldr	r3, [pc, #328]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c0:	4b4f      	ldr	r3, [pc, #316]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <HAL_RCC_OscConfig+0x164>
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b18      	cmp	r3, #24
 80068d0:	d156      	bne.n	8006980 <HAL_RCC_OscConfig+0x208>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d151      	bne.n	8006980 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068dc:	4b48      	ldr	r3, [pc, #288]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_OscConfig+0x17c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e368      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068f4:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 0219 	bic.w	r2, r3, #25
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	493f      	ldr	r1, [pc, #252]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006906:	f7fc fbb1 	bl	800306c <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800690e:	f7fc fbad 	bl	800306c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e352      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006920:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692c:	f7fc fbce 	bl	80030cc <HAL_GetREVID>
 8006930:	4603      	mov	r3, r0
 8006932:	f241 0203 	movw	r2, #4099	; 0x1003
 8006936:	4293      	cmp	r3, r2
 8006938:	d817      	bhi.n	800696a <HAL_RCC_OscConfig+0x1f2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d108      	bne.n	8006954 <HAL_RCC_OscConfig+0x1dc>
 8006942:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800694a:	4a2d      	ldr	r2, [pc, #180]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800694c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006950:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006952:	e07b      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006954:	4b2a      	ldr	r3, [pc, #168]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	4927      	ldr	r1, [pc, #156]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006968:	e070      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	4921      	ldr	r1, [pc, #132]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800697e:	e065      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d048      	beq.n	8006a1a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 0219 	bic.w	r2, r3, #25
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	491a      	ldr	r1, [pc, #104]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fc fb67 	bl	800306c <HAL_GetTick>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a2:	f7fc fb63 	bl	800306c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e308      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069b4:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	f7fc fb84 	bl	80030cc <HAL_GetREVID>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d81a      	bhi.n	8006a04 <HAL_RCC_OscConfig+0x28c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d108      	bne.n	80069e8 <HAL_RCC_OscConfig+0x270>
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069de:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e4:	6053      	str	r3, [r2, #4]
 80069e6:	e031      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	4902      	ldr	r1, [pc, #8]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	e026      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
 80069fe:	bf00      	nop
 8006a00:	58024400 	.word	0x58024400
 8006a04:	4b9a      	ldr	r3, [pc, #616]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	4997      	ldr	r1, [pc, #604]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]
 8006a18:	e018      	b.n	8006a4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a1a:	4b95      	ldr	r3, [pc, #596]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a94      	ldr	r2, [pc, #592]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a26:	f7fc fb21 	bl	800306c <HAL_GetTick>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a2e:	f7fc fb1d 	bl	800306c <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e2c2      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a40:	4b8b      	ldr	r3, [pc, #556]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f0      	bne.n	8006a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a9 	beq.w	8006bac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a5a:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a64:	4b82      	ldr	r3, [pc, #520]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d007      	beq.n	8006a80 <HAL_RCC_OscConfig+0x308>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b18      	cmp	r3, #24
 8006a74:	d13a      	bne.n	8006aec <HAL_RCC_OscConfig+0x374>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d135      	bne.n	8006aec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a80:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_OscConfig+0x320>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e296      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a98:	f7fc fb18 	bl	80030cc <HAL_GetREVID>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d817      	bhi.n	8006ad6 <HAL_RCC_OscConfig+0x35e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d108      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x348>
 8006aae:	4b70      	ldr	r3, [pc, #448]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ab6:	4a6e      	ldr	r2, [pc, #440]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006abc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006abe:	e075      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ac0:	4b6b      	ldr	r3, [pc, #428]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	069b      	lsls	r3, r3, #26
 8006ace:	4968      	ldr	r1, [pc, #416]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad4:	e06a      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ad6:	4b66      	ldr	r3, [pc, #408]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	4962      	ldr	r1, [pc, #392]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aea:	e05f      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d042      	beq.n	8006b7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006af4:	4b5e      	ldr	r3, [pc, #376]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a5d      	ldr	r2, [pc, #372]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fc fab4 	bl	800306c <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b08:	f7fc fab0 	bl	800306c <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e255      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b1a:	4b55      	ldr	r3, [pc, #340]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b26:	f7fc fad1 	bl	80030cc <HAL_GetREVID>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d817      	bhi.n	8006b64 <HAL_RCC_OscConfig+0x3ec>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d108      	bne.n	8006b4e <HAL_RCC_OscConfig+0x3d6>
 8006b3c:	4b4c      	ldr	r3, [pc, #304]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b44:	4a4a      	ldr	r2, [pc, #296]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b4a:	6053      	str	r3, [r2, #4]
 8006b4c:	e02e      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
 8006b4e:	4b48      	ldr	r3, [pc, #288]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	069b      	lsls	r3, r3, #26
 8006b5c:	4944      	ldr	r1, [pc, #272]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	604b      	str	r3, [r1, #4]
 8006b62:	e023      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
 8006b64:	4b42      	ldr	r3, [pc, #264]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	061b      	lsls	r3, r3, #24
 8006b72:	493f      	ldr	r1, [pc, #252]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60cb      	str	r3, [r1, #12]
 8006b78:	e018      	b.n	8006bac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b7a:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3c      	ldr	r2, [pc, #240]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fc fa71 	bl	800306c <HAL_GetTick>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b8e:	f7fc fa6d 	bl	800306c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e212      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ba0:	4b33      	ldr	r3, [pc, #204]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f0      	bne.n	8006b8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d036      	beq.n	8006c26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc4:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bcc:	f7fc fa4e 	bl	800306c <HAL_GetTick>
 8006bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd4:	f7fc fa4a 	bl	800306c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e1ef      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006be6:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x45c>
 8006bf2:	e018      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fc fa34 	bl	800306c <HAL_GetTick>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fc fa30 	bl	800306c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e1d5      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c1a:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d039      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01c      	beq.n	8006c74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c46:	f7fc fa11 	bl	800306c <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c4e:	f7fc fa0d 	bl	800306c <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e1b2      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x4d6>
 8006c6c:	e01b      	b.n	8006ca6 <HAL_RCC_OscConfig+0x52e>
 8006c6e:	bf00      	nop
 8006c70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c74:	4b9b      	ldr	r3, [pc, #620]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a9a      	ldr	r2, [pc, #616]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c80:	f7fc f9f4 	bl	800306c <HAL_GetTick>
 8006c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c88:	f7fc f9f0 	bl	800306c <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e195      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c9a:	4b92      	ldr	r3, [pc, #584]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8081 	beq.w	8006db6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cb4:	4b8c      	ldr	r3, [pc, #560]	; (8006ee8 <HAL_RCC_OscConfig+0x770>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a8b      	ldr	r2, [pc, #556]	; (8006ee8 <HAL_RCC_OscConfig+0x770>)
 8006cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cc0:	f7fc f9d4 	bl	800306c <HAL_GetTick>
 8006cc4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cc8:	f7fc f9d0 	bl	800306c <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b64      	cmp	r3, #100	; 0x64
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e175      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cda:	4b83      	ldr	r3, [pc, #524]	; (8006ee8 <HAL_RCC_OscConfig+0x770>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f0      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d106      	bne.n	8006cfc <HAL_RCC_OscConfig+0x584>
 8006cee:	4b7d      	ldr	r3, [pc, #500]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	4a7c      	ldr	r2, [pc, #496]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfa:	e02d      	b.n	8006d58 <HAL_RCC_OscConfig+0x5e0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCC_OscConfig+0x5a6>
 8006d04:	4b77      	ldr	r3, [pc, #476]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	4a76      	ldr	r2, [pc, #472]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d10:	4b74      	ldr	r3, [pc, #464]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	4a73      	ldr	r2, [pc, #460]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d16:	f023 0304 	bic.w	r3, r3, #4
 8006d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1c:	e01c      	b.n	8006d58 <HAL_RCC_OscConfig+0x5e0>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCC_OscConfig+0x5c8>
 8006d26:	4b6f      	ldr	r3, [pc, #444]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a6e      	ldr	r2, [pc, #440]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d2c:	f043 0304 	orr.w	r3, r3, #4
 8006d30:	6713      	str	r3, [r2, #112]	; 0x70
 8006d32:	4b6c      	ldr	r3, [pc, #432]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a6b      	ldr	r2, [pc, #428]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3e:	e00b      	b.n	8006d58 <HAL_RCC_OscConfig+0x5e0>
 8006d40:	4b68      	ldr	r3, [pc, #416]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	4a67      	ldr	r2, [pc, #412]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4c:	4b65      	ldr	r3, [pc, #404]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	4a64      	ldr	r2, [pc, #400]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d52:	f023 0304 	bic.w	r3, r3, #4
 8006d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d015      	beq.n	8006d8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fc f984 	bl	800306c <HAL_GetTick>
 8006d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fc f980 	bl	800306c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e123      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7e:	4b59      	ldr	r3, [pc, #356]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ee      	beq.n	8006d68 <HAL_RCC_OscConfig+0x5f0>
 8006d8a:	e014      	b.n	8006db6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fc f96e 	bl	800306c <HAL_GetTick>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fc f96a 	bl	800306c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e10d      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006daa:	4b4e      	ldr	r3, [pc, #312]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ee      	bne.n	8006d94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8102 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006dc0:	4b48      	ldr	r3, [pc, #288]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc8:	2b18      	cmp	r3, #24
 8006dca:	f000 80bd 	beq.w	8006f48 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	f040 809e 	bne.w	8006f14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd8:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fc f942 	bl	800306c <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fc f93e 	bl	800306c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e0e3      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dfe:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <HAL_RCC_OscConfig+0x774>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e1a:	0112      	lsls	r2, r2, #4
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	4931      	ldr	r1, [pc, #196]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	628b      	str	r3, [r1, #40]	; 0x28
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	3b01      	subs	r3, #1
 8006e34:	025b      	lsls	r3, r3, #9
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	061b      	lsls	r3, r3, #24
 8006e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e54:	4923      	ldr	r1, [pc, #140]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e5a:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e66:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6a:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <HAL_RCC_OscConfig+0x778>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e72:	00d2      	lsls	r2, r2, #3
 8006e74:	491b      	ldr	r1, [pc, #108]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	f023 020c 	bic.w	r2, r3, #12
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	4917      	ldr	r1, [pc, #92]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e8c:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	f023 0202 	bic.w	r2, r3, #2
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	4912      	ldr	r1, [pc, #72]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a10      	ldr	r2, [pc, #64]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a0d      	ldr	r2, [pc, #52]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a07      	ldr	r2, [pc, #28]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eda:	f7fc f8c7 	bl	800306c <HAL_GetTick>
 8006ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ee0:	e011      	b.n	8006f06 <HAL_RCC_OscConfig+0x78e>
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	58024800 	.word	0x58024800
 8006eec:	fffffc0c 	.word	0xfffffc0c
 8006ef0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef4:	f7fc f8ba 	bl	800306c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e05f      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f06:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x77c>
 8006f12:	e057      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f14:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fc f8a4 	bl	800306c <HAL_GetTick>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f28:	f7fc f8a0 	bl	800306c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e045      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3a:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x7b0>
 8006f46:	e03d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f48:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <HAL_RCC_OscConfig+0x858>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d031      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f003 0203 	and.w	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d12a      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d122      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d11a      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	0a5b      	lsrs	r3, r3, #9
 8006f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d111      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d108      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3730      	adds	r7, #48	; 0x30
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400

08006fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e19c      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe8:	4b8a      	ldr	r3, [pc, #552]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d910      	bls.n	8007018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff6:	4b87      	ldr	r3, [pc, #540]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f023 020f 	bic.w	r2, r3, #15
 8006ffe:	4985      	ldr	r1, [pc, #532]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	4313      	orrs	r3, r2
 8007004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007006:	4b83      	ldr	r3, [pc, #524]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e184      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d010      	beq.n	8007046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007030:	429a      	cmp	r2, r3
 8007032:	d908      	bls.n	8007046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007034:	4b78      	ldr	r3, [pc, #480]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	4975      	ldr	r1, [pc, #468]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007042:	4313      	orrs	r3, r2
 8007044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d010      	beq.n	8007074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	4b70      	ldr	r3, [pc, #448]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800705e:	429a      	cmp	r2, r3
 8007060:	d908      	bls.n	8007074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007062:	4b6d      	ldr	r3, [pc, #436]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	496a      	ldr	r1, [pc, #424]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007070:	4313      	orrs	r3, r2
 8007072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d010      	beq.n	80070a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	4b64      	ldr	r3, [pc, #400]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800708c:	429a      	cmp	r2, r3
 800708e:	d908      	bls.n	80070a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007090:	4b61      	ldr	r3, [pc, #388]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	495e      	ldr	r1, [pc, #376]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d010      	beq.n	80070d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69da      	ldr	r2, [r3, #28]
 80070b2:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d908      	bls.n	80070d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070be:	4b56      	ldr	r3, [pc, #344]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	4953      	ldr	r1, [pc, #332]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d908      	bls.n	80070fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ec:	4b4a      	ldr	r3, [pc, #296]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f023 020f 	bic.w	r2, r3, #15
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4947      	ldr	r1, [pc, #284]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d055      	beq.n	80071b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800710a:	4b43      	ldr	r3, [pc, #268]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4940      	ldr	r1, [pc, #256]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007118:	4313      	orrs	r3, r2
 800711a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d107      	bne.n	8007134 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007124:	4b3c      	ldr	r3, [pc, #240]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d121      	bne.n	8007174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0f6      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d107      	bne.n	800714c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d115      	bne.n	8007174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0ea      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007154:	4b30      	ldr	r3, [pc, #192]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0de      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007164:	4b2c      	ldr	r3, [pc, #176]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e0d6      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007174:	4b28      	ldr	r3, [pc, #160]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f023 0207 	bic.w	r2, r3, #7
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4925      	ldr	r1, [pc, #148]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 8007182:	4313      	orrs	r3, r2
 8007184:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fb ff71 	bl	800306c <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718c:	e00a      	b.n	80071a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718e:	f7fb ff6d 	bl	800306c <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f241 3288 	movw	r2, #5000	; 0x1388
 800719c:	4293      	cmp	r3, r2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e0be      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a4:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d1eb      	bne.n	800718e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	4b14      	ldr	r3, [pc, #80]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d208      	bcs.n	80071e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d2:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f023 020f 	bic.w	r2, r3, #15
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	490e      	ldr	r1, [pc, #56]	; (8007218 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d214      	bcs.n	800721c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f2:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f023 020f 	bic.w	r2, r3, #15
 80071fa:	4906      	ldr	r1, [pc, #24]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	4313      	orrs	r3, r2
 8007200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <HAL_RCC_ClockConfig+0x240>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d005      	beq.n	800721c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e086      	b.n	8007322 <HAL_RCC_ClockConfig+0x34e>
 8007214:	52002000 	.word	0x52002000
 8007218:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	4b3f      	ldr	r3, [pc, #252]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007234:	429a      	cmp	r2, r3
 8007236:	d208      	bcs.n	800724a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007238:	4b3c      	ldr	r3, [pc, #240]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4939      	ldr	r1, [pc, #228]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 8007246:	4313      	orrs	r3, r2
 8007248:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	4b34      	ldr	r3, [pc, #208]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007262:	429a      	cmp	r2, r3
 8007264:	d208      	bcs.n	8007278 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007266:	4b31      	ldr	r3, [pc, #196]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	492e      	ldr	r1, [pc, #184]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 8007274:	4313      	orrs	r3, r2
 8007276:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	d010      	beq.n	80072a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	4b28      	ldr	r3, [pc, #160]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007290:	429a      	cmp	r2, r3
 8007292:	d208      	bcs.n	80072a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007294:	4b25      	ldr	r3, [pc, #148]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	4922      	ldr	r1, [pc, #136]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d010      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69da      	ldr	r2, [r3, #28]
 80072b6:	4b1d      	ldr	r3, [pc, #116]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072be:	429a      	cmp	r2, r3
 80072c0:	d208      	bcs.n	80072d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072c2:	4b1a      	ldr	r3, [pc, #104]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	4917      	ldr	r1, [pc, #92]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072d4:	f000 f834 	bl	8007340 <HAL_RCC_GetSysClockFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	4912      	ldr	r1, [pc, #72]	; (8007330 <HAL_RCC_ClockConfig+0x35c>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
 80072f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <HAL_RCC_ClockConfig+0x358>)
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <HAL_RCC_ClockConfig+0x35c>)
 80072fc:	5cd3      	ldrb	r3, [r2, r3]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <HAL_RCC_ClockConfig+0x360>)
 800730a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800730c:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <HAL_RCC_ClockConfig+0x364>)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <HAL_RCC_ClockConfig+0x368>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fb fe5e 	bl	8002fd8 <HAL_InitTick>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	58024400 	.word	0x58024400
 8007330:	0800bfbc 	.word	0x0800bfbc
 8007334:	24000004 	.word	0x24000004
 8007338:	24000000 	.word	0x24000000
 800733c:	24000018 	.word	0x24000018

08007340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007346:	4bb3      	ldr	r3, [pc, #716]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800734e:	2b18      	cmp	r3, #24
 8007350:	f200 8155 	bhi.w	80075fe <HAL_RCC_GetSysClockFreq+0x2be>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	080073c1 	.word	0x080073c1
 8007360:	080075ff 	.word	0x080075ff
 8007364:	080075ff 	.word	0x080075ff
 8007368:	080075ff 	.word	0x080075ff
 800736c:	080075ff 	.word	0x080075ff
 8007370:	080075ff 	.word	0x080075ff
 8007374:	080075ff 	.word	0x080075ff
 8007378:	080075ff 	.word	0x080075ff
 800737c:	080073e7 	.word	0x080073e7
 8007380:	080075ff 	.word	0x080075ff
 8007384:	080075ff 	.word	0x080075ff
 8007388:	080075ff 	.word	0x080075ff
 800738c:	080075ff 	.word	0x080075ff
 8007390:	080075ff 	.word	0x080075ff
 8007394:	080075ff 	.word	0x080075ff
 8007398:	080075ff 	.word	0x080075ff
 800739c:	080073ed 	.word	0x080073ed
 80073a0:	080075ff 	.word	0x080075ff
 80073a4:	080075ff 	.word	0x080075ff
 80073a8:	080075ff 	.word	0x080075ff
 80073ac:	080075ff 	.word	0x080075ff
 80073b0:	080075ff 	.word	0x080075ff
 80073b4:	080075ff 	.word	0x080075ff
 80073b8:	080075ff 	.word	0x080075ff
 80073bc:	080073f3 	.word	0x080073f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c0:	4b94      	ldr	r3, [pc, #592]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073cc:	4b91      	ldr	r3, [pc, #580]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	4a90      	ldr	r2, [pc, #576]	; (8007618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
 80073dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80073de:	e111      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073e0:	4b8d      	ldr	r3, [pc, #564]	; (8007618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073e2:	61bb      	str	r3, [r7, #24]
    break;
 80073e4:	e10e      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80073e6:	4b8d      	ldr	r3, [pc, #564]	; (800761c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073e8:	61bb      	str	r3, [r7, #24]
    break;
 80073ea:	e10b      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80073ec:	4b8c      	ldr	r3, [pc, #560]	; (8007620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073ee:	61bb      	str	r3, [r7, #24]
    break;
 80073f0:	e108      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f2:	4b88      	ldr	r3, [pc, #544]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073fc:	4b85      	ldr	r3, [pc, #532]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	091b      	lsrs	r3, r3, #4
 8007402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007406:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007408:	4b82      	ldr	r3, [pc, #520]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007412:	4b80      	ldr	r3, [pc, #512]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80e1 	beq.w	80075f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b02      	cmp	r3, #2
 800743a:	f000 8083 	beq.w	8007544 <HAL_RCC_GetSysClockFreq+0x204>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f200 80a1 	bhi.w	8007588 <HAL_RCC_GetSysClockFreq+0x248>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCC_GetSysClockFreq+0x114>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d056      	beq.n	8007500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007452:	e099      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007454:	4b6f      	ldr	r3, [pc, #444]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02d      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007460:	4b6c      	ldr	r3, [pc, #432]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	4a6b      	ldr	r2, [pc, #428]	; (8007618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b62      	ldr	r3, [pc, #392]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a02 	vldr	s12, [r7, #8]
 800749e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074ba:	e087      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b51      	ldr	r3, [pc, #324]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fe:	e065      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800762c <HAL_RCC_GetSysClockFreq+0x2ec>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b40      	ldr	r3, [pc, #256]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a02 	vldr	s12, [r7, #8]
 8007526:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007542:	e043      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a02 	vldr	s12, [r7, #8]
 800756a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007586:	e021      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a26 	vldr	s13, [pc, #152]	; 800762c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075cc:	4b11      	ldr	r3, [pc, #68]	; (8007614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	0a5b      	lsrs	r3, r3, #9
 80075d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d6:	3301      	adds	r3, #1
 80075d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f0:	ee17 3a90 	vmov	r3, s15
 80075f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80075f6:	e005      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
    break;
 80075fc:	e002      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007600:	61bb      	str	r3, [r7, #24]
    break;
 8007602:	bf00      	nop
  }

  return sysclockfreq;
 8007604:	69bb      	ldr	r3, [r7, #24]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3724      	adds	r7, #36	; 0x24
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	007a1200 	.word	0x007a1200
 8007624:	46000000 	.word	0x46000000
 8007628:	4c742400 	.word	0x4c742400
 800762c:	4a742400 	.word	0x4a742400
 8007630:	4af42400 	.word	0x4af42400

08007634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800763a:	f7ff fe81 	bl	8007340 <HAL_RCC_GetSysClockFreq>
 800763e:	4602      	mov	r2, r0
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <HAL_RCC_GetHCLKFreq+0x50>)
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	0a1b      	lsrs	r3, r3, #8
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	490f      	ldr	r1, [pc, #60]	; (8007688 <HAL_RCC_GetHCLKFreq+0x54>)
 800764c:	5ccb      	ldrb	r3, [r1, r3]
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <HAL_RCC_GetHCLKFreq+0x50>)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	4a09      	ldr	r2, [pc, #36]	; (8007688 <HAL_RCC_GetHCLKFreq+0x54>)
 8007662:	5cd3      	ldrb	r3, [r2, r3]
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <HAL_RCC_GetHCLKFreq+0x58>)
 8007670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007672:	4a07      	ldr	r2, [pc, #28]	; (8007690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007678:	4b04      	ldr	r3, [pc, #16]	; (800768c <HAL_RCC_GetHCLKFreq+0x58>)
 800767a:	681b      	ldr	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	58024400 	.word	0x58024400
 8007688:	0800bfbc 	.word	0x0800bfbc
 800768c:	24000004 	.word	0x24000004
 8007690:	24000000 	.word	0x24000000

08007694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007698:	f7ff ffcc 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	4904      	ldr	r1, [pc, #16]	; (80076bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	58024400 	.word	0x58024400
 80076bc:	0800bfbc 	.word	0x0800bfbc

080076c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076c4:	f7ff ffb6 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	0a1b      	lsrs	r3, r3, #8
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	4904      	ldr	r1, [pc, #16]	; (80076e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076d6:	5ccb      	ldrb	r3, [r1, r3]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	58024400 	.word	0x58024400
 80076e8:	0800bfbc 	.word	0x0800bfbc

080076ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076f8:	2300      	movs	r3, #0
 80076fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d03f      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007710:	d02a      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007712:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007716:	d824      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771c:	d018      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800771e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007722:	d81e      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772c:	d007      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800772e:	e018      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007730:	4ba3      	ldr	r3, [pc, #652]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4aa2      	ldr	r2, [pc, #648]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800773c:	e015      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3304      	adds	r3, #4
 8007742:	2102      	movs	r1, #2
 8007744:	4618      	mov	r0, r3
 8007746:	f001 f9d5 	bl	8008af4 <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800774e:	e00c      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	2102      	movs	r1, #2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 fa7e 	bl	8008c58 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007760:	e003      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
      break;
 8007766:	e000      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d109      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007770:	4b93      	ldr	r3, [pc, #588]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	4990      	ldr	r1, [pc, #576]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800777e:	4313      	orrs	r3, r2
 8007780:	650b      	str	r3, [r1, #80]	; 0x50
 8007782:	e001      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007790:	2b00      	cmp	r3, #0
 8007792:	d03d      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007798:	2b04      	cmp	r3, #4
 800779a:	d826      	bhi.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077c7 	.word	0x080077c7
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077f1 	.word	0x080077f1
 80077b4:	080077f1 	.word	0x080077f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b8:	4b81      	ldr	r3, [pc, #516]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a80      	ldr	r2, [pc, #512]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077c4:	e015      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3304      	adds	r3, #4
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 f991 	bl	8008af4 <RCCEx_PLL2_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077d6:	e00c      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	2100      	movs	r1, #0
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fa3a 	bl	8008c58 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077e8:	e003      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
      break;
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80077f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077f8:	4b71      	ldr	r3, [pc, #452]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	f023 0207 	bic.w	r2, r3, #7
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	496e      	ldr	r1, [pc, #440]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007806:	4313      	orrs	r3, r2
 8007808:	650b      	str	r3, [r1, #80]	; 0x50
 800780a:	e001      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	2b00      	cmp	r3, #0
 800781a:	d042      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007824:	d02b      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d825      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800782c:	2bc0      	cmp	r3, #192	; 0xc0
 800782e:	d028      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007830:	2bc0      	cmp	r3, #192	; 0xc0
 8007832:	d821      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d016      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007838:	2b80      	cmp	r3, #128	; 0x80
 800783a:	d81d      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d007      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007844:	e018      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007846:	4b5e      	ldr	r3, [pc, #376]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	4a5d      	ldr	r2, [pc, #372]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800784c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007852:	e017      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f001 f94a 	bl	8008af4 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007864:	e00e      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3324      	adds	r3, #36	; 0x24
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f9f3 	bl	8008c58 <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007876:	e005      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
      break;
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007896:	494a      	ldr	r1, [pc, #296]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007898:	4313      	orrs	r3, r2
 800789a:	650b      	str	r3, [r1, #80]	; 0x50
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d049      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078b8:	d030      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80078ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078be:	d82a      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078c4:	d02c      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80078c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078ca:	d824      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d0:	d018      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80078d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d6:	d81e      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80078dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e0:	d007      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80078e2:	e018      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e4:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a35      	ldr	r2, [pc, #212]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078f0:	e017      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 f8fb 	bl	8008af4 <RCCEx_PLL2_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007902:	e00e      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3324      	adds	r3, #36	; 0x24
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f9a4 	bl	8008c58 <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007914:	e005      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
      break;
 800791a:	e002      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007936:	4922      	ldr	r1, [pc, #136]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007938:	4313      	orrs	r3, r2
 800793a:	658b      	str	r3, [r1, #88]	; 0x58
 800793c:	e001      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794a:	2b00      	cmp	r3, #0
 800794c:	d04b      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007958:	d030      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800795a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800795e:	d82a      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007964:	d02e      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800796a:	d824      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800796c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007970:	d018      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007976:	d81e      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800797c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007980:	d007      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007982:	e018      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a0d      	ldr	r2, [pc, #52]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007990:	e019      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3304      	adds	r3, #4
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f8ab 	bl	8008af4 <RCCEx_PLL2_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079a2:	e010      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f954 	bl	8008c58 <RCCEx_PLL3_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079b4:	e007      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ba:	e004      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80079c0:	58024400 	.word	0x58024400
      break;
 80079c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079cc:	4b99      	ldr	r3, [pc, #612]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079da:	4996      	ldr	r1, [pc, #600]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	658b      	str	r3, [r1, #88]	; 0x58
 80079e0:	e001      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d032      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	2b30      	cmp	r3, #48	; 0x30
 80079f8:	d01c      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80079fa:	2b30      	cmp	r3, #48	; 0x30
 80079fc:	d817      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d00c      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d813      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d10f      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0e:	4b89      	ldr	r3, [pc, #548]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a88      	ldr	r2, [pc, #544]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a1a:	e00e      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	2102      	movs	r1, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f866 	bl	8008af4 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a2c:	e005      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
      break;
 8007a32:	e002      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a40:	4b7c      	ldr	r3, [pc, #496]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4c:	4979      	ldr	r1, [pc, #484]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d047      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a6c:	d030      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a72:	d82a      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a78:	d02c      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007a7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a7e:	d824      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d018      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8a:	d81e      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a94:	d007      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007a96:	e018      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4b66      	ldr	r3, [pc, #408]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4a65      	ldr	r2, [pc, #404]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aa4:	e017      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 f821 	bl	8008af4 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ab6:	e00e      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 f8ca 	bl	8008c58 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ac8:	e005      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ace:	e002      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007adc:	4b55      	ldr	r3, [pc, #340]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae8:	4952      	ldr	r1, [pc, #328]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	650b      	str	r3, [r1, #80]	; 0x50
 8007aee:	e001      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d049      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b08:	d02e      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b0e:	d828      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b14:	d02a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b1a:	d822      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b20:	d026      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b26:	d81c      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2c:	d010      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b32:	d816      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01d      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d111      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ffd5 	bl	8008af4 <RCCEx_PLL2_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b4e:	e012      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3324      	adds	r3, #36	; 0x24
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 f87e 	bl	8008c58 <RCCEx_PLL3_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b60:	e009      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
      break;
 8007b66:	e006      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b7c:	4b2d      	ldr	r3, [pc, #180]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b88:	492a      	ldr	r1, [pc, #168]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04d      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007baa:	d02e      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bb0:	d828      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb6:	d02a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbc:	d822      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc2:	d026      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc8:	d81c      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bce:	d010      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd4:	d816      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01d      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bde:	d111      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	2101      	movs	r1, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 ff84 	bl	8008af4 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e012      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f82d 	bl	8008c58 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10c      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	658b      	str	r3, [r1, #88]	; 0x58
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d02f      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c50:	d00e      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c56:	d814      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d015      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c60:	d10f      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c62:	4baf      	ldr	r3, [pc, #700]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	4aae      	ldr	r2, [pc, #696]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c6e:	e00c      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	2101      	movs	r1, #1
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 ff3c 	bl	8008af4 <RCCEx_PLL2_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c80:	e003      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
      break;
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c90:	4ba3      	ldr	r3, [pc, #652]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9c:	49a0      	ldr	r1, [pc, #640]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8007ca2:	e001      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d032      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d81b      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007cfb 	.word	0x08007cfb
 8007cc8:	08007cd5 	.word	0x08007cd5
 8007ccc:	08007ce3 	.word	0x08007ce3
 8007cd0:	08007cfb 	.word	0x08007cfb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd4:	4b92      	ldr	r3, [pc, #584]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	4a91      	ldr	r2, [pc, #580]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ce0:	e00c      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ff03 	bl	8008af4 <RCCEx_PLL2_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cf2:	e003      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf8:	e000      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d02:	4b87      	ldr	r3, [pc, #540]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d06:	f023 0203 	bic.w	r2, r3, #3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	4984      	ldr	r1, [pc, #528]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d14:	e001      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8086 	beq.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d28:	4b7e      	ldr	r3, [pc, #504]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a7d      	ldr	r2, [pc, #500]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d34:	f7fb f99a 	bl	800306c <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3a:	e009      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3c:	f7fb f996 	bl	800306c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	; 0x64
 8007d48:	d902      	bls.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	75fb      	strb	r3, [r7, #23]
        break;
 8007d4e:	e005      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d50:	4b74      	ldr	r3, [pc, #464]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0ef      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d166      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d62:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d6c:	4053      	eors	r3, r2
 8007d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d013      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d76:	4b6a      	ldr	r3, [pc, #424]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d80:	4b67      	ldr	r3, [pc, #412]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	4a66      	ldr	r2, [pc, #408]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d8c:	4b64      	ldr	r3, [pc, #400]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	4a63      	ldr	r2, [pc, #396]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d98:	4a61      	ldr	r2, [pc, #388]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da8:	d115      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fb f95f 	bl	800306c <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007db0:	e00b      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fb f95b 	bl	800306c <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d902      	bls.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8007dc8:	e005      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dca:	4b55      	ldr	r3, [pc, #340]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0ed      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d126      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dea:	d10d      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007dec:	4b4c      	ldr	r3, [pc, #304]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dfa:	0919      	lsrs	r1, r3, #4
 8007dfc:	4b4a      	ldr	r3, [pc, #296]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007dfe:	400b      	ands	r3, r1
 8007e00:	4947      	ldr	r1, [pc, #284]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	610b      	str	r3, [r1, #16]
 8007e06:	e005      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e08:	4b45      	ldr	r3, [pc, #276]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	4a44      	ldr	r2, [pc, #272]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e12:	6113      	str	r3, [r2, #16]
 8007e14:	4b42      	ldr	r3, [pc, #264]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e22:	493f      	ldr	r1, [pc, #252]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	670b      	str	r3, [r1, #112]	; 0x70
 8007e28:	e004      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	75bb      	strb	r3, [r7, #22]
 8007e2e:	e001      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8085 	beq.w	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e46:	2b28      	cmp	r3, #40	; 0x28
 8007e48:	d866      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007f2d 	.word	0x08007f2d
 8007e54:	08007f19 	.word	0x08007f19
 8007e58:	08007f19 	.word	0x08007f19
 8007e5c:	08007f19 	.word	0x08007f19
 8007e60:	08007f19 	.word	0x08007f19
 8007e64:	08007f19 	.word	0x08007f19
 8007e68:	08007f19 	.word	0x08007f19
 8007e6c:	08007f19 	.word	0x08007f19
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007f19 	.word	0x08007f19
 8007e78:	08007f19 	.word	0x08007f19
 8007e7c:	08007f19 	.word	0x08007f19
 8007e80:	08007f19 	.word	0x08007f19
 8007e84:	08007f19 	.word	0x08007f19
 8007e88:	08007f19 	.word	0x08007f19
 8007e8c:	08007f19 	.word	0x08007f19
 8007e90:	08007f07 	.word	0x08007f07
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f19 	.word	0x08007f19
 8007e9c:	08007f19 	.word	0x08007f19
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007f2d 	.word	0x08007f2d
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007f19 	.word	0x08007f19
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f19 	.word	0x08007f19
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f19 	.word	0x08007f19
 8007edc:	08007f19 	.word	0x08007f19
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	08007f19 	.word	0x08007f19
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	08007f2d 	.word	0x08007f2d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	2101      	movs	r1, #1
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fdfa 	bl	8008af4 <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f04:	e013      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3324      	adds	r3, #36	; 0x24
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fea3 	bl	8008c58 <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f16:	e00a      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	e007      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400
 8007f24:	58024800 	.word	0x58024800
 8007f28:	00ffffcf 	.word	0x00ffffcf
      break;
 8007f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f34:	4b96      	ldr	r3, [pc, #600]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f40:	4993      	ldr	r1, [pc, #588]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	654b      	str	r3, [r1, #84]	; 0x54
 8007f46:	e001      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d038      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d821      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007fab 	.word	0x08007fab
 8007f6c:	08007f81 	.word	0x08007f81
 8007f70:	08007f93 	.word	0x08007f93
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fab 	.word	0x08007fab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	2101      	movs	r1, #1
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fdb4 	bl	8008af4 <RCCEx_PLL2_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f90:	e00c      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3324      	adds	r3, #36	; 0x24
 8007f96:	2101      	movs	r1, #1
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fe5d 	bl	8008c58 <RCCEx_PLL3_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	e000      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fb2:	4b77      	ldr	r3, [pc, #476]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f023 0207 	bic.w	r2, r3, #7
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbe:	4974      	ldr	r1, [pc, #464]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	654b      	str	r3, [r1, #84]	; 0x54
 8007fc4:	e001      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03a      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d821      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800802b 	.word	0x0800802b
 8007fec:	08008001 	.word	0x08008001
 8007ff0:	08008013 	.word	0x08008013
 8007ff4:	0800802b 	.word	0x0800802b
 8007ff8:	0800802b 	.word	0x0800802b
 8007ffc:	0800802b 	.word	0x0800802b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	2101      	movs	r1, #1
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fd74 	bl	8008af4 <RCCEx_PLL2_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008010:	e00c      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3324      	adds	r3, #36	; 0x24
 8008016:	2101      	movs	r1, #1
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fe1d 	bl	8008c58 <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008022:	e003      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	e000      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800802a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008032:	4b57      	ldr	r3, [pc, #348]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008036:	f023 0207 	bic.w	r2, r3, #7
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	4953      	ldr	r1, [pc, #332]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	658b      	str	r3, [r1, #88]	; 0x58
 8008046:	e001      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d04b      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008062:	d02e      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008068:	d828      	bhi.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d02a      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008074:	d822      	bhi.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807a:	d026      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800807c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008080:	d81c      	bhi.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008086:	d010      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808c:	d816      	bhi.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01d      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008096:	d111      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3304      	adds	r3, #4
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fd28 	bl	8008af4 <RCCEx_PLL2_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080a8:	e012      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3324      	adds	r3, #36	; 0x24
 80080ae:	2102      	movs	r1, #2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fdd1 	bl	8008c58 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080ba:	e009      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	75fb      	strb	r3, [r7, #23]
      break;
 80080c0:	e006      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80080c2:	bf00      	nop
 80080c4:	e004      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80080c6:	bf00      	nop
 80080c8:	e002      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80080ca:	bf00      	nop
 80080cc:	e000      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80080ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080d6:	4b2e      	ldr	r3, [pc, #184]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e4:	492a      	ldr	r1, [pc, #168]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	654b      	str	r3, [r1, #84]	; 0x54
 80080ea:	e001      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d04d      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008102:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008106:	d02e      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008108:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800810c:	d828      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800810e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008112:	d02a      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008118:	d822      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800811a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811e:	d026      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008124:	d81c      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800812a:	d010      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800812c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008130:	d816      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01d      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813a:	d111      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fcd6 	bl	8008af4 <RCCEx_PLL2_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800814c:	e012      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3324      	adds	r3, #36	; 0x24
 8008152:	2102      	movs	r1, #2
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd7f 	bl	8008c58 <RCCEx_PLL3_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800815e:	e009      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
      break;
 8008164:	e006      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008166:	bf00      	nop
 8008168:	e004      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800816a:	bf00      	nop
 800816c:	e002      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10c      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008188:	4901      	ldr	r1, [pc, #4]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800818a:	4313      	orrs	r3, r2
 800818c:	658b      	str	r3, [r1, #88]	; 0x58
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d04b      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081ae:	d02e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80081b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081b4:	d828      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80081b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ba:	d02a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c0:	d822      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80081c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081c6:	d026      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80081c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081cc:	d81c      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80081ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d2:	d010      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80081d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d8:	d816      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01d      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80081de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e2:	d111      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fc82 	bl	8008af4 <RCCEx_PLL2_Config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081f4:	e012      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3324      	adds	r3, #36	; 0x24
 80081fa:	2102      	movs	r1, #2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fd2b 	bl	8008c58 <RCCEx_PLL3_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008206:	e009      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
      break;
 800820c:	e006      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800820e:	bf00      	nop
 8008210:	e004      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008212:	bf00      	nop
 8008214:	e002      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008216:	bf00      	nop
 8008218:	e000      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800821a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008222:	4b9d      	ldr	r3, [pc, #628]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008230:	4999      	ldr	r1, [pc, #612]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008232:	4313      	orrs	r3, r2
 8008234:	658b      	str	r3, [r1, #88]	; 0x58
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	d10a      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3324      	adds	r3, #36	; 0x24
 8008258:	2102      	movs	r1, #2
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fcfc 	bl	8008c58 <RCCEx_PLL3_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800826a:	4b8b      	ldr	r3, [pc, #556]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008278:	4987      	ldr	r1, [pc, #540]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800827a:	4313      	orrs	r3, r2
 800827c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01a      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008294:	d10a      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3324      	adds	r3, #36	; 0x24
 800829a:	2102      	movs	r1, #2
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fcdb 	bl	8008c58 <RCCEx_PLL3_Config>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082ac:	4b7a      	ldr	r3, [pc, #488]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ba:	4977      	ldr	r1, [pc, #476]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d034      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d6:	d01d      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80082d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082dc:	d817      	bhi.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80082e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e6:	d009      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80082e8:	e011      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3304      	adds	r3, #4
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fbff 	bl	8008af4 <RCCEx_PLL2_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082fa:	e00c      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3324      	adds	r3, #36	; 0x24
 8008300:	2102      	movs	r1, #2
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fca8 	bl	8008c58 <RCCEx_PLL3_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800830c:	e003      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
      break;
 8008312:	e000      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800831c:	4b5e      	ldr	r3, [pc, #376]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800832a:	495b      	ldr	r1, [pc, #364]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800832c:	4313      	orrs	r3, r2
 800832e:	658b      	str	r3, [r1, #88]	; 0x58
 8008330:	e001      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d033      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800834c:	d01c      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800834e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008352:	d816      	bhi.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008358:	d003      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800835a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800835e:	d007      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008360:	e00f      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008362:	4b4d      	ldr	r3, [pc, #308]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a4c      	ldr	r2, [pc, #304]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800836e:	e00c      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3324      	adds	r3, #36	; 0x24
 8008374:	2101      	movs	r1, #1
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fc6e 	bl	8008c58 <RCCEx_PLL3_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008380:	e003      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
      break;
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008390:	4b41      	ldr	r3, [pc, #260]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839e:	493e      	ldr	r1, [pc, #248]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	654b      	str	r3, [r1, #84]	; 0x54
 80083a4:	e001      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d029      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80083be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c2:	d007      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80083c4:	e00f      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c6:	4b34      	ldr	r3, [pc, #208]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	4a33      	ldr	r2, [pc, #204]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083d2:	e00b      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3304      	adds	r3, #4
 80083d8:	2102      	movs	r1, #2
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb8a 	bl	8008af4 <RCCEx_PLL2_Config>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083e4:	e002      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083f2:	4b29      	ldr	r3, [pc, #164]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fe:	4926      	ldr	r1, [pc, #152]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008400:	4313      	orrs	r3, r2
 8008402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008404:	e001      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3324      	adds	r3, #36	; 0x24
 800841a:	2102      	movs	r1, #2
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fc1b 	bl	8008c58 <RCCEx_PLL3_Config>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d033      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008440:	d017      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008446:	d811      	bhi.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844c:	d013      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800844e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008452:	d80b      	bhi.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845c:	d106      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845e:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	4a0d      	ldr	r2, [pc, #52]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800846a:	e007      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
      break;
 8008470:	e004      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800847a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10c      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	4902      	ldr	r1, [pc, #8]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008490:	4313      	orrs	r3, r2
 8008492:	654b      	str	r3, [r1, #84]	; 0x54
 8008494:	e004      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008496:	bf00      	nop
 8008498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d008      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084ac:	4b31      	ldr	r3, [pc, #196]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	492e      	ldr	r1, [pc, #184]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084ca:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084d8:	4926      	ldr	r1, [pc, #152]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ea:	4b22      	ldr	r3, [pc, #136]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f6:	491f      	ldr	r1, [pc, #124]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00d      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008508:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	4a19      	ldr	r2, [pc, #100]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800850e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008512:	6113      	str	r3, [r2, #16]
 8008514:	4b17      	ldr	r3, [pc, #92]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800851e:	4915      	ldr	r1, [pc, #84]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008520:	4313      	orrs	r3, r2
 8008522:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da08      	bge.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800852c:	4b11      	ldr	r3, [pc, #68]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800852e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	490e      	ldr	r1, [pc, #56]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800853a:	4313      	orrs	r3, r2
 800853c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008558:	4906      	ldr	r1, [pc, #24]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800855a:	4313      	orrs	r3, r2
 800855c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800855e:	7dbb      	ldrb	r3, [r7, #22]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	e000      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400

08008578 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800857c:	f7ff f85a 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8008580:	4602      	mov	r2, r0
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	091b      	lsrs	r3, r3, #4
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	4904      	ldr	r1, [pc, #16]	; (80085a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800858e:	5ccb      	ldrb	r3, [r1, r3]
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008598:	4618      	mov	r0, r3
 800859a:	bd80      	pop	{r7, pc}
 800859c:	58024400 	.word	0x58024400
 80085a0:	0800bfbc 	.word	0x0800bfbc

080085a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085ac:	4ba1      	ldr	r3, [pc, #644]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085b6:	4b9f      	ldr	r3, [pc, #636]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	0b1b      	lsrs	r3, r3, #12
 80085bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085c2:	4b9c      	ldr	r3, [pc, #624]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	091b      	lsrs	r3, r3, #4
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085ce:	4b99      	ldr	r3, [pc, #612]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	08db      	lsrs	r3, r3, #3
 80085d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	fb02 f303 	mul.w	r3, r2, r3
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8111 	beq.w	8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	f000 8083 	beq.w	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	f200 80a1 	bhi.w	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d056      	beq.n	80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800860e:	e099      	b.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008610:	4b88      	ldr	r3, [pc, #544]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d02d      	beq.n	8008678 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800861c:	4b85      	ldr	r3, [pc, #532]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	4a84      	ldr	r2, [pc, #528]	; (8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b7b      	ldr	r3, [pc, #492]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a03 	vldr	s12, [r7, #12]
 800865a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008676:	e087      	b.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008840 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ba:	e065      	b.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b59      	ldr	r3, [pc, #356]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086fe:	e043      	b.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b48      	ldr	r3, [pc, #288]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a45 	vldr	s11, [pc, #276]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008742:	e021      	b.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b37      	ldr	r3, [pc, #220]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008786:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008788:	4b2a      	ldr	r3, [pc, #168]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	0a5b      	lsrs	r3, r3, #9
 800878e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800879e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ae:	ee17 2a90 	vmov	r2, s15
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087b6:	4b1f      	ldr	r3, [pc, #124]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087dc:	ee17 2a90 	vmov	r2, s15
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087e4:	4b13      	ldr	r3, [pc, #76]	; (8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	0e1b      	lsrs	r3, r3, #24
 80087ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800880a:	ee17 2a90 	vmov	r2, s15
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008812:	e008      	b.n	8008826 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	609a      	str	r2, [r3, #8]
}
 8008826:	bf00      	nop
 8008828:	3724      	adds	r7, #36	; 0x24
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	58024400 	.word	0x58024400
 8008838:	03d09000 	.word	0x03d09000
 800883c:	46000000 	.word	0x46000000
 8008840:	4c742400 	.word	0x4c742400
 8008844:	4a742400 	.word	0x4a742400
 8008848:	4af42400 	.word	0x4af42400

0800884c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800884c:	b480      	push	{r7}
 800884e:	b089      	sub	sp, #36	; 0x24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008854:	4ba1      	ldr	r3, [pc, #644]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800885e:	4b9f      	ldr	r3, [pc, #636]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	0d1b      	lsrs	r3, r3, #20
 8008864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008868:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800886a:	4b9c      	ldr	r3, [pc, #624]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008876:	4b99      	ldr	r3, [pc, #612]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	08db      	lsrs	r3, r3, #3
 800887c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 8111 	beq.w	8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b02      	cmp	r3, #2
 800889e:	f000 8083 	beq.w	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	f200 80a1 	bhi.w	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d056      	beq.n	8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088b6:	e099      	b.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d02d      	beq.n	8008920 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088c4:	4b85      	ldr	r3, [pc, #532]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	08db      	lsrs	r3, r3, #3
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	4a84      	ldr	r2, [pc, #528]	; (8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
 80088d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b7b      	ldr	r3, [pc, #492]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800891e:	e087      	b.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b6a      	ldr	r3, [pc, #424]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008962:	e065      	b.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b59      	ldr	r3, [pc, #356]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a6:	e043      	b.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b48      	ldr	r3, [pc, #288]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ea:	e021      	b.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a30:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	0a5b      	lsrs	r3, r3, #9
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a56:	ee17 2a90 	vmov	r2, s15
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	0c1b      	lsrs	r3, r3, #16
 8008a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a84:	ee17 2a90 	vmov	r2, s15
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	0e1b      	lsrs	r3, r3, #24
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab2:	ee17 2a90 	vmov	r2, s15
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008aba:	e008      	b.n	8008ace <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	609a      	str	r2, [r3, #8]
}
 8008ace:	bf00      	nop
 8008ad0:	3724      	adds	r7, #36	; 0x24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	03d09000 	.word	0x03d09000
 8008ae4:	46000000 	.word	0x46000000
 8008ae8:	4c742400 	.word	0x4c742400
 8008aec:	4a742400 	.word	0x4a742400
 8008af0:	4af42400 	.word	0x4af42400

08008af4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b02:	4b53      	ldr	r3, [pc, #332]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d101      	bne.n	8008b12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e099      	b.n	8008c46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b12:	4b4f      	ldr	r3, [pc, #316]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a4e      	ldr	r2, [pc, #312]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b1e:	f7fa faa5 	bl	800306c <HAL_GetTick>
 8008b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b24:	e008      	b.n	8008b38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b26:	f7fa faa1 	bl	800306c <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d901      	bls.n	8008b38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e086      	b.n	8008c46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b38:	4b45      	ldr	r3, [pc, #276]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f0      	bne.n	8008b26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b44:	4b42      	ldr	r3, [pc, #264]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	031b      	lsls	r3, r3, #12
 8008b52:	493f      	ldr	r1, [pc, #252]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	628b      	str	r3, [r1, #40]	; 0x28
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	025b      	lsls	r3, r3, #9
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	041b      	lsls	r3, r3, #16
 8008b76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	061b      	lsls	r3, r3, #24
 8008b84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b88:	4931      	ldr	r1, [pc, #196]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b8e:	4b30      	ldr	r3, [pc, #192]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	492d      	ldr	r1, [pc, #180]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ba0:	4b2b      	ldr	r3, [pc, #172]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	f023 0220 	bic.w	r2, r3, #32
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	4928      	ldr	r1, [pc, #160]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bb2:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	4a26      	ldr	r2, [pc, #152]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bb8:	f023 0310 	bic.w	r3, r3, #16
 8008bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008bbe:	4b24      	ldr	r3, [pc, #144]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc2:	4b24      	ldr	r3, [pc, #144]	; (8008c54 <RCCEx_PLL2_Config+0x160>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	69d2      	ldr	r2, [r2, #28]
 8008bca:	00d2      	lsls	r2, r2, #3
 8008bcc:	4920      	ldr	r1, [pc, #128]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bd2:	4b1f      	ldr	r3, [pc, #124]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	4a1e      	ldr	r2, [pc, #120]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bd8:	f043 0310 	orr.w	r3, r3, #16
 8008bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008be4:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	4a19      	ldr	r2, [pc, #100]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bf0:	e00f      	b.n	8008c12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d106      	bne.n	8008c06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c04:	e005      	b.n	8008c12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c06:	4b12      	ldr	r3, [pc, #72]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	4a11      	ldr	r2, [pc, #68]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c12:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1e:	f7fa fa25 	bl	800306c <HAL_GetTick>
 8008c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c24:	e008      	b.n	8008c38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c26:	f7fa fa21 	bl	800306c <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d901      	bls.n	8008c38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e006      	b.n	8008c46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <RCCEx_PLL2_Config+0x15c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0f0      	beq.n	8008c26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	58024400 	.word	0x58024400
 8008c54:	ffff0007 	.word	0xffff0007

08008c58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c66:	4b53      	ldr	r3, [pc, #332]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d101      	bne.n	8008c76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e099      	b.n	8008daa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c76:	4b4f      	ldr	r3, [pc, #316]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a4e      	ldr	r2, [pc, #312]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c82:	f7fa f9f3 	bl	800306c <HAL_GetTick>
 8008c86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c88:	e008      	b.n	8008c9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c8a:	f7fa f9ef 	bl	800306c <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e086      	b.n	8008daa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c9c:	4b45      	ldr	r3, [pc, #276]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1f0      	bne.n	8008c8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ca8:	4b42      	ldr	r3, [pc, #264]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	051b      	lsls	r3, r3, #20
 8008cb6:	493f      	ldr	r1, [pc, #252]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	628b      	str	r3, [r1, #40]	; 0x28
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	025b      	lsls	r3, r3, #9
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	061b      	lsls	r3, r3, #24
 8008ce8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cec:	4931      	ldr	r1, [pc, #196]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cf2:	4b30      	ldr	r3, [pc, #192]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	492d      	ldr	r1, [pc, #180]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d04:	4b2b      	ldr	r3, [pc, #172]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	4928      	ldr	r1, [pc, #160]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d16:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a26      	ldr	r2, [pc, #152]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d22:	4b24      	ldr	r3, [pc, #144]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d26:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <RCCEx_PLL3_Config+0x160>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	69d2      	ldr	r2, [r2, #28]
 8008d2e:	00d2      	lsls	r2, r2, #3
 8008d30:	4920      	ldr	r1, [pc, #128]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d36:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	4a1e      	ldr	r2, [pc, #120]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d48:	4b1a      	ldr	r3, [pc, #104]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	4a19      	ldr	r2, [pc, #100]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d54:	e00f      	b.n	8008d76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d106      	bne.n	8008d6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d5c:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d60:	4a14      	ldr	r2, [pc, #80]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d68:	e005      	b.n	8008d76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	4a11      	ldr	r2, [pc, #68]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a0e      	ldr	r2, [pc, #56]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d82:	f7fa f973 	bl	800306c <HAL_GetTick>
 8008d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d88:	e008      	b.n	8008d9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d8a:	f7fa f96f 	bl	800306c <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d901      	bls.n	8008d9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e006      	b.n	8008daa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <RCCEx_PLL3_Config+0x15c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0f0      	beq.n	8008d8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	58024400 	.word	0x58024400
 8008db8:	ffff0007 	.word	0xffff0007

08008dbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0f1      	b.n	8008fb2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a78      	ldr	r2, [pc, #480]	; (8008fbc <HAL_SPI_Init+0x200>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a77      	ldr	r2, [pc, #476]	; (8008fc0 <HAL_SPI_Init+0x204>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00a      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a75      	ldr	r2, [pc, #468]	; (8008fc4 <HAL_SPI_Init+0x208>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d005      	beq.n	8008dfe <HAL_SPI_Init+0x42>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b0f      	cmp	r3, #15
 8008df8:	d901      	bls.n	8008dfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0d9      	b.n	8008fb2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fba2 	bl	8009548 <SPI_GetPacketSize>
 8008e04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a6c      	ldr	r2, [pc, #432]	; (8008fbc <HAL_SPI_Init+0x200>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00c      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a6a      	ldr	r2, [pc, #424]	; (8008fc0 <HAL_SPI_Init+0x204>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a69      	ldr	r2, [pc, #420]	; (8008fc4 <HAL_SPI_Init+0x208>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d002      	beq.n	8008e2a <HAL_SPI_Init+0x6e>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b08      	cmp	r3, #8
 8008e28:	d811      	bhi.n	8008e4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e2e:	4a63      	ldr	r2, [pc, #396]	; (8008fbc <HAL_SPI_Init+0x200>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a61      	ldr	r2, [pc, #388]	; (8008fc0 <HAL_SPI_Init+0x204>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_SPI_Init+0x8c>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a60      	ldr	r2, [pc, #384]	; (8008fc4 <HAL_SPI_Init+0x208>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d104      	bne.n	8008e52 <HAL_SPI_Init+0x96>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d901      	bls.n	8008e52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0af      	b.n	8008fb2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f9 fe3a 	bl	8002ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0201 	bic.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008e8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e98:	d119      	bne.n	8008ece <HAL_SPI_Init+0x112>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea2:	d103      	bne.n	8008eac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10c      	bne.n	8008ece <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ebc:	d107      	bne.n	8008ece <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ecc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee0:	ea42 0103 	orr.w	r1, r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f2e:	ea42 0103 	orr.w	r1, r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d113      	bne.n	8008f6e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0201 	bic.w	r2, r2, #1
 8008f7c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40013000 	.word	0x40013000
 8008fc0:	40003800 	.word	0x40003800
 8008fc4:	40003c00 	.word	0x40003c00

08008fc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3320      	adds	r3, #32
 8008fde:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Transmit+0x2a>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e1d7      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ffa:	f7fa f837 	bl	800306c <HAL_GetTick>
 8008ffe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d007      	beq.n	800901c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800900c:	2302      	movs	r3, #2
 800900e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009018:	7efb      	ldrb	r3, [r7, #27]
 800901a:	e1c2      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_SPI_Transmit+0x60>
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d107      	bne.n	8009038 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009034:	7efb      	ldrb	r3, [r7, #27]
 8009036:	e1b4      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2203      	movs	r2, #3
 800903c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009088:	d107      	bne.n	800909a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009098:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	4b96      	ldr	r3, [pc, #600]	; (80092fc <HAL_SPI_Transmit+0x334>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	88f9      	ldrh	r1, [r7, #6]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	430b      	orrs	r3, r1
 80090ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 0201 	orr.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090c6:	d107      	bne.n	80090d8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	d947      	bls.n	8009170 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80090e0:	e03f      	b.n	8009162 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d114      	bne.n	800911a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009100:	1d1a      	adds	r2, r3, #4
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009118:	e023      	b.n	8009162 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800911a:	f7f9 ffa7 	bl	800306c <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d803      	bhi.n	8009132 <HAL_SPI_Transmit+0x16a>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d102      	bne.n	8009138 <HAL_SPI_Transmit+0x170>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d114      	bne.n	8009162 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f937 	bl	80093ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e11f      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009168:	b29b      	uxth	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1b9      	bne.n	80090e2 <HAL_SPI_Transmit+0x11a>
 800916e:	e0f2      	b.n	8009356 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b07      	cmp	r3, #7
 8009176:	f240 80e7 	bls.w	8009348 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800917a:	e05d      	b.n	8009238 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b02      	cmp	r3, #2
 8009188:	d132      	bne.n	80091f0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	d918      	bls.n	80091c8 <HAL_SPI_Transmit+0x200>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b02      	subs	r3, #2
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80091c6:	e037      	b.n	8009238 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091cc:	881a      	ldrh	r2, [r3, #0]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d6:	1c9a      	adds	r2, r3, #2
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80091ee:	e023      	b.n	8009238 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091f0:	f7f9 ff3c 	bl	800306c <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d803      	bhi.n	8009208 <HAL_SPI_Transmit+0x240>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	d102      	bne.n	800920e <HAL_SPI_Transmit+0x246>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d114      	bne.n	8009238 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 f8cc 	bl	80093ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e0b4      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800923e:	b29b      	uxth	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d19b      	bne.n	800917c <HAL_SPI_Transmit+0x1b4>
 8009244:	e087      	b.n	8009356 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b02      	cmp	r3, #2
 8009252:	d155      	bne.n	8009300 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b03      	cmp	r3, #3
 800925e:	d918      	bls.n	8009292 <HAL_SPI_Transmit+0x2ca>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009264:	2b40      	cmp	r3, #64	; 0x40
 8009266:	d914      	bls.n	8009292 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6812      	ldr	r2, [r2, #0]
 8009272:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009278:	1d1a      	adds	r2, r3, #4
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b04      	subs	r3, #4
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009290:	e05a      	b.n	8009348 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b01      	cmp	r3, #1
 800929c:	d917      	bls.n	80092ce <HAL_SPI_Transmit+0x306>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d013      	beq.n	80092ce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092aa:	881a      	ldrh	r2, [r3, #0]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b4:	1c9a      	adds	r2, r3, #2
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	3b02      	subs	r3, #2
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092cc:	e03c      	b.n	8009348 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3320      	adds	r3, #32
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092f8:	e026      	b.n	8009348 <HAL_SPI_Transmit+0x380>
 80092fa:	bf00      	nop
 80092fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009300:	f7f9 feb4 	bl	800306c <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d803      	bhi.n	8009318 <HAL_SPI_Transmit+0x350>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d102      	bne.n	800931e <HAL_SPI_Transmit+0x356>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d114      	bne.n	8009348 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f844 	bl	80093ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e02c      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	f47f af78 	bne.w	8009246 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2200      	movs	r2, #0
 800935e:	2108      	movs	r1, #8
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f8c3 	bl	80094ec <SPI_WaitOnFlagUntilTimeout>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009372:	f043 0220 	orr.w	r2, r3, #32
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f815 	bl	80093ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80093a0:	7efb      	ldrb	r3, [r7, #27]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop

080093ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0208 	orr.w	r2, r2, #8
 80093ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0210 	orr.w	r2, r2, #16
 80093da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0201 	bic.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6919      	ldr	r1, [r3, #16]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b3c      	ldr	r3, [pc, #240]	; (80094e8 <SPI_CloseTransfer+0x13c>)
 80093f8:	400b      	ands	r3, r1
 80093fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800940a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b04      	cmp	r3, #4
 8009416:	d014      	beq.n	8009442 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00f      	beq.n	8009442 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009428:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0220 	orr.w	r2, r2, #32
 8009440:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b03      	cmp	r3, #3
 800944c:	d014      	beq.n	8009478 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00f      	beq.n	8009478 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800945e:	f043 0204 	orr.w	r2, r3, #4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699a      	ldr	r2, [r3, #24]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009476:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00f      	beq.n	80094a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009488:	f043 0201 	orr.w	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699a      	ldr	r2, [r3, #24]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00f      	beq.n	80094cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b2:	f043 0208 	orr.w	r2, r3, #8
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80094dc:	bf00      	nop
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	fffffc90 	.word	0xfffffc90

080094ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80094fc:	e010      	b.n	8009520 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094fe:	f7f9 fdb5 	bl	800306c <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	429a      	cmp	r2, r3
 800950c:	d803      	bhi.n	8009516 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009514:	d102      	bne.n	800951c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e00f      	b.n	8009540 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4013      	ands	r3, r2
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	429a      	cmp	r2, r3
 800952e:	bf0c      	ite	eq
 8009530:	2301      	moveq	r3, #1
 8009532:	2300      	movne	r3, #0
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	429a      	cmp	r2, r3
 800953c:	d0df      	beq.n	80094fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	3307      	adds	r3, #7
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e042      	b.n	8009616 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f9 fb08 	bl	8002bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2224      	movs	r2, #36	; 0x24
 80095ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0201 	bic.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fbeb 	bl	8009d9c <UART_SetConfig>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e022      	b.n	8009616 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 f947 	bl	800a86c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0201 	orr.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 f9ce 	bl	800a9b0 <UART_CheckIdleState>
 8009614:	4603      	mov	r3, r0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b0ba      	sub	sp, #232	; 0xe8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800964a:	f640 030f 	movw	r3, #2063	; 0x80f
 800964e:	4013      	ands	r3, r2
 8009650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11b      	bne.n	8009694 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800965c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b00      	cmp	r3, #0
 8009666:	d015      	beq.n	8009694 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d105      	bne.n	8009680 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d009      	beq.n	8009694 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 835a 	beq.w	8009d3e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
      }
      return;
 8009692:	e354      	b.n	8009d3e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 811f 	beq.w	80098dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800969e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096a2:	4b8b      	ldr	r3, [pc, #556]	; (80098d0 <HAL_UART_IRQHandler+0x2b0>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80096ae:	4b89      	ldr	r3, [pc, #548]	; (80098d4 <HAL_UART_IRQHandler+0x2b4>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 8112 	beq.w	80098dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d011      	beq.n	80096e8 <HAL_UART_IRQHandler+0xc8>
 80096c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2201      	movs	r2, #1
 80096d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096de:	f043 0201 	orr.w	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d011      	beq.n	8009718 <HAL_UART_IRQHandler+0xf8>
 80096f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2202      	movs	r2, #2
 8009706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970e:	f043 0204 	orr.w	r2, r3, #4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d011      	beq.n	8009748 <HAL_UART_IRQHandler+0x128>
 8009724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2204      	movs	r2, #4
 8009736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800973e:	f043 0202 	orr.w	r2, r3, #2
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d017      	beq.n	8009784 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d105      	bne.n	800976c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009760:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009764:	4b5a      	ldr	r3, [pc, #360]	; (80098d0 <HAL_UART_IRQHandler+0x2b0>)
 8009766:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2208      	movs	r2, #8
 8009772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977a:	f043 0208 	orr.w	r2, r3, #8
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800978c:	2b00      	cmp	r3, #0
 800978e:	d012      	beq.n	80097b6 <HAL_UART_IRQHandler+0x196>
 8009790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00c      	beq.n	80097b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ac:	f043 0220 	orr.w	r2, r3, #32
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 82c0 	beq.w	8009d42 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d013      	beq.n	80097f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d005      	beq.n	800981a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800980e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009812:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009816:	2b00      	cmp	r3, #0
 8009818:	d04f      	beq.n	80098ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f9dc 	bl	800abd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	d141      	bne.n	80098b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800985a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800985e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1d9      	bne.n	800982e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d013      	beq.n	80098aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009886:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <HAL_UART_IRQHandler+0x2b8>)
 8009888:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988e:	4618      	mov	r0, r3
 8009890:	f7fa fbc6 	bl	8004020 <HAL_DMA_Abort_IT>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d017      	beq.n	80098ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a8:	e00f      	b.n	80098ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa60 	bl	8009d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b0:	e00b      	b.n	80098ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa5c 	bl	8009d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	e007      	b.n	80098ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa58 	bl	8009d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80098c8:	e23b      	b.n	8009d42 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ca:	bf00      	nop
    return;
 80098cc:	e239      	b.n	8009d42 <HAL_UART_IRQHandler+0x722>
 80098ce:	bf00      	nop
 80098d0:	10000001 	.word	0x10000001
 80098d4:	04000120 	.word	0x04000120
 80098d8:	0800aca5 	.word	0x0800aca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	f040 81ce 	bne.w	8009c82 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ea:	f003 0310 	and.w	r3, r3, #16
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 81c7 	beq.w	8009c82 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 81c0 	beq.w	8009c82 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2210      	movs	r2, #16
 8009908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	f040 813b 	bne.w	8009b90 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a8b      	ldr	r2, [pc, #556]	; (8009b50 <HAL_UART_IRQHandler+0x530>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d059      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a89      	ldr	r2, [pc, #548]	; (8009b54 <HAL_UART_IRQHandler+0x534>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d053      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a87      	ldr	r2, [pc, #540]	; (8009b58 <HAL_UART_IRQHandler+0x538>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d04d      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a85      	ldr	r2, [pc, #532]	; (8009b5c <HAL_UART_IRQHandler+0x53c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d047      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <HAL_UART_IRQHandler+0x540>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d041      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a81      	ldr	r2, [pc, #516]	; (8009b64 <HAL_UART_IRQHandler+0x544>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d03b      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a7f      	ldr	r2, [pc, #508]	; (8009b68 <HAL_UART_IRQHandler+0x548>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d035      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a7d      	ldr	r2, [pc, #500]	; (8009b6c <HAL_UART_IRQHandler+0x54c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d02f      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a7b      	ldr	r2, [pc, #492]	; (8009b70 <HAL_UART_IRQHandler+0x550>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d029      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a79      	ldr	r2, [pc, #484]	; (8009b74 <HAL_UART_IRQHandler+0x554>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d023      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a77      	ldr	r2, [pc, #476]	; (8009b78 <HAL_UART_IRQHandler+0x558>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d01d      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a75      	ldr	r2, [pc, #468]	; (8009b7c <HAL_UART_IRQHandler+0x55c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d017      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a73      	ldr	r2, [pc, #460]	; (8009b80 <HAL_UART_IRQHandler+0x560>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d011      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a71      	ldr	r2, [pc, #452]	; (8009b84 <HAL_UART_IRQHandler+0x564>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00b      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a6f      	ldr	r2, [pc, #444]	; (8009b88 <HAL_UART_IRQHandler+0x568>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d005      	beq.n	80099da <HAL_UART_IRQHandler+0x3ba>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a6d      	ldr	r2, [pc, #436]	; (8009b8c <HAL_UART_IRQHandler+0x56c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d105      	bne.n	80099e6 <HAL_UART_IRQHandler+0x3c6>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	e004      	b.n	80099f0 <HAL_UART_IRQHandler+0x3d0>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 81a4 	beq.w	8009d46 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	f080 819c 	bcs.w	8009d46 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a22:	f000 8086 	beq.w	8009b32 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1da      	bne.n	8009a26 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e1      	bne.n	8009a70 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ad0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ad2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e3      	bne.n	8009aac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b02:	f023 0310 	bic.w	r3, r3, #16
 8009b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e4      	bne.n	8009af2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f9 ff59 	bl	80039e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f91c 	bl	8009d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b4c:	e0fb      	b.n	8009d46 <HAL_UART_IRQHandler+0x726>
 8009b4e:	bf00      	nop
 8009b50:	40020010 	.word	0x40020010
 8009b54:	40020028 	.word	0x40020028
 8009b58:	40020040 	.word	0x40020040
 8009b5c:	40020058 	.word	0x40020058
 8009b60:	40020070 	.word	0x40020070
 8009b64:	40020088 	.word	0x40020088
 8009b68:	400200a0 	.word	0x400200a0
 8009b6c:	400200b8 	.word	0x400200b8
 8009b70:	40020410 	.word	0x40020410
 8009b74:	40020428 	.word	0x40020428
 8009b78:	40020440 	.word	0x40020440
 8009b7c:	40020458 	.word	0x40020458
 8009b80:	40020470 	.word	0x40020470
 8009b84:	40020488 	.word	0x40020488
 8009b88:	400204a0 	.word	0x400204a0
 8009b8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80cc 	beq.w	8009d4a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80c7 	beq.w	8009d4a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009bde:	647b      	str	r3, [r7, #68]	; 0x44
 8009be0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e4      	bne.n	8009bbc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	623b      	str	r3, [r7, #32]
   return(result);
 8009c02:	6a3a      	ldr	r2, [r7, #32]
 8009c04:	4b54      	ldr	r3, [pc, #336]	; (8009d58 <HAL_UART_IRQHandler+0x738>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3308      	adds	r3, #8
 8009c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c16:	633a      	str	r2, [r7, #48]	; 0x30
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e3      	bne.n	8009bf2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0310 	bic.w	r3, r3, #16
 8009c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e4      	bne.n	8009c3e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f882 	bl	8009d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c80:	e063      	b.n	8009d4a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <HAL_UART_IRQHandler+0x68c>
 8009c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d008      	beq.n	8009cac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f83e 	bl	800ad26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009caa:	e051      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d014      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d03a      	beq.n	8009d4e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
    }
    return;
 8009ce0:	e035      	b.n	8009d4e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <HAL_UART_IRQHandler+0x6e2>
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 ffe8 	bl	800acd0 <UART_EndTransmit_IT>
    return;
 8009d00:	e026      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_UART_IRQHandler+0x702>
 8009d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f817 	bl	800ad4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d20:	e016      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <HAL_UART_IRQHandler+0x730>
 8009d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da0c      	bge.n	8009d50 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 ffff 	bl	800ad3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d3c:	e008      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
      return;
 8009d3e:	bf00      	nop
 8009d40:	e006      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
    return;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
      return;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
      return;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <HAL_UART_IRQHandler+0x730>
    return;
 8009d4e:	bf00      	nop
  }
}
 8009d50:	37e8      	adds	r7, #232	; 0xe8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	effffffe 	.word	0xeffffffe

08009d5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009da0:	b092      	sub	sp, #72	; 0x48
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	431a      	orrs	r2, r3
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4bbe      	ldr	r3, [pc, #760]	; (800a0c4 <UART_SetConfig+0x328>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	6812      	ldr	r2, [r2, #0]
 8009dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	68da      	ldr	r2, [r3, #12]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4ab3      	ldr	r2, [pc, #716]	; (800a0c8 <UART_SetConfig+0x32c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d004      	beq.n	8009e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e04:	4313      	orrs	r3, r2
 8009e06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	4baf      	ldr	r3, [pc, #700]	; (800a0cc <UART_SetConfig+0x330>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	f023 010f 	bic.w	r1, r3, #15
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4aa6      	ldr	r2, [pc, #664]	; (800a0d0 <UART_SetConfig+0x334>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d177      	bne.n	8009f2c <UART_SetConfig+0x190>
 8009e3c:	4ba5      	ldr	r3, [pc, #660]	; (800a0d4 <UART_SetConfig+0x338>)
 8009e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e44:	2b28      	cmp	r3, #40	; 0x28
 8009e46:	d86d      	bhi.n	8009f24 <UART_SetConfig+0x188>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0xb4>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009ef5 	.word	0x08009ef5
 8009e54:	08009f25 	.word	0x08009f25
 8009e58:	08009f25 	.word	0x08009f25
 8009e5c:	08009f25 	.word	0x08009f25
 8009e60:	08009f25 	.word	0x08009f25
 8009e64:	08009f25 	.word	0x08009f25
 8009e68:	08009f25 	.word	0x08009f25
 8009e6c:	08009f25 	.word	0x08009f25
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009f25 	.word	0x08009f25
 8009e78:	08009f25 	.word	0x08009f25
 8009e7c:	08009f25 	.word	0x08009f25
 8009e80:	08009f25 	.word	0x08009f25
 8009e84:	08009f25 	.word	0x08009f25
 8009e88:	08009f25 	.word	0x08009f25
 8009e8c:	08009f25 	.word	0x08009f25
 8009e90:	08009f05 	.word	0x08009f05
 8009e94:	08009f25 	.word	0x08009f25
 8009e98:	08009f25 	.word	0x08009f25
 8009e9c:	08009f25 	.word	0x08009f25
 8009ea0:	08009f25 	.word	0x08009f25
 8009ea4:	08009f25 	.word	0x08009f25
 8009ea8:	08009f25 	.word	0x08009f25
 8009eac:	08009f25 	.word	0x08009f25
 8009eb0:	08009f0d 	.word	0x08009f0d
 8009eb4:	08009f25 	.word	0x08009f25
 8009eb8:	08009f25 	.word	0x08009f25
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009f25 	.word	0x08009f25
 8009ec4:	08009f25 	.word	0x08009f25
 8009ec8:	08009f25 	.word	0x08009f25
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f15 	.word	0x08009f15
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009f25 	.word	0x08009f25
 8009edc:	08009f25 	.word	0x08009f25
 8009ee0:	08009f25 	.word	0x08009f25
 8009ee4:	08009f25 	.word	0x08009f25
 8009ee8:	08009f25 	.word	0x08009f25
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e222      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e21e      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e21a      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e216      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e212      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e20e      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e20a      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a69      	ldr	r2, [pc, #420]	; (800a0d8 <UART_SetConfig+0x33c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d130      	bne.n	8009f98 <UART_SetConfig+0x1fc>
 8009f36:	4b67      	ldr	r3, [pc, #412]	; (800a0d4 <UART_SetConfig+0x338>)
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d826      	bhi.n	8009f90 <UART_SetConfig+0x1f4>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0x1ac>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f61 	.word	0x08009f61
 8009f4c:	08009f69 	.word	0x08009f69
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009f79 	.word	0x08009f79
 8009f58:	08009f81 	.word	0x08009f81
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e1ec      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e1e8      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e1e4      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e1e0      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f80:	2320      	movs	r3, #32
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e1dc      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e1d8      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f90:	2380      	movs	r3, #128	; 0x80
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e1d4      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a4f      	ldr	r2, [pc, #316]	; (800a0dc <UART_SetConfig+0x340>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d130      	bne.n	800a004 <UART_SetConfig+0x268>
 8009fa2:	4b4c      	ldr	r3, [pc, #304]	; (800a0d4 <UART_SetConfig+0x338>)
 8009fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d826      	bhi.n	8009ffc <UART_SetConfig+0x260>
 8009fae:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <UART_SetConfig+0x218>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009fcd 	.word	0x08009fcd
 8009fb8:	08009fd5 	.word	0x08009fd5
 8009fbc:	08009fdd 	.word	0x08009fdd
 8009fc0:	08009fe5 	.word	0x08009fe5
 8009fc4:	08009fed 	.word	0x08009fed
 8009fc8:	08009ff5 	.word	0x08009ff5
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd2:	e1b6      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fda:	e1b2      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe2:	e1ae      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fea:	e1aa      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009fec:	2320      	movs	r3, #32
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff2:	e1a6      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009ff4:	2340      	movs	r3, #64	; 0x40
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffa:	e1a2      	b.n	800a342 <UART_SetConfig+0x5a6>
 8009ffc:	2380      	movs	r3, #128	; 0x80
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a002:	e19e      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a35      	ldr	r2, [pc, #212]	; (800a0e0 <UART_SetConfig+0x344>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d130      	bne.n	800a070 <UART_SetConfig+0x2d4>
 800a00e:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <UART_SetConfig+0x338>)
 800a010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b05      	cmp	r3, #5
 800a018:	d826      	bhi.n	800a068 <UART_SetConfig+0x2cc>
 800a01a:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <UART_SetConfig+0x284>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a039 	.word	0x0800a039
 800a024:	0800a041 	.word	0x0800a041
 800a028:	0800a049 	.word	0x0800a049
 800a02c:	0800a051 	.word	0x0800a051
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a061 	.word	0x0800a061
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e180      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a046:	e17c      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04e:	e178      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a056:	e174      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a058:	2320      	movs	r3, #32
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05e:	e170      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e16c      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a068:	2380      	movs	r3, #128	; 0x80
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06e:	e168      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <UART_SetConfig+0x348>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d142      	bne.n	800a100 <UART_SetConfig+0x364>
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <UART_SetConfig+0x338>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07e:	f003 0307 	and.w	r3, r3, #7
 800a082:	2b05      	cmp	r3, #5
 800a084:	d838      	bhi.n	800a0f8 <UART_SetConfig+0x35c>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <UART_SetConfig+0x2f0>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a0a5 	.word	0x0800a0a5
 800a090:	0800a0ad 	.word	0x0800a0ad
 800a094:	0800a0b5 	.word	0x0800a0b5
 800a098:	0800a0bd 	.word	0x0800a0bd
 800a09c:	0800a0e9 	.word	0x0800a0e9
 800a0a0:	0800a0f1 	.word	0x0800a0f1
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0aa:	e14a      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b2:	e146      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0b4:	2308      	movs	r3, #8
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ba:	e142      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0bc:	2310      	movs	r3, #16
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0c2:	e13e      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0c4:	cfff69f3 	.word	0xcfff69f3
 800a0c8:	58000c00 	.word	0x58000c00
 800a0cc:	11fff4ff 	.word	0x11fff4ff
 800a0d0:	40011000 	.word	0x40011000
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	40004400 	.word	0x40004400
 800a0dc:	40004800 	.word	0x40004800
 800a0e0:	40004c00 	.word	0x40004c00
 800a0e4:	40005000 	.word	0x40005000
 800a0e8:	2320      	movs	r3, #32
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e128      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e124      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a0f8:	2380      	movs	r3, #128	; 0x80
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e120      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4acb      	ldr	r2, [pc, #812]	; (800a434 <UART_SetConfig+0x698>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d176      	bne.n	800a1f8 <UART_SetConfig+0x45c>
 800a10a:	4bcb      	ldr	r3, [pc, #812]	; (800a438 <UART_SetConfig+0x69c>)
 800a10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a112:	2b28      	cmp	r3, #40	; 0x28
 800a114:	d86c      	bhi.n	800a1f0 <UART_SetConfig+0x454>
 800a116:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <UART_SetConfig+0x380>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a1c1 	.word	0x0800a1c1
 800a120:	0800a1f1 	.word	0x0800a1f1
 800a124:	0800a1f1 	.word	0x0800a1f1
 800a128:	0800a1f1 	.word	0x0800a1f1
 800a12c:	0800a1f1 	.word	0x0800a1f1
 800a130:	0800a1f1 	.word	0x0800a1f1
 800a134:	0800a1f1 	.word	0x0800a1f1
 800a138:	0800a1f1 	.word	0x0800a1f1
 800a13c:	0800a1c9 	.word	0x0800a1c9
 800a140:	0800a1f1 	.word	0x0800a1f1
 800a144:	0800a1f1 	.word	0x0800a1f1
 800a148:	0800a1f1 	.word	0x0800a1f1
 800a14c:	0800a1f1 	.word	0x0800a1f1
 800a150:	0800a1f1 	.word	0x0800a1f1
 800a154:	0800a1f1 	.word	0x0800a1f1
 800a158:	0800a1f1 	.word	0x0800a1f1
 800a15c:	0800a1d1 	.word	0x0800a1d1
 800a160:	0800a1f1 	.word	0x0800a1f1
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a1f1 	.word	0x0800a1f1
 800a16c:	0800a1f1 	.word	0x0800a1f1
 800a170:	0800a1f1 	.word	0x0800a1f1
 800a174:	0800a1f1 	.word	0x0800a1f1
 800a178:	0800a1f1 	.word	0x0800a1f1
 800a17c:	0800a1d9 	.word	0x0800a1d9
 800a180:	0800a1f1 	.word	0x0800a1f1
 800a184:	0800a1f1 	.word	0x0800a1f1
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a1f1 	.word	0x0800a1f1
 800a190:	0800a1f1 	.word	0x0800a1f1
 800a194:	0800a1f1 	.word	0x0800a1f1
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a1e1 	.word	0x0800a1e1
 800a1a0:	0800a1f1 	.word	0x0800a1f1
 800a1a4:	0800a1f1 	.word	0x0800a1f1
 800a1a8:	0800a1f1 	.word	0x0800a1f1
 800a1ac:	0800a1f1 	.word	0x0800a1f1
 800a1b0:	0800a1f1 	.word	0x0800a1f1
 800a1b4:	0800a1f1 	.word	0x0800a1f1
 800a1b8:	0800a1f1 	.word	0x0800a1f1
 800a1bc:	0800a1e9 	.word	0x0800a1e9
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e0bc      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e0b8      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e0b4      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1d8:	2310      	movs	r3, #16
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e0b0      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1e0:	2320      	movs	r3, #32
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e0ac      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1e8:	2340      	movs	r3, #64	; 0x40
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ee:	e0a8      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1f0:	2380      	movs	r3, #128	; 0x80
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e0a4      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a8f      	ldr	r2, [pc, #572]	; (800a43c <UART_SetConfig+0x6a0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d130      	bne.n	800a264 <UART_SetConfig+0x4c8>
 800a202:	4b8d      	ldr	r3, [pc, #564]	; (800a438 <UART_SetConfig+0x69c>)
 800a204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	d826      	bhi.n	800a25c <UART_SetConfig+0x4c0>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <UART_SetConfig+0x478>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a22d 	.word	0x0800a22d
 800a218:	0800a235 	.word	0x0800a235
 800a21c:	0800a23d 	.word	0x0800a23d
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a255 	.word	0x0800a255
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a232:	e086      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a234:	2304      	movs	r3, #4
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e082      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a23c:	2308      	movs	r3, #8
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e07e      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a244:	2310      	movs	r3, #16
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e07a      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a24c:	2320      	movs	r3, #32
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e076      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25a:	e072      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a25c:	2380      	movs	r3, #128	; 0x80
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a262:	e06e      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a75      	ldr	r2, [pc, #468]	; (800a440 <UART_SetConfig+0x6a4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d130      	bne.n	800a2d0 <UART_SetConfig+0x534>
 800a26e:	4b72      	ldr	r3, [pc, #456]	; (800a438 <UART_SetConfig+0x69c>)
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	2b05      	cmp	r3, #5
 800a278:	d826      	bhi.n	800a2c8 <UART_SetConfig+0x52c>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <UART_SetConfig+0x4e4>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a299 	.word	0x0800a299
 800a284:	0800a2a1 	.word	0x0800a2a1
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	0800a2b1 	.word	0x0800a2b1
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e050      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e04c      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ae:	e048      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b6:	e044      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2be:	e040      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c6:	e03c      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ce:	e038      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a5b      	ldr	r2, [pc, #364]	; (800a444 <UART_SetConfig+0x6a8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d130      	bne.n	800a33c <UART_SetConfig+0x5a0>
 800a2da:	4b57      	ldr	r3, [pc, #348]	; (800a438 <UART_SetConfig+0x69c>)
 800a2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2de:	f003 0307 	and.w	r3, r3, #7
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d826      	bhi.n	800a334 <UART_SetConfig+0x598>
 800a2e6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <UART_SetConfig+0x550>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a30d 	.word	0x0800a30d
 800a2f4:	0800a315 	.word	0x0800a315
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	2302      	movs	r3, #2
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e01a      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a30c:	2304      	movs	r3, #4
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e016      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a314:	2308      	movs	r3, #8
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e012      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a31c:	2310      	movs	r3, #16
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e00e      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a324:	2320      	movs	r3, #32
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e00a      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a32c:	2340      	movs	r3, #64	; 0x40
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a332:	e006      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a334:	2380      	movs	r3, #128	; 0x80
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33a:	e002      	b.n	800a342 <UART_SetConfig+0x5a6>
 800a33c:	2380      	movs	r3, #128	; 0x80
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a3f      	ldr	r2, [pc, #252]	; (800a444 <UART_SetConfig+0x6a8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	f040 80f8 	bne.w	800a53e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a34e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a352:	2b20      	cmp	r3, #32
 800a354:	dc46      	bgt.n	800a3e4 <UART_SetConfig+0x648>
 800a356:	2b02      	cmp	r3, #2
 800a358:	f2c0 8082 	blt.w	800a460 <UART_SetConfig+0x6c4>
 800a35c:	3b02      	subs	r3, #2
 800a35e:	2b1e      	cmp	r3, #30
 800a360:	d87e      	bhi.n	800a460 <UART_SetConfig+0x6c4>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x5cc>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a3eb 	.word	0x0800a3eb
 800a36c:	0800a461 	.word	0x0800a461
 800a370:	0800a3f3 	.word	0x0800a3f3
 800a374:	0800a461 	.word	0x0800a461
 800a378:	0800a461 	.word	0x0800a461
 800a37c:	0800a461 	.word	0x0800a461
 800a380:	0800a403 	.word	0x0800a403
 800a384:	0800a461 	.word	0x0800a461
 800a388:	0800a461 	.word	0x0800a461
 800a38c:	0800a461 	.word	0x0800a461
 800a390:	0800a461 	.word	0x0800a461
 800a394:	0800a461 	.word	0x0800a461
 800a398:	0800a461 	.word	0x0800a461
 800a39c:	0800a461 	.word	0x0800a461
 800a3a0:	0800a413 	.word	0x0800a413
 800a3a4:	0800a461 	.word	0x0800a461
 800a3a8:	0800a461 	.word	0x0800a461
 800a3ac:	0800a461 	.word	0x0800a461
 800a3b0:	0800a461 	.word	0x0800a461
 800a3b4:	0800a461 	.word	0x0800a461
 800a3b8:	0800a461 	.word	0x0800a461
 800a3bc:	0800a461 	.word	0x0800a461
 800a3c0:	0800a461 	.word	0x0800a461
 800a3c4:	0800a461 	.word	0x0800a461
 800a3c8:	0800a461 	.word	0x0800a461
 800a3cc:	0800a461 	.word	0x0800a461
 800a3d0:	0800a461 	.word	0x0800a461
 800a3d4:	0800a461 	.word	0x0800a461
 800a3d8:	0800a461 	.word	0x0800a461
 800a3dc:	0800a461 	.word	0x0800a461
 800a3e0:	0800a453 	.word	0x0800a453
 800a3e4:	2b40      	cmp	r3, #64	; 0x40
 800a3e6:	d037      	beq.n	800a458 <UART_SetConfig+0x6bc>
 800a3e8:	e03a      	b.n	800a460 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3ea:	f7fe f8c5 	bl	8008578 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3f0:	e03c      	b.n	800a46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe f8d4 	bl	80085a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a400:	e034      	b.n	800a46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a402:	f107 0318 	add.w	r3, r7, #24
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fa20 	bl	800884c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a410:	e02c      	b.n	800a46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <UART_SetConfig+0x69c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d016      	beq.n	800a44c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <UART_SetConfig+0x69c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	08db      	lsrs	r3, r3, #3
 800a424:	f003 0303 	and.w	r3, r3, #3
 800a428:	4a07      	ldr	r2, [pc, #28]	; (800a448 <UART_SetConfig+0x6ac>)
 800a42a:	fa22 f303 	lsr.w	r3, r2, r3
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a430:	e01c      	b.n	800a46c <UART_SetConfig+0x6d0>
 800a432:	bf00      	nop
 800a434:	40011400 	.word	0x40011400
 800a438:	58024400 	.word	0x58024400
 800a43c:	40007800 	.word	0x40007800
 800a440:	40007c00 	.word	0x40007c00
 800a444:	58000c00 	.word	0x58000c00
 800a448:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a44c:	4b9d      	ldr	r3, [pc, #628]	; (800a6c4 <UART_SetConfig+0x928>)
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a450:	e00c      	b.n	800a46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a452:	4b9d      	ldr	r3, [pc, #628]	; (800a6c8 <UART_SetConfig+0x92c>)
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a456:	e009      	b.n	800a46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45e:	e005      	b.n	800a46c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a46a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 81de 	beq.w	800a830 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	4a94      	ldr	r2, [pc, #592]	; (800a6cc <UART_SetConfig+0x930>)
 800a47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a47e:	461a      	mov	r2, r3
 800a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a482:	fbb3 f3f2 	udiv	r3, r3, r2
 800a486:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4613      	mov	r3, r2
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	4413      	add	r3, r2
 800a492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a494:	429a      	cmp	r2, r3
 800a496:	d305      	bcc.n	800a4a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d903      	bls.n	800a4ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a4aa:	e1c1      	b.n	800a830 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	60fa      	str	r2, [r7, #12]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	4a84      	ldr	r2, [pc, #528]	; (800a6cc <UART_SetConfig+0x930>)
 800a4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4ce:	f7f5 ff57 	bl	8000380 <__aeabi_uldivmod>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	020b      	lsls	r3, r1, #8
 800a4e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4e8:	0202      	lsls	r2, r0, #8
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	6849      	ldr	r1, [r1, #4]
 800a4ee:	0849      	lsrs	r1, r1, #1
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	eb12 0804 	adds.w	r8, r2, r4
 800a4fa:	eb43 0905 	adc.w	r9, r3, r5
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	469a      	mov	sl, r3
 800a506:	4693      	mov	fp, r2
 800a508:	4652      	mov	r2, sl
 800a50a:	465b      	mov	r3, fp
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7f5 ff36 	bl	8000380 <__aeabi_uldivmod>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4613      	mov	r3, r2
 800a51a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d308      	bcc.n	800a536 <UART_SetConfig+0x79a>
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52a:	d204      	bcs.n	800a536 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a532:	60da      	str	r2, [r3, #12]
 800a534:	e17c      	b.n	800a830 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a53c:	e178      	b.n	800a830 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a546:	f040 80c5 	bne.w	800a6d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a54a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a54e:	2b20      	cmp	r3, #32
 800a550:	dc48      	bgt.n	800a5e4 <UART_SetConfig+0x848>
 800a552:	2b00      	cmp	r3, #0
 800a554:	db7b      	blt.n	800a64e <UART_SetConfig+0x8b2>
 800a556:	2b20      	cmp	r3, #32
 800a558:	d879      	bhi.n	800a64e <UART_SetConfig+0x8b2>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x7c4>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5eb 	.word	0x0800a5eb
 800a564:	0800a5f3 	.word	0x0800a5f3
 800a568:	0800a64f 	.word	0x0800a64f
 800a56c:	0800a64f 	.word	0x0800a64f
 800a570:	0800a5fb 	.word	0x0800a5fb
 800a574:	0800a64f 	.word	0x0800a64f
 800a578:	0800a64f 	.word	0x0800a64f
 800a57c:	0800a64f 	.word	0x0800a64f
 800a580:	0800a60b 	.word	0x0800a60b
 800a584:	0800a64f 	.word	0x0800a64f
 800a588:	0800a64f 	.word	0x0800a64f
 800a58c:	0800a64f 	.word	0x0800a64f
 800a590:	0800a64f 	.word	0x0800a64f
 800a594:	0800a64f 	.word	0x0800a64f
 800a598:	0800a64f 	.word	0x0800a64f
 800a59c:	0800a64f 	.word	0x0800a64f
 800a5a0:	0800a61b 	.word	0x0800a61b
 800a5a4:	0800a64f 	.word	0x0800a64f
 800a5a8:	0800a64f 	.word	0x0800a64f
 800a5ac:	0800a64f 	.word	0x0800a64f
 800a5b0:	0800a64f 	.word	0x0800a64f
 800a5b4:	0800a64f 	.word	0x0800a64f
 800a5b8:	0800a64f 	.word	0x0800a64f
 800a5bc:	0800a64f 	.word	0x0800a64f
 800a5c0:	0800a64f 	.word	0x0800a64f
 800a5c4:	0800a64f 	.word	0x0800a64f
 800a5c8:	0800a64f 	.word	0x0800a64f
 800a5cc:	0800a64f 	.word	0x0800a64f
 800a5d0:	0800a64f 	.word	0x0800a64f
 800a5d4:	0800a64f 	.word	0x0800a64f
 800a5d8:	0800a64f 	.word	0x0800a64f
 800a5dc:	0800a64f 	.word	0x0800a64f
 800a5e0:	0800a641 	.word	0x0800a641
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d02e      	beq.n	800a646 <UART_SetConfig+0x8aa>
 800a5e8:	e031      	b.n	800a64e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5ea:	f7fd f853 	bl	8007694 <HAL_RCC_GetPCLK1Freq>
 800a5ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5f0:	e033      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f2:	f7fd f865 	bl	80076c0 <HAL_RCC_GetPCLK2Freq>
 800a5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5f8:	e02f      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fd ffd0 	bl	80085a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a608:	e027      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60a:	f107 0318 	add.w	r3, r7, #24
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f91c 	bl	800884c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a618:	e01f      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a61a:	4b2d      	ldr	r3, [pc, #180]	; (800a6d0 <UART_SetConfig+0x934>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a626:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <UART_SetConfig+0x934>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	08db      	lsrs	r3, r3, #3
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	4a24      	ldr	r2, [pc, #144]	; (800a6c4 <UART_SetConfig+0x928>)
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a638:	e00f      	b.n	800a65a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a63a:	4b22      	ldr	r3, [pc, #136]	; (800a6c4 <UART_SetConfig+0x928>)
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a63e:	e00c      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a640:	4b21      	ldr	r3, [pc, #132]	; (800a6c8 <UART_SetConfig+0x92c>)
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a644:	e009      	b.n	800a65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64c:	e005      	b.n	800a65a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 80e7 	beq.w	800a830 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <UART_SetConfig+0x930>)
 800a668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a670:	fbb3 f3f2 	udiv	r3, r3, r2
 800a674:	005a      	lsls	r2, r3, #1
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	441a      	add	r2, r3
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	d916      	bls.n	800a6bc <UART_SetConfig+0x920>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a694:	d212      	bcs.n	800a6bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	b29b      	uxth	r3, r3
 800a69a:	f023 030f 	bic.w	r3, r3, #15
 800a69e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a6b8:	60da      	str	r2, [r3, #12]
 800a6ba:	e0b9      	b.n	800a830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a6c2:	e0b5      	b.n	800a830 <UART_SetConfig+0xa94>
 800a6c4:	03d09000 	.word	0x03d09000
 800a6c8:	003d0900 	.word	0x003d0900
 800a6cc:	0800d514 	.word	0x0800d514
 800a6d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	dc49      	bgt.n	800a770 <UART_SetConfig+0x9d4>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	db7c      	blt.n	800a7da <UART_SetConfig+0xa3e>
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d87a      	bhi.n	800a7da <UART_SetConfig+0xa3e>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <UART_SetConfig+0x950>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a777 	.word	0x0800a777
 800a6f0:	0800a77f 	.word	0x0800a77f
 800a6f4:	0800a7db 	.word	0x0800a7db
 800a6f8:	0800a7db 	.word	0x0800a7db
 800a6fc:	0800a787 	.word	0x0800a787
 800a700:	0800a7db 	.word	0x0800a7db
 800a704:	0800a7db 	.word	0x0800a7db
 800a708:	0800a7db 	.word	0x0800a7db
 800a70c:	0800a797 	.word	0x0800a797
 800a710:	0800a7db 	.word	0x0800a7db
 800a714:	0800a7db 	.word	0x0800a7db
 800a718:	0800a7db 	.word	0x0800a7db
 800a71c:	0800a7db 	.word	0x0800a7db
 800a720:	0800a7db 	.word	0x0800a7db
 800a724:	0800a7db 	.word	0x0800a7db
 800a728:	0800a7db 	.word	0x0800a7db
 800a72c:	0800a7a7 	.word	0x0800a7a7
 800a730:	0800a7db 	.word	0x0800a7db
 800a734:	0800a7db 	.word	0x0800a7db
 800a738:	0800a7db 	.word	0x0800a7db
 800a73c:	0800a7db 	.word	0x0800a7db
 800a740:	0800a7db 	.word	0x0800a7db
 800a744:	0800a7db 	.word	0x0800a7db
 800a748:	0800a7db 	.word	0x0800a7db
 800a74c:	0800a7db 	.word	0x0800a7db
 800a750:	0800a7db 	.word	0x0800a7db
 800a754:	0800a7db 	.word	0x0800a7db
 800a758:	0800a7db 	.word	0x0800a7db
 800a75c:	0800a7db 	.word	0x0800a7db
 800a760:	0800a7db 	.word	0x0800a7db
 800a764:	0800a7db 	.word	0x0800a7db
 800a768:	0800a7db 	.word	0x0800a7db
 800a76c:	0800a7cd 	.word	0x0800a7cd
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d02e      	beq.n	800a7d2 <UART_SetConfig+0xa36>
 800a774:	e031      	b.n	800a7da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a776:	f7fc ff8d 	bl	8007694 <HAL_RCC_GetPCLK1Freq>
 800a77a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a77c:	e033      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a77e:	f7fc ff9f 	bl	80076c0 <HAL_RCC_GetPCLK2Freq>
 800a782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a784:	e02f      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd ff0a 	bl	80085a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a794:	e027      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe f856 	bl	800884c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a4:	e01f      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7a6:	4b2d      	ldr	r3, [pc, #180]	; (800a85c <UART_SetConfig+0xac0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7b2:	4b2a      	ldr	r3, [pc, #168]	; (800a85c <UART_SetConfig+0xac0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	08db      	lsrs	r3, r3, #3
 800a7b8:	f003 0303 	and.w	r3, r3, #3
 800a7bc:	4a28      	ldr	r2, [pc, #160]	; (800a860 <UART_SetConfig+0xac4>)
 800a7be:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7c4:	e00f      	b.n	800a7e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <UART_SetConfig+0xac4>)
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ca:	e00c      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7cc:	4b25      	ldr	r3, [pc, #148]	; (800a864 <UART_SetConfig+0xac8>)
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d0:	e009      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d8:	e005      	b.n	800a7e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7e4:	bf00      	nop
    }

    if (pclk != 0U)
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d021      	beq.n	800a830 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	4a1d      	ldr	r2, [pc, #116]	; (800a868 <UART_SetConfig+0xacc>)
 800a7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	085b      	lsrs	r3, r3, #1
 800a804:	441a      	add	r2, r3
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	2b0f      	cmp	r3, #15
 800a814:	d909      	bls.n	800a82a <UART_SetConfig+0xa8e>
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81c:	d205      	bcs.n	800a82a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	b29a      	uxth	r2, r3
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	e002      	b.n	800a830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2201      	movs	r2, #1
 800a834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2200      	movs	r2, #0
 800a844:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a84c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a850:	4618      	mov	r0, r3
 800a852:	3748      	adds	r7, #72	; 0x48
 800a854:	46bd      	mov	sp, r7
 800a856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
 800a860:	03d09000 	.word	0x03d09000
 800a864:	003d0900 	.word	0x003d0900
 800a868:	0800d514 	.word	0x0800d514

0800a86c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00a      	beq.n	800a8da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00a      	beq.n	800a8fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00a      	beq.n	800a91e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01a      	beq.n	800a982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a96a:	d10a      	bne.n	800a982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	605a      	str	r2, [r3, #4]
  }
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9c0:	f7f8 fb54 	bl	800306c <HAL_GetTick>
 800a9c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d10e      	bne.n	800a9f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f82f 	bl	800aa46 <UART_WaitOnFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e025      	b.n	800aa3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d10e      	bne.n	800aa1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f819 	bl	800aa46 <UART_WaitOnFlagUntilTimeout>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e00f      	b.n	800aa3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b09c      	sub	sp, #112	; 0x70
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa56:	e0a9      	b.n	800abac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	f000 80a5 	beq.w	800abac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa62:	f7f8 fb03 	bl	800306c <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d140      	bne.n	800aafa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa8c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aaa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e6      	bne.n	800aa78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	f023 0301 	bic.w	r3, r3, #1
 800aac0:	663b      	str	r3, [r7, #96]	; 0x60
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaca:	64ba      	str	r2, [r7, #72]	; 0x48
 800aacc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e5      	bne.n	800aaaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e069      	b.n	800abce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d051      	beq.n	800abac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab16:	d149      	bne.n	800abac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab40:	637b      	str	r3, [r7, #52]	; 0x34
 800ab42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e6      	bne.n	800ab22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	613b      	str	r3, [r7, #16]
   return(result);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab74:	623a      	str	r2, [r7, #32]
 800ab76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	69f9      	ldr	r1, [r7, #28]
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e010      	b.n	800abce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4013      	ands	r3, r2
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	bf0c      	ite	eq
 800abbc:	2301      	moveq	r3, #1
 800abbe:	2300      	movne	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	f43f af46 	beq.w	800aa58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3770      	adds	r7, #112	; 0x70
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b095      	sub	sp, #84	; 0x54
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abfe:	643b      	str	r3, [r7, #64]	; 0x40
 800ac00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e6      	bne.n	800abe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3308      	adds	r3, #8
 800ac18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	4b1e      	ldr	r3, [pc, #120]	; (800aca0 <UART_EndRxTransfer+0xc8>)
 800ac26:	4013      	ands	r3, r2
 800ac28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e5      	bne.n	800ac12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d118      	bne.n	800ac80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f023 0310 	bic.w	r3, r3, #16
 800ac62:	647b      	str	r3, [r7, #68]	; 0x44
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac6c:	61bb      	str	r3, [r7, #24]
 800ac6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6979      	ldr	r1, [r7, #20]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	613b      	str	r3, [r7, #16]
   return(result);
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e6      	bne.n	800ac4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2220      	movs	r2, #32
 800ac84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ac94:	bf00      	nop
 800ac96:	3754      	adds	r7, #84	; 0x54
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	effffffe 	.word	0xeffffffe

0800aca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff f854 	bl	8009d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	61bb      	str	r3, [r7, #24]
 800acf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	6979      	ldr	r1, [r7, #20]
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	613b      	str	r3, [r7, #16]
   return(result);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e6      	bne.n	800acd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff f81f 	bl	8009d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1e:	bf00      	nop
 800ad20:	3720      	adds	r7, #32
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad74:	2302      	movs	r3, #2
 800ad76:	e027      	b.n	800adc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2224      	movs	r2, #36	; 0x24
 800ad84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0201 	bic.w	r2, r2, #1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ada6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ade8:	2302      	movs	r3, #2
 800adea:	e02d      	b.n	800ae48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2224      	movs	r2, #36	; 0x24
 800adf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0201 	bic.w	r2, r2, #1
 800ae12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f84f 	bl	800aecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d101      	bne.n	800ae68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae64:	2302      	movs	r3, #2
 800ae66:	e02d      	b.n	800aec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2224      	movs	r2, #36	; 0x24
 800ae74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 0201 	bic.w	r2, r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f811 	bl	800aecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d108      	bne.n	800aeee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aeec:	e031      	b.n	800af52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeee:	2310      	movs	r3, #16
 800aef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aef2:	2310      	movs	r3, #16
 800aef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	0e5b      	lsrs	r3, r3, #25
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	0f5b      	lsrs	r3, r3, #29
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	7b3a      	ldrb	r2, [r7, #12]
 800af1a:	4911      	ldr	r1, [pc, #68]	; (800af60 <UARTEx_SetNbDataToProcess+0x94>)
 800af1c:	5c8a      	ldrb	r2, [r1, r2]
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af22:	7b3a      	ldrb	r2, [r7, #12]
 800af24:	490f      	ldr	r1, [pc, #60]	; (800af64 <UARTEx_SetNbDataToProcess+0x98>)
 800af26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af28:	fb93 f3f2 	sdiv	r3, r3, r2
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	7b7a      	ldrb	r2, [r7, #13]
 800af38:	4909      	ldr	r1, [pc, #36]	; (800af60 <UARTEx_SetNbDataToProcess+0x94>)
 800af3a:	5c8a      	ldrb	r2, [r1, r2]
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af40:	7b7a      	ldrb	r2, [r7, #13]
 800af42:	4908      	ldr	r1, [pc, #32]	; (800af64 <UARTEx_SetNbDataToProcess+0x98>)
 800af44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af46:	fb93 f3f2 	sdiv	r3, r3, r2
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	0800d52c 	.word	0x0800d52c
 800af64:	0800d534 	.word	0x0800d534

0800af68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af68:	b084      	sub	sp, #16
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	f107 001c 	add.w	r0, r7, #28
 800af76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d120      	bne.n	800afc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <USB_CoreInit+0xd4>)
 800af92:	4013      	ands	r3, r2
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d105      	bne.n	800afb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 faac 	bl	800b514 <USB_CoreReset>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]
 800afc0:	e01a      	b.n	800aff8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 faa0 	bl	800b514 <USB_CoreReset>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800afd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	639a      	str	r2, [r3, #56]	; 0x38
 800afea:	e005      	b.n	800aff8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	2b01      	cmp	r3, #1
 800affc:	d116      	bne.n	800b02c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b002:	b29a      	uxth	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b00c:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <USB_CoreInit+0xd8>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f043 0206 	orr.w	r2, r3, #6
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f043 0220 	orr.w	r2, r3, #32
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b038:	b004      	add	sp, #16
 800b03a:	4770      	bx	lr
 800b03c:	ffbdffbf 	.word	0xffbdffbf
 800b040:	03ee0000 	.word	0x03ee0000

0800b044 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f023 0201 	bic.w	r2, r3, #1
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b082:	78fb      	ldrb	r3, [r7, #3]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d115      	bne.n	800b0b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b094:	2001      	movs	r0, #1
 800b096:	f7f7 fff5 	bl	8003084 <HAL_Delay>
      ms++;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fa29 	bl	800b4f8 <USB_GetMode>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d01e      	beq.n	800b0ea <USB_SetCurrentMode+0x84>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b31      	cmp	r3, #49	; 0x31
 800b0b0:	d9f0      	bls.n	800b094 <USB_SetCurrentMode+0x2e>
 800b0b2:	e01a      	b.n	800b0ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d115      	bne.n	800b0e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	f7f7 ffdc 	bl	8003084 <HAL_Delay>
      ms++;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa10 	bl	800b4f8 <USB_GetMode>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <USB_SetCurrentMode+0x84>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b31      	cmp	r3, #49	; 0x31
 800b0e2:	d9f0      	bls.n	800b0c6 <USB_SetCurrentMode+0x60>
 800b0e4:	e001      	b.n	800b0ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e005      	b.n	800b0f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b32      	cmp	r3, #50	; 0x32
 800b0ee:	d101      	bne.n	800b0f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e000      	b.n	800b0f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b100:	b084      	sub	sp, #16
 800b102:	b580      	push	{r7, lr}
 800b104:	b086      	sub	sp, #24
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b10e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b11a:	2300      	movs	r3, #0
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	e009      	b.n	800b134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	3340      	adds	r3, #64	; 0x40
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	3301      	adds	r3, #1
 800b132:	613b      	str	r3, [r7, #16]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	2b0e      	cmp	r3, #14
 800b138:	d9f2      	bls.n	800b120 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d11c      	bne.n	800b17a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b14e:	f043 0302 	orr.w	r3, r3, #2
 800b152:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b158:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	e005      	b.n	800b186 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b18c:	461a      	mov	r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b198:	4619      	mov	r1, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	680b      	ldr	r3, [r1, #0]
 800b1a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d10c      	bne.n	800b1c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d104      	bne.n	800b1bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f965 	bl	800b484 <USB_SetDevSpeed>
 800b1ba:	e008      	b.n	800b1ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b1bc:	2101      	movs	r1, #1
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f960 	bl	800b484 <USB_SetDevSpeed>
 800b1c4:	e003      	b.n	800b1ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b1c6:	2103      	movs	r1, #3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f95b 	bl	800b484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1ce:	2110      	movs	r1, #16
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f8f3 	bl	800b3bc <USB_FlushTxFifo>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f91f 	bl	800b424 <USB_FlushRxFifo>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b202:	461a      	mov	r2, r3
 800b204:	2300      	movs	r3, #0
 800b206:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20e:	461a      	mov	r2, r3
 800b210:	2300      	movs	r3, #0
 800b212:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b214:	2300      	movs	r3, #0
 800b216:	613b      	str	r3, [r7, #16]
 800b218:	e043      	b.n	800b2a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	015a      	lsls	r2, r3, #5
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4413      	add	r3, r2
 800b222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b22c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b230:	d118      	bne.n	800b264 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10a      	bne.n	800b24e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b244:	461a      	mov	r2, r3
 800b246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	e013      	b.n	800b276 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25a:	461a      	mov	r2, r3
 800b25c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	e008      	b.n	800b276 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b270:	461a      	mov	r2, r3
 800b272:	2300      	movs	r3, #0
 800b274:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b282:	461a      	mov	r2, r3
 800b284:	2300      	movs	r3, #0
 800b286:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b294:	461a      	mov	r2, r3
 800b296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b29a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d3b7      	bcc.n	800b21a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	e043      	b.n	800b338 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2c6:	d118      	bne.n	800b2fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	e013      	b.n	800b30c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	e008      	b.n	800b30c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b306:	461a      	mov	r2, r3
 800b308:	2300      	movs	r3, #0
 800b30a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b318:	461a      	mov	r2, r3
 800b31a:	2300      	movs	r3, #0
 800b31c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	4413      	add	r3, r2
 800b326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32a:	461a      	mov	r2, r3
 800b32c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	3301      	adds	r3, #1
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d3b7      	bcc.n	800b2b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b34e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b352:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b360:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f043 0210 	orr.w	r2, r3, #16
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	699a      	ldr	r2, [r3, #24]
 800b378:	4b0e      	ldr	r3, [pc, #56]	; (800b3b4 <USB_DevInit+0x2b4>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d005      	beq.n	800b392 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	f043 0208 	orr.w	r2, r3, #8
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b394:	2b01      	cmp	r3, #1
 800b396:	d105      	bne.n	800b3a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699a      	ldr	r2, [r3, #24]
 800b39c:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <USB_DevInit+0x2b8>)
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3b0:	b004      	add	sp, #16
 800b3b2:	4770      	bx	lr
 800b3b4:	803c3800 	.word	0x803c3800
 800b3b8:	40000004 	.word	0x40000004

0800b3bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4a13      	ldr	r2, [pc, #76]	; (800b420 <USB_FlushTxFifo+0x64>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d901      	bls.n	800b3dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e01b      	b.n	800b414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	daf2      	bge.n	800b3ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	019b      	lsls	r3, r3, #6
 800b3ec:	f043 0220 	orr.w	r2, r3, #32
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	4a08      	ldr	r2, [pc, #32]	; (800b420 <USB_FlushTxFifo+0x64>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d901      	bls.n	800b406 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e006      	b.n	800b414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d0f0      	beq.n	800b3f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	00030d40 	.word	0x00030d40

0800b424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3301      	adds	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4a11      	ldr	r2, [pc, #68]	; (800b480 <USB_FlushRxFifo+0x5c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d901      	bls.n	800b442 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e018      	b.n	800b474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	daf2      	bge.n	800b430 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2210      	movs	r2, #16
 800b452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3301      	adds	r3, #1
 800b458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <USB_FlushRxFifo+0x5c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d901      	bls.n	800b466 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e006      	b.n	800b474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	2b10      	cmp	r3, #16
 800b470:	d0f0      	beq.n	800b454 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	00030d40 	.word	0x00030d40

0800b484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4e4:	f043 0302 	orr.w	r3, r3, #2
 800b4e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	f003 0301 	and.w	r3, r3, #1
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3301      	adds	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4a13      	ldr	r2, [pc, #76]	; (800b578 <USB_CoreReset+0x64>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d901      	bls.n	800b532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e01b      	b.n	800b56a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	daf2      	bge.n	800b520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f043 0201 	orr.w	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4a09      	ldr	r2, [pc, #36]	; (800b578 <USB_CoreReset+0x64>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d901      	bls.n	800b55c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e006      	b.n	800b56a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b01      	cmp	r3, #1
 800b566:	d0f0      	beq.n	800b54a <USB_CoreReset+0x36>

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	00030d40 	.word	0x00030d40

0800b57c <__errno>:
 800b57c:	4b01      	ldr	r3, [pc, #4]	; (800b584 <__errno+0x8>)
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	24000020 	.word	0x24000020

0800b588 <__libc_init_array>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	4d0d      	ldr	r5, [pc, #52]	; (800b5c0 <__libc_init_array+0x38>)
 800b58c:	4c0d      	ldr	r4, [pc, #52]	; (800b5c4 <__libc_init_array+0x3c>)
 800b58e:	1b64      	subs	r4, r4, r5
 800b590:	10a4      	asrs	r4, r4, #2
 800b592:	2600      	movs	r6, #0
 800b594:	42a6      	cmp	r6, r4
 800b596:	d109      	bne.n	800b5ac <__libc_init_array+0x24>
 800b598:	4d0b      	ldr	r5, [pc, #44]	; (800b5c8 <__libc_init_array+0x40>)
 800b59a:	4c0c      	ldr	r4, [pc, #48]	; (800b5cc <__libc_init_array+0x44>)
 800b59c:	f000 fc8e 	bl	800bebc <_init>
 800b5a0:	1b64      	subs	r4, r4, r5
 800b5a2:	10a4      	asrs	r4, r4, #2
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	d105      	bne.n	800b5b6 <__libc_init_array+0x2e>
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b0:	4798      	blx	r3
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	e7ee      	b.n	800b594 <__libc_init_array+0xc>
 800b5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ba:	4798      	blx	r3
 800b5bc:	3601      	adds	r6, #1
 800b5be:	e7f2      	b.n	800b5a6 <__libc_init_array+0x1e>
 800b5c0:	0800d578 	.word	0x0800d578
 800b5c4:	0800d578 	.word	0x0800d578
 800b5c8:	0800d578 	.word	0x0800d578
 800b5cc:	0800d57c 	.word	0x0800d57c

0800b5d0 <memset>:
 800b5d0:	4402      	add	r2, r0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d100      	bne.n	800b5da <memset+0xa>
 800b5d8:	4770      	bx	lr
 800b5da:	f803 1b01 	strb.w	r1, [r3], #1
 800b5de:	e7f9      	b.n	800b5d4 <memset+0x4>

0800b5e0 <_free_r>:
 800b5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	d044      	beq.n	800b670 <_free_r+0x90>
 800b5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ea:	9001      	str	r0, [sp, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f1a1 0404 	sub.w	r4, r1, #4
 800b5f2:	bfb8      	it	lt
 800b5f4:	18e4      	addlt	r4, r4, r3
 800b5f6:	f000 f903 	bl	800b800 <__malloc_lock>
 800b5fa:	4a1e      	ldr	r2, [pc, #120]	; (800b674 <_free_r+0x94>)
 800b5fc:	9801      	ldr	r0, [sp, #4]
 800b5fe:	6813      	ldr	r3, [r2, #0]
 800b600:	b933      	cbnz	r3, 800b610 <_free_r+0x30>
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	6014      	str	r4, [r2, #0]
 800b606:	b003      	add	sp, #12
 800b608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b60c:	f000 b8fe 	b.w	800b80c <__malloc_unlock>
 800b610:	42a3      	cmp	r3, r4
 800b612:	d908      	bls.n	800b626 <_free_r+0x46>
 800b614:	6825      	ldr	r5, [r4, #0]
 800b616:	1961      	adds	r1, r4, r5
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf01      	itttt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	1949      	addeq	r1, r1, r5
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	e7ed      	b.n	800b602 <_free_r+0x22>
 800b626:	461a      	mov	r2, r3
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	b10b      	cbz	r3, 800b630 <_free_r+0x50>
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	d9fa      	bls.n	800b626 <_free_r+0x46>
 800b630:	6811      	ldr	r1, [r2, #0]
 800b632:	1855      	adds	r5, r2, r1
 800b634:	42a5      	cmp	r5, r4
 800b636:	d10b      	bne.n	800b650 <_free_r+0x70>
 800b638:	6824      	ldr	r4, [r4, #0]
 800b63a:	4421      	add	r1, r4
 800b63c:	1854      	adds	r4, r2, r1
 800b63e:	42a3      	cmp	r3, r4
 800b640:	6011      	str	r1, [r2, #0]
 800b642:	d1e0      	bne.n	800b606 <_free_r+0x26>
 800b644:	681c      	ldr	r4, [r3, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	6053      	str	r3, [r2, #4]
 800b64a:	4421      	add	r1, r4
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	e7da      	b.n	800b606 <_free_r+0x26>
 800b650:	d902      	bls.n	800b658 <_free_r+0x78>
 800b652:	230c      	movs	r3, #12
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	e7d6      	b.n	800b606 <_free_r+0x26>
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	1961      	adds	r1, r4, r5
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf04      	itt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	6063      	str	r3, [r4, #4]
 800b666:	bf04      	itt	eq
 800b668:	1949      	addeq	r1, r1, r5
 800b66a:	6021      	streq	r1, [r4, #0]
 800b66c:	6054      	str	r4, [r2, #4]
 800b66e:	e7ca      	b.n	800b606 <_free_r+0x26>
 800b670:	b003      	add	sp, #12
 800b672:	bd30      	pop	{r4, r5, pc}
 800b674:	24000cac 	.word	0x24000cac

0800b678 <sbrk_aligned>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	4e0e      	ldr	r6, [pc, #56]	; (800b6b4 <sbrk_aligned+0x3c>)
 800b67c:	460c      	mov	r4, r1
 800b67e:	6831      	ldr	r1, [r6, #0]
 800b680:	4605      	mov	r5, r0
 800b682:	b911      	cbnz	r1, 800b68a <sbrk_aligned+0x12>
 800b684:	f000 f88c 	bl	800b7a0 <_sbrk_r>
 800b688:	6030      	str	r0, [r6, #0]
 800b68a:	4621      	mov	r1, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	f000 f887 	bl	800b7a0 <_sbrk_r>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d00a      	beq.n	800b6ac <sbrk_aligned+0x34>
 800b696:	1cc4      	adds	r4, r0, #3
 800b698:	f024 0403 	bic.w	r4, r4, #3
 800b69c:	42a0      	cmp	r0, r4
 800b69e:	d007      	beq.n	800b6b0 <sbrk_aligned+0x38>
 800b6a0:	1a21      	subs	r1, r4, r0
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f000 f87c 	bl	800b7a0 <_sbrk_r>
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d101      	bne.n	800b6b0 <sbrk_aligned+0x38>
 800b6ac:	f04f 34ff 	mov.w	r4, #4294967295
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	24000cb0 	.word	0x24000cb0

0800b6b8 <_malloc_r>:
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	1ccd      	adds	r5, r1, #3
 800b6be:	f025 0503 	bic.w	r5, r5, #3
 800b6c2:	3508      	adds	r5, #8
 800b6c4:	2d0c      	cmp	r5, #12
 800b6c6:	bf38      	it	cc
 800b6c8:	250c      	movcc	r5, #12
 800b6ca:	2d00      	cmp	r5, #0
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	db01      	blt.n	800b6d4 <_malloc_r+0x1c>
 800b6d0:	42a9      	cmp	r1, r5
 800b6d2:	d905      	bls.n	800b6e0 <_malloc_r+0x28>
 800b6d4:	230c      	movs	r3, #12
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	2600      	movs	r6, #0
 800b6da:	4630      	mov	r0, r6
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	4e2e      	ldr	r6, [pc, #184]	; (800b79c <_malloc_r+0xe4>)
 800b6e2:	f000 f88d 	bl	800b800 <__malloc_lock>
 800b6e6:	6833      	ldr	r3, [r6, #0]
 800b6e8:	461c      	mov	r4, r3
 800b6ea:	bb34      	cbnz	r4, 800b73a <_malloc_r+0x82>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f7ff ffc2 	bl	800b678 <sbrk_aligned>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	d14d      	bne.n	800b796 <_malloc_r+0xde>
 800b6fa:	6834      	ldr	r4, [r6, #0]
 800b6fc:	4626      	mov	r6, r4
 800b6fe:	2e00      	cmp	r6, #0
 800b700:	d140      	bne.n	800b784 <_malloc_r+0xcc>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	4631      	mov	r1, r6
 800b706:	4638      	mov	r0, r7
 800b708:	eb04 0803 	add.w	r8, r4, r3
 800b70c:	f000 f848 	bl	800b7a0 <_sbrk_r>
 800b710:	4580      	cmp	r8, r0
 800b712:	d13a      	bne.n	800b78a <_malloc_r+0xd2>
 800b714:	6821      	ldr	r1, [r4, #0]
 800b716:	3503      	adds	r5, #3
 800b718:	1a6d      	subs	r5, r5, r1
 800b71a:	f025 0503 	bic.w	r5, r5, #3
 800b71e:	3508      	adds	r5, #8
 800b720:	2d0c      	cmp	r5, #12
 800b722:	bf38      	it	cc
 800b724:	250c      	movcc	r5, #12
 800b726:	4629      	mov	r1, r5
 800b728:	4638      	mov	r0, r7
 800b72a:	f7ff ffa5 	bl	800b678 <sbrk_aligned>
 800b72e:	3001      	adds	r0, #1
 800b730:	d02b      	beq.n	800b78a <_malloc_r+0xd2>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	442b      	add	r3, r5
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	e00e      	b.n	800b758 <_malloc_r+0xa0>
 800b73a:	6822      	ldr	r2, [r4, #0]
 800b73c:	1b52      	subs	r2, r2, r5
 800b73e:	d41e      	bmi.n	800b77e <_malloc_r+0xc6>
 800b740:	2a0b      	cmp	r2, #11
 800b742:	d916      	bls.n	800b772 <_malloc_r+0xba>
 800b744:	1961      	adds	r1, r4, r5
 800b746:	42a3      	cmp	r3, r4
 800b748:	6025      	str	r5, [r4, #0]
 800b74a:	bf18      	it	ne
 800b74c:	6059      	strne	r1, [r3, #4]
 800b74e:	6863      	ldr	r3, [r4, #4]
 800b750:	bf08      	it	eq
 800b752:	6031      	streq	r1, [r6, #0]
 800b754:	5162      	str	r2, [r4, r5]
 800b756:	604b      	str	r3, [r1, #4]
 800b758:	4638      	mov	r0, r7
 800b75a:	f104 060b 	add.w	r6, r4, #11
 800b75e:	f000 f855 	bl	800b80c <__malloc_unlock>
 800b762:	f026 0607 	bic.w	r6, r6, #7
 800b766:	1d23      	adds	r3, r4, #4
 800b768:	1af2      	subs	r2, r6, r3
 800b76a:	d0b6      	beq.n	800b6da <_malloc_r+0x22>
 800b76c:	1b9b      	subs	r3, r3, r6
 800b76e:	50a3      	str	r3, [r4, r2]
 800b770:	e7b3      	b.n	800b6da <_malloc_r+0x22>
 800b772:	6862      	ldr	r2, [r4, #4]
 800b774:	42a3      	cmp	r3, r4
 800b776:	bf0c      	ite	eq
 800b778:	6032      	streq	r2, [r6, #0]
 800b77a:	605a      	strne	r2, [r3, #4]
 800b77c:	e7ec      	b.n	800b758 <_malloc_r+0xa0>
 800b77e:	4623      	mov	r3, r4
 800b780:	6864      	ldr	r4, [r4, #4]
 800b782:	e7b2      	b.n	800b6ea <_malloc_r+0x32>
 800b784:	4634      	mov	r4, r6
 800b786:	6876      	ldr	r6, [r6, #4]
 800b788:	e7b9      	b.n	800b6fe <_malloc_r+0x46>
 800b78a:	230c      	movs	r3, #12
 800b78c:	603b      	str	r3, [r7, #0]
 800b78e:	4638      	mov	r0, r7
 800b790:	f000 f83c 	bl	800b80c <__malloc_unlock>
 800b794:	e7a1      	b.n	800b6da <_malloc_r+0x22>
 800b796:	6025      	str	r5, [r4, #0]
 800b798:	e7de      	b.n	800b758 <_malloc_r+0xa0>
 800b79a:	bf00      	nop
 800b79c:	24000cac 	.word	0x24000cac

0800b7a0 <_sbrk_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d06      	ldr	r5, [pc, #24]	; (800b7bc <_sbrk_r+0x1c>)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	602b      	str	r3, [r5, #0]
 800b7ac:	f7f7 fb78 	bl	8002ea0 <_sbrk>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_sbrk_r+0x1a>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_sbrk_r+0x1a>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	24000cb4 	.word	0x24000cb4

0800b7c0 <siprintf>:
 800b7c0:	b40e      	push	{r1, r2, r3}
 800b7c2:	b500      	push	{lr}
 800b7c4:	b09c      	sub	sp, #112	; 0x70
 800b7c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7c8:	9002      	str	r0, [sp, #8]
 800b7ca:	9006      	str	r0, [sp, #24]
 800b7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7d0:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <siprintf+0x38>)
 800b7d2:	9107      	str	r1, [sp, #28]
 800b7d4:	9104      	str	r1, [sp, #16]
 800b7d6:	4909      	ldr	r1, [pc, #36]	; (800b7fc <siprintf+0x3c>)
 800b7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	a902      	add	r1, sp, #8
 800b7e4:	f000 f874 	bl	800b8d0 <_svfiprintf_r>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	b01c      	add	sp, #112	; 0x70
 800b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f4:	b003      	add	sp, #12
 800b7f6:	4770      	bx	lr
 800b7f8:	24000020 	.word	0x24000020
 800b7fc:	ffff0208 	.word	0xffff0208

0800b800 <__malloc_lock>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__malloc_lock+0x8>)
 800b802:	f000 baf9 	b.w	800bdf8 <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	24000cb8 	.word	0x24000cb8

0800b80c <__malloc_unlock>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__malloc_unlock+0x8>)
 800b80e:	f000 baf4 	b.w	800bdfa <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	24000cb8 	.word	0x24000cb8

0800b818 <__ssputs_r>:
 800b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	688e      	ldr	r6, [r1, #8]
 800b81e:	429e      	cmp	r6, r3
 800b820:	4682      	mov	sl, r0
 800b822:	460c      	mov	r4, r1
 800b824:	4690      	mov	r8, r2
 800b826:	461f      	mov	r7, r3
 800b828:	d838      	bhi.n	800b89c <__ssputs_r+0x84>
 800b82a:	898a      	ldrh	r2, [r1, #12]
 800b82c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b830:	d032      	beq.n	800b898 <__ssputs_r+0x80>
 800b832:	6825      	ldr	r5, [r4, #0]
 800b834:	6909      	ldr	r1, [r1, #16]
 800b836:	eba5 0901 	sub.w	r9, r5, r1
 800b83a:	6965      	ldr	r5, [r4, #20]
 800b83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b844:	3301      	adds	r3, #1
 800b846:	444b      	add	r3, r9
 800b848:	106d      	asrs	r5, r5, #1
 800b84a:	429d      	cmp	r5, r3
 800b84c:	bf38      	it	cc
 800b84e:	461d      	movcc	r5, r3
 800b850:	0553      	lsls	r3, r2, #21
 800b852:	d531      	bpl.n	800b8b8 <__ssputs_r+0xa0>
 800b854:	4629      	mov	r1, r5
 800b856:	f7ff ff2f 	bl	800b6b8 <_malloc_r>
 800b85a:	4606      	mov	r6, r0
 800b85c:	b950      	cbnz	r0, 800b874 <__ssputs_r+0x5c>
 800b85e:	230c      	movs	r3, #12
 800b860:	f8ca 3000 	str.w	r3, [sl]
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b874:	6921      	ldr	r1, [r4, #16]
 800b876:	464a      	mov	r2, r9
 800b878:	f000 fac0 	bl	800bdfc <memcpy>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	6126      	str	r6, [r4, #16]
 800b88a:	6165      	str	r5, [r4, #20]
 800b88c:	444e      	add	r6, r9
 800b88e:	eba5 0509 	sub.w	r5, r5, r9
 800b892:	6026      	str	r6, [r4, #0]
 800b894:	60a5      	str	r5, [r4, #8]
 800b896:	463e      	mov	r6, r7
 800b898:	42be      	cmp	r6, r7
 800b89a:	d900      	bls.n	800b89e <__ssputs_r+0x86>
 800b89c:	463e      	mov	r6, r7
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	f000 fab8 	bl	800be18 <memmove>
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	1b9b      	subs	r3, r3, r6
 800b8ac:	60a3      	str	r3, [r4, #8]
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	4433      	add	r3, r6
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e7db      	b.n	800b870 <__ssputs_r+0x58>
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	f000 fac7 	bl	800be4c <_realloc_r>
 800b8be:	4606      	mov	r6, r0
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d1e1      	bne.n	800b888 <__ssputs_r+0x70>
 800b8c4:	6921      	ldr	r1, [r4, #16]
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	f7ff fe8a 	bl	800b5e0 <_free_r>
 800b8cc:	e7c7      	b.n	800b85e <__ssputs_r+0x46>
	...

0800b8d0 <_svfiprintf_r>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	4698      	mov	r8, r3
 800b8d6:	898b      	ldrh	r3, [r1, #12]
 800b8d8:	061b      	lsls	r3, r3, #24
 800b8da:	b09d      	sub	sp, #116	; 0x74
 800b8dc:	4607      	mov	r7, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	d50e      	bpl.n	800b902 <_svfiprintf_r+0x32>
 800b8e4:	690b      	ldr	r3, [r1, #16]
 800b8e6:	b963      	cbnz	r3, 800b902 <_svfiprintf_r+0x32>
 800b8e8:	2140      	movs	r1, #64	; 0x40
 800b8ea:	f7ff fee5 	bl	800b6b8 <_malloc_r>
 800b8ee:	6028      	str	r0, [r5, #0]
 800b8f0:	6128      	str	r0, [r5, #16]
 800b8f2:	b920      	cbnz	r0, 800b8fe <_svfiprintf_r+0x2e>
 800b8f4:	230c      	movs	r3, #12
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	e0d1      	b.n	800baa2 <_svfiprintf_r+0x1d2>
 800b8fe:	2340      	movs	r3, #64	; 0x40
 800b900:	616b      	str	r3, [r5, #20]
 800b902:	2300      	movs	r3, #0
 800b904:	9309      	str	r3, [sp, #36]	; 0x24
 800b906:	2320      	movs	r3, #32
 800b908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b90c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b910:	2330      	movs	r3, #48	; 0x30
 800b912:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800babc <_svfiprintf_r+0x1ec>
 800b916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b91a:	f04f 0901 	mov.w	r9, #1
 800b91e:	4623      	mov	r3, r4
 800b920:	469a      	mov	sl, r3
 800b922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b926:	b10a      	cbz	r2, 800b92c <_svfiprintf_r+0x5c>
 800b928:	2a25      	cmp	r2, #37	; 0x25
 800b92a:	d1f9      	bne.n	800b920 <_svfiprintf_r+0x50>
 800b92c:	ebba 0b04 	subs.w	fp, sl, r4
 800b930:	d00b      	beq.n	800b94a <_svfiprintf_r+0x7a>
 800b932:	465b      	mov	r3, fp
 800b934:	4622      	mov	r2, r4
 800b936:	4629      	mov	r1, r5
 800b938:	4638      	mov	r0, r7
 800b93a:	f7ff ff6d 	bl	800b818 <__ssputs_r>
 800b93e:	3001      	adds	r0, #1
 800b940:	f000 80aa 	beq.w	800ba98 <_svfiprintf_r+0x1c8>
 800b944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b946:	445a      	add	r2, fp
 800b948:	9209      	str	r2, [sp, #36]	; 0x24
 800b94a:	f89a 3000 	ldrb.w	r3, [sl]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 80a2 	beq.w	800ba98 <_svfiprintf_r+0x1c8>
 800b954:	2300      	movs	r3, #0
 800b956:	f04f 32ff 	mov.w	r2, #4294967295
 800b95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b95e:	f10a 0a01 	add.w	sl, sl, #1
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	9307      	str	r3, [sp, #28]
 800b966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b96a:	931a      	str	r3, [sp, #104]	; 0x68
 800b96c:	4654      	mov	r4, sl
 800b96e:	2205      	movs	r2, #5
 800b970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b974:	4851      	ldr	r0, [pc, #324]	; (800babc <_svfiprintf_r+0x1ec>)
 800b976:	f7f4 fcb3 	bl	80002e0 <memchr>
 800b97a:	9a04      	ldr	r2, [sp, #16]
 800b97c:	b9d8      	cbnz	r0, 800b9b6 <_svfiprintf_r+0xe6>
 800b97e:	06d0      	lsls	r0, r2, #27
 800b980:	bf44      	itt	mi
 800b982:	2320      	movmi	r3, #32
 800b984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b988:	0711      	lsls	r1, r2, #28
 800b98a:	bf44      	itt	mi
 800b98c:	232b      	movmi	r3, #43	; 0x2b
 800b98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b992:	f89a 3000 	ldrb.w	r3, [sl]
 800b996:	2b2a      	cmp	r3, #42	; 0x2a
 800b998:	d015      	beq.n	800b9c6 <_svfiprintf_r+0xf6>
 800b99a:	9a07      	ldr	r2, [sp, #28]
 800b99c:	4654      	mov	r4, sl
 800b99e:	2000      	movs	r0, #0
 800b9a0:	f04f 0c0a 	mov.w	ip, #10
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9aa:	3b30      	subs	r3, #48	; 0x30
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	d94e      	bls.n	800ba4e <_svfiprintf_r+0x17e>
 800b9b0:	b1b0      	cbz	r0, 800b9e0 <_svfiprintf_r+0x110>
 800b9b2:	9207      	str	r2, [sp, #28]
 800b9b4:	e014      	b.n	800b9e0 <_svfiprintf_r+0x110>
 800b9b6:	eba0 0308 	sub.w	r3, r0, r8
 800b9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	46a2      	mov	sl, r4
 800b9c4:	e7d2      	b.n	800b96c <_svfiprintf_r+0x9c>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	1d19      	adds	r1, r3, #4
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	9103      	str	r1, [sp, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfbb      	ittet	lt
 800b9d2:	425b      	neglt	r3, r3
 800b9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9d8:	9307      	strge	r3, [sp, #28]
 800b9da:	9307      	strlt	r3, [sp, #28]
 800b9dc:	bfb8      	it	lt
 800b9de:	9204      	strlt	r2, [sp, #16]
 800b9e0:	7823      	ldrb	r3, [r4, #0]
 800b9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9e4:	d10c      	bne.n	800ba00 <_svfiprintf_r+0x130>
 800b9e6:	7863      	ldrb	r3, [r4, #1]
 800b9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ea:	d135      	bne.n	800ba58 <_svfiprintf_r+0x188>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	9203      	str	r2, [sp, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bfb8      	it	lt
 800b9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9fc:	3402      	adds	r4, #2
 800b9fe:	9305      	str	r3, [sp, #20]
 800ba00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bacc <_svfiprintf_r+0x1fc>
 800ba04:	7821      	ldrb	r1, [r4, #0]
 800ba06:	2203      	movs	r2, #3
 800ba08:	4650      	mov	r0, sl
 800ba0a:	f7f4 fc69 	bl	80002e0 <memchr>
 800ba0e:	b140      	cbz	r0, 800ba22 <_svfiprintf_r+0x152>
 800ba10:	2340      	movs	r3, #64	; 0x40
 800ba12:	eba0 000a 	sub.w	r0, r0, sl
 800ba16:	fa03 f000 	lsl.w	r0, r3, r0
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	4303      	orrs	r3, r0
 800ba1e:	3401      	adds	r4, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba26:	4826      	ldr	r0, [pc, #152]	; (800bac0 <_svfiprintf_r+0x1f0>)
 800ba28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba2c:	2206      	movs	r2, #6
 800ba2e:	f7f4 fc57 	bl	80002e0 <memchr>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d038      	beq.n	800baa8 <_svfiprintf_r+0x1d8>
 800ba36:	4b23      	ldr	r3, [pc, #140]	; (800bac4 <_svfiprintf_r+0x1f4>)
 800ba38:	bb1b      	cbnz	r3, 800ba82 <_svfiprintf_r+0x1b2>
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	3307      	adds	r3, #7
 800ba3e:	f023 0307 	bic.w	r3, r3, #7
 800ba42:	3308      	adds	r3, #8
 800ba44:	9303      	str	r3, [sp, #12]
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	4433      	add	r3, r6
 800ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4c:	e767      	b.n	800b91e <_svfiprintf_r+0x4e>
 800ba4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba52:	460c      	mov	r4, r1
 800ba54:	2001      	movs	r0, #1
 800ba56:	e7a5      	b.n	800b9a4 <_svfiprintf_r+0xd4>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	f04f 0c0a 	mov.w	ip, #10
 800ba64:	4620      	mov	r0, r4
 800ba66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba6a:	3a30      	subs	r2, #48	; 0x30
 800ba6c:	2a09      	cmp	r2, #9
 800ba6e:	d903      	bls.n	800ba78 <_svfiprintf_r+0x1a8>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d0c5      	beq.n	800ba00 <_svfiprintf_r+0x130>
 800ba74:	9105      	str	r1, [sp, #20]
 800ba76:	e7c3      	b.n	800ba00 <_svfiprintf_r+0x130>
 800ba78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e7f0      	b.n	800ba64 <_svfiprintf_r+0x194>
 800ba82:	ab03      	add	r3, sp, #12
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	462a      	mov	r2, r5
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <_svfiprintf_r+0x1f8>)
 800ba8a:	a904      	add	r1, sp, #16
 800ba8c:	4638      	mov	r0, r7
 800ba8e:	f3af 8000 	nop.w
 800ba92:	1c42      	adds	r2, r0, #1
 800ba94:	4606      	mov	r6, r0
 800ba96:	d1d6      	bne.n	800ba46 <_svfiprintf_r+0x176>
 800ba98:	89ab      	ldrh	r3, [r5, #12]
 800ba9a:	065b      	lsls	r3, r3, #25
 800ba9c:	f53f af2c 	bmi.w	800b8f8 <_svfiprintf_r+0x28>
 800baa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baa2:	b01d      	add	sp, #116	; 0x74
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	ab03      	add	r3, sp, #12
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	462a      	mov	r2, r5
 800baae:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <_svfiprintf_r+0x1f8>)
 800bab0:	a904      	add	r1, sp, #16
 800bab2:	4638      	mov	r0, r7
 800bab4:	f000 f87a 	bl	800bbac <_printf_i>
 800bab8:	e7eb      	b.n	800ba92 <_svfiprintf_r+0x1c2>
 800baba:	bf00      	nop
 800babc:	0800d53c 	.word	0x0800d53c
 800bac0:	0800d546 	.word	0x0800d546
 800bac4:	00000000 	.word	0x00000000
 800bac8:	0800b819 	.word	0x0800b819
 800bacc:	0800d542 	.word	0x0800d542

0800bad0 <_printf_common>:
 800bad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	4616      	mov	r6, r2
 800bad6:	4699      	mov	r9, r3
 800bad8:	688a      	ldr	r2, [r1, #8]
 800bada:	690b      	ldr	r3, [r1, #16]
 800badc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bae0:	4293      	cmp	r3, r2
 800bae2:	bfb8      	it	lt
 800bae4:	4613      	movlt	r3, r2
 800bae6:	6033      	str	r3, [r6, #0]
 800bae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baec:	4607      	mov	r7, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	b10a      	cbz	r2, 800baf6 <_printf_common+0x26>
 800baf2:	3301      	adds	r3, #1
 800baf4:	6033      	str	r3, [r6, #0]
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	0699      	lsls	r1, r3, #26
 800bafa:	bf42      	ittt	mi
 800bafc:	6833      	ldrmi	r3, [r6, #0]
 800bafe:	3302      	addmi	r3, #2
 800bb00:	6033      	strmi	r3, [r6, #0]
 800bb02:	6825      	ldr	r5, [r4, #0]
 800bb04:	f015 0506 	ands.w	r5, r5, #6
 800bb08:	d106      	bne.n	800bb18 <_printf_common+0x48>
 800bb0a:	f104 0a19 	add.w	sl, r4, #25
 800bb0e:	68e3      	ldr	r3, [r4, #12]
 800bb10:	6832      	ldr	r2, [r6, #0]
 800bb12:	1a9b      	subs	r3, r3, r2
 800bb14:	42ab      	cmp	r3, r5
 800bb16:	dc26      	bgt.n	800bb66 <_printf_common+0x96>
 800bb18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb1c:	1e13      	subs	r3, r2, #0
 800bb1e:	6822      	ldr	r2, [r4, #0]
 800bb20:	bf18      	it	ne
 800bb22:	2301      	movne	r3, #1
 800bb24:	0692      	lsls	r2, r2, #26
 800bb26:	d42b      	bmi.n	800bb80 <_printf_common+0xb0>
 800bb28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	4638      	mov	r0, r7
 800bb30:	47c0      	blx	r8
 800bb32:	3001      	adds	r0, #1
 800bb34:	d01e      	beq.n	800bb74 <_printf_common+0xa4>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	68e5      	ldr	r5, [r4, #12]
 800bb3a:	6832      	ldr	r2, [r6, #0]
 800bb3c:	f003 0306 	and.w	r3, r3, #6
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	bf08      	it	eq
 800bb44:	1aad      	subeq	r5, r5, r2
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	6922      	ldr	r2, [r4, #16]
 800bb4a:	bf0c      	ite	eq
 800bb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb50:	2500      	movne	r5, #0
 800bb52:	4293      	cmp	r3, r2
 800bb54:	bfc4      	itt	gt
 800bb56:	1a9b      	subgt	r3, r3, r2
 800bb58:	18ed      	addgt	r5, r5, r3
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	341a      	adds	r4, #26
 800bb5e:	42b5      	cmp	r5, r6
 800bb60:	d11a      	bne.n	800bb98 <_printf_common+0xc8>
 800bb62:	2000      	movs	r0, #0
 800bb64:	e008      	b.n	800bb78 <_printf_common+0xa8>
 800bb66:	2301      	movs	r3, #1
 800bb68:	4652      	mov	r2, sl
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	47c0      	blx	r8
 800bb70:	3001      	adds	r0, #1
 800bb72:	d103      	bne.n	800bb7c <_printf_common+0xac>
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	e7c6      	b.n	800bb0e <_printf_common+0x3e>
 800bb80:	18e1      	adds	r1, r4, r3
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	2030      	movs	r0, #48	; 0x30
 800bb86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb8a:	4422      	add	r2, r4
 800bb8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb94:	3302      	adds	r3, #2
 800bb96:	e7c7      	b.n	800bb28 <_printf_common+0x58>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	4638      	mov	r0, r7
 800bba0:	47c0      	blx	r8
 800bba2:	3001      	adds	r0, #1
 800bba4:	d0e6      	beq.n	800bb74 <_printf_common+0xa4>
 800bba6:	3601      	adds	r6, #1
 800bba8:	e7d9      	b.n	800bb5e <_printf_common+0x8e>
	...

0800bbac <_printf_i>:
 800bbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb0:	7e0f      	ldrb	r7, [r1, #24]
 800bbb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbb4:	2f78      	cmp	r7, #120	; 0x78
 800bbb6:	4691      	mov	r9, r2
 800bbb8:	4680      	mov	r8, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	469a      	mov	sl, r3
 800bbbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbc2:	d807      	bhi.n	800bbd4 <_printf_i+0x28>
 800bbc4:	2f62      	cmp	r7, #98	; 0x62
 800bbc6:	d80a      	bhi.n	800bbde <_printf_i+0x32>
 800bbc8:	2f00      	cmp	r7, #0
 800bbca:	f000 80d8 	beq.w	800bd7e <_printf_i+0x1d2>
 800bbce:	2f58      	cmp	r7, #88	; 0x58
 800bbd0:	f000 80a3 	beq.w	800bd1a <_printf_i+0x16e>
 800bbd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbdc:	e03a      	b.n	800bc54 <_printf_i+0xa8>
 800bbde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbe2:	2b15      	cmp	r3, #21
 800bbe4:	d8f6      	bhi.n	800bbd4 <_printf_i+0x28>
 800bbe6:	a101      	add	r1, pc, #4	; (adr r1, 800bbec <_printf_i+0x40>)
 800bbe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc59 	.word	0x0800bc59
 800bbf4:	0800bbd5 	.word	0x0800bbd5
 800bbf8:	0800bbd5 	.word	0x0800bbd5
 800bbfc:	0800bbd5 	.word	0x0800bbd5
 800bc00:	0800bbd5 	.word	0x0800bbd5
 800bc04:	0800bc59 	.word	0x0800bc59
 800bc08:	0800bbd5 	.word	0x0800bbd5
 800bc0c:	0800bbd5 	.word	0x0800bbd5
 800bc10:	0800bbd5 	.word	0x0800bbd5
 800bc14:	0800bbd5 	.word	0x0800bbd5
 800bc18:	0800bd65 	.word	0x0800bd65
 800bc1c:	0800bc89 	.word	0x0800bc89
 800bc20:	0800bd47 	.word	0x0800bd47
 800bc24:	0800bbd5 	.word	0x0800bbd5
 800bc28:	0800bbd5 	.word	0x0800bbd5
 800bc2c:	0800bd87 	.word	0x0800bd87
 800bc30:	0800bbd5 	.word	0x0800bbd5
 800bc34:	0800bc89 	.word	0x0800bc89
 800bc38:	0800bbd5 	.word	0x0800bbd5
 800bc3c:	0800bbd5 	.word	0x0800bbd5
 800bc40:	0800bd4f 	.word	0x0800bd4f
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	1d1a      	adds	r2, r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	602a      	str	r2, [r5, #0]
 800bc4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc54:	2301      	movs	r3, #1
 800bc56:	e0a3      	b.n	800bda0 <_printf_i+0x1f4>
 800bc58:	6820      	ldr	r0, [r4, #0]
 800bc5a:	6829      	ldr	r1, [r5, #0]
 800bc5c:	0606      	lsls	r6, r0, #24
 800bc5e:	f101 0304 	add.w	r3, r1, #4
 800bc62:	d50a      	bpl.n	800bc7a <_printf_i+0xce>
 800bc64:	680e      	ldr	r6, [r1, #0]
 800bc66:	602b      	str	r3, [r5, #0]
 800bc68:	2e00      	cmp	r6, #0
 800bc6a:	da03      	bge.n	800bc74 <_printf_i+0xc8>
 800bc6c:	232d      	movs	r3, #45	; 0x2d
 800bc6e:	4276      	negs	r6, r6
 800bc70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc74:	485e      	ldr	r0, [pc, #376]	; (800bdf0 <_printf_i+0x244>)
 800bc76:	230a      	movs	r3, #10
 800bc78:	e019      	b.n	800bcae <_printf_i+0x102>
 800bc7a:	680e      	ldr	r6, [r1, #0]
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc82:	bf18      	it	ne
 800bc84:	b236      	sxthne	r6, r6
 800bc86:	e7ef      	b.n	800bc68 <_printf_i+0xbc>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	6820      	ldr	r0, [r4, #0]
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	6029      	str	r1, [r5, #0]
 800bc90:	0601      	lsls	r1, r0, #24
 800bc92:	d501      	bpl.n	800bc98 <_printf_i+0xec>
 800bc94:	681e      	ldr	r6, [r3, #0]
 800bc96:	e002      	b.n	800bc9e <_printf_i+0xf2>
 800bc98:	0646      	lsls	r6, r0, #25
 800bc9a:	d5fb      	bpl.n	800bc94 <_printf_i+0xe8>
 800bc9c:	881e      	ldrh	r6, [r3, #0]
 800bc9e:	4854      	ldr	r0, [pc, #336]	; (800bdf0 <_printf_i+0x244>)
 800bca0:	2f6f      	cmp	r7, #111	; 0x6f
 800bca2:	bf0c      	ite	eq
 800bca4:	2308      	moveq	r3, #8
 800bca6:	230a      	movne	r3, #10
 800bca8:	2100      	movs	r1, #0
 800bcaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcae:	6865      	ldr	r5, [r4, #4]
 800bcb0:	60a5      	str	r5, [r4, #8]
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	bfa2      	ittt	ge
 800bcb6:	6821      	ldrge	r1, [r4, #0]
 800bcb8:	f021 0104 	bicge.w	r1, r1, #4
 800bcbc:	6021      	strge	r1, [r4, #0]
 800bcbe:	b90e      	cbnz	r6, 800bcc4 <_printf_i+0x118>
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	d04d      	beq.n	800bd60 <_printf_i+0x1b4>
 800bcc4:	4615      	mov	r5, r2
 800bcc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcca:	fb03 6711 	mls	r7, r3, r1, r6
 800bcce:	5dc7      	ldrb	r7, [r0, r7]
 800bcd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcd4:	4637      	mov	r7, r6
 800bcd6:	42bb      	cmp	r3, r7
 800bcd8:	460e      	mov	r6, r1
 800bcda:	d9f4      	bls.n	800bcc6 <_printf_i+0x11a>
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d10b      	bne.n	800bcf8 <_printf_i+0x14c>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	07de      	lsls	r6, r3, #31
 800bce4:	d508      	bpl.n	800bcf8 <_printf_i+0x14c>
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	6861      	ldr	r1, [r4, #4]
 800bcea:	4299      	cmp	r1, r3
 800bcec:	bfde      	ittt	le
 800bcee:	2330      	movle	r3, #48	; 0x30
 800bcf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcf8:	1b52      	subs	r2, r2, r5
 800bcfa:	6122      	str	r2, [r4, #16]
 800bcfc:	f8cd a000 	str.w	sl, [sp]
 800bd00:	464b      	mov	r3, r9
 800bd02:	aa03      	add	r2, sp, #12
 800bd04:	4621      	mov	r1, r4
 800bd06:	4640      	mov	r0, r8
 800bd08:	f7ff fee2 	bl	800bad0 <_printf_common>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d14c      	bne.n	800bdaa <_printf_i+0x1fe>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	b004      	add	sp, #16
 800bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1a:	4835      	ldr	r0, [pc, #212]	; (800bdf0 <_printf_i+0x244>)
 800bd1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd20:	6829      	ldr	r1, [r5, #0]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd28:	6029      	str	r1, [r5, #0]
 800bd2a:	061d      	lsls	r5, r3, #24
 800bd2c:	d514      	bpl.n	800bd58 <_printf_i+0x1ac>
 800bd2e:	07df      	lsls	r7, r3, #31
 800bd30:	bf44      	itt	mi
 800bd32:	f043 0320 	orrmi.w	r3, r3, #32
 800bd36:	6023      	strmi	r3, [r4, #0]
 800bd38:	b91e      	cbnz	r6, 800bd42 <_printf_i+0x196>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	f023 0320 	bic.w	r3, r3, #32
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	2310      	movs	r3, #16
 800bd44:	e7b0      	b.n	800bca8 <_printf_i+0xfc>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	f043 0320 	orr.w	r3, r3, #32
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	2378      	movs	r3, #120	; 0x78
 800bd50:	4828      	ldr	r0, [pc, #160]	; (800bdf4 <_printf_i+0x248>)
 800bd52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd56:	e7e3      	b.n	800bd20 <_printf_i+0x174>
 800bd58:	0659      	lsls	r1, r3, #25
 800bd5a:	bf48      	it	mi
 800bd5c:	b2b6      	uxthmi	r6, r6
 800bd5e:	e7e6      	b.n	800bd2e <_printf_i+0x182>
 800bd60:	4615      	mov	r5, r2
 800bd62:	e7bb      	b.n	800bcdc <_printf_i+0x130>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	6826      	ldr	r6, [r4, #0]
 800bd68:	6961      	ldr	r1, [r4, #20]
 800bd6a:	1d18      	adds	r0, r3, #4
 800bd6c:	6028      	str	r0, [r5, #0]
 800bd6e:	0635      	lsls	r5, r6, #24
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	d501      	bpl.n	800bd78 <_printf_i+0x1cc>
 800bd74:	6019      	str	r1, [r3, #0]
 800bd76:	e002      	b.n	800bd7e <_printf_i+0x1d2>
 800bd78:	0670      	lsls	r0, r6, #25
 800bd7a:	d5fb      	bpl.n	800bd74 <_printf_i+0x1c8>
 800bd7c:	8019      	strh	r1, [r3, #0]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	6123      	str	r3, [r4, #16]
 800bd82:	4615      	mov	r5, r2
 800bd84:	e7ba      	b.n	800bcfc <_printf_i+0x150>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	1d1a      	adds	r2, r3, #4
 800bd8a:	602a      	str	r2, [r5, #0]
 800bd8c:	681d      	ldr	r5, [r3, #0]
 800bd8e:	6862      	ldr	r2, [r4, #4]
 800bd90:	2100      	movs	r1, #0
 800bd92:	4628      	mov	r0, r5
 800bd94:	f7f4 faa4 	bl	80002e0 <memchr>
 800bd98:	b108      	cbz	r0, 800bd9e <_printf_i+0x1f2>
 800bd9a:	1b40      	subs	r0, r0, r5
 800bd9c:	6060      	str	r0, [r4, #4]
 800bd9e:	6863      	ldr	r3, [r4, #4]
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	2300      	movs	r3, #0
 800bda4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda8:	e7a8      	b.n	800bcfc <_printf_i+0x150>
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	462a      	mov	r2, r5
 800bdae:	4649      	mov	r1, r9
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	47d0      	blx	sl
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d0ab      	beq.n	800bd10 <_printf_i+0x164>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	079b      	lsls	r3, r3, #30
 800bdbc:	d413      	bmi.n	800bde6 <_printf_i+0x23a>
 800bdbe:	68e0      	ldr	r0, [r4, #12]
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	4298      	cmp	r0, r3
 800bdc4:	bfb8      	it	lt
 800bdc6:	4618      	movlt	r0, r3
 800bdc8:	e7a4      	b.n	800bd14 <_printf_i+0x168>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4632      	mov	r2, r6
 800bdce:	4649      	mov	r1, r9
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	47d0      	blx	sl
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d09b      	beq.n	800bd10 <_printf_i+0x164>
 800bdd8:	3501      	adds	r5, #1
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	9903      	ldr	r1, [sp, #12]
 800bdde:	1a5b      	subs	r3, r3, r1
 800bde0:	42ab      	cmp	r3, r5
 800bde2:	dcf2      	bgt.n	800bdca <_printf_i+0x21e>
 800bde4:	e7eb      	b.n	800bdbe <_printf_i+0x212>
 800bde6:	2500      	movs	r5, #0
 800bde8:	f104 0619 	add.w	r6, r4, #25
 800bdec:	e7f5      	b.n	800bdda <_printf_i+0x22e>
 800bdee:	bf00      	nop
 800bdf0:	0800d54d 	.word	0x0800d54d
 800bdf4:	0800d55e 	.word	0x0800d55e

0800bdf8 <__retarget_lock_acquire_recursive>:
 800bdf8:	4770      	bx	lr

0800bdfa <__retarget_lock_release_recursive>:
 800bdfa:	4770      	bx	lr

0800bdfc <memcpy>:
 800bdfc:	440a      	add	r2, r1
 800bdfe:	4291      	cmp	r1, r2
 800be00:	f100 33ff 	add.w	r3, r0, #4294967295
 800be04:	d100      	bne.n	800be08 <memcpy+0xc>
 800be06:	4770      	bx	lr
 800be08:	b510      	push	{r4, lr}
 800be0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be12:	4291      	cmp	r1, r2
 800be14:	d1f9      	bne.n	800be0a <memcpy+0xe>
 800be16:	bd10      	pop	{r4, pc}

0800be18 <memmove>:
 800be18:	4288      	cmp	r0, r1
 800be1a:	b510      	push	{r4, lr}
 800be1c:	eb01 0402 	add.w	r4, r1, r2
 800be20:	d902      	bls.n	800be28 <memmove+0x10>
 800be22:	4284      	cmp	r4, r0
 800be24:	4623      	mov	r3, r4
 800be26:	d807      	bhi.n	800be38 <memmove+0x20>
 800be28:	1e43      	subs	r3, r0, #1
 800be2a:	42a1      	cmp	r1, r4
 800be2c:	d008      	beq.n	800be40 <memmove+0x28>
 800be2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be36:	e7f8      	b.n	800be2a <memmove+0x12>
 800be38:	4402      	add	r2, r0
 800be3a:	4601      	mov	r1, r0
 800be3c:	428a      	cmp	r2, r1
 800be3e:	d100      	bne.n	800be42 <memmove+0x2a>
 800be40:	bd10      	pop	{r4, pc}
 800be42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be4a:	e7f7      	b.n	800be3c <memmove+0x24>

0800be4c <_realloc_r>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	4680      	mov	r8, r0
 800be52:	4614      	mov	r4, r2
 800be54:	460e      	mov	r6, r1
 800be56:	b921      	cbnz	r1, 800be62 <_realloc_r+0x16>
 800be58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	4611      	mov	r1, r2
 800be5e:	f7ff bc2b 	b.w	800b6b8 <_malloc_r>
 800be62:	b92a      	cbnz	r2, 800be70 <_realloc_r+0x24>
 800be64:	f7ff fbbc 	bl	800b5e0 <_free_r>
 800be68:	4625      	mov	r5, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be70:	f000 f81b 	bl	800beaa <_malloc_usable_size_r>
 800be74:	4284      	cmp	r4, r0
 800be76:	4607      	mov	r7, r0
 800be78:	d802      	bhi.n	800be80 <_realloc_r+0x34>
 800be7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be7e:	d812      	bhi.n	800bea6 <_realloc_r+0x5a>
 800be80:	4621      	mov	r1, r4
 800be82:	4640      	mov	r0, r8
 800be84:	f7ff fc18 	bl	800b6b8 <_malloc_r>
 800be88:	4605      	mov	r5, r0
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d0ed      	beq.n	800be6a <_realloc_r+0x1e>
 800be8e:	42bc      	cmp	r4, r7
 800be90:	4622      	mov	r2, r4
 800be92:	4631      	mov	r1, r6
 800be94:	bf28      	it	cs
 800be96:	463a      	movcs	r2, r7
 800be98:	f7ff ffb0 	bl	800bdfc <memcpy>
 800be9c:	4631      	mov	r1, r6
 800be9e:	4640      	mov	r0, r8
 800bea0:	f7ff fb9e 	bl	800b5e0 <_free_r>
 800bea4:	e7e1      	b.n	800be6a <_realloc_r+0x1e>
 800bea6:	4635      	mov	r5, r6
 800bea8:	e7df      	b.n	800be6a <_realloc_r+0x1e>

0800beaa <_malloc_usable_size_r>:
 800beaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beae:	1f18      	subs	r0, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	bfbc      	itt	lt
 800beb4:	580b      	ldrlt	r3, [r1, r0]
 800beb6:	18c0      	addlt	r0, r0, r3
 800beb8:	4770      	bx	lr
	...

0800bebc <_init>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr

0800bec8 <_fini>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr
