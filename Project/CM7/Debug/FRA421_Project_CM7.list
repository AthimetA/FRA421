
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010abc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08010d5c  08010d5c  00020d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012724  08012724  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012724  08012724  00022724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801272c  0801272c  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801272c  0801272c  0002272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012730  08012730  00022730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  080127bc  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0801281c  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  0801287c  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  0801287c  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002648a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  0005a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019f0  00000000  00000000  0005bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023b40  00000000  00000000  0009b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937d4  00000000  00000000  000bebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002523cf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076e4  00000000  00000000  00252420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010d44 	.word	0x08010d44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010d44 	.word	0x08010d44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}
	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	e00d      	b.n	80016d4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffad 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	3301      	adds	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ee      	bls.n	80016b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3308      	adds	r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001714:	6979      	ldr	r1, [r7, #20]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff83 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3310      	adds	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d9ee      	bls.n	800170c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	e00d      	b.n	8001750 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff ff6f 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9ee      	bls.n	8001734 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001776:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3368      	adds	r3, #104	; 0x68
 800177c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3368      	adds	r3, #104	; 0x68
 8001782:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
 8001788:	e010      	b.n	80017ac <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d104      	bne.n	80017a0 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	77bb      	strb	r3, [r7, #30]
			break;
 800179e:	e008      	b.n	80017b2 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	d9eb      	bls.n	800178a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d134      	bne.n	8001828 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <YUGIOH_Reborn+0xd0>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3308      	adds	r3, #8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69b8      	ldr	r0, [r7, #24]
 80017e4:	f7fe ff4e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	3301      	adds	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3368      	adds	r3, #104	; 0x68
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00c      	b.n	8001822 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f7fe ff3a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3310      	adds	r3, #16
 8001814:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b13      	cmp	r3, #19
 8001826:	ddef      	ble.n	8001808 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	aaaaaaab 	.word	0xaaaaaaab

08001834 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001842:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800184a:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	799a      	ldrb	r2, [r3, #6]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <YUGIOH_Ancient_Rules+0x54>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0899      	lsrs	r1, r3, #2
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3308      	adds	r3, #8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe ff03 	bl	8000684 <YUGIOH_card_copy>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab

0800188c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	e00c      	b.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3310      	adds	r3, #16
 80018ca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ef      	bls.n	80018b8 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e00c      	b.n	80018f8 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3310      	adds	r3, #16
 80018f0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	3301      	adds	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d9ef      	bls.n	80018de <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	889a      	ldrh	r2, [r3, #4]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	0089      	lsls	r1, r1, #2
 800190a:	440b      	add	r3, r1
 800190c:	4619      	mov	r1, r3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	809a      	strh	r2, [r3, #4]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800193c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001944:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	799a      	ldrb	r2, [r3, #6]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <YUGIOH_Stop_Defense+0x68>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	0899      	lsrs	r1, r3, #2
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <YUGIOH_Stop_Defense+0x5a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
	}

}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab

08001998 <YUGIOH_Clear_Card_In_Main_To_GY>:

void YUGIOH_Clear_Card_In_Main_To_GY(Player *player,YUGIOH_Card *card)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck = &player->cardOnBoard[0];;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
	uint8_t idx = 255;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i < 6; ++i)
 80019ac:	2300      	movs	r3, #0
 80019ae:	72bb      	strb	r3, [r7, #10]
 80019b0:	e00e      	b.n	80019d0 <YUGIOH_Clear_Card_In_Main_To_GY+0x38>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d102      	bne.n	80019c4 <YUGIOH_Clear_Card_In_Main_To_GY+0x2c>
		{
			idx = i;
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	72fb      	strb	r3, [r7, #11]
			break;
 80019c2:	e008      	b.n	80019d6 <YUGIOH_Clear_Card_In_Main_To_GY+0x3e>
		}
		ptrCardCheck++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3310      	adds	r3, #16
 80019c8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 6; ++i)
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	3301      	adds	r3, #1
 80019ce:	72bb      	strb	r3, [r7, #10]
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d9ed      	bls.n	80019b2 <YUGIOH_Clear_Card_In_Main_To_GY+0x1a>
	}

	if (idx != 255) {
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d009      	beq.n	80019f0 <YUGIOH_Clear_Card_In_Main_To_GY+0x58>

		ptrCardCheck = &player->cardOnBoard[idx];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	3308      	adds	r3, #8
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
		YUGIOH_To_GY(player, ptrCardCheck);
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe19 	bl	8001622 <YUGIOH_To_GY>
	}

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e016      	b.n	8001a3c <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10a      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7a5b      	ldrb	r3, [r3, #9]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d102      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e009      	b.n	8001a44 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3310      	adds	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	dde5      	ble.n	8001a0e <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8001a42:	23ff      	movs	r3, #255	; 0xff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e016      	b.n	8001a94 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10a      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e009      	b.n	8001a9c <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	dde5      	ble.n	8001a66 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8001a9a:	23ff      	movs	r3, #255	; 0xff
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00c      	b.n	8001ad6 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3310      	adds	r3, #16
 8001ace:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	ddef      	ble.n	8001abc <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001af8:	2303      	movs	r3, #3
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e00c      	b.n	8001b18 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	ddef      	ble.n	8001afe <YUGIOH_Monster_Activated+0x14>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MainGUI>:
void MainGUI()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <MainGUI+0x15c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	9202      	str	r2, [sp, #8]
 8001b38:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <MainGUI+0x160>)
 8001b46:	2105      	movs	r1, #5
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f005 f82a 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <MainGUI+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <MainGUI+0x164>)
 8001b62:	2114      	movs	r1, #20
 8001b64:	2005      	movs	r0, #5
 8001b66:	f005 f81c 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <MainGUI+0x15c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9202      	str	r2, [sp, #8]
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9200      	str	r2, [sp, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <MainGUI+0x168>)
 8001b7e:	2123      	movs	r1, #35	; 0x23
 8001b80:	2005      	movs	r0, #5
 8001b82:	f005 f80e 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <MainGUI+0x15c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <MainGUI+0x16c>)
 8001b9a:	2123      	movs	r1, #35	; 0x23
 8001b9c:	203c      	movs	r0, #60	; 0x3c
 8001b9e:	f004 ffb6 	bl	8006b0e <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MainGUI+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <MainGUI+0x170>)
 8001bb6:	2132      	movs	r1, #50	; 0x32
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f004 fff2 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MainGUI+0x15c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <MainGUI+0x174>)
 8001bd2:	213c      	movs	r1, #60	; 0x3c
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f004 ffe4 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MainGUI+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MainGUI+0x178>)
 8001bee:	2105      	movs	r1, #5
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f004 ff8c 	bl	8006b0e <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MainGUI+0x15c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	9202      	str	r2, [sp, #8]
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MainGUI+0x164>)
 8001c0a:	2114      	movs	r1, #20
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f004 ff7e 	bl	8006b0e <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MainGUI+0x15c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MainGUI+0x17c>)
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f004 ff70 	bl	8006b0e <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MainGUI+0x15c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MainGUI+0x16c>)
 8001c42:	2123      	movs	r1, #35	; 0x23
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f004 ffac 	bl	8006ba2 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MainGUI+0x15c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <MainGUI+0x170>)
 8001c5e:	2132      	movs	r1, #50	; 0x32
 8001c60:	2000      	movs	r0, #0
 8001c62:	f004 ff54 	bl	8006b0e <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MainGUI+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <MainGUI+0x174>)
 8001c7a:	213c      	movs	r1, #60	; 0x3c
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f004 ff46 	bl	8006b0e <ST7735_WriteString>
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	08010d5c 	.word	0x08010d5c
 8001c90:	08010d68 	.word	0x08010d68
 8001c94:	08010d78 	.word	0x08010d78
 8001c98:	08010d80 	.word	0x08010d80
 8001c9c:	08010d88 	.word	0x08010d88
 8001ca0:	08010d9c 	.word	0x08010d9c
 8001ca4:	08010db0 	.word	0x08010db0
 8001ca8:	08010dbc 	.word	0x08010dbc

08001cac <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <LCDvalue+0x134>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <LCDvalue+0x138>)
 8001cc0:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <LCDvalue+0x13c>)
 8001cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <LCDvalue+0x140>)
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f7fe fb57 	bl	8000380 <__aeabi_uldivmod>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	817b      	strh	r3, [r7, #10]
	time -= a;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <LCDvalue+0x138>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <LCDvalue+0x138>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <LCDvalue+0x138>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4940      	ldr	r1, [pc, #256]	; (8001df0 <LCDvalue+0x144>)
 8001cf0:	4840      	ldr	r0, [pc, #256]	; (8001df4 <LCDvalue+0x148>)
 8001cf2:	f00e fca9 	bl	8010648 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e012      	b.n	8001d22 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8001cfc:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <LCDvalue+0x148>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <LCDvalue+0x70>
			t_c[i] = 32;
 8001d08:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <LCDvalue+0x148>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2220      	movs	r2, #32
 8001d10:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <LCDvalue+0x148>)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dde9      	ble.n	8001cfc <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <LCDvalue+0x138>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 811d 	bne.w	8001f6c <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001d32:	4831      	ldr	r0, [pc, #196]	; (8001df8 <LCDvalue+0x14c>)
 8001d34:	f00c f8ac 	bl	800de90 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <LCDvalue+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f005 f94c 	bl	8006fdc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f005 f95a 	bl	8006ffe <ST7735_FillScreen1>
		while(time == 0){
 8001d4a:	e10a      	b.n	8001f62 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d15e      	bne.n	8001e14 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <LCDvalue+0x150>)
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	221f      	movs	r2, #31
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <LCDvalue+0x154>)
 8001d6e:	2123      	movs	r1, #35	; 0x23
 8001d70:	200f      	movs	r0, #15
 8001d72:	f004 ff60 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <LCDvalue+0x158>)
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <LCDvalue+0x15c>)
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	2005      	movs	r0, #5
 8001d94:	f004 ff4f 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <LCDvalue+0x150>)
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <LCDvalue+0x160>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	2014      	movs	r0, #20
 8001db6:	f004 ff3e 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <LCDvalue+0x158>)
 8001dc0:	9203      	str	r2, [sp, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <LCDvalue+0x164>)
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f004 ff2d 	bl	8006c36 <ST7735_WriteStringNSS>
 8001ddc:	e0c1      	b.n	8001f62 <LCDvalue+0x2b6>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000174 	.word	0x24000174
 8001de8:	24000ea0 	.word	0x24000ea0
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	08010dc4 	.word	0x08010dc4
 8001df4:	24000170 	.word	0x24000170
 8001df8:	240002e8 	.word	0x240002e8
 8001dfc:	24000014 	.word	0x24000014
 8001e00:	08010dc8 	.word	0x08010dc8
 8001e04:	2400000c 	.word	0x2400000c
 8001e08:	08010dd4 	.word	0x08010dd4
 8001e0c:	08010de8 	.word	0x08010de8
 8001e10:	08010df0 	.word	0x08010df0
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80a3 	bne.w	8001f62 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4ba1      	ldr	r3, [pc, #644]	; (80020a8 <LCDvalue+0x3fc>)
 8001e22:	9203      	str	r2, [sp, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	221f      	movs	r2, #31
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	9200      	str	r2, [sp, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a9e      	ldr	r2, [pc, #632]	; (80020ac <LCDvalue+0x400>)
 8001e34:	2119      	movs	r1, #25
 8001e36:	200f      	movs	r0, #15
 8001e38:	f004 fefd 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <LCDvalue+0x404>)
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <LCDvalue+0x408>)
 8001e56:	2132      	movs	r1, #50	; 0x32
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f004 feec 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <LCDvalue+0x3fc>)
 8001e64:	9203      	str	r2, [sp, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <LCDvalue+0x40c>)
 8001e78:	2119      	movs	r1, #25
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f004 fedb 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <LCDvalue+0x404>)
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a88      	ldr	r2, [pc, #544]	; (80020bc <LCDvalue+0x410>)
 8001e9a:	2132      	movs	r1, #50	; 0x32
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f004 feca 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <LCDvalue+0x404>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9203      	str	r2, [sp, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <LCDvalue+0x414>)
 8001eba:	2141      	movs	r1, #65	; 0x41
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f004 feba 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <LCDvalue+0x404>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <LCDvalue+0x414>)
 8001eda:	2141      	movs	r1, #65	; 0x41
 8001edc:	2000      	movs	r0, #0
 8001ede:	f004 feaa 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <LCDvalue+0x404>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	9203      	str	r2, [sp, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ef0:	9201      	str	r2, [sp, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <LCDvalue+0x418>)
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	2000      	movs	r0, #0
 8001efe:	f004 fe9a 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <LCDvalue+0x404>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	9203      	str	r2, [sp, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	9202      	str	r2, [sp, #8]
 8001f0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f10:	9201      	str	r2, [sp, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <LCDvalue+0x41c>)
 8001f1a:	2173      	movs	r1, #115	; 0x73
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f004 fe8a 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <LCDvalue+0x404>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a64      	ldr	r2, [pc, #400]	; (80020cc <LCDvalue+0x420>)
 8001f3a:	2173      	movs	r1, #115	; 0x73
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f004 fe7a 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LCDvalue+0x404>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <LCDvalue+0x424>)
 8001f5a:	215a      	movs	r1, #90	; 0x5a
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f004 fe6a 	bl	8006c36 <ST7735_WriteStringNSS>
		while(time == 0){
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <LCDvalue+0x428>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f43f aef0 	beq.w	8001d4c <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4959      	ldr	r1, [pc, #356]	; (80020d8 <LCDvalue+0x42c>)
 8001f74:	4859      	ldr	r0, [pc, #356]	; (80020dc <LCDvalue+0x430>)
 8001f76:	f00e fb67 	bl	8010648 <siprintf>
	if(C_LP_ATK[3] == 0){
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <LCDvalue+0x430>)
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <LCDvalue+0x430>)
 8001f84:	789a      	ldrb	r2, [r3, #2]
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <LCDvalue+0x430>)
 8001f88:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <LCDvalue+0x430>)
 8001f8c:	785a      	ldrb	r2, [r3, #1]
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <LCDvalue+0x430>)
 8001f90:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <LCDvalue+0x430>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <LCDvalue+0x430>)
 8001f98:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <LCDvalue+0x430>)
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <LCDvalue+0x404>)
 8001fa6:	9203      	str	r2, [sp, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <LCDvalue+0x430>)
 8001fba:	2114      	movs	r1, #20
 8001fbc:	205a      	movs	r0, #90	; 0x5a
 8001fbe:	f004 fe3a 	bl	8006c36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <LCDvalue+0x404>)
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <LCDvalue+0x434>)
 8001fdc:	2132      	movs	r1, #50	; 0x32
 8001fde:	2069      	movs	r0, #105	; 0x69
 8001fe0:	f004 fe29 	bl	8006c36 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	493b      	ldr	r1, [pc, #236]	; (80020d8 <LCDvalue+0x42c>)
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <LCDvalue+0x438>)
 8001fee:	f00e fb2b 	bl	8010648 <siprintf>
	if(C_LP_DEF[3] == 0){
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <LCDvalue+0x438>)
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <LCDvalue+0x438>)
 8001ffc:	789a      	ldrb	r2, [r3, #2]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCDvalue+0x438>)
 8002000:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <LCDvalue+0x438>)
 8002004:	785a      	ldrb	r2, [r3, #1]
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <LCDvalue+0x438>)
 8002008:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <LCDvalue+0x438>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <LCDvalue+0x438>)
 8002010:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <LCDvalue+0x438>)
 8002014:	2220      	movs	r2, #32
 8002016:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <LCDvalue+0x404>)
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <LCDvalue+0x438>)
 8002032:	2114      	movs	r1, #20
 8002034:	205a      	movs	r0, #90	; 0x5a
 8002036:	f004 fdfe 	bl	8006c36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <LCDvalue+0x404>)
 8002040:	9203      	str	r2, [sp, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <LCDvalue+0x43c>)
 8002054:	2132      	movs	r1, #50	; 0x32
 8002056:	2069      	movs	r0, #105	; 0x69
 8002058:	f004 fded 	bl	8006c36 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <LCDvalue+0x440>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <LCDvalue+0x42c>)
 8002064:	4822      	ldr	r0, [pc, #136]	; (80020f0 <LCDvalue+0x444>)
 8002066:	f00e faef 	bl	8010648 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <LCDvalue+0x404>)
 800206c:	2200      	movs	r2, #0
 800206e:	9203      	str	r2, [sp, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <LCDvalue+0x444>)
 8002082:	2123      	movs	r1, #35	; 0x23
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	f004 fdd6 	bl	8006c36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LCDvalue+0x404>)
 800208c:	2201      	movs	r2, #1
 800208e:	9203      	str	r2, [sp, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <LCDvalue+0x444>)
 80020a2:	2123      	movs	r1, #35	; 0x23
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	e025      	b.n	80020f4 <LCDvalue+0x448>
 80020a8:	24000014 	.word	0x24000014
 80020ac:	08010dc8 	.word	0x08010dc8
 80020b0:	2400000c 	.word	0x2400000c
 80020b4:	08010dd4 	.word	0x08010dd4
 80020b8:	08010de8 	.word	0x08010de8
 80020bc:	08010df0 	.word	0x08010df0
 80020c0:	08010d9c 	.word	0x08010d9c
 80020c4:	08010e04 	.word	0x08010e04
 80020c8:	08010e10 	.word	0x08010e10
 80020cc:	08010e20 	.word	0x08010e20
 80020d0:	08010e2c 	.word	0x08010e2c
 80020d4:	24000174 	.word	0x24000174
 80020d8:	08010dc4 	.word	0x08010dc4
 80020dc:	24000164 	.word	0x24000164
 80020e0:	24000170 	.word	0x24000170
 80020e4:	24000168 	.word	0x24000168
 80020e8:	08010e3c 	.word	0x08010e3c
 80020ec:	24000176 	.word	0x24000176
 80020f0:	2400016c 	.word	0x2400016c
 80020f4:	f004 fd9f 	bl	8006c36 <ST7735_WriteStringNSS>

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3304      	adds	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002122:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8002140:	2108      	movs	r1, #8
 8002142:	48ad      	ldr	r0, [pc, #692]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002144:	f008 fca6 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8002150:	2102      	movs	r1, #2
 8002152:	48aa      	ldr	r0, [pc, #680]	; (80023fc <GAME_PLAY_Management+0x2fc>)
 8002154:	f008 fc9e 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8002160:	2104      	movs	r1, #4
 8002162:	48a5      	ldr	r0, [pc, #660]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002164:	f008 fc96 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8002170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002174:	48a2      	ldr	r0, [pc, #648]	; (8002400 <GAME_PLAY_Management+0x300>)
 8002176:	f008 fc8d 	bl	800aa94 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002188:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b04      	cmp	r3, #4
 800219a:	f200 829b 	bhi.w	80026d4 <GAME_PLAY_Management+0x5d4>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <GAME_PLAY_Management+0xa4>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b9 	.word	0x080021b9
 80021a8:	08002435 	.word	0x08002435
 80021ac:	08002593 	.word	0x08002593
 80021b0:	08002611 	.word	0x08002611
 80021b4:	0800268f 	.word	0x0800268f
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8f      	ldr	r2, [pc, #572]	; (8002408 <GAME_PLAY_Management+0x308>)
 80021cc:	2105      	movs	r1, #5
 80021ce:	2005      	movs	r0, #5
 80021d0:	f004 fc9d 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a89      	ldr	r2, [pc, #548]	; (800240c <GAME_PLAY_Management+0x30c>)
 80021e8:	210f      	movs	r1, #15
 80021ea:	2000      	movs	r0, #0
 80021ec:	f004 fc8f 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <GAME_PLAY_Management+0x310>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a84      	ldr	r2, [pc, #528]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002204:	2123      	movs	r1, #35	; 0x23
 8002206:	2008      	movs	r0, #8
 8002208:	f004 fc81 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <GAME_PLAY_Management+0x310>)
 800220e:	2200      	movs	r2, #0
 8002210:	9202      	str	r2, [sp, #8]
 8002212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <GAME_PLAY_Management+0x318>)
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	2019      	movs	r0, #25
 8002224:	f004 fc73 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <GAME_PLAY_Management+0x304>)
 800222a:	2200      	movs	r2, #0
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a74      	ldr	r2, [pc, #464]	; (800240c <GAME_PLAY_Management+0x30c>)
 800223c:	214b      	movs	r1, #75	; 0x4b
 800223e:	2000      	movs	r0, #0
 8002240:	f004 fc65 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002246:	2200      	movs	r2, #0
 8002248:	9202      	str	r2, [sp, #8]
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a71      	ldr	r2, [pc, #452]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002258:	215a      	movs	r1, #90	; 0x5a
 800225a:	2000      	movs	r0, #0
 800225c:	f004 fc57 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002262:	2200      	movs	r2, #0
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002274:	215a      	movs	r1, #90	; 0x5a
 8002276:	205d      	movs	r0, #93	; 0x5d
 8002278:	f004 fc49 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <GAME_PLAY_Management+0x304>)
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <GAME_PLAY_Management+0x324>)
 8002290:	2169      	movs	r1, #105	; 0x69
 8002292:	2000      	movs	r0, #0
 8002294:	f004 fc3b 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <GAME_PLAY_Management+0x304>)
 800229a:	2200      	movs	r2, #0
 800229c:	9202      	str	r2, [sp, #8]
 800229e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <GAME_PLAY_Management+0x328>)
 80022ac:	2169      	movs	r1, #105	; 0x69
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f004 fc2d 	bl	8006b0e <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	9202      	str	r2, [sp, #8]
 80022ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a59      	ldr	r2, [pc, #356]	; (800242c <GAME_PLAY_Management+0x32c>)
 80022c8:	2105      	movs	r1, #5
 80022ca:	2005      	movs	r0, #5
 80022cc:	f004 fc69 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <GAME_PLAY_Management+0x30c>)
 80022e4:	210f      	movs	r1, #15
 80022e6:	2000      	movs	r0, #0
 80022e8:	f004 fc5b 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <GAME_PLAY_Management+0x310>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a45      	ldr	r2, [pc, #276]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002300:	2123      	movs	r1, #35	; 0x23
 8002302:	2008      	movs	r0, #8
 8002304:	f004 fc4d 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <GAME_PLAY_Management+0x310>)
 800230a:	2200      	movs	r2, #0
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <GAME_PLAY_Management+0x318>)
 800231c:	213c      	movs	r1, #60	; 0x3c
 800231e:	2014      	movs	r0, #20
 8002320:	f004 fc3f 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002326:	2200      	movs	r2, #0
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <GAME_PLAY_Management+0x30c>)
 8002338:	214b      	movs	r1, #75	; 0x4b
 800233a:	2000      	movs	r0, #0
 800233c:	f004 fc31 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002342:	2200      	movs	r2, #0
 8002344:	9202      	str	r2, [sp, #8]
 8002346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002354:	215a      	movs	r1, #90	; 0x5a
 8002356:	2000      	movs	r0, #0
 8002358:	f004 fc23 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <GAME_PLAY_Management+0x304>)
 800235e:	2200      	movs	r2, #0
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002370:	215a      	movs	r1, #90	; 0x5a
 8002372:	205d      	movs	r0, #93	; 0x5d
 8002374:	f004 fc15 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <GAME_PLAY_Management+0x304>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <GAME_PLAY_Management+0x324>)
 800238c:	2169      	movs	r1, #105	; 0x69
 800238e:	2000      	movs	r0, #0
 8002390:	f004 fc07 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <GAME_PLAY_Management+0x328>)
 80023a8:	2169      	movs	r1, #105	; 0x69
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f004 fbf9 	bl	8006ba2 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80023b0:	2108      	movs	r1, #8
 80023b2:	481f      	ldr	r0, [pc, #124]	; (8002430 <GAME_PLAY_Management+0x330>)
 80023b4:	f008 fb6e 	bl	800aa94 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80023be:	2000      	movs	r0, #0
 80023c0:	f004 fe0c 	bl	8006fdc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f004 fe1a 	bl	8006ffe <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80023d2:	e17f      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
			state_game->PlyerAction_State = PS_AFK;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80023f4:	e16e      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
 80023f6:	bf00      	nop
 80023f8:	58020800 	.word	0x58020800
 80023fc:	58020400 	.word	0x58020400
 8002400:	58021400 	.word	0x58021400
 8002404:	2400000c 	.word	0x2400000c
 8002408:	08010db0 	.word	0x08010db0
 800240c:	08010d9c 	.word	0x08010d9c
 8002410:	24000014 	.word	0x24000014
 8002414:	08010e40 	.word	0x08010e40
 8002418:	08010e4c 	.word	0x08010e4c
 800241c:	08010e54 	.word	0x08010e54
 8002420:	08010e64 	.word	0x08010e64
 8002424:	08010e6c 	.word	0x08010e6c
 8002428:	08010e3c 	.word	0x08010e3c
 800242c:	08010d5c 	.word	0x08010d5c
 8002430:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002434:	4ba9      	ldr	r3, [pc, #676]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4aa6      	ldr	r2, [pc, #664]	; (80026e0 <GAME_PLAY_Management+0x5e0>)
 8002448:	2105      	movs	r1, #5
 800244a:	2005      	movs	r0, #5
 800244c:	f004 fb5f 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002450:	4ba2      	ldr	r3, [pc, #648]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002452:	2200      	movs	r2, #0
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4aa0      	ldr	r2, [pc, #640]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002464:	210f      	movs	r1, #15
 8002466:	2000      	movs	r0, #0
 8002468:	f004 fb51 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800246c:	4b9e      	ldr	r3, [pc, #632]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a9b      	ldr	r2, [pc, #620]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002480:	2123      	movs	r1, #35	; 0x23
 8002482:	2019      	movs	r0, #25
 8002484:	f004 fb43 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002488:	4b97      	ldr	r3, [pc, #604]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800248a:	2200      	movs	r2, #0
 800248c:	9202      	str	r2, [sp, #8]
 800248e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002492:	9201      	str	r2, [sp, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a95      	ldr	r2, [pc, #596]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	2021      	movs	r0, #33	; 0x21
 80024a0:	f004 fb35 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024a4:	4b8d      	ldr	r3, [pc, #564]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	9202      	str	r2, [sp, #8]
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8b      	ldr	r2, [pc, #556]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024b8:	214b      	movs	r1, #75	; 0x4b
 80024ba:	2000      	movs	r0, #0
 80024bc:	f004 fb27 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c0:	4b86      	ldr	r3, [pc, #536]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a88      	ldr	r2, [pc, #544]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 80024d4:	2105      	movs	r1, #5
 80024d6:	2005      	movs	r0, #5
 80024d8:	f004 fb63 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024dc:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024f0:	210f      	movs	r1, #15
 80024f2:	2000      	movs	r0, #0
 80024f4:	f004 fb55 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80024f8:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a78      	ldr	r2, [pc, #480]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 800250c:	2123      	movs	r1, #35	; 0x23
 800250e:	2019      	movs	r0, #25
 8002510:	f004 fb47 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 8002516:	2200      	movs	r2, #0
 8002518:	9202      	str	r2, [sp, #8]
 800251a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <GAME_PLAY_Management+0x5f8>)
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	2025      	movs	r0, #37	; 0x25
 800252c:	f004 fb39 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002532:	2200      	movs	r2, #0
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002544:	214b      	movs	r1, #75	; 0x4b
 8002546:	2000      	movs	r0, #0
 8002548:	f004 fb2b 	bl	8006ba2 <ST7735_WriteString1>
		HAL_Delay(1500);
 800254c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002550:	f005 f952 	bl	80077f8 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8002554:	2000      	movs	r0, #0
 8002556:	f004 fd41 	bl	8006fdc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 800255a:	2000      	movs	r0, #0
 800255c:	f004 fd4f 	bl	8006ffe <ST7735_FillScreen1>
		MainGUI();
 8002560:	f7ff fae4 	bl	8001b2c <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800256a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002572:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8002574:	69f8      	ldr	r0, [r7, #28]
 8002576:	f7fe ff83 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7fe ff80 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8002590:	e0a0      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case first_player:
		if (state_game -> F_flag == 0){
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12b      	bne.n	80025f4 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800259c:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	9202      	str	r2, [sp, #8]
 80025a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025a6:	9201      	str	r2, [sp, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	9200      	str	r2, [sp, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 80025b0:	215a      	movs	r1, #90	; 0x5a
 80025b2:	200f      	movs	r0, #15
 80025b4:	f004 faf5 	bl	8006ba2 <ST7735_WriteString1>
			HAL_Delay(1500);
 80025b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025bc:	f005 f91c 	bl	80077f8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 80025c0:	2300      	movs	r3, #0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2326      	movs	r3, #38	; 0x26
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	215a      	movs	r1, #90	; 0x5a
 80025ca:	2000      	movs	r0, #0
 80025cc:	f004 fc08 	bl	8006de0 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <GAME_PLAY_Management+0x600>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <GAME_PLAY_Management+0x600>)
 80025f2:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002600:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f87d 	bl	8002708 <GAME_PLAY_Phase_Management>
		break;
 800260e:	e061      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case second_player:
		if (state_game -> S_flag == 0){
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12b      	bne.n	8002672 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800261c:	2200      	movs	r2, #0
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 800262e:	215a      	movs	r1, #90	; 0x5a
 8002630:	200f      	movs	r0, #15
 8002632:	f004 fa6c 	bl	8006b0e <ST7735_WriteString>
			HAL_Delay(1500);
 8002636:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800263a:	f005 f8dd 	bl	80077f8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2326      	movs	r3, #38	; 0x26
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	215a      	movs	r1, #90	; 0x5a
 8002648:	2000      	movs	r0, #0
 800264a:	f004 fb55 	bl	8006cf8 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002670:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002678:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f83e 	bl	8002708 <GAME_PLAY_Phase_Management>
		break;
 800268c:	e022      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case Game_Ended:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800268e:	2108      	movs	r1, #8
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <GAME_PLAY_Management+0x604>)
 8002692:	f008 f9ff 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <GAME_PLAY_Management+0x5b2>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800269c:	2000      	movs	r0, #0
 800269e:	f004 fc9d 	bl	8006fdc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f004 fcab 	bl	8006ffe <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80026b0:	e00f      	b.n	80026d2 <GAME_PLAY_Management+0x5d2>
			state_game->PlyerAction_State = PS_AFK;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80026d2:	bf00      	nop
	}
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2400000c 	.word	0x2400000c
 80026e0:	08010db0 	.word	0x08010db0
 80026e4:	08010d9c 	.word	0x08010d9c
 80026e8:	24000014 	.word	0x24000014
 80026ec:	08010e7c 	.word	0x08010e7c
 80026f0:	08010e84 	.word	0x08010e84
 80026f4:	08010d5c 	.word	0x08010d5c
 80026f8:	08010e8c 	.word	0x08010e8c
 80026fc:	08010e94 	.word	0x08010e94
 8002700:	24000176 	.word	0x24000176
 8002704:	58020000 	.word	0x58020000

08002708 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800270e:	af04      	add	r7, sp, #16
 8002710:	f507 7418 	add.w	r4, r7, #608	; 0x260
 8002714:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8002718:	6020      	str	r0, [r4, #0]
 800271a:	f507 7018 	add.w	r0, r7, #608	; 0x260
 800271e:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8002722:	6001      	str	r1, [r0, #0]
 8002724:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002728:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 800272c:	600a      	str	r2, [r1, #0]
 800272e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002732:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002736:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8002738:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800273c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8002746:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 800274a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800274e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8002758:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800275c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002760:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800276a:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 800276e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002772:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002776:	4618      	mov	r0, r3
 8002778:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800277c:	461a      	mov	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	f00d fe6a 	bl	8010458 <memset>

	switch (PAS) {
 8002784:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002788:	2b03      	cmp	r3, #3
 800278a:	f203 8379 	bhi.w	8005e80 <GAME_PLAY_Phase_Management+0x3778>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <GAME_PLAY_Phase_Management+0x8c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	08005e73 	.word	0x08005e73
 8002798:	080027a5 	.word	0x080027a5
 800279c:	080028fd 	.word	0x080028fd
 80027a0:	0800499b 	.word	0x0800499b
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80027a4:	48b5      	ldr	r0, [pc, #724]	; (8002a7c <GAME_PLAY_Phase_Management+0x374>)
 80027a6:	f00b fafb 	bl	800dda0 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80027aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ae:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80027b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	f7ff fa75 	bl	8001cac <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027c2:	4baf      	ldr	r3, [pc, #700]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027cc:	9201      	str	r2, [sp, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4aab      	ldr	r2, [pc, #684]	; (8002a84 <GAME_PLAY_Phase_Management+0x37c>)
 80027d6:	2123      	movs	r1, #35	; 0x23
 80027d8:	206e      	movs	r0, #110	; 0x6e
 80027da:	f004 f998 	bl	8006b0e <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027de:	4ba8      	ldr	r3, [pc, #672]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	9202      	str	r2, [sp, #8]
 80027e4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027e8:	9201      	str	r2, [sp, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4aa4      	ldr	r2, [pc, #656]	; (8002a84 <GAME_PLAY_Phase_Management+0x37c>)
 80027f2:	2123      	movs	r1, #35	; 0x23
 80027f4:	206e      	movs	r0, #110	; 0x6e
 80027f6:	f004 f9d4 	bl	8006ba2 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80027fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	4b9e      	ldr	r3, [pc, #632]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002808:	9203      	str	r2, [sp, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	9202      	str	r2, [sp, #8]
 800280e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	9200      	str	r2, [sp, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a9b      	ldr	r2, [pc, #620]	; (8002a88 <GAME_PLAY_Phase_Management+0x380>)
 800281c:	215a      	movs	r1, #90	; 0x5a
 800281e:	2005      	movs	r0, #5
 8002820:	f004 fa09 	bl	8006c36 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002824:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002828:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b93      	ldr	r3, [pc, #588]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002832:	9203      	str	r2, [sp, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	9202      	str	r2, [sp, #8]
 8002838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283c:	9201      	str	r2, [sp, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a91      	ldr	r2, [pc, #580]	; (8002a8c <GAME_PLAY_Phase_Management+0x384>)
 8002846:	215a      	movs	r1, #90	; 0x5a
 8002848:	2005      	movs	r0, #5
 800284a:	f004 f9f4 	bl	8006c36 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800284e:	2101      	movs	r1, #1
 8002850:	488f      	ldr	r0, [pc, #572]	; (8002a90 <GAME_PLAY_Phase_Management+0x388>)
 8002852:	f008 f91f 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f043 830c 	bne.w	8005e76 <GAME_PLAY_Phase_Management+0x376e>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800285e:	2000      	movs	r0, #0
 8002860:	f004 fbbc 	bl	8006fdc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8002864:	2000      	movs	r0, #0
 8002866:	f004 fbca 	bl	8006ffe <ST7735_FillScreen1>
			MainGUI();
 800286a:	f7ff f95f 	bl	8001b2c <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 800286e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002872:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800287e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002882:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 800288e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002892:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800289c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a0:	f004 ffaa 	bl	80077f8 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80028a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80028b2:	9203      	str	r2, [sp, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	9202      	str	r2, [sp, #8]
 80028b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	9200      	str	r2, [sp, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a70      	ldr	r2, [pc, #448]	; (8002a88 <GAME_PLAY_Phase_Management+0x380>)
 80028c6:	215a      	movs	r1, #90	; 0x5a
 80028c8:	2005      	movs	r0, #5
 80028ca:	f004 f9b4 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80028ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80028dc:	9203      	str	r2, [sp, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	9202      	str	r2, [sp, #8]
 80028e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e6:	9201      	str	r2, [sp, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	9200      	str	r2, [sp, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <GAME_PLAY_Phase_Management+0x38c>)
 80028f0:	215a      	movs	r1, #90	; 0x5a
 80028f2:	2005      	movs	r0, #5
 80028f4:	f004 f99f 	bl	8006c36 <ST7735_WriteStringNSS>
		}
		break;
 80028f8:	f003 babd 	b.w	8005e76 <GAME_PLAY_Phase_Management+0x376e>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 80028fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002900:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002908:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800290c:	6811      	ldr	r1, [r2, #0]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f7ff f9cc 	bl	8001cac <LCDvalue>

		switch (PMS)
 8002914:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8002918:	2b07      	cmp	r3, #7
 800291a:	f203 82ae 	bhi.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <GAME_PLAY_Phase_Management+0x21c>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08004971 	.word	0x08004971
 8002928:	08002945 	.word	0x08002945
 800292c:	08002af9 	.word	0x08002af9
 8002930:	08002c63 	.word	0x08002c63
 8002934:	080031e9 	.word	0x080031e9
 8002938:	080038fd 	.word	0x080038fd
 800293c:	080036ed 	.word	0x080036ed
 8002940:	080034cd 	.word	0x080034cd
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8002944:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002948:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 80a7 	bne.w	8002aa4 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002958:	2200      	movs	r2, #0
 800295a:	9202      	str	r2, [sp, #8]
 800295c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <GAME_PLAY_Phase_Management+0x390>)
 800296a:	2123      	movs	r1, #35	; 0x23
 800296c:	206e      	movs	r0, #110	; 0x6e
 800296e:	f004 f8ce 	bl	8006b0e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002974:	2200      	movs	r2, #0
 8002976:	9202      	str	r2, [sp, #8]
 8002978:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800297c:	9201      	str	r2, [sp, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <GAME_PLAY_Phase_Management+0x390>)
 8002986:	2123      	movs	r1, #35	; 0x23
 8002988:	206e      	movs	r0, #110	; 0x6e
 800298a:	f004 f90a 	bl	8006ba2 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800298e:	2101      	movs	r1, #1
 8002990:	483f      	ldr	r0, [pc, #252]	; (8002a90 <GAME_PLAY_Phase_Management+0x388>)
 8002992:	f008 f87f 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d15b      	bne.n	8002a54 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800299c:	2000      	movs	r0, #0
 800299e:	f004 fb1d 	bl	8006fdc <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f004 fb2b 	bl	8006ffe <ST7735_FillScreen1>
					MainGUI();
 80029a8:	f7ff f8c0 	bl	8001b2c <MainGUI>
					state_game->action = 50;
 80029ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 80029ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 80029ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f7ff f889 	bl	8001aea <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 80029d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80029e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 80029f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029fc:	f004 fefc 	bl	80077f8 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8002a00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a04:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002a0e:	9203      	str	r2, [sp, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	9202      	str	r2, [sp, #8]
 8002a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a18:	9201      	str	r2, [sp, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <GAME_PLAY_Phase_Management+0x394>)
 8002a22:	215a      	movs	r1, #90	; 0x5a
 8002a24:	2005      	movs	r0, #5
 8002a26:	f004 f906 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002a2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002a38:	9203      	str	r2, [sp, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	9202      	str	r2, [sp, #8]
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	9200      	str	r2, [sp, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <GAME_PLAY_Phase_Management+0x398>)
 8002a4c:	215a      	movs	r1, #90	; 0x5a
 8002a4e:	2005      	movs	r0, #5
 8002a50:	f004 f8f1 	bl	8006c36 <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002a54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a58:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002a5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a60:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a68:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6809      	ldr	r1, [r1, #0]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	f7fd fe6f 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002a76:	f001 bf7e 	b.w	8004976 <GAME_PLAY_Phase_Management+0x226e>
 8002a7a:	bf00      	nop
 8002a7c:	240002e8 	.word	0x240002e8
 8002a80:	2400000c 	.word	0x2400000c
 8002a84:	08010ea0 	.word	0x08010ea0
 8002a88:	08010ea4 	.word	0x08010ea4
 8002a8c:	08010eb4 	.word	0x08010eb4
 8002a90:	58020800 	.word	0x58020800
 8002a94:	08010ec0 	.word	0x08010ec0
 8002a98:	08010ed0 	.word	0x08010ed0
 8002a9c:	08010ed4 	.word	0x08010ed4
 8002aa0:	08010ee4 	.word	0x08010ee4
			else if (state_game->action == 1)
 8002aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aa8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f041 8760 	bne.w	8004976 <GAME_PLAY_Phase_Management+0x226e>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002ab6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2326      	movs	r3, #38	; 0x26
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	215a      	movs	r1, #90	; 0x5a
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f004 f9fa 	bl	8006ec8 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8002ad4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ad8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8002ae4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ae8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002af4:	f001 bf3f 	b.w	8004976 <GAME_PLAY_Phase_Management+0x226e>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002af8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002afc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4ba6      	ldr	r3, [pc, #664]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	9202      	str	r2, [sp, #8]
 8002b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b10:	9201      	str	r2, [sp, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4aa2      	ldr	r2, [pc, #648]	; (8002da4 <GAME_PLAY_Phase_Management+0x69c>)
 8002b1a:	215a      	movs	r1, #90	; 0x5a
 8002b1c:	2005      	movs	r0, #5
 8002b1e:	f004 f88a 	bl	8006c36 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b30:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002b34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b42:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002b46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d147      	bne.n	8002be6 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8002b66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002b6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002b7c:	f001 befe 	b.w	800497c <GAME_PLAY_Phase_Management+0x2274>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8002b80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f041 86f5 	bne.w	800497c <GAME_PLAY_Phase_Management+0x2274>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8002b92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b9a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f7fe ff56 	bl	8001a50 <YUGIOH_Check_Spell_On_board>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002baa:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d00c      	beq.n	8002bcc <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8002bb2:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002bb6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002bba:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fd93 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8002bcc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002bd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
			break;
 8002be2:	f001 becb 	b.w	800497c <GAME_PLAY_Phase_Management+0x2274>
			else if (state_game->action == 2)
 8002be6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	f041 86c2 	bne.w	800497c <GAME_PLAY_Phase_Management+0x2274>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002bf8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bfc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2326      	movs	r3, #38	; 0x26
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	215a      	movs	r1, #90	; 0x5a
 8002c10:	2000      	movs	r0, #0
 8002c12:	f004 f959 	bl	8006ec8 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002c16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c1a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2326      	movs	r3, #38	; 0x26
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	215a      	movs	r1, #90	; 0x5a
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f004 f94a 	bl	8006ec8 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002c34:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002c38:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002c3c:	f7fd fd22 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8002c40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8002c4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002c5e:	f001 be8d 	b.w	800497c <GAME_PLAY_Phase_Management+0x2274>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c70:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	f041 867e 	bne.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002c86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	f040 8093 	bne.w	8002db8 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002ca0:	9203      	str	r2, [sp, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	9202      	str	r2, [sp, #8]
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	9200      	str	r2, [sp, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <GAME_PLAY_Phase_Management+0x6a0>)
 8002cb4:	215a      	movs	r1, #90	; 0x5a
 8002cb6:	2005      	movs	r0, #5
 8002cb8:	f003 ffbd 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002cbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a33      	ldr	r2, [pc, #204]	; (8002dac <GAME_PLAY_Phase_Management+0x6a4>)
 8002cde:	215a      	movs	r1, #90	; 0x5a
 8002ce0:	2005      	movs	r0, #5
 8002ce2:	f003 ffa8 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002ce6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002cf4:	9203      	str	r2, [sp, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	9202      	str	r2, [sp, #8]
 8002cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <GAME_PLAY_Phase_Management+0x6a8>)
 8002d08:	2169      	movs	r1, #105	; 0x69
 8002d0a:	2005      	movs	r0, #5
 8002d0c:	f003 ff93 	bl	8006c36 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002d10:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d14:	2200      	movs	r2, #0
 8002d16:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002d18:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d1c:	799a      	ldrb	r2, [r3, #6]
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <GAME_PLAY_Phase_Management+0x6ac>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	0899      	lsrs	r1, r3, #2
 8002d26:	460b      	mov	r3, r1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002d34:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002d38:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002d3c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	3308      	adds	r3, #8
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002d4c:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002d50:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d54:	f7fd fc96 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002d58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f7fe fb67 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002d66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d74:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fc83 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002d7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002d8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002d9c:	f001 bdf1 	b.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
 8002da0:	2400000c 	.word	0x2400000c
 8002da4:	08010ef4 	.word	0x08010ef4
 8002da8:	08010f04 	.word	0x08010f04
 8002dac:	08010f14 	.word	0x08010f14
 8002db0:	08010f24 	.word	0x08010f24
 8002db4:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8002db8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 8146 	bne.w	8003050 <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 8002dc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8002dd2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 80a7 	bne.w	8002f2c <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002dde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002de2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4b92      	ldr	r3, [pc, #584]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	9202      	str	r2, [sp, #8]
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	9201      	str	r2, [sp, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	9200      	str	r2, [sp, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a8e      	ldr	r2, [pc, #568]	; (8003038 <GAME_PLAY_Phase_Management+0x930>)
 8002e00:	215a      	movs	r1, #90	; 0x5a
 8002e02:	2005      	movs	r0, #5
 8002e04:	f003 ff17 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002e16:	9203      	str	r2, [sp, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e20:	9201      	str	r2, [sp, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	9200      	str	r2, [sp, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a84      	ldr	r2, [pc, #528]	; (800303c <GAME_PLAY_Phase_Management+0x934>)
 8002e2a:	215a      	movs	r1, #90	; 0x5a
 8002e2c:	2005      	movs	r0, #5
 8002e2e:	f003 ff02 	bl	8006c36 <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002e32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002e40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	f7fe fb9e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002e4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002e62:	f7fd fc0f 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002e66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e74:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002e7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e8c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002eb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2326      	movs	r3, #38	; 0x26
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	215a      	movs	r1, #90	; 0x5a
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f003 fffa 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002ed4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2326      	movs	r3, #38	; 0x26
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	215a      	movs	r1, #90	; 0x5a
 8002eec:	2000      	movs	r0, #0
 8002eee:	f003 ffeb 	bl	8006ec8 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002ef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ef6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	f7fe fa9a 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002f00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f0e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fbb6 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8002f18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2207      	movs	r2, #7
 8002f24:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002f28:	f001 bd2b 	b.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f3a:	9203      	str	r2, [sp, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <GAME_PLAY_Phase_Management+0x938>)
 8002f4e:	215a      	movs	r1, #90	; 0x5a
 8002f50:	2005      	movs	r0, #5
 8002f52:	f003 fe70 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f64:	9203      	str	r2, [sp, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	9202      	str	r2, [sp, #8]
 8002f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <GAME_PLAY_Phase_Management+0x93c>)
 8002f78:	215a      	movs	r1, #90	; 0x5a
 8002f7a:	2005      	movs	r0, #5
 8002f7c:	f003 fe5b 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f8e:	9203      	str	r2, [sp, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	9200      	str	r2, [sp, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <GAME_PLAY_Phase_Management+0x940>)
 8002fa2:	2169      	movs	r1, #105	; 0x69
 8002fa4:	2005      	movs	r0, #5
 8002fa6:	f003 fe46 	bl	8006c36 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002faa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fae:	799a      	ldrb	r2, [r3, #6]
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <GAME_PLAY_Phase_Management+0x944>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	0899      	lsrs	r1, r3, #2
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002fc6:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8002fca:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fce:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002fde:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002fe2:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002fe6:	f7fd fb4d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002fea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	f7fe fa1e 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002ff8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ffc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003006:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fb3a 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8003010:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003014:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800301e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003022:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800302e:	f001 bca8 	b.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
 8003032:	bf00      	nop
 8003034:	2400000c 	.word	0x2400000c
 8003038:	08010f2c 	.word	0x08010f2c
 800303c:	08010f44 	.word	0x08010f44
 8003040:	08010f04 	.word	0x08010f04
 8003044:	08010f14 	.word	0x08010f14
 8003048:	08010f24 	.word	0x08010f24
 800304c:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8003050:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b01      	cmp	r3, #1
 8003058:	f041 8493 	bne.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
					state_game->test = 2;
 800305c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003060:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 800306c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	2b06      	cmp	r3, #6
 8003074:	f200 80a0 	bhi.w	80031b8 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003078:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800307c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b8b      	ldr	r3, [pc, #556]	; (80032b4 <GAME_PLAY_Phase_Management+0xbac>)
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <GAME_PLAY_Phase_Management+0xbb0>)
 800309a:	215a      	movs	r1, #90	; 0x5a
 800309c:	2005      	movs	r0, #5
 800309e:	f003 fdca 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80030a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	4b81      	ldr	r3, [pc, #516]	; (80032b4 <GAME_PLAY_Phase_Management+0xbac>)
 80030b0:	9203      	str	r2, [sp, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	9202      	str	r2, [sp, #8]
 80030b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <GAME_PLAY_Phase_Management+0xbb4>)
 80030c4:	2169      	movs	r1, #105	; 0x69
 80030c6:	2005      	movs	r0, #5
 80030c8:	f003 fdb5 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <GAME_PLAY_Phase_Management+0xbac>)
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a74      	ldr	r2, [pc, #464]	; (80032c0 <GAME_PLAY_Phase_Management+0xbb8>)
 80030ee:	215a      	movs	r1, #90	; 0x5a
 80030f0:	2005      	movs	r0, #5
 80030f2:	f003 fda0 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80030f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <GAME_PLAY_Phase_Management+0xbac>)
 8003104:	9203      	str	r2, [sp, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	9202      	str	r2, [sp, #8]
 800310a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800310e:	9201      	str	r2, [sp, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	9200      	str	r2, [sp, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a69      	ldr	r2, [pc, #420]	; (80032bc <GAME_PLAY_Phase_Management+0xbb4>)
 8003118:	2169      	movs	r1, #105	; 0x69
 800311a:	2005      	movs	r0, #5
 800311c:	f003 fd8b 	bl	8006c36 <ST7735_WriteStringNSS>
						state_game->test = 1;
 8003120:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003124:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8003130:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003134:	799a      	ldrb	r2, [r3, #6]
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <GAME_PLAY_Phase_Management+0xbbc>)
 8003138:	fba3 1302 	umull	r1, r3, r3, r2
 800313c:	0899      	lsrs	r1, r3, #2
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800314c:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 8003150:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003154:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	3308      	adds	r3, #8
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4413      	add	r3, r2
 8003160:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003164:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003168:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800316c:	f7fd fa8a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003174:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	f7fe f95b 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800317e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003182:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800318c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fa77 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8003196:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800319a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80031a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80031b4:	f001 bbe5 	b.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80031b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f7fe f937 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80031c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80031d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80031e4:	f001 bbcd 	b.w	8004982 <GAME_PLAY_Phase_Management+0x227a>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80031e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 80031fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	789b      	ldrb	r3, [r3, #2]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11f      	bne.n	800324a <GAME_PLAY_Phase_Management+0xb42>
			{
				state_game->action = 0;
 800320a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800320e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003218:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800321c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003228:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800322c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f7fe f8ff 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 8003236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800323a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fa54 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 800324a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800324e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d111      	bne.n	800327e <GAME_PLAY_Phase_Management+0xb76>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800325a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800325e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003262:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003266:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800326a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800326e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	6809      	ldr	r1, [r1, #0]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	f7fd fb7c 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 800327c:	e0d0      	b.n	8003420 <GAME_PLAY_Phase_Management+0xd18>
			}
			else if (state_game->action == 5)
 800327e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003282:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d11c      	bne.n	80032c8 <GAME_PLAY_Phase_Management+0xbc0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800328e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003292:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003296:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800329a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800329e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	6809      	ldr	r1, [r1, #0]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	f7fd fb62 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 80032b0:	e0b6      	b.n	8003420 <GAME_PLAY_Phase_Management+0xd18>
 80032b2:	bf00      	nop
 80032b4:	2400000c 	.word	0x2400000c
 80032b8:	08010f58 	.word	0x08010f58
 80032bc:	08010f64 	.word	0x08010f64
 80032c0:	08010f70 	.word	0x08010f70
 80032c4:	aaaaaaab 	.word	0xaaaaaaab
			}
			else if (state_game->action == 6)
 80032c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	f040 80a3 	bne.w	8003420 <GAME_PLAY_Phase_Management+0xd18>
			{
				uint8_t monsterflag = 0 ;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 80032e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032ee:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80032f2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80032f6:	78db      	ldrb	r3, [r3, #3]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d804      	bhi.n	8003306 <GAME_PLAY_Phase_Management+0xbfe>
				{
					monsterflag += 1;
 80032fc:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8003300:	3301      	adds	r3, #1
 8003302:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 8003306:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800330a:	3310      	adds	r3, #16
 800330c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8003310:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003314:	78db      	ldrb	r3, [r3, #3]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d804      	bhi.n	8003324 <GAME_PLAY_Phase_Management+0xc1c>
				{
					monsterflag += 1;
 800331a:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800331e:	3301      	adds	r3, #1
 8003320:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 8003324:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8003328:	2b02      	cmp	r3, #2
 800332a:	d160      	bne.n	80033ee <GAME_PLAY_Phase_Management+0xce6>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800332c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003330:	799a      	ldrb	r2, [r3, #6]
 8003332:	4b9c      	ldr	r3, [pc, #624]	; (80035a4 <GAME_PLAY_Phase_Management+0xe9c>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	0899      	lsrs	r1, r3, #2
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003348:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 800334c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003350:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3308      	adds	r3, #8
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	4413      	add	r3, r2
 800335c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003360:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003364:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8003368:	f7fd f98c 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 800336c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003370:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800337a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800337e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003382:	4611      	mov	r1, r2
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	f7fe f94c 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 800338a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800338e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003398:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800339c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033a0:	4611      	mov	r1, r2
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f7fe f93d 	bl	8001622 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80033a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f7fe f83f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80033b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033ba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80033c4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f95b 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80033ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80033dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80033ec:	e018      	b.n	8003420 <GAME_PLAY_Phase_Management+0xd18>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80033ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7fe f81c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 80033fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003400:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800340a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800340e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7fd f932 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003420:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003424:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 800342e:	9203      	str	r2, [sp, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	9202      	str	r2, [sp, #8]
 8003434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003438:	9201      	str	r2, [sp, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	9200      	str	r2, [sp, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5a      	ldr	r2, [pc, #360]	; (80035ac <GAME_PLAY_Phase_Management+0xea4>)
 8003442:	215a      	movs	r1, #90	; 0x5a
 8003444:	2005      	movs	r0, #5
 8003446:	f003 fbf6 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800344a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800344e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	9202      	str	r2, [sp, #8]
 800345e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003462:	9201      	str	r2, [sp, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	9200      	str	r2, [sp, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a51      	ldr	r2, [pc, #324]	; (80035b0 <GAME_PLAY_Phase_Management+0xea8>)
 800346c:	2169      	movs	r1, #105	; 0x69
 800346e:	2005      	movs	r0, #5
 8003470:	f003 fbe1 	bl	8006c36 <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003474:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003478:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 8003482:	9203      	str	r2, [sp, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	9202      	str	r2, [sp, #8]
 8003488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a47      	ldr	r2, [pc, #284]	; (80035b4 <GAME_PLAY_Phase_Management+0xeac>)
 8003496:	215a      	movs	r1, #90	; 0x5a
 8003498:	2005      	movs	r0, #5
 800349a:	f003 fbcc 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800349e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034a2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 80034ac:	9203      	str	r2, [sp, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80034b6:	9201      	str	r2, [sp, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <GAME_PLAY_Phase_Management+0xea8>)
 80034c0:	2169      	movs	r1, #105	; 0x69
 80034c2:	2005      	movs	r0, #5
 80034c4:	f003 fbb7 	bl	8006c36 <ST7735_WriteStringNSS>
			break;
 80034c8:	f001 ba65 	b.w	8004996 <GAME_PLAY_Phase_Management+0x228e>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80034cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 80034da:	9203      	str	r2, [sp, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	9202      	str	r2, [sp, #8]
 80034e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e4:	9201      	str	r2, [sp, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a32      	ldr	r2, [pc, #200]	; (80035b8 <GAME_PLAY_Phase_Management+0xeb0>)
 80034ee:	215a      	movs	r1, #90	; 0x5a
 80034f0:	2005      	movs	r0, #5
 80034f2:	f003 fba0 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80034f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <GAME_PLAY_Phase_Management+0xea0>)
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	9202      	str	r2, [sp, #8]
 800350a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350e:	9201      	str	r2, [sp, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	9200      	str	r2, [sp, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a29      	ldr	r2, [pc, #164]	; (80035bc <GAME_PLAY_Phase_Management+0xeb4>)
 8003518:	215a      	movs	r1, #90	; 0x5a
 800351a:	2005      	movs	r0, #5
 800351c:	f003 fb8b 	bl	8006c36 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8003520:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003524:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d147      	bne.n	80035c0 <GAME_PLAY_Phase_Management+0xeb8>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8003530:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003534:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	789b      	ldrb	r3, [r3, #2]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11d      	bne.n	800357c <GAME_PLAY_Phase_Management+0xe74>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003540:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003544:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2326      	movs	r3, #38	; 0x26
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	215a      	movs	r1, #90	; 0x5a
 8003558:	2000      	movs	r0, #0
 800355a:	f003 fcb5 	bl	8006ec8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 800355e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003562:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2205      	movs	r2, #5
 800356a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800356e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003572:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800357c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003580:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003584:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003588:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800358c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003590:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6809      	ldr	r1, [r1, #0]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	f7fd fb57 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800359e:	f001 b9f3 	b.w	8004988 <GAME_PLAY_Phase_Management+0x2280>
 80035a2:	bf00      	nop
 80035a4:	aaaaaaab 	.word	0xaaaaaaab
 80035a8:	2400000c 	.word	0x2400000c
 80035ac:	08010f58 	.word	0x08010f58
 80035b0:	08010f64 	.word	0x08010f64
 80035b4:	08010f70 	.word	0x08010f70
 80035b8:	08010f80 	.word	0x08010f80
 80035bc:	08010f98 	.word	0x08010f98
			else if ((state_game->action == 5 )){
 80035c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	f041 81db 	bne.w	8004988 <GAME_PLAY_Phase_Management+0x2280>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80035d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2326      	movs	r3, #38	; 0x26
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	215a      	movs	r1, #90	; 0x5a
 80035ea:	2000      	movs	r0, #0
 80035ec:	f003 fc6c 	bl	8006ec8 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80035f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035f4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80035fe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8003602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003606:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800360a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f7fe f9f2 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 800361a:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800361e:	2bff      	cmp	r3, #255	; 0xff
 8003620:	d05b      	beq.n	80036da <GAME_PLAY_Phase_Management+0xfd2>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003622:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003626:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	f7fd ffad 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8003630:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8003634:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003638:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	3308      	adds	r3, #8
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	4413      	add	r3, r2
 8003644:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003648:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800364c:	2200      	movs	r2, #0
 800364e:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003650:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003654:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800365e:	4619      	mov	r1, r3
 8003660:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003664:	f7fd f80e 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8003668:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800366c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003676:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8003680:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003684:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800368e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003698:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800369c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80036b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2206      	movs	r2, #6
 80036c4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80036c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	701a      	strb	r2, [r3, #0]
			break;
 80036d6:	f001 b957 	b.w	8004988 <GAME_PLAY_Phase_Management+0x2280>
					state_game->action = 4;
 80036da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2204      	movs	r2, #4
 80036e6:	701a      	strb	r2, [r3, #0]
			break;
 80036e8:	f001 b94e 	b.w	8004988 <GAME_PLAY_Phase_Management+0x2280>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80036ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	4b7d      	ldr	r3, [pc, #500]	; (80038f0 <GAME_PLAY_Phase_Management+0x11e8>)
 80036fa:	9203      	str	r2, [sp, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003704:	9201      	str	r2, [sp, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	9200      	str	r2, [sp, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a79      	ldr	r2, [pc, #484]	; (80038f4 <GAME_PLAY_Phase_Management+0x11ec>)
 800370e:	215a      	movs	r1, #90	; 0x5a
 8003710:	2005      	movs	r0, #5
 8003712:	f003 fa90 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003716:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800371a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <GAME_PLAY_Phase_Management+0x11e8>)
 8003724:	9203      	str	r2, [sp, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	9202      	str	r2, [sp, #8]
 800372a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372e:	9201      	str	r2, [sp, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	9200      	str	r2, [sp, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a70      	ldr	r2, [pc, #448]	; (80038f8 <GAME_PLAY_Phase_Management+0x11f0>)
 8003738:	215a      	movs	r1, #90	; 0x5a
 800373a:	2005      	movs	r0, #5
 800373c:	f003 fa7b 	bl	8006c36 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8003740:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003744:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d147      	bne.n	80037e0 <GAME_PLAY_Phase_Management+0x10d8>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8003750:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003754:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	789b      	ldrb	r3, [r3, #2]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d12c      	bne.n	80037ba <GAME_PLAY_Phase_Management+0x10b2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003760:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003764:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2300      	movs	r3, #0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2326      	movs	r3, #38	; 0x26
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	215a      	movs	r1, #90	; 0x5a
 8003778:	2000      	movs	r0, #0
 800377a:	f003 fba5 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800377e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003782:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2326      	movs	r3, #38	; 0x26
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	215a      	movs	r1, #90	; 0x5a
 8003796:	2000      	movs	r0, #0
 8003798:	f003 fb96 	bl	8006ec8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 800379c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80037ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 80037ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037be:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80037c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037c6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80037ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037ce:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	6809      	ldr	r1, [r1, #0]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	f7fd fa38 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 80037dc:	f001 b8d7 	b.w	800498e <GAME_PLAY_Phase_Management+0x2286>
			else if ((state_game->action == 5 )){
 80037e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	f041 80ce 	bne.w	800498e <GAME_PLAY_Phase_Management+0x2286>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80037f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003800:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8003804:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003808:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800380c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f7fe f8f1 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 800381c:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003820:	2bff      	cmp	r3, #255	; 0xff
 8003822:	d05b      	beq.n	80038dc <GAME_PLAY_Phase_Management+0x11d4>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003824:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003828:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	f7fd feac 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003832:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003836:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800383a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	3308      	adds	r3, #8
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800384a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800384e:	2200      	movs	r2, #0
 8003850:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003852:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003856:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003860:	4619      	mov	r1, r3
 8003862:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003866:	f7fc ff0d 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 800386a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800386e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003878:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8003882:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003886:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003890:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 800389a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800389e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80038a8:	3301      	adds	r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80038ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2206      	movs	r2, #6
 80038c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80038ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2204      	movs	r2, #4
 80038d6:	701a      	strb	r2, [r3, #0]
			break;
 80038d8:	f001 b859 	b.w	800498e <GAME_PLAY_Phase_Management+0x2286>
					state_game->action = 4;
 80038dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2204      	movs	r2, #4
 80038e8:	701a      	strb	r2, [r3, #0]
			break;
 80038ea:	f001 b850 	b.w	800498e <GAME_PLAY_Phase_Management+0x2286>
 80038ee:	bf00      	nop
 80038f0:	2400000c 	.word	0x2400000c
 80038f4:	08010f98 	.word	0x08010f98
 80038f8:	08010f80 	.word	0x08010f80
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80038fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003900:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	9202      	str	r2, [sp, #8]
 8003910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003914:	9201      	str	r2, [sp, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	9200      	str	r2, [sp, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a96      	ldr	r2, [pc, #600]	; (8003b78 <GAME_PLAY_Phase_Management+0x1470>)
 800391e:	215a      	movs	r1, #90	; 0x5a
 8003920:	2005      	movs	r0, #5
 8003922:	f003 f988 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8003926:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800392a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	4b90      	ldr	r3, [pc, #576]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003934:	9203      	str	r2, [sp, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	9202      	str	r2, [sp, #8]
 800393a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800393e:	9201      	str	r2, [sp, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	9200      	str	r2, [sp, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a8d      	ldr	r2, [pc, #564]	; (8003b7c <GAME_PLAY_Phase_Management+0x1474>)
 8003948:	2169      	movs	r1, #105	; 0x69
 800394a:	2005      	movs	r0, #5
 800394c:	f003 f973 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003950:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003954:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	4b85      	ldr	r3, [pc, #532]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 800395e:	9203      	str	r2, [sp, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	9202      	str	r2, [sp, #8]
 8003964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	9200      	str	r2, [sp, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a83      	ldr	r2, [pc, #524]	; (8003b80 <GAME_PLAY_Phase_Management+0x1478>)
 8003972:	215a      	movs	r1, #90	; 0x5a
 8003974:	2005      	movs	r0, #5
 8003976:	f003 f95e 	bl	8006c36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800397a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800397e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003988:	9203      	str	r2, [sp, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	9202      	str	r2, [sp, #8]
 800398e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003992:	9201      	str	r2, [sp, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	9200      	str	r2, [sp, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a78      	ldr	r2, [pc, #480]	; (8003b7c <GAME_PLAY_Phase_Management+0x1474>)
 800399c:	2169      	movs	r1, #105	; 0x69
 800399e:	2005      	movs	r0, #5
 80039a0:	f003 f949 	bl	8006c36 <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 80039a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	4619      	mov	r1, r3
 80039b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039b6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80039ba:	f501 7394 	add.w	r3, r1, #296	; 0x128
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80039ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	4619      	mov	r1, r3
 80039d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039dc:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80039e0:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 80039f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	f040 82cd 	bne.w	8003f9c <GAME_PLAY_Phase_Management+0x1894>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8003a02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	785a      	ldrb	r2, [r3, #1]
 8003a0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f080 825d 	bcs.w	8003edc <GAME_PLAY_Phase_Management+0x17d4>
				{
					state_game->test = 165;
 8003a22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	22a5      	movs	r2, #165	; 0xa5
 8003a2e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003a32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a44:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003a48:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	3304      	adds	r3, #4
 8003a54:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8003a58:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b0b      	cmp	r3, #11
 8003a60:	f040 8096 	bne.w	8003b90 <GAME_PLAY_Phase_Management+0x1488>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003a64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fe1a 	bl	80016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003a70:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd ff8c 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
//						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
						state_game->count_chain++;
 8003a80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a84:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003aa6:	9203      	str	r2, [sp, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	9202      	str	r2, [sp, #8]
 8003aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab0:	9201      	str	r2, [sp, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <GAME_PLAY_Phase_Management+0x147c>)
 8003aba:	215a      	movs	r1, #90	; 0x5a
 8003abc:	2005      	movs	r0, #5
 8003abe:	f003 f8ba 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003ac2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003acc:	9203      	str	r2, [sp, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	9202      	str	r2, [sp, #8]
 8003ad2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ad6:	9201      	str	r2, [sp, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	9200      	str	r2, [sp, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <GAME_PLAY_Phase_Management+0x1480>)
 8003ae0:	2169      	movs	r1, #105	; 0x69
 8003ae2:	2005      	movs	r0, #5
 8003ae4:	f003 f8a7 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ae8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afc:	9201      	str	r2, [sp, #4]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <GAME_PLAY_Phase_Management+0x1484>)
 8003b06:	215a      	movs	r1, #90	; 0x5a
 8003b08:	2005      	movs	r0, #5
 8003b0a:	f003 f894 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b0e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <GAME_PLAY_Phase_Management+0x146c>)
 8003b18:	9203      	str	r2, [sp, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	9202      	str	r2, [sp, #8]
 8003b1e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	9200      	str	r2, [sp, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <GAME_PLAY_Phase_Management+0x1474>)
 8003b2c:	2169      	movs	r1, #105	; 0x69
 8003b2e:	2005      	movs	r0, #5
 8003b30:	f003 f881 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b38:	f003 fe5e 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b3c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2326      	movs	r3, #38	; 0x26
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	215a      	movs	r1, #90	; 0x5a
 8003b50:	2000      	movs	r0, #0
 8003b52:	f003 f9b9 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b56:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2326      	movs	r3, #38	; 0x26
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	215a      	movs	r1, #90	; 0x5a
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f003 f9ac 	bl	8006ec8 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 8003b70:	f000 bf10 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
 8003b74:	2400000c 	.word	0x2400000c
 8003b78:	08010fb4 	.word	0x08010fb4
 8003b7c:	08010fc4 	.word	0x08010fc4
 8003b80:	08010fd4 	.word	0x08010fd4
 8003b84:	08010fe8 	.word	0x08010fe8
 8003b88:	08010ff8 	.word	0x08010ff8
 8003b8c:	08011000 	.word	0x08011000
					else if (ptrYugiohCard_src->cardSignature == 12)
 8003b90:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	f040 808c 	bne.w	8003cb4 <GAME_PLAY_Phase_Management+0x15ac>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8003b9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f7fd fd9a 	bl	80016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003bb0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd feec 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8003bc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bc4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bd4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003bdc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	4bb5      	ldr	r3, [pc, #724]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003be6:	9203      	str	r2, [sp, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	9202      	str	r2, [sp, #8]
 8003bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf0:	9201      	str	r2, [sp, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	9200      	str	r2, [sp, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4ab1      	ldr	r2, [pc, #708]	; (8003ec0 <GAME_PLAY_Phase_Management+0x17b8>)
 8003bfa:	215a      	movs	r1, #90	; 0x5a
 8003bfc:	2005      	movs	r0, #5
 8003bfe:	f003 f81a 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003c02:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	4bac      	ldr	r3, [pc, #688]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003c0c:	9203      	str	r2, [sp, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	9202      	str	r2, [sp, #8]
 8003c12:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003c16:	9201      	str	r2, [sp, #4]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	9200      	str	r2, [sp, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4aa9      	ldr	r2, [pc, #676]	; (8003ec4 <GAME_PLAY_Phase_Management+0x17bc>)
 8003c20:	2169      	movs	r1, #105	; 0x69
 8003c22:	2005      	movs	r0, #5
 8003c24:	f003 f807 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003c28:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4ba2      	ldr	r3, [pc, #648]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003c32:	9203      	str	r2, [sp, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	9202      	str	r2, [sp, #8]
 8003c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4aa0      	ldr	r2, [pc, #640]	; (8003ec8 <GAME_PLAY_Phase_Management+0x17c0>)
 8003c46:	215a      	movs	r1, #90	; 0x5a
 8003c48:	2005      	movs	r0, #5
 8003c4a:	f002 fff4 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003c4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	4b99      	ldr	r3, [pc, #612]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003c58:	9203      	str	r2, [sp, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	9202      	str	r2, [sp, #8]
 8003c5e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a98      	ldr	r2, [pc, #608]	; (8003ecc <GAME_PLAY_Phase_Management+0x17c4>)
 8003c6c:	2169      	movs	r1, #105	; 0x69
 8003c6e:	2005      	movs	r0, #5
 8003c70:	f002 ffe1 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c78:	f003 fdbe 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003c7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2326      	movs	r3, #38	; 0x26
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	215a      	movs	r1, #90	; 0x5a
 8003c90:	2000      	movs	r0, #0
 8003c92:	f003 f919 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003c96:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2326      	movs	r3, #38	; 0x26
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	215a      	movs	r1, #90	; 0x5a
 8003caa:	2000      	movs	r0, #0
 8003cac:	f003 f90c 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 8003cb0:	f000 be70 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8003cb4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b0d      	cmp	r3, #13
 8003cbc:	d110      	bne.n	8003ce0 <GAME_PLAY_Phase_Management+0x15d8>
						state_game->test = 166;
 8003cbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cc2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	22a6      	movs	r2, #166	; 0xa6
 8003cca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2205      	movs	r2, #5
 8003cda:	701a      	strb	r2, [r3, #0]
			break;
 8003cdc:	f000 be5a 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8003ce0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b0e      	cmp	r3, #14
 8003ce8:	d005      	beq.n	8003cf6 <GAME_PLAY_Phase_Management+0x15ee>
 8003cea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	f040 8094 	bne.w	8003e1e <GAME_PLAY_Phase_Management+0x1716>
						state_game->test = 133;
 8003cf6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cfa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2285      	movs	r2, #133	; 0x85
 8003d02:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8003d06:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fd fdb9 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003d1a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fe37 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8003d2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d2e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	3301      	adds	r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d46:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003d50:	9203      	str	r2, [sp, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5a:	9201      	str	r2, [sp, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	9200      	str	r2, [sp, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a5b      	ldr	r2, [pc, #364]	; (8003ed0 <GAME_PLAY_Phase_Management+0x17c8>)
 8003d64:	215a      	movs	r1, #90	; 0x5a
 8003d66:	2005      	movs	r0, #5
 8003d68:	f002 ff65 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003d76:	9203      	str	r2, [sp, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9202      	str	r2, [sp, #8]
 8003d7c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003d80:	9201      	str	r2, [sp, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	9200      	str	r2, [sp, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <GAME_PLAY_Phase_Management+0x17cc>)
 8003d8a:	2169      	movs	r1, #105	; 0x69
 8003d8c:	2005      	movs	r0, #5
 8003d8e:	f002 ff52 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d92:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003d9c:	9203      	str	r2, [sp, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	9202      	str	r2, [sp, #8]
 8003da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da6:	9201      	str	r2, [sp, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <GAME_PLAY_Phase_Management+0x17c0>)
 8003db0:	215a      	movs	r1, #90	; 0x5a
 8003db2:	2005      	movs	r0, #5
 8003db4:	f002 ff3f 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003db8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <GAME_PLAY_Phase_Management+0x17b4>)
 8003dc2:	9203      	str	r2, [sp, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	9202      	str	r2, [sp, #8]
 8003dc8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003dcc:	9201      	str	r2, [sp, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	9200      	str	r2, [sp, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <GAME_PLAY_Phase_Management+0x17d0>)
 8003dd6:	2169      	movs	r1, #105	; 0x69
 8003dd8:	2005      	movs	r0, #5
 8003dda:	f002 ff2c 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de2:	f003 fd09 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003de6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2326      	movs	r3, #38	; 0x26
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	215a      	movs	r1, #90	; 0x5a
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f003 f864 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e00:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2326      	movs	r3, #38	; 0x26
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	215a      	movs	r1, #90	; 0x5a
 8003e14:	2000      	movs	r0, #0
 8003e16:	f003 f857 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 8003e1a:	f000 bdbb 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8003e1e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d110      	bne.n	8003e4a <GAME_PLAY_Phase_Management+0x1742>
						state_game->test = 124;
 8003e28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e2c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	227c      	movs	r2, #124	; 0x7c
 8003e34:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003e38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2205      	movs	r2, #5
 8003e44:	701a      	strb	r2, [r3, #0]
			break;
 8003e46:	f000 bda5 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8003e4a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b11      	cmp	r3, #17
 8003e52:	d108      	bne.n	8003e66 <GAME_PLAY_Phase_Management+0x175e>
						state_game->action = 5;
 8003e54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e58:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2205      	movs	r2, #5
 8003e60:	701a      	strb	r2, [r3, #0]
			break;
 8003e62:	f000 bd97 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8003e66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b12      	cmp	r3, #18
 8003e6e:	d005      	beq.n	8003e7c <GAME_PLAY_Phase_Management+0x1774>
 8003e70:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b13      	cmp	r3, #19
 8003e78:	f040 858c 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8003e7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 8585 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003e8a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fbc4 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003eae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	705a      	strb	r2, [r3, #1]
			break;
 8003eb6:	f000 bd6d 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
 8003eba:	bf00      	nop
 8003ebc:	2400000c 	.word	0x2400000c
 8003ec0:	08010fe8 	.word	0x08010fe8
 8003ec4:	08011010 	.word	0x08011010
 8003ec8:	08011000 	.word	0x08011000
 8003ecc:	08010fc4 	.word	0x08010fc4
 8003ed0:	0801101c 	.word	0x0801101c
 8003ed4:	0801102c 	.word	0x0801102c
 8003ed8:	0801103c 	.word	0x0801103c
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003edc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ee0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2326      	movs	r3, #38	; 0x26
 8003ef0:	2280      	movs	r2, #128	; 0x80
 8003ef2:	215a      	movs	r1, #90	; 0x5a
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f002 ffe7 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003efa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003efe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2326      	movs	r3, #38	; 0x26
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	215a      	movs	r1, #90	; 0x5a
 8003f12:	2000      	movs	r0, #0
 8003f14:	f002 ffd8 	bl	8006ec8 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003f1e:	e020      	b.n	8003f62 <GAME_PLAY_Phase_Management+0x185a>
						state_game->ptrChainUser[i] = &dummyPlayer;
 8003f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	f107 0210 	add.w	r2, r7, #16
 8003f3a:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8003f3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f40:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f4a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	f107 0210 	add.w	r2, r7, #16
 8003f56:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003f58:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003f62:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	ddda      	ble.n	8003f20 <GAME_PLAY_Phase_Management+0x1818>
					state_game->ChainCount = 0;
 8003f6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 8003f7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003f88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003f98:	f000 bcfc 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
			else if (state_game->action == 5)
 8003f9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fa0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	f040 80c1 	bne.w	8004130 <GAME_PLAY_Phase_Management+0x1a28>
				state_game->test = 167;
 8003fae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fb2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	22a7      	movs	r2, #167	; 0xa7
 8003fba:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003fbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fc2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fd0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003fd4:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8003fe4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	789b      	ldrb	r3, [r3, #2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d123      	bne.n	8004038 <GAME_PLAY_Phase_Management+0x1930>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8003ff0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fa1c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 8003ffc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fb73 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 800400c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004010:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2204      	movs	r2, #4
 8004018:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800401a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800401e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800402e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	705a      	strb	r2, [r3, #1]
 8004036:	e028      	b.n	800408a <GAME_PLAY_Phase_Management+0x1982>
				else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004038:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d122      	bne.n	800408a <GAME_PLAY_Phase_Management+0x1982>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8004044:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd f9f2 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 8004050:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fb49 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 8004060:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004064:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2204      	movs	r2, #4
 800406c:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800406e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004072:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	3301      	adds	r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004082:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 800408a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b0d      	cmp	r3, #13
 8004092:	d110      	bne.n	80040b6 <GAME_PLAY_Phase_Management+0x19ae>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8004094:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800409e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80040a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040a6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	f7fc ff2b 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 80040b2:	f000 bc6f 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80040b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d110      	bne.n	80040e2 <GAME_PLAY_Phase_Management+0x19da>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 80040c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ca:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80040ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040d2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80040d6:	6809      	ldr	r1, [r1, #0]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f7fc ffc3 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 80040de:	f000 bc59 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
				else if (ptrYugiohCard_src->cardSignature == 17)
 80040e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b11      	cmp	r3, #17
 80040ea:	d110      	bne.n	800410e <GAME_PLAY_Phase_Management+0x1a06>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 80040ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040f6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80040fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040fe:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004102:	6809      	ldr	r1, [r1, #0]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f7fc fe55 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 800410a:	f000 bc43 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 800410e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004118:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800411c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004120:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004124:	6809      	ldr	r1, [r1, #0]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	f7fc fb14 	bl	8000754 <Player_Reading_Card>
			break;
 800412c:	f000 bc32 	b.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
			else if (state_game->action == 6)
 8004130:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004134:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b06      	cmp	r3, #6
 800413e:	f040 8429 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
				state_game->test = 169;
 8004142:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004146:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	22a9      	movs	r2, #169	; 0xa9
 800414e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8004152:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004156:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	4619      	mov	r1, r3
 8004160:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004164:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004168:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 8004178:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b0d      	cmp	r3, #13
 8004180:	f040 819d 	bne.w	80044be <GAME_PLAY_Phase_Management+0x1db6>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004184:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	4b66      	ldr	r3, [pc, #408]	; (8004328 <GAME_PLAY_Phase_Management+0x1c20>)
 800418e:	9203      	str	r2, [sp, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	9202      	str	r2, [sp, #8]
 8004194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004198:	9201      	str	r2, [sp, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	9200      	str	r2, [sp, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a62      	ldr	r2, [pc, #392]	; (800432c <GAME_PLAY_Phase_Management+0x1c24>)
 80041a2:	215a      	movs	r1, #90	; 0x5a
 80041a4:	2005      	movs	r0, #5
 80041a6:	f002 fd46 	bl	8006c36 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80041aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	789b      	ldrb	r3, [r3, #2]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 80c4 	bne.w	8004340 <GAME_PLAY_Phase_Management+0x1c38>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80041b8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2326      	movs	r3, #38	; 0x26
 80041c8:	2280      	movs	r2, #128	; 0x80
 80041ca:	215a      	movs	r1, #90	; 0x5a
 80041cc:	2000      	movs	r0, #0
 80041ce:	f002 fe7b 	bl	8006ec8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80041d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	22aa      	movs	r2, #170	; 0xaa
 80041de:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80041e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80041ec:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80041f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041f4:	2200      	movs	r2, #0
 80041f6:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80041f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004202:	4619      	mov	r1, r3
 8004204:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004208:	f7fc fa3c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 800420c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd faa4 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 8004218:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800421c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2204      	movs	r2, #4
 8004224:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004226:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fbb1 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800423a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	3301      	adds	r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800424a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004252:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	4b33      	ldr	r3, [pc, #204]	; (8004328 <GAME_PLAY_Phase_Management+0x1c20>)
 800425c:	9203      	str	r2, [sp, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	9202      	str	r2, [sp, #8]
 8004262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a30      	ldr	r2, [pc, #192]	; (8004330 <GAME_PLAY_Phase_Management+0x1c28>)
 8004270:	215a      	movs	r1, #90	; 0x5a
 8004272:	2005      	movs	r0, #5
 8004274:	f002 fcdf 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004278:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <GAME_PLAY_Phase_Management+0x1c20>)
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800428c:	9201      	str	r2, [sp, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <GAME_PLAY_Phase_Management+0x1c2c>)
 8004296:	2169      	movs	r1, #105	; 0x69
 8004298:	2005      	movs	r0, #5
 800429a:	f002 fccc 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800429e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <GAME_PLAY_Phase_Management+0x1c20>)
 80042a8:	9203      	str	r2, [sp, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	9202      	str	r2, [sp, #8]
 80042ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b2:	9201      	str	r2, [sp, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <GAME_PLAY_Phase_Management+0x1c30>)
 80042bc:	215a      	movs	r1, #90	; 0x5a
 80042be:	2005      	movs	r0, #5
 80042c0:	f002 fcb9 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	4b16      	ldr	r3, [pc, #88]	; (8004328 <GAME_PLAY_Phase_Management+0x1c20>)
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	9202      	str	r2, [sp, #8]
 80042d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	9200      	str	r2, [sp, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <GAME_PLAY_Phase_Management+0x1c34>)
 80042e2:	2169      	movs	r1, #105	; 0x69
 80042e4:	2005      	movs	r0, #5
 80042e6:	f002 fca6 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80042ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ee:	f003 fa83 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80042f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2326      	movs	r3, #38	; 0x26
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	215a      	movs	r1, #90	; 0x5a
 8004306:	2000      	movs	r0, #0
 8004308:	f002 fdde 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800430c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2326      	movs	r3, #38	; 0x26
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	215a      	movs	r1, #90	; 0x5a
 8004320:	2000      	movs	r0, #0
 8004322:	f002 fdd1 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 8004326:	e335      	b.n	8004994 <GAME_PLAY_Phase_Management+0x228c>
 8004328:	2400000c 	.word	0x2400000c
 800432c:	08010ef4 	.word	0x08010ef4
 8004330:	08010fe8 	.word	0x08010fe8
 8004334:	08011048 	.word	0x08011048
 8004338:	08011000 	.word	0x08011000
 800433c:	08010fc4 	.word	0x08010fc4
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004340:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8323 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800434e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2300      	movs	r3, #0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2326      	movs	r3, #38	; 0x26
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	215a      	movs	r1, #90	; 0x5a
 8004362:	2000      	movs	r0, #0
 8004364:	f002 fdb0 	bl	8006ec8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004368:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800436c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	22ab      	movs	r2, #171	; 0xab
 8004374:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004378:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004382:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004386:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800438a:	2201      	movs	r2, #1
 800438c:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800438e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004398:	4619      	mov	r1, r3
 800439a:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800439e:	f7fc f971 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80043a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd f9d9 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 80043ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 80043bc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fae6 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80043cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	3301      	adds	r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80043e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 80043f2:	9203      	str	r2, [sp, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	9202      	str	r2, [sp, #8]
 80043f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fc:	9201      	str	r2, [sp, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	9200      	str	r2, [sp, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4aa1      	ldr	r2, [pc, #644]	; (800468c <GAME_PLAY_Phase_Management+0x1f84>)
 8004406:	215a      	movs	r1, #90	; 0x5a
 8004408:	2005      	movs	r0, #5
 800440a:	f002 fc14 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800440e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4b9c      	ldr	r3, [pc, #624]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 8004418:	9203      	str	r2, [sp, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	9202      	str	r2, [sp, #8]
 800441e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004422:	9201      	str	r2, [sp, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a99      	ldr	r2, [pc, #612]	; (8004690 <GAME_PLAY_Phase_Management+0x1f88>)
 800442c:	2169      	movs	r1, #105	; 0x69
 800442e:	2005      	movs	r0, #5
 8004430:	f002 fc01 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004434:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	781a      	ldrb	r2, [r3, #0]
 800443c:	4b92      	ldr	r3, [pc, #584]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	9202      	str	r2, [sp, #8]
 8004444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004448:	9201      	str	r2, [sp, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	9200      	str	r2, [sp, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a90      	ldr	r2, [pc, #576]	; (8004694 <GAME_PLAY_Phase_Management+0x1f8c>)
 8004452:	215a      	movs	r1, #90	; 0x5a
 8004454:	2005      	movs	r0, #5
 8004456:	f002 fbee 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800445a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 8004464:	9203      	str	r2, [sp, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	9202      	str	r2, [sp, #8]
 800446a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800446e:	9201      	str	r2, [sp, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	9200      	str	r2, [sp, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a88      	ldr	r2, [pc, #544]	; (8004698 <GAME_PLAY_Phase_Management+0x1f90>)
 8004478:	2169      	movs	r1, #105	; 0x69
 800447a:	2005      	movs	r0, #5
 800447c:	f002 fbdb 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004484:	f003 f9b8 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004488:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2326      	movs	r3, #38	; 0x26
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	215a      	movs	r1, #90	; 0x5a
 800449c:	2000      	movs	r0, #0
 800449e:	f002 fd13 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80044a2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2326      	movs	r3, #38	; 0x26
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	215a      	movs	r1, #90	; 0x5a
 80044b6:	2000      	movs	r0, #0
 80044b8:	f002 fd06 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 80044bc:	e26a      	b.n	8004994 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80044be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	f040 81aa 	bne.w	800481e <GAME_PLAY_Phase_Management+0x2116>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80044ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2326      	movs	r3, #38	; 0x26
 80044da:	2280      	movs	r2, #128	; 0x80
 80044dc:	215a      	movs	r1, #90	; 0x5a
 80044de:	2000      	movs	r0, #0
 80044e0:	f002 fcf2 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80044e4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	4b66      	ldr	r3, [pc, #408]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 80044ee:	9203      	str	r2, [sp, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	9202      	str	r2, [sp, #8]
 80044f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f8:	9201      	str	r2, [sp, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	9200      	str	r2, [sp, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a66      	ldr	r2, [pc, #408]	; (800469c <GAME_PLAY_Phase_Management+0x1f94>)
 8004502:	215a      	movs	r1, #90	; 0x5a
 8004504:	2005      	movs	r0, #5
 8004506:	f002 fb96 	bl	8006c36 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800450a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	789b      	ldrb	r3, [r3, #2]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 80c4 	bne.w	80046a0 <GAME_PLAY_Phase_Management+0x1f98>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004518:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2326      	movs	r3, #38	; 0x26
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	215a      	movs	r1, #90	; 0x5a
 800452c:	2000      	movs	r0, #0
 800452e:	f002 fccb 	bl	8006ec8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8004532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004536:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	22aa      	movs	r2, #170	; 0xaa
 800453e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004542:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800454c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8004550:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004554:	2200      	movs	r2, #0
 8004556:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004558:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004562:	4619      	mov	r1, r3
 8004564:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004568:	f7fc f88c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 800456c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd f95e 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004578:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800457c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2204      	movs	r2, #4
 8004584:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004586:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fa01 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004596:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800459a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80045b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 80045bc:	9203      	str	r2, [sp, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	9202      	str	r2, [sp, #8]
 80045c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c6:	9201      	str	r2, [sp, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	9200      	str	r2, [sp, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2f      	ldr	r2, [pc, #188]	; (800468c <GAME_PLAY_Phase_Management+0x1f84>)
 80045d0:	215a      	movs	r1, #90	; 0x5a
 80045d2:	2005      	movs	r0, #5
 80045d4:	f002 fb2f 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80045d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 80045e2:	9203      	str	r2, [sp, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	9202      	str	r2, [sp, #8]
 80045e8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045ec:	9201      	str	r2, [sp, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	9200      	str	r2, [sp, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <GAME_PLAY_Phase_Management+0x1f88>)
 80045f6:	2169      	movs	r1, #105	; 0x69
 80045f8:	2005      	movs	r0, #5
 80045fa:	f002 fb1c 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80045fe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 8004608:	9203      	str	r2, [sp, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	9202      	str	r2, [sp, #8]
 800460e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	9200      	str	r2, [sp, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <GAME_PLAY_Phase_Management+0x1f8c>)
 800461c:	215a      	movs	r1, #90	; 0x5a
 800461e:	2005      	movs	r0, #5
 8004620:	f002 fb09 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004624:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <GAME_PLAY_Phase_Management+0x1f80>)
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	9202      	str	r2, [sp, #8]
 8004634:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004638:	9201      	str	r2, [sp, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	9200      	str	r2, [sp, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <GAME_PLAY_Phase_Management+0x1f90>)
 8004642:	2169      	movs	r1, #105	; 0x69
 8004644:	2005      	movs	r0, #5
 8004646:	f002 faf6 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800464a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800464e:	f003 f8d3 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004652:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2300      	movs	r3, #0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2326      	movs	r3, #38	; 0x26
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	215a      	movs	r1, #90	; 0x5a
 8004666:	2000      	movs	r0, #0
 8004668:	f002 fc2e 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800466c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2326      	movs	r3, #38	; 0x26
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	215a      	movs	r1, #90	; 0x5a
 8004680:	2000      	movs	r0, #0
 8004682:	f002 fc21 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 8004686:	e185      	b.n	8004994 <GAME_PLAY_Phase_Management+0x228c>
 8004688:	2400000c 	.word	0x2400000c
 800468c:	08010fe8 	.word	0x08010fe8
 8004690:	08011048 	.word	0x08011048
 8004694:	08011000 	.word	0x08011000
 8004698:	08010fc4 	.word	0x08010fc4
 800469c:	08010ef4 	.word	0x08010ef4
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80046a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 8173 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80046ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2326      	movs	r3, #38	; 0x26
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	215a      	movs	r1, #90	; 0x5a
 80046c2:	2000      	movs	r0, #0
 80046c4:	f002 fc00 	bl	8006ec8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80046c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	22ab      	movs	r2, #171	; 0xab
 80046d4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80046d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80046e2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 80046e6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80046ea:	2201      	movs	r2, #1
 80046ec:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80046ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046f8:	4619      	mov	r1, r3
 80046fa:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80046fe:	f7fb ffc1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004702:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd f893 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 800470e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004712:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2204      	movs	r2, #4
 800471a:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800471c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd f936 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 800472c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004730:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	3301      	adds	r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004740:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004748:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	4ba3      	ldr	r3, [pc, #652]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 8004752:	9203      	str	r2, [sp, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475c:	9201      	str	r2, [sp, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	9200      	str	r2, [sp, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a9f      	ldr	r2, [pc, #636]	; (80049e4 <GAME_PLAY_Phase_Management+0x22dc>)
 8004766:	215a      	movs	r1, #90	; 0x5a
 8004768:	2005      	movs	r0, #5
 800476a:	f002 fa64 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800476e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	4b9a      	ldr	r3, [pc, #616]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 8004778:	9203      	str	r2, [sp, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	9202      	str	r2, [sp, #8]
 800477e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004782:	9201      	str	r2, [sp, #4]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	9200      	str	r2, [sp, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a97      	ldr	r2, [pc, #604]	; (80049e8 <GAME_PLAY_Phase_Management+0x22e0>)
 800478c:	2169      	movs	r1, #105	; 0x69
 800478e:	2005      	movs	r0, #5
 8004790:	f002 fa51 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004794:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	4b90      	ldr	r3, [pc, #576]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 800479e:	9203      	str	r2, [sp, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	9202      	str	r2, [sp, #8]
 80047a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	9200      	str	r2, [sp, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a8e      	ldr	r2, [pc, #568]	; (80049ec <GAME_PLAY_Phase_Management+0x22e4>)
 80047b2:	215a      	movs	r1, #90	; 0x5a
 80047b4:	2005      	movs	r0, #5
 80047b6:	f002 fa3e 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047ba:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 80047c4:	9203      	str	r2, [sp, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	9202      	str	r2, [sp, #8]
 80047ca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80047ce:	9201      	str	r2, [sp, #4]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	9200      	str	r2, [sp, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a86      	ldr	r2, [pc, #536]	; (80049f0 <GAME_PLAY_Phase_Management+0x22e8>)
 80047d8:	2169      	movs	r1, #105	; 0x69
 80047da:	2005      	movs	r0, #5
 80047dc:	f002 fa2b 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80047e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047e4:	f003 f808 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80047e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2326      	movs	r3, #38	; 0x26
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	215a      	movs	r1, #90	; 0x5a
 80047fc:	2000      	movs	r0, #0
 80047fe:	f002 fb63 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004802:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	2300      	movs	r3, #0
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2326      	movs	r3, #38	; 0x26
 8004812:	2280      	movs	r2, #128	; 0x80
 8004814:	215a      	movs	r1, #90	; 0x5a
 8004816:	2000      	movs	r0, #0
 8004818:	f002 fb56 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 800481c:	e0ba      	b.n	8004994 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 17){
 800481e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b11      	cmp	r3, #17
 8004826:	f040 80b5 	bne.w	8004994 <GAME_PLAY_Phase_Management+0x228c>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 800482a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004834:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8004838:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004842:	4619      	mov	r1, r3
 8004844:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004848:	f7fb ff1c 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 800484c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fd f866 	bl	800192c <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8004860:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004864:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2204      	movs	r2, #4
 800486c:	701a      	strb	r2, [r3, #0]
					YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800486e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd f88d 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
					state_game->count_chain++;
 800487e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004882:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	3301      	adds	r3, #1
 800488c:	b2da      	uxtb	r2, r3
 800488e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004892:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800489a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 80048a4:	9203      	str	r2, [sp, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	9202      	str	r2, [sp, #8]
 80048aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ae:	9201      	str	r2, [sp, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	9200      	str	r2, [sp, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4b      	ldr	r2, [pc, #300]	; (80049e4 <GAME_PLAY_Phase_Management+0x22dc>)
 80048b8:	215a      	movs	r1, #90	; 0x5a
 80048ba:	2005      	movs	r0, #5
 80048bc:	f002 f9bb 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80048c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 80048ca:	9203      	str	r2, [sp, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	9202      	str	r2, [sp, #8]
 80048d0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80048d4:	9201      	str	r2, [sp, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	9200      	str	r2, [sp, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a45      	ldr	r2, [pc, #276]	; (80049f4 <GAME_PLAY_Phase_Management+0x22ec>)
 80048de:	2169      	movs	r1, #105	; 0x69
 80048e0:	2005      	movs	r0, #5
 80048e2:	f002 f9a8 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80048e6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	4b3c      	ldr	r3, [pc, #240]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 80048f0:	9203      	str	r2, [sp, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048fa:	9201      	str	r2, [sp, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	9200      	str	r2, [sp, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3a      	ldr	r2, [pc, #232]	; (80049ec <GAME_PLAY_Phase_Management+0x22e4>)
 8004904:	215a      	movs	r1, #90	; 0x5a
 8004906:	2005      	movs	r0, #5
 8004908:	f002 f995 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800490c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <GAME_PLAY_Phase_Management+0x22d8>)
 8004916:	9203      	str	r2, [sp, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	9202      	str	r2, [sp, #8]
 800491c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004920:	9201      	str	r2, [sp, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	9200      	str	r2, [sp, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <GAME_PLAY_Phase_Management+0x22e8>)
 800492a:	2169      	movs	r1, #105	; 0x69
 800492c:	2005      	movs	r0, #5
 800492e:	f002 f982 	bl	8006c36 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8004932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004936:	f002 ff5f 	bl	80077f8 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800493a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2326      	movs	r3, #38	; 0x26
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	215a      	movs	r1, #90	; 0x5a
 800494e:	2000      	movs	r0, #0
 8004950:	f002 faba 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004954:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	2300      	movs	r3, #0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2326      	movs	r3, #38	; 0x26
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	215a      	movs	r1, #90	; 0x5a
 8004968:	2000      	movs	r0, #0
 800496a:	f002 faad 	bl	8006ec8 <ST7735_FillRectangleNSS>
			break;
 800496e:	e011      	b.n	8004994 <GAME_PLAY_Phase_Management+0x228c>
			break;
 8004970:	bf00      	nop
 8004972:	f001 ba82 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004976:	bf00      	nop
 8004978:	f001 ba7f 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 800497c:	bf00      	nop
 800497e:	f001 ba7c 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004982:	bf00      	nop
 8004984:	f001 ba79 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004988:	bf00      	nop
 800498a:	f001 ba76 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 800498e:	bf00      	nop
 8004990:	f001 ba73 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004994:	bf00      	nop
		}
		break;
 8004996:	f001 ba70 	b.w	8005e7a <GAME_PLAY_Phase_Management+0x3772>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 800499a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800499e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80049a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049aa:	6811      	ldr	r1, [r2, #0]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	f7fd f97d 	bl	8001cac <LCDvalue>
			switch(PBS){
 80049b2:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	f201 8261 	bhi.w	8005e7e <GAME_PLAY_Phase_Management+0x3776>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <GAME_PLAY_Phase_Management+0x22bc>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	08005e5b 	.word	0x08005e5b
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08005129 	.word	0x08005129
 80049d0:	08004df3 	.word	0x08004df3
 80049d4:	0800545d 	.word	0x0800545d
 80049d8:	0800573d 	.word	0x0800573d
 80049dc:	08005c81 	.word	0x08005c81
 80049e0:	2400000c 	.word	0x2400000c
 80049e4:	08010fe8 	.word	0x08010fe8
 80049e8:	08011048 	.word	0x08011048
 80049ec:	08011000 	.word	0x08011000
 80049f0:	08010fc4 	.word	0x08010fc4
 80049f4:	08011058 	.word	0x08011058
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80049f8:	4ba2      	ldr	r3, [pc, #648]	; (8004c84 <GAME_PLAY_Phase_Management+0x257c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a02:	9201      	str	r2, [sp, #4]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	9200      	str	r2, [sp, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a9f      	ldr	r2, [pc, #636]	; (8004c88 <GAME_PLAY_Phase_Management+0x2580>)
 8004a0c:	2123      	movs	r1, #35	; 0x23
 8004a0e:	206e      	movs	r0, #110	; 0x6e
 8004a10:	f002 f87d 	bl	8006b0e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004a14:	4b9b      	ldr	r3, [pc, #620]	; (8004c84 <GAME_PLAY_Phase_Management+0x257c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	9202      	str	r2, [sp, #8]
 8004a1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a1e:	9201      	str	r2, [sp, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	9200      	str	r2, [sp, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a98      	ldr	r2, [pc, #608]	; (8004c88 <GAME_PLAY_Phase_Management+0x2580>)
 8004a28:	2123      	movs	r1, #35	; 0x23
 8004a2a:	206e      	movs	r0, #110	; 0x6e
 8004a2c:	f002 f8b9 	bl	8006ba2 <ST7735_WriteString1>
				if(state_game->action == 50){
 8004a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b32      	cmp	r3, #50	; 0x32
 8004a3e:	f040 809b 	bne.w	8004b78 <GAME_PLAY_Phase_Management+0x2470>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8004a42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a46:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004a4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a4e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004a52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a56:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	6809      	ldr	r1, [r1, #0]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	f7fc f84c 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8004a64:	2101      	movs	r1, #1
 8004a66:	4889      	ldr	r0, [pc, #548]	; (8004c8c <GAME_PLAY_Phase_Management+0x2584>)
 8004a68:	f006 f814 	bl	800aa94 <HAL_GPIO_ReadPin>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f041 81f5 	bne.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004a74:	4886      	ldr	r0, [pc, #536]	; (8004c90 <GAME_PLAY_Phase_Management+0x2588>)
 8004a76:	f009 fa0b 	bl	800de90 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8004a7a:	4986      	ldr	r1, [pc, #536]	; (8004c94 <GAME_PLAY_Phase_Management+0x258c>)
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004a88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2326      	movs	r3, #38	; 0x26
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	215a      	movs	r1, #90	; 0x5a
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f002 fa11 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004aa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aaa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <GAME_PLAY_Phase_Management+0x2590>)
 8004ab4:	9203      	str	r2, [sp, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	9202      	str	r2, [sp, #8]
 8004aba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	9200      	str	r2, [sp, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a75      	ldr	r2, [pc, #468]	; (8004c9c <GAME_PLAY_Phase_Management+0x2594>)
 8004ac8:	215a      	movs	r1, #90	; 0x5a
 8004aca:	200f      	movs	r0, #15
 8004acc:	f002 f8b3 	bl	8006c36 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004ad0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ad4:	f002 fe90 	bl	80077f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004ad8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004adc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2326      	movs	r3, #38	; 0x26
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	215a      	movs	r1, #90	; 0x5a
 8004af0:	2000      	movs	r0, #0
 8004af2:	f002 f9e9 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004af6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004afa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2326      	movs	r3, #38	; 0x26
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	215a      	movs	r1, #90	; 0x5a
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f002 f9da 	bl	8006ec8 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8004b14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8004b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	f7fc ffbc 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8004b30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d108      	bne.n	8004b54 <GAME_PLAY_Phase_Management+0x244c>
							state_game->MainGame_State = second_player;
 8004b42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004b52:	e007      	b.n	8004b64 <GAME_PLAY_Phase_Management+0x245c>
						}
						else{
							state_game->MainGame_State = first_player;
 8004b54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b58:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8004b64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8004b74:	f001 b973 	b.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
				else if(state_game->action == 51){
 8004b78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b33      	cmp	r3, #51	; 0x33
 8004b86:	f041 816a 	bne.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004b8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2326      	movs	r3, #38	; 0x26
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	215a      	movs	r1, #90	; 0x5a
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f002 f990 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004ba8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2326      	movs	r3, #38	; 0x26
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	215a      	movs	r1, #90	; 0x5a
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f002 f981 	bl	8006ec8 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004bcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bd0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bda:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8004bde:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004be2:	799b      	ldrb	r3, [r3, #6]
 8004be4:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8004be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bec:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3338      	adds	r3, #56	; 0x38
 8004bf4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004bfe:	e013      	b.n	8004c28 <GAME_PLAY_Phase_Management+0x2520>
						if(ptrYugiohCard_dst->cardData == 0){
 8004c00:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <GAME_PLAY_Phase_Management+0x250c>
							check_def_mon++;
 8004c0a:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8004c14:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c18:	3310      	adds	r3, #16
 8004c1a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004c1e:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004c22:	3301      	adds	r3, #1
 8004c24:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004c28:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d9e7      	bls.n	8004c00 <GAME_PLAY_Phase_Management+0x24f8>
					uint8_t flag_can_atk = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004c36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c3a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c44:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8004c48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c4c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3338      	adds	r3, #56	; 0x38
 8004c54:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8004c5e:	e02c      	b.n	8004cba <GAME_PLAY_Phase_Management+0x25b2>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8004c60:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d11a      	bne.n	8004ca6 <GAME_PLAY_Phase_Management+0x259e>
							if(ptrYugiohCard_dst->cardState == 1){
 8004c70:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c74:	789b      	ldrb	r3, [r3, #2]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d112      	bne.n	8004ca0 <GAME_PLAY_Phase_Management+0x2598>
								flag_can_atk = 2;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8004c80:	e01f      	b.n	8004cc2 <GAME_PLAY_Phase_Management+0x25ba>
 8004c82:	bf00      	nop
 8004c84:	2400000c 	.word	0x2400000c
 8004c88:	08011068 	.word	0x08011068
 8004c8c:	58020800 	.word	0x58020800
 8004c90:	240002e8 	.word	0x240002e8
 8004c94:	24000ea0 	.word	0x24000ea0
 8004c98:	24000014 	.word	0x24000014
 8004c9c:	0801106c 	.word	0x0801106c
								flag_can_atk = 1;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 8004ca6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004caa:	3310      	adds	r3, #16
 8004cac:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004cb0:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8004cba:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d9ce      	bls.n	8004c60 <GAME_PLAY_Phase_Management+0x2558>
					if (check_def_mon < 3)
 8004cc2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d810      	bhi.n	8004cec <GAME_PLAY_Phase_Management+0x25e4>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8004cca:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8004cce:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004cd2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4413      	add	r3, r2
 8004cde:	3304      	adds	r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <GAME_PLAY_Phase_Management+0x25e4>
							flag_can_atk = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8004cec:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d165      	bne.n	8004dc0 <GAME_PLAY_Phase_Management+0x26b8>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8004cf4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004cf8:	7a1b      	ldrb	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d047      	beq.n	8004d8e <GAME_PLAY_Phase_Management+0x2686>
 8004cfe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d02:	789b      	ldrb	r3, [r3, #2]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d142      	bne.n	8004d8e <GAME_PLAY_Phase_Management+0x2686>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8004d08:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d0c:	7a1b      	ldrb	r3, [r3, #8]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d16:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8004d18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d26:	4619      	mov	r1, r3
 8004d28:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004d2c:	f7fb fcaa 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8004d30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d3e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8004d42:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d104      	bne.n	8004d54 <GAME_PLAY_Phase_Management+0x264c>
								ptrYugiohCard_dst->targetPosition = 99;
 8004d4a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d4e:	2263      	movs	r2, #99	; 0x63
 8004d50:	71da      	strb	r2, [r3, #7]
 8004d52:	e004      	b.n	8004d5e <GAME_PLAY_Phase_Management+0x2656>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8004d54:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d58:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 8004d5c:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8004d5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d62:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f7fc fb64 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8004d6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2234      	movs	r2, #52	; 0x34
 8004d78:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8004d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004d8a:	f001 b868 	b.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
							state_game->test = 222;
 8004d8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d92:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	22de      	movs	r2, #222	; 0xde
 8004d9a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8004d9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004da2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2232      	movs	r2, #50	; 0x32
 8004daa:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004dac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004db0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004dbc:	f001 b84f 	b.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
						state_game->test = 223;
 8004dc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dc4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	22df      	movs	r2, #223	; 0xdf
 8004dcc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8004dd0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dd4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2232      	movs	r2, #50	; 0x32
 8004ddc:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004dde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004de2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004dee:	f001 b836 	b.w	8005e5e <GAME_PLAY_Phase_Management+0x3756>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004df2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004df6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	4bc5      	ldr	r3, [pc, #788]	; (8005114 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004e00:	9203      	str	r2, [sp, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	9202      	str	r2, [sp, #8]
 8004e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e0a:	9201      	str	r2, [sp, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	9200      	str	r2, [sp, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4ac1      	ldr	r2, [pc, #772]	; (8005118 <GAME_PLAY_Phase_Management+0x2a10>)
 8004e14:	215a      	movs	r1, #90	; 0x5a
 8004e16:	2005      	movs	r0, #5
 8004e18:	f001 ff0d 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004e1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e20:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	4bba      	ldr	r3, [pc, #744]	; (8005114 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004e2a:	9203      	str	r2, [sp, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	9202      	str	r2, [sp, #8]
 8004e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4ab7      	ldr	r2, [pc, #732]	; (800511c <GAME_PLAY_Phase_Management+0x2a14>)
 8004e3e:	2169      	movs	r1, #105	; 0x69
 8004e40:	2005      	movs	r0, #5
 8004e42:	f001 fef8 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004e46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e4a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	4bb0      	ldr	r3, [pc, #704]	; (8005114 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004e54:	9203      	str	r2, [sp, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	9202      	str	r2, [sp, #8]
 8004e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	9200      	str	r2, [sp, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4aae      	ldr	r2, [pc, #696]	; (8005120 <GAME_PLAY_Phase_Management+0x2a18>)
 8004e68:	215a      	movs	r1, #90	; 0x5a
 8004e6a:	2005      	movs	r0, #5
 8004e6c:	f001 fee3 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004e70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e74:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	4ba5      	ldr	r3, [pc, #660]	; (8005114 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004e7e:	9203      	str	r2, [sp, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	9202      	str	r2, [sp, #8]
 8004e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e88:	9201      	str	r2, [sp, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	9200      	str	r2, [sp, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4aa4      	ldr	r2, [pc, #656]	; (8005124 <GAME_PLAY_Phase_Management+0x2a1c>)
 8004e92:	2169      	movs	r1, #105	; 0x69
 8004e94:	2005      	movs	r0, #5
 8004e96:	f001 fece 	bl	8006c36 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8004e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e9e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b34      	cmp	r3, #52	; 0x34
 8004ea8:	d141      	bne.n	8004f2e <GAME_PLAY_Phase_Management+0x2826>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8004eaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eae:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <GAME_PLAY_Phase_Management+0x27de>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8004eba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ebe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8004eca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ece:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2236      	movs	r2, #54	; 0x36
 8004ed6:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8004ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004edc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8004ee6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eea:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004eee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ef2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004ef6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004efa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	6809      	ldr	r1, [r1, #0]
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	f7fb fea2 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8004f08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f0c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004f10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f14:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004f18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f1c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6809      	ldr	r1, [r1, #0]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f7fc f993 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 8004f2a:	f000 bf9a 	b.w	8005e62 <GAME_PLAY_Phase_Management+0x375a>
				else if ((state_game->action == 53 ))
 8004f2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b35      	cmp	r3, #53	; 0x35
 8004f3c:	f040 8791 	bne.w	8005e62 <GAME_PLAY_Phase_Management+0x375a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004f40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2326      	movs	r3, #38	; 0x26
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	215a      	movs	r1, #90	; 0x5a
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f001 ffb5 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004f5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f62:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2326      	movs	r3, #38	; 0x26
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	215a      	movs	r1, #90	; 0x5a
 8004f76:	2000      	movs	r0, #0
 8004f78:	f001 ffa6 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f80:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f8a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8004f8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f92:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f96:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	f7fc fd2c 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 8004fa6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d14f      	bne.n	8005050 <GAME_PLAY_Phase_Management+0x2948>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8004fb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fb4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f7fc fae6 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004fbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004fc6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8004fda:	f7fb fb53 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8004fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fe2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004fec:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 8004ff6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ffa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005004:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800500e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005012:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800501c:	3301      	adds	r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005024:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 800502e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005032:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800503e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005042:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2234      	movs	r2, #52	; 0x34
 800504a:	701a      	strb	r2, [r3, #0]
				break;
 800504c:	f000 bf09 	b.w	8005e62 <GAME_PLAY_Phase_Management+0x375a>
						if (idx != 255)
 8005050:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005054:	2bff      	cmp	r3, #255	; 0xff
 8005056:	f000 8704 	beq.w	8005e62 <GAME_PLAY_Phase_Management+0x375a>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 800505a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800505e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	f7fc fa91 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8005068:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800506c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005070:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3308      	adds	r3, #8
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	4413      	add	r3, r2
 800507c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005080:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005084:	2200      	movs	r2, #0
 8005086:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8005088:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800508c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005096:	4619      	mov	r1, r3
 8005098:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800509c:	f7fb faf2 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80050a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80050ae:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80050b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80050c6:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80050d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80050de:	3301      	adds	r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80050f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8005100:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005104:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2234      	movs	r2, #52	; 0x34
 800510c:	701a      	strb	r2, [r3, #0]
				break;
 800510e:	f000 bea8 	b.w	8005e62 <GAME_PLAY_Phase_Management+0x375a>
 8005112:	bf00      	nop
 8005114:	2400000c 	.word	0x2400000c
 8005118:	08011078 	.word	0x08011078
 800511c:	08011088 	.word	0x08011088
 8005120:	08011094 	.word	0x08011094
 8005124:	080110a4 	.word	0x080110a4
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005128:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800512c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	4bc4      	ldr	r3, [pc, #784]	; (8005448 <GAME_PLAY_Phase_Management+0x2d40>)
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	9202      	str	r2, [sp, #8]
 800513c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005140:	9201      	str	r2, [sp, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	9200      	str	r2, [sp, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4ac0      	ldr	r2, [pc, #768]	; (800544c <GAME_PLAY_Phase_Management+0x2d44>)
 800514a:	215a      	movs	r1, #90	; 0x5a
 800514c:	2005      	movs	r0, #5
 800514e:	f001 fd72 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005152:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005156:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	4bba      	ldr	r3, [pc, #744]	; (8005448 <GAME_PLAY_Phase_Management+0x2d40>)
 8005160:	9203      	str	r2, [sp, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800516a:	9201      	str	r2, [sp, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	9200      	str	r2, [sp, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4ab7      	ldr	r2, [pc, #732]	; (8005450 <GAME_PLAY_Phase_Management+0x2d48>)
 8005174:	2169      	movs	r1, #105	; 0x69
 8005176:	2005      	movs	r0, #5
 8005178:	f001 fd5d 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800517c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005180:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	4baf      	ldr	r3, [pc, #700]	; (8005448 <GAME_PLAY_Phase_Management+0x2d40>)
 800518a:	9203      	str	r2, [sp, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	9202      	str	r2, [sp, #8]
 8005190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005194:	9201      	str	r2, [sp, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4aad      	ldr	r2, [pc, #692]	; (8005454 <GAME_PLAY_Phase_Management+0x2d4c>)
 800519e:	215a      	movs	r1, #90	; 0x5a
 80051a0:	2005      	movs	r0, #5
 80051a2:	f001 fd48 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80051a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051aa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	4ba5      	ldr	r3, [pc, #660]	; (8005448 <GAME_PLAY_Phase_Management+0x2d40>)
 80051b4:	9203      	str	r2, [sp, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	9202      	str	r2, [sp, #8]
 80051ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051be:	9201      	str	r2, [sp, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	9200      	str	r2, [sp, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4aa4      	ldr	r2, [pc, #656]	; (8005458 <GAME_PLAY_Phase_Management+0x2d50>)
 80051c8:	2169      	movs	r1, #105	; 0x69
 80051ca:	2005      	movs	r0, #5
 80051cc:	f001 fd33 	bl	8006c36 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80051d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b34      	cmp	r3, #52	; 0x34
 80051de:	d141      	bne.n	8005264 <GAME_PLAY_Phase_Management+0x2b5c>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80051e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	789b      	ldrb	r3, [r3, #2]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d115      	bne.n	800521c <GAME_PLAY_Phase_Management+0x2b14>
						//affect
						state_game->action = 54;
 80051f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2236      	movs	r2, #54	; 0x36
 80051fc:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80051fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005202:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2204      	movs	r2, #4
 800520a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 800520e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005212:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800521c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005220:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005224:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005228:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800522c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005230:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6809      	ldr	r1, [r1, #0]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f7fb fd07 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800523e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005242:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005246:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800524a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800524e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005252:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	6809      	ldr	r1, [r1, #0]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	f7fb fff8 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 8005260:	f000 be01 	b.w	8005e66 <GAME_PLAY_Phase_Management+0x375e>
				else if ((state_game->action == 53 )){
 8005264:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005268:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b35      	cmp	r3, #53	; 0x35
 8005272:	f040 85f8 	bne.w	8005e66 <GAME_PLAY_Phase_Management+0x375e>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005276:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800527a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	2300      	movs	r3, #0
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2326      	movs	r3, #38	; 0x26
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	215a      	movs	r1, #90	; 0x5a
 800528e:	2000      	movs	r0, #0
 8005290:	f001 fe1a 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005294:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005298:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2326      	movs	r3, #38	; 0x26
 80052a8:	2280      	movs	r2, #128	; 0x80
 80052aa:	215a      	movs	r1, #90	; 0x5a
 80052ac:	2000      	movs	r0, #0
 80052ae:	f001 fe0b 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80052b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 80052c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	f7fc fb91 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 80052dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d14f      	bne.n	8005386 <GAME_PLAY_Phase_Management+0x2c7e>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80052e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	f7fc f94b 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80052f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80052f8:	2200      	movs	r2, #0
 80052fa:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80052fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005300:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800530a:	4619      	mov	r1, r3
 800530c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005310:	f7fb f9b8 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8005314:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005318:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005322:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800532c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005330:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800533a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8005344:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005348:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005352:	3301      	adds	r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800535a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 8005364:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005368:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8005374:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005378:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2234      	movs	r2, #52	; 0x34
 8005380:	701a      	strb	r2, [r3, #0]
				break;
 8005382:	f000 bd70 	b.w	8005e66 <GAME_PLAY_Phase_Management+0x375e>
						if (idx != 255)
 8005386:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800538a:	2bff      	cmp	r3, #255	; 0xff
 800538c:	f000 856b 	beq.w	8005e66 <GAME_PLAY_Phase_Management+0x375e>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8005390:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005394:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	f7fc f8f6 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800539e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80053a2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80053a6:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	3308      	adds	r3, #8
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80053b6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80053ba:	2200      	movs	r2, #0
 80053bc:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80053be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80053cc:	4619      	mov	r1, r3
 80053ce:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80053d2:	f7fb f957 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80053d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80053e4:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80053ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80053fc:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8005406:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800540a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005414:	3301      	adds	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800541c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005426:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800542a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8005436:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800543a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2234      	movs	r2, #52	; 0x34
 8005442:	701a      	strb	r2, [r3, #0]
				break;
 8005444:	f000 bd0f 	b.w	8005e66 <GAME_PLAY_Phase_Management+0x375e>
 8005448:	2400000c 	.word	0x2400000c
 800544c:	08011094 	.word	0x08011094
 8005450:	080110b0 	.word	0x080110b0
 8005454:	080110b8 	.word	0x080110b8
 8005458:	080110c8 	.word	0x080110c8
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800545c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005460:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	4bb2      	ldr	r3, [pc, #712]	; (8005734 <GAME_PLAY_Phase_Management+0x302c>)
 800546a:	9203      	str	r2, [sp, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	9202      	str	r2, [sp, #8]
 8005470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005474:	9201      	str	r2, [sp, #4]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	9200      	str	r2, [sp, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4aae      	ldr	r2, [pc, #696]	; (8005738 <GAME_PLAY_Phase_Management+0x3030>)
 800547e:	215a      	movs	r1, #90	; 0x5a
 8005480:	2005      	movs	r0, #5
 8005482:	f001 fbd8 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005486:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800548a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	4ba8      	ldr	r3, [pc, #672]	; (8005734 <GAME_PLAY_Phase_Management+0x302c>)
 8005494:	9203      	str	r2, [sp, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	9202      	str	r2, [sp, #8]
 800549a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800549e:	9201      	str	r2, [sp, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	9200      	str	r2, [sp, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4aa4      	ldr	r2, [pc, #656]	; (8005738 <GAME_PLAY_Phase_Management+0x3030>)
 80054a8:	215a      	movs	r1, #90	; 0x5a
 80054aa:	2005      	movs	r0, #5
 80054ac:	f001 fbc3 	bl	8006c36 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 80054b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	4619      	mov	r1, r3
 80054be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054c2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80054c6:	f501 7394 	add.w	r3, r1, #296	; 0x128
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80054d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	4619      	mov	r1, r3
 80054e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054e8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80054ec:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	3304      	adds	r3, #4
 80054f8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 80054fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005500:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b36      	cmp	r3, #54	; 0x36
 800550a:	f040 84ae 	bne.w	8005e6a <GAME_PLAY_Phase_Management+0x3762>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 800550e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005512:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	785a      	ldrb	r2, [r3, #1]
 800551a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800551e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005528:	429a      	cmp	r2, r3
 800552a:	f080 80a3 	bcs.w	8005674 <GAME_PLAY_Phase_Management+0x2f6c>
					{
						state_game->test = 165;
 800552e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005532:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	22a5      	movs	r2, #165	; 0xa5
 800553a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800553e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005542:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	4619      	mov	r1, r3
 800554c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005550:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005554:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	4413      	add	r3, r2
 800555e:	3304      	adds	r3, #4
 8005560:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8005564:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d11d      	bne.n	80055aa <GAME_PLAY_Phase_Management+0x2ea2>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 800556e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2262      	movs	r2, #98	; 0x62
 8005576:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800557a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005584:	4618      	mov	r0, r3
 8005586:	f7fc fa07 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
//							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
							state_game->count_chain++;
 800558a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800558e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	3301      	adds	r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800559e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 80055a6:	f000 bc60 	b.w	8005e6a <GAME_PLAY_Phase_Management+0x3762>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80055aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b0e      	cmp	r3, #14
 80055b2:	d004      	beq.n	80055be <GAME_PLAY_Phase_Management+0x2eb6>
 80055b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d129      	bne.n	8005612 <GAME_PLAY_Phase_Management+0x2f0a>
							state_game->test = 133;
 80055be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2285      	movs	r2, #133	; 0x85
 80055ca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80055ce:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fc f955 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 80055e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fc f9d3 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							state_game->count_chain++;
 80055f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	3301      	adds	r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005606:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	705a      	strb	r2, [r3, #1]
				break;
 800560e:	f000 bc2c 	b.w	8005e6a <GAME_PLAY_Phase_Management+0x3762>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8005612:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b14      	cmp	r3, #20
 800561a:	f040 8426 	bne.w	8005e6a <GAME_PLAY_Phase_Management+0x3762>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800561e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc f9b5 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							if(state_game->MainGame_State == first_player){
 800562e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005632:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800563c:	2b02      	cmp	r3, #2
 800563e:	d108      	bne.n	8005652 <GAME_PLAY_Phase_Management+0x2f4a>
								state_game->MainGame_State = second_player;
 8005640:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005644:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2203      	movs	r2, #3
 800564c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005650:	e007      	b.n	8005662 <GAME_PLAY_Phase_Management+0x2f5a>
								state_game->MainGame_State = first_player;
 8005652:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005656:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8005662:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005666:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8005672:	e3fa      	b.n	8005e6a <GAME_PLAY_Phase_Management+0x3762>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005674:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005678:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2300      	movs	r3, #0
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2326      	movs	r3, #38	; 0x26
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	215a      	movs	r1, #90	; 0x5a
 800568c:	2000      	movs	r0, #0
 800568e:	f001 fc1b 	bl	8006ec8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005692:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005696:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	2300      	movs	r3, #0
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	2326      	movs	r3, #38	; 0x26
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	215a      	movs	r1, #90	; 0x5a
 80056aa:	2000      	movs	r0, #0
 80056ac:	f001 fc0c 	bl	8006ec8 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80056b6:	e020      	b.n	80056fa <GAME_PLAY_Phase_Management+0x2ff2>
							state_game->ptrChainUser[i] = &dummyPlayer;
 80056b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80056c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	f107 0210 	add.w	r2, r7, #16
 80056d2:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 80056d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80056e2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	f107 0210 	add.w	r2, r7, #16
 80056ee:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80056f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80056f4:	3301      	adds	r3, #1
 80056f6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80056fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80056fe:	2b05      	cmp	r3, #5
 8005700:	ddda      	ble.n	80056b8 <GAME_PLAY_Phase_Management+0x2fb0>
						state_game->ChainCount = 0;
 8005702:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005706:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8005712:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005716:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2232      	movs	r2, #50	; 0x32
 800571e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8005720:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005724:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2205      	movs	r2, #5
 800572c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005730:	e39b      	b.n	8005e6a <GAME_PLAY_Phase_Management+0x3762>
 8005732:	bf00      	nop
 8005734:	2400000c 	.word	0x2400000c
 8005738:	080110d8 	.word	0x080110d8
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800573c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005740:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800574a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800574e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8005758:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800575c:	79db      	ldrb	r3, [r3, #7]
 800575e:	2b63      	cmp	r3, #99	; 0x63
 8005760:	d122      	bne.n	80057a8 <GAME_PLAY_Phase_Management+0x30a0>
				{
					playerDef->life_point -= atk*100;
 8005762:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005766:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	889a      	ldrh	r2, [r3, #4]
 800576e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005772:	b29b      	uxth	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	0249      	lsls	r1, r1, #9
 8005778:	1ac9      	subs	r1, r1, r3
 800577a:	0089      	lsls	r1, r1, #2
 800577c:	4419      	add	r1, r3
 800577e:	00c9      	lsls	r1, r1, #3
 8005780:	1acb      	subs	r3, r1, r3
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	b29b      	uxth	r3, r3
 8005786:	4413      	add	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800578e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800579a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2206      	movs	r2, #6
 80057a2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->PlyerAction_Battle_Substate = after_calculate;
						}

					}
				}
				break;
 80057a6:	e362      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
				else if(ptrYugiohCard_src->targetPosition == 98)
 80057a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80057ac:	79db      	ldrb	r3, [r3, #7]
 80057ae:	2b62      	cmp	r3, #98	; 0x62
 80057b0:	d108      	bne.n	80057c4 <GAME_PLAY_Phase_Management+0x30bc>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80057b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2206      	movs	r2, #6
 80057be:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80057c2:	e354      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 80057c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057c8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3308      	adds	r3, #8
 80057d0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 80057d4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80057d8:	79db      	ldrb	r3, [r3, #7]
 80057da:	4619      	mov	r1, r3
 80057dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057e0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80057e4:	010b      	lsls	r3, r1, #4
 80057e6:	3308      	adds	r3, #8
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	4413      	add	r3, r2
 80057ec:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 80057f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2236      	movs	r2, #54	; 0x36
 80057fc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8005800:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 8100 	bne.w	8005a0c <GAME_PLAY_Phase_Management+0x3304>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800580c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005810:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <GAME_PLAY_Phase_Management+0x32f0>)
 800581a:	9203      	str	r2, [sp, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	9202      	str	r2, [sp, #8]
 8005820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005824:	9201      	str	r2, [sp, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	9200      	str	r2, [sp, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a73      	ldr	r2, [pc, #460]	; (80059fc <GAME_PLAY_Phase_Management+0x32f4>)
 800582e:	215a      	movs	r1, #90	; 0x5a
 8005830:	2005      	movs	r0, #5
 8005832:	f001 fa00 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005836:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800583a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	4b6d      	ldr	r3, [pc, #436]	; (80059f8 <GAME_PLAY_Phase_Management+0x32f0>)
 8005844:	9203      	str	r2, [sp, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	9202      	str	r2, [sp, #8]
 800584a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800584e:	9201      	str	r2, [sp, #4]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	9200      	str	r2, [sp, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a6a      	ldr	r2, [pc, #424]	; (8005a00 <GAME_PLAY_Phase_Management+0x32f8>)
 8005858:	2169      	movs	r1, #105	; 0x69
 800585a:	2005      	movs	r0, #5
 800585c:	f001 f9eb 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005860:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005864:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <GAME_PLAY_Phase_Management+0x32f0>)
 800586e:	9203      	str	r2, [sp, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	9202      	str	r2, [sp, #8]
 8005874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005878:	9201      	str	r2, [sp, #4]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a60      	ldr	r2, [pc, #384]	; (8005a04 <GAME_PLAY_Phase_Management+0x32fc>)
 8005882:	215a      	movs	r1, #90	; 0x5a
 8005884:	2005      	movs	r0, #5
 8005886:	f001 f9d6 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800588a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800588e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <GAME_PLAY_Phase_Management+0x32f0>)
 8005898:	9203      	str	r2, [sp, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	9202      	str	r2, [sp, #8]
 800589e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80058a2:	9201      	str	r2, [sp, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	9200      	str	r2, [sp, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a57      	ldr	r2, [pc, #348]	; (8005a08 <GAME_PLAY_Phase_Management+0x3300>)
 80058ac:	2169      	movs	r1, #105	; 0x69
 80058ae:	2005      	movs	r0, #5
 80058b0:	f001 f9c1 	bl	8006c36 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 80058b4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80058b8:	795b      	ldrb	r3, [r3, #5]
 80058ba:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 80058be:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 80058c2:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d25e      	bcs.n	8005988 <GAME_PLAY_Phase_Management+0x3280>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80058ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2326      	movs	r3, #38	; 0x26
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	215a      	movs	r1, #90	; 0x5a
 80058e2:	2000      	movs	r0, #0
 80058e4:	f001 faf0 	bl	8006ec8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80058e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ec:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	2326      	movs	r3, #38	; 0x26
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	215a      	movs	r1, #90	; 0x5a
 8005900:	2000      	movs	r0, #0
 8005902:	f001 fae1 	bl	8006ec8 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8005906:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800590a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	889a      	ldrh	r2, [r3, #4]
 8005912:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8005916:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	b29b      	uxth	r3, r3
 800591e:	4619      	mov	r1, r3
 8005920:	0249      	lsls	r1, r1, #9
 8005922:	1ac9      	subs	r1, r1, r3
 8005924:	0089      	lsls	r1, r1, #2
 8005926:	4419      	add	r1, r3
 8005928:	00c9      	lsls	r1, r1, #3
 800592a:	1acb      	subs	r3, r1, r3
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	b29b      	uxth	r3, r3
 8005930:	4413      	add	r3, r2
 8005932:	b29a      	uxth	r2, r3
 8005934:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005938:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005940:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005944:	799b      	ldrb	r3, [r3, #6]
 8005946:	4619      	mov	r1, r3
 8005948:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800594c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005950:	010b      	lsls	r3, r1, #4
 8005952:	3308      	adds	r3, #8
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	441a      	add	r2, r3
 8005958:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800595c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005960:	4611      	mov	r1, r2
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	f7fb fe5d 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005968:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800596c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f7fb fd5f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005976:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800597a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2206      	movs	r2, #6
 8005982:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005986:	e272      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
						else if(atk > def){
 8005988:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 800598c:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005990:	429a      	cmp	r2, r3
 8005992:	f240 826c 	bls.w	8005e6e <GAME_PLAY_Phase_Management+0x3766>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005996:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800599a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2326      	movs	r3, #38	; 0x26
 80059aa:	2280      	movs	r2, #128	; 0x80
 80059ac:	215a      	movs	r1, #90	; 0x5a
 80059ae:	2000      	movs	r0, #0
 80059b0:	f001 fa8a 	bl	8006ec8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80059b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059b8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2326      	movs	r3, #38	; 0x26
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	215a      	movs	r1, #90	; 0x5a
 80059cc:	2000      	movs	r0, #0
 80059ce:	f001 fa7b 	bl	8006ec8 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80059d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059d6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80059da:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	f7fb fe1f 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80059e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2206      	movs	r2, #6
 80059f0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80059f4:	e23b      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
 80059f6:	bf00      	nop
 80059f8:	2400000c 	.word	0x2400000c
 80059fc:	080110e8 	.word	0x080110e8
 8005a00:	080110f8 	.word	0x080110f8
 8005a04:	08011108 	.word	0x08011108
 8005a08:	08011118 	.word	0x08011118
					else if(ptrYugiohCard_dst->cardState == 1){
 8005a0c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005a10:	789b      	ldrb	r3, [r3, #2]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	f040 822b 	bne.w	8005e6e <GAME_PLAY_Phase_Management+0x3766>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005a18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	4b91      	ldr	r3, [pc, #580]	; (8005c6c <GAME_PLAY_Phase_Management+0x3564>)
 8005a26:	9203      	str	r2, [sp, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	9202      	str	r2, [sp, #8]
 8005a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a30:	9201      	str	r2, [sp, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a8d      	ldr	r2, [pc, #564]	; (8005c70 <GAME_PLAY_Phase_Management+0x3568>)
 8005a3a:	215a      	movs	r1, #90	; 0x5a
 8005a3c:	2005      	movs	r0, #5
 8005a3e:	f001 f8fa 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005a42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	4b87      	ldr	r3, [pc, #540]	; (8005c6c <GAME_PLAY_Phase_Management+0x3564>)
 8005a50:	9203      	str	r2, [sp, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	9202      	str	r2, [sp, #8]
 8005a56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005a5a:	9201      	str	r2, [sp, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	9200      	str	r2, [sp, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a84      	ldr	r2, [pc, #528]	; (8005c74 <GAME_PLAY_Phase_Management+0x356c>)
 8005a64:	2169      	movs	r1, #105	; 0x69
 8005a66:	2005      	movs	r0, #5
 8005a68:	f001 f8e5 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005a6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a70:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	4b7c      	ldr	r3, [pc, #496]	; (8005c6c <GAME_PLAY_Phase_Management+0x3564>)
 8005a7a:	9203      	str	r2, [sp, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	9202      	str	r2, [sp, #8]
 8005a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a84:	9201      	str	r2, [sp, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	9200      	str	r2, [sp, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a7a      	ldr	r2, [pc, #488]	; (8005c78 <GAME_PLAY_Phase_Management+0x3570>)
 8005a8e:	215a      	movs	r1, #90	; 0x5a
 8005a90:	2005      	movs	r0, #5
 8005a92:	f001 f8d0 	bl	8006c36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005a96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a9a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <GAME_PLAY_Phase_Management+0x3564>)
 8005aa4:	9203      	str	r2, [sp, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	9202      	str	r2, [sp, #8]
 8005aaa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005aae:	9201      	str	r2, [sp, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	9200      	str	r2, [sp, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <GAME_PLAY_Phase_Management+0x3574>)
 8005ab8:	2169      	movs	r1, #105	; 0x69
 8005aba:	2005      	movs	r0, #5
 8005abc:	f001 f8bb 	bl	8006c36 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8005ac0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8005aca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ace:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	223c      	movs	r2, #60	; 0x3c
 8005ad6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8005ada:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005ade:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d266      	bcs.n	8005bb4 <GAME_PLAY_Phase_Management+0x34ac>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005ae6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005aea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	2300      	movs	r3, #0
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2326      	movs	r3, #38	; 0x26
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	215a      	movs	r1, #90	; 0x5a
 8005afe:	2000      	movs	r0, #0
 8005b00:	f001 f9e2 	bl	8006ec8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005b04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b08:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2326      	movs	r3, #38	; 0x26
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	215a      	movs	r1, #90	; 0x5a
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f001 f9d3 	bl	8006ec8 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8005b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	223d      	movs	r2, #61	; 0x3d
 8005b2e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8005b32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	889a      	ldrh	r2, [r3, #4]
 8005b3e:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8005b42:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005b46:	1acb      	subs	r3, r1, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	0249      	lsls	r1, r1, #9
 8005b4e:	1ac9      	subs	r1, r1, r3
 8005b50:	0089      	lsls	r1, r1, #2
 8005b52:	4419      	add	r1, r3
 8005b54:	00c9      	lsls	r1, r1, #3
 8005b56:	1acb      	subs	r3, r1, r3
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b64:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005b6c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b70:	799b      	ldrb	r3, [r3, #6]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b78:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005b7c:	010b      	lsls	r3, r1, #4
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	441a      	add	r2, r3
 8005b84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f7fb fd47 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005b94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b98:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f7fb fc49 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005ba2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ba6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2206      	movs	r2, #6
 8005bae:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005bb2:	e15c      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
						else if(atk > atk2){
 8005bb4:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005bb8:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	f240 8156 	bls.w	8005e6e <GAME_PLAY_Phase_Management+0x3766>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005bc2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bc6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2326      	movs	r3, #38	; 0x26
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	215a      	movs	r1, #90	; 0x5a
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f001 f974 	bl	8006ec8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005be0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005be4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	2326      	movs	r3, #38	; 0x26
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	215a      	movs	r1, #90	; 0x5a
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f001 f965 	bl	8006ec8 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8005bfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2246      	movs	r2, #70	; 0x46
 8005c0a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8005c0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c12:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	889a      	ldrh	r2, [r3, #4]
 8005c1a:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 8005c1e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005c22:	1acb      	subs	r3, r1, r3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	0249      	lsls	r1, r1, #9
 8005c2a:	1ac9      	subs	r1, r1, r3
 8005c2c:	0089      	lsls	r1, r1, #2
 8005c2e:	4419      	add	r1, r3
 8005c30:	00c9      	lsls	r1, r1, #3
 8005c32:	1acb      	subs	r3, r1, r3
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c40:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005c48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c4c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c50:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f7fb fce4 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005c5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2206      	movs	r2, #6
 8005c66:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005c6a:	e100      	b.n	8005e6e <GAME_PLAY_Phase_Management+0x3766>
 8005c6c:	2400000c 	.word	0x2400000c
 8005c70:	080110e8 	.word	0x080110e8
 8005c74:	0801112c 	.word	0x0801112c
 8005c78:	08011108 	.word	0x08011108
 8005c7c:	0801113c 	.word	0x0801113c
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005c80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	4b7f      	ldr	r3, [pc, #508]	; (8005e8c <GAME_PLAY_Phase_Management+0x3784>)
 8005c8e:	9203      	str	r2, [sp, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	9202      	str	r2, [sp, #8]
 8005c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c98:	9201      	str	r2, [sp, #4]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	9200      	str	r2, [sp, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7b      	ldr	r2, [pc, #492]	; (8005e90 <GAME_PLAY_Phase_Management+0x3788>)
 8005ca2:	215a      	movs	r1, #90	; 0x5a
 8005ca4:	2005      	movs	r0, #5
 8005ca6:	f000 ffc6 	bl	8006c36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005caa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cae:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	4b75      	ldr	r3, [pc, #468]	; (8005e8c <GAME_PLAY_Phase_Management+0x3784>)
 8005cb8:	9203      	str	r2, [sp, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	9202      	str	r2, [sp, #8]
 8005cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cc2:	9201      	str	r2, [sp, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	9200      	str	r2, [sp, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a72      	ldr	r2, [pc, #456]	; (8005e94 <GAME_PLAY_Phase_Management+0x378c>)
 8005ccc:	215a      	movs	r1, #90	; 0x5a
 8005cce:	2005      	movs	r0, #5
 8005cd0:	f000 ffb1 	bl	8006c36 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8005cd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cd8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ce2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 8005ce6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005cea:	f7fa fd02 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8005cee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cf2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	889b      	ldrh	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <GAME_PLAY_Phase_Management+0x360a>
 8005cfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	889b      	ldrh	r3, [r3, #4]
 8005d0a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d94b      	bls.n	8005daa <GAME_PLAY_Phase_Management+0x36a2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8005d12:	2301      	movs	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2326      	movs	r3, #38	; 0x26
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	215a      	movs	r1, #90	; 0x5a
 8005d20:	2000      	movs	r0, #0
 8005d22:	f001 f8d1 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8005d26:	2300      	movs	r3, #0
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	2326      	movs	r3, #38	; 0x26
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	215a      	movs	r1, #90	; 0x5a
 8005d34:	2000      	movs	r0, #0
 8005d36:	f001 f8c7 	bl	8006ec8 <ST7735_FillRectangleNSS>
					HAL_Delay(200);
 8005d3a:	20c8      	movs	r0, #200	; 0xc8
 8005d3c:	f001 fd5c 	bl	80077f8 <HAL_Delay>
					ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,playerAtk->displayNSS);
 8005d40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <GAME_PLAY_Phase_Management+0x3790>)
 8005d4e:	9203      	str	r2, [sp, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005d58:	9201      	str	r2, [sp, #4]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	9200      	str	r2, [sp, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4e      	ldr	r2, [pc, #312]	; (8005e9c <GAME_PLAY_Phase_Management+0x3794>)
 8005d62:	215a      	movs	r1, #90	; 0x5a
 8005d64:	2014      	movs	r0, #20
 8005d66:	f000 ff66 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerDef->displayNSS);
 8005d6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d6e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <GAME_PLAY_Phase_Management+0x3790>)
 8005d78:	9203      	str	r2, [sp, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	9202      	str	r2, [sp, #8]
 8005d7e:	221f      	movs	r2, #31
 8005d80:	9201      	str	r2, [sp, #4]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	9200      	str	r2, [sp, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a45      	ldr	r2, [pc, #276]	; (8005ea0 <GAME_PLAY_Phase_Management+0x3798>)
 8005d8a:	215a      	movs	r1, #90	; 0x5a
 8005d8c:	200f      	movs	r0, #15
 8005d8e:	f000 ff52 	bl	8006c36 <ST7735_WriteStringNSS>
					HAL_Delay(200);
 8005d92:	20c8      	movs	r0, #200	; 0xc8
 8005d94:	f001 fd30 	bl	80077f8 <HAL_Delay>
					state_game->MainGame_State = Game_Ended;
 8005d98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8005da8:	e062      	b.n	8005e70 <GAME_PLAY_Phase_Management+0x3768>
					state_game->action = 50;
 8005daa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2232      	movs	r2, #50	; 0x32
 8005db6:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005db8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dbc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2326      	movs	r3, #38	; 0x26
 8005dcc:	2280      	movs	r2, #128	; 0x80
 8005dce:	215a      	movs	r1, #90	; 0x5a
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f001 f879 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005dd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dda:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	2300      	movs	r3, #0
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2326      	movs	r3, #38	; 0x26
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	215a      	movs	r1, #90	; 0x5a
 8005dee:	2000      	movs	r0, #0
 8005df0:	f001 f86a 	bl	8006ec8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005df4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005df8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <GAME_PLAY_Phase_Management+0x3784>)
 8005e02:	9203      	str	r2, [sp, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	9202      	str	r2, [sp, #8]
 8005e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0c:	9201      	str	r2, [sp, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <GAME_PLAY_Phase_Management+0x3788>)
 8005e16:	215a      	movs	r1, #90	; 0x5a
 8005e18:	2005      	movs	r0, #5
 8005e1a:	f000 ff0c 	bl	8006c36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005e1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e22:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <GAME_PLAY_Phase_Management+0x3784>)
 8005e2c:	9203      	str	r2, [sp, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	9200      	str	r2, [sp, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <GAME_PLAY_Phase_Management+0x378c>)
 8005e40:	215a      	movs	r1, #90	; 0x5a
 8005e42:	2005      	movs	r0, #5
 8005e44:	f000 fef7 	bl	8006c36 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8005e48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e4c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005e58:	e00a      	b.n	8005e70 <GAME_PLAY_Phase_Management+0x3768>
				break;
 8005e5a:	bf00      	nop
 8005e5c:	e00f      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e5e:	bf00      	nop
 8005e60:	e00d      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e62:	bf00      	nop
 8005e64:	e00b      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e66:	bf00      	nop
 8005e68:	e009      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e6a:	bf00      	nop
 8005e6c:	e007      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e6e:	bf00      	nop
			}
			break;
 8005e70:	e005      	b.n	8005e7e <GAME_PLAY_Phase_Management+0x3776>
		break;
 8005e72:	bf00      	nop
 8005e74:	e004      	b.n	8005e80 <GAME_PLAY_Phase_Management+0x3778>
		break;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <GAME_PLAY_Phase_Management+0x3778>
		break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <GAME_PLAY_Phase_Management+0x3778>
			break;
 8005e7e:	bf00      	nop

	}
}
 8005e80:	bf00      	nop
 8005e82:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2400000c 	.word	0x2400000c
 8005e90:	08011150 	.word	0x08011150
 8005e94:	08011160 	.word	0x08011160
 8005e98:	24000014 	.word	0x24000014
 8005e9c:	08010de8 	.word	0x08010de8
 8005ea0:	08010dc8 	.word	0x08010dc8

08005ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <SystemInit+0xfc>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	4a3c      	ldr	r2, [pc, #240]	; (8005fa0 <SystemInit+0xfc>)
 8005eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005eb8:	4b39      	ldr	r3, [pc, #228]	; (8005fa0 <SystemInit+0xfc>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	4a38      	ldr	r2, [pc, #224]	; (8005fa0 <SystemInit+0xfc>)
 8005ebe:	f043 0310 	orr.w	r3, r3, #16
 8005ec2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005ec4:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <SystemInit+0x100>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d807      	bhi.n	8005ee0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005ed0:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <SystemInit+0x100>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 030f 	bic.w	r3, r3, #15
 8005ed8:	4a32      	ldr	r2, [pc, #200]	; (8005fa4 <SystemInit+0x100>)
 8005eda:	f043 0307 	orr.w	r3, r3, #7
 8005ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <SystemInit+0x104>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a30      	ldr	r2, [pc, #192]	; (8005fa8 <SystemInit+0x104>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005eec:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <SystemInit+0x104>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005ef2:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <SystemInit+0x104>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	492c      	ldr	r1, [pc, #176]	; (8005fa8 <SystemInit+0x104>)
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <SystemInit+0x108>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005efe:	4b29      	ldr	r3, [pc, #164]	; (8005fa4 <SystemInit+0x100>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <SystemInit+0x100>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 030f 	bic.w	r3, r3, #15
 8005f12:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <SystemInit+0x100>)
 8005f14:	f043 0307 	orr.w	r3, r3, #7
 8005f18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <SystemInit+0x104>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <SystemInit+0x104>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <SystemInit+0x104>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005f2c:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <SystemInit+0x104>)
 8005f2e:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <SystemInit+0x10c>)
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <SystemInit+0x104>)
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <SystemInit+0x110>)
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <SystemInit+0x104>)
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <SystemInit+0x114>)
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <SystemInit+0x104>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005f44:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <SystemInit+0x104>)
 8005f46:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <SystemInit+0x114>)
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <SystemInit+0x104>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005f50:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <SystemInit+0x104>)
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <SystemInit+0x114>)
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <SystemInit+0x104>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <SystemInit+0x104>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <SystemInit+0x104>)
 8005f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <SystemInit+0x104>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <SystemInit+0x118>)
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <SystemInit+0x118>)
 8005f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f78:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <SystemInit+0x11c>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <SystemInit+0x120>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f86:	d202      	bcs.n	8005f8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <SystemInit+0x124>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <SystemInit+0x128>)
 8005f90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005f94:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	52002000 	.word	0x52002000
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	eaf6ed7f 	.word	0xeaf6ed7f
 8005fb0:	02020200 	.word	0x02020200
 8005fb4:	01ff0000 	.word	0x01ff0000
 8005fb8:	01010280 	.word	0x01010280
 8005fbc:	580000c0 	.word	0x580000c0
 8005fc0:	5c001000 	.word	0x5c001000
 8005fc4:	ffff0000 	.word	0xffff0000
 8005fc8:	51008108 	.word	0x51008108
 8005fcc:	52004000 	.word	0x52004000

08005fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8005fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fda:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005fdc:	bf00      	nop
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <main+0xec>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <main+0x24>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dcf4      	bgt.n	8005fde <main+0xe>
	if ( timeout < 0 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da01      	bge.n	8005ffe <main+0x2e>
	{
		Error_Handler();
 8005ffa:	f000 fbeb 	bl	80067d4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ffe:	f001 fb69 	bl	80076d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006002:	f000 f863 	bl	80060cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006006:	f000 f8e5 	bl	80061d4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800600a:	4b2c      	ldr	r3, [pc, #176]	; (80060bc <main+0xec>)
 800600c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <main+0xec>)
 8006012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800601a:	4b28      	ldr	r3, [pc, #160]	; (80060bc <main+0xec>)
 800601c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8006028:	2000      	movs	r0, #0
 800602a:	f004 fd7f 	bl	800ab2c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800602e:	2100      	movs	r1, #0
 8006030:	2000      	movs	r0, #0
 8006032:	f004 fd95 	bl	800ab60 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8006036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800603a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800603c:	bf00      	nop
 800603e:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <main+0xec>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <main+0x84>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	dcf4      	bgt.n	800603e <main+0x6e>
	if ( timeout < 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da01      	bge.n	800605e <main+0x8e>
	{
		Error_Handler();
 800605a:	f000 fbbb 	bl	80067d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800605e:	f000 fa6d 	bl	800653c <MX_GPIO_Init>
  MX_ETH_Init();
 8006062:	f000 f8e9 	bl	8006238 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8006066:	f000 f9c1 	bl	80063ec <MX_USART3_UART_Init>
  MX_DMA_Init();
 800606a:	f000 fa3f 	bl	80064ec <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800606e:	f000 fa0b 	bl	8006488 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8006072:	f000 f92d 	bl	80062d0 <MX_SPI3_Init>
  MX_TIM7_Init();
 8006076:	f000 f983 	bl	8006380 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800607a:	f000 fcb3 	bl	80069e4 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800607e:	2000      	movs	r0, #0
 8006080:	f000 ffbd 	bl	8006ffe <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8006084:	2000      	movs	r0, #0
 8006086:	f000 ffa9 	bl	8006fdc <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800608a:	f001 fba9 	bl	80077e0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <main+0xf0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2bc8      	cmp	r3, #200	; 0xc8
 8006098:	d9f7      	bls.n	800608a <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 800609a:	f001 fba1 	bl	80077e0 <HAL_GetTick>
 800609e:	4603      	mov	r3, r0
 80060a0:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <main+0xf0>)
 80060a2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80060a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060a8:	4806      	ldr	r0, [pc, #24]	; (80060c4 <main+0xf4>)
 80060aa:	f004 fd24 	bl	800aaf6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80060ae:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80060b2:	4905      	ldr	r1, [pc, #20]	; (80060c8 <main+0xf8>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fc f823 	bl	8002100 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80060ba:	e7e6      	b.n	800608a <main+0xba>
 80060bc:	58024400 	.word	0x58024400
 80060c0:	24000e98 	.word	0x24000e98
 80060c4:	58020400 	.word	0x58020400
 80060c8:	240009c0 	.word	0x240009c0

080060cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b09c      	sub	sp, #112	; 0x70
 80060d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d6:	224c      	movs	r2, #76	; 0x4c
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f00a f9bc 	bl	8010458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060e0:	1d3b      	adds	r3, r7, #4
 80060e2:	2220      	movs	r2, #32
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f00a f9b6 	bl	8010458 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80060ec:	2004      	movs	r0, #4
 80060ee:	f004 fe93 	bl	800ae18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80060f2:	2300      	movs	r3, #0
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4b34      	ldr	r3, [pc, #208]	; (80061c8 <SystemClock_Config+0xfc>)
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <SystemClock_Config+0xfc>)
 80060fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006100:	6193      	str	r3, [r2, #24]
 8006102:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <SystemClock_Config+0xfc>)
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4b2f      	ldr	r3, [pc, #188]	; (80061cc <SystemClock_Config+0x100>)
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a2e      	ldr	r2, [pc, #184]	; (80061cc <SystemClock_Config+0x100>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006118:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <SystemClock_Config+0x100>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006124:	bf00      	nop
 8006126:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <SystemClock_Config+0xfc>)
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006132:	d1f8      	bne.n	8006126 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <SystemClock_Config+0x104>)
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f023 0303 	bic.w	r3, r3, #3
 800613c:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <SystemClock_Config+0x104>)
 800613e:	f043 0302 	orr.w	r3, r3, #2
 8006142:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006144:	2301      	movs	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006148:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800614e:	2302      	movs	r3, #2
 8006150:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006152:	2302      	movs	r3, #2
 8006154:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800615a:	2378      	movs	r3, #120	; 0x78
 800615c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800615e:	2302      	movs	r3, #2
 8006160:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006162:	2302      	movs	r3, #2
 8006164:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006166:	2302      	movs	r3, #2
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800616a:	230c      	movs	r3, #12
 800616c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800616e:	2300      	movs	r3, #0
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f004 feb6 	bl	800aeec <HAL_RCC_OscConfig>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006186:	f000 fb25 	bl	80067d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800618a:	233f      	movs	r3, #63	; 0x3f
 800618c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800618e:	2303      	movs	r3, #3
 8006190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006196:	2308      	movs	r3, #8
 8006198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800619e:	2340      	movs	r3, #64	; 0x40
 80061a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80061a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	2104      	movs	r1, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f005 fac9 	bl	800b748 <HAL_RCC_ClockConfig>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80061bc:	f000 fb0a 	bl	80067d4 <Error_Handler>
  }
}
 80061c0:	bf00      	nop
 80061c2:	3770      	adds	r7, #112	; 0x70
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	58024800 	.word	0x58024800
 80061cc:	58000400 	.word	0x58000400
 80061d0:	58024400 	.word	0x58024400

080061d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0b0      	sub	sp, #192	; 0xc0
 80061d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	22bc      	movs	r2, #188	; 0xbc
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f00a f939 	bl	8010458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80061e6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80061ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80061ec:	2301      	movs	r3, #1
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80061f0:	2318      	movs	r3, #24
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80061f4:	2302      	movs	r3, #2
 80061f6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80061f8:	2304      	movs	r3, #4
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80061fc:	2302      	movs	r3, #2
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8006200:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006206:	2300      	movs	r3, #0
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800620e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006212:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8006214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800621c:	1d3b      	adds	r3, r7, #4
 800621e:	4618      	mov	r0, r3
 8006220:	f005 fe1e 	bl	800be60 <HAL_RCCEx_PeriphCLKConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800622a:	f000 fad3 	bl	80067d4 <Error_Handler>
  }
}
 800622e:	bf00      	nop
 8006230:	37c0      	adds	r7, #192	; 0xc0
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800623c:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <MX_ETH_Init+0x80>)
 800623e:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <MX_ETH_Init+0x84>)
 8006240:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006242:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <MX_ETH_Init+0x88>)
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8006248:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <MX_ETH_Init+0x88>)
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <MX_ETH_Init+0x88>)
 8006250:	22e1      	movs	r2, #225	; 0xe1
 8006252:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8006254:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <MX_ETH_Init+0x88>)
 8006256:	2200      	movs	r2, #0
 8006258:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <MX_ETH_Init+0x88>)
 800625c:	2200      	movs	r2, #0
 800625e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <MX_ETH_Init+0x88>)
 8006262:	2200      	movs	r2, #0
 8006264:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <MX_ETH_Init+0x80>)
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <MX_ETH_Init+0x88>)
 800626a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <MX_ETH_Init+0x80>)
 800626e:	2201      	movs	r2, #1
 8006270:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <MX_ETH_Init+0x80>)
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <MX_ETH_Init+0x8c>)
 8006276:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <MX_ETH_Init+0x80>)
 800627a:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <MX_ETH_Init+0x90>)
 800627c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800627e:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <MX_ETH_Init+0x80>)
 8006280:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006284:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006286:	480c      	ldr	r0, [pc, #48]	; (80062b8 <MX_ETH_Init+0x80>)
 8006288:	f003 fe30 	bl	8009eec <HAL_ETH_Init>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8006292:	f000 fa9f 	bl	80067d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006296:	2238      	movs	r2, #56	; 0x38
 8006298:	2100      	movs	r1, #0
 800629a:	480c      	ldr	r0, [pc, #48]	; (80062cc <MX_ETH_Init+0x94>)
 800629c:	f00a f8dc 	bl	8010458 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <MX_ETH_Init+0x94>)
 80062a2:	2221      	movs	r2, #33	; 0x21
 80062a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <MX_ETH_Init+0x94>)
 80062a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80062ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <MX_ETH_Init+0x94>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	240001b0 	.word	0x240001b0
 80062bc:	40028000 	.word	0x40028000
 80062c0:	24000ea8 	.word	0x24000ea8
 80062c4:	240000e8 	.word	0x240000e8
 80062c8:	24000088 	.word	0x24000088
 80062cc:	24000178 	.word	0x24000178

080062d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <MX_SPI3_Init+0xac>)
 80062d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80062e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80062e2:	4b25      	ldr	r3, [pc, #148]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062e8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80062ea:	4b23      	ldr	r3, [pc, #140]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062ec:	2207      	movs	r2, #7
 80062ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <MX_SPI3_Init+0xa8>)
 80062fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006302:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006304:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800630a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <MX_SPI3_Init+0xa8>)
 800630e:	2200      	movs	r2, #0
 8006310:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006312:	4b19      	ldr	r3, [pc, #100]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006314:	2200      	movs	r2, #0
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <MX_SPI3_Init+0xa8>)
 800631a:	2200      	movs	r2, #0
 800631c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006320:	2200      	movs	r2, #0
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006324:	4b14      	ldr	r3, [pc, #80]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800632a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <MX_SPI3_Init+0xa8>)
 800632e:	2200      	movs	r2, #0
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006332:	4b11      	ldr	r3, [pc, #68]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006334:	2200      	movs	r2, #0
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <MX_SPI3_Init+0xa8>)
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006340:	2200      	movs	r2, #0
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006346:	2200      	movs	r2, #0
 8006348:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800634a:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <MX_SPI3_Init+0xa8>)
 800634c:	2200      	movs	r2, #0
 800634e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006352:	2200      	movs	r2, #0
 8006354:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006356:	4b08      	ldr	r3, [pc, #32]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006358:	2200      	movs	r2, #0
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <MX_SPI3_Init+0xa8>)
 800635e:	2200      	movs	r2, #0
 8006360:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006362:	4805      	ldr	r0, [pc, #20]	; (8006378 <MX_SPI3_Init+0xa8>)
 8006364:	f007 f8e4 	bl	800d530 <HAL_SPI_Init>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800636e:	f000 fa31 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	24000260 	.word	0x24000260
 800637c:	40003c00 	.word	0x40003c00

08006380 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <MX_TIM7_Init+0x64>)
 8006392:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <MX_TIM7_Init+0x68>)
 8006394:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <MX_TIM7_Init+0x64>)
 8006398:	22ef      	movs	r2, #239	; 0xef
 800639a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <MX_TIM7_Init+0x64>)
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <MX_TIM7_Init+0x64>)
 80063a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063aa:	4b0e      	ldr	r3, [pc, #56]	; (80063e4 <MX_TIM7_Init+0x64>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80063b0:	480c      	ldr	r0, [pc, #48]	; (80063e4 <MX_TIM7_Init+0x64>)
 80063b2:	f007 fc9e 	bl	800dcf2 <HAL_TIM_Base_Init>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80063bc:	f000 fa0a 	bl	80067d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c0:	2300      	movs	r3, #0
 80063c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4805      	ldr	r0, [pc, #20]	; (80063e4 <MX_TIM7_Init+0x64>)
 80063ce:	f007 ff6f 	bl	800e2b0 <HAL_TIMEx_MasterConfigSynchronization>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80063d8:	f000 f9fc 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	240002e8 	.word	0x240002e8
 80063e8:	40001400 	.word	0x40001400

080063ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <MX_USART3_UART_Init+0x90>)
 80063f2:	4a23      	ldr	r2, [pc, #140]	; (8006480 <MX_USART3_UART_Init+0x94>)
 80063f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <MX_USART3_UART_Init+0x90>)
 80063f8:	4a22      	ldr	r2, [pc, #136]	; (8006484 <MX_USART3_UART_Init+0x98>)
 80063fa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80063fc:	4b1f      	ldr	r3, [pc, #124]	; (800647c <MX_USART3_UART_Init+0x90>)
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006404:	2200      	movs	r2, #0
 8006406:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <MX_USART3_UART_Init+0x90>)
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800640e:	4b1b      	ldr	r3, [pc, #108]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006410:	220c      	movs	r2, #12
 8006412:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006416:	2200      	movs	r2, #0
 8006418:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800641a:	4b18      	ldr	r3, [pc, #96]	; (800647c <MX_USART3_UART_Init+0x90>)
 800641c:	2200      	movs	r2, #0
 800641e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006422:	2200      	movs	r2, #0
 8006424:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006428:	2200      	movs	r2, #0
 800642a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <MX_USART3_UART_Init+0x90>)
 800642e:	2200      	movs	r2, #0
 8006430:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006432:	4812      	ldr	r0, [pc, #72]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006434:	f007 ffe8 	bl	800e408 <HAL_UART_Init>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800643e:	f000 f9c9 	bl	80067d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006442:	2100      	movs	r1, #0
 8006444:	480d      	ldr	r0, [pc, #52]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006446:	f009 fc09 	bl	800fc5c <HAL_UARTEx_SetTxFifoThreshold>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8006450:	f000 f9c0 	bl	80067d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006454:	2100      	movs	r1, #0
 8006456:	4809      	ldr	r0, [pc, #36]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006458:	f009 fc3e 	bl	800fcd8 <HAL_UARTEx_SetRxFifoThreshold>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8006462:	f000 f9b7 	bl	80067d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006466:	4805      	ldr	r0, [pc, #20]	; (800647c <MX_USART3_UART_Init+0x90>)
 8006468:	f009 fbbf 	bl	800fbea <HAL_UARTEx_DisableFifoMode>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8006472:	f000 f9af 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	24000334 	.word	0x24000334
 8006480:	40004800 	.word	0x40004800
 8006484:	0005dc00 	.word	0x0005dc00

08006488 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800648c:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006490:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006494:	2209      	movs	r2, #9
 8006496:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800649a:	2202      	movs	r2, #2
 800649c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064a6:	2202      	movs	r2, #2
 80064a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064be:	2201      	movs	r2, #1
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064ce:	4805      	ldr	r0, [pc, #20]	; (80064e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80064d0:	f004 fb5a 	bl	800ab88 <HAL_PCD_Init>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80064da:	f000 f97b 	bl	80067d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	240004b4 	.word	0x240004b4
 80064e8:	40080000 	.word	0x40080000

080064ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <MX_DMA_Init+0x4c>)
 80064f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064f8:	4a0f      	ldr	r2, [pc, #60]	; (8006538 <MX_DMA_Init+0x4c>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006502:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <MX_DMA_Init+0x4c>)
 8006504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006510:	2200      	movs	r2, #0
 8006512:	2100      	movs	r1, #0
 8006514:	200c      	movs	r0, #12
 8006516:	f001 fa8e 	bl	8007a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800651a:	200c      	movs	r0, #12
 800651c:	f001 faa5 	bl	8007a6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	200f      	movs	r0, #15
 8006526:	f001 fa86 	bl	8007a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800652a:	200f      	movs	r0, #15
 800652c:	f001 fa9d 	bl	8007a6a <HAL_NVIC_EnableIRQ>

}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	58024400 	.word	0x58024400

0800653c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08e      	sub	sp, #56	; 0x38
 8006540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	605a      	str	r2, [r3, #4]
 800654c:	609a      	str	r2, [r3, #8]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006552:	4b8a      	ldr	r3, [pc, #552]	; (800677c <MX_GPIO_Init+0x240>)
 8006554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006558:	4a88      	ldr	r2, [pc, #544]	; (800677c <MX_GPIO_Init+0x240>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006562:	4b86      	ldr	r3, [pc, #536]	; (800677c <MX_GPIO_Init+0x240>)
 8006564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006570:	4b82      	ldr	r3, [pc, #520]	; (800677c <MX_GPIO_Init+0x240>)
 8006572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006576:	4a81      	ldr	r2, [pc, #516]	; (800677c <MX_GPIO_Init+0x240>)
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006580:	4b7e      	ldr	r3, [pc, #504]	; (800677c <MX_GPIO_Init+0x240>)
 8006582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800658e:	4b7b      	ldr	r3, [pc, #492]	; (800677c <MX_GPIO_Init+0x240>)
 8006590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006594:	4a79      	ldr	r2, [pc, #484]	; (800677c <MX_GPIO_Init+0x240>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800659e:	4b77      	ldr	r3, [pc, #476]	; (800677c <MX_GPIO_Init+0x240>)
 80065a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ac:	4b73      	ldr	r3, [pc, #460]	; (800677c <MX_GPIO_Init+0x240>)
 80065ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065b2:	4a72      	ldr	r2, [pc, #456]	; (800677c <MX_GPIO_Init+0x240>)
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065bc:	4b6f      	ldr	r3, [pc, #444]	; (800677c <MX_GPIO_Init+0x240>)
 80065be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ca:	4b6c      	ldr	r3, [pc, #432]	; (800677c <MX_GPIO_Init+0x240>)
 80065cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d0:	4a6a      	ldr	r2, [pc, #424]	; (800677c <MX_GPIO_Init+0x240>)
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065da:	4b68      	ldr	r3, [pc, #416]	; (800677c <MX_GPIO_Init+0x240>)
 80065dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065e8:	4b64      	ldr	r3, [pc, #400]	; (800677c <MX_GPIO_Init+0x240>)
 80065ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ee:	4a63      	ldr	r2, [pc, #396]	; (800677c <MX_GPIO_Init+0x240>)
 80065f0:	f043 0310 	orr.w	r3, r3, #16
 80065f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065f8:	4b60      	ldr	r3, [pc, #384]	; (800677c <MX_GPIO_Init+0x240>)
 80065fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006606:	4b5d      	ldr	r3, [pc, #372]	; (800677c <MX_GPIO_Init+0x240>)
 8006608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800660c:	4a5b      	ldr	r2, [pc, #364]	; (800677c <MX_GPIO_Init+0x240>)
 800660e:	f043 0308 	orr.w	r3, r3, #8
 8006612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006616:	4b59      	ldr	r3, [pc, #356]	; (800677c <MX_GPIO_Init+0x240>)
 8006618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006624:	4b55      	ldr	r3, [pc, #340]	; (800677c <MX_GPIO_Init+0x240>)
 8006626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800662a:	4a54      	ldr	r2, [pc, #336]	; (800677c <MX_GPIO_Init+0x240>)
 800662c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006634:	4b51      	ldr	r3, [pc, #324]	; (800677c <MX_GPIO_Init+0x240>)
 8006636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006642:	2201      	movs	r2, #1
 8006644:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8006648:	484d      	ldr	r0, [pc, #308]	; (8006780 <MX_GPIO_Init+0x244>)
 800664a:	f004 fa3b 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800664e:	2200      	movs	r2, #0
 8006650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006654:	484a      	ldr	r0, [pc, #296]	; (8006780 <MX_GPIO_Init+0x244>)
 8006656:	f004 fa35 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800665a:	2200      	movs	r2, #0
 800665c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006660:	4848      	ldr	r0, [pc, #288]	; (8006784 <MX_GPIO_Init+0x248>)
 8006662:	f004 fa2f 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006666:	2200      	movs	r2, #0
 8006668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800666c:	4846      	ldr	r0, [pc, #280]	; (8006788 <MX_GPIO_Init+0x24c>)
 800666e:	f004 fa29 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006672:	2201      	movs	r2, #1
 8006674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006678:	4844      	ldr	r0, [pc, #272]	; (800678c <MX_GPIO_Init+0x250>)
 800667a:	f004 fa23 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800667e:	230d      	movs	r3, #13
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006682:	2300      	movs	r3, #0
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006686:	2300      	movs	r3, #0
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800668a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800668e:	4619      	mov	r1, r3
 8006690:	483f      	ldr	r0, [pc, #252]	; (8006790 <MX_GPIO_Init+0x254>)
 8006692:	f004 f84f 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006696:	2308      	movs	r3, #8
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800669a:	2300      	movs	r3, #0
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80066a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a6:	4619      	mov	r1, r3
 80066a8:	483a      	ldr	r0, [pc, #232]	; (8006794 <MX_GPIO_Init+0x258>)
 80066aa:	f004 f843 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80066ae:	2302      	movs	r3, #2
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80066ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066be:	4619      	mov	r1, r3
 80066c0:	4830      	ldr	r0, [pc, #192]	; (8006784 <MX_GPIO_Init+0x248>)
 80066c2:	f004 f837 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80066c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80066d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d8:	4619      	mov	r1, r3
 80066da:	482f      	ldr	r0, [pc, #188]	; (8006798 <MX_GPIO_Init+0x25c>)
 80066dc:	f004 f82a 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80066e0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066e6:	2301      	movs	r3, #1
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f6:	4619      	mov	r1, r3
 80066f8:	4821      	ldr	r0, [pc, #132]	; (8006780 <MX_GPIO_Init+0x244>)
 80066fa:	f004 f81b 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80066fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006704:	2301      	movs	r3, #1
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800670c:	2300      	movs	r3, #0
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006714:	4619      	mov	r1, r3
 8006716:	481b      	ldr	r0, [pc, #108]	; (8006784 <MX_GPIO_Init+0x248>)
 8006718:	f004 f80c 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800671c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006722:	2301      	movs	r3, #1
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006726:	2300      	movs	r3, #0
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800672a:	2300      	movs	r3, #0
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800672e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006732:	4619      	mov	r1, r3
 8006734:	4814      	ldr	r0, [pc, #80]	; (8006788 <MX_GPIO_Init+0x24c>)
 8006736:	f003 fffd 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800673e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674c:	4619      	mov	r1, r3
 800674e:	480f      	ldr	r0, [pc, #60]	; (800678c <MX_GPIO_Init+0x250>)
 8006750:	f003 fff0 	bl	800a734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800675a:	2301      	movs	r3, #1
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675e:	2300      	movs	r3, #0
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006762:	2300      	movs	r3, #0
 8006764:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676a:	4619      	mov	r1, r3
 800676c:	4807      	ldr	r0, [pc, #28]	; (800678c <MX_GPIO_Init+0x250>)
 800676e:	f003 ffe1 	bl	800a734 <HAL_GPIO_Init>

}
 8006772:	bf00      	nop
 8006774:	3738      	adds	r7, #56	; 0x38
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
 8006780:	58021000 	.word	0x58021000
 8006784:	58020400 	.word	0x58020400
 8006788:	58020c00 	.word	0x58020c00
 800678c:	58021800 	.word	0x58021800
 8006790:	58020800 	.word	0x58020800
 8006794:	58020000 	.word	0x58020000
 8006798:	58021400 	.word	0x58021400

0800679c <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800679c:	b4b0      	push	{r4, r5, r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d10a      	bne.n	80067c2 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067b6:	1854      	adds	r4, r2, r1
 80067b8:	f143 0500 	adc.w	r5, r3, #0
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80067be:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bcb0      	pop	{r4, r5, r7}
 80067ca:	4770      	bx	lr
 80067cc:	240002e8 	.word	0x240002e8
 80067d0:	24000ea0 	.word	0x24000ea0

080067d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067d8:	b672      	cpsid	i
}
 80067da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80067dc:	e7fe      	b.n	80067dc <Error_Handler+0x8>
	...

080067e0 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ea:	4802      	ldr	r0, [pc, #8]	; (80067f4 <ST7735_Select+0x14>)
 80067ec:	f004 f96a 	bl	800aac4 <HAL_GPIO_WritePin>
}
 80067f0:	bf00      	nop
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	58021000 	.word	0x58021000

080067f8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80067fc:	2201      	movs	r2, #1
 80067fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006802:	4802      	ldr	r0, [pc, #8]	; (800680c <ST7735_Unselect+0x14>)
 8006804:	f004 f95e 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	58021000 	.word	0x58021000

08006810 <ST7735_Select1>:
static void ST7735_Select1() {
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006814:	2200      	movs	r2, #0
 8006816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800681a:	4802      	ldr	r0, [pc, #8]	; (8006824 <ST7735_Select1+0x14>)
 800681c:	f004 f952 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8006820:	bf00      	nop
 8006822:	bd80      	pop	{r7, pc}
 8006824:	58021000 	.word	0x58021000

08006828 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800682c:	2201      	movs	r2, #1
 800682e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006832:	4802      	ldr	r0, [pc, #8]	; (800683c <ST7735_Unselect1+0x14>)
 8006834:	f004 f946 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8006838:	bf00      	nop
 800683a:	bd80      	pop	{r7, pc}
 800683c:	58021000 	.word	0x58021000

08006840 <ST7735_Reset>:

static void ST7735_Reset() {
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800684a:	4807      	ldr	r0, [pc, #28]	; (8006868 <ST7735_Reset+0x28>)
 800684c:	f004 f93a 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006850:	2005      	movs	r0, #5
 8006852:	f000 ffd1 	bl	80077f8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006856:	2201      	movs	r2, #1
 8006858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800685c:	4802      	ldr	r0, [pc, #8]	; (8006868 <ST7735_Reset+0x28>)
 800685e:	f004 f931 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	58021000 	.word	0x58021000

0800686c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800687c:	4806      	ldr	r0, [pc, #24]	; (8006898 <ST7735_WriteCommand+0x2c>)
 800687e:	f004 f921 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006882:	1df9      	adds	r1, r7, #7
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	2201      	movs	r2, #1
 800688a:	4804      	ldr	r0, [pc, #16]	; (800689c <ST7735_WriteCommand+0x30>)
 800688c:	f006 ff56 	bl	800d73c <HAL_SPI_Transmit>
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	58021800 	.word	0x58021800
 800689c:	24000260 	.word	0x24000260

080068a0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80068aa:	2201      	movs	r2, #1
 80068ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068b0:	4807      	ldr	r0, [pc, #28]	; (80068d0 <ST7735_WriteData+0x30>)
 80068b2:	f004 f907 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4804      	ldr	r0, [pc, #16]	; (80068d4 <ST7735_WriteData+0x34>)
 80068c2:	f006 ff3b 	bl	800d73c <HAL_SPI_Transmit>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	58021800 	.word	0x58021800
 80068d4:	24000260 	.word	0x24000260

080068d8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80068ea:	e034      	b.n	8006956 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ffb7 	bl	800686c <ST7735_WriteCommand>

		numArgs = *addr++;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8006908:	7abb      	ldrb	r3, [r7, #10]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006912:	7abb      	ldrb	r3, [r7, #10]
 8006914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006918:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 800691a:	7abb      	ldrb	r3, [r7, #10]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006920:	7abb      	ldrb	r3, [r7, #10]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ffbb 	bl	80068a0 <ST7735_WriteData>
			addr += numArgs;
 800692a:	7abb      	ldrb	r3, [r7, #10]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006932:	89bb      	ldrh	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00e      	beq.n	8006956 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006942:	89bb      	ldrh	r3, [r7, #12]
 8006944:	2bff      	cmp	r3, #255	; 0xff
 8006946:	d102      	bne.n	800694e <ST7735_ExecuteCommandList+0x76>
 8006948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800694c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 ff51 	bl	80077f8 <HAL_Delay>
	while(numCommands--) {
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	73fa      	strb	r2, [r7, #15]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1c5      	bne.n	80068ec <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800696a:	b590      	push	{r4, r7, lr}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	4604      	mov	r4, r0
 8006972:	4608      	mov	r0, r1
 8006974:	4611      	mov	r1, r2
 8006976:	461a      	mov	r2, r3
 8006978:	4623      	mov	r3, r4
 800697a:	71fb      	strb	r3, [r7, #7]
 800697c:	4603      	mov	r3, r0
 800697e:	71bb      	strb	r3, [r7, #6]
 8006980:	460b      	mov	r3, r1
 8006982:	717b      	strb	r3, [r7, #5]
 8006984:	4613      	mov	r3, r2
 8006986:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006988:	202a      	movs	r0, #42	; 0x2a
 800698a:	f7ff ff6f 	bl	800686c <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800698e:	2300      	movs	r3, #0
 8006990:	733b      	strb	r3, [r7, #12]
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	3302      	adds	r3, #2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	737b      	strb	r3, [r7, #13]
 800699a:	2300      	movs	r3, #0
 800699c:	73bb      	strb	r3, [r7, #14]
 800699e:	797b      	ldrb	r3, [r7, #5]
 80069a0:	3302      	adds	r3, #2
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80069a6:	f107 030c 	add.w	r3, r7, #12
 80069aa:	2104      	movs	r1, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ff77 	bl	80068a0 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 80069b2:	202b      	movs	r0, #43	; 0x2b
 80069b4:	f7ff ff5a 	bl	800686c <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 80069b8:	79bb      	ldrb	r3, [r7, #6]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 80069c0:	793b      	ldrb	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80069c8:	f107 030c 	add.w	r3, r7, #12
 80069cc:	2104      	movs	r1, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff ff66 	bl	80068a0 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 80069d4:	202c      	movs	r0, #44	; 0x2c
 80069d6:	f7ff ff49 	bl	800686c <ST7735_WriteCommand>
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd90      	pop	{r4, r7, pc}
	...

080069e4 <ST7735_Init>:

void ST7735_Init() {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
	ST7735_Select();
 80069e8:	f7ff fefa 	bl	80067e0 <ST7735_Select>
	ST7735_Select1();
 80069ec:	f7ff ff10 	bl	8006810 <ST7735_Select1>
	ST7735_Reset();
 80069f0:	f7ff ff26 	bl	8006840 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80069f4:	4807      	ldr	r0, [pc, #28]	; (8006a14 <ST7735_Init+0x30>)
 80069f6:	f7ff ff6f 	bl	80068d8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80069fa:	4807      	ldr	r0, [pc, #28]	; (8006a18 <ST7735_Init+0x34>)
 80069fc:	f7ff ff6c 	bl	80068d8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8006a00:	4806      	ldr	r0, [pc, #24]	; (8006a1c <ST7735_Init+0x38>)
 8006a02:	f7ff ff69 	bl	80068d8 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8006a06:	f7ff fef7 	bl	80067f8 <ST7735_Unselect>
	ST7735_Unselect1();
 8006a0a:	f7ff ff0d 	bl	8006828 <ST7735_Unselect1>
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	08012648 	.word	0x08012648
 8006a18:	08012684 	.word	0x08012684
 8006a1c:	08012694 	.word	0x08012694

08006a20 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006a20:	b082      	sub	sp, #8
 8006a22:	b590      	push	{r4, r7, lr}
 8006a24:	b089      	sub	sp, #36	; 0x24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	80fb      	strh	r3, [r7, #6]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	80bb      	strh	r3, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	b2d8      	uxtb	r0, r3
 8006a3a:	88bb      	ldrh	r3, [r7, #4]
 8006a3c:	b2d9      	uxtb	r1, r3
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006a46:	4413      	add	r3, r2
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b2dc      	uxtb	r4, r3
 8006a4e:	88bb      	ldrh	r3, [r7, #4]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006a56:	4413      	add	r3, r2
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4622      	mov	r2, r4
 8006a60:	f7ff ff83 	bl	800696a <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e043      	b.n	8006af2 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	3b20      	subs	r3, #32
 8006a70:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	440b      	add	r3, r1
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e029      	b.n	8006ae0 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a9e:	0a1b      	lsrs	r3, r3, #8
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	743b      	strb	r3, [r7, #16]
 8006aa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006aac:	f107 0310 	add.w	r3, r7, #16
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fef4 	bl	80068a0 <ST7735_WriteData>
 8006ab8:	e00f      	b.n	8006ada <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	733b      	strb	r3, [r7, #12]
 8006ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8006ace:	f107 030c 	add.w	r3, r7, #12
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fee3 	bl	80068a0 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	3301      	adds	r3, #1
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d3cf      	bcc.n	8006a8c <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006af6:	461a      	mov	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d3b5      	bcc.n	8006a6a <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	3724      	adds	r7, #36	; 0x24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006b0a:	b002      	add	sp, #8
 8006b0c:	4770      	bx	lr

08006b0e <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006b0e:	b082      	sub	sp, #8
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	603a      	str	r2, [r7, #0]
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	80fb      	strh	r3, [r7, #6]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006b22:	f7ff fe5d 	bl	80067e0 <ST7735_Select>

	while(*str) {
 8006b26:	e02d      	b.n	8006b84 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	7d3a      	ldrb	r2, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b30:	dd13      	ble.n	8006b5a <ST7735_WriteString+0x4c>
			x = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006b36:	7d7b      	ldrb	r3, [r7, #21]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	88bb      	ldrh	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006b40:	88bb      	ldrh	r3, [r7, #4]
 8006b42:	7d7a      	ldrb	r2, [r7, #21]
 8006b44:	4413      	add	r3, r2
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	dc21      	bgt.n	8006b8e <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d103      	bne.n	8006b5a <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	603b      	str	r3, [r7, #0]
				continue;
 8006b58:	e014      	b.n	8006b84 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	88b9      	ldrh	r1, [r7, #4]
 8006b60:	88f8      	ldrh	r0, [r7, #6]
 8006b62:	8c3b      	ldrh	r3, [r7, #32]
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	8bbb      	ldrh	r3, [r7, #28]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f7ff ff56 	bl	8006a20 <ST7735_WriteChar>
		x += font.width;
 8006b74:	7d3b      	ldrb	r3, [r7, #20]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
		str++;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1cd      	bne.n	8006b28 <ST7735_WriteString+0x1a>
 8006b8c:	e000      	b.n	8006b90 <ST7735_WriteString+0x82>
				break;
 8006b8e:	bf00      	nop
	}

	ST7735_Unselect();
 8006b90:	f7ff fe32 	bl	80067f8 <ST7735_Unselect>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9e:	b002      	add	sp, #8
 8006ba0:	4770      	bx	lr

08006ba2 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af04      	add	r7, sp, #16
 8006baa:	603a      	str	r2, [r7, #0]
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	4603      	mov	r3, r0
 8006bb0:	80fb      	strh	r3, [r7, #6]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8006bb6:	f7ff fe2b 	bl	8006810 <ST7735_Select1>

	while(*str) {
 8006bba:	e02d      	b.n	8006c18 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	7d3a      	ldrb	r2, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc4:	dd13      	ble.n	8006bee <ST7735_WriteString1+0x4c>
			x = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006bca:	7d7b      	ldrb	r3, [r7, #21]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	88bb      	ldrh	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006bd4:	88bb      	ldrh	r3, [r7, #4]
 8006bd6:	7d7a      	ldrb	r2, [r7, #21]
 8006bd8:	4413      	add	r3, r2
 8006bda:	2b7f      	cmp	r3, #127	; 0x7f
 8006bdc:	dc21      	bgt.n	8006c22 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d103      	bne.n	8006bee <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	603b      	str	r3, [r7, #0]
				continue;
 8006bec:	e014      	b.n	8006c18 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	88b9      	ldrh	r1, [r7, #4]
 8006bf4:	88f8      	ldrh	r0, [r7, #6]
 8006bf6:	8c3b      	ldrh	r3, [r7, #32]
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	8bbb      	ldrh	r3, [r7, #28]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f7ff ff0c 	bl	8006a20 <ST7735_WriteChar>
		x += font.width;
 8006c08:	7d3b      	ldrb	r3, [r7, #20]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	4413      	add	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
		str++;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1cd      	bne.n	8006bbc <ST7735_WriteString1+0x1a>
 8006c20:	e000      	b.n	8006c24 <ST7735_WriteString1+0x82>
				break;
 8006c22:	bf00      	nop
	}

	ST7735_Unselect1();
 8006c24:	f7ff fe00 	bl	8006828 <ST7735_Unselect1>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c32:	b002      	add	sp, #8
 8006c34:	4770      	bx	lr

08006c36 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006c36:	b082      	sub	sp, #8
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af04      	add	r7, sp, #16
 8006c3e:	603a      	str	r2, [r7, #0]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	4603      	mov	r3, r0
 8006c44:	80fb      	strh	r3, [r7, #6]
 8006c46:	460b      	mov	r3, r1
 8006c48:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8006c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006c52:	f7ff fdc5 	bl	80067e0 <ST7735_Select>
 8006c56:	e034      	b.n	8006cc2 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8006c58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d130      	bne.n	8006cc2 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006c60:	f7ff fdd6 	bl	8006810 <ST7735_Select1>

	}


	while(*str) {
 8006c64:	e02d      	b.n	8006cc2 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	7d3a      	ldrb	r2, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6e:	dd13      	ble.n	8006c98 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006c74:	7d7b      	ldrb	r3, [r7, #21]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	88bb      	ldrh	r3, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006c7e:	88bb      	ldrh	r3, [r7, #4]
 8006c80:	7d7a      	ldrb	r2, [r7, #21]
 8006c82:	4413      	add	r3, r2
 8006c84:	2b7f      	cmp	r3, #127	; 0x7f
 8006c86:	dc21      	bgt.n	8006ccc <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d103      	bne.n	8006c98 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	603b      	str	r3, [r7, #0]
				continue;
 8006c96:	e014      	b.n	8006cc2 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781a      	ldrb	r2, [r3, #0]
 8006c9c:	88b9      	ldrh	r1, [r7, #4]
 8006c9e:	88f8      	ldrh	r0, [r7, #6]
 8006ca0:	8c3b      	ldrh	r3, [r7, #32]
 8006ca2:	9302      	str	r3, [sp, #8]
 8006ca4:	8bbb      	ldrh	r3, [r7, #28]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f7ff feb7 	bl	8006a20 <ST7735_WriteChar>
		x += font.width;
 8006cb2:	7d3b      	ldrb	r3, [r7, #20]
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	4413      	add	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
		str++;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1cd      	bne.n	8006c66 <ST7735_WriteStringNSS+0x30>
 8006cca:	e000      	b.n	8006cce <ST7735_WriteStringNSS+0x98>
				break;
 8006ccc:	bf00      	nop
	}
	if(NSS == 0){
 8006cce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8006cd6:	f7ff fd8f 	bl	80067f8 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8006cda:	e005      	b.n	8006ce8 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8006cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8006ce4:	f7ff fda0 	bl	8006828 <ST7735_Unselect1>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf2:	b002      	add	sp, #8
 8006cf4:	4770      	bx	lr
	...

08006cf8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	80fb      	strh	r3, [r7, #6]
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	80bb      	strh	r3, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	807b      	strh	r3, [r7, #2]
 8006d12:	4613      	mov	r3, r2
 8006d14:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	2b7f      	cmp	r3, #127	; 0x7f
 8006d1a:	d858      	bhi.n	8006dce <ST7735_FillRectangle+0xd6>
 8006d1c:	88bb      	ldrh	r3, [r7, #4]
 8006d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d20:	d855      	bhi.n	8006dce <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	887b      	ldrh	r3, [r7, #2]
 8006d26:	4413      	add	r3, r2
 8006d28:	2b80      	cmp	r3, #128	; 0x80
 8006d2a:	dd03      	ble.n	8006d34 <ST7735_FillRectangle+0x3c>
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006d32:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006d34:	88ba      	ldrh	r2, [r7, #4]
 8006d36:	883b      	ldrh	r3, [r7, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	dd03      	ble.n	8006d46 <ST7735_FillRectangle+0x4e>
 8006d3e:	88bb      	ldrh	r3, [r7, #4]
 8006d40:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006d44:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8006d46:	f7ff fd4b 	bl	80067e0 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	b2d8      	uxtb	r0, r3
 8006d4e:	88bb      	ldrh	r3, [r7, #4]
 8006d50:	b2d9      	uxtb	r1, r3
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	887b      	ldrh	r3, [r7, #2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b2dc      	uxtb	r4, r3
 8006d62:	88bb      	ldrh	r3, [r7, #4]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	883b      	ldrh	r3, [r7, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4622      	mov	r2, r4
 8006d74:	f7ff fdf9 	bl	800696a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006d78:	8c3b      	ldrh	r3, [r7, #32]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	733b      	strb	r3, [r7, #12]
 8006d82:	8c3b      	ldrh	r3, [r7, #32]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d8e:	4812      	ldr	r0, [pc, #72]	; (8006dd8 <ST7735_FillRectangle+0xe0>)
 8006d90:	f003 fe98 	bl	800aac4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006d94:	883b      	ldrh	r3, [r7, #0]
 8006d96:	80bb      	strh	r3, [r7, #4]
 8006d98:	e013      	b.n	8006dc2 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8006d9a:	887b      	ldrh	r3, [r7, #2]
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	e00a      	b.n	8006db6 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006da0:	f107 010c 	add.w	r1, r7, #12
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295
 8006da8:	2202      	movs	r2, #2
 8006daa:	480c      	ldr	r0, [pc, #48]	; (8006ddc <ST7735_FillRectangle+0xe4>)
 8006dac:	f006 fcc6 	bl	800d73c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	80fb      	strh	r3, [r7, #6]
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f1      	bne.n	8006da0 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8006dbc:	88bb      	ldrh	r3, [r7, #4]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	80bb      	strh	r3, [r7, #4]
 8006dc2:	88bb      	ldrh	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e8      	bne.n	8006d9a <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8006dc8:	f7ff fd16 	bl	80067f8 <ST7735_Unselect>
 8006dcc:	e000      	b.n	8006dd0 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006dce:	bf00      	nop
}
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd90      	pop	{r4, r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	58021800 	.word	0x58021800
 8006ddc:	24000260 	.word	0x24000260

08006de0 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4623      	mov	r3, r4
 8006df0:	80fb      	strh	r3, [r7, #6]
 8006df2:	4603      	mov	r3, r0
 8006df4:	80bb      	strh	r3, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	807b      	strh	r3, [r7, #2]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b7f      	cmp	r3, #127	; 0x7f
 8006e02:	d858      	bhi.n	8006eb6 <ST7735_FillRectangle1+0xd6>
 8006e04:	88bb      	ldrh	r3, [r7, #4]
 8006e06:	2b7f      	cmp	r3, #127	; 0x7f
 8006e08:	d855      	bhi.n	8006eb6 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	4413      	add	r3, r2
 8006e10:	2b80      	cmp	r3, #128	; 0x80
 8006e12:	dd03      	ble.n	8006e1c <ST7735_FillRectangle1+0x3c>
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006e1a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006e1c:	88ba      	ldrh	r2, [r7, #4]
 8006e1e:	883b      	ldrh	r3, [r7, #0]
 8006e20:	4413      	add	r3, r2
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	dd03      	ble.n	8006e2e <ST7735_FillRectangle1+0x4e>
 8006e26:	88bb      	ldrh	r3, [r7, #4]
 8006e28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006e2c:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006e2e:	f7ff fcef 	bl	8006810 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	b2d8      	uxtb	r0, r3
 8006e36:	88bb      	ldrh	r3, [r7, #4]
 8006e38:	b2d9      	uxtb	r1, r3
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	887b      	ldrh	r3, [r7, #2]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b2dc      	uxtb	r4, r3
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	883b      	ldrh	r3, [r7, #0]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4413      	add	r3, r2
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	f7ff fd85 	bl	800696a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006e60:	8c3b      	ldrh	r3, [r7, #32]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	733b      	strb	r3, [r7, #12]
 8006e6a:	8c3b      	ldrh	r3, [r7, #32]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006e70:	2201      	movs	r2, #1
 8006e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e76:	4812      	ldr	r0, [pc, #72]	; (8006ec0 <ST7735_FillRectangle1+0xe0>)
 8006e78:	f003 fe24 	bl	800aac4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006e7c:	883b      	ldrh	r3, [r7, #0]
 8006e7e:	80bb      	strh	r3, [r7, #4]
 8006e80:	e013      	b.n	8006eaa <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	80fb      	strh	r3, [r7, #6]
 8006e86:	e00a      	b.n	8006e9e <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006e88:	f107 010c 	add.w	r1, r7, #12
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e90:	2202      	movs	r2, #2
 8006e92:	480c      	ldr	r0, [pc, #48]	; (8006ec4 <ST7735_FillRectangle1+0xe4>)
 8006e94:	f006 fc52 	bl	800d73c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	80fb      	strh	r3, [r7, #6]
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f1      	bne.n	8006e88 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006ea4:	88bb      	ldrh	r3, [r7, #4]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	80bb      	strh	r3, [r7, #4]
 8006eaa:	88bb      	ldrh	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e8      	bne.n	8006e82 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8006eb0:	f7ff fcba 	bl	8006828 <ST7735_Unselect1>
 8006eb4:	e000      	b.n	8006eb8 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006eb6:	bf00      	nop
}
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	58021800 	.word	0x58021800
 8006ec4:	24000260 	.word	0x24000260

08006ec8 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	4603      	mov	r3, r0
 8006edc:	80bb      	strh	r3, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	807b      	strh	r3, [r7, #2]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eea:	d86e      	bhi.n	8006fca <ST7735_FillRectangleNSS+0x102>
 8006eec:	88bb      	ldrh	r3, [r7, #4]
 8006eee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef0:	d86b      	bhi.n	8006fca <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2b80      	cmp	r3, #128	; 0x80
 8006efa:	dd03      	ble.n	8006f04 <ST7735_FillRectangleNSS+0x3c>
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006f02:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006f04:	88ba      	ldrh	r2, [r7, #4]
 8006f06:	883b      	ldrh	r3, [r7, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	dd03      	ble.n	8006f16 <ST7735_FillRectangleNSS+0x4e>
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006f14:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8006f16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006f1e:	f7ff fc5f 	bl	80067e0 <ST7735_Select>
 8006f22:	e005      	b.n	8006f30 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006f2c:	f7ff fc70 	bl	8006810 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	b2d8      	uxtb	r0, r3
 8006f34:	88bb      	ldrh	r3, [r7, #4]
 8006f36:	b2d9      	uxtb	r1, r3
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	887b      	ldrh	r3, [r7, #2]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b2dc      	uxtb	r4, r3
 8006f48:	88bb      	ldrh	r3, [r7, #4]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	883b      	ldrh	r3, [r7, #0]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4622      	mov	r2, r4
 8006f5a:	f7ff fd06 	bl	800696a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006f5e:	8c3b      	ldrh	r3, [r7, #32]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	733b      	strb	r3, [r7, #12]
 8006f68:	8c3b      	ldrh	r3, [r7, #32]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f74:	4817      	ldr	r0, [pc, #92]	; (8006fd4 <ST7735_FillRectangleNSS+0x10c>)
 8006f76:	f003 fda5 	bl	800aac4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006f7a:	883b      	ldrh	r3, [r7, #0]
 8006f7c:	80bb      	strh	r3, [r7, #4]
 8006f7e:	e013      	b.n	8006fa8 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	80fb      	strh	r3, [r7, #6]
 8006f84:	e00a      	b.n	8006f9c <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006f86:	f107 010c 	add.w	r1, r7, #12
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	2202      	movs	r2, #2
 8006f90:	4811      	ldr	r0, [pc, #68]	; (8006fd8 <ST7735_FillRectangleNSS+0x110>)
 8006f92:	f006 fbd3 	bl	800d73c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	80fb      	strh	r3, [r7, #6]
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f1      	bne.n	8006f86 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006fa2:	88bb      	ldrh	r3, [r7, #4]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	80bb      	strh	r3, [r7, #4]
 8006fa8:	88bb      	ldrh	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e8      	bne.n	8006f80 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8006fae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8006fb6:	f7ff fc1f 	bl	80067f8 <ST7735_Unselect>
 8006fba:	e007      	b.n	8006fcc <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8006fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d103      	bne.n	8006fcc <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8006fc4:	f7ff fc30 	bl	8006828 <ST7735_Unselect1>
 8006fc8:	e000      	b.n	8006fcc <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006fca:	bf00      	nop
	}
}
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	58021800 	.word	0x58021800
 8006fd8:	24000260 	.word	0x24000260

08006fdc <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	2100      	movs	r1, #0
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f7ff fe81 	bl	8006cf8 <ST7735_FillRectangle>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af02      	add	r7, sp, #8
 8007004:	4603      	mov	r3, r0
 8007006:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	2280      	movs	r2, #128	; 0x80
 8007010:	2100      	movs	r1, #0
 8007012:	2000      	movs	r0, #0
 8007014:	f7ff fee4 	bl	8006de0 <ST7735_FillRectangle1>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_MspInit+0x30>)
 8007028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800702c:	4a08      	ldr	r2, [pc, #32]	; (8007050 <HAL_MspInit+0x30>)
 800702e:	f043 0302 	orr.w	r3, r3, #2
 8007032:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_MspInit+0x30>)
 8007038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	58024400 	.word	0x58024400

08007054 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08e      	sub	sp, #56	; 0x38
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800705c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a59      	ldr	r2, [pc, #356]	; (80071d8 <HAL_ETH_MspInit+0x184>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f040 80ab 	bne.w	80071ce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007078:	4b58      	ldr	r3, [pc, #352]	; (80071dc <HAL_ETH_MspInit+0x188>)
 800707a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800707e:	4a57      	ldr	r2, [pc, #348]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007084:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007088:	4b54      	ldr	r3, [pc, #336]	; (80071dc <HAL_ETH_MspInit+0x188>)
 800708a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800708e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007096:	4b51      	ldr	r3, [pc, #324]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800709c:	4a4f      	ldr	r2, [pc, #316]	; (80071dc <HAL_ETH_MspInit+0x188>)
 800709e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80070a6:	4b4d      	ldr	r3, [pc, #308]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070ba:	4a48      	ldr	r2, [pc, #288]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80070c4:	4b45      	ldr	r3, [pc, #276]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070d2:	4b42      	ldr	r3, [pc, #264]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d8:	4a40      	ldr	r2, [pc, #256]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070da:	f043 0304 	orr.w	r3, r3, #4
 80070de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070e2:	4b3e      	ldr	r3, [pc, #248]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f0:	4b3a      	ldr	r3, [pc, #232]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f6:	4a39      	ldr	r2, [pc, #228]	; (80071dc <HAL_ETH_MspInit+0x188>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007100:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710e:	4b33      	ldr	r3, [pc, #204]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007114:	4a31      	ldr	r2, [pc, #196]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007116:	f043 0302 	orr.w	r3, r3, #2
 800711a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800711e:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800712c:	4b2b      	ldr	r3, [pc, #172]	; (80071dc <HAL_ETH_MspInit+0x188>)
 800712e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007132:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <HAL_ETH_MspInit+0x188>)
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800713c:	4b27      	ldr	r3, [pc, #156]	; (80071dc <HAL_ETH_MspInit+0x188>)
 800713e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800714a:	2332      	movs	r3, #50	; 0x32
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800714e:	2302      	movs	r3, #2
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007156:	2300      	movs	r3, #0
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800715a:	230b      	movs	r3, #11
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800715e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007162:	4619      	mov	r1, r3
 8007164:	481e      	ldr	r0, [pc, #120]	; (80071e0 <HAL_ETH_MspInit+0x18c>)
 8007166:	f003 fae5 	bl	800a734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800716a:	2386      	movs	r3, #134	; 0x86
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800716e:	2302      	movs	r3, #2
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007172:	2300      	movs	r3, #0
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007176:	2300      	movs	r3, #0
 8007178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800717a:	230b      	movs	r3, #11
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800717e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007182:	4619      	mov	r1, r3
 8007184:	4817      	ldr	r0, [pc, #92]	; (80071e4 <HAL_ETH_MspInit+0x190>)
 8007186:	f003 fad5 	bl	800a734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800718a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007190:	2302      	movs	r3, #2
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007194:	2300      	movs	r3, #0
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007198:	2300      	movs	r3, #0
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800719c:	230b      	movs	r3, #11
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a4:	4619      	mov	r1, r3
 80071a6:	4810      	ldr	r0, [pc, #64]	; (80071e8 <HAL_ETH_MspInit+0x194>)
 80071a8:	f003 fac4 	bl	800a734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80071ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ba:	2300      	movs	r3, #0
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071be:	230b      	movs	r3, #11
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c6:	4619      	mov	r1, r3
 80071c8:	4808      	ldr	r0, [pc, #32]	; (80071ec <HAL_ETH_MspInit+0x198>)
 80071ca:	f003 fab3 	bl	800a734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80071ce:	bf00      	nop
 80071d0:	3738      	adds	r7, #56	; 0x38
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40028000 	.word	0x40028000
 80071dc:	58024400 	.word	0x58024400
 80071e0:	58020800 	.word	0x58020800
 80071e4:	58020000 	.word	0x58020000
 80071e8:	58020400 	.word	0x58020400
 80071ec:	58021800 	.word	0x58021800

080071f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <HAL_SPI_MspInit+0xc8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d14d      	bne.n	80072ae <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007212:	4b2a      	ldr	r3, [pc, #168]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007218:	4a28      	ldr	r2, [pc, #160]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 800721a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007222:	4b26      	ldr	r3, [pc, #152]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007230:	4b22      	ldr	r3, [pc, #136]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007238:	f043 0302 	orr.w	r3, r3, #2
 800723c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007240:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800724e:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007254:	4a19      	ldr	r2, [pc, #100]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <HAL_SPI_MspInit+0xcc>)
 8007260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800726c:	2304      	movs	r3, #4
 800726e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007270:	2302      	movs	r3, #2
 8007272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007274:	2302      	movs	r3, #2
 8007276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007278:	2300      	movs	r3, #0
 800727a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800727c:	2307      	movs	r3, #7
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007280:	f107 0314 	add.w	r3, r7, #20
 8007284:	4619      	mov	r1, r3
 8007286:	480e      	ldr	r0, [pc, #56]	; (80072c0 <HAL_SPI_MspInit+0xd0>)
 8007288:	f003 fa54 	bl	800a734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800728c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007292:	2302      	movs	r3, #2
 8007294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007296:	2302      	movs	r3, #2
 8007298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800729a:	2300      	movs	r3, #0
 800729c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800729e:	2306      	movs	r3, #6
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a2:	f107 0314 	add.w	r3, r7, #20
 80072a6:	4619      	mov	r1, r3
 80072a8:	4806      	ldr	r0, [pc, #24]	; (80072c4 <HAL_SPI_MspInit+0xd4>)
 80072aa:	f003 fa43 	bl	800a734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80072ae:	bf00      	nop
 80072b0:	3728      	adds	r7, #40	; 0x28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40003c00 	.word	0x40003c00
 80072bc:	58024400 	.word	0x58024400
 80072c0:	58020400 	.word	0x58020400
 80072c4:	58020800 	.word	0x58020800

080072c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <HAL_TIM_Base_MspInit+0x48>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d116      	bne.n	8007308 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80072da:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <HAL_TIM_Base_MspInit+0x4c>)
 80072dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072e0:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <HAL_TIM_Base_MspInit+0x4c>)
 80072e2:	f043 0320 	orr.w	r3, r3, #32
 80072e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80072ea:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <HAL_TIM_Base_MspInit+0x4c>)
 80072ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80072f8:	2200      	movs	r2, #0
 80072fa:	2100      	movs	r1, #0
 80072fc:	2037      	movs	r0, #55	; 0x37
 80072fe:	f000 fb9a 	bl	8007a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007302:	2037      	movs	r0, #55	; 0x37
 8007304:	f000 fbb1 	bl	8007a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40001400 	.word	0x40001400
 8007314:	58024400 	.word	0x58024400

08007318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b0b8      	sub	sp, #224	; 0xe0
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007320:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	609a      	str	r2, [r3, #8]
 800732c:	60da      	str	r2, [r3, #12]
 800732e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007330:	f107 0310 	add.w	r3, r7, #16
 8007334:	22bc      	movs	r2, #188	; 0xbc
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f009 f88d 	bl	8010458 <memset>
  if(huart->Instance==USART3)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a57      	ldr	r2, [pc, #348]	; (80074a0 <HAL_UART_MspInit+0x188>)
 8007344:	4293      	cmp	r3, r2
 8007346:	f040 80a6 	bne.w	8007496 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800734a:	2302      	movs	r3, #2
 800734c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	4618      	mov	r0, r3
 800735a:	f004 fd81 	bl	800be60 <HAL_RCCEx_PeriphCLKConfig>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8007364:	f7ff fa36 	bl	80067d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007368:	4b4e      	ldr	r3, [pc, #312]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 800736a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800736e:	4a4d      	ldr	r2, [pc, #308]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 8007370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007378:	4b4a      	ldr	r3, [pc, #296]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 800737a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800737e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007386:	4b47      	ldr	r3, [pc, #284]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 8007388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800738c:	4a45      	ldr	r2, [pc, #276]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 800738e:	f043 0308 	orr.w	r3, r3, #8
 8007392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007396:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <HAL_UART_MspInit+0x18c>)
 8007398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80073a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80073a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2302      	movs	r3, #2
 80073ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80073be:	2307      	movs	r3, #7
 80073c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80073c8:	4619      	mov	r1, r3
 80073ca:	4837      	ldr	r0, [pc, #220]	; (80074a8 <HAL_UART_MspInit+0x190>)
 80073cc:	f003 f9b2 	bl	800a734 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80073d0:	4b36      	ldr	r3, [pc, #216]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073d2:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <HAL_UART_MspInit+0x198>)
 80073d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80073d6:	4b35      	ldr	r3, [pc, #212]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073d8:	222d      	movs	r2, #45	; 0x2d
 80073da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073dc:	4b33      	ldr	r3, [pc, #204]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073de:	2200      	movs	r2, #0
 80073e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073e2:	4b32      	ldr	r3, [pc, #200]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073e8:	4b30      	ldr	r3, [pc, #192]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073f0:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073f6:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <HAL_UART_MspInit+0x194>)
 80073fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007402:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007404:	4b29      	ldr	r3, [pc, #164]	; (80074ac <HAL_UART_MspInit+0x194>)
 8007406:	2200      	movs	r2, #0
 8007408:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800740a:	4b28      	ldr	r3, [pc, #160]	; (80074ac <HAL_UART_MspInit+0x194>)
 800740c:	2200      	movs	r2, #0
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007410:	4826      	ldr	r0, [pc, #152]	; (80074ac <HAL_UART_MspInit+0x194>)
 8007412:	f000 fb45 	bl	8007aa0 <HAL_DMA_Init>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800741c:	f7ff f9da 	bl	80067d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a22      	ldr	r2, [pc, #136]	; (80074ac <HAL_UART_MspInit+0x194>)
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c
 8007426:	4a21      	ldr	r2, [pc, #132]	; (80074ac <HAL_UART_MspInit+0x194>)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800742c:	4b21      	ldr	r3, [pc, #132]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800742e:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <HAL_UART_MspInit+0x1a0>)
 8007430:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007432:	4b20      	ldr	r3, [pc, #128]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007434:	222e      	movs	r2, #46	; 0x2e
 8007436:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800743a:	2240      	movs	r2, #64	; 0x40
 800743c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800743e:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007440:	2200      	movs	r2, #0
 8007442:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800744a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800744e:	2200      	movs	r2, #0
 8007450:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007458:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800745a:	2200      	movs	r2, #0
 800745c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007460:	2200      	movs	r2, #0
 8007462:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007464:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007466:	2200      	movs	r2, #0
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800746a:	4812      	ldr	r0, [pc, #72]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800746c:	f000 fb18 	bl	8007aa0 <HAL_DMA_Init>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8007476:	f7ff f9ad 	bl	80067d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a0d      	ldr	r2, [pc, #52]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 800747e:	679a      	str	r2, [r3, #120]	; 0x78
 8007480:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <HAL_UART_MspInit+0x19c>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	2027      	movs	r0, #39	; 0x27
 800748c:	f000 fad3 	bl	8007a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007490:	2027      	movs	r0, #39	; 0x27
 8007492:	f000 faea 	bl	8007a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007496:	bf00      	nop
 8007498:	37e0      	adds	r7, #224	; 0xe0
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40004800 	.word	0x40004800
 80074a4:	58024400 	.word	0x58024400
 80074a8:	58020c00 	.word	0x58020c00
 80074ac:	240003c4 	.word	0x240003c4
 80074b0:	40020028 	.word	0x40020028
 80074b4:	2400043c 	.word	0x2400043c
 80074b8:	40020070 	.word	0x40020070

080074bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a22      	ldr	r2, [pc, #136]	; (8007564 <HAL_PCD_MspInit+0xa8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d13d      	bne.n	800755a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80074de:	f003 fcf5 	bl	800aecc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <HAL_PCD_MspInit+0xac>)
 80074e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074e8:	4a1f      	ldr	r2, [pc, #124]	; (8007568 <HAL_PCD_MspInit+0xac>)
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <HAL_PCD_MspInit+0xac>)
 80074f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007500:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007506:	2302      	movs	r3, #2
 8007508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007512:	230a      	movs	r3, #10
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	4619      	mov	r1, r3
 800751c:	4813      	ldr	r0, [pc, #76]	; (800756c <HAL_PCD_MspInit+0xb0>)
 800751e:	f003 f909 	bl	800a734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007530:	f107 0314 	add.w	r3, r7, #20
 8007534:	4619      	mov	r1, r3
 8007536:	480d      	ldr	r0, [pc, #52]	; (800756c <HAL_PCD_MspInit+0xb0>)
 8007538:	f003 f8fc 	bl	800a734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <HAL_PCD_MspInit+0xac>)
 800753e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <HAL_PCD_MspInit+0xac>)
 8007544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007548:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800754c:	4b06      	ldr	r3, [pc, #24]	; (8007568 <HAL_PCD_MspInit+0xac>)
 800754e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800755a:	bf00      	nop
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40080000 	.word	0x40080000
 8007568:	58024400 	.word	0x58024400
 800756c:	58020000 	.word	0x58020000

08007570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007574:	e7fe      	b.n	8007574 <NMI_Handler+0x4>

08007576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007576:	b480      	push	{r7}
 8007578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800757a:	e7fe      	b.n	800757a <HardFault_Handler+0x4>

0800757c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007580:	e7fe      	b.n	8007580 <MemManage_Handler+0x4>

08007582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007582:	b480      	push	{r7}
 8007584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007586:	e7fe      	b.n	8007586 <BusFault_Handler+0x4>

08007588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800758c:	e7fe      	b.n	800758c <UsageFault_Handler+0x4>

0800758e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800758e:	b480      	push	{r7}
 8007590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007592:	bf00      	nop
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075a0:	bf00      	nop
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075aa:	b480      	push	{r7}
 80075ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075ae:	bf00      	nop
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075bc:	f000 f8fc 	bl	80077b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075c0:	bf00      	nop
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80075c8:	4802      	ldr	r0, [pc, #8]	; (80075d4 <DMA1_Stream1_IRQHandler+0x10>)
 80075ca:	f001 fb29 	bl	8008c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	240003c4 	.word	0x240003c4

080075d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80075dc:	4802      	ldr	r0, [pc, #8]	; (80075e8 <DMA1_Stream4_IRQHandler+0x10>)
 80075de:	f001 fb1f 	bl	8008c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80075e2:	bf00      	nop
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2400043c 	.word	0x2400043c

080075ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80075f0:	4802      	ldr	r0, [pc, #8]	; (80075fc <USART3_IRQHandler+0x10>)
 80075f2:	f006 ff59 	bl	800e4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80075f6:	bf00      	nop
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	24000334 	.word	0x24000334

08007600 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007604:	4802      	ldr	r0, [pc, #8]	; (8007610 <TIM7_IRQHandler+0x10>)
 8007606:	f006 fc72 	bl	800deee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800760a:	bf00      	nop
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	240002e8 	.word	0x240002e8

08007614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <_sbrk+0x5c>)
 800761e:	4b15      	ldr	r3, [pc, #84]	; (8007674 <_sbrk+0x60>)
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <_sbrk+0x64>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <_sbrk+0x64>)
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <_sbrk+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <_sbrk+0x64>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d207      	bcs.n	8007654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007644:	f008 fede 	bl	8010404 <__errno>
 8007648:	4603      	mov	r3, r0
 800764a:	220c      	movs	r2, #12
 800764c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295
 8007652:	e009      	b.n	8007668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <_sbrk+0x64>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <_sbrk+0x64>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	4a05      	ldr	r2, [pc, #20]	; (8007678 <_sbrk+0x64>)
 8007664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	24080000 	.word	0x24080000
 8007674:	00000400 	.word	0x00000400
 8007678:	24000eb0 	.word	0x24000eb0
 800767c:	24000ec8 	.word	0x24000ec8

08007680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007684:	f7fe fc0e 	bl	8005ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007688:	480c      	ldr	r0, [pc, #48]	; (80076bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800768a:	490d      	ldr	r1, [pc, #52]	; (80076c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800768c:	4a0d      	ldr	r2, [pc, #52]	; (80076c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800768e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007690:	e002      	b.n	8007698 <LoopCopyDataInit>

08007692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007696:	3304      	adds	r3, #4

08007698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800769a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800769c:	d3f9      	bcc.n	8007692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800769e:	4a0a      	ldr	r2, [pc, #40]	; (80076c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076a0:	4c0a      	ldr	r4, [pc, #40]	; (80076cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80076a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076a4:	e001      	b.n	80076aa <LoopFillZerobss>

080076a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076a8:	3204      	adds	r2, #4

080076aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076ac:	d3fb      	bcc.n	80076a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80076ae:	f008 feaf 	bl	8010410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076b2:	f7fe fc8d 	bl	8005fd0 <main>
  bx  lr
 80076b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80076b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80076bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80076c0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80076c4:	08012734 	.word	0x08012734
  ldr r2, =_sbss
 80076c8:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 80076cc:	24000ec8 	.word	0x24000ec8

080076d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076d0:	e7fe      	b.n	80076d0 <ADC3_IRQHandler>
	...

080076d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076da:	2003      	movs	r0, #3
 80076dc:	f000 f9a0 	bl	8007a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076e0:	f004 f9e8 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <HAL_Init+0x68>)
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	4913      	ldr	r1, [pc, #76]	; (8007740 <HAL_Init+0x6c>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
 80076fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_Init+0x68>)
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	4a0e      	ldr	r2, [pc, #56]	; (8007740 <HAL_Init+0x6c>)
 8007708:	5cd3      	ldrb	r3, [r2, r3]
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <HAL_Init+0x70>)
 8007716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007718:	4a0b      	ldr	r2, [pc, #44]	; (8007748 <HAL_Init+0x74>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800771e:	2000      	movs	r0, #0
 8007720:	f000 f814 	bl	800774c <HAL_InitTick>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e002      	b.n	8007734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800772e:	f7ff fc77 	bl	8007020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	58024400 	.word	0x58024400
 8007740:	08011170 	.word	0x08011170
 8007744:	24000008 	.word	0x24000008
 8007748:	24000004 	.word	0x24000004

0800774c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007754:	4b15      	ldr	r3, [pc, #84]	; (80077ac <HAL_InitTick+0x60>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e021      	b.n	80077a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <HAL_InitTick+0x64>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b11      	ldr	r3, [pc, #68]	; (80077ac <HAL_InitTick+0x60>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800776e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f985 	bl	8007a86 <HAL_SYSTICK_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e00e      	b.n	80077a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b0f      	cmp	r3, #15
 800778a:	d80a      	bhi.n	80077a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800778c:	2200      	movs	r2, #0
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	f000 f94f 	bl	8007a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <HAL_InitTick+0x68>)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	24000020 	.word	0x24000020
 80077b0:	24000004 	.word	0x24000004
 80077b4:	2400001c 	.word	0x2400001c

080077b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <HAL_IncTick+0x20>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	4b06      	ldr	r3, [pc, #24]	; (80077dc <HAL_IncTick+0x24>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4413      	add	r3, r2
 80077c8:	4a04      	ldr	r2, [pc, #16]	; (80077dc <HAL_IncTick+0x24>)
 80077ca:	6013      	str	r3, [r2, #0]
}
 80077cc:	bf00      	nop
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	24000020 	.word	0x24000020
 80077dc:	24000eb4 	.word	0x24000eb4

080077e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  return uwTick;
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <HAL_GetTick+0x14>)
 80077e6:	681b      	ldr	r3, [r3, #0]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	24000eb4 	.word	0x24000eb4

080077f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007800:	f7ff ffee 	bl	80077e0 <HAL_GetTick>
 8007804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d005      	beq.n	800781e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007812:	4b0a      	ldr	r3, [pc, #40]	; (800783c <HAL_Delay+0x44>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800781e:	bf00      	nop
 8007820:	f7ff ffde 	bl	80077e0 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	429a      	cmp	r2, r3
 800782e:	d8f7      	bhi.n	8007820 <HAL_Delay+0x28>
  {
  }
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	24000020 	.word	0x24000020

08007840 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <HAL_GetREVID+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0c1b      	lsrs	r3, r3, #16
}
 800784a:	4618      	mov	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	5c001000 	.word	0x5c001000

08007858 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007868:	4904      	ldr	r1, [pc, #16]	; (800787c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4313      	orrs	r3, r2
 800786e:	604b      	str	r3, [r1, #4]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58000400 	.word	0x58000400

08007880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <__NVIC_SetPriorityGrouping+0x40>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800789c:	4013      	ands	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <__NVIC_SetPriorityGrouping+0x44>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078ae:	4a04      	ldr	r2, [pc, #16]	; (80078c0 <__NVIC_SetPriorityGrouping+0x40>)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	60d3      	str	r3, [r2, #12]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	e000ed00 	.word	0xe000ed00
 80078c4:	05fa0000 	.word	0x05fa0000

080078c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <__NVIC_GetPriorityGrouping+0x18>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	f003 0307 	and.w	r3, r3, #7
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	db0b      	blt.n	800790e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	f003 021f 	and.w	r2, r3, #31
 80078fc:	4907      	ldr	r1, [pc, #28]	; (800791c <__NVIC_EnableIRQ+0x38>)
 80078fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	2001      	movs	r0, #1
 8007906:	fa00 f202 	lsl.w	r2, r0, r2
 800790a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	e000e100 	.word	0xe000e100

08007920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800792c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	db0a      	blt.n	800794a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	490c      	ldr	r1, [pc, #48]	; (800796c <__NVIC_SetPriority+0x4c>)
 800793a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800793e:	0112      	lsls	r2, r2, #4
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	440b      	add	r3, r1
 8007944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007948:	e00a      	b.n	8007960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4908      	ldr	r1, [pc, #32]	; (8007970 <__NVIC_SetPriority+0x50>)
 8007950:	88fb      	ldrh	r3, [r7, #6]
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	3b04      	subs	r3, #4
 8007958:	0112      	lsls	r2, r2, #4
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	440b      	add	r3, r1
 800795e:	761a      	strb	r2, [r3, #24]
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	e000e100 	.word	0xe000e100
 8007970:	e000ed00 	.word	0xe000ed00

08007974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007974:	b480      	push	{r7}
 8007976:	b089      	sub	sp, #36	; 0x24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f1c3 0307 	rsb	r3, r3, #7
 800798e:	2b04      	cmp	r3, #4
 8007990:	bf28      	it	cs
 8007992:	2304      	movcs	r3, #4
 8007994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	3304      	adds	r3, #4
 800799a:	2b06      	cmp	r3, #6
 800799c:	d902      	bls.n	80079a4 <NVIC_EncodePriority+0x30>
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	3b03      	subs	r3, #3
 80079a2:	e000      	b.n	80079a6 <NVIC_EncodePriority+0x32>
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43da      	mvns	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	401a      	ands	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079bc:	f04f 31ff 	mov.w	r1, #4294967295
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	fa01 f303 	lsl.w	r3, r1, r3
 80079c6:	43d9      	mvns	r1, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079cc:	4313      	orrs	r3, r2
         );
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3724      	adds	r7, #36	; 0x24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ec:	d301      	bcc.n	80079f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079ee:	2301      	movs	r3, #1
 80079f0:	e00f      	b.n	8007a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079f2:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <SysTick_Config+0x40>)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079fa:	210f      	movs	r1, #15
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	f7ff ff8e 	bl	8007920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <SysTick_Config+0x40>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a0a:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <SysTick_Config+0x40>)
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	e000e010 	.word	0xe000e010

08007a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff29 	bl	8007880 <__NVIC_SetPriorityGrouping>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a44:	f7ff ff40 	bl	80078c8 <__NVIC_GetPriorityGrouping>
 8007a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	6978      	ldr	r0, [r7, #20]
 8007a50:	f7ff ff90 	bl	8007974 <NVIC_EncodePriority>
 8007a54:	4602      	mov	r2, r0
 8007a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff ff5f 	bl	8007920 <__NVIC_SetPriority>
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	4603      	mov	r3, r0
 8007a72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff ff33 	bl	80078e4 <__NVIC_EnableIRQ>
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff ffa4 	bl	80079dc <SysTick_Config>
 8007a94:	4603      	mov	r3, r0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007aa8:	f7ff fe9a 	bl	80077e0 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e316      	b.n	80080e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a66      	ldr	r2, [pc, #408]	; (8007c58 <HAL_DMA_Init+0x1b8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d04a      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a65      	ldr	r2, [pc, #404]	; (8007c5c <HAL_DMA_Init+0x1bc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d045      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a63      	ldr	r2, [pc, #396]	; (8007c60 <HAL_DMA_Init+0x1c0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d040      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a62      	ldr	r2, [pc, #392]	; (8007c64 <HAL_DMA_Init+0x1c4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d03b      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a60      	ldr	r2, [pc, #384]	; (8007c68 <HAL_DMA_Init+0x1c8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d036      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a5f      	ldr	r2, [pc, #380]	; (8007c6c <HAL_DMA_Init+0x1cc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d031      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a5d      	ldr	r2, [pc, #372]	; (8007c70 <HAL_DMA_Init+0x1d0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d02c      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a5c      	ldr	r2, [pc, #368]	; (8007c74 <HAL_DMA_Init+0x1d4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d027      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a5a      	ldr	r2, [pc, #360]	; (8007c78 <HAL_DMA_Init+0x1d8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d022      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a59      	ldr	r2, [pc, #356]	; (8007c7c <HAL_DMA_Init+0x1dc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d01d      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a57      	ldr	r2, [pc, #348]	; (8007c80 <HAL_DMA_Init+0x1e0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d018      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a56      	ldr	r2, [pc, #344]	; (8007c84 <HAL_DMA_Init+0x1e4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a54      	ldr	r2, [pc, #336]	; (8007c88 <HAL_DMA_Init+0x1e8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00e      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a53      	ldr	r2, [pc, #332]	; (8007c8c <HAL_DMA_Init+0x1ec>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a51      	ldr	r2, [pc, #324]	; (8007c90 <HAL_DMA_Init+0x1f0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d004      	beq.n	8007b58 <HAL_DMA_Init+0xb8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a50      	ldr	r2, [pc, #320]	; (8007c94 <HAL_DMA_Init+0x1f4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d101      	bne.n	8007b5c <HAL_DMA_Init+0xbc>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <HAL_DMA_Init+0xbe>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 813b 	beq.w	8007dda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a37      	ldr	r2, [pc, #220]	; (8007c58 <HAL_DMA_Init+0x1b8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d04a      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a36      	ldr	r2, [pc, #216]	; (8007c5c <HAL_DMA_Init+0x1bc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d045      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a34      	ldr	r2, [pc, #208]	; (8007c60 <HAL_DMA_Init+0x1c0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d040      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a33      	ldr	r2, [pc, #204]	; (8007c64 <HAL_DMA_Init+0x1c4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d03b      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a31      	ldr	r2, [pc, #196]	; (8007c68 <HAL_DMA_Init+0x1c8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d036      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a30      	ldr	r2, [pc, #192]	; (8007c6c <HAL_DMA_Init+0x1cc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d031      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a2e      	ldr	r2, [pc, #184]	; (8007c70 <HAL_DMA_Init+0x1d0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d02c      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a2d      	ldr	r2, [pc, #180]	; (8007c74 <HAL_DMA_Init+0x1d4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d027      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a2b      	ldr	r2, [pc, #172]	; (8007c78 <HAL_DMA_Init+0x1d8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d022      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2a      	ldr	r2, [pc, #168]	; (8007c7c <HAL_DMA_Init+0x1dc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01d      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a28      	ldr	r2, [pc, #160]	; (8007c80 <HAL_DMA_Init+0x1e0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d018      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a27      	ldr	r2, [pc, #156]	; (8007c84 <HAL_DMA_Init+0x1e4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d013      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a25      	ldr	r2, [pc, #148]	; (8007c88 <HAL_DMA_Init+0x1e8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00e      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a24      	ldr	r2, [pc, #144]	; (8007c8c <HAL_DMA_Init+0x1ec>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a22      	ldr	r2, [pc, #136]	; (8007c90 <HAL_DMA_Init+0x1f0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <HAL_DMA_Init+0x174>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a21      	ldr	r2, [pc, #132]	; (8007c94 <HAL_DMA_Init+0x1f4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d108      	bne.n	8007c26 <HAL_DMA_Init+0x186>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e007      	b.n	8007c36 <HAL_DMA_Init+0x196>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c36:	e02f      	b.n	8007c98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c38:	f7ff fdd2 	bl	80077e0 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d928      	bls.n	8007c98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2203      	movs	r2, #3
 8007c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e246      	b.n	80080e6 <HAL_DMA_Init+0x646>
 8007c58:	40020010 	.word	0x40020010
 8007c5c:	40020028 	.word	0x40020028
 8007c60:	40020040 	.word	0x40020040
 8007c64:	40020058 	.word	0x40020058
 8007c68:	40020070 	.word	0x40020070
 8007c6c:	40020088 	.word	0x40020088
 8007c70:	400200a0 	.word	0x400200a0
 8007c74:	400200b8 	.word	0x400200b8
 8007c78:	40020410 	.word	0x40020410
 8007c7c:	40020428 	.word	0x40020428
 8007c80:	40020440 	.word	0x40020440
 8007c84:	40020458 	.word	0x40020458
 8007c88:	40020470 	.word	0x40020470
 8007c8c:	40020488 	.word	0x40020488
 8007c90:	400204a0 	.word	0x400204a0
 8007c94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1c8      	bne.n	8007c38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4b83      	ldr	r3, [pc, #524]	; (8007ec0 <HAL_DMA_Init+0x420>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007cbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d107      	bne.n	8007cfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007cfc:	4b71      	ldr	r3, [pc, #452]	; (8007ec4 <HAL_DMA_Init+0x424>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4b71      	ldr	r3, [pc, #452]	; (8007ec8 <HAL_DMA_Init+0x428>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d08:	d328      	bcc.n	8007d5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b28      	cmp	r3, #40	; 0x28
 8007d10:	d903      	bls.n	8007d1a <HAL_DMA_Init+0x27a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d917      	bls.n	8007d4a <HAL_DMA_Init+0x2aa>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d20:	d903      	bls.n	8007d2a <HAL_DMA_Init+0x28a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b42      	cmp	r3, #66	; 0x42
 8007d28:	d90f      	bls.n	8007d4a <HAL_DMA_Init+0x2aa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b46      	cmp	r3, #70	; 0x46
 8007d30:	d903      	bls.n	8007d3a <HAL_DMA_Init+0x29a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b48      	cmp	r3, #72	; 0x48
 8007d38:	d907      	bls.n	8007d4a <HAL_DMA_Init+0x2aa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b4e      	cmp	r3, #78	; 0x4e
 8007d40:	d905      	bls.n	8007d4e <HAL_DMA_Init+0x2ae>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b52      	cmp	r3, #82	; 0x52
 8007d48:	d801      	bhi.n	8007d4e <HAL_DMA_Init+0x2ae>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <HAL_DMA_Init+0x2b0>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d117      	bne.n	8007db6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 ff1d 	bl	8009bd8 <DMA_CheckFifoParam>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2240      	movs	r2, #64	; 0x40
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e197      	b.n	80080e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fe58 	bl	8009a74 <DMA_CalcBaseAndBitshift>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	223f      	movs	r2, #63	; 0x3f
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	e0cd      	b.n	8007f76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a3b      	ldr	r2, [pc, #236]	; (8007ecc <HAL_DMA_Init+0x42c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d022      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a39      	ldr	r2, [pc, #228]	; (8007ed0 <HAL_DMA_Init+0x430>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01d      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a38      	ldr	r2, [pc, #224]	; (8007ed4 <HAL_DMA_Init+0x434>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d018      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a36      	ldr	r2, [pc, #216]	; (8007ed8 <HAL_DMA_Init+0x438>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a35      	ldr	r2, [pc, #212]	; (8007edc <HAL_DMA_Init+0x43c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a33      	ldr	r2, [pc, #204]	; (8007ee0 <HAL_DMA_Init+0x440>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a32      	ldr	r2, [pc, #200]	; (8007ee4 <HAL_DMA_Init+0x444>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_DMA_Init+0x38a>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a30      	ldr	r2, [pc, #192]	; (8007ee8 <HAL_DMA_Init+0x448>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d101      	bne.n	8007e2e <HAL_DMA_Init+0x38e>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <HAL_DMA_Init+0x390>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8097 	beq.w	8007f64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <HAL_DMA_Init+0x42c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d021      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a22      	ldr	r2, [pc, #136]	; (8007ed0 <HAL_DMA_Init+0x430>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01c      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a21      	ldr	r2, [pc, #132]	; (8007ed4 <HAL_DMA_Init+0x434>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d017      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1f      	ldr	r2, [pc, #124]	; (8007ed8 <HAL_DMA_Init+0x438>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d012      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <HAL_DMA_Init+0x43c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00d      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ee0 <HAL_DMA_Init+0x440>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d008      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <HAL_DMA_Init+0x444>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d003      	beq.n	8007e84 <HAL_DMA_Init+0x3e4>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a19      	ldr	r2, [pc, #100]	; (8007ee8 <HAL_DMA_Init+0x448>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <HAL_DMA_Init+0x44c>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d020      	beq.n	8007ef0 <HAL_DMA_Init+0x450>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d102      	bne.n	8007ebc <HAL_DMA_Init+0x41c>
 8007eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007eba:	e01a      	b.n	8007ef2 <HAL_DMA_Init+0x452>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e018      	b.n	8007ef2 <HAL_DMA_Init+0x452>
 8007ec0:	fe10803f 	.word	0xfe10803f
 8007ec4:	5c001000 	.word	0x5c001000
 8007ec8:	ffff0000 	.word	0xffff0000
 8007ecc:	58025408 	.word	0x58025408
 8007ed0:	5802541c 	.word	0x5802541c
 8007ed4:	58025430 	.word	0x58025430
 8007ed8:	58025444 	.word	0x58025444
 8007edc:	58025458 	.word	0x58025458
 8007ee0:	5802546c 	.word	0x5802546c
 8007ee4:	58025480 	.word	0x58025480
 8007ee8:	58025494 	.word	0x58025494
 8007eec:	fffe000f 	.word	0xfffe000f
 8007ef0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	68d2      	ldr	r2, [r2, #12]
 8007ef6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007f20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b6e      	ldr	r3, [pc, #440]	; (80080f0 <HAL_DMA_Init+0x650>)
 8007f38:	4413      	add	r3, r2
 8007f3a:	4a6e      	ldr	r2, [pc, #440]	; (80080f4 <HAL_DMA_Init+0x654>)
 8007f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f40:	091b      	lsrs	r3, r3, #4
 8007f42:	009a      	lsls	r2, r3, #2
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fd93 	bl	8009a74 <DMA_CalcBaseAndBitshift>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f56:	f003 031f 	and.w	r3, r3, #31
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	409a      	lsls	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	e008      	b.n	8007f76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2240      	movs	r2, #64	; 0x40
 8007f68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0b7      	b.n	80080e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a5f      	ldr	r2, [pc, #380]	; (80080f8 <HAL_DMA_Init+0x658>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d072      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a5d      	ldr	r2, [pc, #372]	; (80080fc <HAL_DMA_Init+0x65c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d06d      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a5c      	ldr	r2, [pc, #368]	; (8008100 <HAL_DMA_Init+0x660>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d068      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a5a      	ldr	r2, [pc, #360]	; (8008104 <HAL_DMA_Init+0x664>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d063      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a59      	ldr	r2, [pc, #356]	; (8008108 <HAL_DMA_Init+0x668>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d05e      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a57      	ldr	r2, [pc, #348]	; (800810c <HAL_DMA_Init+0x66c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d059      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a56      	ldr	r2, [pc, #344]	; (8008110 <HAL_DMA_Init+0x670>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d054      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a54      	ldr	r2, [pc, #336]	; (8008114 <HAL_DMA_Init+0x674>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d04f      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a53      	ldr	r2, [pc, #332]	; (8008118 <HAL_DMA_Init+0x678>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d04a      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a51      	ldr	r2, [pc, #324]	; (800811c <HAL_DMA_Init+0x67c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d045      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a50      	ldr	r2, [pc, #320]	; (8008120 <HAL_DMA_Init+0x680>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d040      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a4e      	ldr	r2, [pc, #312]	; (8008124 <HAL_DMA_Init+0x684>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d03b      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a4d      	ldr	r2, [pc, #308]	; (8008128 <HAL_DMA_Init+0x688>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d036      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a4b      	ldr	r2, [pc, #300]	; (800812c <HAL_DMA_Init+0x68c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d031      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a4a      	ldr	r2, [pc, #296]	; (8008130 <HAL_DMA_Init+0x690>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d02c      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a48      	ldr	r2, [pc, #288]	; (8008134 <HAL_DMA_Init+0x694>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d027      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a47      	ldr	r2, [pc, #284]	; (8008138 <HAL_DMA_Init+0x698>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d022      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a45      	ldr	r2, [pc, #276]	; (800813c <HAL_DMA_Init+0x69c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d01d      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a44      	ldr	r2, [pc, #272]	; (8008140 <HAL_DMA_Init+0x6a0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d018      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a42      	ldr	r2, [pc, #264]	; (8008144 <HAL_DMA_Init+0x6a4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a41      	ldr	r2, [pc, #260]	; (8008148 <HAL_DMA_Init+0x6a8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00e      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a3f      	ldr	r2, [pc, #252]	; (800814c <HAL_DMA_Init+0x6ac>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d009      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a3e      	ldr	r2, [pc, #248]	; (8008150 <HAL_DMA_Init+0x6b0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <HAL_DMA_Init+0x5c6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a3c      	ldr	r2, [pc, #240]	; (8008154 <HAL_DMA_Init+0x6b4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d101      	bne.n	800806a <HAL_DMA_Init+0x5ca>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <HAL_DMA_Init+0x5cc>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d032      	beq.n	80080d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 fe2d 	bl	8009cd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b80      	cmp	r3, #128	; 0x80
 800807c:	d102      	bne.n	8008084 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008098:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d010      	beq.n	80080c4 <HAL_DMA_Init+0x624>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	d80c      	bhi.n	80080c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 feaa 	bl	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	e008      	b.n	80080d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	a7fdabf8 	.word	0xa7fdabf8
 80080f4:	cccccccd 	.word	0xcccccccd
 80080f8:	40020010 	.word	0x40020010
 80080fc:	40020028 	.word	0x40020028
 8008100:	40020040 	.word	0x40020040
 8008104:	40020058 	.word	0x40020058
 8008108:	40020070 	.word	0x40020070
 800810c:	40020088 	.word	0x40020088
 8008110:	400200a0 	.word	0x400200a0
 8008114:	400200b8 	.word	0x400200b8
 8008118:	40020410 	.word	0x40020410
 800811c:	40020428 	.word	0x40020428
 8008120:	40020440 	.word	0x40020440
 8008124:	40020458 	.word	0x40020458
 8008128:	40020470 	.word	0x40020470
 800812c:	40020488 	.word	0x40020488
 8008130:	400204a0 	.word	0x400204a0
 8008134:	400204b8 	.word	0x400204b8
 8008138:	58025408 	.word	0x58025408
 800813c:	5802541c 	.word	0x5802541c
 8008140:	58025430 	.word	0x58025430
 8008144:	58025444 	.word	0x58025444
 8008148:	58025458 	.word	0x58025458
 800814c:	5802546c 	.word	0x5802546c
 8008150:	58025480 	.word	0x58025480
 8008154:	58025494 	.word	0x58025494

08008158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008160:	f7ff fb3e 	bl	80077e0 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e2dc      	b.n	800872a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d008      	beq.n	800818e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2280      	movs	r2, #128	; 0x80
 8008180:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e2cd      	b.n	800872a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a76      	ldr	r2, [pc, #472]	; (800836c <HAL_DMA_Abort+0x214>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d04a      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a74      	ldr	r2, [pc, #464]	; (8008370 <HAL_DMA_Abort+0x218>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d045      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a73      	ldr	r2, [pc, #460]	; (8008374 <HAL_DMA_Abort+0x21c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d040      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a71      	ldr	r2, [pc, #452]	; (8008378 <HAL_DMA_Abort+0x220>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d03b      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a70      	ldr	r2, [pc, #448]	; (800837c <HAL_DMA_Abort+0x224>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d036      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6e      	ldr	r2, [pc, #440]	; (8008380 <HAL_DMA_Abort+0x228>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d031      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a6d      	ldr	r2, [pc, #436]	; (8008384 <HAL_DMA_Abort+0x22c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d02c      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_DMA_Abort+0x230>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d027      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a6a      	ldr	r2, [pc, #424]	; (800838c <HAL_DMA_Abort+0x234>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d022      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a68      	ldr	r2, [pc, #416]	; (8008390 <HAL_DMA_Abort+0x238>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d01d      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a67      	ldr	r2, [pc, #412]	; (8008394 <HAL_DMA_Abort+0x23c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d018      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a65      	ldr	r2, [pc, #404]	; (8008398 <HAL_DMA_Abort+0x240>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a64      	ldr	r2, [pc, #400]	; (800839c <HAL_DMA_Abort+0x244>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a62      	ldr	r2, [pc, #392]	; (80083a0 <HAL_DMA_Abort+0x248>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a61      	ldr	r2, [pc, #388]	; (80083a4 <HAL_DMA_Abort+0x24c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_DMA_Abort+0xd6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a5f      	ldr	r2, [pc, #380]	; (80083a8 <HAL_DMA_Abort+0x250>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d101      	bne.n	8008232 <HAL_DMA_Abort+0xda>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <HAL_DMA_Abort+0xdc>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d013      	beq.n	8008260 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 021e 	bic.w	r2, r2, #30
 8008246:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008256:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e00a      	b.n	8008276 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 020e 	bic.w	r2, r2, #14
 800826e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3c      	ldr	r2, [pc, #240]	; (800836c <HAL_DMA_Abort+0x214>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d072      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a3a      	ldr	r2, [pc, #232]	; (8008370 <HAL_DMA_Abort+0x218>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d06d      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a39      	ldr	r2, [pc, #228]	; (8008374 <HAL_DMA_Abort+0x21c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d068      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <HAL_DMA_Abort+0x220>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d063      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a36      	ldr	r2, [pc, #216]	; (800837c <HAL_DMA_Abort+0x224>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d05e      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a34      	ldr	r2, [pc, #208]	; (8008380 <HAL_DMA_Abort+0x228>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d059      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a33      	ldr	r2, [pc, #204]	; (8008384 <HAL_DMA_Abort+0x22c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d054      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a31      	ldr	r2, [pc, #196]	; (8008388 <HAL_DMA_Abort+0x230>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d04f      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a30      	ldr	r2, [pc, #192]	; (800838c <HAL_DMA_Abort+0x234>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d04a      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2e      	ldr	r2, [pc, #184]	; (8008390 <HAL_DMA_Abort+0x238>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d045      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a2d      	ldr	r2, [pc, #180]	; (8008394 <HAL_DMA_Abort+0x23c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d040      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a2b      	ldr	r2, [pc, #172]	; (8008398 <HAL_DMA_Abort+0x240>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d03b      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a2a      	ldr	r2, [pc, #168]	; (800839c <HAL_DMA_Abort+0x244>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d036      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a28      	ldr	r2, [pc, #160]	; (80083a0 <HAL_DMA_Abort+0x248>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d031      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a27      	ldr	r2, [pc, #156]	; (80083a4 <HAL_DMA_Abort+0x24c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d02c      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a25      	ldr	r2, [pc, #148]	; (80083a8 <HAL_DMA_Abort+0x250>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d027      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a24      	ldr	r2, [pc, #144]	; (80083ac <HAL_DMA_Abort+0x254>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <HAL_DMA_Abort+0x258>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01d      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a21      	ldr	r2, [pc, #132]	; (80083b4 <HAL_DMA_Abort+0x25c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1f      	ldr	r2, [pc, #124]	; (80083b8 <HAL_DMA_Abort+0x260>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1e      	ldr	r2, [pc, #120]	; (80083bc <HAL_DMA_Abort+0x264>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <HAL_DMA_Abort+0x268>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <HAL_DMA_Abort+0x26c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_DMA_Abort+0x20e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <HAL_DMA_Abort+0x270>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d132      	bne.n	80083cc <HAL_DMA_Abort+0x274>
 8008366:	2301      	movs	r3, #1
 8008368:	e031      	b.n	80083ce <HAL_DMA_Abort+0x276>
 800836a:	bf00      	nop
 800836c:	40020010 	.word	0x40020010
 8008370:	40020028 	.word	0x40020028
 8008374:	40020040 	.word	0x40020040
 8008378:	40020058 	.word	0x40020058
 800837c:	40020070 	.word	0x40020070
 8008380:	40020088 	.word	0x40020088
 8008384:	400200a0 	.word	0x400200a0
 8008388:	400200b8 	.word	0x400200b8
 800838c:	40020410 	.word	0x40020410
 8008390:	40020428 	.word	0x40020428
 8008394:	40020440 	.word	0x40020440
 8008398:	40020458 	.word	0x40020458
 800839c:	40020470 	.word	0x40020470
 80083a0:	40020488 	.word	0x40020488
 80083a4:	400204a0 	.word	0x400204a0
 80083a8:	400204b8 	.word	0x400204b8
 80083ac:	58025408 	.word	0x58025408
 80083b0:	5802541c 	.word	0x5802541c
 80083b4:	58025430 	.word	0x58025430
 80083b8:	58025444 	.word	0x58025444
 80083bc:	58025458 	.word	0x58025458
 80083c0:	5802546c 	.word	0x5802546c
 80083c4:	58025480 	.word	0x58025480
 80083c8:	58025494 	.word	0x58025494
 80083cc:	2300      	movs	r3, #0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a6d      	ldr	r2, [pc, #436]	; (800859c <HAL_DMA_Abort+0x444>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d04a      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a6b      	ldr	r2, [pc, #428]	; (80085a0 <HAL_DMA_Abort+0x448>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d045      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a6a      	ldr	r2, [pc, #424]	; (80085a4 <HAL_DMA_Abort+0x44c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d040      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a68      	ldr	r2, [pc, #416]	; (80085a8 <HAL_DMA_Abort+0x450>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d03b      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a67      	ldr	r2, [pc, #412]	; (80085ac <HAL_DMA_Abort+0x454>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d036      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a65      	ldr	r2, [pc, #404]	; (80085b0 <HAL_DMA_Abort+0x458>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d031      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a64      	ldr	r2, [pc, #400]	; (80085b4 <HAL_DMA_Abort+0x45c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d02c      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a62      	ldr	r2, [pc, #392]	; (80085b8 <HAL_DMA_Abort+0x460>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d027      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a61      	ldr	r2, [pc, #388]	; (80085bc <HAL_DMA_Abort+0x464>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d022      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a5f      	ldr	r2, [pc, #380]	; (80085c0 <HAL_DMA_Abort+0x468>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01d      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a5e      	ldr	r2, [pc, #376]	; (80085c4 <HAL_DMA_Abort+0x46c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d018      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a5c      	ldr	r2, [pc, #368]	; (80085c8 <HAL_DMA_Abort+0x470>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d013      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a5b      	ldr	r2, [pc, #364]	; (80085cc <HAL_DMA_Abort+0x474>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00e      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a59      	ldr	r2, [pc, #356]	; (80085d0 <HAL_DMA_Abort+0x478>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d009      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a58      	ldr	r2, [pc, #352]	; (80085d4 <HAL_DMA_Abort+0x47c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <HAL_DMA_Abort+0x32a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a56      	ldr	r2, [pc, #344]	; (80085d8 <HAL_DMA_Abort+0x480>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d108      	bne.n	8008494 <HAL_DMA_Abort+0x33c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	e007      	b.n	80084a4 <HAL_DMA_Abort+0x34c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0201 	bic.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80084a4:	e013      	b.n	80084ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084a6:	f7ff f99b 	bl	80077e0 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d90c      	bls.n	80084ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e12d      	b.n	800872a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e5      	bne.n	80084a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2f      	ldr	r2, [pc, #188]	; (800859c <HAL_DMA_Abort+0x444>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d04a      	beq.n	800857a <HAL_DMA_Abort+0x422>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2d      	ldr	r2, [pc, #180]	; (80085a0 <HAL_DMA_Abort+0x448>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d045      	beq.n	800857a <HAL_DMA_Abort+0x422>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2c      	ldr	r2, [pc, #176]	; (80085a4 <HAL_DMA_Abort+0x44c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d040      	beq.n	800857a <HAL_DMA_Abort+0x422>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2a      	ldr	r2, [pc, #168]	; (80085a8 <HAL_DMA_Abort+0x450>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d03b      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a29      	ldr	r2, [pc, #164]	; (80085ac <HAL_DMA_Abort+0x454>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d036      	beq.n	800857a <HAL_DMA_Abort+0x422>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a27      	ldr	r2, [pc, #156]	; (80085b0 <HAL_DMA_Abort+0x458>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d031      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <HAL_DMA_Abort+0x45c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d02c      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a24      	ldr	r2, [pc, #144]	; (80085b8 <HAL_DMA_Abort+0x460>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d027      	beq.n	800857a <HAL_DMA_Abort+0x422>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a23      	ldr	r2, [pc, #140]	; (80085bc <HAL_DMA_Abort+0x464>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d022      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <HAL_DMA_Abort+0x468>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01d      	beq.n	800857a <HAL_DMA_Abort+0x422>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a20      	ldr	r2, [pc, #128]	; (80085c4 <HAL_DMA_Abort+0x46c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d018      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1e      	ldr	r2, [pc, #120]	; (80085c8 <HAL_DMA_Abort+0x470>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <HAL_DMA_Abort+0x474>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00e      	beq.n	800857a <HAL_DMA_Abort+0x422>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <HAL_DMA_Abort+0x478>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d009      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1a      	ldr	r2, [pc, #104]	; (80085d4 <HAL_DMA_Abort+0x47c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d004      	beq.n	800857a <HAL_DMA_Abort+0x422>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_DMA_Abort+0x480>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d101      	bne.n	800857e <HAL_DMA_Abort+0x426>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <HAL_DMA_Abort+0x428>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d02b      	beq.n	80085dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008588:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	223f      	movs	r2, #63	; 0x3f
 8008594:	409a      	lsls	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	609a      	str	r2, [r3, #8]
 800859a:	e02a      	b.n	80085f2 <HAL_DMA_Abort+0x49a>
 800859c:	40020010 	.word	0x40020010
 80085a0:	40020028 	.word	0x40020028
 80085a4:	40020040 	.word	0x40020040
 80085a8:	40020058 	.word	0x40020058
 80085ac:	40020070 	.word	0x40020070
 80085b0:	40020088 	.word	0x40020088
 80085b4:	400200a0 	.word	0x400200a0
 80085b8:	400200b8 	.word	0x400200b8
 80085bc:	40020410 	.word	0x40020410
 80085c0:	40020428 	.word	0x40020428
 80085c4:	40020440 	.word	0x40020440
 80085c8:	40020458 	.word	0x40020458
 80085cc:	40020470 	.word	0x40020470
 80085d0:	40020488 	.word	0x40020488
 80085d4:	400204a0 	.word	0x400204a0
 80085d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2201      	movs	r2, #1
 80085ec:	409a      	lsls	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a4f      	ldr	r2, [pc, #316]	; (8008734 <HAL_DMA_Abort+0x5dc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d072      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a4d      	ldr	r2, [pc, #308]	; (8008738 <HAL_DMA_Abort+0x5e0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d06d      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a4c      	ldr	r2, [pc, #304]	; (800873c <HAL_DMA_Abort+0x5e4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d068      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a4a      	ldr	r2, [pc, #296]	; (8008740 <HAL_DMA_Abort+0x5e8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d063      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a49      	ldr	r2, [pc, #292]	; (8008744 <HAL_DMA_Abort+0x5ec>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d05e      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a47      	ldr	r2, [pc, #284]	; (8008748 <HAL_DMA_Abort+0x5f0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d059      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a46      	ldr	r2, [pc, #280]	; (800874c <HAL_DMA_Abort+0x5f4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d054      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a44      	ldr	r2, [pc, #272]	; (8008750 <HAL_DMA_Abort+0x5f8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d04f      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a43      	ldr	r2, [pc, #268]	; (8008754 <HAL_DMA_Abort+0x5fc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d04a      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a41      	ldr	r2, [pc, #260]	; (8008758 <HAL_DMA_Abort+0x600>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d045      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a40      	ldr	r2, [pc, #256]	; (800875c <HAL_DMA_Abort+0x604>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d040      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a3e      	ldr	r2, [pc, #248]	; (8008760 <HAL_DMA_Abort+0x608>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d03b      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a3d      	ldr	r2, [pc, #244]	; (8008764 <HAL_DMA_Abort+0x60c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d036      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a3b      	ldr	r2, [pc, #236]	; (8008768 <HAL_DMA_Abort+0x610>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d031      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a3a      	ldr	r2, [pc, #232]	; (800876c <HAL_DMA_Abort+0x614>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d02c      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a38      	ldr	r2, [pc, #224]	; (8008770 <HAL_DMA_Abort+0x618>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d027      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a37      	ldr	r2, [pc, #220]	; (8008774 <HAL_DMA_Abort+0x61c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d022      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a35      	ldr	r2, [pc, #212]	; (8008778 <HAL_DMA_Abort+0x620>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01d      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a34      	ldr	r2, [pc, #208]	; (800877c <HAL_DMA_Abort+0x624>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d018      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a32      	ldr	r2, [pc, #200]	; (8008780 <HAL_DMA_Abort+0x628>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d013      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a31      	ldr	r2, [pc, #196]	; (8008784 <HAL_DMA_Abort+0x62c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00e      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a2f      	ldr	r2, [pc, #188]	; (8008788 <HAL_DMA_Abort+0x630>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d009      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a2e      	ldr	r2, [pc, #184]	; (800878c <HAL_DMA_Abort+0x634>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d004      	beq.n	80086e2 <HAL_DMA_Abort+0x58a>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a2c      	ldr	r2, [pc, #176]	; (8008790 <HAL_DMA_Abort+0x638>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <HAL_DMA_Abort+0x58e>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <HAL_DMA_Abort+0x590>
 80086e6:	2300      	movs	r3, #0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d015      	beq.n	8008718 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800870c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008716:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40020010 	.word	0x40020010
 8008738:	40020028 	.word	0x40020028
 800873c:	40020040 	.word	0x40020040
 8008740:	40020058 	.word	0x40020058
 8008744:	40020070 	.word	0x40020070
 8008748:	40020088 	.word	0x40020088
 800874c:	400200a0 	.word	0x400200a0
 8008750:	400200b8 	.word	0x400200b8
 8008754:	40020410 	.word	0x40020410
 8008758:	40020428 	.word	0x40020428
 800875c:	40020440 	.word	0x40020440
 8008760:	40020458 	.word	0x40020458
 8008764:	40020470 	.word	0x40020470
 8008768:	40020488 	.word	0x40020488
 800876c:	400204a0 	.word	0x400204a0
 8008770:	400204b8 	.word	0x400204b8
 8008774:	58025408 	.word	0x58025408
 8008778:	5802541c 	.word	0x5802541c
 800877c:	58025430 	.word	0x58025430
 8008780:	58025444 	.word	0x58025444
 8008784:	58025458 	.word	0x58025458
 8008788:	5802546c 	.word	0x5802546c
 800878c:	58025480 	.word	0x58025480
 8008790:	58025494 	.word	0x58025494

08008794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e237      	b.n	8008c16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d004      	beq.n	80087bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2280      	movs	r2, #128	; 0x80
 80087b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e22c      	b.n	8008c16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a5c      	ldr	r2, [pc, #368]	; (8008934 <HAL_DMA_Abort_IT+0x1a0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d04a      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a5b      	ldr	r2, [pc, #364]	; (8008938 <HAL_DMA_Abort_IT+0x1a4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d045      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a59      	ldr	r2, [pc, #356]	; (800893c <HAL_DMA_Abort_IT+0x1a8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d040      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a58      	ldr	r2, [pc, #352]	; (8008940 <HAL_DMA_Abort_IT+0x1ac>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d03b      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a56      	ldr	r2, [pc, #344]	; (8008944 <HAL_DMA_Abort_IT+0x1b0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d036      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a55      	ldr	r2, [pc, #340]	; (8008948 <HAL_DMA_Abort_IT+0x1b4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d031      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a53      	ldr	r2, [pc, #332]	; (800894c <HAL_DMA_Abort_IT+0x1b8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d02c      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a52      	ldr	r2, [pc, #328]	; (8008950 <HAL_DMA_Abort_IT+0x1bc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d027      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a50      	ldr	r2, [pc, #320]	; (8008954 <HAL_DMA_Abort_IT+0x1c0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d022      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a4f      	ldr	r2, [pc, #316]	; (8008958 <HAL_DMA_Abort_IT+0x1c4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d01d      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a4d      	ldr	r2, [pc, #308]	; (800895c <HAL_DMA_Abort_IT+0x1c8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d018      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a4c      	ldr	r2, [pc, #304]	; (8008960 <HAL_DMA_Abort_IT+0x1cc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d013      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a4a      	ldr	r2, [pc, #296]	; (8008964 <HAL_DMA_Abort_IT+0x1d0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a49      	ldr	r2, [pc, #292]	; (8008968 <HAL_DMA_Abort_IT+0x1d4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a47      	ldr	r2, [pc, #284]	; (800896c <HAL_DMA_Abort_IT+0x1d8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_DMA_Abort_IT+0xc8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a46      	ldr	r2, [pc, #280]	; (8008970 <HAL_DMA_Abort_IT+0x1dc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d101      	bne.n	8008860 <HAL_DMA_Abort_IT+0xcc>
 800885c:	2301      	movs	r3, #1
 800885e:	e000      	b.n	8008862 <HAL_DMA_Abort_IT+0xce>
 8008860:	2300      	movs	r3, #0
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8086 	beq.w	8008974 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a2f      	ldr	r2, [pc, #188]	; (8008934 <HAL_DMA_Abort_IT+0x1a0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d04a      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a2e      	ldr	r2, [pc, #184]	; (8008938 <HAL_DMA_Abort_IT+0x1a4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d045      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a2c      	ldr	r2, [pc, #176]	; (800893c <HAL_DMA_Abort_IT+0x1a8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d040      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2b      	ldr	r2, [pc, #172]	; (8008940 <HAL_DMA_Abort_IT+0x1ac>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d03b      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a29      	ldr	r2, [pc, #164]	; (8008944 <HAL_DMA_Abort_IT+0x1b0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d036      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a28      	ldr	r2, [pc, #160]	; (8008948 <HAL_DMA_Abort_IT+0x1b4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d031      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a26      	ldr	r2, [pc, #152]	; (800894c <HAL_DMA_Abort_IT+0x1b8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d02c      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a25      	ldr	r2, [pc, #148]	; (8008950 <HAL_DMA_Abort_IT+0x1bc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d027      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a23      	ldr	r2, [pc, #140]	; (8008954 <HAL_DMA_Abort_IT+0x1c0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d022      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a22      	ldr	r2, [pc, #136]	; (8008958 <HAL_DMA_Abort_IT+0x1c4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d01d      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a20      	ldr	r2, [pc, #128]	; (800895c <HAL_DMA_Abort_IT+0x1c8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d018      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a1f      	ldr	r2, [pc, #124]	; (8008960 <HAL_DMA_Abort_IT+0x1cc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d013      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <HAL_DMA_Abort_IT+0x1d0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00e      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1c      	ldr	r2, [pc, #112]	; (8008968 <HAL_DMA_Abort_IT+0x1d4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d009      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1a      	ldr	r2, [pc, #104]	; (800896c <HAL_DMA_Abort_IT+0x1d8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <HAL_DMA_Abort_IT+0x17c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a19      	ldr	r2, [pc, #100]	; (8008970 <HAL_DMA_Abort_IT+0x1dc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d108      	bne.n	8008922 <HAL_DMA_Abort_IT+0x18e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	e178      	b.n	8008c14 <HAL_DMA_Abort_IT+0x480>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e16f      	b.n	8008c14 <HAL_DMA_Abort_IT+0x480>
 8008934:	40020010 	.word	0x40020010
 8008938:	40020028 	.word	0x40020028
 800893c:	40020040 	.word	0x40020040
 8008940:	40020058 	.word	0x40020058
 8008944:	40020070 	.word	0x40020070
 8008948:	40020088 	.word	0x40020088
 800894c:	400200a0 	.word	0x400200a0
 8008950:	400200b8 	.word	0x400200b8
 8008954:	40020410 	.word	0x40020410
 8008958:	40020428 	.word	0x40020428
 800895c:	40020440 	.word	0x40020440
 8008960:	40020458 	.word	0x40020458
 8008964:	40020470 	.word	0x40020470
 8008968:	40020488 	.word	0x40020488
 800896c:	400204a0 	.word	0x400204a0
 8008970:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 020e 	bic.w	r2, r2, #14
 8008982:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a6c      	ldr	r2, [pc, #432]	; (8008b3c <HAL_DMA_Abort_IT+0x3a8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d04a      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a6b      	ldr	r2, [pc, #428]	; (8008b40 <HAL_DMA_Abort_IT+0x3ac>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d045      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a69      	ldr	r2, [pc, #420]	; (8008b44 <HAL_DMA_Abort_IT+0x3b0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d040      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a68      	ldr	r2, [pc, #416]	; (8008b48 <HAL_DMA_Abort_IT+0x3b4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d03b      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a66      	ldr	r2, [pc, #408]	; (8008b4c <HAL_DMA_Abort_IT+0x3b8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d036      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a65      	ldr	r2, [pc, #404]	; (8008b50 <HAL_DMA_Abort_IT+0x3bc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d031      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a63      	ldr	r2, [pc, #396]	; (8008b54 <HAL_DMA_Abort_IT+0x3c0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d02c      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a62      	ldr	r2, [pc, #392]	; (8008b58 <HAL_DMA_Abort_IT+0x3c4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d027      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a60      	ldr	r2, [pc, #384]	; (8008b5c <HAL_DMA_Abort_IT+0x3c8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d022      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a5f      	ldr	r2, [pc, #380]	; (8008b60 <HAL_DMA_Abort_IT+0x3cc>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d01d      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a5d      	ldr	r2, [pc, #372]	; (8008b64 <HAL_DMA_Abort_IT+0x3d0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d018      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a5c      	ldr	r2, [pc, #368]	; (8008b68 <HAL_DMA_Abort_IT+0x3d4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d013      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a5a      	ldr	r2, [pc, #360]	; (8008b6c <HAL_DMA_Abort_IT+0x3d8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00e      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a59      	ldr	r2, [pc, #356]	; (8008b70 <HAL_DMA_Abort_IT+0x3dc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d009      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a57      	ldr	r2, [pc, #348]	; (8008b74 <HAL_DMA_Abort_IT+0x3e0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d004      	beq.n	8008a24 <HAL_DMA_Abort_IT+0x290>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a56      	ldr	r2, [pc, #344]	; (8008b78 <HAL_DMA_Abort_IT+0x3e4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d108      	bne.n	8008a36 <HAL_DMA_Abort_IT+0x2a2>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0201 	bic.w	r2, r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e007      	b.n	8008a46 <HAL_DMA_Abort_IT+0x2b2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0201 	bic.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a3c      	ldr	r2, [pc, #240]	; (8008b3c <HAL_DMA_Abort_IT+0x3a8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d072      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a3a      	ldr	r2, [pc, #232]	; (8008b40 <HAL_DMA_Abort_IT+0x3ac>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d06d      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a39      	ldr	r2, [pc, #228]	; (8008b44 <HAL_DMA_Abort_IT+0x3b0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d068      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a37      	ldr	r2, [pc, #220]	; (8008b48 <HAL_DMA_Abort_IT+0x3b4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d063      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a36      	ldr	r2, [pc, #216]	; (8008b4c <HAL_DMA_Abort_IT+0x3b8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d05e      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a34      	ldr	r2, [pc, #208]	; (8008b50 <HAL_DMA_Abort_IT+0x3bc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d059      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a33      	ldr	r2, [pc, #204]	; (8008b54 <HAL_DMA_Abort_IT+0x3c0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d054      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a31      	ldr	r2, [pc, #196]	; (8008b58 <HAL_DMA_Abort_IT+0x3c4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d04f      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a30      	ldr	r2, [pc, #192]	; (8008b5c <HAL_DMA_Abort_IT+0x3c8>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d04a      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a2e      	ldr	r2, [pc, #184]	; (8008b60 <HAL_DMA_Abort_IT+0x3cc>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d045      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <HAL_DMA_Abort_IT+0x3d0>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d040      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a2b      	ldr	r2, [pc, #172]	; (8008b68 <HAL_DMA_Abort_IT+0x3d4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d03b      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2a      	ldr	r2, [pc, #168]	; (8008b6c <HAL_DMA_Abort_IT+0x3d8>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d036      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a28      	ldr	r2, [pc, #160]	; (8008b70 <HAL_DMA_Abort_IT+0x3dc>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d031      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a27      	ldr	r2, [pc, #156]	; (8008b74 <HAL_DMA_Abort_IT+0x3e0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d02c      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a25      	ldr	r2, [pc, #148]	; (8008b78 <HAL_DMA_Abort_IT+0x3e4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d027      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a24      	ldr	r2, [pc, #144]	; (8008b7c <HAL_DMA_Abort_IT+0x3e8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d022      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a22      	ldr	r2, [pc, #136]	; (8008b80 <HAL_DMA_Abort_IT+0x3ec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01d      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a21      	ldr	r2, [pc, #132]	; (8008b84 <HAL_DMA_Abort_IT+0x3f0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d018      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a1f      	ldr	r2, [pc, #124]	; (8008b88 <HAL_DMA_Abort_IT+0x3f4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d013      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1e      	ldr	r2, [pc, #120]	; (8008b8c <HAL_DMA_Abort_IT+0x3f8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00e      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1c      	ldr	r2, [pc, #112]	; (8008b90 <HAL_DMA_Abort_IT+0x3fc>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d009      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <HAL_DMA_Abort_IT+0x400>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d004      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x3a2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a19      	ldr	r2, [pc, #100]	; (8008b98 <HAL_DMA_Abort_IT+0x404>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d132      	bne.n	8008b9c <HAL_DMA_Abort_IT+0x408>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e031      	b.n	8008b9e <HAL_DMA_Abort_IT+0x40a>
 8008b3a:	bf00      	nop
 8008b3c:	40020010 	.word	0x40020010
 8008b40:	40020028 	.word	0x40020028
 8008b44:	40020040 	.word	0x40020040
 8008b48:	40020058 	.word	0x40020058
 8008b4c:	40020070 	.word	0x40020070
 8008b50:	40020088 	.word	0x40020088
 8008b54:	400200a0 	.word	0x400200a0
 8008b58:	400200b8 	.word	0x400200b8
 8008b5c:	40020410 	.word	0x40020410
 8008b60:	40020428 	.word	0x40020428
 8008b64:	40020440 	.word	0x40020440
 8008b68:	40020458 	.word	0x40020458
 8008b6c:	40020470 	.word	0x40020470
 8008b70:	40020488 	.word	0x40020488
 8008b74:	400204a0 	.word	0x400204a0
 8008b78:	400204b8 	.word	0x400204b8
 8008b7c:	58025408 	.word	0x58025408
 8008b80:	5802541c 	.word	0x5802541c
 8008b84:	58025430 	.word	0x58025430
 8008b88:	58025444 	.word	0x58025444
 8008b8c:	58025458 	.word	0x58025458
 8008b90:	5802546c 	.word	0x5802546c
 8008b94:	58025480 	.word	0x58025480
 8008b98:	58025494 	.word	0x58025494
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d028      	beq.n	8008bf4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	409a      	lsls	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008bd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00c      	beq.n	8008bf4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008be8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008bf2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop

08008c20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08a      	sub	sp, #40	; 0x28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c2c:	4b67      	ldr	r3, [pc, #412]	; (8008dcc <HAL_DMA_IRQHandler+0x1ac>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a67      	ldr	r2, [pc, #412]	; (8008dd0 <HAL_DMA_IRQHandler+0x1b0>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	0a9b      	lsrs	r3, r3, #10
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a5f      	ldr	r2, [pc, #380]	; (8008dd4 <HAL_DMA_IRQHandler+0x1b4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d04a      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a5d      	ldr	r2, [pc, #372]	; (8008dd8 <HAL_DMA_IRQHandler+0x1b8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d045      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a5c      	ldr	r2, [pc, #368]	; (8008ddc <HAL_DMA_IRQHandler+0x1bc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d040      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a5a      	ldr	r2, [pc, #360]	; (8008de0 <HAL_DMA_IRQHandler+0x1c0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d03b      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a59      	ldr	r2, [pc, #356]	; (8008de4 <HAL_DMA_IRQHandler+0x1c4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d036      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a57      	ldr	r2, [pc, #348]	; (8008de8 <HAL_DMA_IRQHandler+0x1c8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d031      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a56      	ldr	r2, [pc, #344]	; (8008dec <HAL_DMA_IRQHandler+0x1cc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d02c      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a54      	ldr	r2, [pc, #336]	; (8008df0 <HAL_DMA_IRQHandler+0x1d0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d027      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a53      	ldr	r2, [pc, #332]	; (8008df4 <HAL_DMA_IRQHandler+0x1d4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d022      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a51      	ldr	r2, [pc, #324]	; (8008df8 <HAL_DMA_IRQHandler+0x1d8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01d      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a50      	ldr	r2, [pc, #320]	; (8008dfc <HAL_DMA_IRQHandler+0x1dc>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d018      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a4e      	ldr	r2, [pc, #312]	; (8008e00 <HAL_DMA_IRQHandler+0x1e0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d013      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a4d      	ldr	r2, [pc, #308]	; (8008e04 <HAL_DMA_IRQHandler+0x1e4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00e      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a4b      	ldr	r2, [pc, #300]	; (8008e08 <HAL_DMA_IRQHandler+0x1e8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d009      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a4a      	ldr	r2, [pc, #296]	; (8008e0c <HAL_DMA_IRQHandler+0x1ec>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d004      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xd2>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a48      	ldr	r2, [pc, #288]	; (8008e10 <HAL_DMA_IRQHandler+0x1f0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d101      	bne.n	8008cf6 <HAL_DMA_IRQHandler+0xd6>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <HAL_DMA_IRQHandler+0xd8>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 842b 	beq.w	8009554 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	2208      	movs	r2, #8
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a2 	beq.w	8008e58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a2e      	ldr	r2, [pc, #184]	; (8008dd4 <HAL_DMA_IRQHandler+0x1b4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d04a      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a2d      	ldr	r2, [pc, #180]	; (8008dd8 <HAL_DMA_IRQHandler+0x1b8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d045      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <HAL_DMA_IRQHandler+0x1bc>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d040      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <HAL_DMA_IRQHandler+0x1c0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d03b      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a28      	ldr	r2, [pc, #160]	; (8008de4 <HAL_DMA_IRQHandler+0x1c4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d036      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a27      	ldr	r2, [pc, #156]	; (8008de8 <HAL_DMA_IRQHandler+0x1c8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d031      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <HAL_DMA_IRQHandler+0x1cc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d02c      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a24      	ldr	r2, [pc, #144]	; (8008df0 <HAL_DMA_IRQHandler+0x1d0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d027      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <HAL_DMA_IRQHandler+0x1d4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d022      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <HAL_DMA_IRQHandler+0x1d8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d01d      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1f      	ldr	r2, [pc, #124]	; (8008dfc <HAL_DMA_IRQHandler+0x1dc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d018      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1e      	ldr	r2, [pc, #120]	; (8008e00 <HAL_DMA_IRQHandler+0x1e0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d013      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1c      	ldr	r2, [pc, #112]	; (8008e04 <HAL_DMA_IRQHandler+0x1e4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00e      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1b      	ldr	r2, [pc, #108]	; (8008e08 <HAL_DMA_IRQHandler+0x1e8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d009      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a19      	ldr	r2, [pc, #100]	; (8008e0c <HAL_DMA_IRQHandler+0x1ec>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d004      	beq.n	8008db4 <HAL_DMA_IRQHandler+0x194>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <HAL_DMA_IRQHandler+0x1f0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d12f      	bne.n	8008e14 <HAL_DMA_IRQHandler+0x1f4>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bf14      	ite	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	2300      	moveq	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	e02e      	b.n	8008e28 <HAL_DMA_IRQHandler+0x208>
 8008dca:	bf00      	nop
 8008dcc:	24000004 	.word	0x24000004
 8008dd0:	1b4e81b5 	.word	0x1b4e81b5
 8008dd4:	40020010 	.word	0x40020010
 8008dd8:	40020028 	.word	0x40020028
 8008ddc:	40020040 	.word	0x40020040
 8008de0:	40020058 	.word	0x40020058
 8008de4:	40020070 	.word	0x40020070
 8008de8:	40020088 	.word	0x40020088
 8008dec:	400200a0 	.word	0x400200a0
 8008df0:	400200b8 	.word	0x400200b8
 8008df4:	40020410 	.word	0x40020410
 8008df8:	40020428 	.word	0x40020428
 8008dfc:	40020440 	.word	0x40020440
 8008e00:	40020458 	.word	0x40020458
 8008e04:	40020470 	.word	0x40020470
 8008e08:	40020488 	.word	0x40020488
 8008e0c:	400204a0 	.word	0x400204a0
 8008e10:	400204b8 	.word	0x400204b8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf14      	ite	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	2300      	moveq	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d015      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0204 	bic.w	r2, r2, #4
 8008e3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	2208      	movs	r2, #8
 8008e46:	409a      	lsls	r2, r3
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e50:	f043 0201 	orr.w	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e5c:	f003 031f 	and.w	r3, r3, #31
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d06e      	beq.n	8008f4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a69      	ldr	r2, [pc, #420]	; (8009018 <HAL_DMA_IRQHandler+0x3f8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d04a      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a67      	ldr	r2, [pc, #412]	; (800901c <HAL_DMA_IRQHandler+0x3fc>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d045      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a66      	ldr	r2, [pc, #408]	; (8009020 <HAL_DMA_IRQHandler+0x400>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d040      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a64      	ldr	r2, [pc, #400]	; (8009024 <HAL_DMA_IRQHandler+0x404>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d03b      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a63      	ldr	r2, [pc, #396]	; (8009028 <HAL_DMA_IRQHandler+0x408>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d036      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a61      	ldr	r2, [pc, #388]	; (800902c <HAL_DMA_IRQHandler+0x40c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d031      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a60      	ldr	r2, [pc, #384]	; (8009030 <HAL_DMA_IRQHandler+0x410>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d02c      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a5e      	ldr	r2, [pc, #376]	; (8009034 <HAL_DMA_IRQHandler+0x414>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d027      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a5d      	ldr	r2, [pc, #372]	; (8009038 <HAL_DMA_IRQHandler+0x418>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d022      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a5b      	ldr	r2, [pc, #364]	; (800903c <HAL_DMA_IRQHandler+0x41c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d01d      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a5a      	ldr	r2, [pc, #360]	; (8009040 <HAL_DMA_IRQHandler+0x420>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d018      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a58      	ldr	r2, [pc, #352]	; (8009044 <HAL_DMA_IRQHandler+0x424>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d013      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a57      	ldr	r2, [pc, #348]	; (8009048 <HAL_DMA_IRQHandler+0x428>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00e      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a55      	ldr	r2, [pc, #340]	; (800904c <HAL_DMA_IRQHandler+0x42c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d009      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a54      	ldr	r2, [pc, #336]	; (8009050 <HAL_DMA_IRQHandler+0x430>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d004      	beq.n	8008f0e <HAL_DMA_IRQHandler+0x2ee>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a52      	ldr	r2, [pc, #328]	; (8009054 <HAL_DMA_IRQHandler+0x434>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d10a      	bne.n	8008f24 <HAL_DMA_IRQHandler+0x304>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e003      	b.n	8008f2c <HAL_DMA_IRQHandler+0x30c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00d      	beq.n	8008f4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	2201      	movs	r2, #1
 8008f3a:	409a      	lsls	r2, r3
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f44:	f043 0202 	orr.w	r2, r3, #2
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	2204      	movs	r2, #4
 8008f56:	409a      	lsls	r2, r3
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 808f 	beq.w	8009080 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <HAL_DMA_IRQHandler+0x3f8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d04a      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a2a      	ldr	r2, [pc, #168]	; (800901c <HAL_DMA_IRQHandler+0x3fc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d045      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a29      	ldr	r2, [pc, #164]	; (8009020 <HAL_DMA_IRQHandler+0x400>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d040      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a27      	ldr	r2, [pc, #156]	; (8009024 <HAL_DMA_IRQHandler+0x404>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d03b      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a26      	ldr	r2, [pc, #152]	; (8009028 <HAL_DMA_IRQHandler+0x408>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d036      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a24      	ldr	r2, [pc, #144]	; (800902c <HAL_DMA_IRQHandler+0x40c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d031      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a23      	ldr	r2, [pc, #140]	; (8009030 <HAL_DMA_IRQHandler+0x410>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d02c      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a21      	ldr	r2, [pc, #132]	; (8009034 <HAL_DMA_IRQHandler+0x414>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d027      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a20      	ldr	r2, [pc, #128]	; (8009038 <HAL_DMA_IRQHandler+0x418>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d022      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1e      	ldr	r2, [pc, #120]	; (800903c <HAL_DMA_IRQHandler+0x41c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d01d      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1d      	ldr	r2, [pc, #116]	; (8009040 <HAL_DMA_IRQHandler+0x420>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d018      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	; (8009044 <HAL_DMA_IRQHandler+0x424>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d013      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1a      	ldr	r2, [pc, #104]	; (8009048 <HAL_DMA_IRQHandler+0x428>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00e      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a18      	ldr	r2, [pc, #96]	; (800904c <HAL_DMA_IRQHandler+0x42c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d009      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a17      	ldr	r2, [pc, #92]	; (8009050 <HAL_DMA_IRQHandler+0x430>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d004      	beq.n	8009002 <HAL_DMA_IRQHandler+0x3e2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a15      	ldr	r2, [pc, #84]	; (8009054 <HAL_DMA_IRQHandler+0x434>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d12a      	bne.n	8009058 <HAL_DMA_IRQHandler+0x438>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	bf14      	ite	ne
 8009010:	2301      	movne	r3, #1
 8009012:	2300      	moveq	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	e023      	b.n	8009060 <HAL_DMA_IRQHandler+0x440>
 8009018:	40020010 	.word	0x40020010
 800901c:	40020028 	.word	0x40020028
 8009020:	40020040 	.word	0x40020040
 8009024:	40020058 	.word	0x40020058
 8009028:	40020070 	.word	0x40020070
 800902c:	40020088 	.word	0x40020088
 8009030:	400200a0 	.word	0x400200a0
 8009034:	400200b8 	.word	0x400200b8
 8009038:	40020410 	.word	0x40020410
 800903c:	40020428 	.word	0x40020428
 8009040:	40020440 	.word	0x40020440
 8009044:	40020458 	.word	0x40020458
 8009048:	40020470 	.word	0x40020470
 800904c:	40020488 	.word	0x40020488
 8009050:	400204a0 	.word	0x400204a0
 8009054:	400204b8 	.word	0x400204b8
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00d      	beq.n	8009080 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	2204      	movs	r2, #4
 800906e:	409a      	lsls	r2, r3
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009078:	f043 0204 	orr.w	r2, r3, #4
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009084:	f003 031f 	and.w	r3, r3, #31
 8009088:	2210      	movs	r2, #16
 800908a:	409a      	lsls	r2, r3
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80a6 	beq.w	80091e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a85      	ldr	r2, [pc, #532]	; (80092b0 <HAL_DMA_IRQHandler+0x690>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d04a      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a83      	ldr	r2, [pc, #524]	; (80092b4 <HAL_DMA_IRQHandler+0x694>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d045      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a82      	ldr	r2, [pc, #520]	; (80092b8 <HAL_DMA_IRQHandler+0x698>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d040      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a80      	ldr	r2, [pc, #512]	; (80092bc <HAL_DMA_IRQHandler+0x69c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d03b      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a7f      	ldr	r2, [pc, #508]	; (80092c0 <HAL_DMA_IRQHandler+0x6a0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d036      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a7d      	ldr	r2, [pc, #500]	; (80092c4 <HAL_DMA_IRQHandler+0x6a4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d031      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a7c      	ldr	r2, [pc, #496]	; (80092c8 <HAL_DMA_IRQHandler+0x6a8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d02c      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a7a      	ldr	r2, [pc, #488]	; (80092cc <HAL_DMA_IRQHandler+0x6ac>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d027      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a79      	ldr	r2, [pc, #484]	; (80092d0 <HAL_DMA_IRQHandler+0x6b0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d022      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a77      	ldr	r2, [pc, #476]	; (80092d4 <HAL_DMA_IRQHandler+0x6b4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d01d      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a76      	ldr	r2, [pc, #472]	; (80092d8 <HAL_DMA_IRQHandler+0x6b8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d018      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a74      	ldr	r2, [pc, #464]	; (80092dc <HAL_DMA_IRQHandler+0x6bc>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d013      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a73      	ldr	r2, [pc, #460]	; (80092e0 <HAL_DMA_IRQHandler+0x6c0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00e      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a71      	ldr	r2, [pc, #452]	; (80092e4 <HAL_DMA_IRQHandler+0x6c4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d009      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a70      	ldr	r2, [pc, #448]	; (80092e8 <HAL_DMA_IRQHandler+0x6c8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d004      	beq.n	8009136 <HAL_DMA_IRQHandler+0x516>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a6e      	ldr	r2, [pc, #440]	; (80092ec <HAL_DMA_IRQHandler+0x6cc>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d10a      	bne.n	800914c <HAL_DMA_IRQHandler+0x52c>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	bf14      	ite	ne
 8009144:	2301      	movne	r3, #1
 8009146:	2300      	moveq	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	e009      	b.n	8009160 <HAL_DMA_IRQHandler+0x540>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	2b00      	cmp	r3, #0
 8009158:	bf14      	ite	ne
 800915a:	2301      	movne	r3, #1
 800915c:	2300      	moveq	r3, #0
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d03e      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009168:	f003 031f 	and.w	r3, r3, #31
 800916c:	2210      	movs	r2, #16
 800916e:	409a      	lsls	r2, r3
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d018      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009194:	2b00      	cmp	r3, #0
 8009196:	d024      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
 80091a0:	e01f      	b.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01b      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
 80091b2:	e016      	b.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d107      	bne.n	80091d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0208 	bic.w	r2, r2, #8
 80091d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e6:	f003 031f 	and.w	r3, r3, #31
 80091ea:	2220      	movs	r2, #32
 80091ec:	409a      	lsls	r2, r3
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8110 	beq.w	8009418 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a2c      	ldr	r2, [pc, #176]	; (80092b0 <HAL_DMA_IRQHandler+0x690>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d04a      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a2b      	ldr	r2, [pc, #172]	; (80092b4 <HAL_DMA_IRQHandler+0x694>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d045      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <HAL_DMA_IRQHandler+0x698>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d040      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a28      	ldr	r2, [pc, #160]	; (80092bc <HAL_DMA_IRQHandler+0x69c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d03b      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <HAL_DMA_IRQHandler+0x6a0>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d036      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a25      	ldr	r2, [pc, #148]	; (80092c4 <HAL_DMA_IRQHandler+0x6a4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d031      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a23      	ldr	r2, [pc, #140]	; (80092c8 <HAL_DMA_IRQHandler+0x6a8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d02c      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a22      	ldr	r2, [pc, #136]	; (80092cc <HAL_DMA_IRQHandler+0x6ac>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d027      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a20      	ldr	r2, [pc, #128]	; (80092d0 <HAL_DMA_IRQHandler+0x6b0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d022      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1f      	ldr	r2, [pc, #124]	; (80092d4 <HAL_DMA_IRQHandler+0x6b4>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d01d      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1d      	ldr	r2, [pc, #116]	; (80092d8 <HAL_DMA_IRQHandler+0x6b8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d018      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1c      	ldr	r2, [pc, #112]	; (80092dc <HAL_DMA_IRQHandler+0x6bc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d013      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1a      	ldr	r2, [pc, #104]	; (80092e0 <HAL_DMA_IRQHandler+0x6c0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00e      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <HAL_DMA_IRQHandler+0x6c4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d009      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <HAL_DMA_IRQHandler+0x6c8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_DMA_IRQHandler+0x678>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a16      	ldr	r2, [pc, #88]	; (80092ec <HAL_DMA_IRQHandler+0x6cc>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d12b      	bne.n	80092f0 <HAL_DMA_IRQHandler+0x6d0>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bf14      	ite	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	2300      	moveq	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	e02a      	b.n	8009304 <HAL_DMA_IRQHandler+0x6e4>
 80092ae:	bf00      	nop
 80092b0:	40020010 	.word	0x40020010
 80092b4:	40020028 	.word	0x40020028
 80092b8:	40020040 	.word	0x40020040
 80092bc:	40020058 	.word	0x40020058
 80092c0:	40020070 	.word	0x40020070
 80092c4:	40020088 	.word	0x40020088
 80092c8:	400200a0 	.word	0x400200a0
 80092cc:	400200b8 	.word	0x400200b8
 80092d0:	40020410 	.word	0x40020410
 80092d4:	40020428 	.word	0x40020428
 80092d8:	40020440 	.word	0x40020440
 80092dc:	40020458 	.word	0x40020458
 80092e0:	40020470 	.word	0x40020470
 80092e4:	40020488 	.word	0x40020488
 80092e8:	400204a0 	.word	0x400204a0
 80092ec:	400204b8 	.word	0x400204b8
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf14      	ite	ne
 80092fe:	2301      	movne	r3, #1
 8009300:	2300      	moveq	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8087 	beq.w	8009418 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2220      	movs	r2, #32
 8009314:	409a      	lsls	r2, r3
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b04      	cmp	r3, #4
 8009324:	d139      	bne.n	800939a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0216 	bic.w	r2, r2, #22
 8009334:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009344:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <HAL_DMA_IRQHandler+0x736>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0208 	bic.w	r2, r2, #8
 8009364:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936a:	f003 031f 	and.w	r3, r3, #31
 800936e:	223f      	movs	r2, #63	; 0x3f
 8009370:	409a      	lsls	r2, r3
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 834a 	beq.w	8009a24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
          }
          return;
 8009398:	e344      	b.n	8009a24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d018      	beq.n	80093da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02c      	beq.n	8009418 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	e027      	b.n	8009418 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d023      	beq.n	8009418 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	4798      	blx	r3
 80093d8:	e01e      	b.n	8009418 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10f      	bne.n	8009408 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0210 	bic.w	r2, r2, #16
 80093f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8306 	beq.w	8009a2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 8088 	beq.w	8009540 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2204      	movs	r2, #4
 8009434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a7a      	ldr	r2, [pc, #488]	; (8009628 <HAL_DMA_IRQHandler+0xa08>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d04a      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a79      	ldr	r2, [pc, #484]	; (800962c <HAL_DMA_IRQHandler+0xa0c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d045      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a77      	ldr	r2, [pc, #476]	; (8009630 <HAL_DMA_IRQHandler+0xa10>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d040      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a76      	ldr	r2, [pc, #472]	; (8009634 <HAL_DMA_IRQHandler+0xa14>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d03b      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a74      	ldr	r2, [pc, #464]	; (8009638 <HAL_DMA_IRQHandler+0xa18>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d036      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a73      	ldr	r2, [pc, #460]	; (800963c <HAL_DMA_IRQHandler+0xa1c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d031      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a71      	ldr	r2, [pc, #452]	; (8009640 <HAL_DMA_IRQHandler+0xa20>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d02c      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a70      	ldr	r2, [pc, #448]	; (8009644 <HAL_DMA_IRQHandler+0xa24>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d027      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a6e      	ldr	r2, [pc, #440]	; (8009648 <HAL_DMA_IRQHandler+0xa28>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d022      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a6d      	ldr	r2, [pc, #436]	; (800964c <HAL_DMA_IRQHandler+0xa2c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d01d      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a6b      	ldr	r2, [pc, #428]	; (8009650 <HAL_DMA_IRQHandler+0xa30>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d018      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a6a      	ldr	r2, [pc, #424]	; (8009654 <HAL_DMA_IRQHandler+0xa34>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d013      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a68      	ldr	r2, [pc, #416]	; (8009658 <HAL_DMA_IRQHandler+0xa38>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00e      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a67      	ldr	r2, [pc, #412]	; (800965c <HAL_DMA_IRQHandler+0xa3c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d009      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a65      	ldr	r2, [pc, #404]	; (8009660 <HAL_DMA_IRQHandler+0xa40>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d004      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x8b8>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a64      	ldr	r2, [pc, #400]	; (8009664 <HAL_DMA_IRQHandler+0xa44>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d108      	bne.n	80094ea <HAL_DMA_IRQHandler+0x8ca>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e007      	b.n	80094fa <HAL_DMA_IRQHandler+0x8da>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	429a      	cmp	r2, r3
 8009504:	d307      	bcc.n	8009516 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1f2      	bne.n	80094fa <HAL_DMA_IRQHandler+0x8da>
 8009514:	e000      	b.n	8009518 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009516:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2203      	movs	r2, #3
 800952a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800952e:	e003      	b.n	8009538 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8272 	beq.w	8009a2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
 8009552:	e26c      	b.n	8009a2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a43      	ldr	r2, [pc, #268]	; (8009668 <HAL_DMA_IRQHandler+0xa48>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d022      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a42      	ldr	r2, [pc, #264]	; (800966c <HAL_DMA_IRQHandler+0xa4c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d01d      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a40      	ldr	r2, [pc, #256]	; (8009670 <HAL_DMA_IRQHandler+0xa50>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d018      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a3f      	ldr	r2, [pc, #252]	; (8009674 <HAL_DMA_IRQHandler+0xa54>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d013      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a3d      	ldr	r2, [pc, #244]	; (8009678 <HAL_DMA_IRQHandler+0xa58>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00e      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a3c      	ldr	r2, [pc, #240]	; (800967c <HAL_DMA_IRQHandler+0xa5c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d009      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a3a      	ldr	r2, [pc, #232]	; (8009680 <HAL_DMA_IRQHandler+0xa60>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d004      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x984>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a39      	ldr	r2, [pc, #228]	; (8009684 <HAL_DMA_IRQHandler+0xa64>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d101      	bne.n	80095a8 <HAL_DMA_IRQHandler+0x988>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <HAL_DMA_IRQHandler+0x98a>
 80095a8:	2300      	movs	r3, #0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 823f 	beq.w	8009a2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	2204      	movs	r2, #4
 80095c2:	409a      	lsls	r2, r3
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 80cd 	beq.w	8009768 <HAL_DMA_IRQHandler+0xb48>
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80c7 	beq.w	8009768 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095de:	f003 031f 	and.w	r3, r3, #31
 80095e2:	2204      	movs	r2, #4
 80095e4:	409a      	lsls	r2, r3
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d049      	beq.n	8009688 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8210 	beq.w	8009a28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009610:	e20a      	b.n	8009a28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 8206 	beq.w	8009a28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009624:	e200      	b.n	8009a28 <HAL_DMA_IRQHandler+0xe08>
 8009626:	bf00      	nop
 8009628:	40020010 	.word	0x40020010
 800962c:	40020028 	.word	0x40020028
 8009630:	40020040 	.word	0x40020040
 8009634:	40020058 	.word	0x40020058
 8009638:	40020070 	.word	0x40020070
 800963c:	40020088 	.word	0x40020088
 8009640:	400200a0 	.word	0x400200a0
 8009644:	400200b8 	.word	0x400200b8
 8009648:	40020410 	.word	0x40020410
 800964c:	40020428 	.word	0x40020428
 8009650:	40020440 	.word	0x40020440
 8009654:	40020458 	.word	0x40020458
 8009658:	40020470 	.word	0x40020470
 800965c:	40020488 	.word	0x40020488
 8009660:	400204a0 	.word	0x400204a0
 8009664:	400204b8 	.word	0x400204b8
 8009668:	58025408 	.word	0x58025408
 800966c:	5802541c 	.word	0x5802541c
 8009670:	58025430 	.word	0x58025430
 8009674:	58025444 	.word	0x58025444
 8009678:	58025458 	.word	0x58025458
 800967c:	5802546c 	.word	0x5802546c
 8009680:	58025480 	.word	0x58025480
 8009684:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d160      	bne.n	8009754 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a7f      	ldr	r2, [pc, #508]	; (8009894 <HAL_DMA_IRQHandler+0xc74>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d04a      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a7d      	ldr	r2, [pc, #500]	; (8009898 <HAL_DMA_IRQHandler+0xc78>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d045      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a7c      	ldr	r2, [pc, #496]	; (800989c <HAL_DMA_IRQHandler+0xc7c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d040      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a7a      	ldr	r2, [pc, #488]	; (80098a0 <HAL_DMA_IRQHandler+0xc80>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d03b      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a79      	ldr	r2, [pc, #484]	; (80098a4 <HAL_DMA_IRQHandler+0xc84>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d036      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a77      	ldr	r2, [pc, #476]	; (80098a8 <HAL_DMA_IRQHandler+0xc88>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d031      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a76      	ldr	r2, [pc, #472]	; (80098ac <HAL_DMA_IRQHandler+0xc8c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d02c      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a74      	ldr	r2, [pc, #464]	; (80098b0 <HAL_DMA_IRQHandler+0xc90>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d027      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a73      	ldr	r2, [pc, #460]	; (80098b4 <HAL_DMA_IRQHandler+0xc94>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d022      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a71      	ldr	r2, [pc, #452]	; (80098b8 <HAL_DMA_IRQHandler+0xc98>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01d      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a70      	ldr	r2, [pc, #448]	; (80098bc <HAL_DMA_IRQHandler+0xc9c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d018      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a6e      	ldr	r2, [pc, #440]	; (80098c0 <HAL_DMA_IRQHandler+0xca0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a6d      	ldr	r2, [pc, #436]	; (80098c4 <HAL_DMA_IRQHandler+0xca4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a6b      	ldr	r2, [pc, #428]	; (80098c8 <HAL_DMA_IRQHandler+0xca8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d009      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a6a      	ldr	r2, [pc, #424]	; (80098cc <HAL_DMA_IRQHandler+0xcac>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_DMA_IRQHandler+0xb12>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a68      	ldr	r2, [pc, #416]	; (80098d0 <HAL_DMA_IRQHandler+0xcb0>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d108      	bne.n	8009744 <HAL_DMA_IRQHandler+0xb24>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0208 	bic.w	r2, r2, #8
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	e007      	b.n	8009754 <HAL_DMA_IRQHandler+0xb34>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0204 	bic.w	r2, r2, #4
 8009752:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8165 	beq.w	8009a28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009766:	e15f      	b.n	8009a28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	2202      	movs	r2, #2
 8009772:	409a      	lsls	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4013      	ands	r3, r2
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80c5 	beq.w	8009908 <HAL_DMA_IRQHandler+0xce8>
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80bf 	beq.w	8009908 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978e:	f003 031f 	and.w	r3, r3, #31
 8009792:	2202      	movs	r2, #2
 8009794:	409a      	lsls	r2, r3
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d018      	beq.n	80097d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 813a 	beq.w	8009a2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097c0:	e134      	b.n	8009a2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8130 	beq.w	8009a2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097d4:	e12a      	b.n	8009a2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f040 8089 	bne.w	80098f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a2b      	ldr	r2, [pc, #172]	; (8009894 <HAL_DMA_IRQHandler+0xc74>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d04a      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a29      	ldr	r2, [pc, #164]	; (8009898 <HAL_DMA_IRQHandler+0xc78>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d045      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a28      	ldr	r2, [pc, #160]	; (800989c <HAL_DMA_IRQHandler+0xc7c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d040      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <HAL_DMA_IRQHandler+0xc80>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d03b      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <HAL_DMA_IRQHandler+0xc84>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d036      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a23      	ldr	r2, [pc, #140]	; (80098a8 <HAL_DMA_IRQHandler+0xc88>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d031      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a22      	ldr	r2, [pc, #136]	; (80098ac <HAL_DMA_IRQHandler+0xc8c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d02c      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <HAL_DMA_IRQHandler+0xc90>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d027      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a1f      	ldr	r2, [pc, #124]	; (80098b4 <HAL_DMA_IRQHandler+0xc94>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d022      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <HAL_DMA_IRQHandler+0xc98>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d01d      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1c      	ldr	r2, [pc, #112]	; (80098bc <HAL_DMA_IRQHandler+0xc9c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d018      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_DMA_IRQHandler+0xca0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d013      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a19      	ldr	r2, [pc, #100]	; (80098c4 <HAL_DMA_IRQHandler+0xca4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00e      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <HAL_DMA_IRQHandler+0xca8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d009      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a16      	ldr	r2, [pc, #88]	; (80098cc <HAL_DMA_IRQHandler+0xcac>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d004      	beq.n	8009882 <HAL_DMA_IRQHandler+0xc62>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a14      	ldr	r2, [pc, #80]	; (80098d0 <HAL_DMA_IRQHandler+0xcb0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d128      	bne.n	80098d4 <HAL_DMA_IRQHandler+0xcb4>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0214 	bic.w	r2, r2, #20
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e027      	b.n	80098e4 <HAL_DMA_IRQHandler+0xcc4>
 8009894:	40020010 	.word	0x40020010
 8009898:	40020028 	.word	0x40020028
 800989c:	40020040 	.word	0x40020040
 80098a0:	40020058 	.word	0x40020058
 80098a4:	40020070 	.word	0x40020070
 80098a8:	40020088 	.word	0x40020088
 80098ac:	400200a0 	.word	0x400200a0
 80098b0:	400200b8 	.word	0x400200b8
 80098b4:	40020410 	.word	0x40020410
 80098b8:	40020428 	.word	0x40020428
 80098bc:	40020440 	.word	0x40020440
 80098c0:	40020458 	.word	0x40020458
 80098c4:	40020470 	.word	0x40020470
 80098c8:	40020488 	.word	0x40020488
 80098cc:	400204a0 	.word	0x400204a0
 80098d0:	400204b8 	.word	0x400204b8
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 020a 	bic.w	r2, r2, #10
 80098e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8097 	beq.w	8009a2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009906:	e091      	b.n	8009a2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2208      	movs	r2, #8
 8009912:	409a      	lsls	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4013      	ands	r3, r2
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8088 	beq.w	8009a2e <HAL_DMA_IRQHandler+0xe0e>
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8082 	beq.w	8009a2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a41      	ldr	r2, [pc, #260]	; (8009a34 <HAL_DMA_IRQHandler+0xe14>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d04a      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a3f      	ldr	r2, [pc, #252]	; (8009a38 <HAL_DMA_IRQHandler+0xe18>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d045      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a3e      	ldr	r2, [pc, #248]	; (8009a3c <HAL_DMA_IRQHandler+0xe1c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d040      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a3c      	ldr	r2, [pc, #240]	; (8009a40 <HAL_DMA_IRQHandler+0xe20>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d03b      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a3b      	ldr	r2, [pc, #236]	; (8009a44 <HAL_DMA_IRQHandler+0xe24>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d036      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a39      	ldr	r2, [pc, #228]	; (8009a48 <HAL_DMA_IRQHandler+0xe28>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d031      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a38      	ldr	r2, [pc, #224]	; (8009a4c <HAL_DMA_IRQHandler+0xe2c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d02c      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a36      	ldr	r2, [pc, #216]	; (8009a50 <HAL_DMA_IRQHandler+0xe30>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d027      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a35      	ldr	r2, [pc, #212]	; (8009a54 <HAL_DMA_IRQHandler+0xe34>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d022      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a33      	ldr	r2, [pc, #204]	; (8009a58 <HAL_DMA_IRQHandler+0xe38>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d01d      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a32      	ldr	r2, [pc, #200]	; (8009a5c <HAL_DMA_IRQHandler+0xe3c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d018      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a30      	ldr	r2, [pc, #192]	; (8009a60 <HAL_DMA_IRQHandler+0xe40>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d013      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a2f      	ldr	r2, [pc, #188]	; (8009a64 <HAL_DMA_IRQHandler+0xe44>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00e      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a2d      	ldr	r2, [pc, #180]	; (8009a68 <HAL_DMA_IRQHandler+0xe48>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d009      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a2c      	ldr	r2, [pc, #176]	; (8009a6c <HAL_DMA_IRQHandler+0xe4c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d004      	beq.n	80099ca <HAL_DMA_IRQHandler+0xdaa>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a2a      	ldr	r2, [pc, #168]	; (8009a70 <HAL_DMA_IRQHandler+0xe50>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d108      	bne.n	80099dc <HAL_DMA_IRQHandler+0xdbc>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 021c 	bic.w	r2, r2, #28
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e007      	b.n	80099ec <HAL_DMA_IRQHandler+0xdcc>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 020e 	bic.w	r2, r2, #14
 80099ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f0:	f003 031f 	and.w	r3, r3, #31
 80099f4:	2201      	movs	r2, #1
 80099f6:	409a      	lsls	r2, r3
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
 8009a22:	e004      	b.n	8009a2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009a24:	bf00      	nop
 8009a26:	e002      	b.n	8009a2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a28:	bf00      	nop
 8009a2a:	e000      	b.n	8009a2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009a2e:	3728      	adds	r7, #40	; 0x28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40020010 	.word	0x40020010
 8009a38:	40020028 	.word	0x40020028
 8009a3c:	40020040 	.word	0x40020040
 8009a40:	40020058 	.word	0x40020058
 8009a44:	40020070 	.word	0x40020070
 8009a48:	40020088 	.word	0x40020088
 8009a4c:	400200a0 	.word	0x400200a0
 8009a50:	400200b8 	.word	0x400200b8
 8009a54:	40020410 	.word	0x40020410
 8009a58:	40020428 	.word	0x40020428
 8009a5c:	40020440 	.word	0x40020440
 8009a60:	40020458 	.word	0x40020458
 8009a64:	40020470 	.word	0x40020470
 8009a68:	40020488 	.word	0x40020488
 8009a6c:	400204a0 	.word	0x400204a0
 8009a70:	400204b8 	.word	0x400204b8

08009a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a42      	ldr	r2, [pc, #264]	; (8009b8c <DMA_CalcBaseAndBitshift+0x118>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d04a      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a41      	ldr	r2, [pc, #260]	; (8009b90 <DMA_CalcBaseAndBitshift+0x11c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d045      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a3f      	ldr	r2, [pc, #252]	; (8009b94 <DMA_CalcBaseAndBitshift+0x120>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d040      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a3e      	ldr	r2, [pc, #248]	; (8009b98 <DMA_CalcBaseAndBitshift+0x124>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d03b      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a3c      	ldr	r2, [pc, #240]	; (8009b9c <DMA_CalcBaseAndBitshift+0x128>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d036      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a3b      	ldr	r2, [pc, #236]	; (8009ba0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d031      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a39      	ldr	r2, [pc, #228]	; (8009ba4 <DMA_CalcBaseAndBitshift+0x130>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d02c      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a38      	ldr	r2, [pc, #224]	; (8009ba8 <DMA_CalcBaseAndBitshift+0x134>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d027      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a36      	ldr	r2, [pc, #216]	; (8009bac <DMA_CalcBaseAndBitshift+0x138>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d022      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a35      	ldr	r2, [pc, #212]	; (8009bb0 <DMA_CalcBaseAndBitshift+0x13c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d01d      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a33      	ldr	r2, [pc, #204]	; (8009bb4 <DMA_CalcBaseAndBitshift+0x140>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d018      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a32      	ldr	r2, [pc, #200]	; (8009bb8 <DMA_CalcBaseAndBitshift+0x144>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d013      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a30      	ldr	r2, [pc, #192]	; (8009bbc <DMA_CalcBaseAndBitshift+0x148>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00e      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a2f      	ldr	r2, [pc, #188]	; (8009bc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d009      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a2d      	ldr	r2, [pc, #180]	; (8009bc4 <DMA_CalcBaseAndBitshift+0x150>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <DMA_CalcBaseAndBitshift+0xa8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a2c      	ldr	r2, [pc, #176]	; (8009bc8 <DMA_CalcBaseAndBitshift+0x154>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d101      	bne.n	8009b20 <DMA_CalcBaseAndBitshift+0xac>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <DMA_CalcBaseAndBitshift+0xae>
 8009b20:	2300      	movs	r3, #0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d024      	beq.n	8009b70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	3b10      	subs	r3, #16
 8009b2e:	4a27      	ldr	r2, [pc, #156]	; (8009bcc <DMA_CalcBaseAndBitshift+0x158>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	091b      	lsrs	r3, r3, #4
 8009b36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	4a24      	ldr	r2, [pc, #144]	; (8009bd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009b40:	5cd3      	ldrb	r3, [r2, r3]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d908      	bls.n	8009b60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <DMA_CalcBaseAndBitshift+0x160>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	1d1a      	adds	r2, r3, #4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	659a      	str	r2, [r3, #88]	; 0x58
 8009b5e:	e00d      	b.n	8009b7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <DMA_CalcBaseAndBitshift+0x160>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8009b6e:	e005      	b.n	8009b7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	40020010 	.word	0x40020010
 8009b90:	40020028 	.word	0x40020028
 8009b94:	40020040 	.word	0x40020040
 8009b98:	40020058 	.word	0x40020058
 8009b9c:	40020070 	.word	0x40020070
 8009ba0:	40020088 	.word	0x40020088
 8009ba4:	400200a0 	.word	0x400200a0
 8009ba8:	400200b8 	.word	0x400200b8
 8009bac:	40020410 	.word	0x40020410
 8009bb0:	40020428 	.word	0x40020428
 8009bb4:	40020440 	.word	0x40020440
 8009bb8:	40020458 	.word	0x40020458
 8009bbc:	40020470 	.word	0x40020470
 8009bc0:	40020488 	.word	0x40020488
 8009bc4:	400204a0 	.word	0x400204a0
 8009bc8:	400204b8 	.word	0x400204b8
 8009bcc:	aaaaaaab 	.word	0xaaaaaaab
 8009bd0:	080126c0 	.word	0x080126c0
 8009bd4:	fffffc00 	.word	0xfffffc00

08009bd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d120      	bne.n	8009c2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d858      	bhi.n	8009ca6 <DMA_CheckFifoParam+0xce>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <DMA_CheckFifoParam+0x24>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009c1f 	.word	0x08009c1f
 8009c04:	08009c0d 	.word	0x08009c0d
 8009c08:	08009ca7 	.word	0x08009ca7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d048      	beq.n	8009caa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c1c:	e045      	b.n	8009caa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c26:	d142      	bne.n	8009cae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c2c:	e03f      	b.n	8009cae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c36:	d123      	bne.n	8009c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d838      	bhi.n	8009cb2 <DMA_CheckFifoParam+0xda>
 8009c40:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <DMA_CheckFifoParam+0x70>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009c5f 	.word	0x08009c5f
 8009c50:	08009c59 	.word	0x08009c59
 8009c54:	08009c71 	.word	0x08009c71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	73fb      	strb	r3, [r7, #15]
        break;
 8009c5c:	e030      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d025      	beq.n	8009cb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c6e:	e022      	b.n	8009cb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c78:	d11f      	bne.n	8009cba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c7e:	e01c      	b.n	8009cba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d902      	bls.n	8009c8e <DMA_CheckFifoParam+0xb6>
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d003      	beq.n	8009c94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009c8c:	e018      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	73fb      	strb	r3, [r7, #15]
        break;
 8009c92:	e015      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00e      	beq.n	8009cbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	e00b      	b.n	8009cbe <DMA_CheckFifoParam+0xe6>
        break;
 8009ca6:	bf00      	nop
 8009ca8:	e00a      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009caa:	bf00      	nop
 8009cac:	e008      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009cae:	bf00      	nop
 8009cb0:	e006      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009cb2:	bf00      	nop
 8009cb4:	e004      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009cb6:	bf00      	nop
 8009cb8:	e002      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009cba:	bf00      	nop
 8009cbc:	e000      	b.n	8009cc0 <DMA_CheckFifoParam+0xe8>
    break;
 8009cbe:	bf00      	nop
    }
  }

  return status;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop

08009cd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a38      	ldr	r2, [pc, #224]	; (8009dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d022      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a36      	ldr	r2, [pc, #216]	; (8009dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d01d      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a35      	ldr	r2, [pc, #212]	; (8009dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d018      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a33      	ldr	r2, [pc, #204]	; (8009dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d013      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a32      	ldr	r2, [pc, #200]	; (8009dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00e      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a30      	ldr	r2, [pc, #192]	; (8009dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d009      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a2f      	ldr	r2, [pc, #188]	; (8009ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a2d      	ldr	r2, [pc, #180]	; (8009de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d101      	bne.n	8009d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01a      	beq.n	8009d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	3b08      	subs	r3, #8
 8009d40:	4a28      	ldr	r2, [pc, #160]	; (8009de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	091b      	lsrs	r3, r3, #4
 8009d48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4b26      	ldr	r3, [pc, #152]	; (8009de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a24      	ldr	r2, [pc, #144]	; (8009dec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009d5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	2201      	movs	r2, #1
 8009d66:	409a      	lsls	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009d6c:	e024      	b.n	8009db8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	3b10      	subs	r3, #16
 8009d76:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009d78:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7c:	091b      	lsrs	r3, r3, #4
 8009d7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4a1c      	ldr	r2, [pc, #112]	; (8009df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d806      	bhi.n	8009d96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d902      	bls.n	8009d96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3308      	adds	r3, #8
 8009d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4b18      	ldr	r3, [pc, #96]	; (8009dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a16      	ldr	r2, [pc, #88]	; (8009e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 031f 	and.w	r3, r3, #31
 8009db0:	2201      	movs	r2, #1
 8009db2:	409a      	lsls	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009db8:	bf00      	nop
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	58025408 	.word	0x58025408
 8009dc8:	5802541c 	.word	0x5802541c
 8009dcc:	58025430 	.word	0x58025430
 8009dd0:	58025444 	.word	0x58025444
 8009dd4:	58025458 	.word	0x58025458
 8009dd8:	5802546c 	.word	0x5802546c
 8009ddc:	58025480 	.word	0x58025480
 8009de0:	58025494 	.word	0x58025494
 8009de4:	cccccccd 	.word	0xcccccccd
 8009de8:	16009600 	.word	0x16009600
 8009dec:	58025880 	.word	0x58025880
 8009df0:	aaaaaaab 	.word	0xaaaaaaab
 8009df4:	400204b8 	.word	0x400204b8
 8009df8:	4002040f 	.word	0x4002040f
 8009dfc:	10008200 	.word	0x10008200
 8009e00:	40020880 	.word	0x40020880

08009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04a      	beq.n	8009eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d847      	bhi.n	8009eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a25      	ldr	r2, [pc, #148]	; (8009ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d022      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a24      	ldr	r2, [pc, #144]	; (8009ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d01d      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a22      	ldr	r2, [pc, #136]	; (8009ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d018      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a21      	ldr	r2, [pc, #132]	; (8009ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d013      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00e      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d009      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d004      	beq.n	8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a1b      	ldr	r2, [pc, #108]	; (8009ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d101      	bne.n	8009e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009e70:	2301      	movs	r3, #1
 8009e72:	e000      	b.n	8009e76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009e74:	2300      	movs	r3, #0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4b17      	ldr	r3, [pc, #92]	; (8009edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	; (8009ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009e8c:	671a      	str	r2, [r3, #112]	; 0x70
 8009e8e:	e009      	b.n	8009ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a11      	ldr	r2, [pc, #68]	; (8009ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ea2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	58025408 	.word	0x58025408
 8009ec0:	5802541c 	.word	0x5802541c
 8009ec4:	58025430 	.word	0x58025430
 8009ec8:	58025444 	.word	0x58025444
 8009ecc:	58025458 	.word	0x58025458
 8009ed0:	5802546c 	.word	0x5802546c
 8009ed4:	58025480 	.word	0x58025480
 8009ed8:	58025494 	.word	0x58025494
 8009edc:	1600963f 	.word	0x1600963f
 8009ee0:	58025940 	.word	0x58025940
 8009ee4:	1000823f 	.word	0x1000823f
 8009ee8:	40020940 	.word	0x40020940

08009eec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e0cf      	b.n	800a09e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2223      	movs	r2, #35	; 0x23
 8009f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7fd f89f 	bl	8007054 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f16:	4b64      	ldr	r3, [pc, #400]	; (800a0a8 <HAL_ETH_Init+0x1bc>)
 8009f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f1c:	4a62      	ldr	r2, [pc, #392]	; (800a0a8 <HAL_ETH_Init+0x1bc>)
 8009f1e:	f043 0302 	orr.w	r3, r3, #2
 8009f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f26:	4b60      	ldr	r3, [pc, #384]	; (800a0a8 <HAL_ETH_Init+0x1bc>)
 8009f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	60bb      	str	r3, [r7, #8]
 8009f32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7a1b      	ldrb	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d103      	bne.n	8009f44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f7fd fc8b 	bl	8007858 <HAL_SYSCFG_ETHInterfaceSelect>
 8009f42:	e003      	b.n	8009f4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009f44:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009f48:	f7fd fc86 	bl	8007858 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009f4c:	4b57      	ldr	r3, [pc, #348]	; (800a0ac <HAL_ETH_Init+0x1c0>)
 8009f4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6812      	ldr	r2, [r2, #0]
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f68:	f7fd fc3a 	bl	80077e0 <HAL_GetTick>
 8009f6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009f6e:	e011      	b.n	8009f94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009f70:	f7fd fc36 	bl	80077e0 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f7e:	d909      	bls.n	8009f94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2204      	movs	r2, #4
 8009f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	22e0      	movs	r2, #224	; 0xe0
 8009f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e084      	b.n	800a09e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e4      	bne.n	8009f70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f886 	bl	800a0b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009fac:	f001 fefc 	bl	800bda8 <HAL_RCC_GetHCLKFreq>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	4a3f      	ldr	r2, [pc, #252]	; (800a0b0 <HAL_ETH_Init+0x1c4>)
 8009fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb8:	0c9a      	lsrs	r2, r3, #18
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3a01      	subs	r2, #1
 8009fc0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fa71 	bl	800a4ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009fd6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fe6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d009      	beq.n	800a00a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	22e0      	movs	r2, #224	; 0xe0
 800a002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e049      	b.n	800a09e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a016:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <HAL_ETH_Init+0x1c8>)
 800a018:	4013      	ands	r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6952      	ldr	r2, [r2, #20]
 800a01e:	0051      	lsls	r1, r2, #1
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6812      	ldr	r2, [r2, #0]
 800a024:	430b      	orrs	r3, r1
 800a026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a02a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fad9 	bl	800a5e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fb1f 	bl	800a678 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	3305      	adds	r3, #5
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	021a      	lsls	r2, r3, #8
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	3304      	adds	r3, #4
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	4619      	mov	r1, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	3303      	adds	r3, #3
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	061a      	lsls	r2, r3, #24
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	3302      	adds	r3, #2
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	041b      	lsls	r3, r3, #16
 800a06c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	3301      	adds	r3, #1
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a078:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a086:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a088:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2210      	movs	r2, #16
 800a098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	58000400 	.word	0x58000400
 800a0b0:	431bde83 	.word	0x431bde83
 800a0b4:	ffff8001 	.word	0xffff8001

0800a0b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a0d2:	f001 fe69 	bl	800bda8 <HAL_RCC_GetHCLKFreq>
 800a0d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d908      	bls.n	800a0f2 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d804      	bhi.n	800a0f2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	e027      	b.n	800a142 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	4a18      	ldr	r2, [pc, #96]	; (800a158 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d908      	bls.n	800a10c <HAL_ETH_SetMDIOClockRange+0x54>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4a17      	ldr	r2, [pc, #92]	; (800a15c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d204      	bcs.n	800a10c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e01a      	b.n	800a142 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4a13      	ldr	r2, [pc, #76]	; (800a15c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d303      	bcc.n	800a11c <HAL_ETH_SetMDIOClockRange+0x64>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4a12      	ldr	r2, [pc, #72]	; (800a160 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d911      	bls.n	800a140 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4a10      	ldr	r2, [pc, #64]	; (800a160 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d908      	bls.n	800a136 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4a0f      	ldr	r2, [pc, #60]	; (800a164 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d804      	bhi.n	800a136 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e005      	b.n	800a142 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e000      	b.n	800a142 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a140:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a14c:	bf00      	nop
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	01312cff 	.word	0x01312cff
 800a158:	02160ebf 	.word	0x02160ebf
 800a15c:	03938700 	.word	0x03938700
 800a160:	05f5e0ff 	.word	0x05f5e0ff
 800a164:	08f0d17f 	.word	0x08f0d17f

0800a168 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a17a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	791b      	ldrb	r3, [r3, #4]
 800a180:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	7b1b      	ldrb	r3, [r3, #12]
 800a188:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a18a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	7b5b      	ldrb	r3, [r3, #13]
 800a190:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	7b9b      	ldrb	r3, [r3, #14]
 800a198:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a19a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	7bdb      	ldrb	r3, [r3, #15]
 800a1a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a1a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	d102      	bne.n	800a1b2 <ETH_SetMACConfig+0x4a>
 800a1ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1b0:	e000      	b.n	800a1b4 <ETH_SetMACConfig+0x4c>
 800a1b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a1b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	7c52      	ldrb	r2, [r2, #17]
 800a1ba:	2a00      	cmp	r2, #0
 800a1bc:	d102      	bne.n	800a1c4 <ETH_SetMACConfig+0x5c>
 800a1be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a1c2:	e000      	b.n	800a1c6 <ETH_SetMACConfig+0x5e>
 800a1c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a1c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	7c9b      	ldrb	r3, [r3, #18]
 800a1cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a1ce:	431a      	orrs	r2, r3
               macconf->Speed |
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a1d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a1da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	7f1b      	ldrb	r3, [r3, #28]
 800a1e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a1e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	7f5b      	ldrb	r3, [r3, #29]
 800a1e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a1ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	7f92      	ldrb	r2, [r2, #30]
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d102      	bne.n	800a1fa <ETH_SetMACConfig+0x92>
 800a1f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1f8:	e000      	b.n	800a1fc <ETH_SetMACConfig+0x94>
 800a1fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a1fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	7fdb      	ldrb	r3, [r3, #31]
 800a202:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a204:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	d102      	bne.n	800a216 <ETH_SetMACConfig+0xae>
 800a210:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a214:	e000      	b.n	800a218 <ETH_SetMACConfig+0xb0>
 800a216:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a218:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a21e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a226:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a228:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b56      	ldr	r3, [pc, #344]	; (800a394 <ETH_SetMACConfig+0x22c>)
 800a23a:	4013      	ands	r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	68f9      	ldr	r1, [r7, #12]
 800a242:	430b      	orrs	r3, r1
 800a244:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a252:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a254:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a25c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a25e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a266:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a268:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a270:	2a00      	cmp	r2, #0
 800a272:	d102      	bne.n	800a27a <ETH_SetMACConfig+0x112>
 800a274:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a278:	e000      	b.n	800a27c <ETH_SetMACConfig+0x114>
 800a27a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a27c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	4b42      	ldr	r3, [pc, #264]	; (800a398 <ETH_SetMACConfig+0x230>)
 800a28e:	4013      	ands	r3, r2
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6812      	ldr	r2, [r2, #0]
 800a294:	68f9      	ldr	r1, [r7, #12]
 800a296:	430b      	orrs	r3, r1
 800a298:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68da      	ldr	r2, [r3, #12]
 800a2b0:	4b3a      	ldr	r3, [pc, #232]	; (800a39c <ETH_SetMACConfig+0x234>)
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	68f9      	ldr	r1, [r7, #12]
 800a2ba:	430b      	orrs	r3, r1
 800a2bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a2c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a2ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d101      	bne.n	800a2da <ETH_SetMACConfig+0x172>
 800a2d6:	2280      	movs	r2, #128	; 0x80
 800a2d8:	e000      	b.n	800a2dc <ETH_SetMACConfig+0x174>
 800a2da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a2dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	68f9      	ldr	r1, [r7, #12]
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a304:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a30c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31a:	f023 0103 	bic.w	r1, r3, #3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	430a      	orrs	r2, r1
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a332:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a34e:	2a00      	cmp	r2, #0
 800a350:	d101      	bne.n	800a356 <ETH_SetMACConfig+0x1ee>
 800a352:	2240      	movs	r2, #64	; 0x40
 800a354:	e000      	b.n	800a358 <ETH_SetMACConfig+0x1f0>
 800a356:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a358:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a360:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a36a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a378:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	430a      	orrs	r2, r1
 800a384:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a388:	bf00      	nop
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	00048083 	.word	0x00048083
 800a398:	c0f88000 	.word	0xc0f88000
 800a39c:	fffffef0 	.word	0xfffffef0

0800a3a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b38      	ldr	r3, [pc, #224]	; (800a498 <ETH_SetDMAConfig+0xf8>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	6811      	ldr	r1, [r2, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	791b      	ldrb	r3, [r3, #4]
 800a3cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a3d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	7b1b      	ldrb	r3, [r3, #12]
 800a3d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <ETH_SetDMAConfig+0xfc>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6812      	ldr	r2, [r2, #0]
 800a3f0:	68f9      	ldr	r1, [r7, #12]
 800a3f2:	430b      	orrs	r3, r1
 800a3f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	7b5b      	ldrb	r3, [r3, #13]
 800a3fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a404:	4313      	orrs	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a410:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a414:	4b22      	ldr	r3, [pc, #136]	; (800a4a0 <ETH_SetDMAConfig+0x100>)
 800a416:	4013      	ands	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	68f9      	ldr	r1, [r7, #12]
 800a41e:	430b      	orrs	r3, r1
 800a420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a424:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	7d1b      	ldrb	r3, [r3, #20]
 800a430:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a432:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	7f5b      	ldrb	r3, [r3, #29]
 800a438:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <ETH_SetDMAConfig+0x104>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	430b      	orrs	r3, r1
 800a456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a45a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	7f1b      	ldrb	r3, [r3, #28]
 800a462:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a474:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a478:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <ETH_SetDMAConfig+0x108>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6812      	ldr	r2, [r2, #0]
 800a480:	68f9      	ldr	r1, [r7, #12]
 800a482:	430b      	orrs	r3, r1
 800a484:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a488:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	ffff87fd 	.word	0xffff87fd
 800a49c:	ffff2ffe 	.word	0xffff2ffe
 800a4a0:	fffec000 	.word	0xfffec000
 800a4a4:	ffc0efef 	.word	0xffc0efef
 800a4a8:	7fc0ffff 	.word	0x7fc0ffff

0800a4ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b0a4      	sub	sp, #144	; 0x90
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a4e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a504:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a508:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a50a:	2300      	movs	r3, #0
 800a50c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a510:	2300      	movs	r3, #0
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a51a:	2300      	movs	r3, #0
 800a51c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a520:	2300      	movs	r3, #0
 800a522:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a526:	2300      	movs	r3, #0
 800a528:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a52e:	2300      	movs	r3, #0
 800a530:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a544:	2320      	movs	r3, #32
 800a546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a556:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a55c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a560:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a562:	2300      	movs	r3, #0
 800a564:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a568:	2302      	movs	r3, #2
 800a56a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a56e:	2300      	movs	r3, #0
 800a570:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a574:	2300      	movs	r3, #0
 800a576:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a580:	2301      	movs	r3, #1
 800a582:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a586:	2300      	movs	r3, #0
 800a588:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a58a:	2301      	movs	r3, #1
 800a58c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fde6 	bl	800a168 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a5b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a5c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a5cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a5d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fee1 	bl	800a3a0 <ETH_SetDMAConfig>
}
 800a5de:	bf00      	nop
 800a5e0:	3790      	adds	r7, #144	; 0x90
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e01d      	b.n	800a630 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68d9      	ldr	r1, [r3, #12]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4413      	add	r3, r2
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	440b      	add	r3, r1
 800a604:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2200      	movs	r2, #0
 800a610:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2200      	movs	r2, #0
 800a616:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2200      	movs	r2, #0
 800a61c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	3206      	adds	r2, #6
 800a626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d9de      	bls.n	800a5f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a644:	461a      	mov	r2, r3
 800a646:	2303      	movs	r3, #3
 800a648:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a658:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a668:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a66c:	bf00      	nop
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a680:	2300      	movs	r3, #0
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e023      	b.n	800a6ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6919      	ldr	r1, [r3, #16]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4613      	mov	r3, r2
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	4413      	add	r3, r2
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	440b      	add	r3, r1
 800a696:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	3212      	adds	r2, #18
 800a6c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d9d8      	bls.n	800a686 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a722:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a734:	b480      	push	{r7}
 800a736:	b089      	sub	sp, #36	; 0x24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a73e:	2300      	movs	r3, #0
 800a740:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a742:	4b89      	ldr	r3, [pc, #548]	; (800a968 <HAL_GPIO_Init+0x234>)
 800a744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a746:	e194      	b.n	800aa72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	2101      	movs	r1, #1
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	fa01 f303 	lsl.w	r3, r1, r3
 800a754:	4013      	ands	r3, r2
 800a756:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8186 	beq.w	800aa6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d005      	beq.n	800a778 <HAL_GPIO_Init+0x44>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d130      	bne.n	800a7da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	2203      	movs	r2, #3
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	43db      	mvns	r3, r3
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	4013      	ands	r3, r2
 800a78e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	fa02 f303 	lsl.w	r3, r2, r3
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	091b      	lsrs	r3, r3, #4
 800a7c4:	f003 0201 	and.w	r2, r3, #1
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d017      	beq.n	800a816 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f6:	43db      	mvns	r3, r3
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	689a      	ldr	r2, [r3, #8]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	fa02 f303 	lsl.w	r3, r2, r3
 800a80a:	69ba      	ldr	r2, [r7, #24]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d123      	bne.n	800a86a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	08da      	lsrs	r2, r3, #3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3208      	adds	r2, #8
 800a82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	220f      	movs	r2, #15
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	43db      	mvns	r3, r3
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	4013      	ands	r3, r2
 800a844:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	691a      	ldr	r2, [r3, #16]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f003 0307 	and.w	r3, r3, #7
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	4313      	orrs	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	08da      	lsrs	r2, r3, #3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3208      	adds	r2, #8
 800a864:	69b9      	ldr	r1, [r7, #24]
 800a866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	2203      	movs	r2, #3
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	43db      	mvns	r3, r3
 800a87c:	69ba      	ldr	r2, [r7, #24]
 800a87e:	4013      	ands	r3, r2
 800a880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f003 0203 	and.w	r2, r3, #3
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	fa02 f303 	lsl.w	r3, r2, r3
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	4313      	orrs	r3, r2
 800a896:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 80e0 	beq.w	800aa6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8ac:	4b2f      	ldr	r3, [pc, #188]	; (800a96c <HAL_GPIO_Init+0x238>)
 800a8ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8b2:	4a2e      	ldr	r2, [pc, #184]	; (800a96c <HAL_GPIO_Init+0x238>)
 800a8b4:	f043 0302 	orr.w	r3, r3, #2
 800a8b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a8bc:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <HAL_GPIO_Init+0x238>)
 800a8be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8ca:	4a29      	ldr	r2, [pc, #164]	; (800a970 <HAL_GPIO_Init+0x23c>)
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	089b      	lsrs	r3, r3, #2
 800a8d0:	3302      	adds	r3, #2
 800a8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	220f      	movs	r2, #15
 800a8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e6:	43db      	mvns	r3, r3
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a20      	ldr	r2, [pc, #128]	; (800a974 <HAL_GPIO_Init+0x240>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d052      	beq.n	800a99c <HAL_GPIO_Init+0x268>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a1f      	ldr	r2, [pc, #124]	; (800a978 <HAL_GPIO_Init+0x244>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d031      	beq.n	800a962 <HAL_GPIO_Init+0x22e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a1e      	ldr	r2, [pc, #120]	; (800a97c <HAL_GPIO_Init+0x248>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d02b      	beq.n	800a95e <HAL_GPIO_Init+0x22a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a1d      	ldr	r2, [pc, #116]	; (800a980 <HAL_GPIO_Init+0x24c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d025      	beq.n	800a95a <HAL_GPIO_Init+0x226>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <HAL_GPIO_Init+0x250>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d01f      	beq.n	800a956 <HAL_GPIO_Init+0x222>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <HAL_GPIO_Init+0x254>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d019      	beq.n	800a952 <HAL_GPIO_Init+0x21e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a1a      	ldr	r2, [pc, #104]	; (800a98c <HAL_GPIO_Init+0x258>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d013      	beq.n	800a94e <HAL_GPIO_Init+0x21a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a19      	ldr	r2, [pc, #100]	; (800a990 <HAL_GPIO_Init+0x25c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00d      	beq.n	800a94a <HAL_GPIO_Init+0x216>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a18      	ldr	r2, [pc, #96]	; (800a994 <HAL_GPIO_Init+0x260>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d007      	beq.n	800a946 <HAL_GPIO_Init+0x212>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a17      	ldr	r2, [pc, #92]	; (800a998 <HAL_GPIO_Init+0x264>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d101      	bne.n	800a942 <HAL_GPIO_Init+0x20e>
 800a93e:	2309      	movs	r3, #9
 800a940:	e02d      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a942:	230a      	movs	r3, #10
 800a944:	e02b      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a946:	2308      	movs	r3, #8
 800a948:	e029      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a94a:	2307      	movs	r3, #7
 800a94c:	e027      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a94e:	2306      	movs	r3, #6
 800a950:	e025      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a952:	2305      	movs	r3, #5
 800a954:	e023      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a956:	2304      	movs	r3, #4
 800a958:	e021      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a95a:	2303      	movs	r3, #3
 800a95c:	e01f      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a95e:	2302      	movs	r3, #2
 800a960:	e01d      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a962:	2301      	movs	r3, #1
 800a964:	e01b      	b.n	800a99e <HAL_GPIO_Init+0x26a>
 800a966:	bf00      	nop
 800a968:	58000080 	.word	0x58000080
 800a96c:	58024400 	.word	0x58024400
 800a970:	58000400 	.word	0x58000400
 800a974:	58020000 	.word	0x58020000
 800a978:	58020400 	.word	0x58020400
 800a97c:	58020800 	.word	0x58020800
 800a980:	58020c00 	.word	0x58020c00
 800a984:	58021000 	.word	0x58021000
 800a988:	58021400 	.word	0x58021400
 800a98c:	58021800 	.word	0x58021800
 800a990:	58021c00 	.word	0x58021c00
 800a994:	58022000 	.word	0x58022000
 800a998:	58022400 	.word	0x58022400
 800a99c:	2300      	movs	r3, #0
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	f002 0203 	and.w	r2, r2, #3
 800a9a4:	0092      	lsls	r2, r2, #2
 800a9a6:	4093      	lsls	r3, r2
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a9ae:	4938      	ldr	r1, [pc, #224]	; (800aa90 <HAL_GPIO_Init+0x35c>)
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	089b      	lsrs	r3, r3, #2
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a9bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	43db      	mvns	r3, r3
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a9e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a9ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aa10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	43db      	mvns	r3, r3
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	4013      	ands	r3, r2
 800aa26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f47f ae63 	bne.w	800a748 <HAL_GPIO_Init+0x14>
  }
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	3724      	adds	r7, #36	; 0x24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	58000400 	.word	0x58000400

0800aa94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691a      	ldr	r2, [r3, #16]
 800aaa4:	887b      	ldrh	r3, [r7, #2]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
 800aab0:	e001      	b.n	800aab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
 800aad0:	4613      	mov	r3, r2
 800aad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aad4:	787b      	ldrb	r3, [r7, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aada:	887a      	ldrh	r2, [r7, #2]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800aae0:	e003      	b.n	800aaea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800aae2:	887b      	ldrh	r3, [r7, #2]
 800aae4:	041a      	lsls	r2, r3, #16
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	619a      	str	r2, [r3, #24]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab08:	887a      	ldrh	r2, [r7, #2]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	041a      	lsls	r2, r3, #16
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	43d9      	mvns	r1, r3
 800ab14:	887b      	ldrh	r3, [r7, #2]
 800ab16:	400b      	ands	r3, r1
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	619a      	str	r2, [r3, #24]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800ab34:	4a08      	ldr	r2, [pc, #32]	; (800ab58 <HAL_HSEM_FastTake+0x2c>)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3320      	adds	r3, #32
 800ab3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab3e:	4a07      	ldr	r2, [pc, #28]	; (800ab5c <HAL_HSEM_FastTake+0x30>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d101      	bne.n	800ab48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e000      	b.n	800ab4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	58026400 	.word	0x58026400
 800ab5c:	80000300 	.word	0x80000300

0800ab60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ab6a:	4906      	ldr	r1, [pc, #24]	; (800ab84 <HAL_HSEM_Release+0x24>)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	58026400 	.word	0x58026400

0800ab88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8a:	b08f      	sub	sp, #60	; 0x3c
 800ab8c:	af0a      	add	r7, sp, #40	; 0x28
 800ab8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e116      	b.n	800adc8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d106      	bne.n	800abba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fc fc81 	bl	80074bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2203      	movs	r2, #3
 800abbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f005 f977 	bl	800fecc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	687e      	ldr	r6, [r7, #4]
 800abe6:	466d      	mov	r5, sp
 800abe8:	f106 0410 	add.w	r4, r6, #16
 800abec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abf8:	e885 0003 	stmia.w	r5, {r0, r1}
 800abfc:	1d33      	adds	r3, r6, #4
 800abfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac00:	6838      	ldr	r0, [r7, #0]
 800ac02:	f005 f8f5 	bl	800fdf0 <USB_CoreInit>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e0d7      	b.n	800adc8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f005 f965 	bl	800feee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]
 800ac28:	e04a      	b.n	800acc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac2a:	7bfa      	ldrb	r2, [r7, #15]
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	333d      	adds	r3, #61	; 0x3d
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac3e:	7bfa      	ldrb	r2, [r7, #15]
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	333c      	adds	r3, #60	; 0x3c
 800ac4e:	7bfa      	ldrb	r2, [r7, #15]
 800ac50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac52:	7bfa      	ldrb	r2, [r7, #15]
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	b298      	uxth	r0, r3
 800ac58:	6879      	ldr	r1, [r7, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	440b      	add	r3, r1
 800ac64:	3344      	adds	r3, #68	; 0x44
 800ac66:	4602      	mov	r2, r0
 800ac68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac6a:	7bfa      	ldrb	r2, [r7, #15]
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	3340      	adds	r3, #64	; 0x40
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac7e:	7bfa      	ldrb	r2, [r7, #15]
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	00db      	lsls	r3, r3, #3
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3348      	adds	r3, #72	; 0x48
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac92:	7bfa      	ldrb	r2, [r7, #15]
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	334c      	adds	r3, #76	; 0x4c
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aca6:	7bfa      	ldrb	r2, [r7, #15]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3354      	adds	r3, #84	; 0x54
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	3301      	adds	r3, #1
 800acbe:	73fb      	strb	r3, [r7, #15]
 800acc0:	7bfa      	ldrb	r2, [r7, #15]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d3af      	bcc.n	800ac2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acca:	2300      	movs	r3, #0
 800accc:	73fb      	strb	r3, [r7, #15]
 800acce:	e044      	b.n	800ad5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800acd0:	7bfa      	ldrb	r2, [r7, #15]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ace6:	7bfa      	ldrb	r2, [r7, #15]
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800acfc:	7bfa      	ldrb	r2, [r7, #15]
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad12:	7bfa      	ldrb	r2, [r7, #15]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad28:	7bfa      	ldrb	r2, [r7, #15]
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad3e:	7bfa      	ldrb	r2, [r7, #15]
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	3301      	adds	r3, #1
 800ad58:	73fb      	strb	r3, [r7, #15]
 800ad5a:	7bfa      	ldrb	r2, [r7, #15]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d3b5      	bcc.n	800acd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	603b      	str	r3, [r7, #0]
 800ad6a:	687e      	ldr	r6, [r7, #4]
 800ad6c:	466d      	mov	r5, sp
 800ad6e:	f106 0410 	add.w	r4, r6, #16
 800ad72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad7e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad82:	1d33      	adds	r3, r6, #4
 800ad84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad86:	6838      	ldr	r0, [r7, #0]
 800ad88:	f005 f8fe 	bl	800ff88 <USB_DevInit>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e014      	b.n	800adc8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d102      	bne.n	800adbc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f80a 	bl	800add0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f005 fabc 	bl	801033e <USB_DevDisconnect>

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800add0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adfe:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <HAL_PCDEx_ActivateLPM+0x44>)
 800ae00:	4313      	orrs	r3, r2
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	10000003 	.word	0x10000003

0800ae18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800ae20:	4b29      	ldr	r3, [pc, #164]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	f003 0307 	and.w	r3, r3, #7
 800ae28:	2b06      	cmp	r3, #6
 800ae2a:	d00a      	beq.n	800ae42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ae2c:	4b26      	ldr	r3, [pc, #152]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d001      	beq.n	800ae3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e040      	b.n	800aec0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e03e      	b.n	800aec0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ae42:	4b21      	ldr	r3, [pc, #132]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ae4a:	491f      	ldr	r1, [pc, #124]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ae52:	f7fc fcc5 	bl	80077e0 <HAL_GetTick>
 800ae56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae58:	e009      	b.n	800ae6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ae5a:	f7fc fcc1 	bl	80077e0 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae68:	d901      	bls.n	800ae6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e028      	b.n	800aec0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae6e:	4b16      	ldr	r3, [pc, #88]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae7a:	d1ee      	bne.n	800ae5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b1e      	cmp	r3, #30
 800ae80:	d008      	beq.n	800ae94 <HAL_PWREx_ConfigSupply+0x7c>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b2e      	cmp	r3, #46	; 0x2e
 800ae86:	d005      	beq.n	800ae94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b1d      	cmp	r3, #29
 800ae8c:	d002      	beq.n	800ae94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b2d      	cmp	r3, #45	; 0x2d
 800ae92:	d114      	bne.n	800aebe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ae94:	f7fc fca4 	bl	80077e0 <HAL_GetTick>
 800ae98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ae9a:	e009      	b.n	800aeb0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ae9c:	f7fc fca0 	bl	80077e0 <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeaa:	d901      	bls.n	800aeb0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e007      	b.n	800aec0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aebc:	d1ee      	bne.n	800ae9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	58024800 	.word	0x58024800

0800aecc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800aed0:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeda:	60d3      	str	r3, [r2, #12]
}
 800aedc:	bf00      	nop
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	58024800 	.word	0x58024800

0800aeec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	; 0x30
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d102      	bne.n	800af00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	f000 bc1d 	b.w	800b73a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 8087 	beq.w	800b01c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af0e:	4b99      	ldr	r3, [pc, #612]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af18:	4b96      	ldr	r3, [pc, #600]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af20:	2b10      	cmp	r3, #16
 800af22:	d007      	beq.n	800af34 <HAL_RCC_OscConfig+0x48>
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	2b18      	cmp	r3, #24
 800af28:	d110      	bne.n	800af4c <HAL_RCC_OscConfig+0x60>
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	2b02      	cmp	r3, #2
 800af32:	d10b      	bne.n	800af4c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af34:	4b8f      	ldr	r3, [pc, #572]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d06c      	beq.n	800b01a <HAL_RCC_OscConfig+0x12e>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d168      	bne.n	800b01a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e3f6      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af54:	d106      	bne.n	800af64 <HAL_RCC_OscConfig+0x78>
 800af56:	4b87      	ldr	r3, [pc, #540]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a86      	ldr	r2, [pc, #536]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e02e      	b.n	800afc2 <HAL_RCC_OscConfig+0xd6>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10c      	bne.n	800af86 <HAL_RCC_OscConfig+0x9a>
 800af6c:	4b81      	ldr	r3, [pc, #516]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a80      	ldr	r2, [pc, #512]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	4b7e      	ldr	r3, [pc, #504]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a7d      	ldr	r2, [pc, #500]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	e01d      	b.n	800afc2 <HAL_RCC_OscConfig+0xd6>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af8e:	d10c      	bne.n	800afaa <HAL_RCC_OscConfig+0xbe>
 800af90:	4b78      	ldr	r3, [pc, #480]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a77      	ldr	r2, [pc, #476]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	4b75      	ldr	r3, [pc, #468]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a74      	ldr	r2, [pc, #464]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	e00b      	b.n	800afc2 <HAL_RCC_OscConfig+0xd6>
 800afaa:	4b72      	ldr	r3, [pc, #456]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a71      	ldr	r2, [pc, #452]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	4b6f      	ldr	r3, [pc, #444]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a6e      	ldr	r2, [pc, #440]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d013      	beq.n	800aff2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afca:	f7fc fc09 	bl	80077e0 <HAL_GetTick>
 800afce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afd0:	e008      	b.n	800afe4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afd2:	f7fc fc05 	bl	80077e0 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b64      	cmp	r3, #100	; 0x64
 800afde:	d901      	bls.n	800afe4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e3aa      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afe4:	4b63      	ldr	r3, [pc, #396]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0f0      	beq.n	800afd2 <HAL_RCC_OscConfig+0xe6>
 800aff0:	e014      	b.n	800b01c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff2:	f7fc fbf5 	bl	80077e0 <HAL_GetTick>
 800aff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aff8:	e008      	b.n	800b00c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800affa:	f7fc fbf1 	bl	80077e0 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	2b64      	cmp	r3, #100	; 0x64
 800b006:	d901      	bls.n	800b00c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e396      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b00c:	4b59      	ldr	r3, [pc, #356]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f0      	bne.n	800affa <HAL_RCC_OscConfig+0x10e>
 800b018:	e000      	b.n	800b01c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b01a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80cb 	beq.w	800b1c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b02a:	4b52      	ldr	r3, [pc, #328]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b032:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b034:	4b4f      	ldr	r3, [pc, #316]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d007      	beq.n	800b050 <HAL_RCC_OscConfig+0x164>
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	2b18      	cmp	r3, #24
 800b044:	d156      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x208>
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	f003 0303 	and.w	r3, r3, #3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d151      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b050:	4b48      	ldr	r3, [pc, #288]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <HAL_RCC_OscConfig+0x17c>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e368      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b068:	4b42      	ldr	r3, [pc, #264]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f023 0219 	bic.w	r2, r3, #25
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	493f      	ldr	r1, [pc, #252]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b076:	4313      	orrs	r3, r2
 800b078:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b07a:	f7fc fbb1 	bl	80077e0 <HAL_GetTick>
 800b07e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b080:	e008      	b.n	800b094 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b082:	f7fc fbad 	bl	80077e0 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d901      	bls.n	800b094 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	e352      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b094:	4b37      	ldr	r3, [pc, #220]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d0f0      	beq.n	800b082 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0a0:	f7fc fbce 	bl	8007840 <HAL_GetREVID>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f241 0203 	movw	r2, #4099	; 0x1003
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d817      	bhi.n	800b0de <HAL_RCC_OscConfig+0x1f2>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b40      	cmp	r3, #64	; 0x40
 800b0b4:	d108      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x1dc>
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b0be:	4a2d      	ldr	r2, [pc, #180]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0c6:	e07b      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0c8:	4b2a      	ldr	r3, [pc, #168]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	031b      	lsls	r3, r3, #12
 800b0d6:	4927      	ldr	r1, [pc, #156]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0dc:	e070      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0de:	4b25      	ldr	r3, [pc, #148]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	061b      	lsls	r3, r3, #24
 800b0ec:	4921      	ldr	r1, [pc, #132]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0f2:	e065      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d048      	beq.n	800b18e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0fc:	4b1d      	ldr	r3, [pc, #116]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f023 0219 	bic.w	r2, r3, #25
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	491a      	ldr	r1, [pc, #104]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b10e:	f7fc fb67 	bl	80077e0 <HAL_GetTick>
 800b112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b114:	e008      	b.n	800b128 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b116:	f7fc fb63 	bl	80077e0 <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d901      	bls.n	800b128 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e308      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b128:	4b12      	ldr	r3, [pc, #72]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f0      	beq.n	800b116 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b134:	f7fc fb84 	bl	8007840 <HAL_GetREVID>
 800b138:	4603      	mov	r3, r0
 800b13a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b13e:	4293      	cmp	r3, r2
 800b140:	d81a      	bhi.n	800b178 <HAL_RCC_OscConfig+0x28c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d108      	bne.n	800b15c <HAL_RCC_OscConfig+0x270>
 800b14a:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b152:	4a08      	ldr	r2, [pc, #32]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b158:	6053      	str	r3, [r2, #4]
 800b15a:	e031      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	031b      	lsls	r3, r3, #12
 800b16a:	4902      	ldr	r1, [pc, #8]	; (800b174 <HAL_RCC_OscConfig+0x288>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	604b      	str	r3, [r1, #4]
 800b170:	e026      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
 800b172:	bf00      	nop
 800b174:	58024400 	.word	0x58024400
 800b178:	4b9a      	ldr	r3, [pc, #616]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	061b      	lsls	r3, r3, #24
 800b186:	4997      	ldr	r1, [pc, #604]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	604b      	str	r3, [r1, #4]
 800b18c:	e018      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b18e:	4b95      	ldr	r3, [pc, #596]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a94      	ldr	r2, [pc, #592]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b194:	f023 0301 	bic.w	r3, r3, #1
 800b198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b19a:	f7fc fb21 	bl	80077e0 <HAL_GetTick>
 800b19e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1a0:	e008      	b.n	800b1b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1a2:	f7fc fb1d 	bl	80077e0 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e2c2      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1b4:	4b8b      	ldr	r3, [pc, #556]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1f0      	bne.n	800b1a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 80a9 	beq.w	800b320 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ce:	4b85      	ldr	r3, [pc, #532]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b1d8:	4b82      	ldr	r3, [pc, #520]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d007      	beq.n	800b1f4 <HAL_RCC_OscConfig+0x308>
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	2b18      	cmp	r3, #24
 800b1e8:	d13a      	bne.n	800b260 <HAL_RCC_OscConfig+0x374>
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d135      	bne.n	800b260 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1f4:	4b7b      	ldr	r3, [pc, #492]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <HAL_RCC_OscConfig+0x320>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	2b80      	cmp	r3, #128	; 0x80
 800b206:	d001      	beq.n	800b20c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e296      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b20c:	f7fc fb18 	bl	8007840 <HAL_GetREVID>
 800b210:	4603      	mov	r3, r0
 800b212:	f241 0203 	movw	r2, #4099	; 0x1003
 800b216:	4293      	cmp	r3, r2
 800b218:	d817      	bhi.n	800b24a <HAL_RCC_OscConfig+0x35e>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d108      	bne.n	800b234 <HAL_RCC_OscConfig+0x348>
 800b222:	4b70      	ldr	r3, [pc, #448]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b22a:	4a6e      	ldr	r2, [pc, #440]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b22c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b230:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b232:	e075      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b234:	4b6b      	ldr	r3, [pc, #428]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	069b      	lsls	r3, r3, #26
 800b242:	4968      	ldr	r1, [pc, #416]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b244:	4313      	orrs	r3, r2
 800b246:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b248:	e06a      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b24a:	4b66      	ldr	r3, [pc, #408]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	061b      	lsls	r3, r3, #24
 800b258:	4962      	ldr	r1, [pc, #392]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b25e:	e05f      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d042      	beq.n	800b2ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b268:	4b5e      	ldr	r3, [pc, #376]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a5d      	ldr	r2, [pc, #372]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7fc fab4 	bl	80077e0 <HAL_GetTick>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b27c:	f7fc fab0 	bl	80077e0 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e255      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b28e:	4b55      	ldr	r3, [pc, #340]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0f0      	beq.n	800b27c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b29a:	f7fc fad1 	bl	8007840 <HAL_GetREVID>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d817      	bhi.n	800b2d8 <HAL_RCC_OscConfig+0x3ec>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	d108      	bne.n	800b2c2 <HAL_RCC_OscConfig+0x3d6>
 800b2b0:	4b4c      	ldr	r3, [pc, #304]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b2b8:	4a4a      	ldr	r2, [pc, #296]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2be:	6053      	str	r3, [r2, #4]
 800b2c0:	e02e      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
 800b2c2:	4b48      	ldr	r3, [pc, #288]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	069b      	lsls	r3, r3, #26
 800b2d0:	4944      	ldr	r1, [pc, #272]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	604b      	str	r3, [r1, #4]
 800b2d6:	e023      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
 800b2d8:	4b42      	ldr	r3, [pc, #264]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	061b      	lsls	r3, r3, #24
 800b2e6:	493f      	ldr	r1, [pc, #252]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	60cb      	str	r3, [r1, #12]
 800b2ec:	e018      	b.n	800b320 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b2ee:	4b3d      	ldr	r3, [pc, #244]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a3c      	ldr	r2, [pc, #240]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2fa:	f7fc fa71 	bl	80077e0 <HAL_GetTick>
 800b2fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b300:	e008      	b.n	800b314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b302:	f7fc fa6d 	bl	80077e0 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e212      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b314:	4b33      	ldr	r3, [pc, #204]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f0      	bne.n	800b302 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0308 	and.w	r3, r3, #8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d036      	beq.n	800b39a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d019      	beq.n	800b368 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b338:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b33a:	f043 0301 	orr.w	r3, r3, #1
 800b33e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b340:	f7fc fa4e 	bl	80077e0 <HAL_GetTick>
 800b344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b348:	f7fc fa4a 	bl	80077e0 <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e1ef      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b35a:	4b22      	ldr	r3, [pc, #136]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0f0      	beq.n	800b348 <HAL_RCC_OscConfig+0x45c>
 800b366:	e018      	b.n	800b39a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b368:	4b1e      	ldr	r3, [pc, #120]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	4a1d      	ldr	r2, [pc, #116]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b36e:	f023 0301 	bic.w	r3, r3, #1
 800b372:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b374:	f7fc fa34 	bl	80077e0 <HAL_GetTick>
 800b378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b37a:	e008      	b.n	800b38e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b37c:	f7fc fa30 	bl	80077e0 <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e1d5      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b38e:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b392:	f003 0302 	and.w	r3, r3, #2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f0      	bne.n	800b37c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d039      	beq.n	800b41a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d01c      	beq.n	800b3e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a0c      	ldr	r2, [pc, #48]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b3b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b3b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b3ba:	f7fc fa11 	bl	80077e0 <HAL_GetTick>
 800b3be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b3c0:	e008      	b.n	800b3d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b3c2:	f7fc fa0d 	bl	80077e0 <HAL_GetTick>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d901      	bls.n	800b3d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e1b2      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b3d4:	4b03      	ldr	r3, [pc, #12]	; (800b3e4 <HAL_RCC_OscConfig+0x4f8>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0f0      	beq.n	800b3c2 <HAL_RCC_OscConfig+0x4d6>
 800b3e0:	e01b      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
 800b3e2:	bf00      	nop
 800b3e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3e8:	4b9b      	ldr	r3, [pc, #620]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a9a      	ldr	r2, [pc, #616]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b3f4:	f7fc f9f4 	bl	80077e0 <HAL_GetTick>
 800b3f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b3fc:	f7fc f9f0 	bl	80077e0 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e195      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b40e:	4b92      	ldr	r3, [pc, #584]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8081 	beq.w	800b52a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b428:	4b8c      	ldr	r3, [pc, #560]	; (800b65c <HAL_RCC_OscConfig+0x770>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a8b      	ldr	r2, [pc, #556]	; (800b65c <HAL_RCC_OscConfig+0x770>)
 800b42e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b434:	f7fc f9d4 	bl	80077e0 <HAL_GetTick>
 800b438:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b43c:	f7fc f9d0 	bl	80077e0 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b64      	cmp	r3, #100	; 0x64
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e175      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b44e:	4b83      	ldr	r3, [pc, #524]	; (800b65c <HAL_RCC_OscConfig+0x770>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0f0      	beq.n	800b43c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d106      	bne.n	800b470 <HAL_RCC_OscConfig+0x584>
 800b462:	4b7d      	ldr	r3, [pc, #500]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	4a7c      	ldr	r2, [pc, #496]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b468:	f043 0301 	orr.w	r3, r3, #1
 800b46c:	6713      	str	r3, [r2, #112]	; 0x70
 800b46e:	e02d      	b.n	800b4cc <HAL_RCC_OscConfig+0x5e0>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10c      	bne.n	800b492 <HAL_RCC_OscConfig+0x5a6>
 800b478:	4b77      	ldr	r3, [pc, #476]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47c:	4a76      	ldr	r2, [pc, #472]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	6713      	str	r3, [r2, #112]	; 0x70
 800b484:	4b74      	ldr	r3, [pc, #464]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b488:	4a73      	ldr	r2, [pc, #460]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b48a:	f023 0304 	bic.w	r3, r3, #4
 800b48e:	6713      	str	r3, [r2, #112]	; 0x70
 800b490:	e01c      	b.n	800b4cc <HAL_RCC_OscConfig+0x5e0>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	2b05      	cmp	r3, #5
 800b498:	d10c      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x5c8>
 800b49a:	4b6f      	ldr	r3, [pc, #444]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49e:	4a6e      	ldr	r2, [pc, #440]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4a0:	f043 0304 	orr.w	r3, r3, #4
 800b4a4:	6713      	str	r3, [r2, #112]	; 0x70
 800b4a6:	4b6c      	ldr	r3, [pc, #432]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4aa:	4a6b      	ldr	r2, [pc, #428]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4ac:	f043 0301 	orr.w	r3, r3, #1
 800b4b0:	6713      	str	r3, [r2, #112]	; 0x70
 800b4b2:	e00b      	b.n	800b4cc <HAL_RCC_OscConfig+0x5e0>
 800b4b4:	4b68      	ldr	r3, [pc, #416]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b8:	4a67      	ldr	r2, [pc, #412]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4ba:	f023 0301 	bic.w	r3, r3, #1
 800b4be:	6713      	str	r3, [r2, #112]	; 0x70
 800b4c0:	4b65      	ldr	r3, [pc, #404]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c4:	4a64      	ldr	r2, [pc, #400]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4c6:	f023 0304 	bic.w	r3, r3, #4
 800b4ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d015      	beq.n	800b500 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4d4:	f7fc f984 	bl	80077e0 <HAL_GetTick>
 800b4d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4da:	e00a      	b.n	800b4f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4dc:	f7fc f980 	bl	80077e0 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d901      	bls.n	800b4f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e123      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4f2:	4b59      	ldr	r3, [pc, #356]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0ee      	beq.n	800b4dc <HAL_RCC_OscConfig+0x5f0>
 800b4fe:	e014      	b.n	800b52a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b500:	f7fc f96e 	bl	80077e0 <HAL_GetTick>
 800b504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b506:	e00a      	b.n	800b51e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b508:	f7fc f96a 	bl	80077e0 <HAL_GetTick>
 800b50c:	4602      	mov	r2, r0
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	f241 3288 	movw	r2, #5000	; 0x1388
 800b516:	4293      	cmp	r3, r2
 800b518:	d901      	bls.n	800b51e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e10d      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b51e:	4b4e      	ldr	r3, [pc, #312]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b522:	f003 0302 	and.w	r3, r3, #2
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1ee      	bne.n	800b508 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 8102 	beq.w	800b738 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b534:	4b48      	ldr	r3, [pc, #288]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b53c:	2b18      	cmp	r3, #24
 800b53e:	f000 80bd 	beq.w	800b6bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b02      	cmp	r3, #2
 800b548:	f040 809e 	bne.w	800b688 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b54c:	4b42      	ldr	r3, [pc, #264]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a41      	ldr	r2, [pc, #260]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b558:	f7fc f942 	bl	80077e0 <HAL_GetTick>
 800b55c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b55e:	e008      	b.n	800b572 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b560:	f7fc f93e 	bl	80077e0 <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e0e3      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b572:	4b39      	ldr	r3, [pc, #228]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1f0      	bne.n	800b560 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b57e:	4b36      	ldr	r3, [pc, #216]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b582:	4b37      	ldr	r3, [pc, #220]	; (800b660 <HAL_RCC_OscConfig+0x774>)
 800b584:	4013      	ands	r3, r2
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b58e:	0112      	lsls	r2, r2, #4
 800b590:	430a      	orrs	r2, r1
 800b592:	4931      	ldr	r1, [pc, #196]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b594:	4313      	orrs	r3, r2
 800b596:	628b      	str	r3, [r1, #40]	; 0x28
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	3b01      	subs	r3, #1
 800b59e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	025b      	lsls	r3, r3, #9
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	431a      	orrs	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	041b      	lsls	r3, r3, #16
 800b5b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5ba:	431a      	orrs	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	061b      	lsls	r3, r3, #24
 800b5c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5c8:	4923      	ldr	r1, [pc, #140]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b5ce:	4b22      	ldr	r3, [pc, #136]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	4a21      	ldr	r2, [pc, #132]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5d4:	f023 0301 	bic.w	r3, r3, #1
 800b5d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b5da:	4b1f      	ldr	r3, [pc, #124]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5de:	4b21      	ldr	r3, [pc, #132]	; (800b664 <HAL_RCC_OscConfig+0x778>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b5e6:	00d2      	lsls	r2, r2, #3
 800b5e8:	491b      	ldr	r1, [pc, #108]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	f023 020c 	bic.w	r2, r3, #12
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	4917      	ldr	r1, [pc, #92]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b600:	4b15      	ldr	r3, [pc, #84]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	f023 0202 	bic.w	r2, r3, #2
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60c:	4912      	ldr	r1, [pc, #72]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	4a10      	ldr	r2, [pc, #64]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b61c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b62a:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b636:	4b08      	ldr	r3, [pc, #32]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	4a07      	ldr	r2, [pc, #28]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b63c:	f043 0301 	orr.w	r3, r3, #1
 800b640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b642:	4b05      	ldr	r3, [pc, #20]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a04      	ldr	r2, [pc, #16]	; (800b658 <HAL_RCC_OscConfig+0x76c>)
 800b648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b64c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b64e:	f7fc f8c7 	bl	80077e0 <HAL_GetTick>
 800b652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b654:	e011      	b.n	800b67a <HAL_RCC_OscConfig+0x78e>
 800b656:	bf00      	nop
 800b658:	58024400 	.word	0x58024400
 800b65c:	58024800 	.word	0x58024800
 800b660:	fffffc0c 	.word	0xfffffc0c
 800b664:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b668:	f7fc f8ba 	bl	80077e0 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	2b02      	cmp	r3, #2
 800b674:	d901      	bls.n	800b67a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e05f      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b67a:	4b32      	ldr	r3, [pc, #200]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0f0      	beq.n	800b668 <HAL_RCC_OscConfig+0x77c>
 800b686:	e057      	b.n	800b738 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b688:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a2d      	ldr	r2, [pc, #180]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b68e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b694:	f7fc f8a4 	bl	80077e0 <HAL_GetTick>
 800b698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b69a:	e008      	b.n	800b6ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b69c:	f7fc f8a0 	bl	80077e0 <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d901      	bls.n	800b6ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e045      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b6ae:	4b25      	ldr	r3, [pc, #148]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f0      	bne.n	800b69c <HAL_RCC_OscConfig+0x7b0>
 800b6ba:	e03d      	b.n	800b738 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b6bc:	4b21      	ldr	r3, [pc, #132]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b6c2:	4b20      	ldr	r3, [pc, #128]	; (800b744 <HAL_RCC_OscConfig+0x858>)
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d031      	beq.n	800b734 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f003 0203 	and.w	r2, r3, #3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d12a      	bne.n	800b734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	091b      	lsrs	r3, r3, #4
 800b6e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d122      	bne.n	800b734 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d11a      	bne.n	800b734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	0a5b      	lsrs	r3, r3, #9
 800b702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d111      	bne.n	800b734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	0c1b      	lsrs	r3, r3, #16
 800b714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b71e:	429a      	cmp	r2, r3
 800b720:	d108      	bne.n	800b734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	0e1b      	lsrs	r3, r3, #24
 800b726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b730:	429a      	cmp	r2, r3
 800b732:	d001      	beq.n	800b738 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e000      	b.n	800b73a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3730      	adds	r7, #48	; 0x30
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	58024400 	.word	0x58024400

0800b748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e19c      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b75c:	4b8a      	ldr	r3, [pc, #552]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 030f 	and.w	r3, r3, #15
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d910      	bls.n	800b78c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b76a:	4b87      	ldr	r3, [pc, #540]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f023 020f 	bic.w	r2, r3, #15
 800b772:	4985      	ldr	r1, [pc, #532]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	4313      	orrs	r3, r2
 800b778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b77a:	4b83      	ldr	r3, [pc, #524]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 030f 	and.w	r3, r3, #15
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d001      	beq.n	800b78c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e184      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	2b00      	cmp	r3, #0
 800b796:	d010      	beq.n	800b7ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	691a      	ldr	r2, [r3, #16]
 800b79c:	4b7b      	ldr	r3, [pc, #492]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d908      	bls.n	800b7ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b7a8:	4b78      	ldr	r3, [pc, #480]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	4975      	ldr	r1, [pc, #468]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0308 	and.w	r3, r3, #8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d010      	beq.n	800b7e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	695a      	ldr	r2, [r3, #20]
 800b7ca:	4b70      	ldr	r3, [pc, #448]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d908      	bls.n	800b7e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b7d6:	4b6d      	ldr	r3, [pc, #436]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	496a      	ldr	r1, [pc, #424]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0310 	and.w	r3, r3, #16
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d010      	beq.n	800b816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699a      	ldr	r2, [r3, #24]
 800b7f8:	4b64      	ldr	r3, [pc, #400]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b800:	429a      	cmp	r2, r3
 800b802:	d908      	bls.n	800b816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b804:	4b61      	ldr	r3, [pc, #388]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	495e      	ldr	r1, [pc, #376]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b812:	4313      	orrs	r3, r2
 800b814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0320 	and.w	r3, r3, #32
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d010      	beq.n	800b844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	69da      	ldr	r2, [r3, #28]
 800b826:	4b59      	ldr	r3, [pc, #356]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b82e:	429a      	cmp	r2, r3
 800b830:	d908      	bls.n	800b844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b832:	4b56      	ldr	r3, [pc, #344]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	4953      	ldr	r1, [pc, #332]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b840:	4313      	orrs	r3, r2
 800b842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d010      	beq.n	800b872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68da      	ldr	r2, [r3, #12]
 800b854:	4b4d      	ldr	r3, [pc, #308]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d908      	bls.n	800b872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b860:	4b4a      	ldr	r3, [pc, #296]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f023 020f 	bic.w	r2, r3, #15
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	4947      	ldr	r1, [pc, #284]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d055      	beq.n	800b92a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b87e:	4b43      	ldr	r3, [pc, #268]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	4940      	ldr	r1, [pc, #256]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d107      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b898:	4b3c      	ldr	r3, [pc, #240]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d121      	bne.n	800b8e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e0f6      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d107      	bne.n	800b8c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b8b0:	4b36      	ldr	r3, [pc, #216]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d115      	bne.n	800b8e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0ea      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d107      	bne.n	800b8d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8c8:	4b30      	ldr	r3, [pc, #192]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e0de      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8d8:	4b2c      	ldr	r3, [pc, #176]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0304 	and.w	r3, r3, #4
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e0d6      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8e8:	4b28      	ldr	r3, [pc, #160]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	f023 0207 	bic.w	r2, r3, #7
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4925      	ldr	r1, [pc, #148]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8fa:	f7fb ff71 	bl	80077e0 <HAL_GetTick>
 800b8fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b900:	e00a      	b.n	800b918 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b902:	f7fb ff6d 	bl	80077e0 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b910:	4293      	cmp	r3, r2
 800b912:	d901      	bls.n	800b918 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e0be      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b918:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	429a      	cmp	r2, r3
 800b928:	d1eb      	bne.n	800b902 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d010      	beq.n	800b958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	4b14      	ldr	r3, [pc, #80]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	f003 030f 	and.w	r3, r3, #15
 800b942:	429a      	cmp	r2, r3
 800b944:	d208      	bcs.n	800b958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b946:	4b11      	ldr	r3, [pc, #68]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	f023 020f 	bic.w	r2, r3, #15
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	490e      	ldr	r1, [pc, #56]	; (800b98c <HAL_RCC_ClockConfig+0x244>)
 800b954:	4313      	orrs	r3, r2
 800b956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b958:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 030f 	and.w	r3, r3, #15
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d214      	bcs.n	800b990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b966:	4b08      	ldr	r3, [pc, #32]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f023 020f 	bic.w	r2, r3, #15
 800b96e:	4906      	ldr	r1, [pc, #24]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	4313      	orrs	r3, r2
 800b974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b976:	4b04      	ldr	r3, [pc, #16]	; (800b988 <HAL_RCC_ClockConfig+0x240>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d005      	beq.n	800b990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e086      	b.n	800ba96 <HAL_RCC_ClockConfig+0x34e>
 800b988:	52002000 	.word	0x52002000
 800b98c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d010      	beq.n	800b9be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691a      	ldr	r2, [r3, #16]
 800b9a0:	4b3f      	ldr	r3, [pc, #252]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d208      	bcs.n	800b9be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b9ac:	4b3c      	ldr	r3, [pc, #240]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	4939      	ldr	r1, [pc, #228]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0308 	and.w	r3, r3, #8
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d010      	beq.n	800b9ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695a      	ldr	r2, [r3, #20]
 800b9ce:	4b34      	ldr	r3, [pc, #208]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d208      	bcs.n	800b9ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b9da:	4b31      	ldr	r3, [pc, #196]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	492e      	ldr	r1, [pc, #184]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 0310 	and.w	r3, r3, #16
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d010      	beq.n	800ba1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699a      	ldr	r2, [r3, #24]
 800b9fc:	4b28      	ldr	r3, [pc, #160]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d208      	bcs.n	800ba1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ba08:	4b25      	ldr	r3, [pc, #148]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	4922      	ldr	r1, [pc, #136]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 0320 	and.w	r3, r3, #32
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d010      	beq.n	800ba48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	69da      	ldr	r2, [r3, #28]
 800ba2a:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d208      	bcs.n	800ba48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ba36:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	4917      	ldr	r1, [pc, #92]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ba48:	f000 f834 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	4b14      	ldr	r3, [pc, #80]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	0a1b      	lsrs	r3, r3, #8
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	4912      	ldr	r1, [pc, #72]	; (800baa4 <HAL_RCC_ClockConfig+0x35c>)
 800ba5a:	5ccb      	ldrb	r3, [r1, r3]
 800ba5c:	f003 031f 	and.w	r3, r3, #31
 800ba60:	fa22 f303 	lsr.w	r3, r2, r3
 800ba64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba66:	4b0e      	ldr	r3, [pc, #56]	; (800baa0 <HAL_RCC_ClockConfig+0x358>)
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	4a0d      	ldr	r2, [pc, #52]	; (800baa4 <HAL_RCC_ClockConfig+0x35c>)
 800ba70:	5cd3      	ldrb	r3, [r2, r3]
 800ba72:	f003 031f 	and.w	r3, r3, #31
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7c:	4a0a      	ldr	r2, [pc, #40]	; (800baa8 <HAL_RCC_ClockConfig+0x360>)
 800ba7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba80:	4a0a      	ldr	r2, [pc, #40]	; (800baac <HAL_RCC_ClockConfig+0x364>)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ba86:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <HAL_RCC_ClockConfig+0x368>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fb fe5e 	bl	800774c <HAL_InitTick>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	58024400 	.word	0x58024400
 800baa4:	08011170 	.word	0x08011170
 800baa8:	24000008 	.word	0x24000008
 800baac:	24000004 	.word	0x24000004
 800bab0:	2400001c 	.word	0x2400001c

0800bab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b089      	sub	sp, #36	; 0x24
 800bab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800baba:	4bb3      	ldr	r3, [pc, #716]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bac2:	2b18      	cmp	r3, #24
 800bac4:	f200 8155 	bhi.w	800bd72 <HAL_RCC_GetSysClockFreq+0x2be>
 800bac8:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800baca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bace:	bf00      	nop
 800bad0:	0800bb35 	.word	0x0800bb35
 800bad4:	0800bd73 	.word	0x0800bd73
 800bad8:	0800bd73 	.word	0x0800bd73
 800badc:	0800bd73 	.word	0x0800bd73
 800bae0:	0800bd73 	.word	0x0800bd73
 800bae4:	0800bd73 	.word	0x0800bd73
 800bae8:	0800bd73 	.word	0x0800bd73
 800baec:	0800bd73 	.word	0x0800bd73
 800baf0:	0800bb5b 	.word	0x0800bb5b
 800baf4:	0800bd73 	.word	0x0800bd73
 800baf8:	0800bd73 	.word	0x0800bd73
 800bafc:	0800bd73 	.word	0x0800bd73
 800bb00:	0800bd73 	.word	0x0800bd73
 800bb04:	0800bd73 	.word	0x0800bd73
 800bb08:	0800bd73 	.word	0x0800bd73
 800bb0c:	0800bd73 	.word	0x0800bd73
 800bb10:	0800bb61 	.word	0x0800bb61
 800bb14:	0800bd73 	.word	0x0800bd73
 800bb18:	0800bd73 	.word	0x0800bd73
 800bb1c:	0800bd73 	.word	0x0800bd73
 800bb20:	0800bd73 	.word	0x0800bd73
 800bb24:	0800bd73 	.word	0x0800bd73
 800bb28:	0800bd73 	.word	0x0800bd73
 800bb2c:	0800bd73 	.word	0x0800bd73
 800bb30:	0800bb67 	.word	0x0800bb67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb34:	4b94      	ldr	r3, [pc, #592]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d009      	beq.n	800bb54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb40:	4b91      	ldr	r3, [pc, #580]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	08db      	lsrs	r3, r3, #3
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	4a90      	ldr	r2, [pc, #576]	; (800bd8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800bb52:	e111      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bb54:	4b8d      	ldr	r3, [pc, #564]	; (800bd8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb56:	61bb      	str	r3, [r7, #24]
    break;
 800bb58:	e10e      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bb5a:	4b8d      	ldr	r3, [pc, #564]	; (800bd90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bb5c:	61bb      	str	r3, [r7, #24]
    break;
 800bb5e:	e10b      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bb60:	4b8c      	ldr	r3, [pc, #560]	; (800bd94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bb62:	61bb      	str	r3, [r7, #24]
    break;
 800bb64:	e108      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb66:	4b88      	ldr	r3, [pc, #544]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6a:	f003 0303 	and.w	r3, r3, #3
 800bb6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bb70:	4b85      	ldr	r3, [pc, #532]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb74:	091b      	lsrs	r3, r3, #4
 800bb76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bb7c:	4b82      	ldr	r3, [pc, #520]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bb86:	4b80      	ldr	r3, [pc, #512]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	08db      	lsrs	r3, r3, #3
 800bb8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80e1 	beq.w	800bd6c <HAL_RCC_GetSysClockFreq+0x2b8>
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	f000 8083 	beq.w	800bcb8 <HAL_RCC_GetSysClockFreq+0x204>
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	f200 80a1 	bhi.w	800bcfc <HAL_RCC_GetSysClockFreq+0x248>
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <HAL_RCC_GetSysClockFreq+0x114>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d056      	beq.n	800bc74 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bbc6:	e099      	b.n	800bcfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc8:	4b6f      	ldr	r3, [pc, #444]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0320 	and.w	r3, r3, #32
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d02d      	beq.n	800bc30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbd4:	4b6c      	ldr	r3, [pc, #432]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	4a6b      	ldr	r2, [pc, #428]	; (800bd8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfe:	4b62      	ldr	r3, [pc, #392]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc12:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bd98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bc2e:	e087      	b.n	800bd40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bd9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc42:	4b51      	ldr	r3, [pc, #324]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc52:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc56:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bd98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc72:	e065      	b.n	800bd40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bda0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc86:	4b40      	ldr	r3, [pc, #256]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc96:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bd98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcb6:	e043      	b.n	800bd40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bda4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	4b2f      	ldr	r3, [pc, #188]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcda:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bd98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcfa:	e021      	b.n	800bd40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bda0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b1e      	ldr	r3, [pc, #120]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bd98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bd40:	4b11      	ldr	r3, [pc, #68]	; (800bd88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd44:	0a5b      	lsrs	r3, r3, #9
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd58:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd64:	ee17 3a90 	vmov	r3, s15
 800bd68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bd6a:	e005      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61bb      	str	r3, [r7, #24]
    break;
 800bd70:	e002      	b.n	800bd78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bd74:	61bb      	str	r3, [r7, #24]
    break;
 800bd76:	bf00      	nop
  }

  return sysclockfreq;
 800bd78:	69bb      	ldr	r3, [r7, #24]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3724      	adds	r7, #36	; 0x24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	58024400 	.word	0x58024400
 800bd8c:	03d09000 	.word	0x03d09000
 800bd90:	003d0900 	.word	0x003d0900
 800bd94:	007a1200 	.word	0x007a1200
 800bd98:	46000000 	.word	0x46000000
 800bd9c:	4c742400 	.word	0x4c742400
 800bda0:	4a742400 	.word	0x4a742400
 800bda4:	4af42400 	.word	0x4af42400

0800bda8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bdae:	f7ff fe81 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	4b10      	ldr	r3, [pc, #64]	; (800bdf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	0a1b      	lsrs	r3, r3, #8
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	490f      	ldr	r1, [pc, #60]	; (800bdfc <HAL_RCC_GetHCLKFreq+0x54>)
 800bdc0:	5ccb      	ldrb	r3, [r1, r3]
 800bdc2:	f003 031f 	and.w	r3, r3, #31
 800bdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	f003 030f 	and.w	r3, r3, #15
 800bdd4:	4a09      	ldr	r2, [pc, #36]	; (800bdfc <HAL_RCC_GetHCLKFreq+0x54>)
 800bdd6:	5cd3      	ldrb	r3, [r2, r3]
 800bdd8:	f003 031f 	and.w	r3, r3, #31
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	fa22 f303 	lsr.w	r3, r2, r3
 800bde2:	4a07      	ldr	r2, [pc, #28]	; (800be00 <HAL_RCC_GetHCLKFreq+0x58>)
 800bde4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bde6:	4a07      	ldr	r2, [pc, #28]	; (800be04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bdec:	4b04      	ldr	r3, [pc, #16]	; (800be00 <HAL_RCC_GetHCLKFreq+0x58>)
 800bdee:	681b      	ldr	r3, [r3, #0]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	08011170 	.word	0x08011170
 800be00:	24000008 	.word	0x24000008
 800be04:	24000004 	.word	0x24000004

0800be08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800be0c:	f7ff ffcc 	bl	800bda8 <HAL_RCC_GetHCLKFreq>
 800be10:	4602      	mov	r2, r0
 800be12:	4b06      	ldr	r3, [pc, #24]	; (800be2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	091b      	lsrs	r3, r3, #4
 800be18:	f003 0307 	and.w	r3, r3, #7
 800be1c:	4904      	ldr	r1, [pc, #16]	; (800be30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800be1e:	5ccb      	ldrb	r3, [r1, r3]
 800be20:	f003 031f 	and.w	r3, r3, #31
 800be24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800be28:	4618      	mov	r0, r3
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	58024400 	.word	0x58024400
 800be30:	08011170 	.word	0x08011170

0800be34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800be38:	f7ff ffb6 	bl	800bda8 <HAL_RCC_GetHCLKFreq>
 800be3c:	4602      	mov	r2, r0
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	0a1b      	lsrs	r3, r3, #8
 800be44:	f003 0307 	and.w	r3, r3, #7
 800be48:	4904      	ldr	r1, [pc, #16]	; (800be5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800be4a:	5ccb      	ldrb	r3, [r1, r3]
 800be4c:	f003 031f 	and.w	r3, r3, #31
 800be50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800be54:	4618      	mov	r0, r3
 800be56:	bd80      	pop	{r7, pc}
 800be58:	58024400 	.word	0x58024400
 800be5c:	08011170 	.word	0x08011170

0800be60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be68:	2300      	movs	r3, #0
 800be6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be6c:	2300      	movs	r3, #0
 800be6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d03f      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be84:	d02a      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800be86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be8a:	d824      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800be8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be90:	d018      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800be92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be96:	d81e      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800be9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bea0:	d007      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bea2:	e018      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bea4:	4ba3      	ldr	r3, [pc, #652]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea8:	4aa2      	ldr	r2, [pc, #648]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800beaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800beb0:	e015      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3304      	adds	r3, #4
 800beb6:	2102      	movs	r1, #2
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 f9d5 	bl	800d268 <RCCEx_PLL2_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bec2:	e00c      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3324      	adds	r3, #36	; 0x24
 800bec8:	2102      	movs	r1, #2
 800beca:	4618      	mov	r0, r3
 800becc:	f001 fa7e 	bl	800d3cc <RCCEx_PLL3_Config>
 800bed0:	4603      	mov	r3, r0
 800bed2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bed4:	e003      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	75fb      	strb	r3, [r7, #23]
      break;
 800beda:	e000      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bedc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d109      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bee4:	4b93      	ldr	r3, [pc, #588]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bef0:	4990      	ldr	r1, [pc, #576]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	650b      	str	r3, [r1, #80]	; 0x50
 800bef6:	e001      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d03d      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	d826      	bhi.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bf10:	a201      	add	r2, pc, #4	; (adr r2, 800bf18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800bf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf16:	bf00      	nop
 800bf18:	0800bf2d 	.word	0x0800bf2d
 800bf1c:	0800bf3b 	.word	0x0800bf3b
 800bf20:	0800bf4d 	.word	0x0800bf4d
 800bf24:	0800bf65 	.word	0x0800bf65
 800bf28:	0800bf65 	.word	0x0800bf65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf2c:	4b81      	ldr	r3, [pc, #516]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	4a80      	ldr	r2, [pc, #512]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf38:	e015      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 f991 	bl	800d268 <RCCEx_PLL2_Config>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf4a:	e00c      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3324      	adds	r3, #36	; 0x24
 800bf50:	2100      	movs	r1, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 fa3a 	bl	800d3cc <RCCEx_PLL3_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf5c:	e003      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	75fb      	strb	r3, [r7, #23]
      break;
 800bf62:	e000      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bf64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d109      	bne.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf6c:	4b71      	ldr	r3, [pc, #452]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf70:	f023 0207 	bic.w	r2, r3, #7
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf78:	496e      	ldr	r1, [pc, #440]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	650b      	str	r3, [r1, #80]	; 0x50
 800bf7e:	e001      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d042      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf98:	d02b      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bf9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf9e:	d825      	bhi.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bfa0:	2bc0      	cmp	r3, #192	; 0xc0
 800bfa2:	d028      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bfa4:	2bc0      	cmp	r3, #192	; 0xc0
 800bfa6:	d821      	bhi.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bfa8:	2b80      	cmp	r3, #128	; 0x80
 800bfaa:	d016      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800bfac:	2b80      	cmp	r3, #128	; 0x80
 800bfae:	d81d      	bhi.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d007      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bfb8:	e018      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfba:	4b5e      	ldr	r3, [pc, #376]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	4a5d      	ldr	r2, [pc, #372]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bfc6:	e017      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	2100      	movs	r1, #0
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 f94a 	bl	800d268 <RCCEx_PLL2_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bfd8:	e00e      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3324      	adds	r3, #36	; 0x24
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f001 f9f3 	bl	800d3cc <RCCEx_PLL3_Config>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bfea:	e005      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	75fb      	strb	r3, [r7, #23]
      break;
 800bff0:	e002      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bff2:	bf00      	nop
 800bff4:	e000      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d109      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bffe:	4b4d      	ldr	r3, [pc, #308]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c002:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00a:	494a      	ldr	r1, [pc, #296]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	650b      	str	r3, [r1, #80]	; 0x50
 800c010:	e001      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d049      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c02c:	d030      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c02e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c032:	d82a      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c038:	d02c      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c03a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c03e:	d824      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c044:	d018      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c04a:	d81e      	bhi.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c054:	d007      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c056:	e018      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	4a35      	ldr	r2, [pc, #212]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c064:	e017      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3304      	adds	r3, #4
 800c06a:	2100      	movs	r1, #0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 f8fb 	bl	800d268 <RCCEx_PLL2_Config>
 800c072:	4603      	mov	r3, r0
 800c074:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c076:	e00e      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3324      	adds	r3, #36	; 0x24
 800c07c:	2100      	movs	r1, #0
 800c07e:	4618      	mov	r0, r3
 800c080:	f001 f9a4 	bl	800d3cc <RCCEx_PLL3_Config>
 800c084:	4603      	mov	r3, r0
 800c086:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c088:	e005      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]
      break;
 800c08e:	e002      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c090:	bf00      	nop
 800c092:	e000      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c094:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c09c:	4b25      	ldr	r3, [pc, #148]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c0aa:	4922      	ldr	r1, [pc, #136]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	658b      	str	r3, [r1, #88]	; 0x58
 800c0b0:	e001      	b.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d04b      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0cc:	d030      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c0ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0d2:	d82a      	bhi.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c0d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0d8:	d02e      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c0da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0de:	d824      	bhi.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c0e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e4:	d018      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c0e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0ea:	d81e      	bhi.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d003      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c0f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0f4:	d007      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c0f6:	e018      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0f8:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	4a0d      	ldr	r2, [pc, #52]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c104:	e019      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3304      	adds	r3, #4
 800c10a:	2100      	movs	r1, #0
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 f8ab 	bl	800d268 <RCCEx_PLL2_Config>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c116:	e010      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	2100      	movs	r1, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f001 f954 	bl	800d3cc <RCCEx_PLL3_Config>
 800c124:	4603      	mov	r3, r0
 800c126:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c128:	e007      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	75fb      	strb	r3, [r7, #23]
      break;
 800c12e:	e004      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c130:	bf00      	nop
 800c132:	e002      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c134:	58024400 	.word	0x58024400
      break;
 800c138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c140:	4b99      	ldr	r3, [pc, #612]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c144:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c14e:	4996      	ldr	r1, [pc, #600]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c150:	4313      	orrs	r3, r2
 800c152:	658b      	str	r3, [r1, #88]	; 0x58
 800c154:	e001      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d032      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c16a:	2b30      	cmp	r3, #48	; 0x30
 800c16c:	d01c      	beq.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c16e:	2b30      	cmp	r3, #48	; 0x30
 800c170:	d817      	bhi.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c172:	2b20      	cmp	r3, #32
 800c174:	d00c      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c176:	2b20      	cmp	r3, #32
 800c178:	d813      	bhi.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d016      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c17e:	2b10      	cmp	r3, #16
 800c180:	d10f      	bne.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c182:	4b89      	ldr	r3, [pc, #548]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	4a88      	ldr	r2, [pc, #544]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c18c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c18e:	e00e      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	2102      	movs	r1, #2
 800c196:	4618      	mov	r0, r3
 800c198:	f001 f866 	bl	800d268 <RCCEx_PLL2_Config>
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c1a0:	e005      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a6:	e002      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c1a8:	bf00      	nop
 800c1aa:	e000      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d109      	bne.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c1b4:	4b7c      	ldr	r3, [pc, #496]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1c0:	4979      	ldr	r1, [pc, #484]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c1c6:	e001      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d047      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1e0:	d030      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c1e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1e6:	d82a      	bhi.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c1e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1ec:	d02c      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c1ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1f2:	d824      	bhi.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c1f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1f8:	d018      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1fe:	d81e      	bhi.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c208:	d007      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c20a:	e018      	b.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c20c:	4b66      	ldr	r3, [pc, #408]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	4a65      	ldr	r2, [pc, #404]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c218:	e017      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3304      	adds	r3, #4
 800c21e:	2100      	movs	r1, #0
 800c220:	4618      	mov	r0, r3
 800c222:	f001 f821 	bl	800d268 <RCCEx_PLL2_Config>
 800c226:	4603      	mov	r3, r0
 800c228:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c22a:	e00e      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3324      	adds	r3, #36	; 0x24
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f001 f8ca 	bl	800d3cc <RCCEx_PLL3_Config>
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c23c:	e005      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	75fb      	strb	r3, [r7, #23]
      break;
 800c242:	e002      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c244:	bf00      	nop
 800c246:	e000      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d109      	bne.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c250:	4b55      	ldr	r3, [pc, #340]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c254:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25c:	4952      	ldr	r1, [pc, #328]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	650b      	str	r3, [r1, #80]	; 0x50
 800c262:	e001      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d049      	beq.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c27c:	d02e      	beq.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c27e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c282:	d828      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c288:	d02a      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c28a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c28e:	d822      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c294:	d026      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c29a:	d81c      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c29c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2a0:	d010      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c2a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2a6:	d816      	bhi.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d01d      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b0:	d111      	bne.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 ffd5 	bl	800d268 <RCCEx_PLL2_Config>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c2c2:	e012      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3324      	adds	r3, #36	; 0x24
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 f87e 	bl	800d3cc <RCCEx_PLL3_Config>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c2d4:	e009      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2da:	e006      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c2dc:	bf00      	nop
 800c2de:	e004      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c2e0:	bf00      	nop
 800c2e2:	e002      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c2e4:	bf00      	nop
 800c2e6:	e000      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c2e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d109      	bne.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c2f0:	4b2d      	ldr	r3, [pc, #180]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2fc:	492a      	ldr	r1, [pc, #168]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	650b      	str	r3, [r1, #80]	; 0x50
 800c302:	e001      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d04d      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c31a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c31e:	d02e      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c324:	d828      	bhi.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c32a:	d02a      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c330:	d822      	bhi.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c336:	d026      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c33c:	d81c      	bhi.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c342:	d010      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c348:	d816      	bhi.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d01d      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c352:	d111      	bne.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3304      	adds	r3, #4
 800c358:	2101      	movs	r1, #1
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 ff84 	bl	800d268 <RCCEx_PLL2_Config>
 800c360:	4603      	mov	r3, r0
 800c362:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c364:	e012      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3324      	adds	r3, #36	; 0x24
 800c36a:	2101      	movs	r1, #1
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 f82d 	bl	800d3cc <RCCEx_PLL3_Config>
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c376:	e009      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]
      break;
 800c37c:	e006      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c37e:	bf00      	nop
 800c380:	e004      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c382:	bf00      	nop
 800c384:	e002      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c386:	bf00      	nop
 800c388:	e000      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c38a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c38c:	7dfb      	ldrb	r3, [r7, #23]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10c      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c396:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3a0:	4901      	ldr	r1, [pc, #4]	; (800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	658b      	str	r3, [r1, #88]	; 0x58
 800c3a6:	e003      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c3a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d02f      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c4:	d00e      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c3c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ca:	d814      	bhi.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d015      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c3d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3d4:	d10f      	bne.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d6:	4baf      	ldr	r3, [pc, #700]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	4aae      	ldr	r2, [pc, #696]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c3e2:	e00c      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 ff3c 	bl	800d268 <RCCEx_PLL2_Config>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c3f4:	e003      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3fa:	e000      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c3fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d109      	bne.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c404:	4ba3      	ldr	r3, [pc, #652]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c408:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c410:	49a0      	ldr	r1, [pc, #640]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c412:	4313      	orrs	r3, r2
 800c414:	650b      	str	r3, [r1, #80]	; 0x50
 800c416:	e001      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d032      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42c:	2b03      	cmp	r3, #3
 800c42e:	d81b      	bhi.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c430:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c436:	bf00      	nop
 800c438:	0800c46f 	.word	0x0800c46f
 800c43c:	0800c449 	.word	0x0800c449
 800c440:	0800c457 	.word	0x0800c457
 800c444:	0800c46f 	.word	0x0800c46f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c448:	4b92      	ldr	r3, [pc, #584]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	4a91      	ldr	r2, [pc, #580]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c44e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c454:	e00c      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3304      	adds	r3, #4
 800c45a:	2102      	movs	r1, #2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 ff03 	bl	800d268 <RCCEx_PLL2_Config>
 800c462:	4603      	mov	r3, r0
 800c464:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c466:	e003      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	75fb      	strb	r3, [r7, #23]
      break;
 800c46c:	e000      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c46e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c476:	4b87      	ldr	r3, [pc, #540]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c47a:	f023 0203 	bic.w	r2, r3, #3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c482:	4984      	ldr	r1, [pc, #528]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c484:	4313      	orrs	r3, r2
 800c486:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c488:	e001      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 8086 	beq.w	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c49c:	4b7e      	ldr	r3, [pc, #504]	; (800c698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a7d      	ldr	r2, [pc, #500]	; (800c698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c4a8:	f7fb f99a 	bl	80077e0 <HAL_GetTick>
 800c4ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4ae:	e009      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4b0:	f7fb f996 	bl	80077e0 <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	2b64      	cmp	r3, #100	; 0x64
 800c4bc:	d902      	bls.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	75fb      	strb	r3, [r7, #23]
        break;
 800c4c2:	e005      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4c4:	4b74      	ldr	r3, [pc, #464]	; (800c698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0ef      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d166      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c4d6:	4b6f      	ldr	r3, [pc, #444]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c4e0:	4053      	eors	r3, r2
 800c4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d013      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4ea:	4b6a      	ldr	r3, [pc, #424]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c4f4:	4b67      	ldr	r3, [pc, #412]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f8:	4a66      	ldr	r2, [pc, #408]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c500:	4b64      	ldr	r3, [pc, #400]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c504:	4a63      	ldr	r2, [pc, #396]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c50a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c50c:	4a61      	ldr	r2, [pc, #388]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c51c:	d115      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c51e:	f7fb f95f 	bl	80077e0 <HAL_GetTick>
 800c522:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c524:	e00b      	b.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c526:	f7fb f95b 	bl	80077e0 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	f241 3288 	movw	r2, #5000	; 0x1388
 800c534:	4293      	cmp	r3, r2
 800c536:	d902      	bls.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	75fb      	strb	r3, [r7, #23]
            break;
 800c53c:	e005      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c53e:	4b55      	ldr	r3, [pc, #340]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0ed      	beq.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d126      	bne.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c55a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c55e:	d10d      	bne.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c560:	4b4c      	ldr	r3, [pc, #304]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c56e:	0919      	lsrs	r1, r3, #4
 800c570:	4b4a      	ldr	r3, [pc, #296]	; (800c69c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c572:	400b      	ands	r3, r1
 800c574:	4947      	ldr	r1, [pc, #284]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c576:	4313      	orrs	r3, r2
 800c578:	610b      	str	r3, [r1, #16]
 800c57a:	e005      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c57c:	4b45      	ldr	r3, [pc, #276]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	4a44      	ldr	r2, [pc, #272]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c582:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c586:	6113      	str	r3, [r2, #16]
 800c588:	4b42      	ldr	r3, [pc, #264]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c58a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c596:	493f      	ldr	r1, [pc, #252]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c598:	4313      	orrs	r3, r2
 800c59a:	670b      	str	r3, [r1, #112]	; 0x70
 800c59c:	e004      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
 800c5a0:	75bb      	strb	r3, [r7, #22]
 800c5a2:	e001      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 8085 	beq.w	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ba:	2b28      	cmp	r3, #40	; 0x28
 800c5bc:	d866      	bhi.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c5be:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c6a1 	.word	0x0800c6a1
 800c5c8:	0800c68d 	.word	0x0800c68d
 800c5cc:	0800c68d 	.word	0x0800c68d
 800c5d0:	0800c68d 	.word	0x0800c68d
 800c5d4:	0800c68d 	.word	0x0800c68d
 800c5d8:	0800c68d 	.word	0x0800c68d
 800c5dc:	0800c68d 	.word	0x0800c68d
 800c5e0:	0800c68d 	.word	0x0800c68d
 800c5e4:	0800c669 	.word	0x0800c669
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c68d 	.word	0x0800c68d
 800c5f0:	0800c68d 	.word	0x0800c68d
 800c5f4:	0800c68d 	.word	0x0800c68d
 800c5f8:	0800c68d 	.word	0x0800c68d
 800c5fc:	0800c68d 	.word	0x0800c68d
 800c600:	0800c68d 	.word	0x0800c68d
 800c604:	0800c67b 	.word	0x0800c67b
 800c608:	0800c68d 	.word	0x0800c68d
 800c60c:	0800c68d 	.word	0x0800c68d
 800c610:	0800c68d 	.word	0x0800c68d
 800c614:	0800c68d 	.word	0x0800c68d
 800c618:	0800c68d 	.word	0x0800c68d
 800c61c:	0800c68d 	.word	0x0800c68d
 800c620:	0800c68d 	.word	0x0800c68d
 800c624:	0800c6a1 	.word	0x0800c6a1
 800c628:	0800c68d 	.word	0x0800c68d
 800c62c:	0800c68d 	.word	0x0800c68d
 800c630:	0800c68d 	.word	0x0800c68d
 800c634:	0800c68d 	.word	0x0800c68d
 800c638:	0800c68d 	.word	0x0800c68d
 800c63c:	0800c68d 	.word	0x0800c68d
 800c640:	0800c68d 	.word	0x0800c68d
 800c644:	0800c6a1 	.word	0x0800c6a1
 800c648:	0800c68d 	.word	0x0800c68d
 800c64c:	0800c68d 	.word	0x0800c68d
 800c650:	0800c68d 	.word	0x0800c68d
 800c654:	0800c68d 	.word	0x0800c68d
 800c658:	0800c68d 	.word	0x0800c68d
 800c65c:	0800c68d 	.word	0x0800c68d
 800c660:	0800c68d 	.word	0x0800c68d
 800c664:	0800c6a1 	.word	0x0800c6a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3304      	adds	r3, #4
 800c66c:	2101      	movs	r1, #1
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fdfa 	bl	800d268 <RCCEx_PLL2_Config>
 800c674:	4603      	mov	r3, r0
 800c676:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c678:	e013      	b.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3324      	adds	r3, #36	; 0x24
 800c67e:	2101      	movs	r1, #1
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fea3 	bl	800d3cc <RCCEx_PLL3_Config>
 800c686:	4603      	mov	r3, r0
 800c688:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c68a:	e00a      	b.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	75fb      	strb	r3, [r7, #23]
      break;
 800c690:	e007      	b.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c692:	bf00      	nop
 800c694:	58024400 	.word	0x58024400
 800c698:	58024800 	.word	0x58024800
 800c69c:	00ffffcf 	.word	0x00ffffcf
      break;
 800c6a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d109      	bne.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c6a8:	4b96      	ldr	r3, [pc, #600]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b4:	4993      	ldr	r1, [pc, #588]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	654b      	str	r3, [r1, #84]	; 0x54
 800c6ba:	e001      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d038      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d0:	2b05      	cmp	r3, #5
 800c6d2:	d821      	bhi.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c6d4:	a201      	add	r2, pc, #4	; (adr r2, 800c6dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6da:	bf00      	nop
 800c6dc:	0800c71f 	.word	0x0800c71f
 800c6e0:	0800c6f5 	.word	0x0800c6f5
 800c6e4:	0800c707 	.word	0x0800c707
 800c6e8:	0800c71f 	.word	0x0800c71f
 800c6ec:	0800c71f 	.word	0x0800c71f
 800c6f0:	0800c71f 	.word	0x0800c71f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fdb4 	bl	800d268 <RCCEx_PLL2_Config>
 800c700:	4603      	mov	r3, r0
 800c702:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c704:	e00c      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3324      	adds	r3, #36	; 0x24
 800c70a:	2101      	movs	r1, #1
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fe5d 	bl	800d3cc <RCCEx_PLL3_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c716:	e003      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	75fb      	strb	r3, [r7, #23]
      break;
 800c71c:	e000      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c71e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c720:	7dfb      	ldrb	r3, [r7, #23]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c726:	4b77      	ldr	r3, [pc, #476]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72a:	f023 0207 	bic.w	r2, r3, #7
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c732:	4974      	ldr	r1, [pc, #464]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c734:	4313      	orrs	r3, r2
 800c736:	654b      	str	r3, [r1, #84]	; 0x54
 800c738:	e001      	b.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 0304 	and.w	r3, r3, #4
 800c746:	2b00      	cmp	r3, #0
 800c748:	d03a      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c750:	2b05      	cmp	r3, #5
 800c752:	d821      	bhi.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c79f 	.word	0x0800c79f
 800c760:	0800c775 	.word	0x0800c775
 800c764:	0800c787 	.word	0x0800c787
 800c768:	0800c79f 	.word	0x0800c79f
 800c76c:	0800c79f 	.word	0x0800c79f
 800c770:	0800c79f 	.word	0x0800c79f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3304      	adds	r3, #4
 800c778:	2101      	movs	r1, #1
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fd74 	bl	800d268 <RCCEx_PLL2_Config>
 800c780:	4603      	mov	r3, r0
 800c782:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c784:	e00c      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3324      	adds	r3, #36	; 0x24
 800c78a:	2101      	movs	r1, #1
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fe1d 	bl	800d3cc <RCCEx_PLL3_Config>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c796:	e003      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	75fb      	strb	r3, [r7, #23]
      break;
 800c79c:	e000      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c79e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c7a6:	4b57      	ldr	r3, [pc, #348]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7aa:	f023 0207 	bic.w	r2, r3, #7
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7b4:	4953      	ldr	r1, [pc, #332]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	658b      	str	r3, [r1, #88]	; 0x58
 800c7ba:	e001      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
 800c7be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0320 	and.w	r3, r3, #32
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d04b      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7d6:	d02e      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7dc:	d828      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7e2:	d02a      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7e8:	d822      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7ee:	d026      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c7f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7f4:	d81c      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7fa:	d010      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d816      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d01d      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c80a:	d111      	bne.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3304      	adds	r3, #4
 800c810:	2100      	movs	r1, #0
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fd28 	bl	800d268 <RCCEx_PLL2_Config>
 800c818:	4603      	mov	r3, r0
 800c81a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c81c:	e012      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3324      	adds	r3, #36	; 0x24
 800c822:	2102      	movs	r1, #2
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fdd1 	bl	800d3cc <RCCEx_PLL3_Config>
 800c82a:	4603      	mov	r3, r0
 800c82c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c82e:	e009      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
      break;
 800c834:	e006      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c836:	bf00      	nop
 800c838:	e004      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c83a:	bf00      	nop
 800c83c:	e002      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c842:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10a      	bne.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c84a:	4b2e      	ldr	r3, [pc, #184]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c858:	492a      	ldr	r1, [pc, #168]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c85a:	4313      	orrs	r3, r2
 800c85c:	654b      	str	r3, [r1, #84]	; 0x54
 800c85e:	e001      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d04d      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c876:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c87a:	d02e      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c87c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c880:	d828      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c886:	d02a      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c88c:	d822      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c88e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c892:	d026      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c898:	d81c      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c89a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c89e:	d010      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8a4:	d816      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d01d      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8ae:	d111      	bne.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fcd6 	bl	800d268 <RCCEx_PLL2_Config>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c8c0:	e012      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3324      	adds	r3, #36	; 0x24
 800c8c6:	2102      	movs	r1, #2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fd7f 	bl	800d3cc <RCCEx_PLL3_Config>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c8d2:	e009      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c8d8:	e006      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c8da:	bf00      	nop
 800c8dc:	e004      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c8de:	bf00      	nop
 800c8e0:	e002      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c8e2:	bf00      	nop
 800c8e4:	e000      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c8e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10c      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c8ee:	4b05      	ldr	r3, [pc, #20]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c8fc:	4901      	ldr	r1, [pc, #4]	; (800c904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	658b      	str	r3, [r1, #88]	; 0x58
 800c902:	e003      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c914:	2b00      	cmp	r3, #0
 800c916:	d04b      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c91e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c922:	d02e      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c924:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c928:	d828      	bhi.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c92a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c92e:	d02a      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c934:	d822      	bhi.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c936:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c93a:	d026      	beq.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c93c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c940:	d81c      	bhi.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c946:	d010      	beq.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c94c:	d816      	bhi.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d01d      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c956:	d111      	bne.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3304      	adds	r3, #4
 800c95c:	2100      	movs	r1, #0
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 fc82 	bl	800d268 <RCCEx_PLL2_Config>
 800c964:	4603      	mov	r3, r0
 800c966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c968:	e012      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3324      	adds	r3, #36	; 0x24
 800c96e:	2102      	movs	r1, #2
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fd2b 	bl	800d3cc <RCCEx_PLL3_Config>
 800c976:	4603      	mov	r3, r0
 800c978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c97a:	e009      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	75fb      	strb	r3, [r7, #23]
      break;
 800c980:	e006      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c982:	bf00      	nop
 800c984:	e004      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c986:	bf00      	nop
 800c988:	e002      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c98a:	bf00      	nop
 800c98c:	e000      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c98e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10a      	bne.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c996:	4b9d      	ldr	r3, [pc, #628]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c99a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c9a4:	4999      	ldr	r1, [pc, #612]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	658b      	str	r3, [r1, #88]	; 0x58
 800c9aa:	e001      	b.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9c6:	d10a      	bne.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3324      	adds	r3, #36	; 0x24
 800c9cc:	2102      	movs	r1, #2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fcfc 	bl	800d3cc <RCCEx_PLL3_Config>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c9de:	4b8b      	ldr	r3, [pc, #556]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9ec:	4987      	ldr	r1, [pc, #540]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0310 	and.w	r3, r3, #16
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d01a      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca08:	d10a      	bne.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3324      	adds	r3, #36	; 0x24
 800ca0e:	2102      	movs	r1, #2
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 fcdb 	bl	800d3cc <RCCEx_PLL3_Config>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca20:	4b7a      	ldr	r3, [pc, #488]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca2e:	4977      	ldr	r1, [pc, #476]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca30:	4313      	orrs	r3, r2
 800ca32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d034      	beq.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca4a:	d01d      	beq.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ca4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca50:	d817      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ca56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca5a:	d009      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ca5c:	e011      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3304      	adds	r3, #4
 800ca62:	2100      	movs	r1, #0
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fbff 	bl	800d268 <RCCEx_PLL2_Config>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ca6e:	e00c      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3324      	adds	r3, #36	; 0x24
 800ca74:	2102      	movs	r1, #2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fca8 	bl	800d3cc <RCCEx_PLL3_Config>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ca80:	e003      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
      break;
 800ca86:	e000      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ca88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca90:	4b5e      	ldr	r3, [pc, #376]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca9e:	495b      	ldr	r1, [pc, #364]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800caa0:	4313      	orrs	r3, r2
 800caa2:	658b      	str	r3, [r1, #88]	; 0x58
 800caa4:	e001      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d033      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cac0:	d01c      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800cac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cac6:	d816      	bhi.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800cac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cacc:	d003      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800cace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cad2:	d007      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800cad4:	e00f      	b.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cad6:	4b4d      	ldr	r3, [pc, #308]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cada:	4a4c      	ldr	r2, [pc, #304]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cadc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800cae2:	e00c      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3324      	adds	r3, #36	; 0x24
 800cae8:	2101      	movs	r1, #1
 800caea:	4618      	mov	r0, r3
 800caec:	f000 fc6e 	bl	800d3cc <RCCEx_PLL3_Config>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800caf4:	e003      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	75fb      	strb	r3, [r7, #23]
      break;
 800cafa:	e000      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800cafc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb04:	4b41      	ldr	r3, [pc, #260]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb12:	493e      	ldr	r1, [pc, #248]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	654b      	str	r3, [r1, #84]	; 0x54
 800cb18:	e001      	b.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d029      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d003      	beq.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800cb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb36:	d007      	beq.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800cb38:	e00f      	b.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb3a:	4b34      	ldr	r3, [pc, #208]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3e:	4a33      	ldr	r2, [pc, #204]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cb46:	e00b      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fb8a 	bl	800d268 <RCCEx_PLL2_Config>
 800cb54:	4603      	mov	r3, r0
 800cb56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cb58:	e002      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	75fb      	strb	r3, [r7, #23]
      break;
 800cb5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d109      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cb66:	4b29      	ldr	r3, [pc, #164]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb72:	4926      	ldr	r1, [pc, #152]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb74:	4313      	orrs	r3, r2
 800cb76:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cb78:	e001      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3324      	adds	r3, #36	; 0x24
 800cb8e:	2102      	movs	r1, #2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fc1b 	bl	800d3cc <RCCEx_PLL3_Config>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d033      	beq.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbb4:	d017      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cbb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbba:	d811      	bhi.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cbbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc0:	d013      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cbc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc6:	d80b      	bhi.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d010      	beq.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800cbcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbd0:	d106      	bne.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbd2:	4b0e      	ldr	r3, [pc, #56]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cbd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cbde:	e007      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	75fb      	strb	r3, [r7, #23]
      break;
 800cbe4:	e004      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cbe6:	bf00      	nop
 800cbe8:	e002      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cbea:	bf00      	nop
 800cbec:	e000      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cbee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10c      	bne.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cbf6:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc02:	4902      	ldr	r1, [pc, #8]	; (800cc0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cc04:	4313      	orrs	r3, r2
 800cc06:	654b      	str	r3, [r1, #84]	; 0x54
 800cc08:	e004      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cc0a:	bf00      	nop
 800cc0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d008      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc20:	4b31      	ldr	r3, [pc, #196]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2c:	492e      	ldr	r1, [pc, #184]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d009      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cc3e:	4b2a      	ldr	r3, [pc, #168]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cc4c:	4926      	ldr	r1, [pc, #152]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d008      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc5e:	4b22      	ldr	r3, [pc, #136]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc6a:	491f      	ldr	r1, [pc, #124]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00d      	beq.n	800cc98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc7c:	4b1a      	ldr	r3, [pc, #104]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc86:	6113      	str	r3, [r2, #16]
 800cc88:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc8a:	691a      	ldr	r2, [r3, #16]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc92:	4915      	ldr	r1, [pc, #84]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc94:	4313      	orrs	r3, r2
 800cc96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	da08      	bge.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cca0:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccac:	490e      	ldr	r1, [pc, #56]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d009      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ccbe:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ccc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cccc:	4906      	ldr	r1, [pc, #24]	; (800cce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ccd2:	7dbb      	ldrb	r3, [r7, #22]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e000      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	58024400 	.word	0x58024400

0800ccec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ccf0:	f7ff f85a 	bl	800bda8 <HAL_RCC_GetHCLKFreq>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	091b      	lsrs	r3, r3, #4
 800ccfc:	f003 0307 	and.w	r3, r3, #7
 800cd00:	4904      	ldr	r1, [pc, #16]	; (800cd14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd02:	5ccb      	ldrb	r3, [r1, r3]
 800cd04:	f003 031f 	and.w	r3, r3, #31
 800cd08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	58024400 	.word	0x58024400
 800cd14:	08011170 	.word	0x08011170

0800cd18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b089      	sub	sp, #36	; 0x24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd20:	4ba1      	ldr	r3, [pc, #644]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	f003 0303 	and.w	r3, r3, #3
 800cd28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cd2a:	4b9f      	ldr	r3, [pc, #636]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2e:	0b1b      	lsrs	r3, r3, #12
 800cd30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd36:	4b9c      	ldr	r3, [pc, #624]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3a:	091b      	lsrs	r3, r3, #4
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cd42:	4b99      	ldr	r3, [pc, #612]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	08db      	lsrs	r3, r3, #3
 800cd48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	fb02 f303 	mul.w	r3, r2, r3
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 8111 	beq.w	800cf88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	f000 8083 	beq.w	800ce74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	f200 80a1 	bhi.w	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d056      	beq.n	800ce30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd82:	e099      	b.n	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd84:	4b88      	ldr	r3, [pc, #544]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d02d      	beq.n	800cdec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd90:	4b85      	ldr	r3, [pc, #532]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	08db      	lsrs	r3, r3, #3
 800cd96:	f003 0303 	and.w	r3, r3, #3
 800cd9a:	4a84      	ldr	r2, [pc, #528]	; (800cfac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cda0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	ee07 3a90 	vmov	s15, r3
 800cda8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdba:	4b7b      	ldr	r3, [pc, #492]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cdea:	e087      	b.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfe:	4b6a      	ldr	r3, [pc, #424]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce2e:	e065      	b.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce42:	4b59      	ldr	r3, [pc, #356]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce72:	e043      	b.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cfbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce86:	4b48      	ldr	r3, [pc, #288]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ceb6:	e021      	b.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceca:	4b37      	ldr	r3, [pc, #220]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cede:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cefa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cefc:	4b2a      	ldr	r3, [pc, #168]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf00:	0a5b      	lsrs	r3, r3, #9
 800cf02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf16:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf22:	ee17 2a90 	vmov	r2, s15
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800cf2a:	4b1f      	ldr	r3, [pc, #124]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	0c1b      	lsrs	r3, r3, #16
 800cf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf34:	ee07 3a90 	vmov	s15, r3
 800cf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf44:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf50:	ee17 2a90 	vmov	r2, s15
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800cf58:	4b13      	ldr	r3, [pc, #76]	; (800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5c:	0e1b      	lsrs	r3, r3, #24
 800cf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf7e:	ee17 2a90 	vmov	r2, s15
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf86:	e008      	b.n	800cf9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	609a      	str	r2, [r3, #8]
}
 800cf9a:	bf00      	nop
 800cf9c:	3724      	adds	r7, #36	; 0x24
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	58024400 	.word	0x58024400
 800cfac:	03d09000 	.word	0x03d09000
 800cfb0:	46000000 	.word	0x46000000
 800cfb4:	4c742400 	.word	0x4c742400
 800cfb8:	4a742400 	.word	0x4a742400
 800cfbc:	4af42400 	.word	0x4af42400

0800cfc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b089      	sub	sp, #36	; 0x24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfc8:	4ba1      	ldr	r3, [pc, #644]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cfd2:	4b9f      	ldr	r3, [pc, #636]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd6:	0d1b      	lsrs	r3, r3, #20
 800cfd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cfde:	4b9c      	ldr	r3, [pc, #624]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe2:	0a1b      	lsrs	r3, r3, #8
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cfea:	4b99      	ldr	r3, [pc, #612]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfee:	08db      	lsrs	r3, r3, #3
 800cff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	fb02 f303 	mul.w	r3, r2, r3
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8111 	beq.w	800d230 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	2b02      	cmp	r3, #2
 800d012:	f000 8083 	beq.w	800d11c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	f200 80a1 	bhi.w	800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2b01      	cmp	r3, #1
 800d028:	d056      	beq.n	800d0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d02a:	e099      	b.n	800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d02c:	4b88      	ldr	r3, [pc, #544]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 0320 	and.w	r3, r3, #32
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02d      	beq.n	800d094 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d038:	4b85      	ldr	r3, [pc, #532]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	08db      	lsrs	r3, r3, #3
 800d03e:	f003 0303 	and.w	r3, r3, #3
 800d042:	4a84      	ldr	r2, [pc, #528]	; (800d254 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
 800d048:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	ee07 3a90 	vmov	s15, r3
 800d050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d062:	4b7b      	ldr	r3, [pc, #492]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d072:	ed97 6a03 	vldr	s12, [r7, #12]
 800d076:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d092:	e087      	b.n	800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a6:	4b6a      	ldr	r3, [pc, #424]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0d6:	e065      	b.n	800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ea:	4b59      	ldr	r3, [pc, #356]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d11a:	e043      	b.n	800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	ee07 3a90 	vmov	s15, r3
 800d122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d264 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d12e:	4b48      	ldr	r3, [pc, #288]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d136:	ee07 3a90 	vmov	s15, r3
 800d13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d142:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d15a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d15e:	e021      	b.n	800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d16a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d172:	4b37      	ldr	r3, [pc, #220]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d17a:	ee07 3a90 	vmov	s15, r3
 800d17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d182:	ed97 6a03 	vldr	s12, [r7, #12]
 800d186:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d1a4:	4b2a      	ldr	r3, [pc, #168]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a8:	0a5b      	lsrs	r3, r3, #9
 800d1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ae:	ee07 3a90 	vmov	s15, r3
 800d1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ca:	ee17 2a90 	vmov	r2, s15
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d1d2:	4b1f      	ldr	r3, [pc, #124]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1dc:	ee07 3a90 	vmov	s15, r3
 800d1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1f8:	ee17 2a90 	vmov	r2, s15
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d200:	4b13      	ldr	r3, [pc, #76]	; (800d250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d204:	0e1b      	lsrs	r3, r3, #24
 800d206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d20a:	ee07 3a90 	vmov	s15, r3
 800d20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d21a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d226:	ee17 2a90 	vmov	r2, s15
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d22e:	e008      	b.n	800d242 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	609a      	str	r2, [r3, #8]
}
 800d242:	bf00      	nop
 800d244:	3724      	adds	r7, #36	; 0x24
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	58024400 	.word	0x58024400
 800d254:	03d09000 	.word	0x03d09000
 800d258:	46000000 	.word	0x46000000
 800d25c:	4c742400 	.word	0x4c742400
 800d260:	4a742400 	.word	0x4a742400
 800d264:	4af42400 	.word	0x4af42400

0800d268 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d276:	4b53      	ldr	r3, [pc, #332]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27a:	f003 0303 	and.w	r3, r3, #3
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d101      	bne.n	800d286 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e099      	b.n	800d3ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d286:	4b4f      	ldr	r3, [pc, #316]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a4e      	ldr	r2, [pc, #312]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d28c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d292:	f7fa faa5 	bl	80077e0 <HAL_GetTick>
 800d296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d298:	e008      	b.n	800d2ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d29a:	f7fa faa1 	bl	80077e0 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d901      	bls.n	800d2ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e086      	b.n	800d3ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2ac:	4b45      	ldr	r3, [pc, #276]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1f0      	bne.n	800d29a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d2b8:	4b42      	ldr	r3, [pc, #264]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	031b      	lsls	r3, r3, #12
 800d2c6:	493f      	ldr	r1, [pc, #252]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	025b      	lsls	r3, r3, #9
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	041b      	lsls	r3, r3, #16
 800d2ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	061b      	lsls	r3, r3, #24
 800d2f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2fc:	4931      	ldr	r1, [pc, #196]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d302:	4b30      	ldr	r3, [pc, #192]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	492d      	ldr	r1, [pc, #180]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d310:	4313      	orrs	r3, r2
 800d312:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d314:	4b2b      	ldr	r3, [pc, #172]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	f023 0220 	bic.w	r2, r3, #32
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	4928      	ldr	r1, [pc, #160]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d322:	4313      	orrs	r3, r2
 800d324:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d326:	4b27      	ldr	r3, [pc, #156]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32a:	4a26      	ldr	r2, [pc, #152]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d32c:	f023 0310 	bic.w	r3, r3, #16
 800d330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d332:	4b24      	ldr	r3, [pc, #144]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d336:	4b24      	ldr	r3, [pc, #144]	; (800d3c8 <RCCEx_PLL2_Config+0x160>)
 800d338:	4013      	ands	r3, r2
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	69d2      	ldr	r2, [r2, #28]
 800d33e:	00d2      	lsls	r2, r2, #3
 800d340:	4920      	ldr	r1, [pc, #128]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d342:	4313      	orrs	r3, r2
 800d344:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d346:	4b1f      	ldr	r3, [pc, #124]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34a:	4a1e      	ldr	r2, [pc, #120]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d34c:	f043 0310 	orr.w	r3, r3, #16
 800d350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d106      	bne.n	800d366 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d358:	4b1a      	ldr	r3, [pc, #104]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	4a19      	ldr	r2, [pc, #100]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d35e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d362:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d364:	e00f      	b.n	800d386 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d106      	bne.n	800d37a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d36c:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	4a14      	ldr	r2, [pc, #80]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d376:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d378:	e005      	b.n	800d386 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d37a:	4b12      	ldr	r3, [pc, #72]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37e:	4a11      	ldr	r2, [pc, #68]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d386:	4b0f      	ldr	r3, [pc, #60]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a0e      	ldr	r2, [pc, #56]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d38c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d392:	f7fa fa25 	bl	80077e0 <HAL_GetTick>
 800d396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d398:	e008      	b.n	800d3ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d39a:	f7fa fa21 	bl	80077e0 <HAL_GetTick>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d901      	bls.n	800d3ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e006      	b.n	800d3ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3ac:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <RCCEx_PLL2_Config+0x15c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d0f0      	beq.n	800d39a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	58024400 	.word	0x58024400
 800d3c8:	ffff0007 	.word	0xffff0007

0800d3cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3da:	4b53      	ldr	r3, [pc, #332]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3de:	f003 0303 	and.w	r3, r3, #3
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d101      	bne.n	800d3ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e099      	b.n	800d51e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d3ea:	4b4f      	ldr	r3, [pc, #316]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a4e      	ldr	r2, [pc, #312]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d3f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3f6:	f7fa f9f3 	bl	80077e0 <HAL_GetTick>
 800d3fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3fc:	e008      	b.n	800d410 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d3fe:	f7fa f9ef 	bl	80077e0 <HAL_GetTick>
 800d402:	4602      	mov	r2, r0
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d901      	bls.n	800d410 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d40c:	2303      	movs	r3, #3
 800d40e:	e086      	b.n	800d51e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d410:	4b45      	ldr	r3, [pc, #276]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f0      	bne.n	800d3fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d41c:	4b42      	ldr	r3, [pc, #264]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d420:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	051b      	lsls	r3, r3, #20
 800d42a:	493f      	ldr	r1, [pc, #252]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d42c:	4313      	orrs	r3, r2
 800d42e:	628b      	str	r3, [r1, #40]	; 0x28
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	3b01      	subs	r3, #1
 800d436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	3b01      	subs	r3, #1
 800d440:	025b      	lsls	r3, r3, #9
 800d442:	b29b      	uxth	r3, r3
 800d444:	431a      	orrs	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	041b      	lsls	r3, r3, #16
 800d44e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d452:	431a      	orrs	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	3b01      	subs	r3, #1
 800d45a:	061b      	lsls	r3, r3, #24
 800d45c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d460:	4931      	ldr	r1, [pc, #196]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d462:	4313      	orrs	r3, r2
 800d464:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d466:	4b30      	ldr	r3, [pc, #192]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	492d      	ldr	r1, [pc, #180]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d474:	4313      	orrs	r3, r2
 800d476:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d478:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d47c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	4928      	ldr	r1, [pc, #160]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d486:	4313      	orrs	r3, r2
 800d488:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d48a:	4b27      	ldr	r3, [pc, #156]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d496:	4b24      	ldr	r3, [pc, #144]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d49a:	4b24      	ldr	r3, [pc, #144]	; (800d52c <RCCEx_PLL3_Config+0x160>)
 800d49c:	4013      	ands	r3, r2
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	69d2      	ldr	r2, [r2, #28]
 800d4a2:	00d2      	lsls	r2, r2, #3
 800d4a4:	4920      	ldr	r1, [pc, #128]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d4aa:	4b1f      	ldr	r3, [pc, #124]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ae:	4a1e      	ldr	r2, [pc, #120]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d106      	bne.n	800d4ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d4bc:	4b1a      	ldr	r3, [pc, #104]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	4a19      	ldr	r2, [pc, #100]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4c8:	e00f      	b.n	800d4ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d106      	bne.n	800d4de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d4d0:	4b15      	ldr	r3, [pc, #84]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	4a14      	ldr	r2, [pc, #80]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4dc:	e005      	b.n	800d4ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d4de:	4b12      	ldr	r3, [pc, #72]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e2:	4a11      	ldr	r2, [pc, #68]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a0e      	ldr	r2, [pc, #56]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4f6:	f7fa f973 	bl	80077e0 <HAL_GetTick>
 800d4fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4fc:	e008      	b.n	800d510 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d4fe:	f7fa f96f 	bl	80077e0 <HAL_GetTick>
 800d502:	4602      	mov	r2, r0
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d901      	bls.n	800d510 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d50c:	2303      	movs	r3, #3
 800d50e:	e006      	b.n	800d51e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d510:	4b05      	ldr	r3, [pc, #20]	; (800d528 <RCCEx_PLL3_Config+0x15c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0f0      	beq.n	800d4fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	58024400 	.word	0x58024400
 800d52c:	ffff0007 	.word	0xffff0007

0800d530 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	e0f1      	b.n	800d726 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a78      	ldr	r2, [pc, #480]	; (800d730 <HAL_SPI_Init+0x200>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00f      	beq.n	800d572 <HAL_SPI_Init+0x42>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a77      	ldr	r2, [pc, #476]	; (800d734 <HAL_SPI_Init+0x204>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00a      	beq.n	800d572 <HAL_SPI_Init+0x42>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a75      	ldr	r2, [pc, #468]	; (800d738 <HAL_SPI_Init+0x208>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d005      	beq.n	800d572 <HAL_SPI_Init+0x42>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	2b0f      	cmp	r3, #15
 800d56c:	d901      	bls.n	800d572 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e0d9      	b.n	800d726 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fba2 	bl	800dcbc <SPI_GetPacketSize>
 800d578:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a6c      	ldr	r2, [pc, #432]	; (800d730 <HAL_SPI_Init+0x200>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d00c      	beq.n	800d59e <HAL_SPI_Init+0x6e>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a6a      	ldr	r2, [pc, #424]	; (800d734 <HAL_SPI_Init+0x204>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d007      	beq.n	800d59e <HAL_SPI_Init+0x6e>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a69      	ldr	r2, [pc, #420]	; (800d738 <HAL_SPI_Init+0x208>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d002      	beq.n	800d59e <HAL_SPI_Init+0x6e>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b08      	cmp	r3, #8
 800d59c:	d811      	bhi.n	800d5c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d5a2:	4a63      	ldr	r2, [pc, #396]	; (800d730 <HAL_SPI_Init+0x200>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d009      	beq.n	800d5bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a61      	ldr	r2, [pc, #388]	; (800d734 <HAL_SPI_Init+0x204>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d004      	beq.n	800d5bc <HAL_SPI_Init+0x8c>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a60      	ldr	r2, [pc, #384]	; (800d738 <HAL_SPI_Init+0x208>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d104      	bne.n	800d5c6 <HAL_SPI_Init+0x96>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b10      	cmp	r3, #16
 800d5c0:	d901      	bls.n	800d5c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e0af      	b.n	800d726 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7f9 fe08 	bl	80071f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 0201 	bic.w	r2, r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d602:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d60c:	d119      	bne.n	800d642 <HAL_SPI_Init+0x112>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d616:	d103      	bne.n	800d620 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d008      	beq.n	800d632 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10c      	bne.n	800d642 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d62c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d630:	d107      	bne.n	800d642 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d640:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	69da      	ldr	r2, [r3, #28]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64a:	431a      	orrs	r2, r3
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d654:	ea42 0103 	orr.w	r1, r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	430a      	orrs	r2, r1
 800d662:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	431a      	orrs	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d672:	431a      	orrs	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	431a      	orrs	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	695b      	ldr	r3, [r3, #20]
 800d684:	431a      	orrs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	431a      	orrs	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d696:	431a      	orrs	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	431a      	orrs	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6a2:	ea42 0103 	orr.w	r1, r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d113      	bne.n	800d6e2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0201 	bic.w	r2, r2, #1
 800d6f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	430a      	orrs	r2, r1
 800d712:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	40013000 	.word	0x40013000
 800d734:	40003800 	.word	0x40003800
 800d738:	40003c00 	.word	0x40003c00

0800d73c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	; 0x28
 800d740:	af02      	add	r7, sp, #8
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	4613      	mov	r3, r2
 800d74a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3320      	adds	r3, #32
 800d752:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_SPI_Transmit+0x2a>
 800d762:	2302      	movs	r3, #2
 800d764:	e1d7      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d76e:	f7fa f837 	bl	80077e0 <HAL_GetTick>
 800d772:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d007      	beq.n	800d790 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d780:	2302      	movs	r3, #2
 800d782:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d78c:	7efb      	ldrb	r3, [r7, #27]
 800d78e:	e1c2      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <HAL_SPI_Transmit+0x60>
 800d796:	88fb      	ldrh	r3, [r7, #6]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d107      	bne.n	800d7ac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d7a8:	7efb      	ldrb	r3, [r7, #27]
 800d7aa:	e1b4      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2203      	movs	r2, #3
 800d7b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	88fa      	ldrh	r2, [r7, #6]
 800d7c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	88fa      	ldrh	r2, [r7, #6]
 800d7ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d7fc:	d107      	bne.n	800d80e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d80c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	4b96      	ldr	r3, [pc, #600]	; (800da70 <HAL_SPI_Transmit+0x334>)
 800d816:	4013      	ands	r3, r2
 800d818:	88f9      	ldrh	r1, [r7, #6]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	430b      	orrs	r3, r1
 800d820:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f042 0201 	orr.w	r2, r2, #1
 800d830:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d83a:	d107      	bne.n	800d84c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d84a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	2b0f      	cmp	r3, #15
 800d852:	d947      	bls.n	800d8e4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d854:	e03f      	b.n	800d8d6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	2b02      	cmp	r3, #2
 800d862:	d114      	bne.n	800d88e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6812      	ldr	r2, [r2, #0]
 800d86e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d874:	1d1a      	adds	r2, r3, #4
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d880:	b29b      	uxth	r3, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	b29a      	uxth	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d88c:	e023      	b.n	800d8d6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d88e:	f7f9 ffa7 	bl	80077e0 <HAL_GetTick>
 800d892:	4602      	mov	r2, r0
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d803      	bhi.n	800d8a6 <HAL_SPI_Transmit+0x16a>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a4:	d102      	bne.n	800d8ac <HAL_SPI_Transmit+0x170>
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d114      	bne.n	800d8d6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 f937 	bl	800db20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e11f      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1b9      	bne.n	800d856 <HAL_SPI_Transmit+0x11a>
 800d8e2:	e0f2      	b.n	800daca <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	2b07      	cmp	r3, #7
 800d8ea:	f240 80e7 	bls.w	800dabc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d8ee:	e05d      	b.n	800d9ac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	f003 0302 	and.w	r3, r3, #2
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d132      	bne.n	800d964 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d904:	b29b      	uxth	r3, r3
 800d906:	2b01      	cmp	r3, #1
 800d908:	d918      	bls.n	800d93c <HAL_SPI_Transmit+0x200>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d014      	beq.n	800d93c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6812      	ldr	r2, [r2, #0]
 800d91c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d922:	1d1a      	adds	r2, r3, #4
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d92e:	b29b      	uxth	r3, r3
 800d930:	3b02      	subs	r3, #2
 800d932:	b29a      	uxth	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d93a:	e037      	b.n	800d9ac <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d940:	881a      	ldrh	r2, [r3, #0]
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d94a:	1c9a      	adds	r2, r3, #2
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d956:	b29b      	uxth	r3, r3
 800d958:	3b01      	subs	r3, #1
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d962:	e023      	b.n	800d9ac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d964:	f7f9 ff3c 	bl	80077e0 <HAL_GetTick>
 800d968:	4602      	mov	r2, r0
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d803      	bhi.n	800d97c <HAL_SPI_Transmit+0x240>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97a:	d102      	bne.n	800d982 <HAL_SPI_Transmit+0x246>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d114      	bne.n	800d9ac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 f8cc 	bl	800db20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	e0b4      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d19b      	bne.n	800d8f0 <HAL_SPI_Transmit+0x1b4>
 800d9b8:	e087      	b.n	800daca <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d155      	bne.n	800da74 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d918      	bls.n	800da06 <HAL_SPI_Transmit+0x2ca>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d8:	2b40      	cmp	r3, #64	; 0x40
 800d9da:	d914      	bls.n	800da06 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ec:	1d1a      	adds	r2, r3, #4
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	3b04      	subs	r3, #4
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800da04:	e05a      	b.n	800dabc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d917      	bls.n	800da42 <HAL_SPI_Transmit+0x306>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d013      	beq.n	800da42 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da1e:	881a      	ldrh	r2, [r3, #0]
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da28:	1c9a      	adds	r2, r3, #2
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da34:	b29b      	uxth	r3, r3
 800da36:	3b02      	subs	r3, #2
 800da38:	b29a      	uxth	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800da40:	e03c      	b.n	800dabc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3320      	adds	r3, #32
 800da4c:	7812      	ldrb	r2, [r2, #0]
 800da4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da60:	b29b      	uxth	r3, r3
 800da62:	3b01      	subs	r3, #1
 800da64:	b29a      	uxth	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800da6c:	e026      	b.n	800dabc <HAL_SPI_Transmit+0x380>
 800da6e:	bf00      	nop
 800da70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da74:	f7f9 feb4 	bl	80077e0 <HAL_GetTick>
 800da78:	4602      	mov	r2, r0
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	429a      	cmp	r2, r3
 800da82:	d803      	bhi.n	800da8c <HAL_SPI_Transmit+0x350>
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8a:	d102      	bne.n	800da92 <HAL_SPI_Transmit+0x356>
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d114      	bne.n	800dabc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 f844 	bl	800db20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dab8:	2303      	movs	r3, #3
 800daba:	e02c      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f47f af78 	bne.w	800d9ba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2200      	movs	r2, #0
 800dad2:	2108      	movs	r1, #8
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f8c3 	bl	800dc60 <SPI_WaitOnFlagUntilTimeout>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d007      	beq.n	800daf0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dae6:	f043 0220 	orr.w	r2, r3, #32
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f000 f815 	bl	800db20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2201      	movs	r2, #1
 800db02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	e000      	b.n	800db16 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800db14:	7efb      	ldrb	r3, [r7, #27]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop

0800db20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699a      	ldr	r2, [r3, #24]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0208 	orr.w	r2, r2, #8
 800db3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	699a      	ldr	r2, [r3, #24]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f042 0210 	orr.w	r2, r2, #16
 800db4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0201 	bic.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6919      	ldr	r1, [r3, #16]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	4b3c      	ldr	r3, [pc, #240]	; (800dc5c <SPI_CloseTransfer+0x13c>)
 800db6c:	400b      	ands	r3, r1
 800db6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800db7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b04      	cmp	r3, #4
 800db8a:	d014      	beq.n	800dbb6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00f      	beq.n	800dbb6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f042 0220 	orr.w	r2, r2, #32
 800dbb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d014      	beq.n	800dbec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00f      	beq.n	800dbec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbd2:	f043 0204 	orr.w	r2, r3, #4
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00f      	beq.n	800dc16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbfc:	f043 0201 	orr.w	r2, r3, #1
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00f      	beq.n	800dc40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc26:	f043 0208 	orr.w	r2, r3, #8
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	699a      	ldr	r2, [r3, #24]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dc50:	bf00      	nop
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr
 800dc5c:	fffffc90 	.word	0xfffffc90

0800dc60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc70:	e010      	b.n	800dc94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc72:	f7f9 fdb5 	bl	80077e0 <HAL_GetTick>
 800dc76:	4602      	mov	r2, r0
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	69ba      	ldr	r2, [r7, #24]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d803      	bhi.n	800dc8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc88:	d102      	bne.n	800dc90 <SPI_WaitOnFlagUntilTimeout+0x30>
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800dc90:	2303      	movs	r3, #3
 800dc92:	e00f      	b.n	800dcb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	695a      	ldr	r2, [r3, #20]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	bf0c      	ite	eq
 800dca4:	2301      	moveq	r3, #1
 800dca6:	2300      	movne	r3, #0
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	461a      	mov	r2, r3
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d0df      	beq.n	800dc72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc8:	095b      	lsrs	r3, r3, #5
 800dcca:	3301      	adds	r3, #1
 800dccc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	3307      	adds	r3, #7
 800dcda:	08db      	lsrs	r3, r3, #3
 800dcdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	fb02 f303 	mul.w	r3, r2, r3
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e049      	b.n	800dd98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d106      	bne.n	800dd1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7f9 fad5 	bl	80072c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2202      	movs	r2, #2
 800dd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4610      	mov	r0, r2
 800dd32:	f000 fa23 	bl	800e17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2201      	movs	r2, #1
 800dd42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d001      	beq.n	800ddb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e054      	b.n	800de62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2202      	movs	r2, #2
 800ddbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68da      	ldr	r2, [r3, #12]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f042 0201 	orr.w	r2, r2, #1
 800ddce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a26      	ldr	r2, [pc, #152]	; (800de70 <HAL_TIM_Base_Start_IT+0xd0>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d022      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dde2:	d01d      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a22      	ldr	r2, [pc, #136]	; (800de74 <HAL_TIM_Base_Start_IT+0xd4>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d018      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a21      	ldr	r2, [pc, #132]	; (800de78 <HAL_TIM_Base_Start_IT+0xd8>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d013      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a1f      	ldr	r2, [pc, #124]	; (800de7c <HAL_TIM_Base_Start_IT+0xdc>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d00e      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a1e      	ldr	r2, [pc, #120]	; (800de80 <HAL_TIM_Base_Start_IT+0xe0>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d009      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a1c      	ldr	r2, [pc, #112]	; (800de84 <HAL_TIM_Base_Start_IT+0xe4>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d004      	beq.n	800de20 <HAL_TIM_Base_Start_IT+0x80>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a1b      	ldr	r2, [pc, #108]	; (800de88 <HAL_TIM_Base_Start_IT+0xe8>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d115      	bne.n	800de4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	689a      	ldr	r2, [r3, #8]
 800de26:	4b19      	ldr	r3, [pc, #100]	; (800de8c <HAL_TIM_Base_Start_IT+0xec>)
 800de28:	4013      	ands	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b06      	cmp	r3, #6
 800de30:	d015      	beq.n	800de5e <HAL_TIM_Base_Start_IT+0xbe>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de38:	d011      	beq.n	800de5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f042 0201 	orr.w	r2, r2, #1
 800de48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de4a:	e008      	b.n	800de5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f042 0201 	orr.w	r2, r2, #1
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	e000      	b.n	800de60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	40010000 	.word	0x40010000
 800de74:	40000400 	.word	0x40000400
 800de78:	40000800 	.word	0x40000800
 800de7c:	40000c00 	.word	0x40000c00
 800de80:	40010400 	.word	0x40010400
 800de84:	40001800 	.word	0x40001800
 800de88:	40014000 	.word	0x40014000
 800de8c:	00010007 	.word	0x00010007

0800de90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68da      	ldr	r2, [r3, #12]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f022 0201 	bic.w	r2, r2, #1
 800dea6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	6a1a      	ldr	r2, [r3, #32]
 800deae:	f241 1311 	movw	r3, #4369	; 0x1111
 800deb2:	4013      	ands	r3, r2
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10f      	bne.n	800ded8 <HAL_TIM_Base_Stop_IT+0x48>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6a1a      	ldr	r2, [r3, #32]
 800debe:	f240 4344 	movw	r3, #1092	; 0x444
 800dec2:	4013      	ands	r3, r2
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d107      	bne.n	800ded8 <HAL_TIM_Base_Stop_IT+0x48>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f022 0201 	bic.w	r2, r2, #1
 800ded6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b082      	sub	sp, #8
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	f003 0302 	and.w	r3, r3, #2
 800df00:	2b02      	cmp	r3, #2
 800df02:	d122      	bne.n	800df4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f003 0302 	and.w	r3, r3, #2
 800df0e:	2b02      	cmp	r3, #2
 800df10:	d11b      	bne.n	800df4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f06f 0202 	mvn.w	r2, #2
 800df1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	f003 0303 	and.w	r3, r3, #3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d003      	beq.n	800df38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f905 	bl	800e140 <HAL_TIM_IC_CaptureCallback>
 800df36:	e005      	b.n	800df44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f8f7 	bl	800e12c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f908 	bl	800e154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	f003 0304 	and.w	r3, r3, #4
 800df54:	2b04      	cmp	r3, #4
 800df56:	d122      	bne.n	800df9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f003 0304 	and.w	r3, r3, #4
 800df62:	2b04      	cmp	r3, #4
 800df64:	d11b      	bne.n	800df9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f06f 0204 	mvn.w	r2, #4
 800df6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2202      	movs	r2, #2
 800df74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f8db 	bl	800e140 <HAL_TIM_IC_CaptureCallback>
 800df8a:	e005      	b.n	800df98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 f8cd 	bl	800e12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f8de 	bl	800e154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	f003 0308 	and.w	r3, r3, #8
 800dfa8:	2b08      	cmp	r3, #8
 800dfaa:	d122      	bne.n	800dff2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f003 0308 	and.w	r3, r3, #8
 800dfb6:	2b08      	cmp	r3, #8
 800dfb8:	d11b      	bne.n	800dff2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f06f 0208 	mvn.w	r2, #8
 800dfc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2204      	movs	r2, #4
 800dfc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	69db      	ldr	r3, [r3, #28]
 800dfd0:	f003 0303 	and.w	r3, r3, #3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f8b1 	bl	800e140 <HAL_TIM_IC_CaptureCallback>
 800dfde:	e005      	b.n	800dfec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f8a3 	bl	800e12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f8b4 	bl	800e154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	f003 0310 	and.w	r3, r3, #16
 800dffc:	2b10      	cmp	r3, #16
 800dffe:	d122      	bne.n	800e046 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	f003 0310 	and.w	r3, r3, #16
 800e00a:	2b10      	cmp	r3, #16
 800e00c:	d11b      	bne.n	800e046 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f06f 0210 	mvn.w	r2, #16
 800e016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2208      	movs	r2, #8
 800e01c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f887 	bl	800e140 <HAL_TIM_IC_CaptureCallback>
 800e032:	e005      	b.n	800e040 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f879 	bl	800e12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f88a 	bl	800e154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b01      	cmp	r3, #1
 800e052:	d10e      	bne.n	800e072 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d107      	bne.n	800e072 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f06f 0201 	mvn.w	r2, #1
 800e06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7f8 fb95 	bl	800679c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e07c:	2b80      	cmp	r3, #128	; 0x80
 800e07e:	d10e      	bne.n	800e09e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e08a:	2b80      	cmp	r3, #128	; 0x80
 800e08c:	d107      	bne.n	800e09e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f9a1 	bl	800e3e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ac:	d10e      	bne.n	800e0cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b8:	2b80      	cmp	r3, #128	; 0x80
 800e0ba:	d107      	bne.n	800e0cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f994 	bl	800e3f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d6:	2b40      	cmp	r3, #64	; 0x40
 800e0d8:	d10e      	bne.n	800e0f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e4:	2b40      	cmp	r3, #64	; 0x40
 800e0e6:	d107      	bne.n	800e0f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f838 	bl	800e168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	f003 0320 	and.w	r3, r3, #32
 800e102:	2b20      	cmp	r3, #32
 800e104:	d10e      	bne.n	800e124 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	f003 0320 	and.w	r3, r3, #32
 800e110:	2b20      	cmp	r3, #32
 800e112:	d107      	bne.n	800e124 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f06f 0220 	mvn.w	r2, #32
 800e11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f954 	bl	800e3cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a40      	ldr	r2, [pc, #256]	; (800e290 <TIM_Base_SetConfig+0x114>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d013      	beq.n	800e1bc <TIM_Base_SetConfig+0x40>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e19a:	d00f      	beq.n	800e1bc <TIM_Base_SetConfig+0x40>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a3d      	ldr	r2, [pc, #244]	; (800e294 <TIM_Base_SetConfig+0x118>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d00b      	beq.n	800e1bc <TIM_Base_SetConfig+0x40>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a3c      	ldr	r2, [pc, #240]	; (800e298 <TIM_Base_SetConfig+0x11c>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d007      	beq.n	800e1bc <TIM_Base_SetConfig+0x40>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4a3b      	ldr	r2, [pc, #236]	; (800e29c <TIM_Base_SetConfig+0x120>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d003      	beq.n	800e1bc <TIM_Base_SetConfig+0x40>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a3a      	ldr	r2, [pc, #232]	; (800e2a0 <TIM_Base_SetConfig+0x124>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d108      	bne.n	800e1ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a2f      	ldr	r2, [pc, #188]	; (800e290 <TIM_Base_SetConfig+0x114>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d01f      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1dc:	d01b      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a2c      	ldr	r2, [pc, #176]	; (800e294 <TIM_Base_SetConfig+0x118>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d017      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a2b      	ldr	r2, [pc, #172]	; (800e298 <TIM_Base_SetConfig+0x11c>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d013      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a2a      	ldr	r2, [pc, #168]	; (800e29c <TIM_Base_SetConfig+0x120>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00f      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a29      	ldr	r2, [pc, #164]	; (800e2a0 <TIM_Base_SetConfig+0x124>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d00b      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a28      	ldr	r2, [pc, #160]	; (800e2a4 <TIM_Base_SetConfig+0x128>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d007      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a27      	ldr	r2, [pc, #156]	; (800e2a8 <TIM_Base_SetConfig+0x12c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d003      	beq.n	800e216 <TIM_Base_SetConfig+0x9a>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a26      	ldr	r2, [pc, #152]	; (800e2ac <TIM_Base_SetConfig+0x130>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d108      	bne.n	800e228 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e21c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4313      	orrs	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	695b      	ldr	r3, [r3, #20]
 800e232:	4313      	orrs	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a10      	ldr	r2, [pc, #64]	; (800e290 <TIM_Base_SetConfig+0x114>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d00f      	beq.n	800e274 <TIM_Base_SetConfig+0xf8>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a12      	ldr	r2, [pc, #72]	; (800e2a0 <TIM_Base_SetConfig+0x124>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d00b      	beq.n	800e274 <TIM_Base_SetConfig+0xf8>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a11      	ldr	r2, [pc, #68]	; (800e2a4 <TIM_Base_SetConfig+0x128>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d007      	beq.n	800e274 <TIM_Base_SetConfig+0xf8>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a10      	ldr	r2, [pc, #64]	; (800e2a8 <TIM_Base_SetConfig+0x12c>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d003      	beq.n	800e274 <TIM_Base_SetConfig+0xf8>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a0f      	ldr	r2, [pc, #60]	; (800e2ac <TIM_Base_SetConfig+0x130>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d103      	bne.n	800e27c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	691a      	ldr	r2, [r3, #16]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	615a      	str	r2, [r3, #20]
}
 800e282:	bf00      	nop
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	40010000 	.word	0x40010000
 800e294:	40000400 	.word	0x40000400
 800e298:	40000800 	.word	0x40000800
 800e29c:	40000c00 	.word	0x40000c00
 800e2a0:	40010400 	.word	0x40010400
 800e2a4:	40014000 	.word	0x40014000
 800e2a8:	40014400 	.word	0x40014400
 800e2ac:	40014800 	.word	0x40014800

0800e2b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d101      	bne.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	e06d      	b.n	800e3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a30      	ldr	r2, [pc, #192]	; (800e3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d004      	beq.n	800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a2f      	ldr	r2, [pc, #188]	; (800e3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d108      	bne.n	800e30e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a20      	ldr	r2, [pc, #128]	; (800e3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d022      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d01d      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a1d      	ldr	r2, [pc, #116]	; (800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d018      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a1c      	ldr	r2, [pc, #112]	; (800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d013      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a1a      	ldr	r2, [pc, #104]	; (800e3c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d00e      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a15      	ldr	r2, [pc, #84]	; (800e3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d009      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a16      	ldr	r2, [pc, #88]	; (800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d004      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a15      	ldr	r2, [pc, #84]	; (800e3c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d10c      	bne.n	800e392 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e37e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	4313      	orrs	r3, r2
 800e388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	40010000 	.word	0x40010000
 800e3b4:	40010400 	.word	0x40010400
 800e3b8:	40000400 	.word	0x40000400
 800e3bc:	40000800 	.word	0x40000800
 800e3c0:	40000c00 	.word	0x40000c00
 800e3c4:	40001800 	.word	0x40001800
 800e3c8:	40014000 	.word	0x40014000

0800e3cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3d4:	bf00      	nop
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3e8:	bf00      	nop
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3fc:	bf00      	nop
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e042      	b.n	800e4a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7f8 ff73 	bl	8007318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2224      	movs	r2, #36	; 0x24
 800e436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f022 0201 	bic.w	r2, r2, #1
 800e448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fbea 	bl	800ec24 <UART_SetConfig>
 800e450:	4603      	mov	r3, r0
 800e452:	2b01      	cmp	r3, #1
 800e454:	d101      	bne.n	800e45a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e022      	b.n	800e4a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f001 f946 	bl	800f6f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	689a      	ldr	r2, [r3, #8]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f042 0201 	orr.w	r2, r2, #1
 800e496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 f9cd 	bl	800f838 <UART_CheckIdleState>
 800e49e:	4603      	mov	r3, r0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b0ba      	sub	sp, #232	; 0xe8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e4d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d11b      	bne.n	800e51c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e8:	f003 0320 	and.w	r3, r3, #32
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d015      	beq.n	800e51c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f4:	f003 0320 	and.w	r3, r3, #32
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 835a 	beq.w	800ebc6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	4798      	blx	r3
      }
      return;
 800e51a:	e354      	b.n	800ebc6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e51c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e520:	2b00      	cmp	r3, #0
 800e522:	f000 811f 	beq.w	800e764 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e526:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e52a:	4b8b      	ldr	r3, [pc, #556]	; (800e758 <HAL_UART_IRQHandler+0x2b0>)
 800e52c:	4013      	ands	r3, r2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e536:	4b89      	ldr	r3, [pc, #548]	; (800e75c <HAL_UART_IRQHandler+0x2b4>)
 800e538:	4013      	ands	r3, r2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 8112 	beq.w	800e764 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d011      	beq.n	800e570 <HAL_UART_IRQHandler+0xc8>
 800e54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2201      	movs	r2, #1
 800e55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e566:	f043 0201 	orr.w	r2, r3, #1
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d011      	beq.n	800e5a0 <HAL_UART_IRQHandler+0xf8>
 800e57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e580:	f003 0301 	and.w	r3, r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2202      	movs	r2, #2
 800e58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e596:	f043 0204 	orr.w	r2, r3, #4
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d011      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x128>
 800e5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2204      	movs	r2, #4
 800e5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5c6:	f043 0202 	orr.w	r2, r3, #2
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d4:	f003 0308 	and.w	r3, r3, #8
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d017      	beq.n	800e60c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5e0:	f003 0320 	and.w	r3, r3, #32
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d105      	bne.n	800e5f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e5e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e5ec:	4b5a      	ldr	r3, [pc, #360]	; (800e758 <HAL_UART_IRQHandler+0x2b0>)
 800e5ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00b      	beq.n	800e60c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2208      	movs	r2, #8
 800e5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e602:	f043 0208 	orr.w	r2, r3, #8
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e614:	2b00      	cmp	r3, #0
 800e616:	d012      	beq.n	800e63e <HAL_UART_IRQHandler+0x196>
 800e618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e61c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00c      	beq.n	800e63e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e62c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e634:	f043 0220 	orr.w	r2, r3, #32
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 82c0 	beq.w	800ebca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64e:	f003 0320 	and.w	r3, r3, #32
 800e652:	2b00      	cmp	r3, #0
 800e654:	d013      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e65a:	f003 0320 	and.w	r3, r3, #32
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d105      	bne.n	800e66e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d007      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e692:	2b40      	cmp	r3, #64	; 0x40
 800e694:	d005      	beq.n	800e6a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e69a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d04f      	beq.n	800e742 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 f9dc 	bl	800fa60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6b2:	2b40      	cmp	r3, #64	; 0x40
 800e6b4:	d141      	bne.n	800e73a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e6cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e6e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e6e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e6ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e6fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1d9      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e706:	2b00      	cmp	r3, #0
 800e708:	d013      	beq.n	800e732 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70e:	4a14      	ldr	r2, [pc, #80]	; (800e760 <HAL_UART_IRQHandler+0x2b8>)
 800e710:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e716:	4618      	mov	r0, r3
 800e718:	f7fa f83c 	bl	8008794 <HAL_DMA_Abort_IT>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d017      	beq.n	800e752 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e72c:	4610      	mov	r0, r2
 800e72e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e730:	e00f      	b.n	800e752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fa60 	bl	800ebf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e738:	e00b      	b.n	800e752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fa5c 	bl	800ebf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e740:	e007      	b.n	800e752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fa58 	bl	800ebf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e750:	e23b      	b.n	800ebca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e752:	bf00      	nop
    return;
 800e754:	e239      	b.n	800ebca <HAL_UART_IRQHandler+0x722>
 800e756:	bf00      	nop
 800e758:	10000001 	.word	0x10000001
 800e75c:	04000120 	.word	0x04000120
 800e760:	0800fb2d 	.word	0x0800fb2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e768:	2b01      	cmp	r3, #1
 800e76a:	f040 81ce 	bne.w	800eb0a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e772:	f003 0310 	and.w	r3, r3, #16
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 81c7 	beq.w	800eb0a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e780:	f003 0310 	and.w	r3, r3, #16
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 81c0 	beq.w	800eb0a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2210      	movs	r2, #16
 800e790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79c:	2b40      	cmp	r3, #64	; 0x40
 800e79e:	f040 813b 	bne.w	800ea18 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a8b      	ldr	r2, [pc, #556]	; (800e9d8 <HAL_UART_IRQHandler+0x530>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d059      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a89      	ldr	r2, [pc, #548]	; (800e9dc <HAL_UART_IRQHandler+0x534>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d053      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a87      	ldr	r2, [pc, #540]	; (800e9e0 <HAL_UART_IRQHandler+0x538>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d04d      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a85      	ldr	r2, [pc, #532]	; (800e9e4 <HAL_UART_IRQHandler+0x53c>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d047      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a83      	ldr	r2, [pc, #524]	; (800e9e8 <HAL_UART_IRQHandler+0x540>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d041      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a81      	ldr	r2, [pc, #516]	; (800e9ec <HAL_UART_IRQHandler+0x544>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d03b      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a7f      	ldr	r2, [pc, #508]	; (800e9f0 <HAL_UART_IRQHandler+0x548>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d035      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a7d      	ldr	r2, [pc, #500]	; (800e9f4 <HAL_UART_IRQHandler+0x54c>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d02f      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a7b      	ldr	r2, [pc, #492]	; (800e9f8 <HAL_UART_IRQHandler+0x550>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d029      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a79      	ldr	r2, [pc, #484]	; (800e9fc <HAL_UART_IRQHandler+0x554>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d023      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a77      	ldr	r2, [pc, #476]	; (800ea00 <HAL_UART_IRQHandler+0x558>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d01d      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a75      	ldr	r2, [pc, #468]	; (800ea04 <HAL_UART_IRQHandler+0x55c>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d017      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a73      	ldr	r2, [pc, #460]	; (800ea08 <HAL_UART_IRQHandler+0x560>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d011      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a71      	ldr	r2, [pc, #452]	; (800ea0c <HAL_UART_IRQHandler+0x564>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00b      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a6f      	ldr	r2, [pc, #444]	; (800ea10 <HAL_UART_IRQHandler+0x568>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d005      	beq.n	800e862 <HAL_UART_IRQHandler+0x3ba>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a6d      	ldr	r2, [pc, #436]	; (800ea14 <HAL_UART_IRQHandler+0x56c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d105      	bne.n	800e86e <HAL_UART_IRQHandler+0x3c6>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	e004      	b.n	800e878 <HAL_UART_IRQHandler+0x3d0>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	b29b      	uxth	r3, r3
 800e878:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e87c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 81a4 	beq.w	800ebce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e88c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e890:	429a      	cmp	r2, r3
 800e892:	f080 819c 	bcs.w	800ebce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e89c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8aa:	f000 8086 	beq.w	800e9ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e8ba:	e853 3f00 	ldrex	r3, [r3]
 800e8be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e8c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e8d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e8dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e8e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e8e8:	e841 2300 	strex	r3, r2, [r1]
 800e8ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e8f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1da      	bne.n	800e8ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e902:	e853 3f00 	ldrex	r3, [r3]
 800e906:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e90a:	f023 0301 	bic.w	r3, r3, #1
 800e90e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e91c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e920:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e922:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e928:	e841 2300 	strex	r3, r2, [r1]
 800e92c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e92e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e1      	bne.n	800e8f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	3308      	adds	r3, #8
 800e93a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e93e:	e853 3f00 	ldrex	r3, [r3]
 800e942:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e94a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e958:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e95a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e95e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e960:	e841 2300 	strex	r3, r2, [r1]
 800e964:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e3      	bne.n	800e934 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2220      	movs	r2, #32
 800e970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e982:	e853 3f00 	ldrex	r3, [r3]
 800e986:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98a:	f023 0310 	bic.w	r3, r3, #16
 800e98e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e99c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e99e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a4:	e841 2300 	strex	r3, r2, [r1]
 800e9a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1e4      	bne.n	800e97a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7f9 fbcf 	bl	8008158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f91c 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e9d4:	e0fb      	b.n	800ebce <HAL_UART_IRQHandler+0x726>
 800e9d6:	bf00      	nop
 800e9d8:	40020010 	.word	0x40020010
 800e9dc:	40020028 	.word	0x40020028
 800e9e0:	40020040 	.word	0x40020040
 800e9e4:	40020058 	.word	0x40020058
 800e9e8:	40020070 	.word	0x40020070
 800e9ec:	40020088 	.word	0x40020088
 800e9f0:	400200a0 	.word	0x400200a0
 800e9f4:	400200b8 	.word	0x400200b8
 800e9f8:	40020410 	.word	0x40020410
 800e9fc:	40020428 	.word	0x40020428
 800ea00:	40020440 	.word	0x40020440
 800ea04:	40020458 	.word	0x40020458
 800ea08:	40020470 	.word	0x40020470
 800ea0c:	40020488 	.word	0x40020488
 800ea10:	400204a0 	.word	0x400204a0
 800ea14:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80cc 	beq.w	800ebd2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ea3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 80c7 	beq.w	800ebd2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	e853 3f00 	ldrex	r3, [r3]
 800ea50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea66:	647b      	str	r3, [r7, #68]	; 0x44
 800ea68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e4      	bne.n	800ea44 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	e853 3f00 	ldrex	r3, [r3]
 800ea88:	623b      	str	r3, [r7, #32]
   return(result);
 800ea8a:	6a3a      	ldr	r2, [r7, #32]
 800ea8c:	4b54      	ldr	r3, [pc, #336]	; (800ebe0 <HAL_UART_IRQHandler+0x738>)
 800ea8e:	4013      	ands	r3, r2
 800ea90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea9e:	633a      	str	r2, [r7, #48]	; 0x30
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa6:	e841 2300 	strex	r3, r2, [r1]
 800eaaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1e3      	bne.n	800ea7a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2220      	movs	r2, #32
 800eab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	e853 3f00 	ldrex	r3, [r3]
 800ead2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f023 0310 	bic.w	r3, r3, #16
 800eada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eae8:	61fb      	str	r3, [r7, #28]
 800eaea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaec:	69b9      	ldr	r1, [r7, #24]
 800eaee:	69fa      	ldr	r2, [r7, #28]
 800eaf0:	e841 2300 	strex	r3, r2, [r1]
 800eaf4:	617b      	str	r3, [r7, #20]
   return(result);
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1e4      	bne.n	800eac6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eafc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f882 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb08:	e063      	b.n	800ebd2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00e      	beq.n	800eb34 <HAL_UART_IRQHandler+0x68c>
 800eb16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d008      	beq.n	800eb34 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eb2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f001 f83e 	bl	800fbae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb32:	e051      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d014      	beq.n	800eb6a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d105      	bne.n	800eb58 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eb4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d008      	beq.n	800eb6a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d03a      	beq.n	800ebd6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	4798      	blx	r3
    }
    return;
 800eb68:	e035      	b.n	800ebd6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d009      	beq.n	800eb8a <HAL_UART_IRQHandler+0x6e2>
 800eb76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d003      	beq.n	800eb8a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 ffe8 	bl	800fb58 <UART_EndTransmit_IT>
    return;
 800eb88:	e026      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d009      	beq.n	800ebaa <HAL_UART_IRQHandler+0x702>
 800eb96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d003      	beq.n	800ebaa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f001 f817 	bl	800fbd6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eba8:	e016      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ebaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d010      	beq.n	800ebd8 <HAL_UART_IRQHandler+0x730>
 800ebb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	da0c      	bge.n	800ebd8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 ffff 	bl	800fbc2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebc4:	e008      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
      return;
 800ebc6:	bf00      	nop
 800ebc8:	e006      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
    return;
 800ebca:	bf00      	nop
 800ebcc:	e004      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
      return;
 800ebce:	bf00      	nop
 800ebd0:	e002      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
      return;
 800ebd2:	bf00      	nop
 800ebd4:	e000      	b.n	800ebd8 <HAL_UART_IRQHandler+0x730>
    return;
 800ebd6:	bf00      	nop
  }
}
 800ebd8:	37e8      	adds	r7, #232	; 0xe8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	effffffe 	.word	0xeffffffe

0800ebe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec28:	b092      	sub	sp, #72	; 0x48
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	69db      	ldr	r3, [r3, #28]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	4bbe      	ldr	r3, [pc, #760]	; (800ef4c <UART_SetConfig+0x328>)
 800ec54:	4013      	ands	r3, r2
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	6812      	ldr	r2, [r2, #0]
 800ec5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec5c:	430b      	orrs	r3, r1
 800ec5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	430a      	orrs	r2, r1
 800ec74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4ab3      	ldr	r2, [pc, #716]	; (800ef50 <UART_SetConfig+0x32c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d004      	beq.n	800ec90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	689a      	ldr	r2, [r3, #8]
 800ec96:	4baf      	ldr	r3, [pc, #700]	; (800ef54 <UART_SetConfig+0x330>)
 800ec98:	4013      	ands	r3, r2
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	6812      	ldr	r2, [r2, #0]
 800ec9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eca0:	430b      	orrs	r3, r1
 800eca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecaa:	f023 010f 	bic.w	r1, r3, #15
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4aa6      	ldr	r2, [pc, #664]	; (800ef58 <UART_SetConfig+0x334>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d177      	bne.n	800edb4 <UART_SetConfig+0x190>
 800ecc4:	4ba5      	ldr	r3, [pc, #660]	; (800ef5c <UART_SetConfig+0x338>)
 800ecc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eccc:	2b28      	cmp	r3, #40	; 0x28
 800ecce:	d86d      	bhi.n	800edac <UART_SetConfig+0x188>
 800ecd0:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <UART_SetConfig+0xb4>)
 800ecd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd6:	bf00      	nop
 800ecd8:	0800ed7d 	.word	0x0800ed7d
 800ecdc:	0800edad 	.word	0x0800edad
 800ece0:	0800edad 	.word	0x0800edad
 800ece4:	0800edad 	.word	0x0800edad
 800ece8:	0800edad 	.word	0x0800edad
 800ecec:	0800edad 	.word	0x0800edad
 800ecf0:	0800edad 	.word	0x0800edad
 800ecf4:	0800edad 	.word	0x0800edad
 800ecf8:	0800ed85 	.word	0x0800ed85
 800ecfc:	0800edad 	.word	0x0800edad
 800ed00:	0800edad 	.word	0x0800edad
 800ed04:	0800edad 	.word	0x0800edad
 800ed08:	0800edad 	.word	0x0800edad
 800ed0c:	0800edad 	.word	0x0800edad
 800ed10:	0800edad 	.word	0x0800edad
 800ed14:	0800edad 	.word	0x0800edad
 800ed18:	0800ed8d 	.word	0x0800ed8d
 800ed1c:	0800edad 	.word	0x0800edad
 800ed20:	0800edad 	.word	0x0800edad
 800ed24:	0800edad 	.word	0x0800edad
 800ed28:	0800edad 	.word	0x0800edad
 800ed2c:	0800edad 	.word	0x0800edad
 800ed30:	0800edad 	.word	0x0800edad
 800ed34:	0800edad 	.word	0x0800edad
 800ed38:	0800ed95 	.word	0x0800ed95
 800ed3c:	0800edad 	.word	0x0800edad
 800ed40:	0800edad 	.word	0x0800edad
 800ed44:	0800edad 	.word	0x0800edad
 800ed48:	0800edad 	.word	0x0800edad
 800ed4c:	0800edad 	.word	0x0800edad
 800ed50:	0800edad 	.word	0x0800edad
 800ed54:	0800edad 	.word	0x0800edad
 800ed58:	0800ed9d 	.word	0x0800ed9d
 800ed5c:	0800edad 	.word	0x0800edad
 800ed60:	0800edad 	.word	0x0800edad
 800ed64:	0800edad 	.word	0x0800edad
 800ed68:	0800edad 	.word	0x0800edad
 800ed6c:	0800edad 	.word	0x0800edad
 800ed70:	0800edad 	.word	0x0800edad
 800ed74:	0800edad 	.word	0x0800edad
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e222      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e21e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e21a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e216      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda2:	e212      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eda4:	2340      	movs	r3, #64	; 0x40
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e20e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800edac:	2380      	movs	r3, #128	; 0x80
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e20a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a69      	ldr	r2, [pc, #420]	; (800ef60 <UART_SetConfig+0x33c>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d130      	bne.n	800ee20 <UART_SetConfig+0x1fc>
 800edbe:	4b67      	ldr	r3, [pc, #412]	; (800ef5c <UART_SetConfig+0x338>)
 800edc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b05      	cmp	r3, #5
 800edc8:	d826      	bhi.n	800ee18 <UART_SetConfig+0x1f4>
 800edca:	a201      	add	r2, pc, #4	; (adr r2, 800edd0 <UART_SetConfig+0x1ac>)
 800edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800edf1 	.word	0x0800edf1
 800edd8:	0800edf9 	.word	0x0800edf9
 800eddc:	0800ee01 	.word	0x0800ee01
 800ede0:	0800ee09 	.word	0x0800ee09
 800ede4:	0800ee11 	.word	0x0800ee11
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e1ec      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800edf0:	2304      	movs	r3, #4
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e1e8      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800edf8:	2308      	movs	r3, #8
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e1e4      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee00:	2310      	movs	r3, #16
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e1e0      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee08:	2320      	movs	r3, #32
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0e:	e1dc      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee10:	2340      	movs	r3, #64	; 0x40
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e1d8      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee18:	2380      	movs	r3, #128	; 0x80
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e1d4      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a4f      	ldr	r2, [pc, #316]	; (800ef64 <UART_SetConfig+0x340>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d130      	bne.n	800ee8c <UART_SetConfig+0x268>
 800ee2a:	4b4c      	ldr	r3, [pc, #304]	; (800ef5c <UART_SetConfig+0x338>)
 800ee2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d826      	bhi.n	800ee84 <UART_SetConfig+0x260>
 800ee36:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <UART_SetConfig+0x218>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee55 	.word	0x0800ee55
 800ee40:	0800ee5d 	.word	0x0800ee5d
 800ee44:	0800ee65 	.word	0x0800ee65
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	2300      	movs	r3, #0
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e1b6      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee62:	e1b2      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee64:	2308      	movs	r3, #8
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e1ae      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e1aa      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee74:	2320      	movs	r3, #32
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e1a6      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee7c:	2340      	movs	r3, #64	; 0x40
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e1a2      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee84:	2380      	movs	r3, #128	; 0x80
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e19e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a35      	ldr	r2, [pc, #212]	; (800ef68 <UART_SetConfig+0x344>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d130      	bne.n	800eef8 <UART_SetConfig+0x2d4>
 800ee96:	4b31      	ldr	r3, [pc, #196]	; (800ef5c <UART_SetConfig+0x338>)
 800ee98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee9a:	f003 0307 	and.w	r3, r3, #7
 800ee9e:	2b05      	cmp	r3, #5
 800eea0:	d826      	bhi.n	800eef0 <UART_SetConfig+0x2cc>
 800eea2:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <UART_SetConfig+0x284>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eec1 	.word	0x0800eec1
 800eeac:	0800eec9 	.word	0x0800eec9
 800eeb0:	0800eed1 	.word	0x0800eed1
 800eeb4:	0800eed9 	.word	0x0800eed9
 800eeb8:	0800eee1 	.word	0x0800eee1
 800eebc:	0800eee9 	.word	0x0800eee9
 800eec0:	2300      	movs	r3, #0
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e180      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eec8:	2304      	movs	r3, #4
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eece:	e17c      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eed0:	2308      	movs	r3, #8
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e178      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eed8:	2310      	movs	r3, #16
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e174      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eee0:	2320      	movs	r3, #32
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e170      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eee8:	2340      	movs	r3, #64	; 0x40
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e16c      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eef0:	2380      	movs	r3, #128	; 0x80
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e168      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a1b      	ldr	r2, [pc, #108]	; (800ef6c <UART_SetConfig+0x348>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d142      	bne.n	800ef88 <UART_SetConfig+0x364>
 800ef02:	4b16      	ldr	r3, [pc, #88]	; (800ef5c <UART_SetConfig+0x338>)
 800ef04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef06:	f003 0307 	and.w	r3, r3, #7
 800ef0a:	2b05      	cmp	r3, #5
 800ef0c:	d838      	bhi.n	800ef80 <UART_SetConfig+0x35c>
 800ef0e:	a201      	add	r2, pc, #4	; (adr r2, 800ef14 <UART_SetConfig+0x2f0>)
 800ef10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef14:	0800ef2d 	.word	0x0800ef2d
 800ef18:	0800ef35 	.word	0x0800ef35
 800ef1c:	0800ef3d 	.word	0x0800ef3d
 800ef20:	0800ef45 	.word	0x0800ef45
 800ef24:	0800ef71 	.word	0x0800ef71
 800ef28:	0800ef79 	.word	0x0800ef79
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef32:	e14a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef34:	2304      	movs	r3, #4
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3a:	e146      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef3c:	2308      	movs	r3, #8
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef42:	e142      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef44:	2310      	movs	r3, #16
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e13e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef4c:	cfff69f3 	.word	0xcfff69f3
 800ef50:	58000c00 	.word	0x58000c00
 800ef54:	11fff4ff 	.word	0x11fff4ff
 800ef58:	40011000 	.word	0x40011000
 800ef5c:	58024400 	.word	0x58024400
 800ef60:	40004400 	.word	0x40004400
 800ef64:	40004800 	.word	0x40004800
 800ef68:	40004c00 	.word	0x40004c00
 800ef6c:	40005000 	.word	0x40005000
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e128      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e124      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef80:	2380      	movs	r3, #128	; 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e120      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4acb      	ldr	r2, [pc, #812]	; (800f2bc <UART_SetConfig+0x698>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d176      	bne.n	800f080 <UART_SetConfig+0x45c>
 800ef92:	4bcb      	ldr	r3, [pc, #812]	; (800f2c0 <UART_SetConfig+0x69c>)
 800ef94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef9a:	2b28      	cmp	r3, #40	; 0x28
 800ef9c:	d86c      	bhi.n	800f078 <UART_SetConfig+0x454>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <UART_SetConfig+0x380>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800f049 	.word	0x0800f049
 800efa8:	0800f079 	.word	0x0800f079
 800efac:	0800f079 	.word	0x0800f079
 800efb0:	0800f079 	.word	0x0800f079
 800efb4:	0800f079 	.word	0x0800f079
 800efb8:	0800f079 	.word	0x0800f079
 800efbc:	0800f079 	.word	0x0800f079
 800efc0:	0800f079 	.word	0x0800f079
 800efc4:	0800f051 	.word	0x0800f051
 800efc8:	0800f079 	.word	0x0800f079
 800efcc:	0800f079 	.word	0x0800f079
 800efd0:	0800f079 	.word	0x0800f079
 800efd4:	0800f079 	.word	0x0800f079
 800efd8:	0800f079 	.word	0x0800f079
 800efdc:	0800f079 	.word	0x0800f079
 800efe0:	0800f079 	.word	0x0800f079
 800efe4:	0800f059 	.word	0x0800f059
 800efe8:	0800f079 	.word	0x0800f079
 800efec:	0800f079 	.word	0x0800f079
 800eff0:	0800f079 	.word	0x0800f079
 800eff4:	0800f079 	.word	0x0800f079
 800eff8:	0800f079 	.word	0x0800f079
 800effc:	0800f079 	.word	0x0800f079
 800f000:	0800f079 	.word	0x0800f079
 800f004:	0800f061 	.word	0x0800f061
 800f008:	0800f079 	.word	0x0800f079
 800f00c:	0800f079 	.word	0x0800f079
 800f010:	0800f079 	.word	0x0800f079
 800f014:	0800f079 	.word	0x0800f079
 800f018:	0800f079 	.word	0x0800f079
 800f01c:	0800f079 	.word	0x0800f079
 800f020:	0800f079 	.word	0x0800f079
 800f024:	0800f069 	.word	0x0800f069
 800f028:	0800f079 	.word	0x0800f079
 800f02c:	0800f079 	.word	0x0800f079
 800f030:	0800f079 	.word	0x0800f079
 800f034:	0800f079 	.word	0x0800f079
 800f038:	0800f079 	.word	0x0800f079
 800f03c:	0800f079 	.word	0x0800f079
 800f040:	0800f079 	.word	0x0800f079
 800f044:	0800f071 	.word	0x0800f071
 800f048:	2301      	movs	r3, #1
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e0bc      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f050:	2304      	movs	r3, #4
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e0b8      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f058:	2308      	movs	r3, #8
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e0b4      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f060:	2310      	movs	r3, #16
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f066:	e0b0      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f068:	2320      	movs	r3, #32
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06e:	e0ac      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f070:	2340      	movs	r3, #64	; 0x40
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f076:	e0a8      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f078:	2380      	movs	r3, #128	; 0x80
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07e:	e0a4      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a8f      	ldr	r2, [pc, #572]	; (800f2c4 <UART_SetConfig+0x6a0>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d130      	bne.n	800f0ec <UART_SetConfig+0x4c8>
 800f08a:	4b8d      	ldr	r3, [pc, #564]	; (800f2c0 <UART_SetConfig+0x69c>)
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b05      	cmp	r3, #5
 800f094:	d826      	bhi.n	800f0e4 <UART_SetConfig+0x4c0>
 800f096:	a201      	add	r2, pc, #4	; (adr r2, 800f09c <UART_SetConfig+0x478>)
 800f098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09c:	0800f0b5 	.word	0x0800f0b5
 800f0a0:	0800f0bd 	.word	0x0800f0bd
 800f0a4:	0800f0c5 	.word	0x0800f0c5
 800f0a8:	0800f0cd 	.word	0x0800f0cd
 800f0ac:	0800f0d5 	.word	0x0800f0d5
 800f0b0:	0800f0dd 	.word	0x0800f0dd
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e086      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0bc:	2304      	movs	r3, #4
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e082      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0c4:	2308      	movs	r3, #8
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e07e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0cc:	2310      	movs	r3, #16
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e07a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0d4:	2320      	movs	r3, #32
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0da:	e076      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0dc:	2340      	movs	r3, #64	; 0x40
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e072      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0e4:	2380      	movs	r3, #128	; 0x80
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ea:	e06e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a75      	ldr	r2, [pc, #468]	; (800f2c8 <UART_SetConfig+0x6a4>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d130      	bne.n	800f158 <UART_SetConfig+0x534>
 800f0f6:	4b72      	ldr	r3, [pc, #456]	; (800f2c0 <UART_SetConfig+0x69c>)
 800f0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0fa:	f003 0307 	and.w	r3, r3, #7
 800f0fe:	2b05      	cmp	r3, #5
 800f100:	d826      	bhi.n	800f150 <UART_SetConfig+0x52c>
 800f102:	a201      	add	r2, pc, #4	; (adr r2, 800f108 <UART_SetConfig+0x4e4>)
 800f104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f108:	0800f121 	.word	0x0800f121
 800f10c:	0800f129 	.word	0x0800f129
 800f110:	0800f131 	.word	0x0800f131
 800f114:	0800f139 	.word	0x0800f139
 800f118:	0800f141 	.word	0x0800f141
 800f11c:	0800f149 	.word	0x0800f149
 800f120:	2300      	movs	r3, #0
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e050      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f128:	2304      	movs	r3, #4
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e04c      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f130:	2308      	movs	r3, #8
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e048      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f138:	2310      	movs	r3, #16
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e044      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f140:	2320      	movs	r3, #32
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f146:	e040      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f148:	2340      	movs	r3, #64	; 0x40
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14e:	e03c      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f150:	2380      	movs	r3, #128	; 0x80
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f156:	e038      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a5b      	ldr	r2, [pc, #364]	; (800f2cc <UART_SetConfig+0x6a8>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d130      	bne.n	800f1c4 <UART_SetConfig+0x5a0>
 800f162:	4b57      	ldr	r3, [pc, #348]	; (800f2c0 <UART_SetConfig+0x69c>)
 800f164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f166:	f003 0307 	and.w	r3, r3, #7
 800f16a:	2b05      	cmp	r3, #5
 800f16c:	d826      	bhi.n	800f1bc <UART_SetConfig+0x598>
 800f16e:	a201      	add	r2, pc, #4	; (adr r2, 800f174 <UART_SetConfig+0x550>)
 800f170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f174:	0800f18d 	.word	0x0800f18d
 800f178:	0800f195 	.word	0x0800f195
 800f17c:	0800f19d 	.word	0x0800f19d
 800f180:	0800f1a5 	.word	0x0800f1a5
 800f184:	0800f1ad 	.word	0x0800f1ad
 800f188:	0800f1b5 	.word	0x0800f1b5
 800f18c:	2302      	movs	r3, #2
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e01a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f194:	2304      	movs	r3, #4
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19a:	e016      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f19c:	2308      	movs	r3, #8
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e012      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f1a4:	2310      	movs	r3, #16
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1aa:	e00e      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f1ac:	2320      	movs	r3, #32
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b2:	e00a      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f1b4:	2340      	movs	r3, #64	; 0x40
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ba:	e006      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f1bc:	2380      	movs	r3, #128	; 0x80
 800f1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c2:	e002      	b.n	800f1ca <UART_SetConfig+0x5a6>
 800f1c4:	2380      	movs	r3, #128	; 0x80
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a3f      	ldr	r2, [pc, #252]	; (800f2cc <UART_SetConfig+0x6a8>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	f040 80f8 	bne.w	800f3c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1da:	2b20      	cmp	r3, #32
 800f1dc:	dc46      	bgt.n	800f26c <UART_SetConfig+0x648>
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	f2c0 8082 	blt.w	800f2e8 <UART_SetConfig+0x6c4>
 800f1e4:	3b02      	subs	r3, #2
 800f1e6:	2b1e      	cmp	r3, #30
 800f1e8:	d87e      	bhi.n	800f2e8 <UART_SetConfig+0x6c4>
 800f1ea:	a201      	add	r2, pc, #4	; (adr r2, 800f1f0 <UART_SetConfig+0x5cc>)
 800f1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f0:	0800f273 	.word	0x0800f273
 800f1f4:	0800f2e9 	.word	0x0800f2e9
 800f1f8:	0800f27b 	.word	0x0800f27b
 800f1fc:	0800f2e9 	.word	0x0800f2e9
 800f200:	0800f2e9 	.word	0x0800f2e9
 800f204:	0800f2e9 	.word	0x0800f2e9
 800f208:	0800f28b 	.word	0x0800f28b
 800f20c:	0800f2e9 	.word	0x0800f2e9
 800f210:	0800f2e9 	.word	0x0800f2e9
 800f214:	0800f2e9 	.word	0x0800f2e9
 800f218:	0800f2e9 	.word	0x0800f2e9
 800f21c:	0800f2e9 	.word	0x0800f2e9
 800f220:	0800f2e9 	.word	0x0800f2e9
 800f224:	0800f2e9 	.word	0x0800f2e9
 800f228:	0800f29b 	.word	0x0800f29b
 800f22c:	0800f2e9 	.word	0x0800f2e9
 800f230:	0800f2e9 	.word	0x0800f2e9
 800f234:	0800f2e9 	.word	0x0800f2e9
 800f238:	0800f2e9 	.word	0x0800f2e9
 800f23c:	0800f2e9 	.word	0x0800f2e9
 800f240:	0800f2e9 	.word	0x0800f2e9
 800f244:	0800f2e9 	.word	0x0800f2e9
 800f248:	0800f2e9 	.word	0x0800f2e9
 800f24c:	0800f2e9 	.word	0x0800f2e9
 800f250:	0800f2e9 	.word	0x0800f2e9
 800f254:	0800f2e9 	.word	0x0800f2e9
 800f258:	0800f2e9 	.word	0x0800f2e9
 800f25c:	0800f2e9 	.word	0x0800f2e9
 800f260:	0800f2e9 	.word	0x0800f2e9
 800f264:	0800f2e9 	.word	0x0800f2e9
 800f268:	0800f2db 	.word	0x0800f2db
 800f26c:	2b40      	cmp	r3, #64	; 0x40
 800f26e:	d037      	beq.n	800f2e0 <UART_SetConfig+0x6bc>
 800f270:	e03a      	b.n	800f2e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f272:	f7fd fd3b 	bl	800ccec <HAL_RCCEx_GetD3PCLK1Freq>
 800f276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f278:	e03c      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f27a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fd fd4a 	bl	800cd18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f288:	e034      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f28a:	f107 0318 	add.w	r3, r7, #24
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fd fe96 	bl	800cfc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f298:	e02c      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f29a:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <UART_SetConfig+0x69c>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f003 0320 	and.w	r3, r3, #32
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d016      	beq.n	800f2d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2a6:	4b06      	ldr	r3, [pc, #24]	; (800f2c0 <UART_SetConfig+0x69c>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	08db      	lsrs	r3, r3, #3
 800f2ac:	f003 0303 	and.w	r3, r3, #3
 800f2b0:	4a07      	ldr	r2, [pc, #28]	; (800f2d0 <UART_SetConfig+0x6ac>)
 800f2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2b8:	e01c      	b.n	800f2f4 <UART_SetConfig+0x6d0>
 800f2ba:	bf00      	nop
 800f2bc:	40011400 	.word	0x40011400
 800f2c0:	58024400 	.word	0x58024400
 800f2c4:	40007800 	.word	0x40007800
 800f2c8:	40007c00 	.word	0x40007c00
 800f2cc:	58000c00 	.word	0x58000c00
 800f2d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f2d4:	4b9d      	ldr	r3, [pc, #628]	; (800f54c <UART_SetConfig+0x928>)
 800f2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2d8:	e00c      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2da:	4b9d      	ldr	r3, [pc, #628]	; (800f550 <UART_SetConfig+0x92c>)
 800f2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2de:	e009      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2e6:	e005      	b.n	800f2f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f000 81de 	beq.w	800f6b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f300:	4a94      	ldr	r2, [pc, #592]	; (800f554 <UART_SetConfig+0x930>)
 800f302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f306:	461a      	mov	r2, r3
 800f308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f30e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	685a      	ldr	r2, [r3, #4]
 800f314:	4613      	mov	r3, r2
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	4413      	add	r3, r2
 800f31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d305      	bcc.n	800f32c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f328:	429a      	cmp	r2, r3
 800f32a:	d903      	bls.n	800f334 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f332:	e1c1      	b.n	800f6b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f336:	2200      	movs	r2, #0
 800f338:	60bb      	str	r3, [r7, #8]
 800f33a:	60fa      	str	r2, [r7, #12]
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	4a84      	ldr	r2, [pc, #528]	; (800f554 <UART_SetConfig+0x930>)
 800f342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f346:	b29b      	uxth	r3, r3
 800f348:	2200      	movs	r2, #0
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	607a      	str	r2, [r7, #4]
 800f34e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f356:	f7f1 f813 	bl	8000380 <__aeabi_uldivmod>
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4610      	mov	r0, r2
 800f360:	4619      	mov	r1, r3
 800f362:	f04f 0200 	mov.w	r2, #0
 800f366:	f04f 0300 	mov.w	r3, #0
 800f36a:	020b      	lsls	r3, r1, #8
 800f36c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f370:	0202      	lsls	r2, r0, #8
 800f372:	6979      	ldr	r1, [r7, #20]
 800f374:	6849      	ldr	r1, [r1, #4]
 800f376:	0849      	lsrs	r1, r1, #1
 800f378:	2000      	movs	r0, #0
 800f37a:	460c      	mov	r4, r1
 800f37c:	4605      	mov	r5, r0
 800f37e:	eb12 0804 	adds.w	r8, r2, r4
 800f382:	eb43 0905 	adc.w	r9, r3, r5
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	469a      	mov	sl, r3
 800f38e:	4693      	mov	fp, r2
 800f390:	4652      	mov	r2, sl
 800f392:	465b      	mov	r3, fp
 800f394:	4640      	mov	r0, r8
 800f396:	4649      	mov	r1, r9
 800f398:	f7f0 fff2 	bl	8000380 <__aeabi_uldivmod>
 800f39c:	4602      	mov	r2, r0
 800f39e:	460b      	mov	r3, r1
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3aa:	d308      	bcc.n	800f3be <UART_SetConfig+0x79a>
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3b2:	d204      	bcs.n	800f3be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3ba:	60da      	str	r2, [r3, #12]
 800f3bc:	e17c      	b.n	800f6b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3c4:	e178      	b.n	800f6b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	69db      	ldr	r3, [r3, #28]
 800f3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3ce:	f040 80c5 	bne.w	800f55c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f3d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3d6:	2b20      	cmp	r3, #32
 800f3d8:	dc48      	bgt.n	800f46c <UART_SetConfig+0x848>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	db7b      	blt.n	800f4d6 <UART_SetConfig+0x8b2>
 800f3de:	2b20      	cmp	r3, #32
 800f3e0:	d879      	bhi.n	800f4d6 <UART_SetConfig+0x8b2>
 800f3e2:	a201      	add	r2, pc, #4	; (adr r2, 800f3e8 <UART_SetConfig+0x7c4>)
 800f3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e8:	0800f473 	.word	0x0800f473
 800f3ec:	0800f47b 	.word	0x0800f47b
 800f3f0:	0800f4d7 	.word	0x0800f4d7
 800f3f4:	0800f4d7 	.word	0x0800f4d7
 800f3f8:	0800f483 	.word	0x0800f483
 800f3fc:	0800f4d7 	.word	0x0800f4d7
 800f400:	0800f4d7 	.word	0x0800f4d7
 800f404:	0800f4d7 	.word	0x0800f4d7
 800f408:	0800f493 	.word	0x0800f493
 800f40c:	0800f4d7 	.word	0x0800f4d7
 800f410:	0800f4d7 	.word	0x0800f4d7
 800f414:	0800f4d7 	.word	0x0800f4d7
 800f418:	0800f4d7 	.word	0x0800f4d7
 800f41c:	0800f4d7 	.word	0x0800f4d7
 800f420:	0800f4d7 	.word	0x0800f4d7
 800f424:	0800f4d7 	.word	0x0800f4d7
 800f428:	0800f4a3 	.word	0x0800f4a3
 800f42c:	0800f4d7 	.word	0x0800f4d7
 800f430:	0800f4d7 	.word	0x0800f4d7
 800f434:	0800f4d7 	.word	0x0800f4d7
 800f438:	0800f4d7 	.word	0x0800f4d7
 800f43c:	0800f4d7 	.word	0x0800f4d7
 800f440:	0800f4d7 	.word	0x0800f4d7
 800f444:	0800f4d7 	.word	0x0800f4d7
 800f448:	0800f4d7 	.word	0x0800f4d7
 800f44c:	0800f4d7 	.word	0x0800f4d7
 800f450:	0800f4d7 	.word	0x0800f4d7
 800f454:	0800f4d7 	.word	0x0800f4d7
 800f458:	0800f4d7 	.word	0x0800f4d7
 800f45c:	0800f4d7 	.word	0x0800f4d7
 800f460:	0800f4d7 	.word	0x0800f4d7
 800f464:	0800f4d7 	.word	0x0800f4d7
 800f468:	0800f4c9 	.word	0x0800f4c9
 800f46c:	2b40      	cmp	r3, #64	; 0x40
 800f46e:	d02e      	beq.n	800f4ce <UART_SetConfig+0x8aa>
 800f470:	e031      	b.n	800f4d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f472:	f7fc fcc9 	bl	800be08 <HAL_RCC_GetPCLK1Freq>
 800f476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f478:	e033      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f47a:	f7fc fcdb 	bl	800be34 <HAL_RCC_GetPCLK2Freq>
 800f47e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f480:	e02f      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f486:	4618      	mov	r0, r3
 800f488:	f7fd fc46 	bl	800cd18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f490:	e027      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f492:	f107 0318 	add.w	r3, r7, #24
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd fd92 	bl	800cfc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4a0:	e01f      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4a2:	4b2d      	ldr	r3, [pc, #180]	; (800f558 <UART_SetConfig+0x934>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 0320 	and.w	r3, r3, #32
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d009      	beq.n	800f4c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4ae:	4b2a      	ldr	r3, [pc, #168]	; (800f558 <UART_SetConfig+0x934>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	08db      	lsrs	r3, r3, #3
 800f4b4:	f003 0303 	and.w	r3, r3, #3
 800f4b8:	4a24      	ldr	r2, [pc, #144]	; (800f54c <UART_SetConfig+0x928>)
 800f4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4c0:	e00f      	b.n	800f4e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4c2:	4b22      	ldr	r3, [pc, #136]	; (800f54c <UART_SetConfig+0x928>)
 800f4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4c6:	e00c      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4c8:	4b21      	ldr	r3, [pc, #132]	; (800f550 <UART_SetConfig+0x92c>)
 800f4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4cc:	e009      	b.n	800f4e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4d4:	e005      	b.n	800f4e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f4e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 80e7 	beq.w	800f6b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ee:	4a19      	ldr	r2, [pc, #100]	; (800f554 <UART_SetConfig+0x930>)
 800f4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4fc:	005a      	lsls	r2, r3, #1
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	085b      	lsrs	r3, r3, #1
 800f504:	441a      	add	r2, r3
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f50e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	2b0f      	cmp	r3, #15
 800f514:	d916      	bls.n	800f544 <UART_SetConfig+0x920>
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f51c:	d212      	bcs.n	800f544 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f520:	b29b      	uxth	r3, r3
 800f522:	f023 030f 	bic.w	r3, r3, #15
 800f526:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52a:	085b      	lsrs	r3, r3, #1
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	f003 0307 	and.w	r3, r3, #7
 800f532:	b29a      	uxth	r2, r3
 800f534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f536:	4313      	orrs	r3, r2
 800f538:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f540:	60da      	str	r2, [r3, #12]
 800f542:	e0b9      	b.n	800f6b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f544:	2301      	movs	r3, #1
 800f546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f54a:	e0b5      	b.n	800f6b8 <UART_SetConfig+0xa94>
 800f54c:	03d09000 	.word	0x03d09000
 800f550:	003d0900 	.word	0x003d0900
 800f554:	080126c8 	.word	0x080126c8
 800f558:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f55c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f560:	2b20      	cmp	r3, #32
 800f562:	dc49      	bgt.n	800f5f8 <UART_SetConfig+0x9d4>
 800f564:	2b00      	cmp	r3, #0
 800f566:	db7c      	blt.n	800f662 <UART_SetConfig+0xa3e>
 800f568:	2b20      	cmp	r3, #32
 800f56a:	d87a      	bhi.n	800f662 <UART_SetConfig+0xa3e>
 800f56c:	a201      	add	r2, pc, #4	; (adr r2, 800f574 <UART_SetConfig+0x950>)
 800f56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f572:	bf00      	nop
 800f574:	0800f5ff 	.word	0x0800f5ff
 800f578:	0800f607 	.word	0x0800f607
 800f57c:	0800f663 	.word	0x0800f663
 800f580:	0800f663 	.word	0x0800f663
 800f584:	0800f60f 	.word	0x0800f60f
 800f588:	0800f663 	.word	0x0800f663
 800f58c:	0800f663 	.word	0x0800f663
 800f590:	0800f663 	.word	0x0800f663
 800f594:	0800f61f 	.word	0x0800f61f
 800f598:	0800f663 	.word	0x0800f663
 800f59c:	0800f663 	.word	0x0800f663
 800f5a0:	0800f663 	.word	0x0800f663
 800f5a4:	0800f663 	.word	0x0800f663
 800f5a8:	0800f663 	.word	0x0800f663
 800f5ac:	0800f663 	.word	0x0800f663
 800f5b0:	0800f663 	.word	0x0800f663
 800f5b4:	0800f62f 	.word	0x0800f62f
 800f5b8:	0800f663 	.word	0x0800f663
 800f5bc:	0800f663 	.word	0x0800f663
 800f5c0:	0800f663 	.word	0x0800f663
 800f5c4:	0800f663 	.word	0x0800f663
 800f5c8:	0800f663 	.word	0x0800f663
 800f5cc:	0800f663 	.word	0x0800f663
 800f5d0:	0800f663 	.word	0x0800f663
 800f5d4:	0800f663 	.word	0x0800f663
 800f5d8:	0800f663 	.word	0x0800f663
 800f5dc:	0800f663 	.word	0x0800f663
 800f5e0:	0800f663 	.word	0x0800f663
 800f5e4:	0800f663 	.word	0x0800f663
 800f5e8:	0800f663 	.word	0x0800f663
 800f5ec:	0800f663 	.word	0x0800f663
 800f5f0:	0800f663 	.word	0x0800f663
 800f5f4:	0800f655 	.word	0x0800f655
 800f5f8:	2b40      	cmp	r3, #64	; 0x40
 800f5fa:	d02e      	beq.n	800f65a <UART_SetConfig+0xa36>
 800f5fc:	e031      	b.n	800f662 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5fe:	f7fc fc03 	bl	800be08 <HAL_RCC_GetPCLK1Freq>
 800f602:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f604:	e033      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f606:	f7fc fc15 	bl	800be34 <HAL_RCC_GetPCLK2Freq>
 800f60a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f60c:	e02f      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f60e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f612:	4618      	mov	r0, r3
 800f614:	f7fd fb80 	bl	800cd18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f61c:	e027      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f61e:	f107 0318 	add.w	r3, r7, #24
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd fccc 	bl	800cfc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f62c:	e01f      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f62e:	4b2d      	ldr	r3, [pc, #180]	; (800f6e4 <UART_SetConfig+0xac0>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f003 0320 	and.w	r3, r3, #32
 800f636:	2b00      	cmp	r3, #0
 800f638:	d009      	beq.n	800f64e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f63a:	4b2a      	ldr	r3, [pc, #168]	; (800f6e4 <UART_SetConfig+0xac0>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	08db      	lsrs	r3, r3, #3
 800f640:	f003 0303 	and.w	r3, r3, #3
 800f644:	4a28      	ldr	r2, [pc, #160]	; (800f6e8 <UART_SetConfig+0xac4>)
 800f646:	fa22 f303 	lsr.w	r3, r2, r3
 800f64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f64c:	e00f      	b.n	800f66e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f64e:	4b26      	ldr	r3, [pc, #152]	; (800f6e8 <UART_SetConfig+0xac4>)
 800f650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f652:	e00c      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f654:	4b25      	ldr	r3, [pc, #148]	; (800f6ec <UART_SetConfig+0xac8>)
 800f656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f658:	e009      	b.n	800f66e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f65a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f660:	e005      	b.n	800f66e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f66c:	bf00      	nop
    }

    if (pclk != 0U)
 800f66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f670:	2b00      	cmp	r3, #0
 800f672:	d021      	beq.n	800f6b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f678:	4a1d      	ldr	r2, [pc, #116]	; (800f6f0 <UART_SetConfig+0xacc>)
 800f67a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f67e:	461a      	mov	r2, r3
 800f680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f682:	fbb3 f2f2 	udiv	r2, r3, r2
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	085b      	lsrs	r3, r3, #1
 800f68c:	441a      	add	r2, r3
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	fbb2 f3f3 	udiv	r3, r2, r3
 800f696:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	2b0f      	cmp	r3, #15
 800f69c:	d909      	bls.n	800f6b2 <UART_SetConfig+0xa8e>
 800f69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6a4:	d205      	bcs.n	800f6b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	60da      	str	r2, [r3, #12]
 800f6b0:	e002      	b.n	800f6b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f6d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3748      	adds	r7, #72	; 0x48
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f6e2:	bf00      	nop
 800f6e4:	58024400 	.word	0x58024400
 800f6e8:	03d09000 	.word	0x03d09000
 800f6ec:	003d0900 	.word	0x003d0900
 800f6f0:	080126c8 	.word	0x080126c8

0800f6f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00a      	beq.n	800f71e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	430a      	orrs	r2, r1
 800f71c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f722:	f003 0302 	and.w	r3, r3, #2
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00a      	beq.n	800f740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	430a      	orrs	r2, r1
 800f73e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f744:	f003 0304 	and.w	r3, r3, #4
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00a      	beq.n	800f762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	430a      	orrs	r2, r1
 800f760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f766:	f003 0308 	and.w	r3, r3, #8
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00a      	beq.n	800f784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	430a      	orrs	r2, r1
 800f782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00a      	beq.n	800f7a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	430a      	orrs	r2, r1
 800f7a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7aa:	f003 0320 	and.w	r3, r3, #32
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	430a      	orrs	r2, r1
 800f7c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d01a      	beq.n	800f80a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	430a      	orrs	r2, r1
 800f7e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7f2:	d10a      	bne.n	800f80a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	430a      	orrs	r2, r1
 800f808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00a      	beq.n	800f82c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	605a      	str	r2, [r3, #4]
  }
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b086      	sub	sp, #24
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f848:	f7f7 ffca 	bl	80077e0 <HAL_GetTick>
 800f84c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f003 0308 	and.w	r3, r3, #8
 800f858:	2b08      	cmp	r3, #8
 800f85a:	d10e      	bne.n	800f87a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f85c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2200      	movs	r2, #0
 800f866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f82f 	bl	800f8ce <UART_WaitOnFlagUntilTimeout>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d001      	beq.n	800f87a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f876:	2303      	movs	r3, #3
 800f878:	e025      	b.n	800f8c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 0304 	and.w	r3, r3, #4
 800f884:	2b04      	cmp	r3, #4
 800f886:	d10e      	bne.n	800f8a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2200      	movs	r2, #0
 800f892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f819 	bl	800f8ce <UART_WaitOnFlagUntilTimeout>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	e00f      	b.n	800f8c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2220      	movs	r2, #32
 800f8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b09c      	sub	sp, #112	; 0x70
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	60f8      	str	r0, [r7, #12]
 800f8d6:	60b9      	str	r1, [r7, #8]
 800f8d8:	603b      	str	r3, [r7, #0]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8de:	e0a9      	b.n	800fa34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e6:	f000 80a5 	beq.w	800fa34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8ea:	f7f7 ff79 	bl	80077e0 <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d302      	bcc.n	800f900 <UART_WaitOnFlagUntilTimeout+0x32>
 800f8fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d140      	bne.n	800f982 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f908:	e853 3f00 	ldrex	r3, [r3]
 800f90c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f914:	667b      	str	r3, [r7, #100]	; 0x64
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f91e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f920:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e6      	bne.n	800f900 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	3308      	adds	r3, #8
 800f938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93c:	e853 3f00 	ldrex	r3, [r3]
 800f940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f944:	f023 0301 	bic.w	r3, r3, #1
 800f948:	663b      	str	r3, [r7, #96]	; 0x60
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	3308      	adds	r3, #8
 800f950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f952:	64ba      	str	r2, [r7, #72]	; 0x48
 800f954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f95a:	e841 2300 	strex	r3, r2, [r1]
 800f95e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1e5      	bne.n	800f932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2220      	movs	r2, #32
 800f96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2220      	movs	r2, #32
 800f972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e069      	b.n	800fa56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f003 0304 	and.w	r3, r3, #4
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d051      	beq.n	800fa34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f99a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f99e:	d149      	bne.n	800fa34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b2:	e853 3f00 	ldrex	r3, [r3]
 800f9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9d0:	e841 2300 	strex	r3, r2, [r1]
 800f9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1e6      	bne.n	800f9aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	3308      	adds	r3, #8
 800f9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	e853 3f00 	ldrex	r3, [r3]
 800f9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	f023 0301 	bic.w	r3, r3, #1
 800f9f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f9fc:	623a      	str	r2, [r7, #32]
 800f9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa00:	69f9      	ldr	r1, [r7, #28]
 800fa02:	6a3a      	ldr	r2, [r7, #32]
 800fa04:	e841 2300 	strex	r3, r2, [r1]
 800fa08:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1e5      	bne.n	800f9dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2220      	movs	r2, #32
 800fa14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2220      	movs	r2, #32
 800fa1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fa30:	2303      	movs	r3, #3
 800fa32:	e010      	b.n	800fa56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	69da      	ldr	r2, [r3, #28]
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	4013      	ands	r3, r2
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	bf0c      	ite	eq
 800fa44:	2301      	moveq	r3, #1
 800fa46:	2300      	movne	r3, #0
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	f43f af46 	beq.w	800f8e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3770      	adds	r7, #112	; 0x70
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
	...

0800fa60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b095      	sub	sp, #84	; 0x54
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa70:	e853 3f00 	ldrex	r3, [r3]
 800fa74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	461a      	mov	r2, r3
 800fa84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa86:	643b      	str	r3, [r7, #64]	; 0x40
 800fa88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa8e:	e841 2300 	strex	r3, r2, [r1]
 800fa92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1e6      	bne.n	800fa68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3308      	adds	r3, #8
 800faa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa2:	6a3b      	ldr	r3, [r7, #32]
 800faa4:	e853 3f00 	ldrex	r3, [r3]
 800faa8:	61fb      	str	r3, [r7, #28]
   return(result);
 800faaa:	69fa      	ldr	r2, [r7, #28]
 800faac:	4b1e      	ldr	r3, [pc, #120]	; (800fb28 <UART_EndRxTransfer+0xc8>)
 800faae:	4013      	ands	r3, r2
 800fab0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3308      	adds	r3, #8
 800fab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fabc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fac2:	e841 2300 	strex	r3, r2, [r1]
 800fac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1e5      	bne.n	800fa9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d118      	bne.n	800fb08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	e853 3f00 	ldrex	r3, [r3]
 800fae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f023 0310 	bic.w	r3, r3, #16
 800faea:	647b      	str	r3, [r7, #68]	; 0x44
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	461a      	mov	r2, r3
 800faf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf4:	61bb      	str	r3, [r7, #24]
 800faf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf8:	6979      	ldr	r1, [r7, #20]
 800fafa:	69ba      	ldr	r2, [r7, #24]
 800fafc:	e841 2300 	strex	r3, r2, [r1]
 800fb00:	613b      	str	r3, [r7, #16]
   return(result);
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e6      	bne.n	800fad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fb1c:	bf00      	nop
 800fb1e:	3754      	adds	r7, #84	; 0x54
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	effffffe 	.word	0xeffffffe

0800fb2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff f854 	bl	800ebf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb50:	bf00      	nop
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	e853 3f00 	ldrex	r3, [r3]
 800fb6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb74:	61fb      	str	r3, [r7, #28]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	61bb      	str	r3, [r7, #24]
 800fb80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb82:	6979      	ldr	r1, [r7, #20]
 800fb84:	69ba      	ldr	r2, [r7, #24]
 800fb86:	e841 2300 	strex	r3, r2, [r1]
 800fb8a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e6      	bne.n	800fb60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff f81f 	bl	800ebe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fba6:	bf00      	nop
 800fba8:	3720      	adds	r7, #32
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b083      	sub	sp, #12
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fbc2:	b480      	push	{r7}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fbde:	bf00      	nop
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fbea:	b480      	push	{r7}
 800fbec:	b085      	sub	sp, #20
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d101      	bne.n	800fc00 <HAL_UARTEx_DisableFifoMode+0x16>
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	e027      	b.n	800fc50 <HAL_UARTEx_DisableFifoMode+0x66>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2224      	movs	r2, #36	; 0x24
 800fc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f022 0201 	bic.w	r2, r2, #1
 800fc26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fc2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d101      	bne.n	800fc74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc70:	2302      	movs	r3, #2
 800fc72:	e02d      	b.n	800fcd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2224      	movs	r2, #36	; 0x24
 800fc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f022 0201 	bic.w	r2, r2, #1
 800fc9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	430a      	orrs	r2, r1
 800fcae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 f84f 	bl	800fd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2220      	movs	r2, #32
 800fcc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3710      	adds	r7, #16
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d101      	bne.n	800fcf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcec:	2302      	movs	r3, #2
 800fcee:	e02d      	b.n	800fd4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2224      	movs	r2, #36	; 0x24
 800fcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f022 0201 	bic.w	r2, r2, #1
 800fd16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	430a      	orrs	r2, r1
 800fd2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f811 	bl	800fd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3710      	adds	r7, #16
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d108      	bne.n	800fd76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd74:	e031      	b.n	800fdda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd76:	2310      	movs	r3, #16
 800fd78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd7a:	2310      	movs	r3, #16
 800fd7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	0e5b      	lsrs	r3, r3, #25
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	f003 0307 	and.w	r3, r3, #7
 800fd8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	0f5b      	lsrs	r3, r3, #29
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	f003 0307 	and.w	r3, r3, #7
 800fd9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd9e:	7bbb      	ldrb	r3, [r7, #14]
 800fda0:	7b3a      	ldrb	r2, [r7, #12]
 800fda2:	4911      	ldr	r1, [pc, #68]	; (800fde8 <UARTEx_SetNbDataToProcess+0x94>)
 800fda4:	5c8a      	ldrb	r2, [r1, r2]
 800fda6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdaa:	7b3a      	ldrb	r2, [r7, #12]
 800fdac:	490f      	ldr	r1, [pc, #60]	; (800fdec <UARTEx_SetNbDataToProcess+0x98>)
 800fdae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
 800fdbe:	7b7a      	ldrb	r2, [r7, #13]
 800fdc0:	4909      	ldr	r1, [pc, #36]	; (800fde8 <UARTEx_SetNbDataToProcess+0x94>)
 800fdc2:	5c8a      	ldrb	r2, [r1, r2]
 800fdc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fdc8:	7b7a      	ldrb	r2, [r7, #13]
 800fdca:	4908      	ldr	r1, [pc, #32]	; (800fdec <UARTEx_SetNbDataToProcess+0x98>)
 800fdcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdce:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fdda:	bf00      	nop
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	080126e0 	.word	0x080126e0
 800fdec:	080126e8 	.word	0x080126e8

0800fdf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fdf0:	b084      	sub	sp, #16
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	f107 001c 	add.w	r0, r7, #28
 800fdfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d120      	bne.n	800fe4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	68da      	ldr	r2, [r3, #12]
 800fe18:	4b2a      	ldr	r3, [pc, #168]	; (800fec4 <USB_CoreInit+0xd4>)
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fe2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d105      	bne.n	800fe3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 faac 	bl	801039c <USB_CoreReset>
 800fe44:	4603      	mov	r3, r0
 800fe46:	73fb      	strb	r3, [r7, #15]
 800fe48:	e01a      	b.n	800fe80 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 faa0 	bl	801039c <USB_CoreReset>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	639a      	str	r2, [r3, #56]	; 0x38
 800fe72:	e005      	b.n	800fe80 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d116      	bne.n	800feb4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe94:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <USB_CoreInit+0xd8>)
 800fe96:	4313      	orrs	r3, r2
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	f043 0206 	orr.w	r2, r3, #6
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f043 0220 	orr.w	r2, r3, #32
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fec0:	b004      	add	sp, #16
 800fec2:	4770      	bx	lr
 800fec4:	ffbdffbf 	.word	0xffbdffbf
 800fec8:	03ee0000 	.word	0x03ee0000

0800fecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	689b      	ldr	r3, [r3, #8]
 800fed8:	f023 0201 	bic.w	r2, r3, #1
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	460b      	mov	r3, r1
 800fef8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fefa:	2300      	movs	r3, #0
 800fefc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ff0a:	78fb      	ldrb	r3, [r7, #3]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d115      	bne.n	800ff3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ff1c:	2001      	movs	r0, #1
 800ff1e:	f7f7 fc6b 	bl	80077f8 <HAL_Delay>
      ms++;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3301      	adds	r3, #1
 800ff26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 fa29 	bl	8010380 <USB_GetMode>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d01e      	beq.n	800ff72 <USB_SetCurrentMode+0x84>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b31      	cmp	r3, #49	; 0x31
 800ff38:	d9f0      	bls.n	800ff1c <USB_SetCurrentMode+0x2e>
 800ff3a:	e01a      	b.n	800ff72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d115      	bne.n	800ff6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ff4e:	2001      	movs	r0, #1
 800ff50:	f7f7 fc52 	bl	80077f8 <HAL_Delay>
      ms++;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	3301      	adds	r3, #1
 800ff58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fa10 	bl	8010380 <USB_GetMode>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <USB_SetCurrentMode+0x84>
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2b31      	cmp	r3, #49	; 0x31
 800ff6a:	d9f0      	bls.n	800ff4e <USB_SetCurrentMode+0x60>
 800ff6c:	e001      	b.n	800ff72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e005      	b.n	800ff7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2b32      	cmp	r3, #50	; 0x32
 800ff76:	d101      	bne.n	800ff7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e000      	b.n	800ff7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
	...

0800ff88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff88:	b084      	sub	sp, #16
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b086      	sub	sp, #24
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ff96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	613b      	str	r3, [r7, #16]
 800ffa6:	e009      	b.n	800ffbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	3340      	adds	r3, #64	; 0x40
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4413      	add	r3, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	613b      	str	r3, [r7, #16]
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	2b0e      	cmp	r3, #14
 800ffc0:	d9f2      	bls.n	800ffa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ffc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d11c      	bne.n	8010002 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffd6:	f043 0302 	orr.w	r3, r3, #2
 800ffda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	601a      	str	r2, [r3, #0]
 8010000:	e005      	b.n	801000e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010014:	461a      	mov	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010020:	4619      	mov	r1, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010028:	461a      	mov	r2, r3
 801002a:	680b      	ldr	r3, [r1, #0]
 801002c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	2b01      	cmp	r3, #1
 8010032:	d10c      	bne.n	801004e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801003a:	2100      	movs	r1, #0
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f965 	bl	801030c <USB_SetDevSpeed>
 8010042:	e008      	b.n	8010056 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010044:	2101      	movs	r1, #1
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f960 	bl	801030c <USB_SetDevSpeed>
 801004c:	e003      	b.n	8010056 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801004e:	2103      	movs	r1, #3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f95b 	bl	801030c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010056:	2110      	movs	r1, #16
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f8f3 	bl	8010244 <USB_FlushTxFifo>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f91f 	bl	80102ac <USB_FlushRxFifo>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010074:	2301      	movs	r3, #1
 8010076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801007e:	461a      	mov	r2, r3
 8010080:	2300      	movs	r3, #0
 8010082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801008a:	461a      	mov	r2, r3
 801008c:	2300      	movs	r3, #0
 801008e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010096:	461a      	mov	r2, r3
 8010098:	2300      	movs	r3, #0
 801009a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801009c:	2300      	movs	r3, #0
 801009e:	613b      	str	r3, [r7, #16]
 80100a0:	e043      	b.n	801012a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	015a      	lsls	r2, r3, #5
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4413      	add	r3, r2
 80100aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100b8:	d118      	bne.n	80100ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10a      	bne.n	80100d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	015a      	lsls	r2, r3, #5
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	4413      	add	r3, r2
 80100c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100cc:	461a      	mov	r2, r3
 80100ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	e013      	b.n	80100fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	015a      	lsls	r2, r3, #5
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	4413      	add	r3, r2
 80100de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e2:	461a      	mov	r2, r3
 80100e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80100e8:	6013      	str	r3, [r2, #0]
 80100ea:	e008      	b.n	80100fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	015a      	lsls	r2, r3, #5
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	4413      	add	r3, r2
 80100f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f8:	461a      	mov	r2, r3
 80100fa:	2300      	movs	r3, #0
 80100fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	015a      	lsls	r2, r3, #5
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	4413      	add	r3, r2
 8010106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801010a:	461a      	mov	r2, r3
 801010c:	2300      	movs	r3, #0
 801010e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	015a      	lsls	r2, r3, #5
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	4413      	add	r3, r2
 8010118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801011c:	461a      	mov	r2, r3
 801011e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	3301      	adds	r3, #1
 8010128:	613b      	str	r3, [r7, #16]
 801012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	429a      	cmp	r2, r3
 8010130:	d3b7      	bcc.n	80100a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010132:	2300      	movs	r3, #0
 8010134:	613b      	str	r3, [r7, #16]
 8010136:	e043      	b.n	80101c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	015a      	lsls	r2, r3, #5
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	4413      	add	r3, r2
 8010140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801014a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801014e:	d118      	bne.n	8010182 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d10a      	bne.n	801016c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	015a      	lsls	r2, r3, #5
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	4413      	add	r3, r2
 801015e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010162:	461a      	mov	r2, r3
 8010164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010168:	6013      	str	r3, [r2, #0]
 801016a:	e013      	b.n	8010194 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	015a      	lsls	r2, r3, #5
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	4413      	add	r3, r2
 8010174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010178:	461a      	mov	r2, r3
 801017a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801017e:	6013      	str	r3, [r2, #0]
 8010180:	e008      	b.n	8010194 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	015a      	lsls	r2, r3, #5
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	4413      	add	r3, r2
 801018a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801018e:	461a      	mov	r2, r3
 8010190:	2300      	movs	r3, #0
 8010192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	015a      	lsls	r2, r3, #5
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	4413      	add	r3, r2
 801019c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a0:	461a      	mov	r2, r3
 80101a2:	2300      	movs	r3, #0
 80101a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	015a      	lsls	r2, r3, #5
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	4413      	add	r3, r2
 80101ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b2:	461a      	mov	r2, r3
 80101b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80101b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	3301      	adds	r3, #1
 80101be:	613b      	str	r3, [r7, #16]
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	693a      	ldr	r2, [r7, #16]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d3b7      	bcc.n	8010138 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80101e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d105      	bne.n	80101fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	f043 0210 	orr.w	r2, r3, #16
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	699a      	ldr	r2, [r3, #24]
 8010200:	4b0e      	ldr	r3, [pc, #56]	; (801023c <USB_DevInit+0x2b4>)
 8010202:	4313      	orrs	r3, r2
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	f043 0208 	orr.w	r2, r3, #8
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801021a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801021c:	2b01      	cmp	r3, #1
 801021e:	d105      	bne.n	801022c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	699a      	ldr	r2, [r3, #24]
 8010224:	4b06      	ldr	r3, [pc, #24]	; (8010240 <USB_DevInit+0x2b8>)
 8010226:	4313      	orrs	r3, r2
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801022c:	7dfb      	ldrb	r3, [r7, #23]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010238:	b004      	add	sp, #16
 801023a:	4770      	bx	lr
 801023c:	803c3800 	.word	0x803c3800
 8010240:	40000004 	.word	0x40000004

08010244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801024e:	2300      	movs	r3, #0
 8010250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3301      	adds	r3, #1
 8010256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4a13      	ldr	r2, [pc, #76]	; (80102a8 <USB_FlushTxFifo+0x64>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d901      	bls.n	8010264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010260:	2303      	movs	r3, #3
 8010262:	e01b      	b.n	801029c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	daf2      	bge.n	8010252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801026c:	2300      	movs	r3, #0
 801026e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	019b      	lsls	r3, r3, #6
 8010274:	f043 0220 	orr.w	r2, r3, #32
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3301      	adds	r3, #1
 8010280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	4a08      	ldr	r2, [pc, #32]	; (80102a8 <USB_FlushTxFifo+0x64>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d901      	bls.n	801028e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e006      	b.n	801029c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	f003 0320 	and.w	r3, r3, #32
 8010296:	2b20      	cmp	r3, #32
 8010298:	d0f0      	beq.n	801027c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	00030d40 	.word	0x00030d40

080102ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80102b4:	2300      	movs	r3, #0
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	3301      	adds	r3, #1
 80102bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	4a11      	ldr	r2, [pc, #68]	; (8010308 <USB_FlushRxFifo+0x5c>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d901      	bls.n	80102ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80102c6:	2303      	movs	r3, #3
 80102c8:	e018      	b.n	80102fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	daf2      	bge.n	80102b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2210      	movs	r2, #16
 80102da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3301      	adds	r3, #1
 80102e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	4a08      	ldr	r2, [pc, #32]	; (8010308 <USB_FlushRxFifo+0x5c>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d901      	bls.n	80102ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e006      	b.n	80102fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	f003 0310 	and.w	r3, r3, #16
 80102f6:	2b10      	cmp	r3, #16
 80102f8:	d0f0      	beq.n	80102dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	00030d40 	.word	0x00030d40

0801030c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	460b      	mov	r3, r1
 8010316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	78fb      	ldrb	r3, [r7, #3]
 8010326:	68f9      	ldr	r1, [r7, #12]
 8010328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801032c:	4313      	orrs	r3, r2
 801032e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010330:	2300      	movs	r3, #0
}
 8010332:	4618      	mov	r0, r3
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr

0801033e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801033e:	b480      	push	{r7}
 8010340:	b085      	sub	sp, #20
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010358:	f023 0303 	bic.w	r3, r3, #3
 801035c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801036c:	f043 0302 	orr.w	r3, r3, #2
 8010370:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	f003 0301 	and.w	r3, r3, #1
}
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	3301      	adds	r3, #1
 80103ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	4a13      	ldr	r2, [pc, #76]	; (8010400 <USB_CoreReset+0x64>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d901      	bls.n	80103ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e01b      	b.n	80103f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	daf2      	bge.n	80103a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80103c2:	2300      	movs	r3, #0
 80103c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	f043 0201 	orr.w	r2, r3, #1
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3301      	adds	r3, #1
 80103d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	4a09      	ldr	r2, [pc, #36]	; (8010400 <USB_CoreReset+0x64>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d901      	bls.n	80103e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80103e0:	2303      	movs	r3, #3
 80103e2:	e006      	b.n	80103f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	f003 0301 	and.w	r3, r3, #1
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d0f0      	beq.n	80103d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	00030d40 	.word	0x00030d40

08010404 <__errno>:
 8010404:	4b01      	ldr	r3, [pc, #4]	; (801040c <__errno+0x8>)
 8010406:	6818      	ldr	r0, [r3, #0]
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	24000024 	.word	0x24000024

08010410 <__libc_init_array>:
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	4d0d      	ldr	r5, [pc, #52]	; (8010448 <__libc_init_array+0x38>)
 8010414:	4c0d      	ldr	r4, [pc, #52]	; (801044c <__libc_init_array+0x3c>)
 8010416:	1b64      	subs	r4, r4, r5
 8010418:	10a4      	asrs	r4, r4, #2
 801041a:	2600      	movs	r6, #0
 801041c:	42a6      	cmp	r6, r4
 801041e:	d109      	bne.n	8010434 <__libc_init_array+0x24>
 8010420:	4d0b      	ldr	r5, [pc, #44]	; (8010450 <__libc_init_array+0x40>)
 8010422:	4c0c      	ldr	r4, [pc, #48]	; (8010454 <__libc_init_array+0x44>)
 8010424:	f000 fc8e 	bl	8010d44 <_init>
 8010428:	1b64      	subs	r4, r4, r5
 801042a:	10a4      	asrs	r4, r4, #2
 801042c:	2600      	movs	r6, #0
 801042e:	42a6      	cmp	r6, r4
 8010430:	d105      	bne.n	801043e <__libc_init_array+0x2e>
 8010432:	bd70      	pop	{r4, r5, r6, pc}
 8010434:	f855 3b04 	ldr.w	r3, [r5], #4
 8010438:	4798      	blx	r3
 801043a:	3601      	adds	r6, #1
 801043c:	e7ee      	b.n	801041c <__libc_init_array+0xc>
 801043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010442:	4798      	blx	r3
 8010444:	3601      	adds	r6, #1
 8010446:	e7f2      	b.n	801042e <__libc_init_array+0x1e>
 8010448:	0801272c 	.word	0x0801272c
 801044c:	0801272c 	.word	0x0801272c
 8010450:	0801272c 	.word	0x0801272c
 8010454:	08012730 	.word	0x08012730

08010458 <memset>:
 8010458:	4402      	add	r2, r0
 801045a:	4603      	mov	r3, r0
 801045c:	4293      	cmp	r3, r2
 801045e:	d100      	bne.n	8010462 <memset+0xa>
 8010460:	4770      	bx	lr
 8010462:	f803 1b01 	strb.w	r1, [r3], #1
 8010466:	e7f9      	b.n	801045c <memset+0x4>

08010468 <_free_r>:
 8010468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801046a:	2900      	cmp	r1, #0
 801046c:	d044      	beq.n	80104f8 <_free_r+0x90>
 801046e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010472:	9001      	str	r0, [sp, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	f1a1 0404 	sub.w	r4, r1, #4
 801047a:	bfb8      	it	lt
 801047c:	18e4      	addlt	r4, r4, r3
 801047e:	f000 f903 	bl	8010688 <__malloc_lock>
 8010482:	4a1e      	ldr	r2, [pc, #120]	; (80104fc <_free_r+0x94>)
 8010484:	9801      	ldr	r0, [sp, #4]
 8010486:	6813      	ldr	r3, [r2, #0]
 8010488:	b933      	cbnz	r3, 8010498 <_free_r+0x30>
 801048a:	6063      	str	r3, [r4, #4]
 801048c:	6014      	str	r4, [r2, #0]
 801048e:	b003      	add	sp, #12
 8010490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010494:	f000 b8fe 	b.w	8010694 <__malloc_unlock>
 8010498:	42a3      	cmp	r3, r4
 801049a:	d908      	bls.n	80104ae <_free_r+0x46>
 801049c:	6825      	ldr	r5, [r4, #0]
 801049e:	1961      	adds	r1, r4, r5
 80104a0:	428b      	cmp	r3, r1
 80104a2:	bf01      	itttt	eq
 80104a4:	6819      	ldreq	r1, [r3, #0]
 80104a6:	685b      	ldreq	r3, [r3, #4]
 80104a8:	1949      	addeq	r1, r1, r5
 80104aa:	6021      	streq	r1, [r4, #0]
 80104ac:	e7ed      	b.n	801048a <_free_r+0x22>
 80104ae:	461a      	mov	r2, r3
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	b10b      	cbz	r3, 80104b8 <_free_r+0x50>
 80104b4:	42a3      	cmp	r3, r4
 80104b6:	d9fa      	bls.n	80104ae <_free_r+0x46>
 80104b8:	6811      	ldr	r1, [r2, #0]
 80104ba:	1855      	adds	r5, r2, r1
 80104bc:	42a5      	cmp	r5, r4
 80104be:	d10b      	bne.n	80104d8 <_free_r+0x70>
 80104c0:	6824      	ldr	r4, [r4, #0]
 80104c2:	4421      	add	r1, r4
 80104c4:	1854      	adds	r4, r2, r1
 80104c6:	42a3      	cmp	r3, r4
 80104c8:	6011      	str	r1, [r2, #0]
 80104ca:	d1e0      	bne.n	801048e <_free_r+0x26>
 80104cc:	681c      	ldr	r4, [r3, #0]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	6053      	str	r3, [r2, #4]
 80104d2:	4421      	add	r1, r4
 80104d4:	6011      	str	r1, [r2, #0]
 80104d6:	e7da      	b.n	801048e <_free_r+0x26>
 80104d8:	d902      	bls.n	80104e0 <_free_r+0x78>
 80104da:	230c      	movs	r3, #12
 80104dc:	6003      	str	r3, [r0, #0]
 80104de:	e7d6      	b.n	801048e <_free_r+0x26>
 80104e0:	6825      	ldr	r5, [r4, #0]
 80104e2:	1961      	adds	r1, r4, r5
 80104e4:	428b      	cmp	r3, r1
 80104e6:	bf04      	itt	eq
 80104e8:	6819      	ldreq	r1, [r3, #0]
 80104ea:	685b      	ldreq	r3, [r3, #4]
 80104ec:	6063      	str	r3, [r4, #4]
 80104ee:	bf04      	itt	eq
 80104f0:	1949      	addeq	r1, r1, r5
 80104f2:	6021      	streq	r1, [r4, #0]
 80104f4:	6054      	str	r4, [r2, #4]
 80104f6:	e7ca      	b.n	801048e <_free_r+0x26>
 80104f8:	b003      	add	sp, #12
 80104fa:	bd30      	pop	{r4, r5, pc}
 80104fc:	24000eb8 	.word	0x24000eb8

08010500 <sbrk_aligned>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	4e0e      	ldr	r6, [pc, #56]	; (801053c <sbrk_aligned+0x3c>)
 8010504:	460c      	mov	r4, r1
 8010506:	6831      	ldr	r1, [r6, #0]
 8010508:	4605      	mov	r5, r0
 801050a:	b911      	cbnz	r1, 8010512 <sbrk_aligned+0x12>
 801050c:	f000 f88c 	bl	8010628 <_sbrk_r>
 8010510:	6030      	str	r0, [r6, #0]
 8010512:	4621      	mov	r1, r4
 8010514:	4628      	mov	r0, r5
 8010516:	f000 f887 	bl	8010628 <_sbrk_r>
 801051a:	1c43      	adds	r3, r0, #1
 801051c:	d00a      	beq.n	8010534 <sbrk_aligned+0x34>
 801051e:	1cc4      	adds	r4, r0, #3
 8010520:	f024 0403 	bic.w	r4, r4, #3
 8010524:	42a0      	cmp	r0, r4
 8010526:	d007      	beq.n	8010538 <sbrk_aligned+0x38>
 8010528:	1a21      	subs	r1, r4, r0
 801052a:	4628      	mov	r0, r5
 801052c:	f000 f87c 	bl	8010628 <_sbrk_r>
 8010530:	3001      	adds	r0, #1
 8010532:	d101      	bne.n	8010538 <sbrk_aligned+0x38>
 8010534:	f04f 34ff 	mov.w	r4, #4294967295
 8010538:	4620      	mov	r0, r4
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	24000ebc 	.word	0x24000ebc

08010540 <_malloc_r>:
 8010540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010544:	1ccd      	adds	r5, r1, #3
 8010546:	f025 0503 	bic.w	r5, r5, #3
 801054a:	3508      	adds	r5, #8
 801054c:	2d0c      	cmp	r5, #12
 801054e:	bf38      	it	cc
 8010550:	250c      	movcc	r5, #12
 8010552:	2d00      	cmp	r5, #0
 8010554:	4607      	mov	r7, r0
 8010556:	db01      	blt.n	801055c <_malloc_r+0x1c>
 8010558:	42a9      	cmp	r1, r5
 801055a:	d905      	bls.n	8010568 <_malloc_r+0x28>
 801055c:	230c      	movs	r3, #12
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	2600      	movs	r6, #0
 8010562:	4630      	mov	r0, r6
 8010564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010568:	4e2e      	ldr	r6, [pc, #184]	; (8010624 <_malloc_r+0xe4>)
 801056a:	f000 f88d 	bl	8010688 <__malloc_lock>
 801056e:	6833      	ldr	r3, [r6, #0]
 8010570:	461c      	mov	r4, r3
 8010572:	bb34      	cbnz	r4, 80105c2 <_malloc_r+0x82>
 8010574:	4629      	mov	r1, r5
 8010576:	4638      	mov	r0, r7
 8010578:	f7ff ffc2 	bl	8010500 <sbrk_aligned>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	4604      	mov	r4, r0
 8010580:	d14d      	bne.n	801061e <_malloc_r+0xde>
 8010582:	6834      	ldr	r4, [r6, #0]
 8010584:	4626      	mov	r6, r4
 8010586:	2e00      	cmp	r6, #0
 8010588:	d140      	bne.n	801060c <_malloc_r+0xcc>
 801058a:	6823      	ldr	r3, [r4, #0]
 801058c:	4631      	mov	r1, r6
 801058e:	4638      	mov	r0, r7
 8010590:	eb04 0803 	add.w	r8, r4, r3
 8010594:	f000 f848 	bl	8010628 <_sbrk_r>
 8010598:	4580      	cmp	r8, r0
 801059a:	d13a      	bne.n	8010612 <_malloc_r+0xd2>
 801059c:	6821      	ldr	r1, [r4, #0]
 801059e:	3503      	adds	r5, #3
 80105a0:	1a6d      	subs	r5, r5, r1
 80105a2:	f025 0503 	bic.w	r5, r5, #3
 80105a6:	3508      	adds	r5, #8
 80105a8:	2d0c      	cmp	r5, #12
 80105aa:	bf38      	it	cc
 80105ac:	250c      	movcc	r5, #12
 80105ae:	4629      	mov	r1, r5
 80105b0:	4638      	mov	r0, r7
 80105b2:	f7ff ffa5 	bl	8010500 <sbrk_aligned>
 80105b6:	3001      	adds	r0, #1
 80105b8:	d02b      	beq.n	8010612 <_malloc_r+0xd2>
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	442b      	add	r3, r5
 80105be:	6023      	str	r3, [r4, #0]
 80105c0:	e00e      	b.n	80105e0 <_malloc_r+0xa0>
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	1b52      	subs	r2, r2, r5
 80105c6:	d41e      	bmi.n	8010606 <_malloc_r+0xc6>
 80105c8:	2a0b      	cmp	r2, #11
 80105ca:	d916      	bls.n	80105fa <_malloc_r+0xba>
 80105cc:	1961      	adds	r1, r4, r5
 80105ce:	42a3      	cmp	r3, r4
 80105d0:	6025      	str	r5, [r4, #0]
 80105d2:	bf18      	it	ne
 80105d4:	6059      	strne	r1, [r3, #4]
 80105d6:	6863      	ldr	r3, [r4, #4]
 80105d8:	bf08      	it	eq
 80105da:	6031      	streq	r1, [r6, #0]
 80105dc:	5162      	str	r2, [r4, r5]
 80105de:	604b      	str	r3, [r1, #4]
 80105e0:	4638      	mov	r0, r7
 80105e2:	f104 060b 	add.w	r6, r4, #11
 80105e6:	f000 f855 	bl	8010694 <__malloc_unlock>
 80105ea:	f026 0607 	bic.w	r6, r6, #7
 80105ee:	1d23      	adds	r3, r4, #4
 80105f0:	1af2      	subs	r2, r6, r3
 80105f2:	d0b6      	beq.n	8010562 <_malloc_r+0x22>
 80105f4:	1b9b      	subs	r3, r3, r6
 80105f6:	50a3      	str	r3, [r4, r2]
 80105f8:	e7b3      	b.n	8010562 <_malloc_r+0x22>
 80105fa:	6862      	ldr	r2, [r4, #4]
 80105fc:	42a3      	cmp	r3, r4
 80105fe:	bf0c      	ite	eq
 8010600:	6032      	streq	r2, [r6, #0]
 8010602:	605a      	strne	r2, [r3, #4]
 8010604:	e7ec      	b.n	80105e0 <_malloc_r+0xa0>
 8010606:	4623      	mov	r3, r4
 8010608:	6864      	ldr	r4, [r4, #4]
 801060a:	e7b2      	b.n	8010572 <_malloc_r+0x32>
 801060c:	4634      	mov	r4, r6
 801060e:	6876      	ldr	r6, [r6, #4]
 8010610:	e7b9      	b.n	8010586 <_malloc_r+0x46>
 8010612:	230c      	movs	r3, #12
 8010614:	603b      	str	r3, [r7, #0]
 8010616:	4638      	mov	r0, r7
 8010618:	f000 f83c 	bl	8010694 <__malloc_unlock>
 801061c:	e7a1      	b.n	8010562 <_malloc_r+0x22>
 801061e:	6025      	str	r5, [r4, #0]
 8010620:	e7de      	b.n	80105e0 <_malloc_r+0xa0>
 8010622:	bf00      	nop
 8010624:	24000eb8 	.word	0x24000eb8

08010628 <_sbrk_r>:
 8010628:	b538      	push	{r3, r4, r5, lr}
 801062a:	4d06      	ldr	r5, [pc, #24]	; (8010644 <_sbrk_r+0x1c>)
 801062c:	2300      	movs	r3, #0
 801062e:	4604      	mov	r4, r0
 8010630:	4608      	mov	r0, r1
 8010632:	602b      	str	r3, [r5, #0]
 8010634:	f7f6 ffee 	bl	8007614 <_sbrk>
 8010638:	1c43      	adds	r3, r0, #1
 801063a:	d102      	bne.n	8010642 <_sbrk_r+0x1a>
 801063c:	682b      	ldr	r3, [r5, #0]
 801063e:	b103      	cbz	r3, 8010642 <_sbrk_r+0x1a>
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	bd38      	pop	{r3, r4, r5, pc}
 8010644:	24000ec0 	.word	0x24000ec0

08010648 <siprintf>:
 8010648:	b40e      	push	{r1, r2, r3}
 801064a:	b500      	push	{lr}
 801064c:	b09c      	sub	sp, #112	; 0x70
 801064e:	ab1d      	add	r3, sp, #116	; 0x74
 8010650:	9002      	str	r0, [sp, #8]
 8010652:	9006      	str	r0, [sp, #24]
 8010654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010658:	4809      	ldr	r0, [pc, #36]	; (8010680 <siprintf+0x38>)
 801065a:	9107      	str	r1, [sp, #28]
 801065c:	9104      	str	r1, [sp, #16]
 801065e:	4909      	ldr	r1, [pc, #36]	; (8010684 <siprintf+0x3c>)
 8010660:	f853 2b04 	ldr.w	r2, [r3], #4
 8010664:	9105      	str	r1, [sp, #20]
 8010666:	6800      	ldr	r0, [r0, #0]
 8010668:	9301      	str	r3, [sp, #4]
 801066a:	a902      	add	r1, sp, #8
 801066c:	f000 f874 	bl	8010758 <_svfiprintf_r>
 8010670:	9b02      	ldr	r3, [sp, #8]
 8010672:	2200      	movs	r2, #0
 8010674:	701a      	strb	r2, [r3, #0]
 8010676:	b01c      	add	sp, #112	; 0x70
 8010678:	f85d eb04 	ldr.w	lr, [sp], #4
 801067c:	b003      	add	sp, #12
 801067e:	4770      	bx	lr
 8010680:	24000024 	.word	0x24000024
 8010684:	ffff0208 	.word	0xffff0208

08010688 <__malloc_lock>:
 8010688:	4801      	ldr	r0, [pc, #4]	; (8010690 <__malloc_lock+0x8>)
 801068a:	f000 baf9 	b.w	8010c80 <__retarget_lock_acquire_recursive>
 801068e:	bf00      	nop
 8010690:	24000ec4 	.word	0x24000ec4

08010694 <__malloc_unlock>:
 8010694:	4801      	ldr	r0, [pc, #4]	; (801069c <__malloc_unlock+0x8>)
 8010696:	f000 baf4 	b.w	8010c82 <__retarget_lock_release_recursive>
 801069a:	bf00      	nop
 801069c:	24000ec4 	.word	0x24000ec4

080106a0 <__ssputs_r>:
 80106a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a4:	688e      	ldr	r6, [r1, #8]
 80106a6:	429e      	cmp	r6, r3
 80106a8:	4682      	mov	sl, r0
 80106aa:	460c      	mov	r4, r1
 80106ac:	4690      	mov	r8, r2
 80106ae:	461f      	mov	r7, r3
 80106b0:	d838      	bhi.n	8010724 <__ssputs_r+0x84>
 80106b2:	898a      	ldrh	r2, [r1, #12]
 80106b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106b8:	d032      	beq.n	8010720 <__ssputs_r+0x80>
 80106ba:	6825      	ldr	r5, [r4, #0]
 80106bc:	6909      	ldr	r1, [r1, #16]
 80106be:	eba5 0901 	sub.w	r9, r5, r1
 80106c2:	6965      	ldr	r5, [r4, #20]
 80106c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106cc:	3301      	adds	r3, #1
 80106ce:	444b      	add	r3, r9
 80106d0:	106d      	asrs	r5, r5, #1
 80106d2:	429d      	cmp	r5, r3
 80106d4:	bf38      	it	cc
 80106d6:	461d      	movcc	r5, r3
 80106d8:	0553      	lsls	r3, r2, #21
 80106da:	d531      	bpl.n	8010740 <__ssputs_r+0xa0>
 80106dc:	4629      	mov	r1, r5
 80106de:	f7ff ff2f 	bl	8010540 <_malloc_r>
 80106e2:	4606      	mov	r6, r0
 80106e4:	b950      	cbnz	r0, 80106fc <__ssputs_r+0x5c>
 80106e6:	230c      	movs	r3, #12
 80106e8:	f8ca 3000 	str.w	r3, [sl]
 80106ec:	89a3      	ldrh	r3, [r4, #12]
 80106ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106f2:	81a3      	strh	r3, [r4, #12]
 80106f4:	f04f 30ff 	mov.w	r0, #4294967295
 80106f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106fc:	6921      	ldr	r1, [r4, #16]
 80106fe:	464a      	mov	r2, r9
 8010700:	f000 fac0 	bl	8010c84 <memcpy>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801070e:	81a3      	strh	r3, [r4, #12]
 8010710:	6126      	str	r6, [r4, #16]
 8010712:	6165      	str	r5, [r4, #20]
 8010714:	444e      	add	r6, r9
 8010716:	eba5 0509 	sub.w	r5, r5, r9
 801071a:	6026      	str	r6, [r4, #0]
 801071c:	60a5      	str	r5, [r4, #8]
 801071e:	463e      	mov	r6, r7
 8010720:	42be      	cmp	r6, r7
 8010722:	d900      	bls.n	8010726 <__ssputs_r+0x86>
 8010724:	463e      	mov	r6, r7
 8010726:	6820      	ldr	r0, [r4, #0]
 8010728:	4632      	mov	r2, r6
 801072a:	4641      	mov	r1, r8
 801072c:	f000 fab8 	bl	8010ca0 <memmove>
 8010730:	68a3      	ldr	r3, [r4, #8]
 8010732:	1b9b      	subs	r3, r3, r6
 8010734:	60a3      	str	r3, [r4, #8]
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	4433      	add	r3, r6
 801073a:	6023      	str	r3, [r4, #0]
 801073c:	2000      	movs	r0, #0
 801073e:	e7db      	b.n	80106f8 <__ssputs_r+0x58>
 8010740:	462a      	mov	r2, r5
 8010742:	f000 fac7 	bl	8010cd4 <_realloc_r>
 8010746:	4606      	mov	r6, r0
 8010748:	2800      	cmp	r0, #0
 801074a:	d1e1      	bne.n	8010710 <__ssputs_r+0x70>
 801074c:	6921      	ldr	r1, [r4, #16]
 801074e:	4650      	mov	r0, sl
 8010750:	f7ff fe8a 	bl	8010468 <_free_r>
 8010754:	e7c7      	b.n	80106e6 <__ssputs_r+0x46>
	...

08010758 <_svfiprintf_r>:
 8010758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	4698      	mov	r8, r3
 801075e:	898b      	ldrh	r3, [r1, #12]
 8010760:	061b      	lsls	r3, r3, #24
 8010762:	b09d      	sub	sp, #116	; 0x74
 8010764:	4607      	mov	r7, r0
 8010766:	460d      	mov	r5, r1
 8010768:	4614      	mov	r4, r2
 801076a:	d50e      	bpl.n	801078a <_svfiprintf_r+0x32>
 801076c:	690b      	ldr	r3, [r1, #16]
 801076e:	b963      	cbnz	r3, 801078a <_svfiprintf_r+0x32>
 8010770:	2140      	movs	r1, #64	; 0x40
 8010772:	f7ff fee5 	bl	8010540 <_malloc_r>
 8010776:	6028      	str	r0, [r5, #0]
 8010778:	6128      	str	r0, [r5, #16]
 801077a:	b920      	cbnz	r0, 8010786 <_svfiprintf_r+0x2e>
 801077c:	230c      	movs	r3, #12
 801077e:	603b      	str	r3, [r7, #0]
 8010780:	f04f 30ff 	mov.w	r0, #4294967295
 8010784:	e0d1      	b.n	801092a <_svfiprintf_r+0x1d2>
 8010786:	2340      	movs	r3, #64	; 0x40
 8010788:	616b      	str	r3, [r5, #20]
 801078a:	2300      	movs	r3, #0
 801078c:	9309      	str	r3, [sp, #36]	; 0x24
 801078e:	2320      	movs	r3, #32
 8010790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010794:	f8cd 800c 	str.w	r8, [sp, #12]
 8010798:	2330      	movs	r3, #48	; 0x30
 801079a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010944 <_svfiprintf_r+0x1ec>
 801079e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107a2:	f04f 0901 	mov.w	r9, #1
 80107a6:	4623      	mov	r3, r4
 80107a8:	469a      	mov	sl, r3
 80107aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107ae:	b10a      	cbz	r2, 80107b4 <_svfiprintf_r+0x5c>
 80107b0:	2a25      	cmp	r2, #37	; 0x25
 80107b2:	d1f9      	bne.n	80107a8 <_svfiprintf_r+0x50>
 80107b4:	ebba 0b04 	subs.w	fp, sl, r4
 80107b8:	d00b      	beq.n	80107d2 <_svfiprintf_r+0x7a>
 80107ba:	465b      	mov	r3, fp
 80107bc:	4622      	mov	r2, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	4638      	mov	r0, r7
 80107c2:	f7ff ff6d 	bl	80106a0 <__ssputs_r>
 80107c6:	3001      	adds	r0, #1
 80107c8:	f000 80aa 	beq.w	8010920 <_svfiprintf_r+0x1c8>
 80107cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107ce:	445a      	add	r2, fp
 80107d0:	9209      	str	r2, [sp, #36]	; 0x24
 80107d2:	f89a 3000 	ldrb.w	r3, [sl]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 80a2 	beq.w	8010920 <_svfiprintf_r+0x1c8>
 80107dc:	2300      	movs	r3, #0
 80107de:	f04f 32ff 	mov.w	r2, #4294967295
 80107e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107e6:	f10a 0a01 	add.w	sl, sl, #1
 80107ea:	9304      	str	r3, [sp, #16]
 80107ec:	9307      	str	r3, [sp, #28]
 80107ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107f2:	931a      	str	r3, [sp, #104]	; 0x68
 80107f4:	4654      	mov	r4, sl
 80107f6:	2205      	movs	r2, #5
 80107f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107fc:	4851      	ldr	r0, [pc, #324]	; (8010944 <_svfiprintf_r+0x1ec>)
 80107fe:	f7ef fd6f 	bl	80002e0 <memchr>
 8010802:	9a04      	ldr	r2, [sp, #16]
 8010804:	b9d8      	cbnz	r0, 801083e <_svfiprintf_r+0xe6>
 8010806:	06d0      	lsls	r0, r2, #27
 8010808:	bf44      	itt	mi
 801080a:	2320      	movmi	r3, #32
 801080c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010810:	0711      	lsls	r1, r2, #28
 8010812:	bf44      	itt	mi
 8010814:	232b      	movmi	r3, #43	; 0x2b
 8010816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081a:	f89a 3000 	ldrb.w	r3, [sl]
 801081e:	2b2a      	cmp	r3, #42	; 0x2a
 8010820:	d015      	beq.n	801084e <_svfiprintf_r+0xf6>
 8010822:	9a07      	ldr	r2, [sp, #28]
 8010824:	4654      	mov	r4, sl
 8010826:	2000      	movs	r0, #0
 8010828:	f04f 0c0a 	mov.w	ip, #10
 801082c:	4621      	mov	r1, r4
 801082e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010832:	3b30      	subs	r3, #48	; 0x30
 8010834:	2b09      	cmp	r3, #9
 8010836:	d94e      	bls.n	80108d6 <_svfiprintf_r+0x17e>
 8010838:	b1b0      	cbz	r0, 8010868 <_svfiprintf_r+0x110>
 801083a:	9207      	str	r2, [sp, #28]
 801083c:	e014      	b.n	8010868 <_svfiprintf_r+0x110>
 801083e:	eba0 0308 	sub.w	r3, r0, r8
 8010842:	fa09 f303 	lsl.w	r3, r9, r3
 8010846:	4313      	orrs	r3, r2
 8010848:	9304      	str	r3, [sp, #16]
 801084a:	46a2      	mov	sl, r4
 801084c:	e7d2      	b.n	80107f4 <_svfiprintf_r+0x9c>
 801084e:	9b03      	ldr	r3, [sp, #12]
 8010850:	1d19      	adds	r1, r3, #4
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	9103      	str	r1, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	bfbb      	ittet	lt
 801085a:	425b      	neglt	r3, r3
 801085c:	f042 0202 	orrlt.w	r2, r2, #2
 8010860:	9307      	strge	r3, [sp, #28]
 8010862:	9307      	strlt	r3, [sp, #28]
 8010864:	bfb8      	it	lt
 8010866:	9204      	strlt	r2, [sp, #16]
 8010868:	7823      	ldrb	r3, [r4, #0]
 801086a:	2b2e      	cmp	r3, #46	; 0x2e
 801086c:	d10c      	bne.n	8010888 <_svfiprintf_r+0x130>
 801086e:	7863      	ldrb	r3, [r4, #1]
 8010870:	2b2a      	cmp	r3, #42	; 0x2a
 8010872:	d135      	bne.n	80108e0 <_svfiprintf_r+0x188>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	1d1a      	adds	r2, r3, #4
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	9203      	str	r2, [sp, #12]
 801087c:	2b00      	cmp	r3, #0
 801087e:	bfb8      	it	lt
 8010880:	f04f 33ff 	movlt.w	r3, #4294967295
 8010884:	3402      	adds	r4, #2
 8010886:	9305      	str	r3, [sp, #20]
 8010888:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010954 <_svfiprintf_r+0x1fc>
 801088c:	7821      	ldrb	r1, [r4, #0]
 801088e:	2203      	movs	r2, #3
 8010890:	4650      	mov	r0, sl
 8010892:	f7ef fd25 	bl	80002e0 <memchr>
 8010896:	b140      	cbz	r0, 80108aa <_svfiprintf_r+0x152>
 8010898:	2340      	movs	r3, #64	; 0x40
 801089a:	eba0 000a 	sub.w	r0, r0, sl
 801089e:	fa03 f000 	lsl.w	r0, r3, r0
 80108a2:	9b04      	ldr	r3, [sp, #16]
 80108a4:	4303      	orrs	r3, r0
 80108a6:	3401      	adds	r4, #1
 80108a8:	9304      	str	r3, [sp, #16]
 80108aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ae:	4826      	ldr	r0, [pc, #152]	; (8010948 <_svfiprintf_r+0x1f0>)
 80108b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108b4:	2206      	movs	r2, #6
 80108b6:	f7ef fd13 	bl	80002e0 <memchr>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d038      	beq.n	8010930 <_svfiprintf_r+0x1d8>
 80108be:	4b23      	ldr	r3, [pc, #140]	; (801094c <_svfiprintf_r+0x1f4>)
 80108c0:	bb1b      	cbnz	r3, 801090a <_svfiprintf_r+0x1b2>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	3307      	adds	r3, #7
 80108c6:	f023 0307 	bic.w	r3, r3, #7
 80108ca:	3308      	adds	r3, #8
 80108cc:	9303      	str	r3, [sp, #12]
 80108ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d0:	4433      	add	r3, r6
 80108d2:	9309      	str	r3, [sp, #36]	; 0x24
 80108d4:	e767      	b.n	80107a6 <_svfiprintf_r+0x4e>
 80108d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80108da:	460c      	mov	r4, r1
 80108dc:	2001      	movs	r0, #1
 80108de:	e7a5      	b.n	801082c <_svfiprintf_r+0xd4>
 80108e0:	2300      	movs	r3, #0
 80108e2:	3401      	adds	r4, #1
 80108e4:	9305      	str	r3, [sp, #20]
 80108e6:	4619      	mov	r1, r3
 80108e8:	f04f 0c0a 	mov.w	ip, #10
 80108ec:	4620      	mov	r0, r4
 80108ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108f2:	3a30      	subs	r2, #48	; 0x30
 80108f4:	2a09      	cmp	r2, #9
 80108f6:	d903      	bls.n	8010900 <_svfiprintf_r+0x1a8>
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d0c5      	beq.n	8010888 <_svfiprintf_r+0x130>
 80108fc:	9105      	str	r1, [sp, #20]
 80108fe:	e7c3      	b.n	8010888 <_svfiprintf_r+0x130>
 8010900:	fb0c 2101 	mla	r1, ip, r1, r2
 8010904:	4604      	mov	r4, r0
 8010906:	2301      	movs	r3, #1
 8010908:	e7f0      	b.n	80108ec <_svfiprintf_r+0x194>
 801090a:	ab03      	add	r3, sp, #12
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	462a      	mov	r2, r5
 8010910:	4b0f      	ldr	r3, [pc, #60]	; (8010950 <_svfiprintf_r+0x1f8>)
 8010912:	a904      	add	r1, sp, #16
 8010914:	4638      	mov	r0, r7
 8010916:	f3af 8000 	nop.w
 801091a:	1c42      	adds	r2, r0, #1
 801091c:	4606      	mov	r6, r0
 801091e:	d1d6      	bne.n	80108ce <_svfiprintf_r+0x176>
 8010920:	89ab      	ldrh	r3, [r5, #12]
 8010922:	065b      	lsls	r3, r3, #25
 8010924:	f53f af2c 	bmi.w	8010780 <_svfiprintf_r+0x28>
 8010928:	9809      	ldr	r0, [sp, #36]	; 0x24
 801092a:	b01d      	add	sp, #116	; 0x74
 801092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010930:	ab03      	add	r3, sp, #12
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	462a      	mov	r2, r5
 8010936:	4b06      	ldr	r3, [pc, #24]	; (8010950 <_svfiprintf_r+0x1f8>)
 8010938:	a904      	add	r1, sp, #16
 801093a:	4638      	mov	r0, r7
 801093c:	f000 f87a 	bl	8010a34 <_printf_i>
 8010940:	e7eb      	b.n	801091a <_svfiprintf_r+0x1c2>
 8010942:	bf00      	nop
 8010944:	080126f0 	.word	0x080126f0
 8010948:	080126fa 	.word	0x080126fa
 801094c:	00000000 	.word	0x00000000
 8010950:	080106a1 	.word	0x080106a1
 8010954:	080126f6 	.word	0x080126f6

08010958 <_printf_common>:
 8010958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801095c:	4616      	mov	r6, r2
 801095e:	4699      	mov	r9, r3
 8010960:	688a      	ldr	r2, [r1, #8]
 8010962:	690b      	ldr	r3, [r1, #16]
 8010964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010968:	4293      	cmp	r3, r2
 801096a:	bfb8      	it	lt
 801096c:	4613      	movlt	r3, r2
 801096e:	6033      	str	r3, [r6, #0]
 8010970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010974:	4607      	mov	r7, r0
 8010976:	460c      	mov	r4, r1
 8010978:	b10a      	cbz	r2, 801097e <_printf_common+0x26>
 801097a:	3301      	adds	r3, #1
 801097c:	6033      	str	r3, [r6, #0]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	0699      	lsls	r1, r3, #26
 8010982:	bf42      	ittt	mi
 8010984:	6833      	ldrmi	r3, [r6, #0]
 8010986:	3302      	addmi	r3, #2
 8010988:	6033      	strmi	r3, [r6, #0]
 801098a:	6825      	ldr	r5, [r4, #0]
 801098c:	f015 0506 	ands.w	r5, r5, #6
 8010990:	d106      	bne.n	80109a0 <_printf_common+0x48>
 8010992:	f104 0a19 	add.w	sl, r4, #25
 8010996:	68e3      	ldr	r3, [r4, #12]
 8010998:	6832      	ldr	r2, [r6, #0]
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	42ab      	cmp	r3, r5
 801099e:	dc26      	bgt.n	80109ee <_printf_common+0x96>
 80109a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109a4:	1e13      	subs	r3, r2, #0
 80109a6:	6822      	ldr	r2, [r4, #0]
 80109a8:	bf18      	it	ne
 80109aa:	2301      	movne	r3, #1
 80109ac:	0692      	lsls	r2, r2, #26
 80109ae:	d42b      	bmi.n	8010a08 <_printf_common+0xb0>
 80109b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109b4:	4649      	mov	r1, r9
 80109b6:	4638      	mov	r0, r7
 80109b8:	47c0      	blx	r8
 80109ba:	3001      	adds	r0, #1
 80109bc:	d01e      	beq.n	80109fc <_printf_common+0xa4>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	68e5      	ldr	r5, [r4, #12]
 80109c2:	6832      	ldr	r2, [r6, #0]
 80109c4:	f003 0306 	and.w	r3, r3, #6
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	bf08      	it	eq
 80109cc:	1aad      	subeq	r5, r5, r2
 80109ce:	68a3      	ldr	r3, [r4, #8]
 80109d0:	6922      	ldr	r2, [r4, #16]
 80109d2:	bf0c      	ite	eq
 80109d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109d8:	2500      	movne	r5, #0
 80109da:	4293      	cmp	r3, r2
 80109dc:	bfc4      	itt	gt
 80109de:	1a9b      	subgt	r3, r3, r2
 80109e0:	18ed      	addgt	r5, r5, r3
 80109e2:	2600      	movs	r6, #0
 80109e4:	341a      	adds	r4, #26
 80109e6:	42b5      	cmp	r5, r6
 80109e8:	d11a      	bne.n	8010a20 <_printf_common+0xc8>
 80109ea:	2000      	movs	r0, #0
 80109ec:	e008      	b.n	8010a00 <_printf_common+0xa8>
 80109ee:	2301      	movs	r3, #1
 80109f0:	4652      	mov	r2, sl
 80109f2:	4649      	mov	r1, r9
 80109f4:	4638      	mov	r0, r7
 80109f6:	47c0      	blx	r8
 80109f8:	3001      	adds	r0, #1
 80109fa:	d103      	bne.n	8010a04 <_printf_common+0xac>
 80109fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a04:	3501      	adds	r5, #1
 8010a06:	e7c6      	b.n	8010996 <_printf_common+0x3e>
 8010a08:	18e1      	adds	r1, r4, r3
 8010a0a:	1c5a      	adds	r2, r3, #1
 8010a0c:	2030      	movs	r0, #48	; 0x30
 8010a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a12:	4422      	add	r2, r4
 8010a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a1c:	3302      	adds	r3, #2
 8010a1e:	e7c7      	b.n	80109b0 <_printf_common+0x58>
 8010a20:	2301      	movs	r3, #1
 8010a22:	4622      	mov	r2, r4
 8010a24:	4649      	mov	r1, r9
 8010a26:	4638      	mov	r0, r7
 8010a28:	47c0      	blx	r8
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	d0e6      	beq.n	80109fc <_printf_common+0xa4>
 8010a2e:	3601      	adds	r6, #1
 8010a30:	e7d9      	b.n	80109e6 <_printf_common+0x8e>
	...

08010a34 <_printf_i>:
 8010a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a38:	7e0f      	ldrb	r7, [r1, #24]
 8010a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a3c:	2f78      	cmp	r7, #120	; 0x78
 8010a3e:	4691      	mov	r9, r2
 8010a40:	4680      	mov	r8, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	469a      	mov	sl, r3
 8010a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a4a:	d807      	bhi.n	8010a5c <_printf_i+0x28>
 8010a4c:	2f62      	cmp	r7, #98	; 0x62
 8010a4e:	d80a      	bhi.n	8010a66 <_printf_i+0x32>
 8010a50:	2f00      	cmp	r7, #0
 8010a52:	f000 80d8 	beq.w	8010c06 <_printf_i+0x1d2>
 8010a56:	2f58      	cmp	r7, #88	; 0x58
 8010a58:	f000 80a3 	beq.w	8010ba2 <_printf_i+0x16e>
 8010a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a64:	e03a      	b.n	8010adc <_printf_i+0xa8>
 8010a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a6a:	2b15      	cmp	r3, #21
 8010a6c:	d8f6      	bhi.n	8010a5c <_printf_i+0x28>
 8010a6e:	a101      	add	r1, pc, #4	; (adr r1, 8010a74 <_printf_i+0x40>)
 8010a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a74:	08010acd 	.word	0x08010acd
 8010a78:	08010ae1 	.word	0x08010ae1
 8010a7c:	08010a5d 	.word	0x08010a5d
 8010a80:	08010a5d 	.word	0x08010a5d
 8010a84:	08010a5d 	.word	0x08010a5d
 8010a88:	08010a5d 	.word	0x08010a5d
 8010a8c:	08010ae1 	.word	0x08010ae1
 8010a90:	08010a5d 	.word	0x08010a5d
 8010a94:	08010a5d 	.word	0x08010a5d
 8010a98:	08010a5d 	.word	0x08010a5d
 8010a9c:	08010a5d 	.word	0x08010a5d
 8010aa0:	08010bed 	.word	0x08010bed
 8010aa4:	08010b11 	.word	0x08010b11
 8010aa8:	08010bcf 	.word	0x08010bcf
 8010aac:	08010a5d 	.word	0x08010a5d
 8010ab0:	08010a5d 	.word	0x08010a5d
 8010ab4:	08010c0f 	.word	0x08010c0f
 8010ab8:	08010a5d 	.word	0x08010a5d
 8010abc:	08010b11 	.word	0x08010b11
 8010ac0:	08010a5d 	.word	0x08010a5d
 8010ac4:	08010a5d 	.word	0x08010a5d
 8010ac8:	08010bd7 	.word	0x08010bd7
 8010acc:	682b      	ldr	r3, [r5, #0]
 8010ace:	1d1a      	adds	r2, r3, #4
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	602a      	str	r2, [r5, #0]
 8010ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010adc:	2301      	movs	r3, #1
 8010ade:	e0a3      	b.n	8010c28 <_printf_i+0x1f4>
 8010ae0:	6820      	ldr	r0, [r4, #0]
 8010ae2:	6829      	ldr	r1, [r5, #0]
 8010ae4:	0606      	lsls	r6, r0, #24
 8010ae6:	f101 0304 	add.w	r3, r1, #4
 8010aea:	d50a      	bpl.n	8010b02 <_printf_i+0xce>
 8010aec:	680e      	ldr	r6, [r1, #0]
 8010aee:	602b      	str	r3, [r5, #0]
 8010af0:	2e00      	cmp	r6, #0
 8010af2:	da03      	bge.n	8010afc <_printf_i+0xc8>
 8010af4:	232d      	movs	r3, #45	; 0x2d
 8010af6:	4276      	negs	r6, r6
 8010af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010afc:	485e      	ldr	r0, [pc, #376]	; (8010c78 <_printf_i+0x244>)
 8010afe:	230a      	movs	r3, #10
 8010b00:	e019      	b.n	8010b36 <_printf_i+0x102>
 8010b02:	680e      	ldr	r6, [r1, #0]
 8010b04:	602b      	str	r3, [r5, #0]
 8010b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b0a:	bf18      	it	ne
 8010b0c:	b236      	sxthne	r6, r6
 8010b0e:	e7ef      	b.n	8010af0 <_printf_i+0xbc>
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	6820      	ldr	r0, [r4, #0]
 8010b14:	1d19      	adds	r1, r3, #4
 8010b16:	6029      	str	r1, [r5, #0]
 8010b18:	0601      	lsls	r1, r0, #24
 8010b1a:	d501      	bpl.n	8010b20 <_printf_i+0xec>
 8010b1c:	681e      	ldr	r6, [r3, #0]
 8010b1e:	e002      	b.n	8010b26 <_printf_i+0xf2>
 8010b20:	0646      	lsls	r6, r0, #25
 8010b22:	d5fb      	bpl.n	8010b1c <_printf_i+0xe8>
 8010b24:	881e      	ldrh	r6, [r3, #0]
 8010b26:	4854      	ldr	r0, [pc, #336]	; (8010c78 <_printf_i+0x244>)
 8010b28:	2f6f      	cmp	r7, #111	; 0x6f
 8010b2a:	bf0c      	ite	eq
 8010b2c:	2308      	moveq	r3, #8
 8010b2e:	230a      	movne	r3, #10
 8010b30:	2100      	movs	r1, #0
 8010b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b36:	6865      	ldr	r5, [r4, #4]
 8010b38:	60a5      	str	r5, [r4, #8]
 8010b3a:	2d00      	cmp	r5, #0
 8010b3c:	bfa2      	ittt	ge
 8010b3e:	6821      	ldrge	r1, [r4, #0]
 8010b40:	f021 0104 	bicge.w	r1, r1, #4
 8010b44:	6021      	strge	r1, [r4, #0]
 8010b46:	b90e      	cbnz	r6, 8010b4c <_printf_i+0x118>
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	d04d      	beq.n	8010be8 <_printf_i+0x1b4>
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b52:	fb03 6711 	mls	r7, r3, r1, r6
 8010b56:	5dc7      	ldrb	r7, [r0, r7]
 8010b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b5c:	4637      	mov	r7, r6
 8010b5e:	42bb      	cmp	r3, r7
 8010b60:	460e      	mov	r6, r1
 8010b62:	d9f4      	bls.n	8010b4e <_printf_i+0x11a>
 8010b64:	2b08      	cmp	r3, #8
 8010b66:	d10b      	bne.n	8010b80 <_printf_i+0x14c>
 8010b68:	6823      	ldr	r3, [r4, #0]
 8010b6a:	07de      	lsls	r6, r3, #31
 8010b6c:	d508      	bpl.n	8010b80 <_printf_i+0x14c>
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	6861      	ldr	r1, [r4, #4]
 8010b72:	4299      	cmp	r1, r3
 8010b74:	bfde      	ittt	le
 8010b76:	2330      	movle	r3, #48	; 0x30
 8010b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b80:	1b52      	subs	r2, r2, r5
 8010b82:	6122      	str	r2, [r4, #16]
 8010b84:	f8cd a000 	str.w	sl, [sp]
 8010b88:	464b      	mov	r3, r9
 8010b8a:	aa03      	add	r2, sp, #12
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	4640      	mov	r0, r8
 8010b90:	f7ff fee2 	bl	8010958 <_printf_common>
 8010b94:	3001      	adds	r0, #1
 8010b96:	d14c      	bne.n	8010c32 <_printf_i+0x1fe>
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9c:	b004      	add	sp, #16
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	4835      	ldr	r0, [pc, #212]	; (8010c78 <_printf_i+0x244>)
 8010ba4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	6823      	ldr	r3, [r4, #0]
 8010bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8010bb0:	6029      	str	r1, [r5, #0]
 8010bb2:	061d      	lsls	r5, r3, #24
 8010bb4:	d514      	bpl.n	8010be0 <_printf_i+0x1ac>
 8010bb6:	07df      	lsls	r7, r3, #31
 8010bb8:	bf44      	itt	mi
 8010bba:	f043 0320 	orrmi.w	r3, r3, #32
 8010bbe:	6023      	strmi	r3, [r4, #0]
 8010bc0:	b91e      	cbnz	r6, 8010bca <_printf_i+0x196>
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	f023 0320 	bic.w	r3, r3, #32
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	2310      	movs	r3, #16
 8010bcc:	e7b0      	b.n	8010b30 <_printf_i+0xfc>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	f043 0320 	orr.w	r3, r3, #32
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	2378      	movs	r3, #120	; 0x78
 8010bd8:	4828      	ldr	r0, [pc, #160]	; (8010c7c <_printf_i+0x248>)
 8010bda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bde:	e7e3      	b.n	8010ba8 <_printf_i+0x174>
 8010be0:	0659      	lsls	r1, r3, #25
 8010be2:	bf48      	it	mi
 8010be4:	b2b6      	uxthmi	r6, r6
 8010be6:	e7e6      	b.n	8010bb6 <_printf_i+0x182>
 8010be8:	4615      	mov	r5, r2
 8010bea:	e7bb      	b.n	8010b64 <_printf_i+0x130>
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	6826      	ldr	r6, [r4, #0]
 8010bf0:	6961      	ldr	r1, [r4, #20]
 8010bf2:	1d18      	adds	r0, r3, #4
 8010bf4:	6028      	str	r0, [r5, #0]
 8010bf6:	0635      	lsls	r5, r6, #24
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	d501      	bpl.n	8010c00 <_printf_i+0x1cc>
 8010bfc:	6019      	str	r1, [r3, #0]
 8010bfe:	e002      	b.n	8010c06 <_printf_i+0x1d2>
 8010c00:	0670      	lsls	r0, r6, #25
 8010c02:	d5fb      	bpl.n	8010bfc <_printf_i+0x1c8>
 8010c04:	8019      	strh	r1, [r3, #0]
 8010c06:	2300      	movs	r3, #0
 8010c08:	6123      	str	r3, [r4, #16]
 8010c0a:	4615      	mov	r5, r2
 8010c0c:	e7ba      	b.n	8010b84 <_printf_i+0x150>
 8010c0e:	682b      	ldr	r3, [r5, #0]
 8010c10:	1d1a      	adds	r2, r3, #4
 8010c12:	602a      	str	r2, [r5, #0]
 8010c14:	681d      	ldr	r5, [r3, #0]
 8010c16:	6862      	ldr	r2, [r4, #4]
 8010c18:	2100      	movs	r1, #0
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f7ef fb60 	bl	80002e0 <memchr>
 8010c20:	b108      	cbz	r0, 8010c26 <_printf_i+0x1f2>
 8010c22:	1b40      	subs	r0, r0, r5
 8010c24:	6060      	str	r0, [r4, #4]
 8010c26:	6863      	ldr	r3, [r4, #4]
 8010c28:	6123      	str	r3, [r4, #16]
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c30:	e7a8      	b.n	8010b84 <_printf_i+0x150>
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	462a      	mov	r2, r5
 8010c36:	4649      	mov	r1, r9
 8010c38:	4640      	mov	r0, r8
 8010c3a:	47d0      	blx	sl
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d0ab      	beq.n	8010b98 <_printf_i+0x164>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	079b      	lsls	r3, r3, #30
 8010c44:	d413      	bmi.n	8010c6e <_printf_i+0x23a>
 8010c46:	68e0      	ldr	r0, [r4, #12]
 8010c48:	9b03      	ldr	r3, [sp, #12]
 8010c4a:	4298      	cmp	r0, r3
 8010c4c:	bfb8      	it	lt
 8010c4e:	4618      	movlt	r0, r3
 8010c50:	e7a4      	b.n	8010b9c <_printf_i+0x168>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4632      	mov	r2, r6
 8010c56:	4649      	mov	r1, r9
 8010c58:	4640      	mov	r0, r8
 8010c5a:	47d0      	blx	sl
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d09b      	beq.n	8010b98 <_printf_i+0x164>
 8010c60:	3501      	adds	r5, #1
 8010c62:	68e3      	ldr	r3, [r4, #12]
 8010c64:	9903      	ldr	r1, [sp, #12]
 8010c66:	1a5b      	subs	r3, r3, r1
 8010c68:	42ab      	cmp	r3, r5
 8010c6a:	dcf2      	bgt.n	8010c52 <_printf_i+0x21e>
 8010c6c:	e7eb      	b.n	8010c46 <_printf_i+0x212>
 8010c6e:	2500      	movs	r5, #0
 8010c70:	f104 0619 	add.w	r6, r4, #25
 8010c74:	e7f5      	b.n	8010c62 <_printf_i+0x22e>
 8010c76:	bf00      	nop
 8010c78:	08012701 	.word	0x08012701
 8010c7c:	08012712 	.word	0x08012712

08010c80 <__retarget_lock_acquire_recursive>:
 8010c80:	4770      	bx	lr

08010c82 <__retarget_lock_release_recursive>:
 8010c82:	4770      	bx	lr

08010c84 <memcpy>:
 8010c84:	440a      	add	r2, r1
 8010c86:	4291      	cmp	r1, r2
 8010c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c8c:	d100      	bne.n	8010c90 <memcpy+0xc>
 8010c8e:	4770      	bx	lr
 8010c90:	b510      	push	{r4, lr}
 8010c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c9a:	4291      	cmp	r1, r2
 8010c9c:	d1f9      	bne.n	8010c92 <memcpy+0xe>
 8010c9e:	bd10      	pop	{r4, pc}

08010ca0 <memmove>:
 8010ca0:	4288      	cmp	r0, r1
 8010ca2:	b510      	push	{r4, lr}
 8010ca4:	eb01 0402 	add.w	r4, r1, r2
 8010ca8:	d902      	bls.n	8010cb0 <memmove+0x10>
 8010caa:	4284      	cmp	r4, r0
 8010cac:	4623      	mov	r3, r4
 8010cae:	d807      	bhi.n	8010cc0 <memmove+0x20>
 8010cb0:	1e43      	subs	r3, r0, #1
 8010cb2:	42a1      	cmp	r1, r4
 8010cb4:	d008      	beq.n	8010cc8 <memmove+0x28>
 8010cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cbe:	e7f8      	b.n	8010cb2 <memmove+0x12>
 8010cc0:	4402      	add	r2, r0
 8010cc2:	4601      	mov	r1, r0
 8010cc4:	428a      	cmp	r2, r1
 8010cc6:	d100      	bne.n	8010cca <memmove+0x2a>
 8010cc8:	bd10      	pop	{r4, pc}
 8010cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cd2:	e7f7      	b.n	8010cc4 <memmove+0x24>

08010cd4 <_realloc_r>:
 8010cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd8:	4680      	mov	r8, r0
 8010cda:	4614      	mov	r4, r2
 8010cdc:	460e      	mov	r6, r1
 8010cde:	b921      	cbnz	r1, 8010cea <_realloc_r+0x16>
 8010ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce4:	4611      	mov	r1, r2
 8010ce6:	f7ff bc2b 	b.w	8010540 <_malloc_r>
 8010cea:	b92a      	cbnz	r2, 8010cf8 <_realloc_r+0x24>
 8010cec:	f7ff fbbc 	bl	8010468 <_free_r>
 8010cf0:	4625      	mov	r5, r4
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf8:	f000 f81b 	bl	8010d32 <_malloc_usable_size_r>
 8010cfc:	4284      	cmp	r4, r0
 8010cfe:	4607      	mov	r7, r0
 8010d00:	d802      	bhi.n	8010d08 <_realloc_r+0x34>
 8010d02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d06:	d812      	bhi.n	8010d2e <_realloc_r+0x5a>
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4640      	mov	r0, r8
 8010d0c:	f7ff fc18 	bl	8010540 <_malloc_r>
 8010d10:	4605      	mov	r5, r0
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d0ed      	beq.n	8010cf2 <_realloc_r+0x1e>
 8010d16:	42bc      	cmp	r4, r7
 8010d18:	4622      	mov	r2, r4
 8010d1a:	4631      	mov	r1, r6
 8010d1c:	bf28      	it	cs
 8010d1e:	463a      	movcs	r2, r7
 8010d20:	f7ff ffb0 	bl	8010c84 <memcpy>
 8010d24:	4631      	mov	r1, r6
 8010d26:	4640      	mov	r0, r8
 8010d28:	f7ff fb9e 	bl	8010468 <_free_r>
 8010d2c:	e7e1      	b.n	8010cf2 <_realloc_r+0x1e>
 8010d2e:	4635      	mov	r5, r6
 8010d30:	e7df      	b.n	8010cf2 <_realloc_r+0x1e>

08010d32 <_malloc_usable_size_r>:
 8010d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d36:	1f18      	subs	r0, r3, #4
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bfbc      	itt	lt
 8010d3c:	580b      	ldrlt	r3, [r1, r0]
 8010d3e:	18c0      	addlt	r0, r0, r3
 8010d40:	4770      	bx	lr
	...

08010d44 <_init>:
 8010d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d46:	bf00      	nop
 8010d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d4a:	bc08      	pop	{r3}
 8010d4c:	469e      	mov	lr, r3
 8010d4e:	4770      	bx	lr

08010d50 <_fini>:
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d52:	bf00      	nop
 8010d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d56:	bc08      	pop	{r3}
 8010d58:	469e      	mov	lr, r3
 8010d5a:	4770      	bx	lr
