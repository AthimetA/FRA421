
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d44  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008014  08008014  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800801c  0800801c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800801c  0800801c  0001801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08008034  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08008094  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000758  240000d0  080080f4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000828  080080f4  00020828  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dd2c  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031a6  00000000  00000000  0003de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001340  00000000  00000000  00040fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001228  00000000  00000000  00042310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c5d8  00000000  00000000  00043538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a63c  00000000  00000000  0007fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187301  00000000  00000000  0009a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0022144d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000051e8  00000000  00000000  002214a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007fc4 	.word	0x08007fc4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007fc4 	.word	0x08007fc4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <Write_MFRC522+0x5c>)
 800072e:	f002 f9b9 	bl	8002aa4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8000732:	f107 010f 	add.w	r1, r7, #15
 8000736:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800073a:	2201      	movs	r2, #1
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <Write_MFRC522+0x60>)
 800073e:	f004 ffed 	bl	800571c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_PORT, &val, 1, 500);
 8000742:	1db9      	adds	r1, r7, #6
 8000744:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000748:	2201      	movs	r2, #1
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <Write_MFRC522+0x60>)
 800074c:	f004 ffe6 	bl	800571c <HAL_SPI_Transmit>

  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
//  volatile uint32_t ticks;
//  for(ticks=0; ticks < 1000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <Write_MFRC522+0x5c>)
 8000758:	f002 f9a4 	bl	8002aa4 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58020c00 	.word	0x58020c00
 8000768:	240001d4 	.word	0x240001d4

0800076c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000780:	b25b      	sxtb	r3, r3
 8000782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000786:	b25b      	sxtb	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <Read_MFRC522+0x64>)
 8000794:	f002 f986 	bl	8002aa4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8000798:	f107 010e 	add.w	r1, r7, #14
 800079c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a0:	2201      	movs	r2, #1
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Read_MFRC522+0x68>)
 80007a4:	f004 ffba 	bl	800571c <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_PORT, &rx_bits, 1, 500);
 80007a8:	f107 010f 	add.w	r1, r7, #15
 80007ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b0:	2201      	movs	r2, #1
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <Read_MFRC522+0x68>)
 80007b4:	f005 f9a4 	bl	8005b00 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
//   volatile uint32_t ticks;
//   for(ticks=0; ticks < 1000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <Read_MFRC522+0x64>)
 80007c0:	f002 f970 	bl	8002aa4 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58020c00 	.word	0x58020c00
 80007d4:	240001d4 	.word	0x240001d4

080007d8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffbe 	bl	800076c <Read_MFRC522>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff81 	bl	8000708 <Write_MFRC522>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	460a      	mov	r2, r1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffa3 	bl	800076c <Read_MFRC522>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800082a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800082e:	43db      	mvns	r3, r3
 8000830:	b25a      	sxtb	r2, r3
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4013      	ands	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff61 	bl	8000708 <Write_MFRC522>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000852:	2103      	movs	r1, #3
 8000854:	2014      	movs	r0, #20
 8000856:	f7ff ffbf 	bl	80007d8 <SetBitMask>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000862:	210f      	movs	r1, #15
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ff4f 	bl	8000708 <Write_MFRC522>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <MFRC522_Init+0xa4>)
 800087c:	f002 f912 	bl	8002aa4 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 8000880:	f7ff ffed 	bl	800085e <MFRC522_Reset>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4822      	ldr	r0, [pc, #136]	; (8000914 <MFRC522_Init+0xa4>)
 800088c:	f002 f90a 	bl	8002aa4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	481f      	ldr	r0, [pc, #124]	; (8000914 <MFRC522_Init+0xa4>)
 8000898:	f002 f904 	bl	8002aa4 <HAL_GPIO_WritePin>
  Write_MFRC522(CommIEnReg, 0x7F);
 800089c:	217f      	movs	r1, #127	; 0x7f
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff32 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(DivlEnReg, 0x94);
 80008a4:	2194      	movs	r1, #148	; 0x94
 80008a6:	2003      	movs	r0, #3
 80008a8:	f7ff ff2e 	bl	8000708 <Write_MFRC522>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <MFRC522_Init+0xa4>)
 80008b4:	f002 f8f6 	bl	8002aa4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <MFRC522_Init+0xa4>)
 80008c0:	f002 f8f0 	bl	8002aa4 <HAL_GPIO_WritePin>
  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	202a      	movs	r0, #42	; 0x2a
 80008c8:	f7ff ff1e 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 80008cc:	21a9      	movs	r1, #169	; 0xa9
 80008ce:	202b      	movs	r0, #43	; 0x2b
 80008d0:	f7ff ff1a 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 80008d4:	2103      	movs	r1, #3
 80008d6:	202d      	movs	r0, #45	; 0x2d
 80008d8:	f7ff ff16 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 80008dc:	21e8      	movs	r1, #232	; 0xe8
 80008de:	202c      	movs	r0, #44	; 0x2c
 80008e0:	f7ff ff12 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	2015      	movs	r0, #21
 80008e8:	f7ff ff0e 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80008ec:	213d      	movs	r1, #61	; 0x3d
 80008ee:	2011      	movs	r0, #17
 80008f0:	f7ff ff0a 	bl	8000708 <Write_MFRC522>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MFRC522_Init+0xa4>)
 80008fc:	f002 f8d2 	bl	8002aa4 <HAL_GPIO_WritePin>
//   Write_MFRC522(CommIEnReg, 0xFF);
//   Write_MFRC522(DivlEnReg, 0xFF);


  // turn antenna on
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <MFRC522_Init+0xa4>)
 8000908:	f002 f8cc 	bl	8002aa4 <HAL_GPIO_WritePin>
  AntennaOn();
 800090c:	f7ff ff9f 	bl	800084e <AntennaOn>
//  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58021800 	.word	0x58021800

08000918 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af02      	add	r7, sp, #8
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8000924:	2107      	movs	r1, #7
 8000926:	200d      	movs	r0, #13
 8000928:	f7ff feee 	bl	8000708 <Write_MFRC522>

  TagType[0] = reqMode;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2201      	movs	r2, #1
 800093c:	6839      	ldr	r1, [r7, #0]
 800093e:	200c      	movs	r0, #12
 8000940:	f000 f80f 	bl	8000962 <MFRC522_ToCard>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <MFRC522_Request+0x3c>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b10      	cmp	r3, #16
 8000952:	d001      	beq.n	8000958 <MFRC522_Request+0x40>
    status = MI_ERR;
 8000954:	2302      	movs	r3, #2
 8000956:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000962:	b590      	push	{r4, r7, lr}
 8000964:	b089      	sub	sp, #36	; 0x24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	4613      	mov	r3, r2
 8000972:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8000974:	2302      	movs	r3, #2
 8000976:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	d006      	beq.n	8000994 <MFRC522_ToCard+0x32>
 8000986:	2b0e      	cmp	r3, #14
 8000988:	d109      	bne.n	800099e <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 800098a:	2312      	movs	r3, #18
 800098c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800098e:	2310      	movs	r3, #16
 8000990:	777b      	strb	r3, [r7, #29]
        break;
 8000992:	e005      	b.n	80009a0 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8000994:	2377      	movs	r3, #119	; 0x77
 8000996:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8000998:	2330      	movs	r3, #48	; 0x30
 800099a:	777b      	strb	r3, [r7, #29]
        break;
 800099c:	e000      	b.n	80009a0 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800099e:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff feac 	bl	8000708 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	2004      	movs	r0, #4
 80009b4:	f7ff ff2b 	bl	800080e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	200a      	movs	r0, #10
 80009bc:	f7ff ff0c 	bl	80007d8 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fea0 	bl	8000708 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	e00a      	b.n	80009e4 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2009      	movs	r0, #9
 80009da:	f7ff fe95 	bl	8000708 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d3f0      	bcc.n	80009ce <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4619      	mov	r1, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fe89 	bl	8000708 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b0c      	cmp	r3, #12
 80009fa:	d103      	bne.n	8000a04 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	200d      	movs	r0, #13
 8000a00:	f7ff feea 	bl	80007d8 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a08:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f7ff feae 	bl	800076c <Read_MFRC522>
 8000a10:	4603      	mov	r3, r0
 8000a12:	773b      	strb	r3, [r7, #28]
    i--;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00a      	beq.n	8000a36 <MFRC522_ToCard+0xd4>
 8000a20:	7f3b      	ldrb	r3, [r7, #28]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <MFRC522_ToCard+0xd4>
 8000a2a:	7f3a      	ldrb	r2, [r7, #28]
 8000a2c:	7f7b      	ldrb	r3, [r7, #29]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0e9      	beq.n	8000a0a <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	200d      	movs	r0, #13
 8000a3a:	f7ff fee8 	bl	800080e <ClearBitMask>

  if (i != 0)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d052      	beq.n	8000aea <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8000a44:	2006      	movs	r0, #6
 8000a46:	f7ff fe91 	bl	800076c <Read_MFRC522>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f003 031b 	and.w	r3, r3, #27
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d148      	bne.n	8000ae6 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8000a58:	7f3a      	ldrb	r2, [r7, #28]
 8000a5a:	7fbb      	ldrb	r3, [r7, #30]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8000a68:	2301      	movs	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b0c      	cmp	r3, #12
 8000a70:	d13b      	bne.n	8000aea <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f7ff fe7a 	bl	800076c <Read_MFRC522>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe75 	bl	800076c <Read_MFRC522>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8000a90:	7f3b      	ldrb	r3, [r7, #28]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	00da      	lsls	r2, r3, #3
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	4413      	add	r3, r2
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e004      	b.n	8000aac <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8000aa2:	7f3b      	ldrb	r3, [r7, #28]
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aaa:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8000aac:	7f3b      	ldrb	r3, [r7, #28]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <MFRC522_ToCard+0x154>
        {
          n = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8000ab6:	7f3b      	ldrb	r3, [r7, #28]
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d901      	bls.n	8000ac0 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8000abc:	2310      	movs	r3, #16
 8000abe:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	e00a      	b.n	8000adc <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	18d4      	adds	r4, r2, r3
 8000acc:	2009      	movs	r0, #9
 8000ace:	f7ff fe4d 	bl	800076c <Read_MFRC522>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	7f3b      	ldrb	r3, [r7, #28]
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f0      	bcc.n	8000ac6 <MFRC522_ToCard+0x164>
 8000ae4:	e001      	b.n	8000aea <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3724      	adds	r7, #36	; 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b00:	bf00      	nop
 8000b02:	4b55      	ldr	r3, [pc, #340]	; (8000c58 <main+0x164>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <main+0x24>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	60fa      	str	r2, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dcf4      	bgt.n	8000b02 <main+0xe>
  if ( timeout < 0 )
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da01      	bge.n	8000b22 <main+0x2e>
  {
  Error_Handler();
 8000b1e:	f000 fb43 	bl	80011a8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fdbf 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f8ab 	bl	8000c80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b2a:	f000 f92d 	bl	8000d88 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b2e:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <main+0x164>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <main+0x164>)
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <main+0x164>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 ffdd 	bl	8002b0c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f001 fff3 	bl	8002b40 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b60:	bf00      	nop
 8000b62:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <main+0x164>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d104      	bne.n	8000b78 <main+0x84>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dcf4      	bgt.n	8000b62 <main+0x6e>
if ( timeout < 0 )
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da01      	bge.n	8000b82 <main+0x8e>
{
Error_Handler();
 8000b7e:	f000 fb13 	bl	80011a8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 fa53 	bl	800102c <MX_GPIO_Init>
  MX_ETH_Init();
 8000b86:	f000 f931 	bl	8000dec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b8a:	f000 f9d1 	bl	8000f30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b8e:	f000 fa1b 	bl	8000fc8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000b92:	f000 f977 	bl	8000e84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Reset RC522
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4830      	ldr	r0, [pc, #192]	; (8000c5c <main+0x168>)
 8000b9c:	f001 ff82 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	482e      	ldr	r0, [pc, #184]	; (8000c60 <main+0x16c>)
 8000ba8:	f001 ff7c 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	482c      	ldr	r0, [pc, #176]	; (8000c64 <main+0x170>)
 8000bb4:	f001 ff76 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fe05 	bl	80017c8 <HAL_Delay>
  MFRC522_Init();
 8000bbe:	f7ff fe57 	bl	8000870 <MFRC522_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      if(HAL_GetTick() - timemsM7 > 1000)
 8000bc2:	f000 fdf5 	bl	80017b0 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <main+0x174>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bd2:	d92d      	bls.n	8000c30 <main+0x13c>
      {
          timemsM7 = HAL_GetTick();
 8000bd4:	f000 fdec 	bl	80017b0 <HAL_GetTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <main+0x174>)
 8000bdc:	6013      	str	r3, [r2, #0]

    	  if(hspi1.State == HAL_SPI_STATE_READY)
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <main+0x178>)
 8000be0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d122      	bne.n	8000c30 <main+0x13c>
    	  {

    		  tsest+=1;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <main+0x17c>)
 8000bec:	edd3 7a00 	vldr	s15, [r3]
 8000bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <main+0x17c>)
 8000bfa:	edc3 7a00 	vstr	s15, [r3]
//    		  HAL_SPI_Transmit(&MFRC522_PORT, &test_bits, 1, 500);
//    		  testDataM7 = 0x0F;
//    		  HAL_SPI_Transmit(&MFRC522_PORT, &testDataM7, 1, 500);
//    		  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);

    		  for (int i = 0; i < 16; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	e007      	b.n	8000c14 <main+0x120>
    		  {
    			  cardstr[i] = 0;
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <main+0x180>)
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4413      	add	r3, r2
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
    		  for (int i = 0; i < 16; i++)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	ddf4      	ble.n	8000c04 <main+0x110>
    		  }
    		  status = 99;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <main+0x184>)
 8000c1c:	2263      	movs	r2, #99	; 0x63
 8000c1e:	701a      	strb	r2, [r3, #0]
    		  // Find cards
    		  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8000c20:	4914      	ldr	r1, [pc, #80]	; (8000c74 <main+0x180>)
 8000c22:	2026      	movs	r0, #38	; 0x26
 8000c24:	f7ff fe78 	bl	8000918 <MFRC522_Request>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <main+0x184>)
 8000c2e:	701a      	strb	r2, [r3, #0]

    	  }

      }

      if(HAL_GetTick() - timemsM7_LED > 1000)
 8000c30:	f000 fdbe 	bl	80017b0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <main+0x188>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c40:	d9bf      	bls.n	8000bc2 <main+0xce>
      {
    	  timemsM7_LED = HAL_GetTick();
 8000c42:	f000 fdb5 	bl	80017b0 <HAL_GetTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <main+0x188>)
 8000c4a:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <main+0x168>)
 8000c52:	f001 ff40 	bl	8002ad6 <HAL_GPIO_TogglePin>
      if(HAL_GetTick() - timemsM7 > 1000)
 8000c56:	e7b4      	b.n	8000bc2 <main+0xce>
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	58020400 	.word	0x58020400
 8000c60:	58020c00 	.word	0x58020c00
 8000c64:	58021800 	.word	0x58021800
 8000c68:	240007f8 	.word	0x240007f8
 8000c6c:	240001d4 	.word	0x240001d4
 8000c70:	24000800 	.word	0x24000800
 8000c74:	24000808 	.word	0x24000808
 8000c78:	24000804 	.word	0x24000804
 8000c7c:	240007fc 	.word	0x240007fc

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f007 f990 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f007 f98a 	bl	8007fb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ca0:	2004      	movs	r0, #4
 8000ca2:	f002 f8a9 	bl	8002df8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <SystemClock_Config+0x100>)
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <SystemClock_Config+0x100>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <SystemClock_Config+0x100>)
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd8:	bf00      	nop
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <SystemClock_Config+0xfc>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce6:	d1f8      	bne.n	8000cda <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <SystemClock_Config+0x104>)
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <SystemClock_Config+0x104>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cfc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d0e:	2378      	movs	r3, #120	; 0x78
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f8cc 	bl	8002ecc <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d3a:	f000 fa35 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	; 0x3f
 8000d40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fcdf 	bl	8003728 <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d70:	f000 fa1a 	bl	80011a8 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3770      	adds	r7, #112	; 0x70
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58024800 	.word	0x58024800
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024400 	.word	0x58024400

08000d88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b0      	sub	sp, #192	; 0xc0
 8000d8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	22bc      	movs	r2, #188	; 0xbc
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f007 f90d 	bl	8007fb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI1;
 8000d9a:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000d9e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000da4:	2318      	movs	r3, #24
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000dac:	2304      	movs	r3, #4
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000db4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 f834 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000dde:	f000 f9e3 	bl	80011a8 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	37c0      	adds	r7, #192	; 0xc0
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ETH_Init+0x80>)
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <MX_ETH_Init+0x84>)
 8000df4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_ETH_Init+0x88>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_ETH_Init+0x88>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_ETH_Init+0x88>)
 8000e04:	22e1      	movs	r2, #225	; 0xe1
 8000e06:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_ETH_Init+0x88>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_ETH_Init+0x88>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_ETH_Init+0x88>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e1c:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_ETH_Init+0x88>)
 8000e1e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <MX_ETH_Init+0x8c>)
 8000e2a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <MX_ETH_Init+0x90>)
 8000e30:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e38:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_ETH_Init+0x80>)
 8000e3c:	f001 f85e 	bl	8001efc <HAL_ETH_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e46:	f000 f9af 	bl	80011a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e4a:	2238      	movs	r2, #56	; 0x38
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_ETH_Init+0x94>)
 8000e50:	f007 f8b0 	bl	8007fb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_ETH_Init+0x94>)
 8000e56:	2221      	movs	r2, #33	; 0x21
 8000e58:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_ETH_Init+0x94>)
 8000e5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e60:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_ETH_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000124 	.word	0x24000124
 8000e70:	40028000 	.word	0x40028000
 8000e74:	2400081c 	.word	0x2400081c
 8000e78:	24000070 	.word	0x24000070
 8000e7c:	24000010 	.word	0x24000010
 8000e80:	240000ec 	.word	0x240000ec

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_SPI1_Init+0xa8>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eb8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f16:	f004 fafb 	bl	8005510 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f20:	f000 f942 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	240001d4 	.word	0x240001d4
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <MX_USART3_UART_Init+0x94>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f7a:	f005 fc7c 	bl	8006876 <HAL_UART_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f84:	f000 f910 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f8c:	f006 fc1a 	bl	80077c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f96:	f000 f907 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f006 fc4f 	bl	8007840 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa8:	f000 f8fe 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000fae:	f006 fbd0 	bl	8007752 <HAL_UARTEx_DisableFifoMode>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f8f6 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400025c 	.word	0x2400025c
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd4:	2209      	movs	r2, #9
 8000fd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001004:	2201      	movs	r2, #1
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001010:	f001 fdaa 	bl	8002b68 <HAL_PCD_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800101a:	f000 f8c5 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	240002ec 	.word	0x240002ec
 8001028:	40080000 	.word	0x40080000

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a53      	ldr	r2, [pc, #332]	; (8001198 <MX_GPIO_Init+0x16c>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b51      	ldr	r3, [pc, #324]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b46      	ldr	r3, [pc, #280]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a44      	ldr	r2, [pc, #272]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <MX_GPIO_Init+0x16c>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a3d      	ldr	r2, [pc, #244]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|RC522_Rst_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f244 0120 	movw	r1, #16416	; 0x4020
 80010fc:	4827      	ldr	r0, [pc, #156]	; (800119c <MX_GPIO_Init+0x170>)
 80010fe:	f001 fcd1 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8001108:	4825      	ldr	r0, [pc, #148]	; (80011a0 <MX_GPIO_Init+0x174>)
 800110a:	f001 fccb 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_Sig_GPIO_Port, Test_Sig_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <MX_GPIO_Init+0x178>)
 8001116:	f001 fcc5 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin RC522_Rst_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|RC522_Rst_Pin;
 800111a:	f244 0320 	movw	r3, #16416	; 0x4020
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <MX_GPIO_Init+0x170>)
 8001134:	f001 fb06 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|RC522_CS_Pin;
 8001138:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001152:	f001 faf7 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_GPIO_Init+0x178>)
 800116c:	f001 faea 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Sig_Pin */
  GPIO_InitStruct.Pin = Test_Sig_Pin;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_Sig_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_GPIO_Init+0x178>)
 800118a:	f001 fadb 	bl	8002744 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	58024400 	.word	0x58024400
 800119c:	58020400 	.word	0x58020400
 80011a0:	58020c00 	.word	0x58020c00
 80011a4:	58021800 	.word	0x58021800

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x30>)
 80011bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_MspInit+0x30>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a59      	ldr	r2, [pc, #356]	; (800136c <HAL_ETH_MspInit+0x184>)
 8001206:	4293      	cmp	r3, r2
 8001208:	f040 80ab 	bne.w	8001362 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800120e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001212:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001218:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800121c:	4b54      	ldr	r3, [pc, #336]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800121e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800122a:	4b51      	ldr	r3, [pc, #324]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800122c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001236:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800123c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800124a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800124e:	4a48      	ldr	r2, [pc, #288]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800125a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a40      	ldr	r2, [pc, #256]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a39      	ldr	r2, [pc, #228]	; (8001370 <HAL_ETH_MspInit+0x188>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_ETH_MspInit+0x188>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_ETH_MspInit+0x188>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012de:	2332      	movs	r3, #50	; 0x32
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ee:	230b      	movs	r3, #11
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	481e      	ldr	r0, [pc, #120]	; (8001374 <HAL_ETH_MspInit+0x18c>)
 80012fa:	f001 fa23 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012fe:	2386      	movs	r3, #134	; 0x86
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130e:	230b      	movs	r3, #11
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <HAL_ETH_MspInit+0x190>)
 800131a:	f001 fa13 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001330:	230b      	movs	r3, #11
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4810      	ldr	r0, [pc, #64]	; (800137c <HAL_ETH_MspInit+0x194>)
 800133c:	f001 fa02 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001340:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001352:	230b      	movs	r3, #11
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <HAL_ETH_MspInit+0x198>)
 800135e:	f001 f9f1 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40028000 	.word	0x40028000
 8001370:	58024400 	.word	0x58024400
 8001374:	58020800 	.word	0x58020800
 8001378:	58020000 	.word	0x58020000
 800137c:	58020400 	.word	0x58020400
 8001380:	58021800 	.word	0x58021800

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d154      	bne.n	8001450 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001400:	2370      	movs	r3, #112	; 0x70
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001410:	2305      	movs	r3, #5
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 800141c:	f001 f992 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001430:	2305      	movs	r3, #5
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <HAL_SPI_MspInit+0xe0>)
 800143c:	f001 f982 	bl	8002744 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2023      	movs	r0, #35	; 0x23
 8001446:	f000 fade 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800144a:	2023      	movs	r0, #35	; 0x23
 800144c:	f000 faf5 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013000 	.word	0x40013000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020c00 	.word	0x58020c00

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0b8      	sub	sp, #224	; 0xe0
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	22bc      	movs	r2, #188	; 0xbc
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f006 fd93 	bl	8007fb4 <memset>
  if(huart->Instance==USART3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_UART_MspInit+0xc0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d142      	bne.n	800151e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fcca 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014b2:	f7ff fe79 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0xc4>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800150c:	2307      	movs	r3, #7
 800150e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_UART_MspInit+0xc8>)
 800151a:	f001 f913 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	37e0      	adds	r7, #224	; 0xe0
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40004800 	.word	0x40004800
 800152c:	58024400 	.word	0x58024400
 8001530:	58020c00 	.word	0x58020c00

08001534 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_PCD_MspInit+0xa8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d13d      	bne.n	80015d2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001556:	f001 fca9 	bl	8002eac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001578:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800158a:	230a      	movs	r3, #10
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <HAL_PCD_MspInit+0xb0>)
 8001596:	f001 f8d5 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <HAL_PCD_MspInit+0xb0>)
 80015b0:	f001 f8c8 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 80015b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 80015bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_PCD_MspInit+0xac>)
 80015c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40080000 	.word	0x40080000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58020000 	.word	0x58020000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f8a8 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <SPI1_IRQHandler+0x10>)
 8001642:	f004 fe21 	bl	8006288 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	240001d4 	.word	0x240001d4

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001654:	f7fe ffc2 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f006 fc75 	bl	8007f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fa37 	bl	8000af4 <main>
  bx  lr
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800168c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001690:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001694:	08008024 	.word	0x08008024
  ldr r2, =_sbss
 8001698:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800169c:	24000828 	.word	0x24000828

080016a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC3_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f9a0 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b0:	f002 f9f0 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_Init+0x68>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4913      	ldr	r1, [pc, #76]	; (8001710 <HAL_Init+0x6c>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_Init+0x6c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_Init+0x70>)
 80016e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x74>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f814 	bl	800171c <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e002      	b.n	8001704 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fe:	f7ff fd59 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58024400 	.word	0x58024400
 8001710:	08007fdc 	.word	0x08007fdc
 8001714:	24000004 	.word	0x24000004
 8001718:	24000000 	.word	0x24000000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e021      	b.n	8001774 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_InitTick+0x64>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_InitTick+0x60>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f985 	bl	8001a56 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f94f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x68>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2400000c 	.word	0x2400000c
 8001780:	24000000 	.word	0x24000000
 8001784:	24000008 	.word	0x24000008

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24000824 	.word	0x24000824

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	24000824 	.word	0x24000824

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2400000c 	.word	0x2400000c

08001810 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetREVID+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5c001000 	.word	0x5c001000

08001828 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff40 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa4 	bl	80019ac <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e237      	b.n	8001ef2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e22c      	b.n	8001ef2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5c      	ldr	r2, [pc, #368]	; (8001c10 <HAL_DMA_Abort_IT+0x1a0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d04a      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <HAL_DMA_Abort_IT+0x1a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d045      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <HAL_DMA_Abort_IT+0x1a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d040      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_DMA_Abort_IT+0x1ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d03b      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_DMA_Abort_IT+0x1b0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d036      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a55      	ldr	r2, [pc, #340]	; (8001c24 <HAL_DMA_Abort_IT+0x1b4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d031      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_DMA_Abort_IT+0x1b8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d02c      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_DMA_Abort_IT+0x1bc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d027      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_DMA_Abort_IT+0x1c0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d022      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <HAL_DMA_Abort_IT+0x1c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d01d      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_DMA_Abort_IT+0x1c8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d018      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_DMA_Abort_IT+0x1cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_DMA_Abort_IT+0x1d0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00e      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_DMA_Abort_IT+0x1d4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_DMA_Abort_IT+0x1d8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_DMA_Abort_IT+0x1dc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Abort_IT+0xcc>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_DMA_Abort_IT+0xce>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8086 	beq.w	8001c50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_DMA_Abort_IT+0x1a0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d04a      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <HAL_DMA_Abort_IT+0x1a4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d045      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <HAL_DMA_Abort_IT+0x1a8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d040      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_DMA_Abort_IT+0x1ac>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d03b      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_DMA_Abort_IT+0x1b0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d036      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <HAL_DMA_Abort_IT+0x1b4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_DMA_Abort_IT+0x1b8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02c      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <HAL_DMA_Abort_IT+0x1bc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d027      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <HAL_DMA_Abort_IT+0x1c0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d022      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_DMA_Abort_IT+0x1c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01d      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <HAL_DMA_Abort_IT+0x1c8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d018      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_DMA_Abort_IT+0x1cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_DMA_Abort_IT+0x1d0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_DMA_Abort_IT+0x1d4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <HAL_DMA_Abort_IT+0x1d8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0x17c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_DMA_Abort_IT+0x1dc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d108      	bne.n	8001bfe <HAL_DMA_Abort_IT+0x18e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e178      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x480>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e16f      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x480>
 8001c10:	40020010 	.word	0x40020010
 8001c14:	40020028 	.word	0x40020028
 8001c18:	40020040 	.word	0x40020040
 8001c1c:	40020058 	.word	0x40020058
 8001c20:	40020070 	.word	0x40020070
 8001c24:	40020088 	.word	0x40020088
 8001c28:	400200a0 	.word	0x400200a0
 8001c2c:	400200b8 	.word	0x400200b8
 8001c30:	40020410 	.word	0x40020410
 8001c34:	40020428 	.word	0x40020428
 8001c38:	40020440 	.word	0x40020440
 8001c3c:	40020458 	.word	0x40020458
 8001c40:	40020470 	.word	0x40020470
 8001c44:	40020488 	.word	0x40020488
 8001c48:	400204a0 	.word	0x400204a0
 8001c4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 020e 	bic.w	r2, r2, #14
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6c      	ldr	r2, [pc, #432]	; (8001e18 <HAL_DMA_Abort_IT+0x3a8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d04a      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6b      	ldr	r2, [pc, #428]	; (8001e1c <HAL_DMA_Abort_IT+0x3ac>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d045      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a69      	ldr	r2, [pc, #420]	; (8001e20 <HAL_DMA_Abort_IT+0x3b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d040      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <HAL_DMA_Abort_IT+0x3b4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d03b      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a66      	ldr	r2, [pc, #408]	; (8001e28 <HAL_DMA_Abort_IT+0x3b8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d036      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_DMA_Abort_IT+0x3bc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d031      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a63      	ldr	r2, [pc, #396]	; (8001e30 <HAL_DMA_Abort_IT+0x3c0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02c      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a62      	ldr	r2, [pc, #392]	; (8001e34 <HAL_DMA_Abort_IT+0x3c4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d027      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a60      	ldr	r2, [pc, #384]	; (8001e38 <HAL_DMA_Abort_IT+0x3c8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5f      	ldr	r2, [pc, #380]	; (8001e3c <HAL_DMA_Abort_IT+0x3cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d01d      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_DMA_Abort_IT+0x3d0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a5c      	ldr	r2, [pc, #368]	; (8001e44 <HAL_DMA_Abort_IT+0x3d4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_DMA_Abort_IT+0x3d8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a59      	ldr	r2, [pc, #356]	; (8001e4c <HAL_DMA_Abort_IT+0x3dc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_DMA_Abort_IT+0x3e0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x290>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_DMA_Abort_IT+0x3e4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d108      	bne.n	8001d12 <HAL_DMA_Abort_IT+0x2a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e007      	b.n	8001d22 <HAL_DMA_Abort_IT+0x2b2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_DMA_Abort_IT+0x3a8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d072      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3a      	ldr	r2, [pc, #232]	; (8001e1c <HAL_DMA_Abort_IT+0x3ac>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d06d      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a39      	ldr	r2, [pc, #228]	; (8001e20 <HAL_DMA_Abort_IT+0x3b0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d068      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_DMA_Abort_IT+0x3b4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d063      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_DMA_Abort_IT+0x3b8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_DMA_Abort_IT+0x3bc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d059      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_DMA_Abort_IT+0x3c0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d054      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_DMA_Abort_IT+0x3c4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04f      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DMA_Abort_IT+0x3c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04a      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_DMA_Abort_IT+0x3cc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d045      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_DMA_Abort_IT+0x3d0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d040      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_DMA_Abort_IT+0x3d4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d03b      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_DMA_Abort_IT+0x3d8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d036      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Abort_IT+0x3dc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_DMA_Abort_IT+0x3e0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d02c      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_Abort_IT+0x3e4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d027      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_DMA_Abort_IT+0x3e8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_Abort_IT+0x3ec>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_DMA_Abort_IT+0x3f0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_DMA_Abort_IT+0x3f4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_DMA_Abort_IT+0x3f8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_DMA_Abort_IT+0x3fc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_DMA_Abort_IT+0x400>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x3a2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_DMA_Abort_IT+0x404>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d132      	bne.n	8001e78 <HAL_DMA_Abort_IT+0x408>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e031      	b.n	8001e7a <HAL_DMA_Abort_IT+0x40a>
 8001e16:	bf00      	nop
 8001e18:	40020010 	.word	0x40020010
 8001e1c:	40020028 	.word	0x40020028
 8001e20:	40020040 	.word	0x40020040
 8001e24:	40020058 	.word	0x40020058
 8001e28:	40020070 	.word	0x40020070
 8001e2c:	40020088 	.word	0x40020088
 8001e30:	400200a0 	.word	0x400200a0
 8001e34:	400200b8 	.word	0x400200b8
 8001e38:	40020410 	.word	0x40020410
 8001e3c:	40020428 	.word	0x40020428
 8001e40:	40020440 	.word	0x40020440
 8001e44:	40020458 	.word	0x40020458
 8001e48:	40020470 	.word	0x40020470
 8001e4c:	40020488 	.word	0x40020488
 8001e50:	400204a0 	.word	0x400204a0
 8001e54:	400204b8 	.word	0x400204b8
 8001e58:	58025408 	.word	0x58025408
 8001e5c:	5802541c 	.word	0x5802541c
 8001e60:	58025430 	.word	0x58025430
 8001e64:	58025444 	.word	0x58025444
 8001e68:	58025458 	.word	0x58025458
 8001e6c:	5802546c 	.word	0x5802546c
 8001e70:	58025480 	.word	0x58025480
 8001e74:	58025494 	.word	0x58025494
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d028      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ece:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0cf      	b.n	80020ae <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2223      	movs	r2, #35	; 0x23
 8001f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff f961 	bl	80011e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_ETH_Init+0x1bc>)
 8001f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f2c:	4a62      	ldr	r2, [pc, #392]	; (80020b8 <HAL_ETH_Init+0x1bc>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f36:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <HAL_ETH_Init+0x1bc>)
 8001f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7a1b      	ldrb	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fc6b 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f52:	e003      	b.n	8001f5c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f58:	f7ff fc66 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_ETH_Init+0x1c0>)
 8001f5e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f78:	f7ff fc1a 	bl	80017b0 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f7e:	e011      	b.n	8001fa4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f80:	f7ff fc16 	bl	80017b0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8e:	d909      	bls.n	8001fa4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	22e0      	movs	r2, #224	; 0xe0
 8001f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e084      	b.n	80020ae <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e4      	bne.n	8001f80 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f886 	bl	80020c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fbc:	f001 fee4 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_ETH_Init+0x1c4>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	0c9a      	lsrs	r2, r3, #18
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fa71 	bl	80024bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001fe6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ff6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	22e0      	movs	r2, #224	; 0xe0
 8002012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e049      	b.n	80020ae <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002022:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_ETH_Init+0x1c8>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6952      	ldr	r2, [r2, #20]
 800202e:	0051      	lsls	r1, r2, #1
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800203a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fad9 	bl	80025f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fb1f 	bl	8002688 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	3305      	adds	r3, #5
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021a      	lsls	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	3303      	adds	r3, #3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	3302      	adds	r3, #2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	3301      	adds	r3, #1
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002088:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002096:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002098:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2210      	movs	r2, #16
 80020a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	58000400 	.word	0x58000400
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	ffff8001 	.word	0xffff8001

080020c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020e2:	f001 fe51 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 80020e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d908      	bls.n	8002102 <HAL_ETH_SetMDIOClockRange+0x3a>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d804      	bhi.n	8002102 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e027      	b.n	8002152 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d908      	bls.n	800211c <HAL_ETH_SetMDIOClockRange+0x54>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d204      	bcs.n	800211c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e01a      	b.n	8002152 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d303      	bcc.n	800212c <HAL_ETH_SetMDIOClockRange+0x64>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d911      	bls.n	8002150 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d908      	bls.n	8002146 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d804      	bhi.n	8002146 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e005      	b.n	8002152 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e000      	b.n	8002152 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002150:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	01312cff 	.word	0x01312cff
 8002168:	02160ebf 	.word	0x02160ebf
 800216c:	03938700 	.word	0x03938700
 8002170:	05f5e0ff 	.word	0x05f5e0ff
 8002174:	08f0d17f 	.word	0x08f0d17f

08002178 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800218a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7b1b      	ldrb	r3, [r3, #12]
 8002198:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800219a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7b5b      	ldrb	r3, [r3, #13]
 80021a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7b9b      	ldrb	r3, [r3, #14]
 80021a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80021aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7bdb      	ldrb	r3, [r3, #15]
 80021b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	7c12      	ldrb	r2, [r2, #16]
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d102      	bne.n	80021c2 <ETH_SetMACConfig+0x4a>
 80021bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021c0:	e000      	b.n	80021c4 <ETH_SetMACConfig+0x4c>
 80021c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	7c52      	ldrb	r2, [r2, #17]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d102      	bne.n	80021d4 <ETH_SetMACConfig+0x5c>
 80021ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d2:	e000      	b.n	80021d6 <ETH_SetMACConfig+0x5e>
 80021d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7c9b      	ldrb	r3, [r3, #18]
 80021dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021de:	431a      	orrs	r2, r3
               macconf->Speed |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7f1b      	ldrb	r3, [r3, #28]
 80021f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7f5b      	ldrb	r3, [r3, #29]
 80021f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7f92      	ldrb	r2, [r2, #30]
 8002200:	2a00      	cmp	r2, #0
 8002202:	d102      	bne.n	800220a <ETH_SetMACConfig+0x92>
 8002204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002208:	e000      	b.n	800220c <ETH_SetMACConfig+0x94>
 800220a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800220c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7fdb      	ldrb	r3, [r3, #31]
 8002212:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002214:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	f892 2020 	ldrb.w	r2, [r2, #32]
 800221c:	2a00      	cmp	r2, #0
 800221e:	d102      	bne.n	8002226 <ETH_SetMACConfig+0xae>
 8002220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002224:	e000      	b.n	8002228 <ETH_SetMACConfig+0xb0>
 8002226:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002228:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800222e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002236:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002238:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <ETH_SetMACConfig+0x22c>)
 800224a:	4013      	ands	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	430b      	orrs	r3, r1
 8002254:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002262:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002264:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800226c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800226e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002276:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002278:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002280:	2a00      	cmp	r2, #0
 8002282:	d102      	bne.n	800228a <ETH_SetMACConfig+0x112>
 8002284:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002288:	e000      	b.n	800228c <ETH_SetMACConfig+0x114>
 800228a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800228c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <ETH_SetMACConfig+0x230>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <ETH_SetMACConfig+0x234>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d101      	bne.n	80022ea <ETH_SetMACConfig+0x172>
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	e000      	b.n	80022ec <ETH_SetMACConfig+0x174>
 80022ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022ec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	430b      	orrs	r3, r1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002314:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800231c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f023 0103 	bic.w	r1, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	430a      	orrs	r2, r1
 8002336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002342:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800235e:	2a00      	cmp	r2, #0
 8002360:	d101      	bne.n	8002366 <ETH_SetMACConfig+0x1ee>
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	e000      	b.n	8002368 <ETH_SetMACConfig+0x1f0>
 8002366:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002368:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002370:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800237a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002388:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	430a      	orrs	r2, r1
 8002394:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	00048083 	.word	0x00048083
 80023a8:	c0f88000 	.word	0xc0f88000
 80023ac:	fffffef0 	.word	0xfffffef0

080023b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <ETH_SetDMAConfig+0xf8>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6811      	ldr	r1, [r2, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	7b1b      	ldrb	r3, [r3, #12]
 80023e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <ETH_SetDMAConfig+0xfc>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	68f9      	ldr	r1, [r7, #12]
 8002402:	430b      	orrs	r3, r1
 8002404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002408:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7b5b      	ldrb	r3, [r3, #13]
 800240e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <ETH_SetDMAConfig+0x100>)
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	430b      	orrs	r3, r1
 8002430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002434:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	7d1b      	ldrb	r3, [r3, #20]
 8002440:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002442:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7f5b      	ldrb	r3, [r3, #29]
 8002448:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <ETH_SetDMAConfig+0x104>)
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	430b      	orrs	r3, r1
 8002466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800246a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7f1b      	ldrb	r3, [r3, #28]
 8002472:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002484:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <ETH_SetDMAConfig+0x108>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	430b      	orrs	r3, r1
 8002494:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002498:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	ffff87fd 	.word	0xffff87fd
 80024ac:	ffff2ffe 	.word	0xffff2ffe
 80024b0:	fffec000 	.word	0xfffec000
 80024b4:	ffc0efef 	.word	0xffc0efef
 80024b8:	7fc0ffff 	.word	0x7fc0ffff

080024bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0a4      	sub	sp, #144	; 0x90
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024ca:	2300      	movs	r3, #0
 80024cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002504:	2300      	movs	r3, #0
 8002506:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002514:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002520:	2300      	movs	r3, #0
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002536:	2300      	movs	r3, #0
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800253a:	2300      	movs	r3, #0
 800253c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800253e:	2300      	movs	r3, #0
 8002540:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002554:	2320      	movs	r3, #32
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002566:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800256c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002570:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002596:	2300      	movs	r3, #0
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fde6 	bl	8002178 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025b0:	2301      	movs	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fee1 	bl	80023b0 <ETH_SetDMAConfig>
}
 80025ee:	bf00      	nop
 80025f0:	3790      	adds	r7, #144	; 0x90
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e01d      	b.n	8002640 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	3206      	adds	r2, #6
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d9de      	bls.n	8002604 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	461a      	mov	r2, r3
 8002656:	2303      	movs	r3, #3
 8002658:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e023      	b.n	80026de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	3212      	adds	r2, #18
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d9d8      	bls.n	8002696 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	461a      	mov	r2, r3
 800270c:	2303      	movs	r3, #3
 800270e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002732:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002752:	4b89      	ldr	r3, [pc, #548]	; (8002978 <HAL_GPIO_Init+0x234>)
 8002754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002756:	e194      	b.n	8002a82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8186 	beq.w	8002a7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d005      	beq.n	8002788 <HAL_GPIO_Init+0x44>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d130      	bne.n	80027ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027be:	2201      	movs	r2, #1
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0201 	and.w	r2, r3, #1
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d017      	beq.n	8002826 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d123      	bne.n	800287a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	69b9      	ldr	r1, [r7, #24]
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0203 	and.w	r2, r3, #3
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80e0 	beq.w	8002a7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_GPIO_Init+0x238>)
 80028be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028c2:	4a2e      	ldr	r2, [pc, #184]	; (800297c <HAL_GPIO_Init+0x238>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_GPIO_Init+0x238>)
 80028ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_GPIO_Init+0x23c>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_GPIO_Init+0x240>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d052      	beq.n	80029ac <HAL_GPIO_Init+0x268>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_GPIO_Init+0x244>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_Init+0x22e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_GPIO_Init+0x248>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_Init+0x22a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_GPIO_Init+0x24c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_GPIO_Init+0x250>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x254>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_GPIO_Init+0x258>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_GPIO_Init+0x25c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x216>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_GPIO_Init+0x260>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <HAL_GPIO_Init+0x264>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x20e>
 800294e:	2309      	movs	r3, #9
 8002950:	e02d      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002952:	230a      	movs	r3, #10
 8002954:	e02b      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002956:	2308      	movs	r3, #8
 8002958:	e029      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 800295a:	2307      	movs	r3, #7
 800295c:	e027      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 800295e:	2306      	movs	r3, #6
 8002960:	e025      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002962:	2305      	movs	r3, #5
 8002964:	e023      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002966:	2304      	movs	r3, #4
 8002968:	e021      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 800296a:	2303      	movs	r3, #3
 800296c:	e01f      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 800296e:	2302      	movs	r3, #2
 8002970:	e01d      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002972:	2301      	movs	r3, #1
 8002974:	e01b      	b.n	80029ae <HAL_GPIO_Init+0x26a>
 8002976:	bf00      	nop
 8002978:	58000080 	.word	0x58000080
 800297c:	58024400 	.word	0x58024400
 8002980:	58000400 	.word	0x58000400
 8002984:	58020000 	.word	0x58020000
 8002988:	58020400 	.word	0x58020400
 800298c:	58020800 	.word	0x58020800
 8002990:	58020c00 	.word	0x58020c00
 8002994:	58021000 	.word	0x58021000
 8002998:	58021400 	.word	0x58021400
 800299c:	58021800 	.word	0x58021800
 80029a0:	58021c00 	.word	0x58021c00
 80029a4:	58022000 	.word	0x58022000
 80029a8:	58022400 	.word	0x58022400
 80029ac:	2300      	movs	r3, #0
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	f002 0203 	and.w	r2, r2, #3
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	4093      	lsls	r3, r2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029be:	4938      	ldr	r1, [pc, #224]	; (8002aa0 <HAL_GPIO_Init+0x35c>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f ae63 	bne.w	8002758 <HAL_GPIO_Init+0x14>
  }
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	3724      	adds	r7, #36	; 0x24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	58000400 	.word	0x58000400

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	400b      	ands	r3, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_HSEM_FastTake+0x2c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3320      	adds	r3, #32
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_HSEM_FastTake+0x30>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	58026400 	.word	0x58026400
 8002b3c:	80000300 	.word	0x80000300

08002b40 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002b4a:	4906      	ldr	r1, [pc, #24]	; (8002b64 <HAL_HSEM_Release+0x24>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58026400 	.word	0x58026400

08002b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6a:	b08f      	sub	sp, #60	; 0x3c
 8002b6c:	af0a      	add	r7, sp, #40	; 0x28
 8002b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e116      	b.n	8002da8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe fccd 	bl	8001534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 ff3b 	bl	8007a34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	687e      	ldr	r6, [r7, #4]
 8002bc6:	466d      	mov	r5, sp
 8002bc8:	f106 0410 	add.w	r4, r6, #16
 8002bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bdc:	1d33      	adds	r3, r6, #4
 8002bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f004 feb9 	bl	8007958 <USB_CoreInit>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d7      	b.n	8002da8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 ff29 	bl	8007a56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e04a      	b.n	8002ca0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	333d      	adds	r3, #61	; 0x3d
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333c      	adds	r3, #60	; 0x3c
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	b298      	uxth	r0, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3344      	adds	r3, #68	; 0x44
 8002c46:	4602      	mov	r2, r0
 8002c48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3340      	adds	r3, #64	; 0x40
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3348      	adds	r3, #72	; 0x48
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	334c      	adds	r3, #76	; 0x4c
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3354      	adds	r3, #84	; 0x54
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3af      	bcc.n	8002c0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e044      	b.n	8002d3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	3301      	adds	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3b5      	bcc.n	8002cb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	687e      	ldr	r6, [r7, #4]
 8002d4c:	466d      	mov	r5, sp
 8002d4e:	f106 0410 	add.w	r4, r6, #16
 8002d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d62:	1d33      	adds	r3, r6, #4
 8002d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	f004 fec2 	bl	8007af0 <USB_DevInit>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e014      	b.n	8002da8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f80a 	bl	8002db0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 f880 	bl	8007ea6 <USB_DevDisconnect>

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	10000003 	.word	0x10000003

08002df8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d00a      	beq.n	8002e22 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d001      	beq.n	8002e1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e040      	b.n	8002ea0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e03e      	b.n	8002ea0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e2a:	491f      	ldr	r1, [pc, #124]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e32:	f7fe fcbd 	bl	80017b0 <HAL_GetTick>
 8002e36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e38:	e009      	b.n	8002e4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e3a:	f7fe fcb9 	bl	80017b0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e48:	d901      	bls.n	8002e4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e028      	b.n	8002ea0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b1e      	cmp	r3, #30
 8002e60:	d008      	beq.n	8002e74 <HAL_PWREx_ConfigSupply+0x7c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b2e      	cmp	r3, #46	; 0x2e
 8002e66:	d005      	beq.n	8002e74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b1d      	cmp	r3, #29
 8002e6c:	d002      	beq.n	8002e74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b2d      	cmp	r3, #45	; 0x2d
 8002e72:	d114      	bne.n	8002e9e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e74:	f7fe fc9c 	bl	80017b0 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e7a:	e009      	b.n	8002e90 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e7c:	f7fe fc98 	bl	80017b0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e8a:	d901      	bls.n	8002e90 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d1ee      	bne.n	8002e7c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58024800 	.word	0x58024800

08002eac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	58024800 	.word	0x58024800

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f000 bc1d 	b.w	800371a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8087 	beq.w	8002ffc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eee:	4b99      	ldr	r3, [pc, #612]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ef8:	4b96      	ldr	r3, [pc, #600]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d007      	beq.n	8002f14 <HAL_RCC_OscConfig+0x48>
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2b18      	cmp	r3, #24
 8002f08:	d110      	bne.n	8002f2c <HAL_RCC_OscConfig+0x60>
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d06c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x12e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d168      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e3f6      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x78>
 8002f36:	4b87      	ldr	r3, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a86      	ldr	r2, [pc, #536]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e02e      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x9a>
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7d      	ldr	r2, [pc, #500]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e01d      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd6>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCC_OscConfig+0xbe>
 8002f70:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b75      	ldr	r3, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a74      	ldr	r2, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e00b      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd6>
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d013      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fc01 	bl	80017b0 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fbfd 	bl	80017b0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e3aa      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc4:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0xe6>
 8002fd0:	e014      	b.n	8002ffc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fbed 	bl	80017b0 <HAL_GetTick>
 8002fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fda:	f7fe fbe9 	bl	80017b0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e396      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x10e>
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80cb 	beq.w	80031a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300a:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003012:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003014:	4b4f      	ldr	r3, [pc, #316]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_RCC_OscConfig+0x164>
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	2b18      	cmp	r3, #24
 8003024:	d156      	bne.n	80030d4 <HAL_RCC_OscConfig+0x208>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d151      	bne.n	80030d4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_OscConfig+0x17c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e368      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 0219 	bic.w	r2, r3, #25
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	493f      	ldr	r1, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800305a:	f7fe fba9 	bl	80017b0 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fba5 	bl	80017b0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e352      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	f7fe fbc6 	bl	8001810 <HAL_GetREVID>
 8003084:	4603      	mov	r3, r0
 8003086:	f241 0203 	movw	r2, #4099	; 0x1003
 800308a:	4293      	cmp	r3, r2
 800308c:	d817      	bhi.n	80030be <HAL_RCC_OscConfig+0x1f2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d108      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1dc>
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800309e:	4a2d      	ldr	r2, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a6:	e07b      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	031b      	lsls	r3, r3, #12
 80030b6:	4927      	ldr	r1, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	e070      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	4921      	ldr	r1, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d2:	e065      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d048      	beq.n	800316e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 0219 	bic.w	r2, r3, #25
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	491a      	ldr	r1, [pc, #104]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fb5f 	bl	80017b0 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fe fb5b 	bl	80017b0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e308      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	f7fe fb7c 	bl	8001810 <HAL_GetREVID>
 8003118:	4603      	mov	r3, r0
 800311a:	f241 0203 	movw	r2, #4099	; 0x1003
 800311e:	4293      	cmp	r3, r2
 8003120:	d81a      	bhi.n	8003158 <HAL_RCC_OscConfig+0x28c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d108      	bne.n	800313c <HAL_RCC_OscConfig+0x270>
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	6053      	str	r3, [r2, #4]
 800313a:	e031      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	4902      	ldr	r1, [pc, #8]	; (8003154 <HAL_RCC_OscConfig+0x288>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	e026      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
 8003158:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	4997      	ldr	r1, [pc, #604]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e018      	b.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b95      	ldr	r3, [pc, #596]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a94      	ldr	r2, [pc, #592]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fb19 	bl	80017b0 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fb15 	bl	80017b0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e2c2      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a9 	beq.w	8003300 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b8:	4b82      	ldr	r3, [pc, #520]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d007      	beq.n	80031d4 <HAL_RCC_OscConfig+0x308>
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d13a      	bne.n	8003240 <HAL_RCC_OscConfig+0x374>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d135      	bne.n	8003240 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d4:	4b7b      	ldr	r3, [pc, #492]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x320>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e296      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ec:	f7fe fb10 	bl	8001810 <HAL_GetREVID>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d817      	bhi.n	800322a <HAL_RCC_OscConfig+0x35e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x348>
 8003202:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800320a:	4a6e      	ldr	r2, [pc, #440]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800320c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003210:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003212:	e075      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003214:	4b6b      	ldr	r3, [pc, #428]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	069b      	lsls	r3, r3, #26
 8003222:	4968      	ldr	r1, [pc, #416]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003228:	e06a      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800322a:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	4962      	ldr	r1, [pc, #392]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800323e:	e05f      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d042      	beq.n	80032ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5d      	ldr	r2, [pc, #372]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe faac 	bl	80017b0 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800325c:	f7fe faa8 	bl	80017b0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e255      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800326e:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800327a:	f7fe fac9 	bl	8001810 <HAL_GetREVID>
 800327e:	4603      	mov	r3, r0
 8003280:	f241 0203 	movw	r2, #4099	; 0x1003
 8003284:	4293      	cmp	r3, r2
 8003286:	d817      	bhi.n	80032b8 <HAL_RCC_OscConfig+0x3ec>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	2b20      	cmp	r3, #32
 800328e:	d108      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3d6>
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800329a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329e:	6053      	str	r3, [r2, #4]
 80032a0:	e02e      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
 80032a2:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	069b      	lsls	r3, r3, #26
 80032b0:	4944      	ldr	r1, [pc, #272]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
 80032b6:	e023      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
 80032b8:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	493f      	ldr	r1, [pc, #252]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e018      	b.n	8003300 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fa69 	bl	80017b0 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032e2:	f7fe fa65 	bl	80017b0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e212      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d036      	beq.n	800337a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d019      	beq.n	8003348 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fa46 	bl	80017b0 <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe fa42 	bl	80017b0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1ef      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x45c>
 8003346:	e018      	b.n	800337a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fa2c 	bl	80017b0 <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335c:	f7fe fa28 	bl	80017b0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1d5      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d039      	beq.n	80033fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003398:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800339a:	f7fe fa09 	bl	80017b0 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033a2:	f7fe fa05 	bl	80017b0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1b2      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
 80033c0:	e01b      	b.n	80033fa <HAL_RCC_OscConfig+0x52e>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033c8:	4b9b      	ldr	r3, [pc, #620]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a9a      	ldr	r2, [pc, #616]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80033ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033d4:	f7fe f9ec 	bl	80017b0 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033dc:	f7fe f9e8 	bl	80017b0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e195      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ee:	4b92      	ldr	r3, [pc, #584]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8081 	beq.w	800350a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003408:	4b8c      	ldr	r3, [pc, #560]	; (800363c <HAL_RCC_OscConfig+0x770>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a8b      	ldr	r2, [pc, #556]	; (800363c <HAL_RCC_OscConfig+0x770>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003414:	f7fe f9cc 	bl	80017b0 <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe f9c8 	bl	80017b0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e175      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	4b83      	ldr	r3, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x770>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x584>
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e02d      	b.n	80034ac <HAL_RCC_OscConfig+0x5e0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_OscConfig+0x5a6>
 8003458:	4b77      	ldr	r3, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a76      	ldr	r2, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	4b74      	ldr	r3, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a73      	ldr	r2, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800346a:	f023 0304 	bic.w	r3, r3, #4
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x5e0>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c8>
 800347a:	4b6f      	ldr	r3, [pc, #444]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a6b      	ldr	r2, [pc, #428]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x5e0>
 8003494:	4b68      	ldr	r3, [pc, #416]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a67      	ldr	r2, [pc, #412]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a64      	ldr	r2, [pc, #400]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f97c 	bl	80017b0 <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe f978 	bl	80017b0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e123      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d2:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ee      	beq.n	80034bc <HAL_RCC_OscConfig+0x5f0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f966 	bl	80017b0 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe f962 	bl	80017b0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e10d      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034fe:	4b4e      	ldr	r3, [pc, #312]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ee      	bne.n	80034e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8102 	beq.w	8003718 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003514:	4b48      	ldr	r3, [pc, #288]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351c:	2b18      	cmp	r3, #24
 800351e:	f000 80bd 	beq.w	800369c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b02      	cmp	r3, #2
 8003528:	f040 809e 	bne.w	8003668 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352c:	4b42      	ldr	r3, [pc, #264]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a41      	ldr	r2, [pc, #260]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe f93a 	bl	80017b0 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe f936 	bl	80017b0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0e3      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_OscConfig+0x774>)
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	430a      	orrs	r2, r1
 8003572:	4931      	ldr	r1, [pc, #196]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	628b      	str	r3, [r1, #40]	; 0x28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	3b01      	subs	r3, #1
 800357e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	3b01      	subs	r3, #1
 8003588:	025b      	lsls	r3, r3, #9
 800358a:	b29b      	uxth	r3, r3
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	3b01      	subs	r3, #1
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	3b01      	subs	r3, #1
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035a8:	4923      	ldr	r1, [pc, #140]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_OscConfig+0x778>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035c6:	00d2      	lsls	r2, r2, #3
 80035c8:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f023 020c 	bic.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4917      	ldr	r1, [pc, #92]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	f023 0202 	bic.w	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	4912      	ldr	r1, [pc, #72]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_RCC_OscConfig+0x76c>)
 8003628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe f8bf 	bl	80017b0 <HAL_GetTick>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003634:	e011      	b.n	800365a <HAL_RCC_OscConfig+0x78e>
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
 800363c:	58024800 	.word	0x58024800
 8003640:	fffffc0c 	.word	0xfffffc0c
 8003644:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe f8b2 	bl	80017b0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e05f      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800365a:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x77c>
 8003666:	e057      	b.n	8003718 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 800366e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fe f89c 	bl	80017b0 <HAL_GetTick>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe f898 	bl	80017b0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e045      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x7b0>
 800369a:	e03d      	b.n	8003718 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_OscConfig+0x858>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d031      	beq.n	8003714 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d12a      	bne.n	8003714 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d122      	bne.n	8003714 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d11a      	bne.n	8003714 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0a5b      	lsrs	r3, r3, #9
 80036e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d111      	bne.n	8003714 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	0e1b      	lsrs	r3, r3, #24
 8003706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3730      	adds	r7, #48	; 0x30
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400

08003728 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e19c      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b8a      	ldr	r3, [pc, #552]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b87      	ldr	r3, [pc, #540]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	4985      	ldr	r1, [pc, #532]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b83      	ldr	r3, [pc, #524]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e184      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003784:	429a      	cmp	r2, r3
 8003786:	d908      	bls.n	800379a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003788:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	4975      	ldr	r1, [pc, #468]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003796:	4313      	orrs	r3, r2
 8003798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d908      	bls.n	80037c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	496a      	ldr	r1, [pc, #424]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	4b64      	ldr	r3, [pc, #400]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d908      	bls.n	80037f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	495e      	ldr	r1, [pc, #376]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800380e:	429a      	cmp	r2, r3
 8003810:	d908      	bls.n	8003824 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003812:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4953      	ldr	r1, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003820:	4313      	orrs	r3, r2
 8003822:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	429a      	cmp	r2, r3
 800383e:	d908      	bls.n	8003852 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f023 020f 	bic.w	r2, r3, #15
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4947      	ldr	r1, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800384e:	4313      	orrs	r3, r2
 8003850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d055      	beq.n	800390a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4940      	ldr	r1, [pc, #256]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800386c:	4313      	orrs	r3, r2
 800386e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0f6      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0ea      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038a8:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0de      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b8:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d6      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f023 0207 	bic.w	r2, r3, #7
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4925      	ldr	r1, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd ff69 	bl	80017b0 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e2:	f7fd ff65 	bl	80017b0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0be      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	429a      	cmp	r2, r3
 8003908:	d1eb      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	429a      	cmp	r2, r3
 8003924:	d208      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f023 020f 	bic.w	r2, r3, #15
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x244>)
 8003934:	4313      	orrs	r3, r2
 8003936:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d214      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	4906      	ldr	r1, [pc, #24]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCC_ClockConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e086      	b.n	8003a76 <HAL_RCC_ClockConfig+0x34e>
 8003968:	52002000 	.word	0x52002000
 800396c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003988:	429a      	cmp	r2, r3
 800398a:	d208      	bcs.n	800399e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800398c:	4b3c      	ldr	r3, [pc, #240]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4939      	ldr	r1, [pc, #228]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 800399a:	4313      	orrs	r3, r2
 800399c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d208      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ba:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	492e      	ldr	r1, [pc, #184]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d208      	bcs.n	80039fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4922      	ldr	r1, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d208      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4917      	ldr	r1, [pc, #92]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a28:	f000 f834 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	4912      	ldr	r1, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x35c>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCC_ClockConfig+0x358>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <HAL_RCC_ClockConfig+0x35c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x360>)
 8003a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_RCC_ClockConfig+0x364>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x368>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fe56 	bl	800171c <HAL_InitTick>
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
 8003a84:	08007fdc 	.word	0x08007fdc
 8003a88:	24000004 	.word	0x24000004
 8003a8c:	24000000 	.word	0x24000000
 8003a90:	24000008 	.word	0x24000008

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a9a:	4bb3      	ldr	r3, [pc, #716]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa2:	2b18      	cmp	r3, #24
 8003aa4:	f200 8155 	bhi.w	8003d52 <HAL_RCC_GetSysClockFreq+0x2be>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003b15 	.word	0x08003b15
 8003ab4:	08003d53 	.word	0x08003d53
 8003ab8:	08003d53 	.word	0x08003d53
 8003abc:	08003d53 	.word	0x08003d53
 8003ac0:	08003d53 	.word	0x08003d53
 8003ac4:	08003d53 	.word	0x08003d53
 8003ac8:	08003d53 	.word	0x08003d53
 8003acc:	08003d53 	.word	0x08003d53
 8003ad0:	08003b3b 	.word	0x08003b3b
 8003ad4:	08003d53 	.word	0x08003d53
 8003ad8:	08003d53 	.word	0x08003d53
 8003adc:	08003d53 	.word	0x08003d53
 8003ae0:	08003d53 	.word	0x08003d53
 8003ae4:	08003d53 	.word	0x08003d53
 8003ae8:	08003d53 	.word	0x08003d53
 8003aec:	08003d53 	.word	0x08003d53
 8003af0:	08003b41 	.word	0x08003b41
 8003af4:	08003d53 	.word	0x08003d53
 8003af8:	08003d53 	.word	0x08003d53
 8003afc:	08003d53 	.word	0x08003d53
 8003b00:	08003d53 	.word	0x08003d53
 8003b04:	08003d53 	.word	0x08003d53
 8003b08:	08003d53 	.word	0x08003d53
 8003b0c:	08003d53 	.word	0x08003d53
 8003b10:	08003b47 	.word	0x08003b47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b14:	4b94      	ldr	r3, [pc, #592]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b20:	4b91      	ldr	r3, [pc, #580]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	4a90      	ldr	r2, [pc, #576]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b32:	e111      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b34:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b36:	61bb      	str	r3, [r7, #24]
    break;
 8003b38:	e10e      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b3c:	61bb      	str	r3, [r7, #24]
    break;
 8003b3e:	e10b      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b8c      	ldr	r3, [pc, #560]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b42:	61bb      	str	r3, [r7, #24]
    break;
 8003b44:	e108      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b50:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b5c:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b66:	4b80      	ldr	r3, [pc, #512]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80e1 	beq.w	8003d4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	f000 8083 	beq.w	8003c98 <HAL_RCC_GetSysClockFreq+0x204>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	f200 80a1 	bhi.w	8003cdc <HAL_RCC_GetSysClockFreq+0x248>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d056      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ba6:	e099      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02d      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bb4:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	4a6b      	ldr	r2, [pc, #428]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b62      	ldr	r3, [pc, #392]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bf2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c0e:	e087      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c52:	e065      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c96:	e043      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cda:	e021      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d4a:	e005      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d54:	61bb      	str	r3, [r7, #24]
    break;
 8003d56:	bf00      	nop
  }

  return sysclockfreq;
 8003d58:	69bb      	ldr	r3, [r7, #24]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	03d09000 	.word	0x03d09000
 8003d70:	003d0900 	.word	0x003d0900
 8003d74:	007a1200 	.word	0x007a1200
 8003d78:	46000000 	.word	0x46000000
 8003d7c:	4c742400 	.word	0x4c742400
 8003d80:	4a742400 	.word	0x4a742400
 8003d84:	4af42400 	.word	0x4af42400

08003d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d8e:	f7ff fe81 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490f      	ldr	r1, [pc, #60]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003dc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	08007fdc 	.word	0x08007fdc
 8003de0:	24000004 	.word	0x24000004
 8003de4:	24000000 	.word	0x24000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003dec:	f7ff ffcc 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	08007fdc 	.word	0x08007fdc

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e18:	f7ff ffb6 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	58024400 	.word	0x58024400
 8003e3c:	08007fdc 	.word	0x08007fdc

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e64:	d02a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e6a:	d824      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e70:	d018      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e76:	d81e      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e80:	d007      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e82:	e018      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4ba3      	ldr	r3, [pc, #652]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4aa2      	ldr	r2, [pc, #648]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e90:	e015      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2102      	movs	r1, #2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f9d5 	bl	8005248 <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ea2:	e00c      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fa7e 	bl	80053ac <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ec4:	4b93      	ldr	r3, [pc, #588]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed0:	4990      	ldr	r1, [pc, #576]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03d      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d826      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f0d 	.word	0x08003f0d
 8003efc:	08003f1b 	.word	0x08003f1b
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a80      	ldr	r2, [pc, #512]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f18:	e015      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 f991 	bl	8005248 <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f2a:	e00c      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3324      	adds	r3, #36	; 0x24
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 fa3a 	bl	80053ac <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f4c:	4b71      	ldr	r3, [pc, #452]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	f023 0207 	bic.w	r2, r3, #7
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	496e      	ldr	r1, [pc, #440]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f5e:	e001      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d042      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f78:	d02b      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d825      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f80:	2bc0      	cmp	r3, #192	; 0xc0
 8003f82:	d028      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f84:	2bc0      	cmp	r3, #192	; 0xc0
 8003f86:	d821      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d016      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d81d      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d007      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003f98:	e018      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9a:	4b5e      	ldr	r3, [pc, #376]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fa6:	e017      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 f94a 	bl	8005248 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fb8:	e00e      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3324      	adds	r3, #36	; 0x24
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f9f3 	bl	80053ac <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fca:	e005      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e002      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003fde:	4b4d      	ldr	r3, [pc, #308]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	494a      	ldr	r1, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	650b      	str	r3, [r1, #80]	; 0x50
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d049      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400c:	d030      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800400e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004012:	d82a      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004014:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004018:	d02c      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800401a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800401e:	d824      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004024:	d018      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402a:	d81e      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004034:	d007      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004036:	e018      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004038:	4b36      	ldr	r3, [pc, #216]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	4a35      	ldr	r2, [pc, #212]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004044:	e017      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f8fb 	bl	8005248 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004056:	e00e      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f9a4 	bl	80053ac <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800408a:	4922      	ldr	r1, [pc, #136]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	658b      	str	r3, [r1, #88]	; 0x58
 8004090:	e001      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04b      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ac:	d030      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80040ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b2:	d82a      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040b8:	d02e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80040ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040be:	d824      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c4:	d018      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80040c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ca:	d81e      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d4:	d007      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80040d6:	e018      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040e4:	e019      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f8ab 	bl	8005248 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040f6:	e010      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f954 	bl	80053ac <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004108:	e007      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004114:	58024400 	.word	0x58024400
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800412e:	4996      	ldr	r1, [pc, #600]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004130:	4313      	orrs	r3, r2
 8004132:	658b      	str	r3, [r1, #88]	; 0x58
 8004134:	e001      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d032      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	2b30      	cmp	r3, #48	; 0x30
 800414c:	d01c      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d817      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004152:	2b20      	cmp	r3, #32
 8004154:	d00c      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d813      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800415e:	2b10      	cmp	r3, #16
 8004160:	d10f      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004162:	4b89      	ldr	r3, [pc, #548]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a88      	ldr	r2, [pc, #544]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800416e:	e00e      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2102      	movs	r1, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f001 f866 	bl	8005248 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004180:	e005      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
      break;
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800418c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004194:	4b7c      	ldr	r3, [pc, #496]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	4979      	ldr	r1, [pc, #484]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041a6:	e001      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d047      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c0:	d030      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c6:	d82a      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80041c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041cc:	d02c      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80041ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041d2:	d824      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d018      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	d81e      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d007      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80041ea:	e018      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041f8:	e017      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f821 	bl	8005248 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800420a:	e00e      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3324      	adds	r3, #36	; 0x24
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f8ca 	bl	80053ac <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800421c:	e005      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
      break;
 8004222:	e002      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004230:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800423e:	4313      	orrs	r3, r2
 8004240:	650b      	str	r3, [r1, #80]	; 0x50
 8004242:	e001      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d049      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800425c:	d02e      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800425e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004262:	d828      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004268:	d02a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800426a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426e:	d822      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004274:	d026      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004276:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800427a:	d81c      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800427c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004280:	d010      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004286:	d816      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01d      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d111      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 ffd5 	bl	8005248 <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042a2:	e012      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 f87e 	bl	80053ac <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042b4:	e009      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80042bc:	bf00      	nop
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80042c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042d0:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	492a      	ldr	r1, [pc, #168]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	650b      	str	r3, [r1, #80]	; 0x50
 80042e2:	e001      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d04d      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042fe:	d02e      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004304:	d828      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d02a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d822      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004316:	d026      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800431c:	d81c      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004322:	d010      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004328:	d816      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01d      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004332:	d111      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff84 	bl	8005248 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004344:	e012      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3324      	adds	r3, #36	; 0x24
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f001 f82d 	bl	80053ac <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004356:	e009      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
      break;
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004380:	4901      	ldr	r1, [pc, #4]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004382:	4313      	orrs	r3, r2
 8004384:	658b      	str	r3, [r1, #88]	; 0x58
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a4:	d00e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80043a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043aa:	d814      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80043b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b4:	d10f      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b6:	4baf      	ldr	r3, [pc, #700]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4aae      	ldr	r2, [pc, #696]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043c2:	e00c      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ff3c 	bl	8005248 <RCCEx_PLL2_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
      break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80043dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043e4:	4ba3      	ldr	r3, [pc, #652]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	49a0      	ldr	r1, [pc, #640]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	650b      	str	r3, [r1, #80]	; 0x50
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d032      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b03      	cmp	r3, #3
 800440e:	d81b      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800444f 	.word	0x0800444f
 800441c:	08004429 	.word	0x08004429
 8004420:	08004437 	.word	0x08004437
 8004424:	0800444f 	.word	0x0800444f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a91      	ldr	r2, [pc, #580]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004434:	e00c      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 ff03 	bl	8005248 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004446:	e003      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800444e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004456:	4b87      	ldr	r3, [pc, #540]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4984      	ldr	r1, [pc, #528]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004464:	4313      	orrs	r3, r2
 8004466:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8086 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004488:	f7fd f992 	bl	80017b0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004490:	f7fd f98e 	bl	80017b0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d902      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	75fb      	strb	r3, [r7, #23]
        break;
 80044a2:	e005      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a4:	4b74      	ldr	r3, [pc, #464]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ef      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d166      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044c0:	4053      	eors	r3, r2
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d013      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044d4:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a66      	ldr	r2, [pc, #408]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044e0:	4b64      	ldr	r3, [pc, #400]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a63      	ldr	r2, [pc, #396]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044ec:	4a61      	ldr	r2, [pc, #388]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d115      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd f957 	bl	80017b0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004504:	e00b      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fd f953 	bl	80017b0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d902      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	75fb      	strb	r3, [r7, #23]
            break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451e:	4b55      	ldr	r3, [pc, #340]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ed      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d126      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004540:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454e:	0919      	lsrs	r1, r3, #4
 8004550:	4b4a      	ldr	r3, [pc, #296]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004552:	400b      	ands	r3, r1
 8004554:	4947      	ldr	r1, [pc, #284]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004556:	4313      	orrs	r3, r2
 8004558:	610b      	str	r3, [r1, #16]
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4a44      	ldr	r2, [pc, #272]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004566:	6113      	str	r3, [r2, #16]
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800456a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004576:	493f      	ldr	r1, [pc, #252]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004578:	4313      	orrs	r3, r2
 800457a:	670b      	str	r3, [r1, #112]	; 0x70
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	75bb      	strb	r3, [r7, #22]
 8004582:	e001      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8085 	beq.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459a:	2b28      	cmp	r3, #40	; 0x28
 800459c:	d866      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	08004681 	.word	0x08004681
 80045a8:	0800466d 	.word	0x0800466d
 80045ac:	0800466d 	.word	0x0800466d
 80045b0:	0800466d 	.word	0x0800466d
 80045b4:	0800466d 	.word	0x0800466d
 80045b8:	0800466d 	.word	0x0800466d
 80045bc:	0800466d 	.word	0x0800466d
 80045c0:	0800466d 	.word	0x0800466d
 80045c4:	08004649 	.word	0x08004649
 80045c8:	0800466d 	.word	0x0800466d
 80045cc:	0800466d 	.word	0x0800466d
 80045d0:	0800466d 	.word	0x0800466d
 80045d4:	0800466d 	.word	0x0800466d
 80045d8:	0800466d 	.word	0x0800466d
 80045dc:	0800466d 	.word	0x0800466d
 80045e0:	0800466d 	.word	0x0800466d
 80045e4:	0800465b 	.word	0x0800465b
 80045e8:	0800466d 	.word	0x0800466d
 80045ec:	0800466d 	.word	0x0800466d
 80045f0:	0800466d 	.word	0x0800466d
 80045f4:	0800466d 	.word	0x0800466d
 80045f8:	0800466d 	.word	0x0800466d
 80045fc:	0800466d 	.word	0x0800466d
 8004600:	0800466d 	.word	0x0800466d
 8004604:	08004681 	.word	0x08004681
 8004608:	0800466d 	.word	0x0800466d
 800460c:	0800466d 	.word	0x0800466d
 8004610:	0800466d 	.word	0x0800466d
 8004614:	0800466d 	.word	0x0800466d
 8004618:	0800466d 	.word	0x0800466d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	08004681 	.word	0x08004681
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004681 	.word	0x08004681
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fdfa 	bl	8005248 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004658:	e013      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fea3 	bl	80053ac <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800466a:	e00a      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
      break;
 8004670:	e007      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004672:	bf00      	nop
 8004674:	58024400 	.word	0x58024400
 8004678:	58024800 	.word	0x58024800
 800467c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004688:	4b96      	ldr	r3, [pc, #600]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004694:	4993      	ldr	r1, [pc, #588]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	654b      	str	r3, [r1, #84]	; 0x54
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d038      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d821      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046ff 	.word	0x080046ff
 80046c0:	080046d5 	.word	0x080046d5
 80046c4:	080046e7 	.word	0x080046e7
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdb4 	bl	8005248 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046e4:	e00c      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe5d 	bl	80053ac <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004706:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f023 0207 	bic.w	r2, r3, #7
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004712:	4974      	ldr	r1, [pc, #464]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	654b      	str	r3, [r1, #84]	; 0x54
 8004718:	e001      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	2b05      	cmp	r3, #5
 8004732:	d821      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800477f 	.word	0x0800477f
 8004740:	08004755 	.word	0x08004755
 8004744:	08004767 	.word	0x08004767
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fd74 	bl	8005248 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004764:	e00c      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fe1d 	bl	80053ac <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
      break;
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800477e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004786:	4b57      	ldr	r3, [pc, #348]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f023 0207 	bic.w	r2, r3, #7
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	4953      	ldr	r1, [pc, #332]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	658b      	str	r3, [r1, #88]	; 0x58
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d04b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b6:	d02e      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047bc:	d828      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d02a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d822      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ce:	d026      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80047d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047d4:	d81c      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047da:	d010      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80047dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e0:	d816      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01d      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ea:	d111      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fd28 	bl	8005248 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047fc:	e012      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fdd1 	bl	80053ac <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800480e:	e009      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004838:	492a      	ldr	r1, [pc, #168]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	654b      	str	r3, [r1, #84]	; 0x54
 800483e:	e001      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d04d      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004856:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800485a:	d02e      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800485c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004860:	d828      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d02a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d822      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800486e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004872:	d026      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004878:	d81c      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487e:	d010      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004884:	d816      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01d      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800488a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488e:	d111      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fcd6 	bl	8005248 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048a0:	e012      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3324      	adds	r3, #36	; 0x24
 80048a6:	2102      	movs	r1, #2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fd7f 	bl	80053ac <RCCEx_PLL3_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048b2:	e009      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	75fb      	strb	r3, [r7, #23]
      break;
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80048ba:	bf00      	nop
 80048bc:	e004      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80048c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048dc:	4901      	ldr	r1, [pc, #4]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	658b      	str	r3, [r1, #88]	; 0x58
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80048e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d04b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004902:	d02e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004904:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004908:	d828      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d02a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004914:	d822      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004916:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800491a:	d026      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800491c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004920:	d81c      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004926:	d010      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492c:	d816      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01d      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004936:	d111      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fc82 	bl	8005248 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004948:	e012      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3324      	adds	r3, #36	; 0x24
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd2b 	bl	80053ac <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004976:	4b9d      	ldr	r3, [pc, #628]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004984:	4999      	ldr	r1, [pc, #612]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004986:	4313      	orrs	r3, r2
 8004988:	658b      	str	r3, [r1, #88]	; 0x58
 800498a:	e001      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d10a      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fcfc 	bl	80053ac <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049cc:	4987      	ldr	r1, [pc, #540]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e8:	d10a      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3324      	adds	r3, #36	; 0x24
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fcdb 	bl	80053ac <RCCEx_PLL3_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a00:	4b7a      	ldr	r3, [pc, #488]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0e:	4977      	ldr	r1, [pc, #476]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d034      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a2a:	d01d      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a30:	d817      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3a:	d009      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fbff 	bl	8005248 <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a4e:	e00c      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3324      	adds	r3, #36	; 0x24
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fca8 	bl	80053ac <RCCEx_PLL3_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	75fb      	strb	r3, [r7, #23]
      break;
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a7e:	495b      	ldr	r1, [pc, #364]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	658b      	str	r3, [r1, #88]	; 0x58
 8004a84:	e001      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d033      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aa0:	d01c      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004aa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aa6:	d816      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004ab4:	e00f      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ac2:	e00c      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3324      	adds	r3, #36	; 0x24
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fc6e 	bl	80053ac <RCCEx_PLL3_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af2:	493e      	ldr	r1, [pc, #248]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	654b      	str	r3, [r1, #84]	; 0x54
 8004af8:	e001      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d029      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d007      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004b18:	e00f      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a33      	ldr	r2, [pc, #204]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b26:	e00b      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb8a 	bl	8005248 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b38:	e002      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	4926      	ldr	r1, [pc, #152]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b58:	e001      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fc1b 	bl	80053ac <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d033      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d017      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9a:	d811      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d013      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba6:	d80b      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d010      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bbe:	e007      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e004      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be2:	4902      	ldr	r1, [pc, #8]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	654b      	str	r3, [r1, #84]	; 0x54
 8004be8:	e004      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	492e      	ldr	r1, [pc, #184]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c2c:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c66:	6113      	str	r3, [r2, #16]
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c72:	4915      	ldr	r1, [pc, #84]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da08      	bge.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	4906      	ldr	r1, [pc, #24]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004cb2:	7dbb      	ldrb	r3, [r7, #22]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	58024400 	.word	0x58024400

08004ccc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cd0:	f7ff f85a 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	08007fdc 	.word	0x08007fdc

08004cf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d00:	4ba1      	ldr	r3, [pc, #644]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d0a:	4b9f      	ldr	r3, [pc, #636]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	0b1b      	lsrs	r3, r3, #12
 8004d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d16:	4b9c      	ldr	r3, [pc, #624]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d22:	4b99      	ldr	r3, [pc, #612]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	08db      	lsrs	r3, r3, #3
 8004d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8111 	beq.w	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	f000 8083 	beq.w	8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	f200 80a1 	bhi.w	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d056      	beq.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d62:	e099      	b.n	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d64:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02d      	beq.n	8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d70:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	4a84      	ldr	r2, [pc, #528]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	ee07 3a90 	vmov	s15, r3
 8004d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9a:	4b7b      	ldr	r3, [pc, #492]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dca:	e087      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dde:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e0e:	e065      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e52:	e043      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e96:	e021      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	0a5b      	lsrs	r3, r3, #9
 8004ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f02:	ee17 2a90 	vmov	r2, s15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f30:	ee17 2a90 	vmov	r2, s15
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	0e1b      	lsrs	r3, r3, #24
 8004f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5e:	ee17 2a90 	vmov	r2, s15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f66:	e008      	b.n	8004f7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
}
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	03d09000 	.word	0x03d09000
 8004f90:	46000000 	.word	0x46000000
 8004f94:	4c742400 	.word	0x4c742400
 8004f98:	4a742400 	.word	0x4a742400
 8004f9c:	4af42400 	.word	0x4af42400

08004fa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa8:	4ba1      	ldr	r3, [pc, #644]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004fb2:	4b9f      	ldr	r3, [pc, #636]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	0d1b      	lsrs	r3, r3, #20
 8004fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fbe:	4b9c      	ldr	r3, [pc, #624]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	08db      	lsrs	r3, r3, #3
 8004fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8111 	beq.w	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	f000 8083 	beq.w	80050fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f200 80a1 	bhi.w	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d056      	beq.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800500a:	e099      	b.n	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800500c:	4b88      	ldr	r3, [pc, #544]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02d      	beq.n	8005074 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005018:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	08db      	lsrs	r3, r3, #3
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	4a84      	ldr	r2, [pc, #528]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	ee07 3a90 	vmov	s15, r3
 8005030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b7b      	ldr	r3, [pc, #492]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005072:	e087      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050b6:	e065      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a03 	vldr	s12, [r7, #12]
 80050de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050fa:	e043      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b48      	ldr	r3, [pc, #288]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800513e:	e021      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005182:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005184:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	0a5b      	lsrs	r3, r3, #9
 800518a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800519e:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051aa:	ee17 2a90 	vmov	r2, s15
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80051b2:	4b1f      	ldr	r3, [pc, #124]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d8:	ee17 2a90 	vmov	r2, s15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005206:	ee17 2a90 	vmov	r2, s15
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	3724      	adds	r7, #36	; 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	03d09000 	.word	0x03d09000
 8005238:	46000000 	.word	0x46000000
 800523c:	4c742400 	.word	0x4c742400
 8005240:	4a742400 	.word	0x4a742400
 8005244:	4af42400 	.word	0x4af42400

08005248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005256:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d101      	bne.n	8005266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e099      	b.n	800539a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005272:	f7fc fa9d 	bl	80017b0 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005278:	e008      	b.n	800528c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800527a:	f7fc fa99 	bl	80017b0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e086      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800528c:	4b45      	ldr	r3, [pc, #276]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005298:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	493f      	ldr	r1, [pc, #252]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	628b      	str	r3, [r1, #40]	; 0x28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	025b      	lsls	r3, r3, #9
 80052be:	b29b      	uxth	r3, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052dc:	4931      	ldr	r1, [pc, #196]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	492d      	ldr	r1, [pc, #180]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f023 0220 	bic.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4928      	ldr	r1, [pc, #160]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <RCCEx_PLL2_Config+0x160>)
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	69d2      	ldr	r2, [r2, #28]
 800531e:	00d2      	lsls	r2, r2, #3
 8005320:	4920      	ldr	r1, [pc, #128]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005326:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800532c:	f043 0310 	orr.w	r3, r3, #16
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005344:	e00f      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d106      	bne.n	800535a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800534c:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005358:	e005      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fc fa1d 	bl	80017b0 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005378:	e008      	b.n	800538c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800537a:	f7fc fa19 	bl	80017b0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	ffff0007 	.word	0xffff0007

080053ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d101      	bne.n	80053ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e099      	b.n	80054fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc f9eb 	bl	80017b0 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053de:	f7fc f9e7 	bl	80017b0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e086      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053fc:	4b42      	ldr	r3, [pc, #264]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	493f      	ldr	r1, [pc, #252]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	628b      	str	r3, [r1, #40]	; 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	025b      	lsls	r3, r3, #9
 8005422:	b29b      	uxth	r3, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	3b01      	subs	r3, #1
 800543a:	061b      	lsls	r3, r3, #24
 800543c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005440:	4931      	ldr	r1, [pc, #196]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005446:	4b30      	ldr	r3, [pc, #192]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	492d      	ldr	r1, [pc, #180]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	4928      	ldr	r1, [pc, #160]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800546a:	4b27      	ldr	r3, [pc, #156]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <RCCEx_PLL3_Config+0x160>)
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	69d2      	ldr	r2, [r2, #28]
 8005482:	00d2      	lsls	r2, r2, #3
 8005484:	4920      	ldr	r1, [pc, #128]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054a8:	e00f      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d106      	bne.n	80054be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054bc:	e005      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc f96b 	bl	80017b0 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054de:	f7fc f967 	bl	80017b0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
 800550c:	ffff0007 	.word	0xffff0007

08005510 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0f1      	b.n	8005706 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a78      	ldr	r2, [pc, #480]	; (8005710 <HAL_SPI_Init+0x200>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00f      	beq.n	8005552 <HAL_SPI_Init+0x42>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_SPI_Init+0x204>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00a      	beq.n	8005552 <HAL_SPI_Init+0x42>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a75      	ldr	r2, [pc, #468]	; (8005718 <HAL_SPI_Init+0x208>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d005      	beq.n	8005552 <HAL_SPI_Init+0x42>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b0f      	cmp	r3, #15
 800554c:	d901      	bls.n	8005552 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e0d9      	b.n	8005706 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 f974 	bl	8006840 <SPI_GetPacketSize>
 8005558:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6c      	ldr	r2, [pc, #432]	; (8005710 <HAL_SPI_Init+0x200>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00c      	beq.n	800557e <HAL_SPI_Init+0x6e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a6a      	ldr	r2, [pc, #424]	; (8005714 <HAL_SPI_Init+0x204>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <HAL_SPI_Init+0x6e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a69      	ldr	r2, [pc, #420]	; (8005718 <HAL_SPI_Init+0x208>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d002      	beq.n	800557e <HAL_SPI_Init+0x6e>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d811      	bhi.n	80055a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005582:	4a63      	ldr	r2, [pc, #396]	; (8005710 <HAL_SPI_Init+0x200>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a61      	ldr	r2, [pc, #388]	; (8005714 <HAL_SPI_Init+0x204>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_SPI_Init+0x8c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a60      	ldr	r2, [pc, #384]	; (8005718 <HAL_SPI_Init+0x208>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d104      	bne.n	80055a6 <HAL_SPI_Init+0x96>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d901      	bls.n	80055a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0af      	b.n	8005706 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fee2 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80055e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ec:	d119      	bne.n	8005622 <HAL_SPI_Init+0x112>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f6:	d103      	bne.n	8005600 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10c      	bne.n	8005622 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800560c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005610:	d107      	bne.n	8005622 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	ea42 0103 	orr.w	r1, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005682:	ea42 0103 	orr.w	r1, r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40013000 	.word	0x40013000
 8005714:	40003800 	.word	0x40003800
 8005718:	40003c00 	.word	0x40003c00

0800571c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3320      	adds	r3, #32
 8005732:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Transmit+0x2a>
 8005742:	2302      	movs	r3, #2
 8005744:	e1d7      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574e:	f7fc f82f 	bl	80017b0 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d007      	beq.n	8005770 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005760:	2302      	movs	r3, #2
 8005762:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800576c:	7efb      	ldrb	r3, [r7, #27]
 800576e:	e1c2      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x60>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005788:	7efb      	ldrb	r3, [r7, #27]
 800578a:	e1b4      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2203      	movs	r2, #3
 8005790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80057dc:	d107      	bne.n	80057ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b96      	ldr	r3, [pc, #600]	; (8005a50 <HAL_SPI_Transmit+0x334>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	88f9      	ldrh	r1, [r7, #6]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	430b      	orrs	r3, r1
 8005800:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581a:	d107      	bne.n	800582c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d947      	bls.n	80058c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005834:	e03f      	b.n	80058b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d114      	bne.n	800586e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800586c:	e023      	b.n	80058b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fb ff9f 	bl	80017b0 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Transmit+0x16a>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x170>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d114      	bne.n	80058b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 ff09 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e11f      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1b9      	bne.n	8005836 <HAL_SPI_Transmit+0x11a>
 80058c2:	e0f2      	b.n	8005aaa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b07      	cmp	r3, #7
 80058ca:	f240 80e7 	bls.w	8005a9c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80058ce:	e05d      	b.n	800598c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d132      	bne.n	8005944 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d918      	bls.n	800591c <HAL_SPI_Transmit+0x200>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d014      	beq.n	800591c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b02      	subs	r3, #2
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800591a:	e037      	b.n	800598c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592a:	1c9a      	adds	r2, r3, #2
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005942:	e023      	b.n	800598c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005944:	f7fb ff34 	bl	80017b0 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d803      	bhi.n	800595c <HAL_SPI_Transmit+0x240>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d102      	bne.n	8005962 <HAL_SPI_Transmit+0x246>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d114      	bne.n	800598c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fe9e 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0b4      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d19b      	bne.n	80058d0 <HAL_SPI_Transmit+0x1b4>
 8005998:	e087      	b.n	8005aaa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d155      	bne.n	8005a54 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d918      	bls.n	80059e6 <HAL_SPI_Transmit+0x2ca>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d914      	bls.n	80059e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	1d1a      	adds	r2, r3, #4
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b04      	subs	r3, #4
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059e4:	e05a      	b.n	8005a9c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d917      	bls.n	8005a22 <HAL_SPI_Transmit+0x306>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d013      	beq.n	8005a22 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	881a      	ldrh	r2, [r3, #0]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b02      	subs	r3, #2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a20:	e03c      	b.n	8005a9c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a4c:	e026      	b.n	8005a9c <HAL_SPI_Transmit+0x380>
 8005a4e:	bf00      	nop
 8005a50:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a54:	f7fb feac 	bl	80017b0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d803      	bhi.n	8005a6c <HAL_SPI_Transmit+0x350>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Transmit+0x356>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d114      	bne.n	8005a9c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fe16 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e02c      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f af78 	bne.w	800599a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fe95 	bl	80067e4 <SPI_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fde7 	bl	80066a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005af4:	7efb      	ldrb	r3, [r7, #27]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3330      	adds	r3, #48	; 0x30
 8005b1a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b24:	d112      	bne.n	8005b4c <HAL_SPI_Receive+0x4c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10e      	bne.n	8005b4c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f978 	bl	8005e38 <HAL_SPI_TransmitReceive>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e16f      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Receive+0x5a>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e168      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b62:	f7fb fe25 	bl	80017b0 <HAL_GetTick>
 8005b66:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d007      	beq.n	8005b84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
 8005b76:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
 8005b82:	e153      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_SPI_Receive+0x90>
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d107      	bne.n	8005ba0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b9c:	7ffb      	ldrb	r3, [r7, #31]
 8005b9e:	e145      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	88fa      	ldrh	r2, [r7, #6]
 8005bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005bf0:	d107      	bne.n	8005c02 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	4b8a      	ldr	r3, [pc, #552]	; (8005e34 <HAL_SPI_Receive+0x334>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	88f9      	ldrh	r1, [r7, #6]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	430b      	orrs	r3, r1
 8005c14:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2e:	d107      	bne.n	8005c40 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d948      	bls.n	8005cda <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005c48:	e040      	b.n	8005ccc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	f248 0308 	movw	r3, #32776	; 0x8008
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c82:	e023      	b.n	8005ccc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c84:	f7fb fd94 	bl	80017b0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d803      	bhi.n	8005c9c <HAL_SPI_Receive+0x19c>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <HAL_SPI_Receive+0x1a2>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d114      	bne.n	8005ccc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fcfe 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0af      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1b8      	bne.n	8005c4a <HAL_SPI_Receive+0x14a>
 8005cd8:	e095      	b.n	8005e06 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	f240 808b 	bls.w	8005dfa <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005ce4:	e03f      	b.n	8005d66 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d114      	bne.n	8005d1e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	8812      	ldrh	r2, [r2, #0]
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005d1c:	e023      	b.n	8005d66 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1e:	f7fb fd47 	bl	80017b0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d803      	bhi.n	8005d36 <HAL_SPI_Receive+0x236>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_Receive+0x23c>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d114      	bne.n	8005d66 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fcb1 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e062      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1b9      	bne.n	8005ce6 <HAL_SPI_Receive+0x1e6>
 8005d72:	e048      	b.n	8005e06 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d117      	bne.n	8005db2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005db0:	e023      	b.n	8005dfa <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db2:	f7fb fcfd 	bl	80017b0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d803      	bhi.n	8005dca <HAL_SPI_Receive+0x2ca>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Receive+0x2d0>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d114      	bne.n	8005dfa <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fc67 	bl	80066a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e018      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1b6      	bne.n	8005d74 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fc4c 	bl	80066a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	ffff0000 	.word	0xffff0000

08005e38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	; 0x38
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3320      	adds	r3, #32
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3330      	adds	r3, #48	; 0x30
 8005e5a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x32>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e209      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e72:	f7fb fc9d 	bl	80017b0 <HAL_GetTick>
 8005e76:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005e7c:	887b      	ldrh	r3, [r7, #2]
 8005e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e8e:	7efb      	ldrb	r3, [r7, #27]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d014      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x86>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9a:	d106      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005ea4:	7efb      	ldrb	r3, [r7, #27]
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d009      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ebc:	e1df      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x98>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x98>
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ee2:	e1cc      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d003      	beq.n	8005ef8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2205      	movs	r2, #5
 8005ef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	4b82      	ldr	r3, [pc, #520]	; (8006148 <HAL_SPI_TransmitReceive+0x310>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	8879      	ldrh	r1, [r7, #2]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f64:	d107      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d970      	bls.n	8006060 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f7e:	e068      	b.n	8006052 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d11a      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x18c>
 8005f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	1d1a      	adds	r2, r3, #4
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	f248 0308 	movw	r3, #32776	; 0x8008
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01a      	beq.n	800600a <HAL_SPI_TransmitReceive+0x1d2>
 8005fd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fe4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006008:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600a:	f7fb fbd1 	bl	80017b0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006016:	429a      	cmp	r2, r3
 8006018:	d803      	bhi.n	8006022 <HAL_SPI_TransmitReceive+0x1ea>
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d102      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x1f0>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d114      	bne.n	8006052 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fb3b 	bl	80066a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e115      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006054:	2b00      	cmp	r3, #0
 8006056:	d193      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x148>
 8006058:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d190      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x148>
 800605e:	e0e7      	b.n	8006230 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b07      	cmp	r3, #7
 8006066:	f240 80dd 	bls.w	8006224 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800606a:	e066      	b.n	800613a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b02      	cmp	r3, #2
 8006078:	d119      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x276>
 800607a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800607c:	2b00      	cmp	r3, #0
 800607e:	d016      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11a      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x2ba>
 80060bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	8812      	ldrh	r2, [r2, #0]
 80060ca:	b292      	uxth	r2, r2
 80060cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f2:	f7fb fb5d 	bl	80017b0 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fe:	429a      	cmp	r2, r3
 8006100:	d803      	bhi.n	800610a <HAL_SPI_TransmitReceive+0x2d2>
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d102      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x2d8>
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d114      	bne.n	800613a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fac7 	bl	80066a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006124:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e0a1      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800613a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800613c:	2b00      	cmp	r3, #0
 800613e:	d195      	bne.n	800606c <HAL_SPI_TransmitReceive+0x234>
 8006140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d192      	bne.n	800606c <HAL_SPI_TransmitReceive+0x234>
 8006146:	e073      	b.n	8006230 <HAL_SPI_TransmitReceive+0x3f8>
 8006148:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d11b      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x35a>
 800615a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3320      	adds	r3, #32
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006190:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11d      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x3a4>
 80061a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01a      	beq.n	80061dc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061da:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061dc:	f7fb fae8 	bl	80017b0 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d803      	bhi.n	80061f4 <HAL_SPI_TransmitReceive+0x3bc>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d102      	bne.n	80061fa <HAL_SPI_TransmitReceive+0x3c2>
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa52 	bl	80066a4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e02c      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006226:	2b00      	cmp	r3, #0
 8006228:	d190      	bne.n	800614c <HAL_SPI_TransmitReceive+0x314>
 800622a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d18d      	bne.n	800614c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2200      	movs	r2, #0
 8006238:	2108      	movs	r1, #8
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fad2 	bl	80067e4 <SPI_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fa24 	bl	80066a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e001      	b.n	800627e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800627a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800627e:	4618      	mov	r0, r3
 8006280:	3730      	adds	r7, #48	; 0x30
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3330      	adds	r3, #48	; 0x30
 80062c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d113      	bne.n	80062f6 <HAL_SPI_IRQHandler+0x6e>
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10e      	bne.n	80062f6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
    handled = 1UL;
 80062f2:	2301      	movs	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_SPI_IRQHandler+0x98>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
    handled = 1UL;
 800631c:	2301      	movs	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <HAL_SPI_IRQHandler+0xc2>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800633a:	2b00      	cmp	r3, #0
 800633c:	d105      	bne.n	800634a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
    handled = 1UL;
 8006346:	2301      	movs	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 815a 	bne.w	8006606 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 808b 	beq.w	8006474 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0208 	orr.w	r2, r2, #8
 800636c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0210 	orr.w	r2, r2, #16
 800637c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0208 	bic.w	r2, r2, #8
 800639c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d13d      	bne.n	8006428 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80063ac:	e036      	b.n	800641c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d90b      	bls.n	80063ce <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c6:	1d1a      	adds	r2, r3, #4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	665a      	str	r2, [r3, #100]	; 0x64
 80063cc:	e01d      	b.n	800640a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b07      	cmp	r3, #7
 80063d4:	d90b      	bls.n	80063ee <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	b292      	uxth	r2, r2
 80063e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	1c9a      	adds	r2, r3, #2
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	665a      	str	r2, [r3, #100]	; 0x64
 80063ec:	e00d      	b.n	800640a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1c2      	bne.n	80063ae <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f93b 	bl	80066a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f90b 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006446:	e0e3      	b.n	8006610 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	2b05      	cmp	r3, #5
 800644c:	d103      	bne.n	8006456 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8fa 	bl	8006648 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006454:	e0d9      	b.n	800660a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d103      	bne.n	8006464 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f8e9 	bl	8006634 <HAL_SPI_RxCpltCallback>
    return;
 8006462:	e0d2      	b.n	800660a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006464:	7cfb      	ldrb	r3, [r7, #19]
 8006466:	2b03      	cmp	r3, #3
 8006468:	f040 80cf 	bne.w	800660a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8d7 	bl	8006620 <HAL_SPI_TxCpltCallback>
    return;
 8006472:	e0ca      	b.n	800660a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <HAL_SPI_IRQHandler+0x212>
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006496:	619a      	str	r2, [r3, #24]

    return;
 8006498:	e0ba      	b.n	8006610 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80b5 	beq.w	8006610 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00f      	beq.n	80064d0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00f      	beq.n	80064fa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	f043 0201 	orr.w	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00f      	beq.n	8006524 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650a:	f043 0208 	orr.w	r2, r3, #8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006522:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00f      	beq.n	800654e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006534:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0220 	orr.w	r2, r2, #32
 800654c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05a      	beq.n	800660e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6919      	ldr	r1, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <HAL_SPI_IRQHandler+0x390>)
 8006574:	400b      	ands	r3, r1
 8006576:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800657e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006582:	d138      	bne.n	80065f6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006592:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d013      	beq.n	80065c4 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a0:	4a1e      	ldr	r2, [pc, #120]	; (800661c <HAL_SPI_IRQHandler+0x394>)
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fb fa61 	bl	8001a70 <HAL_DMA_Abort_IT>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d020      	beq.n	800660e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d0:	4a12      	ldr	r2, [pc, #72]	; (800661c <HAL_SPI_IRQHandler+0x394>)
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fb fa49 	bl	8001a70 <HAL_DMA_Abort_IT>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d014      	beq.n	800660e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065f4:	e00b      	b.n	800660e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f82c 	bl	800665c <HAL_SPI_ErrorCallback>
    return;
 8006604:	e003      	b.n	800660e <HAL_SPI_IRQHandler+0x386>
    return;
 8006606:	bf00      	nop
 8006608:	e002      	b.n	8006610 <HAL_SPI_IRQHandler+0x388>
    return;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <HAL_SPI_IRQHandler+0x388>
    return;
 800660e:	bf00      	nop
  }
}
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	fffffc94 	.word	0xfffffc94
 800661c:	08006671 	.word	0x08006671

08006620 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff ffe0 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0208 	orr.w	r2, r2, #8
 80066c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0210 	orr.w	r2, r2, #16
 80066d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6919      	ldr	r1, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b3c      	ldr	r3, [pc, #240]	; (80067e0 <SPI_CloseTransfer+0x13c>)
 80066f0:	400b      	ands	r3, r1
 80066f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006702:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b04      	cmp	r3, #4
 800670e:	d014      	beq.n	800673a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0220 	orr.w	r2, r2, #32
 8006738:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b03      	cmp	r3, #3
 8006744:	d014      	beq.n	8006770 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006756:	f043 0204 	orr.w	r2, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00f      	beq.n	800679a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006798:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067aa:	f043 0208 	orr.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	fffffc90 	.word	0xfffffc90

080067e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80067f4:	e010      	b.n	8006818 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f6:	f7fa ffdb 	bl	80017b0 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	429a      	cmp	r2, r3
 8006804:	d803      	bhi.n	800680e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d102      	bne.n	8006814 <SPI_WaitOnFlagUntilTimeout+0x30>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e00f      	b.n	8006838 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	d0df      	beq.n	80067f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	3307      	adds	r3, #7
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	fb02 f303 	mul.w	r3, r2, r3
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e042      	b.n	800690e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fa fde4 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2224      	movs	r2, #36	; 0x24
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f82d 	bl	8006918 <UART_SetConfig>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e022      	b.n	800690e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fd89 	bl	80073e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fe10 	bl	800752c <UART_CheckIdleState>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800691c:	b092      	sub	sp, #72	; 0x48
 800691e:	af00      	add	r7, sp, #0
 8006920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4bbe      	ldr	r3, [pc, #760]	; (8006c40 <UART_SetConfig+0x328>)
 8006948:	4013      	ands	r3, r2
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4ab3      	ldr	r2, [pc, #716]	; (8006c44 <UART_SetConfig+0x32c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006980:	4313      	orrs	r3, r2
 8006982:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	4baf      	ldr	r3, [pc, #700]	; (8006c48 <UART_SetConfig+0x330>)
 800698c:	4013      	ands	r3, r2
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006994:	430b      	orrs	r3, r1
 8006996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	f023 010f 	bic.w	r1, r3, #15
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4aa6      	ldr	r2, [pc, #664]	; (8006c4c <UART_SetConfig+0x334>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d177      	bne.n	8006aa8 <UART_SetConfig+0x190>
 80069b8:	4ba5      	ldr	r3, [pc, #660]	; (8006c50 <UART_SetConfig+0x338>)
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c0:	2b28      	cmp	r3, #40	; 0x28
 80069c2:	d86d      	bhi.n	8006aa0 <UART_SetConfig+0x188>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0xb4>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	08006a71 	.word	0x08006a71
 80069d0:	08006aa1 	.word	0x08006aa1
 80069d4:	08006aa1 	.word	0x08006aa1
 80069d8:	08006aa1 	.word	0x08006aa1
 80069dc:	08006aa1 	.word	0x08006aa1
 80069e0:	08006aa1 	.word	0x08006aa1
 80069e4:	08006aa1 	.word	0x08006aa1
 80069e8:	08006aa1 	.word	0x08006aa1
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006aa1 	.word	0x08006aa1
 80069f4:	08006aa1 	.word	0x08006aa1
 80069f8:	08006aa1 	.word	0x08006aa1
 80069fc:	08006aa1 	.word	0x08006aa1
 8006a00:	08006aa1 	.word	0x08006aa1
 8006a04:	08006aa1 	.word	0x08006aa1
 8006a08:	08006aa1 	.word	0x08006aa1
 8006a0c:	08006a81 	.word	0x08006a81
 8006a10:	08006aa1 	.word	0x08006aa1
 8006a14:	08006aa1 	.word	0x08006aa1
 8006a18:	08006aa1 	.word	0x08006aa1
 8006a1c:	08006aa1 	.word	0x08006aa1
 8006a20:	08006aa1 	.word	0x08006aa1
 8006a24:	08006aa1 	.word	0x08006aa1
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006a89 	.word	0x08006a89
 8006a30:	08006aa1 	.word	0x08006aa1
 8006a34:	08006aa1 	.word	0x08006aa1
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006aa1 	.word	0x08006aa1
 8006a44:	08006aa1 	.word	0x08006aa1
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006a91 	.word	0x08006a91
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006aa1 	.word	0x08006aa1
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a76:	e222      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7e:	e21e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a86:	e21a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e216      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006a90:	2320      	movs	r3, #32
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e212      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e20e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e20a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a69      	ldr	r2, [pc, #420]	; (8006c54 <UART_SetConfig+0x33c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d130      	bne.n	8006b14 <UART_SetConfig+0x1fc>
 8006ab2:	4b67      	ldr	r3, [pc, #412]	; (8006c50 <UART_SetConfig+0x338>)
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d826      	bhi.n	8006b0c <UART_SetConfig+0x1f4>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0x1ac>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006add 	.word	0x08006add
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	08006aed 	.word	0x08006aed
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006afd 	.word	0x08006afd
 8006ad8:	08006b05 	.word	0x08006b05
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e1ec      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e1e8      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006aec:	2308      	movs	r3, #8
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e1e4      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006af4:	2310      	movs	r3, #16
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e1e0      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006afc:	2320      	movs	r3, #32
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e1dc      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e1d8      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e1d4      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a4f      	ldr	r2, [pc, #316]	; (8006c58 <UART_SetConfig+0x340>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d130      	bne.n	8006b80 <UART_SetConfig+0x268>
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <UART_SetConfig+0x338>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d826      	bhi.n	8006b78 <UART_SetConfig+0x260>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x218>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b49 	.word	0x08006b49
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b59 	.word	0x08006b59
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4e:	e1b6      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e1b2      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e1ae      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e1aa      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b68:	2320      	movs	r3, #32
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e1a6      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e1a2      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e19e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a35      	ldr	r2, [pc, #212]	; (8006c5c <UART_SetConfig+0x344>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d130      	bne.n	8006bec <UART_SetConfig+0x2d4>
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <UART_SetConfig+0x338>)
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d826      	bhi.n	8006be4 <UART_SetConfig+0x2cc>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x284>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bb5 	.word	0x08006bb5
 8006ba0:	08006bbd 	.word	0x08006bbd
 8006ba4:	08006bc5 	.word	0x08006bc5
 8006ba8:	08006bcd 	.word	0x08006bcd
 8006bac:	08006bd5 	.word	0x08006bd5
 8006bb0:	08006bdd 	.word	0x08006bdd
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bba:	e180      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc2:	e17c      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e178      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e174      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bd4:	2320      	movs	r3, #32
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e170      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e16c      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e168      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <UART_SetConfig+0x348>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d142      	bne.n	8006c7c <UART_SetConfig+0x364>
 8006bf6:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <UART_SetConfig+0x338>)
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d838      	bhi.n	8006c74 <UART_SetConfig+0x35c>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x2f0>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c21 	.word	0x08006c21
 8006c0c:	08006c29 	.word	0x08006c29
 8006c10:	08006c31 	.word	0x08006c31
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e14a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e146      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c30:	2308      	movs	r3, #8
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e142      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e13e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	58000c00 	.word	0x58000c00
 8006c48:	11fff4ff 	.word	0x11fff4ff
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	58024400 	.word	0x58024400
 8006c54:	40004400 	.word	0x40004400
 8006c58:	40004800 	.word	0x40004800
 8006c5c:	40004c00 	.word	0x40004c00
 8006c60:	40005000 	.word	0x40005000
 8006c64:	2320      	movs	r3, #32
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e128      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e124      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e120      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4acb      	ldr	r2, [pc, #812]	; (8006fb0 <UART_SetConfig+0x698>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d176      	bne.n	8006d74 <UART_SetConfig+0x45c>
 8006c86:	4bcb      	ldr	r3, [pc, #812]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c8e:	2b28      	cmp	r3, #40	; 0x28
 8006c90:	d86c      	bhi.n	8006d6c <UART_SetConfig+0x454>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x380>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006d3d 	.word	0x08006d3d
 8006c9c:	08006d6d 	.word	0x08006d6d
 8006ca0:	08006d6d 	.word	0x08006d6d
 8006ca4:	08006d6d 	.word	0x08006d6d
 8006ca8:	08006d6d 	.word	0x08006d6d
 8006cac:	08006d6d 	.word	0x08006d6d
 8006cb0:	08006d6d 	.word	0x08006d6d
 8006cb4:	08006d6d 	.word	0x08006d6d
 8006cb8:	08006d45 	.word	0x08006d45
 8006cbc:	08006d6d 	.word	0x08006d6d
 8006cc0:	08006d6d 	.word	0x08006d6d
 8006cc4:	08006d6d 	.word	0x08006d6d
 8006cc8:	08006d6d 	.word	0x08006d6d
 8006ccc:	08006d6d 	.word	0x08006d6d
 8006cd0:	08006d6d 	.word	0x08006d6d
 8006cd4:	08006d6d 	.word	0x08006d6d
 8006cd8:	08006d4d 	.word	0x08006d4d
 8006cdc:	08006d6d 	.word	0x08006d6d
 8006ce0:	08006d6d 	.word	0x08006d6d
 8006ce4:	08006d6d 	.word	0x08006d6d
 8006ce8:	08006d6d 	.word	0x08006d6d
 8006cec:	08006d6d 	.word	0x08006d6d
 8006cf0:	08006d6d 	.word	0x08006d6d
 8006cf4:	08006d6d 	.word	0x08006d6d
 8006cf8:	08006d55 	.word	0x08006d55
 8006cfc:	08006d6d 	.word	0x08006d6d
 8006d00:	08006d6d 	.word	0x08006d6d
 8006d04:	08006d6d 	.word	0x08006d6d
 8006d08:	08006d6d 	.word	0x08006d6d
 8006d0c:	08006d6d 	.word	0x08006d6d
 8006d10:	08006d6d 	.word	0x08006d6d
 8006d14:	08006d6d 	.word	0x08006d6d
 8006d18:	08006d5d 	.word	0x08006d5d
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d6d 	.word	0x08006d6d
 8006d28:	08006d6d 	.word	0x08006d6d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d42:	e0bc      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d44:	2304      	movs	r3, #4
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4a:	e0b8      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d52:	e0b4      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e0b0      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e0ac      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e0a8      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e0a4      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a8f      	ldr	r2, [pc, #572]	; (8006fb8 <UART_SetConfig+0x6a0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d130      	bne.n	8006de0 <UART_SetConfig+0x4c8>
 8006d7e:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	d826      	bhi.n	8006dd8 <UART_SetConfig+0x4c0>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0x478>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006da9 	.word	0x08006da9
 8006d94:	08006db1 	.word	0x08006db1
 8006d98:	08006db9 	.word	0x08006db9
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e086      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e082      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e07e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e07a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006dc8:	2320      	movs	r3, #32
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e076      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e072      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006dd8:	2380      	movs	r3, #128	; 0x80
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e06e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a75      	ldr	r2, [pc, #468]	; (8006fbc <UART_SetConfig+0x6a4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d130      	bne.n	8006e4c <UART_SetConfig+0x534>
 8006dea:	4b72      	ldr	r3, [pc, #456]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	d826      	bhi.n	8006e44 <UART_SetConfig+0x52c>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <UART_SetConfig+0x4e4>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e15 	.word	0x08006e15
 8006e00:	08006e1d 	.word	0x08006e1d
 8006e04:	08006e25 	.word	0x08006e25
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	2300      	movs	r3, #0
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e050      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e04c      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e24:	2308      	movs	r3, #8
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e048      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e044      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e34:	2320      	movs	r3, #32
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e040      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e03c      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e038      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a5b      	ldr	r2, [pc, #364]	; (8006fc0 <UART_SetConfig+0x6a8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d130      	bne.n	8006eb8 <UART_SetConfig+0x5a0>
 8006e56:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	d826      	bhi.n	8006eb0 <UART_SetConfig+0x598>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <UART_SetConfig+0x550>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	08006e91 	.word	0x08006e91
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	2302      	movs	r3, #2
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e01a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e016      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e90:	2308      	movs	r3, #8
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e012      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e00e      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e00a      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006ea8:	2340      	movs	r3, #64	; 0x40
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e006      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e002      	b.n	8006ebe <UART_SetConfig+0x5a6>
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a3f      	ldr	r2, [pc, #252]	; (8006fc0 <UART_SetConfig+0x6a8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	f040 80f8 	bne.w	80070ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	dc46      	bgt.n	8006f60 <UART_SetConfig+0x648>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	f2c0 8082 	blt.w	8006fdc <UART_SetConfig+0x6c4>
 8006ed8:	3b02      	subs	r3, #2
 8006eda:	2b1e      	cmp	r3, #30
 8006edc:	d87e      	bhi.n	8006fdc <UART_SetConfig+0x6c4>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x5cc>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f67 	.word	0x08006f67
 8006ee8:	08006fdd 	.word	0x08006fdd
 8006eec:	08006f6f 	.word	0x08006f6f
 8006ef0:	08006fdd 	.word	0x08006fdd
 8006ef4:	08006fdd 	.word	0x08006fdd
 8006ef8:	08006fdd 	.word	0x08006fdd
 8006efc:	08006f7f 	.word	0x08006f7f
 8006f00:	08006fdd 	.word	0x08006fdd
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	08006fdd 	.word	0x08006fdd
 8006f0c:	08006fdd 	.word	0x08006fdd
 8006f10:	08006fdd 	.word	0x08006fdd
 8006f14:	08006fdd 	.word	0x08006fdd
 8006f18:	08006fdd 	.word	0x08006fdd
 8006f1c:	08006f8f 	.word	0x08006f8f
 8006f20:	08006fdd 	.word	0x08006fdd
 8006f24:	08006fdd 	.word	0x08006fdd
 8006f28:	08006fdd 	.word	0x08006fdd
 8006f2c:	08006fdd 	.word	0x08006fdd
 8006f30:	08006fdd 	.word	0x08006fdd
 8006f34:	08006fdd 	.word	0x08006fdd
 8006f38:	08006fdd 	.word	0x08006fdd
 8006f3c:	08006fdd 	.word	0x08006fdd
 8006f40:	08006fdd 	.word	0x08006fdd
 8006f44:	08006fdd 	.word	0x08006fdd
 8006f48:	08006fdd 	.word	0x08006fdd
 8006f4c:	08006fdd 	.word	0x08006fdd
 8006f50:	08006fdd 	.word	0x08006fdd
 8006f54:	08006fdd 	.word	0x08006fdd
 8006f58:	08006fdd 	.word	0x08006fdd
 8006f5c:	08006fcf 	.word	0x08006fcf
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d037      	beq.n	8006fd4 <UART_SetConfig+0x6bc>
 8006f64:	e03a      	b.n	8006fdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f66:	f7fd feb1 	bl	8004ccc <HAL_RCCEx_GetD3PCLK1Freq>
 8006f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f6c:	e03c      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fec0 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7c:	e034      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe f80c 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e02c      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <UART_SetConfig+0x69c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	08db      	lsrs	r3, r3, #3
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	4a07      	ldr	r2, [pc, #28]	; (8006fc4 <UART_SetConfig+0x6ac>)
 8006fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fac:	e01c      	b.n	8006fe8 <UART_SetConfig+0x6d0>
 8006fae:	bf00      	nop
 8006fb0:	40011400 	.word	0x40011400
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	40007800 	.word	0x40007800
 8006fbc:	40007c00 	.word	0x40007c00
 8006fc0:	58000c00 	.word	0x58000c00
 8006fc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b9d      	ldr	r3, [pc, #628]	; (8007240 <UART_SetConfig+0x928>)
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fcc:	e00c      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fce:	4b9d      	ldr	r3, [pc, #628]	; (8007244 <UART_SetConfig+0x92c>)
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd2:	e009      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fda:	e005      	b.n	8006fe8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fe6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 81de 	beq.w	80073ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	4a94      	ldr	r2, [pc, #592]	; (8007248 <UART_SetConfig+0x930>)
 8006ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007002:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	4413      	add	r3, r2
 800700e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007010:	429a      	cmp	r2, r3
 8007012:	d305      	bcc.n	8007020 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800701a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701c:	429a      	cmp	r2, r3
 800701e:	d903      	bls.n	8007028 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007026:	e1c1      	b.n	80073ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702a:	2200      	movs	r2, #0
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	60fa      	str	r2, [r7, #12]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	4a84      	ldr	r2, [pc, #528]	; (8007248 <UART_SetConfig+0x930>)
 8007036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800703a:	b29b      	uxth	r3, r3
 800703c:	2200      	movs	r2, #0
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800704a:	f7f9 f945 	bl	80002d8 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4610      	mov	r0, r2
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	020b      	lsls	r3, r1, #8
 8007060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007064:	0202      	lsls	r2, r0, #8
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	6849      	ldr	r1, [r1, #4]
 800706a:	0849      	lsrs	r1, r1, #1
 800706c:	2000      	movs	r0, #0
 800706e:	460c      	mov	r4, r1
 8007070:	4605      	mov	r5, r0
 8007072:	eb12 0804 	adds.w	r8, r2, r4
 8007076:	eb43 0905 	adc.w	r9, r3, r5
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	469a      	mov	sl, r3
 8007082:	4693      	mov	fp, r2
 8007084:	4652      	mov	r2, sl
 8007086:	465b      	mov	r3, fp
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f924 	bl	80002d8 <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4613      	mov	r3, r2
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709e:	d308      	bcc.n	80070b2 <UART_SetConfig+0x79a>
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d204      	bcs.n	80070b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e17c      	b.n	80073ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070b8:	e178      	b.n	80073ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c2:	f040 80c5 	bne.w	8007250 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80070c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	dc48      	bgt.n	8007160 <UART_SetConfig+0x848>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	db7b      	blt.n	80071ca <UART_SetConfig+0x8b2>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d879      	bhi.n	80071ca <UART_SetConfig+0x8b2>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x7c4>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007167 	.word	0x08007167
 80070e0:	0800716f 	.word	0x0800716f
 80070e4:	080071cb 	.word	0x080071cb
 80070e8:	080071cb 	.word	0x080071cb
 80070ec:	08007177 	.word	0x08007177
 80070f0:	080071cb 	.word	0x080071cb
 80070f4:	080071cb 	.word	0x080071cb
 80070f8:	080071cb 	.word	0x080071cb
 80070fc:	08007187 	.word	0x08007187
 8007100:	080071cb 	.word	0x080071cb
 8007104:	080071cb 	.word	0x080071cb
 8007108:	080071cb 	.word	0x080071cb
 800710c:	080071cb 	.word	0x080071cb
 8007110:	080071cb 	.word	0x080071cb
 8007114:	080071cb 	.word	0x080071cb
 8007118:	080071cb 	.word	0x080071cb
 800711c:	08007197 	.word	0x08007197
 8007120:	080071cb 	.word	0x080071cb
 8007124:	080071cb 	.word	0x080071cb
 8007128:	080071cb 	.word	0x080071cb
 800712c:	080071cb 	.word	0x080071cb
 8007130:	080071cb 	.word	0x080071cb
 8007134:	080071cb 	.word	0x080071cb
 8007138:	080071cb 	.word	0x080071cb
 800713c:	080071cb 	.word	0x080071cb
 8007140:	080071cb 	.word	0x080071cb
 8007144:	080071cb 	.word	0x080071cb
 8007148:	080071cb 	.word	0x080071cb
 800714c:	080071cb 	.word	0x080071cb
 8007150:	080071cb 	.word	0x080071cb
 8007154:	080071cb 	.word	0x080071cb
 8007158:	080071cb 	.word	0x080071cb
 800715c:	080071bd 	.word	0x080071bd
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d02e      	beq.n	80071c2 <UART_SetConfig+0x8aa>
 8007164:	e031      	b.n	80071ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fc fe3f 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 800716a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800716c:	e033      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800716e:	f7fc fe51 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8007172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007174:	e02f      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717a:	4618      	mov	r0, r3
 800717c:	f7fd fdbc 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007184:	e027      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd ff08 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007194:	e01f      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007196:	4b2d      	ldr	r3, [pc, #180]	; (800724c <UART_SetConfig+0x934>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <UART_SetConfig+0x934>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	08db      	lsrs	r3, r3, #3
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	4a24      	ldr	r2, [pc, #144]	; (8007240 <UART_SetConfig+0x928>)
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071b4:	e00f      	b.n	80071d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <UART_SetConfig+0x928>)
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ba:	e00c      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071bc:	4b21      	ldr	r3, [pc, #132]	; (8007244 <UART_SetConfig+0x92c>)
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c0:	e009      	b.n	80071d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e005      	b.n	80071d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80e7 	beq.w	80073ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	4a19      	ldr	r2, [pc, #100]	; (8007248 <UART_SetConfig+0x930>)
 80071e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f0:	005a      	lsls	r2, r3, #1
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	441a      	add	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d916      	bls.n	8007238 <UART_SetConfig+0x920>
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d212      	bcs.n	8007238 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	b29b      	uxth	r3, r3
 8007216:	f023 030f 	bic.w	r3, r3, #15
 800721a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	085b      	lsrs	r3, r3, #1
 8007220:	b29b      	uxth	r3, r3
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	b29a      	uxth	r2, r3
 8007228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800722a:	4313      	orrs	r3, r2
 800722c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007234:	60da      	str	r2, [r3, #12]
 8007236:	e0b9      	b.n	80073ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800723e:	e0b5      	b.n	80073ac <UART_SetConfig+0xa94>
 8007240:	03d09000 	.word	0x03d09000
 8007244:	003d0900 	.word	0x003d0900
 8007248:	08007fec 	.word	0x08007fec
 800724c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007250:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007254:	2b20      	cmp	r3, #32
 8007256:	dc49      	bgt.n	80072ec <UART_SetConfig+0x9d4>
 8007258:	2b00      	cmp	r3, #0
 800725a:	db7c      	blt.n	8007356 <UART_SetConfig+0xa3e>
 800725c:	2b20      	cmp	r3, #32
 800725e:	d87a      	bhi.n	8007356 <UART_SetConfig+0xa3e>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x950>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	080072f3 	.word	0x080072f3
 800726c:	080072fb 	.word	0x080072fb
 8007270:	08007357 	.word	0x08007357
 8007274:	08007357 	.word	0x08007357
 8007278:	08007303 	.word	0x08007303
 800727c:	08007357 	.word	0x08007357
 8007280:	08007357 	.word	0x08007357
 8007284:	08007357 	.word	0x08007357
 8007288:	08007313 	.word	0x08007313
 800728c:	08007357 	.word	0x08007357
 8007290:	08007357 	.word	0x08007357
 8007294:	08007357 	.word	0x08007357
 8007298:	08007357 	.word	0x08007357
 800729c:	08007357 	.word	0x08007357
 80072a0:	08007357 	.word	0x08007357
 80072a4:	08007357 	.word	0x08007357
 80072a8:	08007323 	.word	0x08007323
 80072ac:	08007357 	.word	0x08007357
 80072b0:	08007357 	.word	0x08007357
 80072b4:	08007357 	.word	0x08007357
 80072b8:	08007357 	.word	0x08007357
 80072bc:	08007357 	.word	0x08007357
 80072c0:	08007357 	.word	0x08007357
 80072c4:	08007357 	.word	0x08007357
 80072c8:	08007357 	.word	0x08007357
 80072cc:	08007357 	.word	0x08007357
 80072d0:	08007357 	.word	0x08007357
 80072d4:	08007357 	.word	0x08007357
 80072d8:	08007357 	.word	0x08007357
 80072dc:	08007357 	.word	0x08007357
 80072e0:	08007357 	.word	0x08007357
 80072e4:	08007357 	.word	0x08007357
 80072e8:	08007349 	.word	0x08007349
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d02e      	beq.n	800734e <UART_SetConfig+0xa36>
 80072f0:	e031      	b.n	8007356 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f2:	f7fc fd79 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 80072f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072f8:	e033      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072fa:	f7fc fd8b 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 80072fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007300:	e02f      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd fcf6 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007310:	e027      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007312:	f107 0318 	add.w	r3, r7, #24
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd fe42 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007320:	e01f      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007322:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <UART_SetConfig+0xac0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800732e:	4b2a      	ldr	r3, [pc, #168]	; (80073d8 <UART_SetConfig+0xac0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	08db      	lsrs	r3, r3, #3
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	4a28      	ldr	r2, [pc, #160]	; (80073dc <UART_SetConfig+0xac4>)
 800733a:	fa22 f303 	lsr.w	r3, r2, r3
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007340:	e00f      	b.n	8007362 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <UART_SetConfig+0xac4>)
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007346:	e00c      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <UART_SetConfig+0xac8>)
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800734c:	e009      	b.n	8007362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007354:	e005      	b.n	8007362 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007360:	bf00      	nop
    }

    if (pclk != 0U)
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d021      	beq.n	80073ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <UART_SetConfig+0xacc>)
 800736e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007372:	461a      	mov	r2, r3
 8007374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007376:	fbb3 f2f2 	udiv	r2, r3, r2
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	441a      	add	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d909      	bls.n	80073a6 <UART_SetConfig+0xa8e>
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	d205      	bcs.n	80073a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	b29a      	uxth	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	e002      	b.n	80073ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80073c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3748      	adds	r7, #72	; 0x48
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
 80073dc:	03d09000 	.word	0x03d09000
 80073e0:	003d0900 	.word	0x003d0900
 80073e4:	08007fec 	.word	0x08007fec

080073e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01a      	beq.n	80074fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e6:	d10a      	bne.n	80074fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af02      	add	r7, sp, #8
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800753c:	f7fa f938 	bl	80017b0 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b08      	cmp	r3, #8
 800754e:	d10e      	bne.n	800756e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f82f 	bl	80075c2 <UART_WaitOnFlagUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e025      	b.n	80075ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b04      	cmp	r3, #4
 800757a:	d10e      	bne.n	800759a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f819 	bl	80075c2 <UART_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e00f      	b.n	80075ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b09c      	sub	sp, #112	; 0x70
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d2:	e0a9      	b.n	8007728 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	f000 80a5 	beq.w	8007728 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fa f8e7 	bl	80017b0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80075ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d140      	bne.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007608:	667b      	str	r3, [r7, #100]	; 0x64
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007614:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e6      	bne.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	663b      	str	r3, [r7, #96]	; 0x60
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007646:	64ba      	str	r2, [r7, #72]	; 0x48
 8007648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800764c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e069      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d051      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007692:	d149      	bne.n	8007728 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800769c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
 80076be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e6      	bne.n	800769e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3308      	adds	r3, #8
 80076d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	613b      	str	r3, [r7, #16]
   return(result);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076f0:	623a      	str	r2, [r7, #32]
 80076f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	6a3a      	ldr	r2, [r7, #32]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e010      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69da      	ldr	r2, [r3, #28]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	429a      	cmp	r2, r3
 8007744:	f43f af46 	beq.w	80075d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3770      	adds	r7, #112	; 0x70
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_UARTEx_DisableFifoMode+0x16>
 8007764:	2302      	movs	r3, #2
 8007766:	e027      	b.n	80077b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	; 0x24
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007796:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077d8:	2302      	movs	r3, #2
 80077da:	e02d      	b.n	8007838 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2224      	movs	r2, #36	; 0x24
 80077e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f84f 	bl	80078bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007854:	2302      	movs	r3, #2
 8007856:	e02d      	b.n	80078b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2224      	movs	r2, #36	; 0x24
 8007864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0201 	bic.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f811 	bl	80078bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078dc:	e031      	b.n	8007942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078de:	2310      	movs	r3, #16
 80078e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078e2:	2310      	movs	r3, #16
 80078e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	0e5b      	lsrs	r3, r3, #25
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	0f5b      	lsrs	r3, r3, #29
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	7b3a      	ldrb	r2, [r7, #12]
 800790a:	4911      	ldr	r1, [pc, #68]	; (8007950 <UARTEx_SetNbDataToProcess+0x94>)
 800790c:	5c8a      	ldrb	r2, [r1, r2]
 800790e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007912:	7b3a      	ldrb	r2, [r7, #12]
 8007914:	490f      	ldr	r1, [pc, #60]	; (8007954 <UARTEx_SetNbDataToProcess+0x98>)
 8007916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007918:	fb93 f3f2 	sdiv	r3, r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	7b7a      	ldrb	r2, [r7, #13]
 8007928:	4909      	ldr	r1, [pc, #36]	; (8007950 <UARTEx_SetNbDataToProcess+0x94>)
 800792a:	5c8a      	ldrb	r2, [r1, r2]
 800792c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007930:	7b7a      	ldrb	r2, [r7, #13]
 8007932:	4908      	ldr	r1, [pc, #32]	; (8007954 <UARTEx_SetNbDataToProcess+0x98>)
 8007934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007936:	fb93 f3f2 	sdiv	r3, r3, r2
 800793a:	b29a      	uxth	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	08008004 	.word	0x08008004
 8007954:	0800800c 	.word	0x0800800c

08007958 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007958:	b084      	sub	sp, #16
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	f107 001c 	add.w	r0, r7, #28
 8007966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	2b01      	cmp	r3, #1
 800796e:	d120      	bne.n	80079b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <USB_CoreInit+0xd4>)
 8007982:	4013      	ands	r3, r2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d105      	bne.n	80079a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 faac 	bl	8007f04 <USB_CoreReset>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	e01a      	b.n	80079e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 faa0 	bl	8007f04 <USB_CoreReset>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38
 80079da:	e005      	b.n	80079e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d116      	bne.n	8007a1c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <USB_CoreInit+0xd8>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f043 0206 	orr.w	r2, r3, #6
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a28:	b004      	add	sp, #16
 8007a2a:	4770      	bx	lr
 8007a2c:	ffbdffbf 	.word	0xffbdffbf
 8007a30:	03ee0000 	.word	0x03ee0000

08007a34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f023 0201 	bic.w	r2, r3, #1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d115      	bne.n	8007aa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7f9 fe9f 	bl	80017c8 <HAL_Delay>
      ms++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa29 	bl	8007ee8 <USB_GetMode>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d01e      	beq.n	8007ada <USB_SetCurrentMode+0x84>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b31      	cmp	r3, #49	; 0x31
 8007aa0:	d9f0      	bls.n	8007a84 <USB_SetCurrentMode+0x2e>
 8007aa2:	e01a      	b.n	8007ada <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d115      	bne.n	8007ad6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	f7f9 fe86 	bl	80017c8 <HAL_Delay>
      ms++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa10 	bl	8007ee8 <USB_GetMode>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USB_SetCurrentMode+0x84>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b31      	cmp	r3, #49	; 0x31
 8007ad2:	d9f0      	bls.n	8007ab6 <USB_SetCurrentMode+0x60>
 8007ad4:	e001      	b.n	8007ada <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e005      	b.n	8007ae6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b32      	cmp	r3, #50	; 0x32
 8007ade:	d101      	bne.n	8007ae4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007af0:	b084      	sub	sp, #16
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	e009      	b.n	8007b24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3340      	adds	r3, #64	; 0x40
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	3301      	adds	r3, #1
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b0e      	cmp	r3, #14
 8007b28:	d9f2      	bls.n	8007b10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b3e:	f043 0302 	orr.w	r3, r3, #2
 8007b42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	e005      	b.n	8007b76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b88:	4619      	mov	r1, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b90:	461a      	mov	r2, r3
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d10c      	bne.n	8007bb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f965 	bl	8007e74 <USB_SetDevSpeed>
 8007baa:	e008      	b.n	8007bbe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f960 	bl	8007e74 <USB_SetDevSpeed>
 8007bb4:	e003      	b.n	8007bbe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bb6:	2103      	movs	r1, #3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f95b 	bl	8007e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bbe:	2110      	movs	r1, #16
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8f3 	bl	8007dac <USB_FlushTxFifo>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f91f 	bl	8007e14 <USB_FlushRxFifo>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	461a      	mov	r2, r3
 8007be8:	2300      	movs	r3, #0
 8007bea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	e043      	b.n	8007c92 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c20:	d118      	bne.n	8007c54 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	461a      	mov	r2, r3
 8007c36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	e013      	b.n	8007c66 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e008      	b.n	8007c66 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	461a      	mov	r2, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c72:	461a      	mov	r2, r3
 8007c74:	2300      	movs	r3, #0
 8007c76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c84:	461a      	mov	r2, r3
 8007c86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d3b7      	bcc.n	8007c0a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	e043      	b.n	8007d28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb6:	d118      	bne.n	8007cea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e013      	b.n	8007cfc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e008      	b.n	8007cfc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3301      	adds	r3, #1
 8007d26:	613b      	str	r3, [r7, #16]
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d3b7      	bcc.n	8007ca0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f043 0210 	orr.w	r2, r3, #16
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <USB_DevInit+0x2b4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	f043 0208 	orr.w	r2, r3, #8
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d105      	bne.n	8007d94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <USB_DevInit+0x2b8>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007da0:	b004      	add	sp, #16
 8007da2:	4770      	bx	lr
 8007da4:	803c3800 	.word	0x803c3800
 8007da8:	40000004 	.word	0x40000004

08007dac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a13      	ldr	r2, [pc, #76]	; (8007e10 <USB_FlushTxFifo+0x64>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d901      	bls.n	8007dcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e01b      	b.n	8007e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	daf2      	bge.n	8007dba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	019b      	lsls	r3, r3, #6
 8007ddc:	f043 0220 	orr.w	r2, r3, #32
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <USB_FlushTxFifo+0x64>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d0f0      	beq.n	8007de4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	00030d40 	.word	0x00030d40

08007e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4a11      	ldr	r2, [pc, #68]	; (8007e70 <USB_FlushRxFifo+0x5c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d901      	bls.n	8007e32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e018      	b.n	8007e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	daf2      	bge.n	8007e20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2210      	movs	r2, #16
 8007e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <USB_FlushRxFifo+0x5c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e006      	b.n	8007e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d0f0      	beq.n	8007e44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	00030d40 	.word	0x00030d40

08007e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e94:	4313      	orrs	r3, r2
 8007e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed4:	f043 0302 	orr.w	r3, r3, #2
 8007ed8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <USB_CoreReset+0x64>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e01b      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	daf2      	bge.n	8007f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <USB_CoreReset+0x64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d0f0      	beq.n	8007f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	00030d40 	.word	0x00030d40

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4d0d      	ldr	r5, [pc, #52]	; (8007fa4 <__libc_init_array+0x38>)
 8007f70:	4c0d      	ldr	r4, [pc, #52]	; (8007fa8 <__libc_init_array+0x3c>)
 8007f72:	1b64      	subs	r4, r4, r5
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	2600      	movs	r6, #0
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	4d0b      	ldr	r5, [pc, #44]	; (8007fac <__libc_init_array+0x40>)
 8007f7e:	4c0c      	ldr	r4, [pc, #48]	; (8007fb0 <__libc_init_array+0x44>)
 8007f80:	f000 f820 	bl	8007fc4 <_init>
 8007f84:	1b64      	subs	r4, r4, r5
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	2600      	movs	r6, #0
 8007f8a:	42a6      	cmp	r6, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f94:	4798      	blx	r3
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9e:	4798      	blx	r3
 8007fa0:	3601      	adds	r6, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	0800801c 	.word	0x0800801c
 8007fa8:	0800801c 	.word	0x0800801c
 8007fac:	0800801c 	.word	0x0800801c
 8007fb0:	08008020 	.word	0x08008020

08007fb4 <memset>:
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
