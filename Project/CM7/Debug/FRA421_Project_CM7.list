
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b618  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b8b0  0800b8b0  0001b8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f0  0800b8f0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f8  0800b8f8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f8  0800b8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8fc  0800b8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800b900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800b984  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800b9e4  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c90c  24000144  0800ba44  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400ca50  0800ba44  0002ca50  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f01a  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000347f  00000000  00000000  0003f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001378  00000000  00000000  00042610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001230  00000000  00000000  00043988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bdcb  00000000  00000000  00044bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bbc4  00000000  00000000  00080983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001852d8  00000000  00000000  0009c547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0022181f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053f4  00000000  00000000  00221870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000144 	.word	0x24000144
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b898 	.word	0x0800b898

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000148 	.word	0x24000148
 80002d4:	0800b898 	.word	0x0800b898

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <BMPDecoder>:
} Convert8_32;

#define IMG_W 128
#define IMG_H 128
static stateBMP State = 0;
void BMPDecoder(uint8_t dataIn, uint8_t *array) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]

	static Convert8_32 size, StartPoint, HeaderSize, PW, PH, BPS;
	static uint32_t Substate, offset, imageSize;

	switch (State) {
 8000714:	4b98      	ldr	r3, [pc, #608]	; (8000978 <BMPDecoder+0x270>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b0c      	cmp	r3, #12
 800071a:	f200 81ac 	bhi.w	8000a76 <BMPDecoder+0x36e>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <BMPDecoder+0x1c>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000759 	.word	0x08000759
 8000728:	08000773 	.word	0x08000773
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007bb 	.word	0x080007bb
 8000734:	080007dd 	.word	0x080007dd
 8000738:	08000809 	.word	0x08000809
 800073c:	08000845 	.word	0x08000845
 8000740:	08000871 	.word	0x08000871
 8000744:	0800089d 	.word	0x0800089d
 8000748:	080008bf 	.word	0x080008bf
 800074c:	080008eb 	.word	0x080008eb
 8000750:	0800090d 	.word	0x0800090d
 8000754:	08000a37 	.word	0x08000a37
	case BMP_idle:

		if (dataIn == 0x42) {
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b42      	cmp	r3, #66	; 0x42
 800075c:	d102      	bne.n	8000764 <BMPDecoder+0x5c>
			State = BMP_Header_2;
 800075e:	4b86      	ldr	r3, [pc, #536]	; (8000978 <BMPDecoder+0x270>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]

		}
		Substate = 0;
 8000764:	4b85      	ldr	r3, [pc, #532]	; (800097c <BMPDecoder+0x274>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
		offset = 0;
 800076a:	4b85      	ldr	r3, [pc, #532]	; (8000980 <BMPDecoder+0x278>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
		break;
 8000770:	e181      	b.n	8000a76 <BMPDecoder+0x36e>

	case BMP_Header_2:
		if (dataIn == 0x4D) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b4d      	cmp	r3, #77	; 0x4d
 8000776:	d106      	bne.n	8000786 <BMPDecoder+0x7e>
			State = BMP_Size_4;
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <BMPDecoder+0x270>)
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 800077e:	4b7f      	ldr	r3, [pc, #508]	; (800097c <BMPDecoder+0x274>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
		} else {
			State = BMP_idle;
		}
		break;
 8000784:	e177      	b.n	8000a76 <BMPDecoder+0x36e>
			State = BMP_idle;
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <BMPDecoder+0x270>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e173      	b.n	8000a76 <BMPDecoder+0x36e>
	case BMP_Size_4:
		size.U8[Substate] = dataIn;
 800078e:	4b7b      	ldr	r3, [pc, #492]	; (800097c <BMPDecoder+0x274>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	497c      	ldr	r1, [pc, #496]	; (8000984 <BMPDecoder+0x27c>)
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000798:	4b78      	ldr	r3, [pc, #480]	; (800097c <BMPDecoder+0x274>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a77      	ldr	r2, [pc, #476]	; (800097c <BMPDecoder+0x274>)
 80007a0:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007a2:	4b76      	ldr	r3, [pc, #472]	; (800097c <BMPDecoder+0x274>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	f040 8150 	bne.w	8000a4c <BMPDecoder+0x344>
			State = BMP_Reserved0_4;
 80007ac:	4b72      	ldr	r3, [pc, #456]	; (8000978 <BMPDecoder+0x270>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <BMPDecoder+0x274>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b8:	e148      	b.n	8000a4c <BMPDecoder+0x344>
	case BMP_Reserved0_4:
		Substate++;
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <BMPDecoder+0x274>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a6e      	ldr	r2, [pc, #440]	; (800097c <BMPDecoder+0x274>)
 80007c2:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007c4:	4b6d      	ldr	r3, [pc, #436]	; (800097c <BMPDecoder+0x274>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	f040 8141 	bne.w	8000a50 <BMPDecoder+0x348>
			State = BMP_Imagestartpoint_4;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <BMPDecoder+0x270>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007d4:	4b69      	ldr	r3, [pc, #420]	; (800097c <BMPDecoder+0x274>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007da:	e139      	b.n	8000a50 <BMPDecoder+0x348>

	case BMP_Imagestartpoint_4:
		StartPoint.U8[Substate] = dataIn;
 80007dc:	4b67      	ldr	r3, [pc, #412]	; (800097c <BMPDecoder+0x274>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4969      	ldr	r1, [pc, #420]	; (8000988 <BMPDecoder+0x280>)
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007e6:	4b65      	ldr	r3, [pc, #404]	; (800097c <BMPDecoder+0x274>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a63      	ldr	r2, [pc, #396]	; (800097c <BMPDecoder+0x274>)
 80007ee:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007f0:	4b62      	ldr	r3, [pc, #392]	; (800097c <BMPDecoder+0x274>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	f040 812d 	bne.w	8000a54 <BMPDecoder+0x34c>
			State = BMP_SizeHeader_4;
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <BMPDecoder+0x270>)
 80007fc:	2205      	movs	r2, #5
 80007fe:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000800:	4b5e      	ldr	r3, [pc, #376]	; (800097c <BMPDecoder+0x274>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		}
		break;
 8000806:	e125      	b.n	8000a54 <BMPDecoder+0x34c>

	case BMP_SizeHeader_4:
		HeaderSize.U8[Substate] = dataIn;
 8000808:	4b5c      	ldr	r3, [pc, #368]	; (800097c <BMPDecoder+0x274>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	495f      	ldr	r1, [pc, #380]	; (800098c <BMPDecoder+0x284>)
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000812:	4b5a      	ldr	r3, [pc, #360]	; (800097c <BMPDecoder+0x274>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a58      	ldr	r2, [pc, #352]	; (800097c <BMPDecoder+0x274>)
 800081a:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 800081c:	4b57      	ldr	r3, [pc, #348]	; (800097c <BMPDecoder+0x274>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b04      	cmp	r3, #4
 8000822:	f040 8119 	bne.w	8000a58 <BMPDecoder+0x350>
			if (HeaderSize.U32 == 40) {
 8000826:	4b59      	ldr	r3, [pc, #356]	; (800098c <BMPDecoder+0x284>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b28      	cmp	r3, #40	; 0x28
 800082c:	d106      	bne.n	800083c <BMPDecoder+0x134>
				State = BMP_PicWidth_4;
 800082e:	4b52      	ldr	r3, [pc, #328]	; (8000978 <BMPDecoder+0x270>)
 8000830:	2206      	movs	r2, #6
 8000832:	701a      	strb	r2, [r3, #0]
				Substate = 0;
 8000834:	4b51      	ldr	r3, [pc, #324]	; (800097c <BMPDecoder+0x274>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
			} else {
				State = BMP_idle;
			}
		}
		break;
 800083a:	e10d      	b.n	8000a58 <BMPDecoder+0x350>
				State = BMP_idle;
 800083c:	4b4e      	ldr	r3, [pc, #312]	; (8000978 <BMPDecoder+0x270>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
		break;
 8000842:	e109      	b.n	8000a58 <BMPDecoder+0x350>
	case BMP_PicWidth_4:
		PW.U8[Substate] = dataIn;
 8000844:	4b4d      	ldr	r3, [pc, #308]	; (800097c <BMPDecoder+0x274>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4951      	ldr	r1, [pc, #324]	; (8000990 <BMPDecoder+0x288>)
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <BMPDecoder+0x274>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a49      	ldr	r2, [pc, #292]	; (800097c <BMPDecoder+0x274>)
 8000856:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000858:	4b48      	ldr	r3, [pc, #288]	; (800097c <BMPDecoder+0x274>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b04      	cmp	r3, #4
 800085e:	f040 80fd 	bne.w	8000a5c <BMPDecoder+0x354>
			State = BMP_PicHeight_4;
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <BMPDecoder+0x270>)
 8000864:	2207      	movs	r2, #7
 8000866:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000868:	4b44      	ldr	r3, [pc, #272]	; (800097c <BMPDecoder+0x274>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
		}
		break;
 800086e:	e0f5      	b.n	8000a5c <BMPDecoder+0x354>
	case BMP_PicHeight_4:
		PH.U8[Substate] = dataIn;
 8000870:	4b42      	ldr	r3, [pc, #264]	; (800097c <BMPDecoder+0x274>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4947      	ldr	r1, [pc, #284]	; (8000994 <BMPDecoder+0x28c>)
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <BMPDecoder+0x274>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a3e      	ldr	r2, [pc, #248]	; (800097c <BMPDecoder+0x274>)
 8000882:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000884:	4b3d      	ldr	r3, [pc, #244]	; (800097c <BMPDecoder+0x274>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b04      	cmp	r3, #4
 800088a:	f040 80e9 	bne.w	8000a60 <BMPDecoder+0x358>
			State = BMP_ColorPlanes_2;
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <BMPDecoder+0x270>)
 8000890:	2208      	movs	r2, #8
 8000892:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <BMPDecoder+0x274>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
		}
		break;
 800089a:	e0e1      	b.n	8000a60 <BMPDecoder+0x358>
	case BMP_ColorPlanes_2:

		Substate++;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <BMPDecoder+0x274>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a36      	ldr	r2, [pc, #216]	; (800097c <BMPDecoder+0x274>)
 80008a4:	6013      	str	r3, [r2, #0]
		if (Substate == 2) {
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <BMPDecoder+0x274>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f040 80da 	bne.w	8000a64 <BMPDecoder+0x35c>
			State = BMP_BitPerPixel_2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <BMPDecoder+0x270>)
 80008b2:	2209      	movs	r2, #9
 80008b4:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <BMPDecoder+0x274>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
		}
		break;
 80008bc:	e0d2      	b.n	8000a64 <BMPDecoder+0x35c>
	case BMP_BitPerPixel_2:
		BPS.U8[Substate] = dataIn;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <BMPDecoder+0x274>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4935      	ldr	r1, [pc, #212]	; (8000998 <BMPDecoder+0x290>)
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <BMPDecoder+0x274>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <BMPDecoder+0x274>)
 80008d0:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <BMPDecoder+0x274>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	f040 80c6 	bne.w	8000a68 <BMPDecoder+0x360>
			State = BMP_Notused1_n;
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <BMPDecoder+0x270>)
 80008de:	220a      	movs	r2, #10
 80008e0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <BMPDecoder+0x274>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e8:	e0be      	b.n	8000a68 <BMPDecoder+0x360>
	case BMP_Notused1_n:
		if (offset == StartPoint.U32) {
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <BMPDecoder+0x280>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <BMPDecoder+0x278>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	f040 80ba 	bne.w	8000a6c <BMPDecoder+0x364>
			State = BMP_Pixeldata_n;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <BMPDecoder+0x270>)
 80008fa:	220b      	movs	r2, #11
 80008fc:	701a      	strb	r2, [r3, #0]
			array[0] = dataIn;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	701a      	strb	r2, [r3, #0]
			Substate = 1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <BMPDecoder+0x274>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
		}
		break;
 800090a:	e0af      	b.n	8000a6c <BMPDecoder+0x364>
	case BMP_Pixeldata_n:
		if ((Substate / (IMG_W * 3)) < PH.U32) {
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <BMPDecoder+0x274>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <BMPDecoder+0x294>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0a1a      	lsrs	r2, r3, #8
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <BMPDecoder+0x28c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d268      	bcs.n	80009f2 <BMPDecoder+0x2ea>

			if ((Substate % (IMG_W * 3)) < (PW.U32 * 3)) {
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <BMPDecoder+0x274>)
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <BMPDecoder+0x294>)
 8000926:	fba3 2301 	umull	r2, r3, r3, r1
 800092a:	0a1a      	lsrs	r2, r3, #8
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	01db      	lsls	r3, r3, #7
 8000934:	1aca      	subs	r2, r1, r3
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <BMPDecoder+0x288>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	460b      	mov	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	440b      	add	r3, r1
 8000940:	429a      	cmp	r2, r3
 8000942:	d209      	bcs.n	8000958 <BMPDecoder+0x250>
				array[Substate++] = dataIn;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <BMPDecoder+0x274>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <BMPDecoder+0x274>)
 800094c:	600a      	str	r2, [r1, #0]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e054      	b.n	8000a02 <BMPDecoder+0x2fa>
			}
			else if(((Substate) % 4))
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <BMPDecoder+0x274>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d026      	beq.n	80009b2 <BMPDecoder+0x2aa>
			{
				array[Substate++] = dataIn;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <BMPDecoder+0x274>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	4904      	ldr	r1, [pc, #16]	; (800097c <BMPDecoder+0x274>)
 800096c:	600a      	str	r2, [r1, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e044      	b.n	8000a02 <BMPDecoder+0x2fa>
 8000978:	24000160 	.word	0x24000160
 800097c:	24000164 	.word	0x24000164
 8000980:	24000168 	.word	0x24000168
 8000984:	2400016c 	.word	0x2400016c
 8000988:	24000170 	.word	0x24000170
 800098c:	24000174 	.word	0x24000174
 8000990:	24000178 	.word	0x24000178
 8000994:	2400017c 	.word	0x2400017c
 8000998:	24000180 	.word	0x24000180
 800099c:	aaaaaaab 	.word	0xaaaaaaab
			}
			else
			{
				while ((Substate % (IMG_W * 3)) != 0) {
					array[Substate++] = 0; 	//fill blankdata with black
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <BMPDecoder+0x384>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	4939      	ldr	r1, [pc, #228]	; (8000a8c <BMPDecoder+0x384>)
 80009a8:	600a      	str	r2, [r1, #0]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
				while ((Substate % (IMG_W * 3)) != 0) {
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <BMPDecoder+0x384>)
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <BMPDecoder+0x388>)
 80009b8:	fba3 2301 	umull	r2, r3, r3, r1
 80009bc:	0a1a      	lsrs	r2, r3, #8
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	1aca      	subs	r2, r1, r3
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d1e9      	bne.n	80009a0 <BMPDecoder+0x298>
				}
				array[Substate++] = dataIn;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <BMPDecoder+0x384>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	492e      	ldr	r1, [pc, #184]	; (8000a8c <BMPDecoder+0x384>)
 80009d4:	600a      	str	r2, [r1, #0]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e010      	b.n	8000a02 <BMPDecoder+0x2fa>
			}
		} else {
			while (Substate / (IMG_W * 3) < IMG_H) {
				array[Substate++] = 0; 	//fill blankdata with black
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <BMPDecoder+0x384>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	4929      	ldr	r1, [pc, #164]	; (8000a8c <BMPDecoder+0x384>)
 80009e8:	600a      	str	r2, [r1, #0]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			while (Substate / (IMG_W * 3) < IMG_H) {
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <BMPDecoder+0x384>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80009fa:	d3f1      	bcc.n	80009e0 <BMPDecoder+0x2d8>
			}

			State = BMP_Notused2_n;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <BMPDecoder+0x38c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	701a      	strb	r2, [r3, #0]

		}
		if (offset >= size.U32-1) {
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <BMPDecoder+0x390>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <BMPDecoder+0x394>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d82f      	bhi.n	8000a70 <BMPDecoder+0x368>
							State = BMP_idle;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <BMPDecoder+0x38c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a16:	e008      	b.n	8000a2a <BMPDecoder+0x322>
										array[Substate++] = 0; 	//fill blankdata with black
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <BMPDecoder+0x384>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	491b      	ldr	r1, [pc, #108]	; (8000a8c <BMPDecoder+0x384>)
 8000a20:	600a      	str	r2, [r1, #0]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <BMPDecoder+0x384>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a32:	d3f1      	bcc.n	8000a18 <BMPDecoder+0x310>
									}
						}
		break;
 8000a34:	e01c      	b.n	8000a70 <BMPDecoder+0x368>
	case BMP_Notused2_n:
		if (offset >= size.U32-1) {
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <BMPDecoder+0x390>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <BMPDecoder+0x394>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d817      	bhi.n	8000a74 <BMPDecoder+0x36c>
			State = BMP_idle;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <BMPDecoder+0x38c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000a4a:	e013      	b.n	8000a74 <BMPDecoder+0x36c>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e012      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a50:	bf00      	nop
 8000a52:	e010      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a54:	bf00      	nop
 8000a56:	e00e      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e00c      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e00a      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a60:	bf00      	nop
 8000a62:	e008      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a64:	bf00      	nop
 8000a66:	e006      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e004      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <BMPDecoder+0x36e>
		break;
 8000a74:	bf00      	nop

	}
	offset++;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <BMPDecoder+0x394>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <BMPDecoder+0x394>)
 8000a7e:	6013      	str	r3, [r2, #0]

}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	24000164 	.word	0x24000164
 8000a90:	aaaaaaab 	.word	0xaaaaaaab
 8000a94:	24000160 	.word	0x24000160
 8000a98:	2400016c 	.word	0x2400016c
 8000a9c:	24000168 	.word	0x24000168

08000aa0 <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6858      	ldr	r0, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f004 fedf 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f001 f96c 	bl	8001d98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6858      	ldr	r0, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	f004 fed3 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6898      	ldr	r0, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f004 feca 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f001 f957 	bl	8001d98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6898      	ldr	r0, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	f004 febe 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68d8      	ldr	r0, [r3, #12]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f004 feb5 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	2204      	movs	r2, #4
 8000b16:	4938      	ldr	r1, [pc, #224]	; (8000bf8 <LCD_init+0x158>)
 8000b18:	f007 fcea 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68d8      	ldr	r0, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f004 fea5 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2201      	movs	r2, #1
 8000b36:	4931      	ldr	r1, [pc, #196]	; (8000bfc <LCD_init+0x15c>)
 8000b38:	f007 fcda 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68d8      	ldr	r0, [r3, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f004 fe95 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	2201      	movs	r2, #1
 8000b56:	492a      	ldr	r1, [pc, #168]	; (8000c00 <LCD_init+0x160>)
 8000b58:	f007 fcca 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68d8      	ldr	r0, [r3, #12]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f004 fe85 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2204      	movs	r2, #4
 8000b76:	4923      	ldr	r1, [pc, #140]	; (8000c04 <LCD_init+0x164>)
 8000b78:	f007 fcba 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68d8      	ldr	r0, [r3, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f004 fe75 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	491c      	ldr	r1, [pc, #112]	; (8000c08 <LCD_init+0x168>)
 8000b98:	f007 fcaa 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68d8      	ldr	r0, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f004 fe65 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	2364      	movs	r3, #100	; 0x64
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4915      	ldr	r1, [pc, #84]	; (8000c0c <LCD_init+0x16c>)
 8000bb8:	f007 fc9a 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68d8      	ldr	r0, [r3, #12]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f004 fe55 	bl	8005878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LCD_init+0x170>)
 8000bd8:	f007 fc8a 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68d8      	ldr	r0, [r3, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	f004 fe45 	bl	8005878 <HAL_GPIO_WritePin>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000008 	.word	0x24000008
 8000bfc:	2400000c 	.word	0x2400000c
 8000c00:	2400000d 	.word	0x2400000d
 8000c04:	2400000e 	.word	0x2400000e
 8000c08:	24000012 	.word	0x24000012
 8000c0c:	24000013 	.word	0x24000013
 8000c10:	24000017 	.word	0x24000017

08000c14 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c24:	4903      	ldr	r1, [pc, #12]	; (8000c34 <LCD_flush+0x20>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fe54 	bl	80088d4 <HAL_SPI_Transmit_DMA>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000184 	.word	0x24000184

08000c38 <LCDBufferAddr>:

uint8_t* LCDBufferAddr()
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	return Framememory;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <LCDBufferAddr+0x10>)
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	24000184 	.word	0x24000184

08000c4c <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	88db      	ldrh	r3, [r3, #6]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f00a fd1a 	bl	800b694 <calloc>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	889b      	ldrh	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f00a fd10 	bl	800b694 <calloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	81da      	strh	r2, [r3, #14]

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6919      	ldr	r1, [r3, #16]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	88db      	ldrh	r3, [r3, #6]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f008 fb02 	bl	80092b4 <HAL_UART_Receive_DMA>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	88db      	ldrh	r3, [r3, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a3f      	ldr	r2, [pc, #252]	; (8000dcc <UARTGetRxHead+0x114>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d068      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <UARTGetRxHead+0x118>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d061      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <UARTGetRxHead+0x11c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d05a      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <UARTGetRxHead+0x120>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d053      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <UARTGetRxHead+0x124>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d04c      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <UARTGetRxHead+0x128>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d045      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a30      	ldr	r2, [pc, #192]	; (8000de4 <UARTGetRxHead+0x12c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d03e      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <UARTGetRxHead+0x130>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d037      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <UARTGetRxHead+0x134>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d030      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <UARTGetRxHead+0x138>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d029      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <UARTGetRxHead+0x13c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d022      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <UARTGetRxHead+0x140>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01b      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <UARTGetRxHead+0x144>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d014      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <UARTGetRxHead+0x148>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <UARTGetRxHead+0x14c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d006      	beq.n	8000da6 <UARTGetRxHead+0xee>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <UARTGetRxHead+0x150>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d105      	bne.n	8000db2 <UARTGetRxHead+0xfa>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	e004      	b.n	8000dbc <UARTGetRxHead+0x104>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	1acb      	subs	r3, r1, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40020010 	.word	0x40020010
 8000dd0:	40020028 	.word	0x40020028
 8000dd4:	40020040 	.word	0x40020040
 8000dd8:	40020058 	.word	0x40020058
 8000ddc:	40020070 	.word	0x40020070
 8000de0:	40020088 	.word	0x40020088
 8000de4:	400200a0 	.word	0x400200a0
 8000de8:	400200b8 	.word	0x400200b8
 8000dec:	40020410 	.word	0x40020410
 8000df0:	40020428 	.word	0x40020428
 8000df4:	40020440 	.word	0x40020440
 8000df8:	40020458 	.word	0x40020458
 8000dfc:	40020470 	.word	0x40020470
 8000e00:	40020488 	.word	0x40020488
 8000e04:	400204a0 	.word	0x400204a0
 8000e08:	400204b8 	.word	0x400204b8

08000e0c <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e18:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8a9b      	ldrh	r3, [r3, #20]
 8000e1e:	461c      	mov	r4, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff49 	bl	8000cb8 <UARTGetRxHead>
 8000e26:	4603      	mov	r3, r0
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d013      	beq.n	8000e54 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	8a92      	ldrh	r2, [r2, #20]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	8a9b      	ldrh	r3, [r3, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	88d2      	ldrh	r2, [r2, #6]
 8000e44:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e48:	fb01 f202 	mul.w	r2, r1, r2
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000e54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}

08000e60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6a:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e6c:	bf00      	nop
 8000e6e:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <main+0x14c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d004      	beq.n	8000e84 <main+0x24>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	60fa      	str	r2, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dcf4      	bgt.n	8000e6e <main+0xe>
	if ( timeout < 0 )
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da01      	bge.n	8000e8e <main+0x2e>
	{
		Error_Handler();
 8000e8a:	f000 fb77 	bl	800157c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e8e:	f000 fef1 	bl	8001c74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e92:	f000 f89b 	bl	8000fcc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000e96:	f000 f91d 	bl	80010d4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e9a:	4b44      	ldr	r3, [pc, #272]	; (8000fac <main+0x14c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a42      	ldr	r2, [pc, #264]	; (8000fac <main+0x14c>)
 8000ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b40      	ldr	r3, [pc, #256]	; (8000fac <main+0x14c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f004 fd11 	bl	80058e0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f004 fd27 	bl	8005914 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eca:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ecc:	bf00      	nop
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <main+0x14c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d104      	bne.n	8000ee4 <main+0x84>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	60fa      	str	r2, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dcf4      	bgt.n	8000ece <main+0x6e>
	if ( timeout < 0 )
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da01      	bge.n	8000eee <main+0x8e>
	{
		Error_Handler();
 8000eea:	f000 fb47 	bl	800157c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eee:	f000 fa77 	bl	80013e0 <MX_GPIO_Init>
	MX_ETH_Init();
 8000ef2:	f000 f921 	bl	8001138 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000ef6:	f000 f9c3 	bl	8001280 <MX_USART3_UART_Init>
	MX_DMA_Init();
 8000efa:	f000 fa41 	bl	8001380 <MX_DMA_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000efe:	f000 fa0d 	bl	800131c <MX_USB_OTG_FS_PCD_Init>
	MX_SPI2_Init();
 8000f02:	f000 f965 	bl	80011d0 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	ST7735.hspi = &hspi2;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <main+0x150>)
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <main+0x154>)
 8000f0a:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOE;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <main+0x150>)
 8000f0e:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <main+0x158>)
 8000f10:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_6;
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <main+0x150>)
 8000f14:	2240      	movs	r2, #64	; 0x40
 8000f16:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOB;
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <main+0x150>)
 8000f1a:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <main+0x15c>)
 8000f1c:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_11;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <main+0x150>)
 8000f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f24:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOE;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <main+0x150>)
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <main+0x158>)
 8000f2a:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_15;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <main+0x150>)
 8000f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f32:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <main+0x150>)
 8000f36:	f7ff fdb3 	bl	8000aa0 <LCD_init>
	LCD_flush(&ST7735);
 8000f3a:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <main+0x150>)
 8000f3c:	f7ff fe6a 	bl	8000c14 <LCD_flush>
	UART2.huart = &huart3;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x160>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0x164>)
 8000f44:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0x160>)
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <main+0x160>)
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000f52:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <main+0x160>)
 8000f54:	f7ff fe7a 	bl	8000c4c <UARTInit>
	UARTResetStart(&UART2);
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <main+0x160>)
 8000f5a:	f7ff fe9c 	bl	8000c96 <UARTResetStart>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 8000f5e:	f000 ff0f 	bl	8001d80 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <main+0x168>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f6e:	d909      	bls.n	8000f84 <main+0x124>
		{
			timemsM7_LED = HAL_GetTick();
 8000f70:	f000 ff06 	bl	8001d80 <HAL_GetTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <main+0x168>)
 8000f78:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0x15c>)
 8000f80:	f004 fc93 	bl	80058aa <HAL_GPIO_TogglePin>


		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		int16_t read = UARTReadChar(&UART2) ;
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <main+0x160>)
 8000f86:	f7ff ff41 	bl	8000e0c <UARTReadChar>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	817b      	strh	r3, [r7, #10]
		if(read != -1)
 8000f8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f96:	d0e2      	beq.n	8000f5e <main+0xfe>
		{
			BMPDecoder(read, LCDBufferAddr());
 8000f98:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000f9c:	f7ff fe4c 	bl	8000c38 <LCDBufferAddr>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff fbaf 	bl	8000708 <BMPDecoder>
	{
 8000faa:	e7d8      	b.n	8000f5e <main+0xfe>
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	2400c9fc 	.word	0x2400c9fc
 8000fb4:	2400c26c 	.word	0x2400c26c
 8000fb8:	58021000 	.word	0x58021000
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	2400ca18 	.word	0x2400ca18
 8000fc4:	2400c36c 	.word	0x2400c36c
 8000fc8:	2400c9f8 	.word	0x2400c9f8

08000fcc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09c      	sub	sp, #112	; 0x70
 8000fd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	224c      	movs	r2, #76	; 0x4c
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00a fb8c 	bl	800b6f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00a fb86 	bl	800b6f8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f004 fded 	bl	8005bcc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <SystemClock_Config+0xfc>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <SystemClock_Config+0xfc>)
 8000ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <SystemClock_Config+0xfc>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <SystemClock_Config+0x100>)
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <SystemClock_Config+0x100>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <SystemClock_Config+0x100>)
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001024:	bf00      	nop
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <SystemClock_Config+0xfc>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001032:	d1f8      	bne.n	8001026 <SystemClock_Config+0x5a>

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <SystemClock_Config+0x104>)
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	f023 0303 	bic.w	r3, r3, #3
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <SystemClock_Config+0x104>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001048:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	2302      	movs	r3, #2
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 800105a:	2378      	movs	r3, #120	; 0x78
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800106a:	230c      	movs	r3, #12
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800106e:	2300      	movs	r3, #0
 8001070:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fe10 	bl	8005ca0 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8001086:	f000 fa79 	bl	800157c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	233f      	movs	r3, #63	; 0x3f
 800108c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2303      	movs	r3, #3
 8001090:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001096:	2308      	movs	r3, #8
 8001098:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 fa23 	bl	80064fc <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 80010bc:	f000 fa5e 	bl	800157c <Error_Handler>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3770      	adds	r7, #112	; 0x70
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024800 	.word	0x58024800
 80010cc:	58000400 	.word	0x58000400
 80010d0:	58024400 	.word	0x58024400

080010d4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b0      	sub	sp, #192	; 0xc0
 80010d8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	22bc      	movs	r2, #188	; 0xbc
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a fb09 	bl	800b6f8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI2
 80010e6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80010ea:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 24;
 80010f0:	2318      	movs	r3, #24
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001100:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001106:	2300      	movs	r3, #0
 8001108:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001114:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fd78 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <PeriphCommonClock_Config+0x5a>
	{
		Error_Handler();
 800112a:	f000 fa27 	bl	800157c <Error_Handler>
	}
}
 800112e:	bf00      	nop
 8001130:	37c0      	adds	r7, #192	; 0xc0
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ETH_Init+0x80>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_ETH_Init+0x84>)
 8001140:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_ETH_Init+0x88>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_ETH_Init+0x88>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_ETH_Init+0x88>)
 8001150:	22e1      	movs	r2, #225	; 0xe1
 8001152:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_ETH_Init+0x88>)
 8001156:	2200      	movs	r2, #0
 8001158:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ETH_Init+0x88>)
 800115c:	2200      	movs	r2, #0
 800115e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_ETH_Init+0x88>)
 8001162:	2200      	movs	r2, #0
 8001164:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ETH_Init+0x80>)
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <MX_ETH_Init+0x88>)
 800116a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ETH_Init+0x80>)
 800116e:	2201      	movs	r2, #1
 8001170:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ETH_Init+0x80>)
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <MX_ETH_Init+0x8c>)
 8001176:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ETH_Init+0x80>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_ETH_Init+0x90>)
 800117c:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_ETH_Init+0x80>)
 8001180:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001184:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_ETH_Init+0x80>)
 8001188:	f003 fda2 	bl	8004cd0 <HAL_ETH_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ETH_Init+0x5e>
	{
		Error_Handler();
 8001192:	f000 f9f3 	bl	800157c <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001196:	2238      	movs	r2, #56	; 0x38
 8001198:	2100      	movs	r1, #0
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <MX_ETH_Init+0x94>)
 800119c:	f00a faac 	bl	800b6f8 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_ETH_Init+0x94>)
 80011a2:	2221      	movs	r2, #33	; 0x21
 80011a4:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_ETH_Init+0x94>)
 80011a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011ac:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_ETH_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2400c1bc 	.word	0x2400c1bc
 80011bc:	40028000 	.word	0x40028000
 80011c0:	2400ca30 	.word	0x2400ca30
 80011c4:	240000e4 	.word	0x240000e4
 80011c8:	24000084 	.word	0x24000084
 80011cc:	2400c184 	.word	0x2400c184

080011d0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <MX_SPI2_Init+0xac>)
 80011d8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_SPI2_Init+0xa8>)
 80011fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001202:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001206:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800120a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI2_Init+0xa8>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI2_Init+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI2_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI2_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
	hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI2_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI2_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SPI2_Init+0xa8>)
 8001264:	f007 f83e 	bl	80082e4 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI2_Init+0xa2>
	{
		Error_Handler();
 800126e:	f000 f985 	bl	800157c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400c26c 	.word	0x2400c26c
 800127c:	40003800 	.word	0x40003800

08001280 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <MX_USART3_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 384000;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_USART3_UART_Init+0x98>)
 800128e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012a4:	220c      	movs	r2, #12
 80012a6:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012c8:	f007 ffa3 	bl	8009212 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x56>
	{
		Error_Handler();
 80012d2:	f000 f953 	bl	800157c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012da:	f009 fe06 	bl	800aeea <HAL_UARTEx_SetTxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_UART_Init+0x68>
	{
		Error_Handler();
 80012e4:	f000 f94a 	bl	800157c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ec:	f009 fe3b 	bl	800af66 <HAL_UARTEx_SetRxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART3_UART_Init+0x7a>
	{
		Error_Handler();
 80012f6:	f000 f941 	bl	800157c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012fc:	f009 fdbc 	bl	800ae78 <HAL_UARTEx_DisableFifoMode>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x8a>
	{
		Error_Handler();
 8001306:	f000 f939 	bl	800157c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400c36c 	.word	0x2400c36c
 8001314:	40004800 	.word	0x40004800
 8001318:	0005dc00 	.word	0x0005dc00

0800131c <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001324:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001328:	2209      	movs	r2, #9
 800132a:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132e:	2202      	movs	r2, #2
 8001330:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133a:	2202      	movs	r2, #2
 800133c:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001352:	2201      	movs	r2, #1
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001358:	2201      	movs	r2, #1
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001364:	f004 faea 	bl	800593c <HAL_PCD_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 800136e:	f000 f905 	bl	800157c <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2400c4ec 	.word	0x2400c4ec
 800137c:	40080000 	.word	0x40080000

08001380 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_DMA_Init+0x5c>)
 8001388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_DMA_Init+0x5c>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_DMA_Init+0x5c>)
 8001398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	200c      	movs	r0, #12
 80013aa:	f000 fe14 	bl	8001fd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013ae:	200c      	movs	r0, #12
 80013b0:	f000 fe2b 	bl	800200a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	200d      	movs	r0, #13
 80013ba:	f000 fe0c 	bl	8001fd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013be:	200d      	movs	r0, #13
 80013c0:	f000 fe23 	bl	800200a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200f      	movs	r0, #15
 80013ca:	f000 fe04 	bl	8001fd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 fe1b 	bl	800200a <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400

080013e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <MX_GPIO_Init+0x188>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a5a      	ldr	r2, [pc, #360]	; (8001568 <MX_GPIO_Init+0x188>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b58      	ldr	r3, [pc, #352]	; (8001568 <MX_GPIO_Init+0x188>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b54      	ldr	r3, [pc, #336]	; (8001568 <MX_GPIO_Init+0x188>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <MX_GPIO_Init+0x188>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <MX_GPIO_Init+0x188>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <MX_GPIO_Init+0x188>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <MX_GPIO_Init+0x188>)
 800143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <MX_GPIO_Init+0x188>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b45      	ldr	r3, [pc, #276]	; (8001568 <MX_GPIO_Init+0x188>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a44      	ldr	r2, [pc, #272]	; (8001568 <MX_GPIO_Init+0x188>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MX_GPIO_Init+0x188>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <MX_GPIO_Init+0x188>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a3c      	ldr	r2, [pc, #240]	; (8001568 <MX_GPIO_Init+0x188>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <MX_GPIO_Init+0x188>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <MX_GPIO_Init+0x188>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a35      	ldr	r2, [pc, #212]	; (8001568 <MX_GPIO_Init+0x188>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_GPIO_Init+0x188>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_GPIO_Init+0x188>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <MX_GPIO_Init+0x188>)
 80014b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_GPIO_Init+0x188>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f248 0140 	movw	r1, #32832	; 0x8040
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <MX_GPIO_Init+0x18c>)
 80014d0:	f004 f9d2 	bl	8005878 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LD3_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <MX_GPIO_Init+0x190>)
 80014dc:	f004 f9cc 	bl	8005878 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_GPIO_Init+0x194>)
 80014e8:	f004 f9c6 	bl	8005878 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 80014ec:	f248 0340 	movw	r3, #32832	; 0x8040
 80014f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4819      	ldr	r0, [pc, #100]	; (800156c <MX_GPIO_Init+0x18c>)
 8001506:	f004 f807 	bl	8005518 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_DC_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin|LD3_Pin;
 800150a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800150e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <MX_GPIO_Init+0x190>)
 8001524:	f003 fff8 	bl	8005518 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_GPIO_Init+0x194>)
 8001542:	f003 ffe9 	bl	8005518 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_GPIO_Init+0x198>)
 800155c:	f003 ffdc 	bl	8005518 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024400 	.word	0x58024400
 800156c:	58021000 	.word	0x58021000
 8001570:	58020400 	.word	0x58020400
 8001574:	58020c00 	.word	0x58020c00
 8001578:	58021800 	.word	0x58021800

0800157c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x30>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x30>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x30>)
 80015a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_ETH_MspInit+0x184>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	f040 80ab 	bne.w	8001736 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800161e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800162e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	4a39      	ldr	r2, [pc, #228]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4a31      	ldr	r2, [pc, #196]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016b2:	2332      	movs	r3, #50	; 0x32
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c2:	230b      	movs	r3, #11
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	481e      	ldr	r0, [pc, #120]	; (8001748 <HAL_ETH_MspInit+0x18c>)
 80016ce:	f003 ff23 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80016d2:	2386      	movs	r3, #134	; 0x86
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e2:	230b      	movs	r3, #11
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4817      	ldr	r0, [pc, #92]	; (800174c <HAL_ETH_MspInit+0x190>)
 80016ee:	f003 ff13 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001704:	230b      	movs	r3, #11
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <HAL_ETH_MspInit+0x194>)
 8001710:	f003 ff02 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001726:	230b      	movs	r3, #11
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <HAL_ETH_MspInit+0x198>)
 8001732:	f003 fef1 	bl	8005518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40028000 	.word	0x40028000
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020000 	.word	0x58020000
 8001750:	58020400 	.word	0x58020400
 8001754:	58021800 	.word	0x58021800

08001758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_SPI_MspInit+0x134>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f040 8084 	bne.w	8001884 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_SPI_MspInit+0x138>)
 800177e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001782:	4a43      	ldr	r2, [pc, #268]	; (8001890 <HAL_SPI_MspInit+0x138>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <HAL_SPI_MspInit+0x138>)
 800178e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_SPI_MspInit+0x138>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_SPI_MspInit+0x138>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_SPI_MspInit+0x138>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_SPI_MspInit+0x138>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <HAL_SPI_MspInit+0x138>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_SPI_MspInit+0x138>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d6:	2308      	movs	r3, #8
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e6:	2305      	movs	r3, #5
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4828      	ldr	r0, [pc, #160]	; (8001894 <HAL_SPI_MspInit+0x13c>)
 80017f2:	f003 fe91 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001808:	2305      	movs	r3, #5
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4821      	ldr	r0, [pc, #132]	; (8001898 <HAL_SPI_MspInit+0x140>)
 8001814:	f003 fe80 	bl	8005518 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream2;
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_SPI_MspInit+0x144>)
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_SPI_MspInit+0x148>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001820:	2228      	movs	r2, #40	; 0x28
 8001822:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_SPI_MspInit+0x144>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001836:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_SPI_MspInit+0x144>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_SPI_MspInit+0x144>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <HAL_SPI_MspInit+0x144>)
 800185a:	f000 fbf1 	bl	8002040 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001864:	f7ff fe8a 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_SPI_MspInit+0x144>)
 800186c:	679a      	str	r2, [r3, #120]	; 0x78
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_SPI_MspInit+0x144>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2024      	movs	r0, #36	; 0x24
 800187a:	f000 fbac 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800187e:	2024      	movs	r0, #36	; 0x24
 8001880:	f000 fbc3 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40003800 	.word	0x40003800
 8001890:	58024400 	.word	0x58024400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020400 	.word	0x58020400
 800189c:	2400c2f4 	.word	0x2400c2f4
 80018a0:	40020040 	.word	0x40020040

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b8      	sub	sp, #224	; 0xe0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	22bc      	movs	r2, #188	; 0xbc
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 ff17 	bl	800b6f8 <memset>
  if(huart->Instance==USART3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_UART_MspInit+0x188>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	f040 80a6 	bne.w	8001a22 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018d6:	2302      	movs	r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 f995 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018f0:	f7ff fe44 	bl	800157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 80018f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194a:	2307      	movs	r3, #7
 800194c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001954:	4619      	mov	r1, r3
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <HAL_UART_MspInit+0x190>)
 8001958:	f003 fdde 	bl	8005518 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800195e:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <HAL_UART_MspInit+0x198>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001964:	222d      	movs	r2, #45	; 0x2d
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800199e:	f000 fb4f 	bl	8002040 <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80019a8:	f7ff fde8 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_UART_MspInit+0x194>)
 80019b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_UART_MspInit+0x194>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_UART_MspInit+0x1a0>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019c0:	222e      	movs	r2, #46	; 0x2e
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019f6:	4812      	ldr	r0, [pc, #72]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019f8:	f000 fb22 	bl	8002040 <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001a02:	f7ff fdbb 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 8001a0a:	679a      	str	r2, [r3, #120]	; 0x78
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2027      	movs	r0, #39	; 0x27
 8001a18:	f000 fadd 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a1c:	2027      	movs	r0, #39	; 0x27
 8001a1e:	f000 faf4 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	37e0      	adds	r7, #224	; 0xe0
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40004800 	.word	0x40004800
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020c00 	.word	0x58020c00
 8001a38:	2400c3fc 	.word	0x2400c3fc
 8001a3c:	40020028 	.word	0x40020028
 8001a40:	2400c474 	.word	0x2400c474
 8001a44:	40020070 	.word	0x40020070

08001a48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_PCD_MspInit+0xa8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d13d      	bne.n	8001ae6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a6a:	f004 f909 	bl	8005c80 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a8c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <HAL_PCD_MspInit+0xb0>)
 8001aaa:	f003 fd35 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <HAL_PCD_MspInit+0xb0>)
 8001ac4:	f003 fd28 	bl	8005518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ad4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_PCD_MspInit+0xac>)
 8001ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40080000 	.word	0x40080000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020000 	.word	0x58020000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f906 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA1_Stream1_IRQHandler+0x10>)
 8001b56:	f001 fd9d 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2400c3fc 	.word	0x2400c3fc

08001b64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Stream2_IRQHandler+0x10>)
 8001b6a:	f001 fd93 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2400c2f4 	.word	0x2400c2f4

08001b78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Stream4_IRQHandler+0x10>)
 8001b7e:	f001 fd89 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2400c474 	.word	0x2400c474

08001b8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <SPI2_IRQHandler+0x10>)
 8001b92:	f006 ffe9 	bl	8008b68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2400c26c 	.word	0x2400c26c

08001ba0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <USART3_IRQHandler+0x10>)
 8001ba6:	f007 fbdb 	bl	8009360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2400c36c 	.word	0x2400c36c

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f009 fd5e 	bl	800b6a4 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	24080000 	.word	0x24080000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	2400ca38 	.word	0x2400ca38
 8001c1c:	2400ca50 	.word	0x2400ca50

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7fe fcda 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f009 fd2f 	bl	800b6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff f905 	bl	8000e60 <main>
  bx  lr
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c60:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001c64:	0800b900 	.word	0x0800b900
  ldr r2, =_sbss
 8001c68:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8001c6c:	2400ca50 	.word	0x2400ca50

08001c70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC3_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f000 f9a0 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c80:	f004 fdf2 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <HAL_Init+0x6c>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_Init+0x68>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_Init+0x6c>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_Init+0x70>)
 8001cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_Init+0x74>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 f814 	bl	8001cec <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e002      	b.n	8001cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff fc5b 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	0800b8b0 	.word	0x0800b8b0
 8001ce4:	24000004 	.word	0x24000004
 8001ce8:	24000000 	.word	0x24000000

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_InitTick+0x60>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e021      	b.n	8001d44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_InitTick+0x64>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_InitTick+0x60>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f985 	bl	8002026 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 f94f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x68>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2400001c 	.word	0x2400001c
 8001d50:	24000000 	.word	0x24000000
 8001d54:	24000018 	.word	0x24000018

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2400001c 	.word	0x2400001c
 8001d7c:	2400ca3c 	.word	0x2400ca3c

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2400ca3c 	.word	0x2400ca3c

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2400001c 	.word	0x2400001c

08001de0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetREVID+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0c1b      	lsrs	r3, r3, #16
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	5c001000 	.word	0x5c001000

08001df8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	58000400 	.word	0x58000400

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	05fa0000 	.word	0x05fa0000

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff40 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff33 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa4 	bl	8001f7c <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fe9a 	bl	8001d80 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e316      	b.n	8002686 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_DMA_Init+0x1b8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d04a      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_DMA_Init+0x1bc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d045      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_DMA_Init+0x1c0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a62      	ldr	r2, [pc, #392]	; (8002204 <HAL_DMA_Init+0x1c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d03b      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_DMA_Init+0x1c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d036      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5f      	ldr	r2, [pc, #380]	; (800220c <HAL_DMA_Init+0x1cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d031      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <HAL_DMA_Init+0x1d0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02c      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_DMA_Init+0x1d4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d027      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_DMA_Init+0x1d8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d022      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a59      	ldr	r2, [pc, #356]	; (800221c <HAL_DMA_Init+0x1dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d01d      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_DMA_Init+0x1e0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d018      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a56      	ldr	r2, [pc, #344]	; (8002224 <HAL_DMA_Init+0x1e4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_DMA_Init+0x1e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00e      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <HAL_DMA_Init+0x1ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_DMA_Init+0x1f0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d004      	beq.n	80020f8 <HAL_DMA_Init+0xb8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_DMA_Init+0x1f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Init+0xbc>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_DMA_Init+0xbe>
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 813b 	beq.w	800237a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <HAL_DMA_Init+0x1b8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d04a      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_DMA_Init+0x1bc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d045      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_DMA_Init+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d040      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_DMA_Init+0x1c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d03b      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_DMA_Init+0x1c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d036      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a30      	ldr	r2, [pc, #192]	; (800220c <HAL_DMA_Init+0x1cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <HAL_DMA_Init+0x1d0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02c      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2d      	ldr	r2, [pc, #180]	; (8002214 <HAL_DMA_Init+0x1d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d027      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <HAL_DMA_Init+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_DMA_Init+0x1dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01d      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_DMA_Init+0x1e0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d018      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_DMA_Init+0x1e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_DMA_Init+0x1e8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_DMA_Init+0x1ec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_DMA_Init+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_DMA_Init+0x174>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <HAL_DMA_Init+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d108      	bne.n	80021c6 <HAL_DMA_Init+0x186>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_DMA_Init+0x196>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021d6:	e02f      	b.n	8002238 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d8:	f7ff fdd2 	bl	8001d80 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d928      	bls.n	8002238 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2203      	movs	r2, #3
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e246      	b.n	8002686 <HAL_DMA_Init+0x646>
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1c8      	bne.n	80021d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4b83      	ldr	r3, [pc, #524]	; (8002460 <HAL_DMA_Init+0x420>)
 8002252:	4013      	ands	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800225e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002276:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4313      	orrs	r3, r2
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800229c:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_DMA_Init+0x424>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_DMA_Init+0x428>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a8:	d328      	bcc.n	80022fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b28      	cmp	r3, #40	; 0x28
 80022b0:	d903      	bls.n	80022ba <HAL_DMA_Init+0x27a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b2e      	cmp	r3, #46	; 0x2e
 80022b8:	d917      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b3e      	cmp	r3, #62	; 0x3e
 80022c0:	d903      	bls.n	80022ca <HAL_DMA_Init+0x28a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b42      	cmp	r3, #66	; 0x42
 80022c8:	d90f      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b46      	cmp	r3, #70	; 0x46
 80022d0:	d903      	bls.n	80022da <HAL_DMA_Init+0x29a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b48      	cmp	r3, #72	; 0x48
 80022d8:	d907      	bls.n	80022ea <HAL_DMA_Init+0x2aa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b4e      	cmp	r3, #78	; 0x4e
 80022e0:	d905      	bls.n	80022ee <HAL_DMA_Init+0x2ae>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b52      	cmp	r3, #82	; 0x52
 80022e8:	d801      	bhi.n	80022ee <HAL_DMA_Init+0x2ae>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_DMA_Init+0x2b0>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0307 	bic.w	r3, r3, #7
 8002312:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b04      	cmp	r3, #4
 8002324:	d117      	bne.n	8002356 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f002 fb3f 	bl	80049bc <DMA_CheckFifoParam>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e197      	b.n	8002686 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f002 fa7a 	bl	8004858 <DMA_CalcBaseAndBitshift>
 8002364:	4603      	mov	r3, r0
 8002366:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	223f      	movs	r2, #63	; 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e0cd      	b.n	8002516 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_DMA_Init+0x42c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d022      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a39      	ldr	r2, [pc, #228]	; (8002470 <HAL_DMA_Init+0x430>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01d      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a38      	ldr	r2, [pc, #224]	; (8002474 <HAL_DMA_Init+0x434>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d018      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <HAL_DMA_Init+0x438>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a35      	ldr	r2, [pc, #212]	; (800247c <HAL_DMA_Init+0x43c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00e      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <HAL_DMA_Init+0x440>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <HAL_DMA_Init+0x444>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_DMA_Init+0x38a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <HAL_DMA_Init+0x448>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Init+0x38e>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_DMA_Init+0x390>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8097 	beq.w	8002504 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_DMA_Init+0x42c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d021      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <HAL_DMA_Init+0x430>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01c      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_DMA_Init+0x434>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d017      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_DMA_Init+0x438>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_DMA_Init+0x43c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_DMA_Init+0x440>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_DMA_Init+0x444>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <HAL_DMA_Init+0x3e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_DMA_Init+0x448>)
 8002422:	4293      	cmp	r3, r2
 8002424:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_DMA_Init+0x44c>)
 8002442:	4013      	ands	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d020      	beq.n	8002490 <HAL_DMA_Init+0x450>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d102      	bne.n	800245c <HAL_DMA_Init+0x41c>
 8002456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800245a:	e01a      	b.n	8002492 <HAL_DMA_Init+0x452>
 800245c:	2300      	movs	r3, #0
 800245e:	e018      	b.n	8002492 <HAL_DMA_Init+0x452>
 8002460:	fe10803f 	.word	0xfe10803f
 8002464:	5c001000 	.word	0x5c001000
 8002468:	ffff0000 	.word	0xffff0000
 800246c:	58025408 	.word	0x58025408
 8002470:	5802541c 	.word	0x5802541c
 8002474:	58025430 	.word	0x58025430
 8002478:	58025444 	.word	0x58025444
 800247c:	58025458 	.word	0x58025458
 8002480:	5802546c 	.word	0x5802546c
 8002484:	58025480 	.word	0x58025480
 8002488:	58025494 	.word	0x58025494
 800248c:	fffe000f 	.word	0xfffe000f
 8002490:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <HAL_DMA_Init+0x650>)
 80024d8:	4413      	add	r3, r2
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_DMA_Init+0x654>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f002 f9b5 	bl	8004858 <DMA_CalcBaseAndBitshift>
 80024ee:	4603      	mov	r3, r0
 80024f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0b7      	b.n	8002686 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5f      	ldr	r2, [pc, #380]	; (8002698 <HAL_DMA_Init+0x658>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d072      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_DMA_Init+0x65c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d06d      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_DMA_Init+0x660>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d068      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5a      	ldr	r2, [pc, #360]	; (80026a4 <HAL_DMA_Init+0x664>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <HAL_DMA_Init+0x668>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_DMA_Init+0x66c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d059      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_DMA_Init+0x670>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d054      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_DMA_Init+0x674>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04f      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a53      	ldr	r2, [pc, #332]	; (80026b8 <HAL_DMA_Init+0x678>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_DMA_Init+0x67c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_DMA_Init+0x680>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4e      	ldr	r2, [pc, #312]	; (80026c4 <HAL_DMA_Init+0x684>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4d      	ldr	r2, [pc, #308]	; (80026c8 <HAL_DMA_Init+0x688>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_DMA_Init+0x68c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_DMA_Init+0x690>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a48      	ldr	r2, [pc, #288]	; (80026d4 <HAL_DMA_Init+0x694>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a47      	ldr	r2, [pc, #284]	; (80026d8 <HAL_DMA_Init+0x698>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a45      	ldr	r2, [pc, #276]	; (80026dc <HAL_DMA_Init+0x69c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <HAL_DMA_Init+0x6a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_DMA_Init+0x6a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_DMA_Init+0x6a8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <HAL_DMA_Init+0x6ac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3e      	ldr	r2, [pc, #248]	; (80026f0 <HAL_DMA_Init+0x6b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Init+0x5c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3c      	ldr	r2, [pc, #240]	; (80026f4 <HAL_DMA_Init+0x6b4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x5ca>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_DMA_Init+0x5cc>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d032      	beq.n	8002676 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f002 fa4f 	bl	8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d102      	bne.n	8002624 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002638:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_DMA_Init+0x624>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d80c      	bhi.n	8002664 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f002 facc 	bl	8004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e008      	b.n	8002676 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	a7fdabf8 	.word	0xa7fdabf8
 8002694:	cccccccd 	.word	0xcccccccd
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	58025408 	.word	0x58025408
 80026dc:	5802541c 	.word	0x5802541c
 80026e0:	58025430 	.word	0x58025430
 80026e4:	58025444 	.word	0x58025444
 80026e8:	58025458 	.word	0x58025458
 80026ec:	5802546c 	.word	0x5802546c
 80026f0:	58025480 	.word	0x58025480
 80026f4:	58025494 	.word	0x58025494

080026f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e226      	b.n	8002b62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Start_IT+0x2a>
 800271e:	2302      	movs	r3, #2
 8002720:	e21f      	b.n	8002b62 <HAL_DMA_Start_IT+0x46a>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 820a 	bne.w	8002b4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a68      	ldr	r2, [pc, #416]	; (80028ec <HAL_DMA_Start_IT+0x1f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a66      	ldr	r2, [pc, #408]	; (80028f0 <HAL_DMA_Start_IT+0x1f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_DMA_Start_IT+0x1fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_DMA_Start_IT+0x200>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a62      	ldr	r2, [pc, #392]	; (80028fc <HAL_DMA_Start_IT+0x204>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a60      	ldr	r2, [pc, #384]	; (8002900 <HAL_DMA_Start_IT+0x208>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_DMA_Start_IT+0x20c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <HAL_DMA_Start_IT+0x210>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5c      	ldr	r2, [pc, #368]	; (800290c <HAL_DMA_Start_IT+0x214>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_DMA_Start_IT+0x218>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a59      	ldr	r2, [pc, #356]	; (8002914 <HAL_DMA_Start_IT+0x21c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_DMA_Start_IT+0x220>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a56      	ldr	r2, [pc, #344]	; (800291c <HAL_DMA_Start_IT+0x224>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a54      	ldr	r2, [pc, #336]	; (8002920 <HAL_DMA_Start_IT+0x228>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a53      	ldr	r2, [pc, #332]	; (8002924 <HAL_DMA_Start_IT+0x22c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_DMA_Start_IT+0x230>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <HAL_DMA_Start_IT+0x100>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_DMA_Start_IT+0x110>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 fe76 	bl	8004500 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_DMA_Start_IT+0x1f4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_DMA_Start_IT+0x1f8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_DMA_Start_IT+0x1fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_DMA_Start_IT+0x200>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_DMA_Start_IT+0x204>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <HAL_DMA_Start_IT+0x208>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_DMA_Start_IT+0x20c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_DMA_Start_IT+0x210>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <HAL_DMA_Start_IT+0x214>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_DMA_Start_IT+0x218>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_DMA_Start_IT+0x21c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_DMA_Start_IT+0x220>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_DMA_Start_IT+0x224>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_DMA_Start_IT+0x228>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_DMA_Start_IT+0x22c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_DMA_Start_IT+0x230>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Start_IT+0x1c0>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_DMA_Start_IT+0x1c2>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 021e 	bic.w	r2, r3, #30
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0216 	orr.w	r2, r2, #22
 80028d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03e      	beq.n	8002958 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0208 	orr.w	r2, r2, #8
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e035      	b.n	8002958 <HAL_DMA_Start_IT+0x260>
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 020e 	bic.w	r2, r3, #14
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 020a 	orr.w	r2, r2, #10
 800293e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a83      	ldr	r2, [pc, #524]	; (8002b6c <HAL_DMA_Start_IT+0x474>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d072      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a82      	ldr	r2, [pc, #520]	; (8002b70 <HAL_DMA_Start_IT+0x478>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d06d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_DMA_Start_IT+0x47c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d068      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7f      	ldr	r2, [pc, #508]	; (8002b78 <HAL_DMA_Start_IT+0x480>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d063      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_DMA_Start_IT+0x484>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d05e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7c      	ldr	r2, [pc, #496]	; (8002b80 <HAL_DMA_Start_IT+0x488>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d059      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7a      	ldr	r2, [pc, #488]	; (8002b84 <HAL_DMA_Start_IT+0x48c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d054      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a79      	ldr	r2, [pc, #484]	; (8002b88 <HAL_DMA_Start_IT+0x490>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04f      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_DMA_Start_IT+0x494>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a76      	ldr	r2, [pc, #472]	; (8002b90 <HAL_DMA_Start_IT+0x498>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a74      	ldr	r2, [pc, #464]	; (8002b94 <HAL_DMA_Start_IT+0x49c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a73      	ldr	r2, [pc, #460]	; (8002b98 <HAL_DMA_Start_IT+0x4a0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <HAL_DMA_Start_IT+0x4a4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a70      	ldr	r2, [pc, #448]	; (8002ba0 <HAL_DMA_Start_IT+0x4a8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_DMA_Start_IT+0x4ac>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_DMA_Start_IT+0x4b0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	; (8002bac <HAL_DMA_Start_IT+0x4b4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_DMA_Start_IT+0x4b8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_DMA_Start_IT+0x4bc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a67      	ldr	r2, [pc, #412]	; (8002bb8 <HAL_DMA_Start_IT+0x4c0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_DMA_Start_IT+0x4c4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a64      	ldr	r2, [pc, #400]	; (8002bc0 <HAL_DMA_Start_IT+0x4c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_DMA_Start_IT+0x4cc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_DMA_Start_IT+0x4d0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Start_IT+0x354>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Start_IT+0x356>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_DMA_Start_IT+0x474>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d04a      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_DMA_Start_IT+0x478>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d045      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_DMA_Start_IT+0x47c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d040      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <HAL_DMA_Start_IT+0x480>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d03b      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_DMA_Start_IT+0x484>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d036      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_DMA_Start_IT+0x488>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d031      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_DMA_Start_IT+0x48c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02c      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_DMA_Start_IT+0x490>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d027      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_DMA_Start_IT+0x494>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d022      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_DMA_Start_IT+0x498>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d01d      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_DMA_Start_IT+0x49c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d018      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_DMA_Start_IT+0x4a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_DMA_Start_IT+0x4a4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <HAL_DMA_Start_IT+0x4a8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMA_Start_IT+0x4ac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_DMA_Start_IT+0x4b0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <HAL_DMA_Start_IT+0x442>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e012      	b.n	8002b60 <HAL_DMA_Start_IT+0x468>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e009      	b.n	8002b60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020028 	.word	0x40020028
 8002b74:	40020040 	.word	0x40020040
 8002b78:	40020058 	.word	0x40020058
 8002b7c:	40020070 	.word	0x40020070
 8002b80:	40020088 	.word	0x40020088
 8002b84:	400200a0 	.word	0x400200a0
 8002b88:	400200b8 	.word	0x400200b8
 8002b8c:	40020410 	.word	0x40020410
 8002b90:	40020428 	.word	0x40020428
 8002b94:	40020440 	.word	0x40020440
 8002b98:	40020458 	.word	0x40020458
 8002b9c:	40020470 	.word	0x40020470
 8002ba0:	40020488 	.word	0x40020488
 8002ba4:	400204a0 	.word	0x400204a0
 8002ba8:	400204b8 	.word	0x400204b8
 8002bac:	58025408 	.word	0x58025408
 8002bb0:	5802541c 	.word	0x5802541c
 8002bb4:	58025430 	.word	0x58025430
 8002bb8:	58025444 	.word	0x58025444
 8002bbc:	58025458 	.word	0x58025458
 8002bc0:	5802546c 	.word	0x5802546c
 8002bc4:	58025480 	.word	0x58025480
 8002bc8:	58025494 	.word	0x58025494

08002bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff f8d4 	bl	8001d80 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e2dc      	b.n	800319e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e2cd      	b.n	800319e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a76      	ldr	r2, [pc, #472]	; (8002de0 <HAL_DMA_Abort+0x214>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a74      	ldr	r2, [pc, #464]	; (8002de4 <HAL_DMA_Abort+0x218>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d045      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_DMA_Abort+0x21c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a71      	ldr	r2, [pc, #452]	; (8002dec <HAL_DMA_Abort+0x220>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03b      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a70      	ldr	r2, [pc, #448]	; (8002df0 <HAL_DMA_Abort+0x224>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d036      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_DMA_Abort+0x228>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6d      	ldr	r2, [pc, #436]	; (8002df8 <HAL_DMA_Abort+0x22c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d02c      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6b      	ldr	r2, [pc, #428]	; (8002dfc <HAL_DMA_Abort+0x230>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_DMA_Abort+0x234>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a68      	ldr	r2, [pc, #416]	; (8002e04 <HAL_DMA_Abort+0x238>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_DMA_Abort+0x23c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Abort+0x240>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <HAL_DMA_Abort+0x244>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a62      	ldr	r2, [pc, #392]	; (8002e14 <HAL_DMA_Abort+0x248>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a61      	ldr	r2, [pc, #388]	; (8002e18 <HAL_DMA_Abort+0x24c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_Abort+0xd6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_DMA_Abort+0x250>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA_Abort+0xda>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_DMA_Abort+0xdc>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 021e 	bic.w	r2, r2, #30
 8002cba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00a      	b.n	8002cea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <HAL_DMA_Abort+0x214>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d072      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <HAL_DMA_Abort+0x218>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d06d      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a39      	ldr	r2, [pc, #228]	; (8002de8 <HAL_DMA_Abort+0x21c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d068      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a37      	ldr	r2, [pc, #220]	; (8002dec <HAL_DMA_Abort+0x220>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d063      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <HAL_DMA_Abort+0x224>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d05e      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a34      	ldr	r2, [pc, #208]	; (8002df4 <HAL_DMA_Abort+0x228>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d059      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a33      	ldr	r2, [pc, #204]	; (8002df8 <HAL_DMA_Abort+0x22c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d054      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_DMA_Abort+0x230>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04f      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <HAL_DMA_Abort+0x234>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <HAL_DMA_Abort+0x238>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <HAL_DMA_Abort+0x23c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_DMA_Abort+0x240>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_DMA_Abort+0x244>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <HAL_DMA_Abort+0x248>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_DMA_Abort+0x24c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_DMA_Abort+0x250>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_DMA_Abort+0x254>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_DMA_Abort+0x258>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_DMA_Abort+0x25c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_DMA_Abort+0x260>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_DMA_Abort+0x264>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_DMA_Abort+0x268>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_DMA_Abort+0x26c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort+0x20e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_DMA_Abort+0x270>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d132      	bne.n	8002e40 <HAL_DMA_Abort+0x274>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e031      	b.n	8002e42 <HAL_DMA_Abort+0x276>
 8002dde:	bf00      	nop
 8002de0:	40020010 	.word	0x40020010
 8002de4:	40020028 	.word	0x40020028
 8002de8:	40020040 	.word	0x40020040
 8002dec:	40020058 	.word	0x40020058
 8002df0:	40020070 	.word	0x40020070
 8002df4:	40020088 	.word	0x40020088
 8002df8:	400200a0 	.word	0x400200a0
 8002dfc:	400200b8 	.word	0x400200b8
 8002e00:	40020410 	.word	0x40020410
 8002e04:	40020428 	.word	0x40020428
 8002e08:	40020440 	.word	0x40020440
 8002e0c:	40020458 	.word	0x40020458
 8002e10:	40020470 	.word	0x40020470
 8002e14:	40020488 	.word	0x40020488
 8002e18:	400204a0 	.word	0x400204a0
 8002e1c:	400204b8 	.word	0x400204b8
 8002e20:	58025408 	.word	0x58025408
 8002e24:	5802541c 	.word	0x5802541c
 8002e28:	58025430 	.word	0x58025430
 8002e2c:	58025444 	.word	0x58025444
 8002e30:	58025458 	.word	0x58025458
 8002e34:	5802546c 	.word	0x5802546c
 8002e38:	58025480 	.word	0x58025480
 8002e3c:	58025494 	.word	0x58025494
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6d      	ldr	r2, [pc, #436]	; (8003010 <HAL_DMA_Abort+0x444>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_DMA_Abort+0x448>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_DMA_Abort+0x44c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a68      	ldr	r2, [pc, #416]	; (800301c <HAL_DMA_Abort+0x450>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a67      	ldr	r2, [pc, #412]	; (8003020 <HAL_DMA_Abort+0x454>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_DMA_Abort+0x458>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a64      	ldr	r2, [pc, #400]	; (8003028 <HAL_DMA_Abort+0x45c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a62      	ldr	r2, [pc, #392]	; (800302c <HAL_DMA_Abort+0x460>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_DMA_Abort+0x464>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5f      	ldr	r2, [pc, #380]	; (8003034 <HAL_DMA_Abort+0x468>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_DMA_Abort+0x46c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5c      	ldr	r2, [pc, #368]	; (800303c <HAL_DMA_Abort+0x470>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <HAL_DMA_Abort+0x474>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_DMA_Abort+0x478>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_DMA_Abort+0x47c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_Abort+0x32a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_DMA_Abort+0x480>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <HAL_DMA_Abort+0x33c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e007      	b.n	8002f18 <HAL_DMA_Abort+0x34c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f18:	e013      	b.n	8002f42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7fe ff31 	bl	8001d80 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d90c      	bls.n	8002f42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e12d      	b.n	800319e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2f      	ldr	r2, [pc, #188]	; (8003010 <HAL_DMA_Abort+0x444>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_DMA_Abort+0x448>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <HAL_DMA_Abort+0x44c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2a      	ldr	r2, [pc, #168]	; (800301c <HAL_DMA_Abort+0x450>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_DMA_Abort+0x454>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a27      	ldr	r2, [pc, #156]	; (8003024 <HAL_DMA_Abort+0x458>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_DMA_Abort+0x45c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <HAL_DMA_Abort+0x460>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <HAL_DMA_Abort+0x464>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a21      	ldr	r2, [pc, #132]	; (8003034 <HAL_DMA_Abort+0x468>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_DMA_Abort+0x46c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_DMA_Abort+0x470>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_DMA_Abort+0x474>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_DMA_Abort+0x478>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_DMA_Abort+0x47c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Abort+0x422>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_DMA_Abort+0x480>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Abort+0x426>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_Abort+0x428>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02b      	beq.n	8003050 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	223f      	movs	r2, #63	; 0x3f
 8003008:	409a      	lsls	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	e02a      	b.n	8003066 <HAL_DMA_Abort+0x49a>
 8003010:	40020010 	.word	0x40020010
 8003014:	40020028 	.word	0x40020028
 8003018:	40020040 	.word	0x40020040
 800301c:	40020058 	.word	0x40020058
 8003020:	40020070 	.word	0x40020070
 8003024:	40020088 	.word	0x40020088
 8003028:	400200a0 	.word	0x400200a0
 800302c:	400200b8 	.word	0x400200b8
 8003030:	40020410 	.word	0x40020410
 8003034:	40020428 	.word	0x40020428
 8003038:	40020440 	.word	0x40020440
 800303c:	40020458 	.word	0x40020458
 8003040:	40020470 	.word	0x40020470
 8003044:	40020488 	.word	0x40020488
 8003048:	400204a0 	.word	0x400204a0
 800304c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4f      	ldr	r2, [pc, #316]	; (80031a8 <HAL_DMA_Abort+0x5dc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d072      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <HAL_DMA_Abort+0x5e0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d06d      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_DMA_Abort+0x5e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d068      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <HAL_DMA_Abort+0x5e8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d063      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_DMA_Abort+0x5ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d05e      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_DMA_Abort+0x5f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d059      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_DMA_Abort+0x5f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d054      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a44      	ldr	r2, [pc, #272]	; (80031c4 <HAL_DMA_Abort+0x5f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d04f      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a43      	ldr	r2, [pc, #268]	; (80031c8 <HAL_DMA_Abort+0x5fc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04a      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a41      	ldr	r2, [pc, #260]	; (80031cc <HAL_DMA_Abort+0x600>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <HAL_DMA_Abort+0x604>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d040      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3e      	ldr	r2, [pc, #248]	; (80031d4 <HAL_DMA_Abort+0x608>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03b      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3d      	ldr	r2, [pc, #244]	; (80031d8 <HAL_DMA_Abort+0x60c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d036      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_DMA_Abort+0x610>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d031      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_DMA_Abort+0x614>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d02c      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a38      	ldr	r2, [pc, #224]	; (80031e4 <HAL_DMA_Abort+0x618>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d027      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a37      	ldr	r2, [pc, #220]	; (80031e8 <HAL_DMA_Abort+0x61c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a35      	ldr	r2, [pc, #212]	; (80031ec <HAL_DMA_Abort+0x620>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <HAL_DMA_Abort+0x624>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a32      	ldr	r2, [pc, #200]	; (80031f4 <HAL_DMA_Abort+0x628>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <HAL_DMA_Abort+0x62c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_DMA_Abort+0x630>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2e      	ldr	r2, [pc, #184]	; (8003200 <HAL_DMA_Abort+0x634>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_DMA_Abort+0x58a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_DMA_Abort+0x638>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_DMA_Abort+0x58e>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_DMA_Abort+0x590>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003168:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800318a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
 80031e8:	58025408 	.word	0x58025408
 80031ec:	5802541c 	.word	0x5802541c
 80031f0:	58025430 	.word	0x58025430
 80031f4:	58025444 	.word	0x58025444
 80031f8:	58025458 	.word	0x58025458
 80031fc:	5802546c 	.word	0x5802546c
 8003200:	58025480 	.word	0x58025480
 8003204:	58025494 	.word	0x58025494

08003208 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e237      	b.n	800368a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e22c      	b.n	800368a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5c      	ldr	r2, [pc, #368]	; (80033a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04a      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5b      	ldr	r2, [pc, #364]	; (80033ac <HAL_DMA_Abort_IT+0x1a4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d045      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a59      	ldr	r2, [pc, #356]	; (80033b0 <HAL_DMA_Abort_IT+0x1a8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d040      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d03b      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <HAL_DMA_Abort_IT+0x1b0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d036      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a55      	ldr	r2, [pc, #340]	; (80033bc <HAL_DMA_Abort_IT+0x1b4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a53      	ldr	r2, [pc, #332]	; (80033c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02c      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a52      	ldr	r2, [pc, #328]	; (80033c4 <HAL_DMA_Abort_IT+0x1bc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d027      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a4f      	ldr	r2, [pc, #316]	; (80033cc <HAL_DMA_Abort_IT+0x1c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_DMA_Abort_IT+0x1c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_DMA_Abort_IT+0x1cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_DMA_Abort_IT+0x1d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_DMA_Abort_IT+0x1d4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_DMA_Abort_IT+0x1d8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_Abort_IT+0xc8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a46      	ldr	r2, [pc, #280]	; (80033e4 <HAL_DMA_Abort_IT+0x1dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Abort_IT+0xcc>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_DMA_Abort_IT+0xce>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8086 	beq.w	80033e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2204      	movs	r2, #4
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <HAL_DMA_Abort_IT+0x1a0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <HAL_DMA_Abort_IT+0x1a4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <HAL_DMA_Abort_IT+0x1a8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_DMA_Abort_IT+0x1b4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <HAL_DMA_Abort_IT+0x1c0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_DMA_Abort_IT+0x1c4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_DMA_Abort_IT+0x1c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_DMA_Abort_IT+0x1d4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_Abort_IT+0x17c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <HAL_DMA_Abort_IT+0x18e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e178      	b.n	8003688 <HAL_DMA_Abort_IT+0x480>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e16f      	b.n	8003688 <HAL_DMA_Abort_IT+0x480>
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020e 	bic.w	r2, r2, #14
 80033f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_DMA_Abort_IT+0x3a8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d04a      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6b      	ldr	r2, [pc, #428]	; (80035b4 <HAL_DMA_Abort_IT+0x3ac>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d045      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <HAL_DMA_Abort_IT+0x3b0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d040      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a68      	ldr	r2, [pc, #416]	; (80035bc <HAL_DMA_Abort_IT+0x3b4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d03b      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a66      	ldr	r2, [pc, #408]	; (80035c0 <HAL_DMA_Abort_IT+0x3b8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d036      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_DMA_Abort_IT+0x3bc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d031      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_DMA_Abort_IT+0x3c0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02c      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a62      	ldr	r2, [pc, #392]	; (80035cc <HAL_DMA_Abort_IT+0x3c4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d027      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_DMA_Abort_IT+0x3c8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d022      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5f      	ldr	r2, [pc, #380]	; (80035d4 <HAL_DMA_Abort_IT+0x3cc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d01d      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a5c      	ldr	r2, [pc, #368]	; (80035dc <HAL_DMA_Abort_IT+0x3d4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a59      	ldr	r2, [pc, #356]	; (80035e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a57      	ldr	r2, [pc, #348]	; (80035e8 <HAL_DMA_Abort_IT+0x3e0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_DMA_Abort_IT+0x290>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_DMA_Abort_IT+0x3e4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d108      	bne.n	80034aa <HAL_DMA_Abort_IT+0x2a2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e007      	b.n	80034ba <HAL_DMA_Abort_IT+0x2b2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <HAL_DMA_Abort_IT+0x3a8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d072      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3a      	ldr	r2, [pc, #232]	; (80035b4 <HAL_DMA_Abort_IT+0x3ac>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d06d      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <HAL_DMA_Abort_IT+0x3b0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d068      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a37      	ldr	r2, [pc, #220]	; (80035bc <HAL_DMA_Abort_IT+0x3b4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d063      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <HAL_DMA_Abort_IT+0x3b8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d05e      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_DMA_Abort_IT+0x3bc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d059      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a33      	ldr	r2, [pc, #204]	; (80035c8 <HAL_DMA_Abort_IT+0x3c0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d054      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a31      	ldr	r2, [pc, #196]	; (80035cc <HAL_DMA_Abort_IT+0x3c4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04f      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <HAL_DMA_Abort_IT+0x3c8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d04a      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <HAL_DMA_Abort_IT+0x3cc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d045      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d040      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <HAL_DMA_Abort_IT+0x3d4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d03b      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d036      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d031      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <HAL_DMA_Abort_IT+0x3e0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d02c      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <HAL_DMA_Abort_IT+0x3e4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d027      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_DMA_Abort_IT+0x3e8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <HAL_DMA_Abort_IT+0x3ec>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01d      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_DMA_Abort_IT+0x3f0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d018      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_DMA_Abort_IT+0x3f4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_DMA_Abort_IT+0x3f8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00e      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_DMA_Abort_IT+0x3fc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_DMA_Abort_IT+0x400>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_DMA_Abort_IT+0x3a2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <HAL_DMA_Abort_IT+0x404>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d132      	bne.n	8003610 <HAL_DMA_Abort_IT+0x408>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e031      	b.n	8003612 <HAL_DMA_Abort_IT+0x40a>
 80035ae:	bf00      	nop
 80035b0:	40020010 	.word	0x40020010
 80035b4:	40020028 	.word	0x40020028
 80035b8:	40020040 	.word	0x40020040
 80035bc:	40020058 	.word	0x40020058
 80035c0:	40020070 	.word	0x40020070
 80035c4:	40020088 	.word	0x40020088
 80035c8:	400200a0 	.word	0x400200a0
 80035cc:	400200b8 	.word	0x400200b8
 80035d0:	40020410 	.word	0x40020410
 80035d4:	40020428 	.word	0x40020428
 80035d8:	40020440 	.word	0x40020440
 80035dc:	40020458 	.word	0x40020458
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204a0 	.word	0x400204a0
 80035ec:	400204b8 	.word	0x400204b8
 80035f0:	58025408 	.word	0x58025408
 80035f4:	5802541c 	.word	0x5802541c
 80035f8:	58025430 	.word	0x58025430
 80035fc:	58025444 	.word	0x58025444
 8003600:	58025458 	.word	0x58025458
 8003604:	5802546c 	.word	0x5802546c
 8003608:	58025480 	.word	0x58025480
 800360c:	58025494 	.word	0x58025494
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d028      	beq.n	8003668 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003644:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800365c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003666:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop

08003694 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036a0:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_DMA_IRQHandler+0x1ac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a67      	ldr	r2, [pc, #412]	; (8003844 <HAL_DMA_IRQHandler+0x1b0>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5f      	ldr	r2, [pc, #380]	; (8003848 <HAL_DMA_IRQHandler+0x1b4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d04a      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5d      	ldr	r2, [pc, #372]	; (800384c <HAL_DMA_IRQHandler+0x1b8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d045      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a5c      	ldr	r2, [pc, #368]	; (8003850 <HAL_DMA_IRQHandler+0x1bc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d040      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a5a      	ldr	r2, [pc, #360]	; (8003854 <HAL_DMA_IRQHandler+0x1c0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d03b      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a59      	ldr	r2, [pc, #356]	; (8003858 <HAL_DMA_IRQHandler+0x1c4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d036      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_DMA_IRQHandler+0x1c8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d031      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a56      	ldr	r2, [pc, #344]	; (8003860 <HAL_DMA_IRQHandler+0x1cc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d02c      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a54      	ldr	r2, [pc, #336]	; (8003864 <HAL_DMA_IRQHandler+0x1d0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d027      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a53      	ldr	r2, [pc, #332]	; (8003868 <HAL_DMA_IRQHandler+0x1d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a51      	ldr	r2, [pc, #324]	; (800386c <HAL_DMA_IRQHandler+0x1d8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01d      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a50      	ldr	r2, [pc, #320]	; (8003870 <HAL_DMA_IRQHandler+0x1dc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4e      	ldr	r2, [pc, #312]	; (8003874 <HAL_DMA_IRQHandler+0x1e0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <HAL_DMA_IRQHandler+0x1e4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4b      	ldr	r2, [pc, #300]	; (800387c <HAL_DMA_IRQHandler+0x1e8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <HAL_DMA_IRQHandler+0x1ec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_DMA_IRQHandler+0xd2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_DMA_IRQHandler+0x1f0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_DMA_IRQHandler+0xd6>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_DMA_IRQHandler+0xd8>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 842b 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2208      	movs	r2, #8
 800377c:	409a      	lsls	r2, r3
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a2 	beq.w	80038cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2e      	ldr	r2, [pc, #184]	; (8003848 <HAL_DMA_IRQHandler+0x1b4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d04a      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_DMA_IRQHandler+0x1b8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d045      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <HAL_DMA_IRQHandler+0x1bc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d040      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <HAL_DMA_IRQHandler+0x1c0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d03b      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a28      	ldr	r2, [pc, #160]	; (8003858 <HAL_DMA_IRQHandler+0x1c4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d036      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a27      	ldr	r2, [pc, #156]	; (800385c <HAL_DMA_IRQHandler+0x1c8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d031      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <HAL_DMA_IRQHandler+0x1cc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d02c      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a24      	ldr	r2, [pc, #144]	; (8003864 <HAL_DMA_IRQHandler+0x1d0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d027      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <HAL_DMA_IRQHandler+0x1d4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d022      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_DMA_IRQHandler+0x1d8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d01d      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <HAL_DMA_IRQHandler+0x1dc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d018      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <HAL_DMA_IRQHandler+0x1e0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <HAL_DMA_IRQHandler+0x1e4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	; (800387c <HAL_DMA_IRQHandler+0x1e8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <HAL_DMA_IRQHandler+0x1ec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_DMA_IRQHandler+0x194>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_DMA_IRQHandler+0x1f0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d12f      	bne.n	8003888 <HAL_DMA_IRQHandler+0x1f4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e02e      	b.n	800389c <HAL_DMA_IRQHandler+0x208>
 800383e:	bf00      	nop
 8003840:	24000000 	.word	0x24000000
 8003844:	1b4e81b5 	.word	0x1b4e81b5
 8003848:	40020010 	.word	0x40020010
 800384c:	40020028 	.word	0x40020028
 8003850:	40020040 	.word	0x40020040
 8003854:	40020058 	.word	0x40020058
 8003858:	40020070 	.word	0x40020070
 800385c:	40020088 	.word	0x40020088
 8003860:	400200a0 	.word	0x400200a0
 8003864:	400200b8 	.word	0x400200b8
 8003868:	40020410 	.word	0x40020410
 800386c:	40020428 	.word	0x40020428
 8003870:	40020440 	.word	0x40020440
 8003874:	40020458 	.word	0x40020458
 8003878:	40020470 	.word	0x40020470
 800387c:	40020488 	.word	0x40020488
 8003880:	400204a0 	.word	0x400204a0
 8003884:	400204b8 	.word	0x400204b8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2208      	movs	r2, #8
 80038ba:	409a      	lsls	r2, r3
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d06e      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a69      	ldr	r2, [pc, #420]	; (8003a8c <HAL_DMA_IRQHandler+0x3f8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_DMA_IRQHandler+0x3fc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a66      	ldr	r2, [pc, #408]	; (8003a94 <HAL_DMA_IRQHandler+0x400>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a64      	ldr	r2, [pc, #400]	; (8003a98 <HAL_DMA_IRQHandler+0x404>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a63      	ldr	r2, [pc, #396]	; (8003a9c <HAL_DMA_IRQHandler+0x408>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a61      	ldr	r2, [pc, #388]	; (8003aa0 <HAL_DMA_IRQHandler+0x40c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a60      	ldr	r2, [pc, #384]	; (8003aa4 <HAL_DMA_IRQHandler+0x410>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5e      	ldr	r2, [pc, #376]	; (8003aa8 <HAL_DMA_IRQHandler+0x414>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5d      	ldr	r2, [pc, #372]	; (8003aac <HAL_DMA_IRQHandler+0x418>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5b      	ldr	r2, [pc, #364]	; (8003ab0 <HAL_DMA_IRQHandler+0x41c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5a      	ldr	r2, [pc, #360]	; (8003ab4 <HAL_DMA_IRQHandler+0x420>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_DMA_IRQHandler+0x424>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_DMA_IRQHandler+0x428>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a55      	ldr	r2, [pc, #340]	; (8003ac0 <HAL_DMA_IRQHandler+0x42c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_DMA_IRQHandler+0x430>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2ee>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <HAL_DMA_IRQHandler+0x434>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10a      	bne.n	8003998 <HAL_DMA_IRQHandler+0x304>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e003      	b.n	80039a0 <HAL_DMA_IRQHandler+0x30c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f043 0202 	orr.w	r2, r3, #2
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2204      	movs	r2, #4
 80039ca:	409a      	lsls	r2, r3
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 808f 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <HAL_DMA_IRQHandler+0x3f8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04a      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_DMA_IRQHandler+0x3fc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d045      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_DMA_IRQHandler+0x400>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d040      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_DMA_IRQHandler+0x404>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d03b      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_DMA_IRQHandler+0x408>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d036      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <HAL_DMA_IRQHandler+0x40c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d031      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_DMA_IRQHandler+0x410>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d02c      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_IRQHandler+0x414>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d027      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a20      	ldr	r2, [pc, #128]	; (8003aac <HAL_DMA_IRQHandler+0x418>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_IRQHandler+0x41c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_DMA_IRQHandler+0x420>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_DMA_IRQHandler+0x424>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <HAL_DMA_IRQHandler+0x428>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_DMA_IRQHandler+0x42c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_DMA_IRQHandler+0x430>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x3e2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_DMA_IRQHandler+0x434>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d12a      	bne.n	8003acc <HAL_DMA_IRQHandler+0x438>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e023      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x440>
 8003a8c:	40020010 	.word	0x40020010
 8003a90:	40020028 	.word	0x40020028
 8003a94:	40020040 	.word	0x40020040
 8003a98:	40020058 	.word	0x40020058
 8003a9c:	40020070 	.word	0x40020070
 8003aa0:	40020088 	.word	0x40020088
 8003aa4:	400200a0 	.word	0x400200a0
 8003aa8:	400200b8 	.word	0x400200b8
 8003aac:	40020410 	.word	0x40020410
 8003ab0:	40020428 	.word	0x40020428
 8003ab4:	40020440 	.word	0x40020440
 8003ab8:	40020458 	.word	0x40020458
 8003abc:	40020470 	.word	0x40020470
 8003ac0:	40020488 	.word	0x40020488
 8003ac4:	400204a0 	.word	0x400204a0
 8003ac8:	400204b8 	.word	0x400204b8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2210      	movs	r2, #16
 8003afe:	409a      	lsls	r2, r3
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a6 	beq.w	8003c56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a85      	ldr	r2, [pc, #532]	; (8003d24 <HAL_DMA_IRQHandler+0x690>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a83      	ldr	r2, [pc, #524]	; (8003d28 <HAL_DMA_IRQHandler+0x694>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a82      	ldr	r2, [pc, #520]	; (8003d2c <HAL_DMA_IRQHandler+0x698>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a80      	ldr	r2, [pc, #512]	; (8003d30 <HAL_DMA_IRQHandler+0x69c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7f      	ldr	r2, [pc, #508]	; (8003d34 <HAL_DMA_IRQHandler+0x6a0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a7d      	ldr	r2, [pc, #500]	; (8003d38 <HAL_DMA_IRQHandler+0x6a4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	; (8003d3c <HAL_DMA_IRQHandler+0x6a8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7a      	ldr	r2, [pc, #488]	; (8003d40 <HAL_DMA_IRQHandler+0x6ac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a79      	ldr	r2, [pc, #484]	; (8003d44 <HAL_DMA_IRQHandler+0x6b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a77      	ldr	r2, [pc, #476]	; (8003d48 <HAL_DMA_IRQHandler+0x6b4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_DMA_IRQHandler+0x6b8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	; (8003d50 <HAL_DMA_IRQHandler+0x6bc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	; (8003d54 <HAL_DMA_IRQHandler+0x6c0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a71      	ldr	r2, [pc, #452]	; (8003d58 <HAL_DMA_IRQHandler+0x6c4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	; (8003d5c <HAL_DMA_IRQHandler+0x6c8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0x516>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_DMA_IRQHandler+0x6cc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x52c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e009      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x540>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d03e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2210      	movs	r2, #16
 8003be2:	409a      	lsls	r2, r3
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d024      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
 8003c14:	e01f      	b.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
 8003c26:	e016      	b.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2220      	movs	r2, #32
 8003c60:	409a      	lsls	r2, r3
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8110 	beq.w	8003e8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	; (8003d24 <HAL_DMA_IRQHandler+0x690>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_DMA_IRQHandler+0x694>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_DMA_IRQHandler+0x698>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <HAL_DMA_IRQHandler+0x69c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_DMA_IRQHandler+0x6a0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <HAL_DMA_IRQHandler+0x6a4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <HAL_DMA_IRQHandler+0x6a8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_DMA_IRQHandler+0x6ac>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <HAL_DMA_IRQHandler+0x6b0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <HAL_DMA_IRQHandler+0x6b4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_DMA_IRQHandler+0x6b8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_DMA_IRQHandler+0x6bc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <HAL_DMA_IRQHandler+0x6c0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_DMA_IRQHandler+0x6c4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_DMA_IRQHandler+0x6c8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x678>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_DMA_IRQHandler+0x6cc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d12b      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x6d0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e02a      	b.n	8003d78 <HAL_DMA_IRQHandler+0x6e4>
 8003d22:	bf00      	nop
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8087 	beq.w	8003e8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2220      	movs	r2, #32
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d139      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_IRQHandler+0x736>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	223f      	movs	r2, #63	; 0x3f
 8003de4:	409a      	lsls	r2, r3
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 834a 	beq.w	8004498 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
          }
          return;
 8003e0c:	e344      	b.n	8004498 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02c      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e027      	b.n	8003e8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
 8003e4c:	e01e      	b.n	8003e8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0210 	bic.w	r2, r2, #16
 8003e6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8306 	beq.w	80044a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8088 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7a      	ldr	r2, [pc, #488]	; (800409c <HAL_DMA_IRQHandler+0xa08>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d04a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a79      	ldr	r2, [pc, #484]	; (80040a0 <HAL_DMA_IRQHandler+0xa0c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d045      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a77      	ldr	r2, [pc, #476]	; (80040a4 <HAL_DMA_IRQHandler+0xa10>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d040      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a76      	ldr	r2, [pc, #472]	; (80040a8 <HAL_DMA_IRQHandler+0xa14>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d03b      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a74      	ldr	r2, [pc, #464]	; (80040ac <HAL_DMA_IRQHandler+0xa18>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d036      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a73      	ldr	r2, [pc, #460]	; (80040b0 <HAL_DMA_IRQHandler+0xa1c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d031      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a71      	ldr	r2, [pc, #452]	; (80040b4 <HAL_DMA_IRQHandler+0xa20>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d02c      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a70      	ldr	r2, [pc, #448]	; (80040b8 <HAL_DMA_IRQHandler+0xa24>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d027      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a6e      	ldr	r2, [pc, #440]	; (80040bc <HAL_DMA_IRQHandler+0xa28>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d022      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a6d      	ldr	r2, [pc, #436]	; (80040c0 <HAL_DMA_IRQHandler+0xa2c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d01d      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <HAL_DMA_IRQHandler+0xa30>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d018      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6a      	ldr	r2, [pc, #424]	; (80040c8 <HAL_DMA_IRQHandler+0xa34>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a68      	ldr	r2, [pc, #416]	; (80040cc <HAL_DMA_IRQHandler+0xa38>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <HAL_DMA_IRQHandler+0xa3c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d009      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a65      	ldr	r2, [pc, #404]	; (80040d4 <HAL_DMA_IRQHandler+0xa40>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x8b8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a64      	ldr	r2, [pc, #400]	; (80040d8 <HAL_DMA_IRQHandler+0xa44>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x8ca>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e007      	b.n	8003f6e <HAL_DMA_IRQHandler+0x8da>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d307      	bcc.n	8003f8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f2      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x8da>
 8003f88:	e000      	b.n	8003f8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fa2:	e003      	b.n	8003fac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8272 	beq.w	80044a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
 8003fc6:	e26c      	b.n	80044a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a43      	ldr	r2, [pc, #268]	; (80040dc <HAL_DMA_IRQHandler+0xa48>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a42      	ldr	r2, [pc, #264]	; (80040e0 <HAL_DMA_IRQHandler+0xa4c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01d      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <HAL_DMA_IRQHandler+0xa50>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a3f      	ldr	r2, [pc, #252]	; (80040e8 <HAL_DMA_IRQHandler+0xa54>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3d      	ldr	r2, [pc, #244]	; (80040ec <HAL_DMA_IRQHandler+0xa58>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3c      	ldr	r2, [pc, #240]	; (80040f0 <HAL_DMA_IRQHandler+0xa5c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <HAL_DMA_IRQHandler+0xa60>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_DMA_IRQHandler+0x984>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a39      	ldr	r2, [pc, #228]	; (80040f8 <HAL_DMA_IRQHandler+0xa64>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_DMA_IRQHandler+0x988>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_DMA_IRQHandler+0x98a>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 823f 	beq.w	80044a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2204      	movs	r2, #4
 8004036:	409a      	lsls	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80cd 	beq.w	80041dc <HAL_DMA_IRQHandler+0xb48>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80c7 	beq.w	80041dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2204      	movs	r2, #4
 8004058:	409a      	lsls	r2, r3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d049      	beq.n	80040fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8210 	beq.w	800449c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004084:	e20a      	b.n	800449c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8206 	beq.w	800449c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004098:	e200      	b.n	800449c <HAL_DMA_IRQHandler+0xe08>
 800409a:	bf00      	nop
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d160      	bne.n	80041c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7f      	ldr	r2, [pc, #508]	; (8004308 <HAL_DMA_IRQHandler+0xc74>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d04a      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7d      	ldr	r2, [pc, #500]	; (800430c <HAL_DMA_IRQHandler+0xc78>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d045      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a7c      	ldr	r2, [pc, #496]	; (8004310 <HAL_DMA_IRQHandler+0xc7c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d040      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7a      	ldr	r2, [pc, #488]	; (8004314 <HAL_DMA_IRQHandler+0xc80>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d03b      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a79      	ldr	r2, [pc, #484]	; (8004318 <HAL_DMA_IRQHandler+0xc84>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d036      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a77      	ldr	r2, [pc, #476]	; (800431c <HAL_DMA_IRQHandler+0xc88>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d031      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a76      	ldr	r2, [pc, #472]	; (8004320 <HAL_DMA_IRQHandler+0xc8c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d02c      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a74      	ldr	r2, [pc, #464]	; (8004324 <HAL_DMA_IRQHandler+0xc90>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d027      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a73      	ldr	r2, [pc, #460]	; (8004328 <HAL_DMA_IRQHandler+0xc94>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a71      	ldr	r2, [pc, #452]	; (800432c <HAL_DMA_IRQHandler+0xc98>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a70      	ldr	r2, [pc, #448]	; (8004330 <HAL_DMA_IRQHandler+0xc9c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6e      	ldr	r2, [pc, #440]	; (8004334 <HAL_DMA_IRQHandler+0xca0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6d      	ldr	r2, [pc, #436]	; (8004338 <HAL_DMA_IRQHandler+0xca4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6b      	ldr	r2, [pc, #428]	; (800433c <HAL_DMA_IRQHandler+0xca8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6a      	ldr	r2, [pc, #424]	; (8004340 <HAL_DMA_IRQHandler+0xcac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xb12>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a68      	ldr	r2, [pc, #416]	; (8004344 <HAL_DMA_IRQHandler+0xcb0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <HAL_DMA_IRQHandler+0xb24>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0208 	bic.w	r2, r2, #8
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e007      	b.n	80041c8 <HAL_DMA_IRQHandler+0xb34>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8165 	beq.w	800449c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041da:	e15f      	b.n	800449c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2202      	movs	r2, #2
 80041e6:	409a      	lsls	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80c5 	beq.w	800437c <HAL_DMA_IRQHandler+0xce8>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80bf 	beq.w	800437c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2202      	movs	r2, #2
 8004208:	409a      	lsls	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 813a 	beq.w	80044a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004234:	e134      	b.n	80044a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8130 	beq.w	80044a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004248:	e12a      	b.n	80044a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 8089 	bne.w	8004368 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_DMA_IRQHandler+0xc74>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d04a      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <HAL_DMA_IRQHandler+0xc78>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d045      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a28      	ldr	r2, [pc, #160]	; (8004310 <HAL_DMA_IRQHandler+0xc7c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d040      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <HAL_DMA_IRQHandler+0xc80>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d03b      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <HAL_DMA_IRQHandler+0xc84>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d036      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a23      	ldr	r2, [pc, #140]	; (800431c <HAL_DMA_IRQHandler+0xc88>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d031      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <HAL_DMA_IRQHandler+0xc8c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d02c      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a20      	ldr	r2, [pc, #128]	; (8004324 <HAL_DMA_IRQHandler+0xc90>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d027      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_DMA_IRQHandler+0xc94>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_DMA_IRQHandler+0xc98>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01d      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_DMA_IRQHandler+0xc9c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d018      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <HAL_DMA_IRQHandler+0xca0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_DMA_IRQHandler+0xca4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_DMA_IRQHandler+0xca8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <HAL_DMA_IRQHandler+0xcac>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xc62>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <HAL_DMA_IRQHandler+0xcb0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d128      	bne.n	8004348 <HAL_DMA_IRQHandler+0xcb4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0214 	bic.w	r2, r2, #20
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e027      	b.n	8004358 <HAL_DMA_IRQHandler+0xcc4>
 8004308:	40020010 	.word	0x40020010
 800430c:	40020028 	.word	0x40020028
 8004310:	40020040 	.word	0x40020040
 8004314:	40020058 	.word	0x40020058
 8004318:	40020070 	.word	0x40020070
 800431c:	40020088 	.word	0x40020088
 8004320:	400200a0 	.word	0x400200a0
 8004324:	400200b8 	.word	0x400200b8
 8004328:	40020410 	.word	0x40020410
 800432c:	40020428 	.word	0x40020428
 8004330:	40020440 	.word	0x40020440
 8004334:	40020458 	.word	0x40020458
 8004338:	40020470 	.word	0x40020470
 800433c:	40020488 	.word	0x40020488
 8004340:	400204a0 	.word	0x400204a0
 8004344:	400204b8 	.word	0x400204b8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020a 	bic.w	r2, r2, #10
 8004356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8097 	beq.w	80044a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437a:	e091      	b.n	80044a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2208      	movs	r2, #8
 8004386:	409a      	lsls	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8088 	beq.w	80044a2 <HAL_DMA_IRQHandler+0xe0e>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8082 	beq.w	80044a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a41      	ldr	r2, [pc, #260]	; (80044a8 <HAL_DMA_IRQHandler+0xe14>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <HAL_DMA_IRQHandler+0xe18>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3e      	ldr	r2, [pc, #248]	; (80044b0 <HAL_DMA_IRQHandler+0xe1c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3c      	ldr	r2, [pc, #240]	; (80044b4 <HAL_DMA_IRQHandler+0xe20>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_DMA_IRQHandler+0xe24>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a39      	ldr	r2, [pc, #228]	; (80044bc <HAL_DMA_IRQHandler+0xe28>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <HAL_DMA_IRQHandler+0xe2c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a36      	ldr	r2, [pc, #216]	; (80044c4 <HAL_DMA_IRQHandler+0xe30>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <HAL_DMA_IRQHandler+0xe34>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a33      	ldr	r2, [pc, #204]	; (80044cc <HAL_DMA_IRQHandler+0xe38>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a32      	ldr	r2, [pc, #200]	; (80044d0 <HAL_DMA_IRQHandler+0xe3c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <HAL_DMA_IRQHandler+0xe40>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <HAL_DMA_IRQHandler+0xe44>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <HAL_DMA_IRQHandler+0xe48>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <HAL_DMA_IRQHandler+0xe4c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_DMA_IRQHandler+0xdaa>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <HAL_DMA_IRQHandler+0xe50>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <HAL_DMA_IRQHandler+0xdbc>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 021c 	bic.w	r2, r2, #28
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e007      	b.n	8004460 <HAL_DMA_IRQHandler+0xdcc>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020e 	bic.w	r2, r2, #14
 800445e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
 8004496:	e004      	b.n	80044a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004498:	bf00      	nop
 800449a:	e002      	b.n	80044a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800449c:	bf00      	nop
 800449e:	e000      	b.n	80044a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8

080044e8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7f      	ldr	r2, [pc, #508]	; (800471c <DMA_SetConfig+0x21c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d072      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7d      	ldr	r2, [pc, #500]	; (8004720 <DMA_SetConfig+0x220>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d06d      	beq.n	800460a <DMA_SetConfig+0x10a>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7c      	ldr	r2, [pc, #496]	; (8004724 <DMA_SetConfig+0x224>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d068      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a7a      	ldr	r2, [pc, #488]	; (8004728 <DMA_SetConfig+0x228>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d063      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a79      	ldr	r2, [pc, #484]	; (800472c <DMA_SetConfig+0x22c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d05e      	beq.n	800460a <DMA_SetConfig+0x10a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a77      	ldr	r2, [pc, #476]	; (8004730 <DMA_SetConfig+0x230>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d059      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a76      	ldr	r2, [pc, #472]	; (8004734 <DMA_SetConfig+0x234>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d054      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a74      	ldr	r2, [pc, #464]	; (8004738 <DMA_SetConfig+0x238>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d04f      	beq.n	800460a <DMA_SetConfig+0x10a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a73      	ldr	r2, [pc, #460]	; (800473c <DMA_SetConfig+0x23c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d04a      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a71      	ldr	r2, [pc, #452]	; (8004740 <DMA_SetConfig+0x240>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d045      	beq.n	800460a <DMA_SetConfig+0x10a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a70      	ldr	r2, [pc, #448]	; (8004744 <DMA_SetConfig+0x244>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d040      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6e      	ldr	r2, [pc, #440]	; (8004748 <DMA_SetConfig+0x248>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d03b      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6d      	ldr	r2, [pc, #436]	; (800474c <DMA_SetConfig+0x24c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d036      	beq.n	800460a <DMA_SetConfig+0x10a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6b      	ldr	r2, [pc, #428]	; (8004750 <DMA_SetConfig+0x250>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <DMA_SetConfig+0x254>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02c      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a68      	ldr	r2, [pc, #416]	; (8004758 <DMA_SetConfig+0x258>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d027      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a67      	ldr	r2, [pc, #412]	; (800475c <DMA_SetConfig+0x25c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a65      	ldr	r2, [pc, #404]	; (8004760 <DMA_SetConfig+0x260>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a64      	ldr	r2, [pc, #400]	; (8004764 <DMA_SetConfig+0x264>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a62      	ldr	r2, [pc, #392]	; (8004768 <DMA_SetConfig+0x268>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a61      	ldr	r2, [pc, #388]	; (800476c <DMA_SetConfig+0x26c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5f      	ldr	r2, [pc, #380]	; (8004770 <DMA_SetConfig+0x270>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5e      	ldr	r2, [pc, #376]	; (8004774 <DMA_SetConfig+0x274>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <DMA_SetConfig+0x278>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <DMA_SetConfig+0x10e>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <DMA_SetConfig+0x110>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800461c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800462e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <DMA_SetConfig+0x21c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d04a      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a38      	ldr	r2, [pc, #224]	; (8004720 <DMA_SetConfig+0x220>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d045      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a36      	ldr	r2, [pc, #216]	; (8004724 <DMA_SetConfig+0x224>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d040      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a35      	ldr	r2, [pc, #212]	; (8004728 <DMA_SetConfig+0x228>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d03b      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <DMA_SetConfig+0x22c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d036      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <DMA_SetConfig+0x230>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d031      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a30      	ldr	r2, [pc, #192]	; (8004734 <DMA_SetConfig+0x234>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d02c      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <DMA_SetConfig+0x238>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d027      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <DMA_SetConfig+0x23c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <DMA_SetConfig+0x240>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d01d      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <DMA_SetConfig+0x244>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <DMA_SetConfig+0x248>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <DMA_SetConfig+0x24c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <DMA_SetConfig+0x250>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a24      	ldr	r2, [pc, #144]	; (8004754 <DMA_SetConfig+0x254>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <DMA_SetConfig+0x1d0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a23      	ldr	r2, [pc, #140]	; (8004758 <DMA_SetConfig+0x258>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <DMA_SetConfig+0x1d4>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <DMA_SetConfig+0x1d6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d059      	beq.n	800478e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	223f      	movs	r2, #63	; 0x3f
 80046e4:	409a      	lsls	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d138      	bne.n	800477c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800471a:	e086      	b.n	800482a <DMA_SetConfig+0x32a>
 800471c:	40020010 	.word	0x40020010
 8004720:	40020028 	.word	0x40020028
 8004724:	40020040 	.word	0x40020040
 8004728:	40020058 	.word	0x40020058
 800472c:	40020070 	.word	0x40020070
 8004730:	40020088 	.word	0x40020088
 8004734:	400200a0 	.word	0x400200a0
 8004738:	400200b8 	.word	0x400200b8
 800473c:	40020410 	.word	0x40020410
 8004740:	40020428 	.word	0x40020428
 8004744:	40020440 	.word	0x40020440
 8004748:	40020458 	.word	0x40020458
 800474c:	40020470 	.word	0x40020470
 8004750:	40020488 	.word	0x40020488
 8004754:	400204a0 	.word	0x400204a0
 8004758:	400204b8 	.word	0x400204b8
 800475c:	58025408 	.word	0x58025408
 8004760:	5802541c 	.word	0x5802541c
 8004764:	58025430 	.word	0x58025430
 8004768:	58025444 	.word	0x58025444
 800476c:	58025458 	.word	0x58025458
 8004770:	5802546c 	.word	0x5802546c
 8004774:	58025480 	.word	0x58025480
 8004778:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
}
 800478c:	e04d      	b.n	800482a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <DMA_SetConfig+0x338>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <DMA_SetConfig+0x2de>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <DMA_SetConfig+0x33c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a26      	ldr	r2, [pc, #152]	; (8004840 <DMA_SetConfig+0x340>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a24      	ldr	r2, [pc, #144]	; (8004844 <DMA_SetConfig+0x344>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <DMA_SetConfig+0x348>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <DMA_SetConfig+0x34c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a20      	ldr	r2, [pc, #128]	; (8004850 <DMA_SetConfig+0x350>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <DMA_SetConfig+0x2de>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <DMA_SetConfig+0x354>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <DMA_SetConfig+0x2e2>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <DMA_SetConfig+0x2e4>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d108      	bne.n	800481a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	60da      	str	r2, [r3, #12]
}
 8004818:	e007      	b.n	800482a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	58025408 	.word	0x58025408
 800483c:	5802541c 	.word	0x5802541c
 8004840:	58025430 	.word	0x58025430
 8004844:	58025444 	.word	0x58025444
 8004848:	58025458 	.word	0x58025458
 800484c:	5802546c 	.word	0x5802546c
 8004850:	58025480 	.word	0x58025480
 8004854:	58025494 	.word	0x58025494

08004858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a42      	ldr	r2, [pc, #264]	; (8004970 <DMA_CalcBaseAndBitshift+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04a      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a41      	ldr	r2, [pc, #260]	; (8004974 <DMA_CalcBaseAndBitshift+0x11c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d045      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <DMA_CalcBaseAndBitshift+0x120>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d040      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3e      	ldr	r2, [pc, #248]	; (800497c <DMA_CalcBaseAndBitshift+0x124>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d03b      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <DMA_CalcBaseAndBitshift+0x128>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d036      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <DMA_CalcBaseAndBitshift+0x12c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d031      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a39      	ldr	r2, [pc, #228]	; (8004988 <DMA_CalcBaseAndBitshift+0x130>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02c      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a38      	ldr	r2, [pc, #224]	; (800498c <DMA_CalcBaseAndBitshift+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d027      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a36      	ldr	r2, [pc, #216]	; (8004990 <DMA_CalcBaseAndBitshift+0x138>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a35      	ldr	r2, [pc, #212]	; (8004994 <DMA_CalcBaseAndBitshift+0x13c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01d      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a33      	ldr	r2, [pc, #204]	; (8004998 <DMA_CalcBaseAndBitshift+0x140>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a32      	ldr	r2, [pc, #200]	; (800499c <DMA_CalcBaseAndBitshift+0x144>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <DMA_CalcBaseAndBitshift+0x148>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <DMA_CalcBaseAndBitshift+0x150>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <DMA_CalcBaseAndBitshift+0xa8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <DMA_CalcBaseAndBitshift+0x154>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <DMA_CalcBaseAndBitshift+0xac>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <DMA_CalcBaseAndBitshift+0xae>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d024      	beq.n	8004954 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	3b10      	subs	r3, #16
 8004912:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <DMA_CalcBaseAndBitshift+0x158>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d908      	bls.n	8004944 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <DMA_CalcBaseAndBitshift+0x160>)
 800493a:	4013      	ands	r3, r2
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	659a      	str	r2, [r3, #88]	; 0x58
 8004942:	e00d      	b.n	8004960 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <DMA_CalcBaseAndBitshift+0x160>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
 8004952:	e005      	b.n	8004960 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40020010 	.word	0x40020010
 8004974:	40020028 	.word	0x40020028
 8004978:	40020040 	.word	0x40020040
 800497c:	40020058 	.word	0x40020058
 8004980:	40020070 	.word	0x40020070
 8004984:	40020088 	.word	0x40020088
 8004988:	400200a0 	.word	0x400200a0
 800498c:	400200b8 	.word	0x400200b8
 8004990:	40020410 	.word	0x40020410
 8004994:	40020428 	.word	0x40020428
 8004998:	40020440 	.word	0x40020440
 800499c:	40020458 	.word	0x40020458
 80049a0:	40020470 	.word	0x40020470
 80049a4:	40020488 	.word	0x40020488
 80049a8:	400204a0 	.word	0x400204a0
 80049ac:	400204b8 	.word	0x400204b8
 80049b0:	aaaaaaab 	.word	0xaaaaaaab
 80049b4:	0800b8c0 	.word	0x0800b8c0
 80049b8:	fffffc00 	.word	0xfffffc00

080049bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d120      	bne.n	8004a12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d858      	bhi.n	8004a8a <DMA_CheckFifoParam+0xce>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <DMA_CheckFifoParam+0x24>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	08004a03 	.word	0x08004a03
 80049e8:	080049f1 	.word	0x080049f1
 80049ec:	08004a8b 	.word	0x08004a8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d048      	beq.n	8004a8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a00:	e045      	b.n	8004a8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a0a:	d142      	bne.n	8004a92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a10:	e03f      	b.n	8004a92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1a:	d123      	bne.n	8004a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d838      	bhi.n	8004a96 <DMA_CheckFifoParam+0xda>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <DMA_CheckFifoParam+0x70>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a43 	.word	0x08004a43
 8004a34:	08004a3d 	.word	0x08004a3d
 8004a38:	08004a55 	.word	0x08004a55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a40:	e030      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d025      	beq.n	8004a9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a52:	e022      	b.n	8004a9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a5c:	d11f      	bne.n	8004a9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a62:	e01c      	b.n	8004a9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d902      	bls.n	8004a72 <DMA_CheckFifoParam+0xb6>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d003      	beq.n	8004a78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a70:	e018      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
        break;
 8004a76:	e015      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
    break;
 8004a88:	e00b      	b.n	8004aa2 <DMA_CheckFifoParam+0xe6>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e00a      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e008      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a92:	bf00      	nop
 8004a94:	e006      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a96:	bf00      	nop
 8004a98:	e004      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <DMA_CheckFifoParam+0xe8>
    break;
 8004aa2:	bf00      	nop
    }
  }

  return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop

08004ab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a36      	ldr	r2, [pc, #216]	; (8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01d      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a35      	ldr	r2, [pc, #212]	; (8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a33      	ldr	r2, [pc, #204]	; (8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01a      	beq.n	8004b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	3b08      	subs	r3, #8
 8004b24:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2201      	movs	r2, #1
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b50:	e024      	b.n	8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	3b10      	subs	r3, #16
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d806      	bhi.n	8004b7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d902      	bls.n	8004b7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3308      	adds	r3, #8
 8004b78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2201      	movs	r2, #1
 8004b96:	409a      	lsls	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494
 8004bc8:	cccccccd 	.word	0xcccccccd
 8004bcc:	16009600 	.word	0x16009600
 8004bd0:	58025880 	.word	0x58025880
 8004bd4:	aaaaaaab 	.word	0xaaaaaaab
 8004bd8:	400204b8 	.word	0x400204b8
 8004bdc:	4002040f 	.word	0x4002040f
 8004be0:	10008200 	.word	0x10008200
 8004be4:	40020880 	.word	0x40020880

08004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04a      	beq.n	8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d847      	bhi.n	8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a21      	ldr	r2, [pc, #132]	; (8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c70:	671a      	str	r2, [r3, #112]	; 0x70
 8004c72:	e009      	b.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c86:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494
 8004cc0:	1600963f 	.word	0x1600963f
 8004cc4:	58025940 	.word	0x58025940
 8004cc8:	1000823f 	.word	0x1000823f
 8004ccc:	40020940 	.word	0x40020940

08004cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0cf      	b.n	8004e82 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2223      	movs	r2, #35	; 0x23
 8004cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fc fc61 	bl	80015bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfa:	4b64      	ldr	r3, [pc, #400]	; (8004e8c <HAL_ETH_Init+0x1bc>)
 8004cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d00:	4a62      	ldr	r2, [pc, #392]	; (8004e8c <HAL_ETH_Init+0x1bc>)
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d0a:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <HAL_ETH_Init+0x1bc>)
 8004d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7a1b      	ldrb	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d20:	2000      	movs	r0, #0
 8004d22:	f7fd f869 	bl	8001df8 <HAL_SYSCFG_ETHInterfaceSelect>
 8004d26:	e003      	b.n	8004d30 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d2c:	f7fd f864 	bl	8001df8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004d30:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_ETH_Init+0x1c0>)
 8004d32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d4c:	f7fd f818 	bl	8001d80 <HAL_GetTick>
 8004d50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d52:	e011      	b.n	8004d78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d54:	f7fd f814 	bl	8001d80 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d62:	d909      	bls.n	8004d78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2204      	movs	r2, #4
 8004d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	22e0      	movs	r2, #224	; 0xe0
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e084      	b.n	8004e82 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e4      	bne.n	8004d54 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f886 	bl	8004e9c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004d90:	f001 fee4 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a3f      	ldr	r2, [pc, #252]	; (8004e94 <HAL_ETH_Init+0x1c4>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	0c9a      	lsrs	r2, r3, #18
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3a01      	subs	r2, #1
 8004da4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa71 	bl	8005290 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004dba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	22e0      	movs	r2, #224	; 0xe0
 8004de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e049      	b.n	8004e82 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004dfa:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_ETH_Init+0x1c8>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6952      	ldr	r2, [r2, #20]
 8004e02:	0051      	lsls	r1, r2, #1
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fad9 	bl	80053ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb1f 	bl	800545c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	3305      	adds	r3, #5
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3303      	adds	r3, #3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	061a      	lsls	r2, r3, #24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	3301      	adds	r3, #1
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	58000400 	.word	0x58000400
 8004e94:	431bde83 	.word	0x431bde83
 8004e98:	ffff8001 	.word	0xffff8001

08004e9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004eb6:	f001 fe51 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8004eba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d908      	bls.n	8004ed6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d804      	bhi.n	8004ed6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e027      	b.n	8004f26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d908      	bls.n	8004ef0 <HAL_ETH_SetMDIOClockRange+0x54>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d204      	bcs.n	8004ef0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e01a      	b.n	8004f26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d303      	bcc.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x64>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d911      	bls.n	8004f24 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d908      	bls.n	8004f1a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d804      	bhi.n	8004f1a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e005      	b.n	8004f26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e000      	b.n	8004f26 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f24:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	01312cff 	.word	0x01312cff
 8004f3c:	02160ebf 	.word	0x02160ebf
 8004f40:	03938700 	.word	0x03938700
 8004f44:	05f5e0ff 	.word	0x05f5e0ff
 8004f48:	08f0d17f 	.word	0x08f0d17f

08004f4c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	791b      	ldrb	r3, [r3, #4]
 8004f64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	7b1b      	ldrb	r3, [r3, #12]
 8004f6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	7b5b      	ldrb	r3, [r3, #13]
 8004f74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	7b9b      	ldrb	r3, [r3, #14]
 8004f7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	7bdb      	ldrb	r3, [r3, #15]
 8004f84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	7c12      	ldrb	r2, [r2, #16]
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d102      	bne.n	8004f96 <ETH_SetMACConfig+0x4a>
 8004f90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f94:	e000      	b.n	8004f98 <ETH_SetMACConfig+0x4c>
 8004f96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	7c52      	ldrb	r2, [r2, #17]
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	d102      	bne.n	8004fa8 <ETH_SetMACConfig+0x5c>
 8004fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fa6:	e000      	b.n	8004faa <ETH_SetMACConfig+0x5e>
 8004fa8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004faa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	7c9b      	ldrb	r3, [r3, #18]
 8004fb0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004fb2:	431a      	orrs	r2, r3
               macconf->Speed |
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fb8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7f1b      	ldrb	r3, [r3, #28]
 8004fc4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004fc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	7f5b      	ldrb	r3, [r3, #29]
 8004fcc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	7f92      	ldrb	r2, [r2, #30]
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	d102      	bne.n	8004fde <ETH_SetMACConfig+0x92>
 8004fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fdc:	e000      	b.n	8004fe0 <ETH_SetMACConfig+0x94>
 8004fde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fe0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	7fdb      	ldrb	r3, [r3, #31]
 8004fe6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fe8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d102      	bne.n	8004ffa <ETH_SetMACConfig+0xae>
 8004ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff8:	e000      	b.n	8004ffc <ETH_SetMACConfig+0xb0>
 8004ffa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ffc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800500c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b56      	ldr	r3, [pc, #344]	; (8005178 <ETH_SetMACConfig+0x22c>)
 800501e:	4013      	ands	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	430b      	orrs	r3, r1
 8005028:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005036:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005038:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005040:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800504a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800504c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005054:	2a00      	cmp	r2, #0
 8005056:	d102      	bne.n	800505e <ETH_SetMACConfig+0x112>
 8005058:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800505c:	e000      	b.n	8005060 <ETH_SetMACConfig+0x114>
 800505e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005060:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b42      	ldr	r3, [pc, #264]	; (800517c <ETH_SetMACConfig+0x230>)
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	430b      	orrs	r3, r1
 800507c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005084:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <ETH_SetMACConfig+0x234>)
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	68f9      	ldr	r1, [r7, #12]
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80050a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d101      	bne.n	80050be <ETH_SetMACConfig+0x172>
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	e000      	b.n	80050c0 <ETH_SetMACConfig+0x174>
 80050be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80050c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80050d6:	4013      	ands	r3, r2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	430b      	orrs	r3, r1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80050f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f023 0103 	bic.w	r1, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	430a      	orrs	r2, r1
 800510a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005116:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005132:	2a00      	cmp	r2, #0
 8005134:	d101      	bne.n	800513a <ETH_SetMACConfig+0x1ee>
 8005136:	2240      	movs	r2, #64	; 0x40
 8005138:	e000      	b.n	800513c <ETH_SetMACConfig+0x1f0>
 800513a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800513c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005144:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800514e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800515c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	430a      	orrs	r2, r1
 8005168:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00048083 	.word	0x00048083
 800517c:	c0f88000 	.word	0xc0f88000
 8005180:	fffffef0 	.word	0xfffffef0

08005184 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b38      	ldr	r3, [pc, #224]	; (800527c <ETH_SetDMAConfig+0xf8>)
 800519a:	4013      	ands	r3, r2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	6811      	ldr	r1, [r2, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	7b1b      	ldrb	r3, [r3, #12]
 80051bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <ETH_SetDMAConfig+0xfc>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	430b      	orrs	r3, r1
 80051d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	7b5b      	ldrb	r3, [r3, #13]
 80051e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80051f8:	4b22      	ldr	r3, [pc, #136]	; (8005284 <ETH_SetDMAConfig+0x100>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	430b      	orrs	r3, r1
 8005204:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005208:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	7d1b      	ldrb	r3, [r3, #20]
 8005214:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005216:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7f5b      	ldrb	r3, [r3, #29]
 800521c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <ETH_SetDMAConfig+0x104>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	430b      	orrs	r3, r1
 800523a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800523e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	7f1b      	ldrb	r3, [r3, #28]
 8005246:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005258:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <ETH_SetDMAConfig+0x108>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	430b      	orrs	r3, r1
 8005268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800526c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	ffff87fd 	.word	0xffff87fd
 8005280:	ffff2ffe 	.word	0xffff2ffe
 8005284:	fffec000 	.word	0xfffec000
 8005288:	ffc0efef 	.word	0xffc0efef
 800528c:	7fc0ffff 	.word	0x7fc0ffff

08005290 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0a4      	sub	sp, #144	; 0x90
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800529e:	2300      	movs	r3, #0
 80052a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80052d8:	2300      	movs	r3, #0
 80052da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80052e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80052ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80052f4:	2300      	movs	r3, #0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800530a:	2300      	movs	r3, #0
 800530c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800530e:	2300      	movs	r3, #0
 8005310:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005312:	2300      	movs	r3, #0
 8005314:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005328:	2320      	movs	r3, #32
 800532a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800533a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800534c:	2302      	movs	r3, #2
 800534e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005352:	2300      	movs	r3, #0
 8005354:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800536a:	2300      	movs	r3, #0
 800536c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fde6 	bl	8004f4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005380:	2301      	movs	r3, #1
 8005382:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005384:	2301      	movs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005392:	2300      	movs	r3, #0
 8005394:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800539a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800539e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80053b0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fee1 	bl	8005184 <ETH_SetDMAConfig>
}
 80053c2:	bf00      	nop
 80053c4:	3790      	adds	r7, #144	; 0x90
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e01d      	b.n	8005414 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68d9      	ldr	r1, [r3, #12]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	3206      	adds	r2, #6
 800540a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b03      	cmp	r3, #3
 8005418:	d9de      	bls.n	80053d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	461a      	mov	r2, r3
 800542a:	2303      	movs	r3, #3
 800542c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e023      	b.n	80054b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6919      	ldr	r1, [r3, #16]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	3212      	adds	r2, #18
 80054a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d9d8      	bls.n	800546a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054de:	461a      	mov	r2, r3
 80054e0:	2303      	movs	r3, #3
 80054e2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005526:	4b89      	ldr	r3, [pc, #548]	; (800574c <HAL_GPIO_Init+0x234>)
 8005528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800552a:	e194      	b.n	8005856 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2101      	movs	r1, #1
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8186 	beq.w	8005850 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d005      	beq.n	800555c <HAL_GPIO_Init+0x44>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d130      	bne.n	80055be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	2203      	movs	r2, #3
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005592:	2201      	movs	r2, #1
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 0201 	and.w	r2, r3, #1
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d017      	beq.n	80055fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2203      	movs	r2, #3
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d123      	bne.n	800564e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	08da      	lsrs	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3208      	adds	r2, #8
 800560e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	220f      	movs	r2, #15
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4013      	ands	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	08da      	lsrs	r2, r3, #3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3208      	adds	r2, #8
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0203 	and.w	r2, r3, #3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80e0 	beq.w	8005850 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005690:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <HAL_GPIO_Init+0x238>)
 8005692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005696:	4a2e      	ldr	r2, [pc, #184]	; (8005750 <HAL_GPIO_Init+0x238>)
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056a0:	4b2b      	ldr	r3, [pc, #172]	; (8005750 <HAL_GPIO_Init+0x238>)
 80056a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ae:	4a29      	ldr	r2, [pc, #164]	; (8005754 <HAL_GPIO_Init+0x23c>)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	089b      	lsrs	r3, r3, #2
 80056b4:	3302      	adds	r3, #2
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	220f      	movs	r2, #15
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <HAL_GPIO_Init+0x240>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d052      	beq.n	8005780 <HAL_GPIO_Init+0x268>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_GPIO_Init+0x244>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <HAL_GPIO_Init+0x22e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_GPIO_Init+0x248>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02b      	beq.n	8005742 <HAL_GPIO_Init+0x22a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <HAL_GPIO_Init+0x24c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d025      	beq.n	800573e <HAL_GPIO_Init+0x226>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <HAL_GPIO_Init+0x250>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <HAL_GPIO_Init+0x222>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <HAL_GPIO_Init+0x254>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d019      	beq.n	8005736 <HAL_GPIO_Init+0x21e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <HAL_GPIO_Init+0x258>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_GPIO_Init+0x21a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_GPIO_Init+0x25c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00d      	beq.n	800572e <HAL_GPIO_Init+0x216>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <HAL_GPIO_Init+0x260>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <HAL_GPIO_Init+0x212>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_GPIO_Init+0x264>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_GPIO_Init+0x20e>
 8005722:	2309      	movs	r3, #9
 8005724:	e02d      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 8005726:	230a      	movs	r3, #10
 8005728:	e02b      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 800572a:	2308      	movs	r3, #8
 800572c:	e029      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 800572e:	2307      	movs	r3, #7
 8005730:	e027      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 8005732:	2306      	movs	r3, #6
 8005734:	e025      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 8005736:	2305      	movs	r3, #5
 8005738:	e023      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 800573a:	2304      	movs	r3, #4
 800573c:	e021      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 800573e:	2303      	movs	r3, #3
 8005740:	e01f      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 8005742:	2302      	movs	r3, #2
 8005744:	e01d      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 8005746:	2301      	movs	r3, #1
 8005748:	e01b      	b.n	8005782 <HAL_GPIO_Init+0x26a>
 800574a:	bf00      	nop
 800574c:	58000080 	.word	0x58000080
 8005750:	58024400 	.word	0x58024400
 8005754:	58000400 	.word	0x58000400
 8005758:	58020000 	.word	0x58020000
 800575c:	58020400 	.word	0x58020400
 8005760:	58020800 	.word	0x58020800
 8005764:	58020c00 	.word	0x58020c00
 8005768:	58021000 	.word	0x58021000
 800576c:	58021400 	.word	0x58021400
 8005770:	58021800 	.word	0x58021800
 8005774:	58021c00 	.word	0x58021c00
 8005778:	58022000 	.word	0x58022000
 800577c:	58022400 	.word	0x58022400
 8005780:	2300      	movs	r3, #0
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	f002 0203 	and.w	r2, r2, #3
 8005788:	0092      	lsls	r2, r2, #2
 800578a:	4093      	lsls	r3, r2
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005792:	4938      	ldr	r1, [pc, #224]	; (8005874 <HAL_GPIO_Init+0x35c>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	3302      	adds	r3, #2
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f ae63 	bne.w	800552c <HAL_GPIO_Init+0x14>
  }
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3724      	adds	r7, #36	; 0x24
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	58000400 	.word	0x58000400

08005878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
 8005884:	4613      	mov	r3, r2
 8005886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005888:	787b      	ldrb	r3, [r7, #1]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005894:	e003      	b.n	800589e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	041a      	lsls	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	619a      	str	r2, [r3, #24]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058bc:	887a      	ldrh	r2, [r7, #2]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4013      	ands	r3, r2
 80058c2:	041a      	lsls	r2, r3, #16
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	43d9      	mvns	r1, r3
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	400b      	ands	r3, r1
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	619a      	str	r2, [r3, #24]
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_HSEM_FastTake+0x2c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3320      	adds	r3, #32
 80058ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f2:	4a07      	ldr	r2, [pc, #28]	; (8005910 <HAL_HSEM_FastTake+0x30>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e000      	b.n	80058fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	58026400 	.word	0x58026400
 8005910:	80000300 	.word	0x80000300

08005914 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800591e:	4906      	ldr	r1, [pc, #24]	; (8005938 <HAL_HSEM_Release+0x24>)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	58026400 	.word	0x58026400

0800593c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593e:	b08f      	sub	sp, #60	; 0x3c
 8005940:	af0a      	add	r7, sp, #40	; 0x28
 8005942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e116      	b.n	8005b7c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fc f86d 	bl	8001a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2203      	movs	r2, #3
 8005972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f005 fbe5 	bl	800b15c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	687e      	ldr	r6, [r7, #4]
 800599a:	466d      	mov	r5, sp
 800599c:	f106 0410 	add.w	r4, r6, #16
 80059a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80059b0:	1d33      	adds	r3, r6, #4
 80059b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059b4:	6838      	ldr	r0, [r7, #0]
 80059b6:	f005 fb63 	bl	800b080 <USB_CoreInit>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0d7      	b.n	8005b7c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f005 fbd3 	bl	800b17e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e04a      	b.n	8005a74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	333d      	adds	r3, #61	; 0x3d
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	333c      	adds	r3, #60	; 0x3c
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	b298      	uxth	r0, r3
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	3344      	adds	r3, #68	; 0x44
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3340      	adds	r3, #64	; 0x40
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3348      	adds	r3, #72	; 0x48
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	334c      	adds	r3, #76	; 0x4c
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3354      	adds	r3, #84	; 0x54
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	3301      	adds	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d3af      	bcc.n	80059de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
 8005a82:	e044      	b.n	8005b0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a84:	7bfa      	ldrb	r2, [r7, #15]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	7bfa      	ldrb	r2, [r7, #15]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d3b5      	bcc.n	8005a84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	687e      	ldr	r6, [r7, #4]
 8005b20:	466d      	mov	r5, sp
 8005b22:	f106 0410 	add.w	r4, r6, #16
 8005b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b36:	1d33      	adds	r3, r6, #4
 8005b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	f005 fb6c 	bl	800b218 <USB_DevInit>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e014      	b.n	8005b7c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f80a 	bl	8005b84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f005 fd2a 	bl	800b5ce <USB_DevDisconnect>

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	10000003 	.word	0x10000003

08005bcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d00a      	beq.n	8005bf6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005be0:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d001      	beq.n	8005bf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e040      	b.n	8005c74 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e03e      	b.n	8005c74 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005bfe:	491f      	ldr	r1, [pc, #124]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c06:	f7fc f8bb 	bl	8001d80 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c0c:	e009      	b.n	8005c22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c0e:	f7fc f8b7 	bl	8001d80 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c1c:	d901      	bls.n	8005c22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e028      	b.n	8005c74 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	d1ee      	bne.n	8005c0e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b1e      	cmp	r3, #30
 8005c34:	d008      	beq.n	8005c48 <HAL_PWREx_ConfigSupply+0x7c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b2e      	cmp	r3, #46	; 0x2e
 8005c3a:	d005      	beq.n	8005c48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b1d      	cmp	r3, #29
 8005c40:	d002      	beq.n	8005c48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b2d      	cmp	r3, #45	; 0x2d
 8005c46:	d114      	bne.n	8005c72 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c48:	f7fc f89a 	bl	8001d80 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c4e:	e009      	b.n	8005c64 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c50:	f7fc f896 	bl	8001d80 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d901      	bls.n	8005c64 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e007      	b.n	8005c74 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d1ee      	bne.n	8005c50 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	58024800 	.word	0x58024800

08005c80 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	60d3      	str	r3, [r2, #12]
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	58024800 	.word	0x58024800

08005ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f000 bc1d 	b.w	80064ee <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8087 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	4b99      	ldr	r3, [pc, #612]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ccc:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d007      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x48>
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	2b18      	cmp	r3, #24
 8005cdc:	d110      	bne.n	8005d00 <HAL_RCC_OscConfig+0x60>
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d10b      	bne.n	8005d00 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d06c      	beq.n	8005dce <HAL_RCC_OscConfig+0x12e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d168      	bne.n	8005dce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e3f6      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d106      	bne.n	8005d18 <HAL_RCC_OscConfig+0x78>
 8005d0a:	4b87      	ldr	r3, [pc, #540]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a86      	ldr	r2, [pc, #536]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e02e      	b.n	8005d76 <HAL_RCC_OscConfig+0xd6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10c      	bne.n	8005d3a <HAL_RCC_OscConfig+0x9a>
 8005d20:	4b81      	ldr	r3, [pc, #516]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a80      	ldr	r2, [pc, #512]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b7e      	ldr	r3, [pc, #504]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7d      	ldr	r2, [pc, #500]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e01d      	b.n	8005d76 <HAL_RCC_OscConfig+0xd6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d42:	d10c      	bne.n	8005d5e <HAL_RCC_OscConfig+0xbe>
 8005d44:	4b78      	ldr	r3, [pc, #480]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a77      	ldr	r2, [pc, #476]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	4b75      	ldr	r3, [pc, #468]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a74      	ldr	r2, [pc, #464]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e00b      	b.n	8005d76 <HAL_RCC_OscConfig+0xd6>
 8005d5e:	4b72      	ldr	r3, [pc, #456]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a71      	ldr	r2, [pc, #452]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b6f      	ldr	r3, [pc, #444]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a6e      	ldr	r2, [pc, #440]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d013      	beq.n	8005da6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fb ffff 	bl	8001d80 <HAL_GetTick>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d86:	f7fb fffb 	bl	8001d80 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b64      	cmp	r3, #100	; 0x64
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e3aa      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d98:	4b63      	ldr	r3, [pc, #396]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCC_OscConfig+0xe6>
 8005da4:	e014      	b.n	8005dd0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fb ffeb 	bl	8001d80 <HAL_GetTick>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dae:	f7fb ffe7 	bl	8001d80 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b64      	cmp	r3, #100	; 0x64
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e396      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dc0:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f0      	bne.n	8005dae <HAL_RCC_OscConfig+0x10e>
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80cb 	beq.w	8005f74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dde:	4b52      	ldr	r3, [pc, #328]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005de8:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <HAL_RCC_OscConfig+0x164>
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b18      	cmp	r3, #24
 8005df8:	d156      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x208>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d151      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e04:	4b48      	ldr	r3, [pc, #288]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_OscConfig+0x17c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e368      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e1c:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 0219 	bic.w	r2, r3, #25
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	493f      	ldr	r1, [pc, #252]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e2e:	f7fb ffa7 	bl	8001d80 <HAL_GetTick>
 8005e32:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e36:	f7fb ffa3 	bl	8001d80 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e352      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e48:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e54:	f7fb ffc4 	bl	8001de0 <HAL_GetREVID>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d817      	bhi.n	8005e92 <HAL_RCC_OscConfig+0x1f2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d108      	bne.n	8005e7c <HAL_RCC_OscConfig+0x1dc>
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e72:	4a2d      	ldr	r2, [pc, #180]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e7a:	e07b      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	4927      	ldr	r1, [pc, #156]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e90:	e070      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e92:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	061b      	lsls	r3, r3, #24
 8005ea0:	4921      	ldr	r1, [pc, #132]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea6:	e065      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d048      	beq.n	8005f42 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f023 0219 	bic.w	r2, r3, #25
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	491a      	ldr	r1, [pc, #104]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec2:	f7fb ff5d 	bl	8001d80 <HAL_GetTick>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eca:	f7fb ff59 	bl	8001d80 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e308      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee8:	f7fb ff7a 	bl	8001de0 <HAL_GetREVID>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d81a      	bhi.n	8005f2c <HAL_RCC_OscConfig+0x28c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d108      	bne.n	8005f10 <HAL_RCC_OscConfig+0x270>
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f06:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	6053      	str	r3, [r2, #4]
 8005f0e:	e031      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	4902      	ldr	r1, [pc, #8]	; (8005f28 <HAL_RCC_OscConfig+0x288>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	e026      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	4b9a      	ldr	r3, [pc, #616]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	4997      	ldr	r1, [pc, #604]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
 8005f40:	e018      	b.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b95      	ldr	r3, [pc, #596]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a94      	ldr	r2, [pc, #592]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fb ff17 	bl	8001d80 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f56:	f7fb ff13 	bl	8001d80 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e2c2      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f68:	4b8b      	ldr	r3, [pc, #556]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f0      	bne.n	8005f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80a9 	beq.w	80060d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f82:	4b85      	ldr	r3, [pc, #532]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f8c:	4b82      	ldr	r3, [pc, #520]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d007      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x308>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b18      	cmp	r3, #24
 8005f9c:	d13a      	bne.n	8006014 <HAL_RCC_OscConfig+0x374>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d135      	bne.n	8006014 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fa8:	4b7b      	ldr	r3, [pc, #492]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x320>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e296      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fc0:	f7fb ff0e 	bl	8001de0 <HAL_GetREVID>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d817      	bhi.n	8005ffe <HAL_RCC_OscConfig+0x35e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d108      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x348>
 8005fd6:	4b70      	ldr	r3, [pc, #448]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fde:	4a6e      	ldr	r2, [pc, #440]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe6:	e075      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fe8:	4b6b      	ldr	r3, [pc, #428]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	069b      	lsls	r3, r3, #26
 8005ff6:	4968      	ldr	r1, [pc, #416]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ffc:	e06a      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ffe:	4b66      	ldr	r3, [pc, #408]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	4962      	ldr	r1, [pc, #392]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800600e:	4313      	orrs	r3, r2
 8006010:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006012:	e05f      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d042      	beq.n	80060a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800601c:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fb feaa 	bl	8001d80 <HAL_GetTick>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006030:	f7fb fea6 	bl	8001d80 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e255      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006042:	4b55      	ldr	r3, [pc, #340]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604e:	f7fb fec7 	bl	8001de0 <HAL_GetREVID>
 8006052:	4603      	mov	r3, r0
 8006054:	f241 0203 	movw	r2, #4099	; 0x1003
 8006058:	4293      	cmp	r3, r2
 800605a:	d817      	bhi.n	800608c <HAL_RCC_OscConfig+0x3ec>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	2b20      	cmp	r3, #32
 8006062:	d108      	bne.n	8006076 <HAL_RCC_OscConfig+0x3d6>
 8006064:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800606c:	4a4a      	ldr	r2, [pc, #296]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800606e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006072:	6053      	str	r3, [r2, #4]
 8006074:	e02e      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
 8006076:	4b48      	ldr	r3, [pc, #288]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	069b      	lsls	r3, r3, #26
 8006084:	4944      	ldr	r1, [pc, #272]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
 800608a:	e023      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
 800608c:	4b42      	ldr	r3, [pc, #264]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	493f      	ldr	r1, [pc, #252]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800609c:	4313      	orrs	r3, r2
 800609e:	60cb      	str	r3, [r1, #12]
 80060a0:	e018      	b.n	80060d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060a2:	4b3d      	ldr	r3, [pc, #244]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3c      	ldr	r2, [pc, #240]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 80060a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fb fe67 	bl	8001d80 <HAL_GetTick>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060b6:	f7fb fe63 	bl	8001d80 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e212      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060c8:	4b33      	ldr	r3, [pc, #204]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d036      	beq.n	800614e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d019      	beq.n	800611c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e8:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 80060ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fb fe44 	bl	8001d80 <HAL_GetTick>
 80060f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fb fe40 	bl	8001d80 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e1ef      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800610e:	4b22      	ldr	r3, [pc, #136]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x45c>
 800611a:	e018      	b.n	800614e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800611c:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800611e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006128:	f7fb fe2a 	bl	8001d80 <HAL_GetTick>
 800612c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006130:	f7fb fe26 	bl	8001d80 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e1d5      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d039      	beq.n	80061ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01c      	beq.n	800619c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a0c      	ldr	r2, [pc, #48]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 8006168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800616c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800616e:	f7fb fe07 	bl	8001d80 <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006176:	f7fb fe03 	bl	8001d80 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1b2      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006188:	4b03      	ldr	r3, [pc, #12]	; (8006198 <HAL_RCC_OscConfig+0x4f8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x4d6>
 8006194:	e01b      	b.n	80061ce <HAL_RCC_OscConfig+0x52e>
 8006196:	bf00      	nop
 8006198:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800619c:	4b9b      	ldr	r3, [pc, #620]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a9a      	ldr	r2, [pc, #616]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80061a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061a8:	f7fb fdea 	bl	8001d80 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061b0:	f7fb fde6 	bl	8001d80 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e195      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c2:	4b92      	ldr	r3, [pc, #584]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8081 	beq.w	80062de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061dc:	4b8c      	ldr	r3, [pc, #560]	; (8006410 <HAL_RCC_OscConfig+0x770>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a8b      	ldr	r2, [pc, #556]	; (8006410 <HAL_RCC_OscConfig+0x770>)
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061e8:	f7fb fdca 	bl	8001d80 <HAL_GetTick>
 80061ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f0:	f7fb fdc6 	bl	8001d80 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b64      	cmp	r3, #100	; 0x64
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e175      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006202:	4b83      	ldr	r3, [pc, #524]	; (8006410 <HAL_RCC_OscConfig+0x770>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d106      	bne.n	8006224 <HAL_RCC_OscConfig+0x584>
 8006216:	4b7d      	ldr	r3, [pc, #500]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	4a7c      	ldr	r2, [pc, #496]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
 8006222:	e02d      	b.n	8006280 <HAL_RCC_OscConfig+0x5e0>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10c      	bne.n	8006246 <HAL_RCC_OscConfig+0x5a6>
 800622c:	4b77      	ldr	r3, [pc, #476]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	4a76      	ldr	r2, [pc, #472]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	6713      	str	r3, [r2, #112]	; 0x70
 8006238:	4b74      	ldr	r3, [pc, #464]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4a73      	ldr	r2, [pc, #460]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800623e:	f023 0304 	bic.w	r3, r3, #4
 8006242:	6713      	str	r3, [r2, #112]	; 0x70
 8006244:	e01c      	b.n	8006280 <HAL_RCC_OscConfig+0x5e0>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b05      	cmp	r3, #5
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x5c8>
 800624e:	4b6f      	ldr	r3, [pc, #444]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	4a6e      	ldr	r2, [pc, #440]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006254:	f043 0304 	orr.w	r3, r3, #4
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
 800625a:	4b6c      	ldr	r3, [pc, #432]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a6b      	ldr	r2, [pc, #428]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	e00b      	b.n	8006280 <HAL_RCC_OscConfig+0x5e0>
 8006268:	4b68      	ldr	r3, [pc, #416]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	6713      	str	r3, [r2, #112]	; 0x70
 8006274:	4b65      	ldr	r3, [pc, #404]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a64      	ldr	r2, [pc, #400]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800627a:	f023 0304 	bic.w	r3, r3, #4
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fb fd7a 	bl	8001d80 <HAL_GetTick>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628e:	e00a      	b.n	80062a6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006290:	f7fb fd76 	bl	8001d80 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e123      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a6:	4b59      	ldr	r3, [pc, #356]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ee      	beq.n	8006290 <HAL_RCC_OscConfig+0x5f0>
 80062b2:	e014      	b.n	80062de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fb fd64 	bl	8001d80 <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7fb fd60 	bl	8001d80 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e10d      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1ee      	bne.n	80062bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8102 	beq.w	80064ec <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062e8:	4b48      	ldr	r3, [pc, #288]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f0:	2b18      	cmp	r3, #24
 80062f2:	f000 80bd 	beq.w	8006470 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	f040 809e 	bne.w	800643c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006300:	4b42      	ldr	r3, [pc, #264]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a41      	ldr	r2, [pc, #260]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fb fd38 	bl	8001d80 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006314:	f7fb fd34 	bl	8001d80 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e0e3      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006326:	4b39      	ldr	r3, [pc, #228]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006336:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_RCC_OscConfig+0x774>)
 8006338:	4013      	ands	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	430a      	orrs	r2, r1
 8006346:	4931      	ldr	r1, [pc, #196]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	628b      	str	r3, [r1, #40]	; 0x28
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	3b01      	subs	r3, #1
 8006352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635a:	3b01      	subs	r3, #1
 800635c:	025b      	lsls	r3, r3, #9
 800635e:	b29b      	uxth	r3, r3
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	3b01      	subs	r3, #1
 8006376:	061b      	lsls	r3, r3, #24
 8006378:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800637c:	4923      	ldr	r1, [pc, #140]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800637e:	4313      	orrs	r3, r2
 8006380:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006382:	4b22      	ldr	r3, [pc, #136]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	4a21      	ldr	r2, [pc, #132]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800638e:	4b1f      	ldr	r3, [pc, #124]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 8006390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <HAL_RCC_OscConfig+0x778>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800639a:	00d2      	lsls	r2, r2, #3
 800639c:	491b      	ldr	r1, [pc, #108]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	f023 020c 	bic.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	4917      	ldr	r1, [pc, #92]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063b4:	4b15      	ldr	r3, [pc, #84]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	f023 0202 	bic.w	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	4912      	ldr	r1, [pc, #72]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063c6:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	4a10      	ldr	r2, [pc, #64]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d2:	4b0e      	ldr	r3, [pc, #56]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	4a0d      	ldr	r2, [pc, #52]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063de:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a0a      	ldr	r2, [pc, #40]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063ea:	4b08      	ldr	r3, [pc, #32]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a04      	ldr	r2, [pc, #16]	; (800640c <HAL_RCC_OscConfig+0x76c>)
 80063fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fb fcbd 	bl	8001d80 <HAL_GetTick>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006408:	e011      	b.n	800642e <HAL_RCC_OscConfig+0x78e>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
 8006410:	58024800 	.word	0x58024800
 8006414:	fffffc0c 	.word	0xfffffc0c
 8006418:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641c:	f7fb fcb0 	bl	8001d80 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e05f      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800642e:	4b32      	ldr	r3, [pc, #200]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x77c>
 800643a:	e057      	b.n	80064ec <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643c:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2d      	ldr	r2, [pc, #180]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 8006442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fb fc9a 	bl	8001d80 <HAL_GetTick>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006450:	f7fb fc96 	bl	8001d80 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e045      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006462:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x7b0>
 800646e:	e03d      	b.n	80064ec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006470:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCC_OscConfig+0x858>)
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b01      	cmp	r3, #1
 8006482:	d031      	beq.n	80064e8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f003 0203 	and.w	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d12a      	bne.n	80064e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d122      	bne.n	80064e8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d11a      	bne.n	80064e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	0a5b      	lsrs	r3, r3, #9
 80064b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d111      	bne.n	80064e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d108      	bne.n	80064e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	0e1b      	lsrs	r3, r3, #24
 80064da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d001      	beq.n	80064ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3730      	adds	r7, #48	; 0x30
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	58024400 	.word	0x58024400

080064fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e19c      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b8a      	ldr	r3, [pc, #552]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d910      	bls.n	8006540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b87      	ldr	r3, [pc, #540]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 020f 	bic.w	r2, r3, #15
 8006526:	4985      	ldr	r1, [pc, #532]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b83      	ldr	r3, [pc, #524]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e184      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d010      	beq.n	800656e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006558:	429a      	cmp	r2, r3
 800655a:	d908      	bls.n	800656e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800655c:	4b78      	ldr	r3, [pc, #480]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	4975      	ldr	r1, [pc, #468]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	4b70      	ldr	r3, [pc, #448]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006586:	429a      	cmp	r2, r3
 8006588:	d908      	bls.n	800659c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658a:	4b6d      	ldr	r3, [pc, #436]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	496a      	ldr	r1, [pc, #424]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006598:	4313      	orrs	r3, r2
 800659a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	4b64      	ldr	r3, [pc, #400]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d908      	bls.n	80065ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065b8:	4b61      	ldr	r3, [pc, #388]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	495e      	ldr	r1, [pc, #376]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	4b59      	ldr	r3, [pc, #356]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d908      	bls.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065e6:	4b56      	ldr	r3, [pc, #344]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4953      	ldr	r1, [pc, #332]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	429a      	cmp	r2, r3
 8006612:	d908      	bls.n	8006626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f023 020f 	bic.w	r2, r3, #15
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4947      	ldr	r1, [pc, #284]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006622:	4313      	orrs	r3, r2
 8006624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d055      	beq.n	80066de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006632:	4b43      	ldr	r3, [pc, #268]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4940      	ldr	r1, [pc, #256]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664c:	4b3c      	ldr	r3, [pc, #240]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d121      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d107      	bne.n	8006674 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d115      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0ea      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800667c:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0de      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f023 0207 	bic.w	r2, r3, #7
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4925      	ldr	r1, [pc, #148]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ae:	f7fb fb67 	bl	8001d80 <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b6:	f7fb fb63 	bl	8001d80 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0be      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d1eb      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d010      	beq.n	800670c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d208      	bcs.n	800670c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	490e      	ldr	r1, [pc, #56]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006708:	4313      	orrs	r3, r2
 800670a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d214      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 020f 	bic.w	r2, r3, #15
 8006722:	4906      	ldr	r1, [pc, #24]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	4313      	orrs	r3, r2
 8006728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e086      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
 800673c:	52002000 	.word	0x52002000
 8006740:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800675c:	429a      	cmp	r2, r3
 800675e:	d208      	bcs.n	8006772 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	4939      	ldr	r1, [pc, #228]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800676e:	4313      	orrs	r3, r2
 8006770:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	4b34      	ldr	r3, [pc, #208]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800678a:	429a      	cmp	r2, r3
 800678c:	d208      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	492e      	ldr	r1, [pc, #184]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800679c:	4313      	orrs	r3, r2
 800679e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d208      	bcs.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4922      	ldr	r1, [pc, #136]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d208      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4917      	ldr	r1, [pc, #92]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067fc:	f000 f834 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	4912      	ldr	r1, [pc, #72]	; (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681a:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006824:	5cd3      	ldrb	r3, [r2, r3]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <HAL_RCC_ClockConfig+0x360>)
 8006832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <HAL_RCC_ClockConfig+0x364>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800683a:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x368>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fb fa54 	bl	8001cec <HAL_InitTick>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	0800b8b0 	.word	0x0800b8b0
 800685c:	24000004 	.word	0x24000004
 8006860:	24000000 	.word	0x24000000
 8006864:	24000018 	.word	0x24000018

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686e:	4bb3      	ldr	r3, [pc, #716]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006876:	2b18      	cmp	r3, #24
 8006878:	f200 8155 	bhi.w	8006b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068e9 	.word	0x080068e9
 8006888:	08006b27 	.word	0x08006b27
 800688c:	08006b27 	.word	0x08006b27
 8006890:	08006b27 	.word	0x08006b27
 8006894:	08006b27 	.word	0x08006b27
 8006898:	08006b27 	.word	0x08006b27
 800689c:	08006b27 	.word	0x08006b27
 80068a0:	08006b27 	.word	0x08006b27
 80068a4:	0800690f 	.word	0x0800690f
 80068a8:	08006b27 	.word	0x08006b27
 80068ac:	08006b27 	.word	0x08006b27
 80068b0:	08006b27 	.word	0x08006b27
 80068b4:	08006b27 	.word	0x08006b27
 80068b8:	08006b27 	.word	0x08006b27
 80068bc:	08006b27 	.word	0x08006b27
 80068c0:	08006b27 	.word	0x08006b27
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006b27 	.word	0x08006b27
 80068cc:	08006b27 	.word	0x08006b27
 80068d0:	08006b27 	.word	0x08006b27
 80068d4:	08006b27 	.word	0x08006b27
 80068d8:	08006b27 	.word	0x08006b27
 80068dc:	08006b27 	.word	0x08006b27
 80068e0:	08006b27 	.word	0x08006b27
 80068e4:	0800691b 	.word	0x0800691b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b94      	ldr	r3, [pc, #592]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f4:	4b91      	ldr	r3, [pc, #580]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a90      	ldr	r2, [pc, #576]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006906:	e111      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006908:	4b8d      	ldr	r3, [pc, #564]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800690a:	61bb      	str	r3, [r7, #24]
    break;
 800690c:	e10e      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800690e:	4b8d      	ldr	r3, [pc, #564]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006910:	61bb      	str	r3, [r7, #24]
    break;
 8006912:	e10b      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006914:	4b8c      	ldr	r3, [pc, #560]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006916:	61bb      	str	r3, [r7, #24]
    break;
 8006918:	e108      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691a:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006924:	4b85      	ldr	r3, [pc, #532]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800692e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006930:	4b82      	ldr	r3, [pc, #520]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800693a:	4b80      	ldr	r3, [pc, #512]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 80e1 	beq.w	8006b20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f000 8083 	beq.w	8006a6c <HAL_RCC_GetSysClockFreq+0x204>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f200 80a1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x114>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d056      	beq.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800697a:	e099      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006988:	4b6c      	ldr	r3, [pc, #432]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a6b      	ldr	r2, [pc, #428]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b62      	ldr	r3, [pc, #392]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069e2:	e087      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b51      	ldr	r3, [pc, #324]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a26:	e065      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b40      	ldr	r3, [pc, #256]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6a:	e043      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aae:	e021      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006af4:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afe:	3301      	adds	r3, #1
 8006b00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b18:	ee17 3a90 	vmov	r3, s15
 8006b1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
    break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b28:	61bb      	str	r3, [r7, #24]
    break;
 8006b2a:	bf00      	nop
  }

  return sysclockfreq;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	; 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	03d09000 	.word	0x03d09000
 8006b44:	003d0900 	.word	0x003d0900
 8006b48:	007a1200 	.word	0x007a1200
 8006b4c:	46000000 	.word	0x46000000
 8006b50:	4c742400 	.word	0x4c742400
 8006b54:	4a742400 	.word	0x4a742400
 8006b58:	4af42400 	.word	0x4af42400

08006b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b62:	f7ff fe81 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <HAL_RCC_GetHCLKFreq+0x50>)
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	0a1b      	lsrs	r3, r3, #8
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	490f      	ldr	r1, [pc, #60]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <HAL_RCC_GetHCLKFreq+0x50>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b9a:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0800b8b0 	.word	0x0800b8b0
 8006bb4:	24000004 	.word	0x24000004
 8006bb8:	24000000 	.word	0x24000000

08006bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bc0:	f7ff ffcc 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4904      	ldr	r1, [pc, #16]	; (8006be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	58024400 	.word	0x58024400
 8006be4:	0800b8b0 	.word	0x0800b8b0

08006be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bec:	f7ff ffb6 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	4904      	ldr	r1, [pc, #16]	; (8006c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bfe:	5ccb      	ldrb	r3, [r1, r3]
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	0800b8b0 	.word	0x0800b8b0

08006c14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c20:	2300      	movs	r3, #0
 8006c22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d03f      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c38:	d02a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c3e:	d824      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c44:	d018      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4a:	d81e      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c54:	d007      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c56:	e018      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4ba3      	ldr	r3, [pc, #652]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4aa2      	ldr	r2, [pc, #648]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c64:	e015      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f9d5 	bl	800801c <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c76:	e00c      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3324      	adds	r3, #36	; 0x24
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 fa7e 	bl	8008180 <RCCEx_PLL3_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c88:	e003      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c98:	4b93      	ldr	r3, [pc, #588]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca4:	4990      	ldr	r1, [pc, #576]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8006caa:	e001      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d03d      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d826      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006cef 	.word	0x08006cef
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	08006d19 	.word	0x08006d19
 8006cdc:	08006d19 	.word	0x08006d19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4b81      	ldr	r3, [pc, #516]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a80      	ldr	r2, [pc, #512]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cec:	e015      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f991 	bl	800801c <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e00c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fa3a 	bl	8008180 <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d10:	e003      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d20:	4b71      	ldr	r3, [pc, #452]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	f023 0207 	bic.w	r2, r3, #7
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	496e      	ldr	r1, [pc, #440]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	650b      	str	r3, [r1, #80]	; 0x50
 8006d32:	e001      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d042      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d02b      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d825      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d54:	2bc0      	cmp	r3, #192	; 0xc0
 8006d56:	d028      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d58:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5a:	d821      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d016      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d81d      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d007      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006d6c:	e018      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6e:	4b5e      	ldr	r3, [pc, #376]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	4a5d      	ldr	r2, [pc, #372]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d7a:	e017      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f94a 	bl	800801c <RCCEx_PLL2_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d8c:	e00e      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f9f3 	bl	8008180 <RCCEx_PLL3_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d9e:	e005      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
      break;
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006db2:	4b4d      	ldr	r3, [pc, #308]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	494a      	ldr	r1, [pc, #296]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	650b      	str	r3, [r1, #80]	; 0x50
 8006dc4:	e001      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d049      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de0:	d030      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de6:	d82a      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006de8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dec:	d02c      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006dee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006df2:	d824      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df8:	d018      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dfe:	d81e      	bhi.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e08:	d007      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e0a:	e018      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0c:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a35      	ldr	r2, [pc, #212]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e18:	e017      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f8fb 	bl	800801c <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e2a:	e00e      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3324      	adds	r3, #36	; 0x24
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 f9a4 	bl	8008180 <RCCEx_PLL3_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e3c:	e005      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]
      break;
 8006e42:	e002      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e44:	bf00      	nop
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e5e:	4922      	ldr	r1, [pc, #136]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	658b      	str	r3, [r1, #88]	; 0x58
 8006e64:	e001      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d04b      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e80:	d030      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e86:	d82a      	bhi.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e8c:	d02e      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e92:	d824      	bhi.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e98:	d018      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e9e:	d81e      	bhi.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ea8:	d007      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006eaa:	e018      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a0d      	ldr	r2, [pc, #52]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e019      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f8ab 	bl	800801c <RCCEx_PLL2_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006eca:	e010      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f954 	bl	8008180 <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006edc:	e007      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee2:	e004      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e002      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ee8:	58024400 	.word	0x58024400
      break;
 8006eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ef4:	4b99      	ldr	r3, [pc, #612]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f02:	4996      	ldr	r1, [pc, #600]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	658b      	str	r3, [r1, #88]	; 0x58
 8006f08:	e001      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d032      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	d01c      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006f22:	2b30      	cmp	r3, #48	; 0x30
 8006f24:	d817      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d00c      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d813      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d10f      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f36:	4b89      	ldr	r3, [pc, #548]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	4a88      	ldr	r2, [pc, #544]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f42:	e00e      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	2102      	movs	r1, #2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f866 	bl	800801c <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f54:	e005      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f68:	4b7c      	ldr	r3, [pc, #496]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f74:	4979      	ldr	r1, [pc, #484]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f7a:	e001      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d047      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f94:	d030      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9a:	d82a      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fa0:	d02c      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006fa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fa6:	d824      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	d018      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	d81e      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d007      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006fbe:	e018      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b66      	ldr	r3, [pc, #408]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a65      	ldr	r2, [pc, #404]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fcc:	e017      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 f821 	bl	800801c <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fde:	e00e      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 f8ca 	bl	8008180 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ff0:	e005      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007004:	4b55      	ldr	r3, [pc, #340]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	4952      	ldr	r1, [pc, #328]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007012:	4313      	orrs	r3, r2
 8007014:	650b      	str	r3, [r1, #80]	; 0x50
 8007016:	e001      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d049      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007030:	d02e      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007032:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007036:	d828      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007038:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800703c:	d02a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800703e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007042:	d822      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007048:	d026      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800704a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800704e:	d81c      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007054:	d010      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705a:	d816      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01d      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d111      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2101      	movs	r1, #1
 800706c:	4618      	mov	r0, r3
 800706e:	f000 ffd5 	bl	800801c <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007076:	e012      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	2101      	movs	r1, #1
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f87e 	bl	8008180 <RCCEx_PLL3_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007088:	e009      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
      break;
 800708e:	e006      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007090:	bf00      	nop
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007094:	bf00      	nop
 8007096:	e002      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800709c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070a4:	4b2d      	ldr	r3, [pc, #180]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	492a      	ldr	r1, [pc, #168]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	650b      	str	r3, [r1, #80]	; 0x50
 80070b6:	e001      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d04d      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070d2:	d02e      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80070d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070d8:	d828      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d02a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d822      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80070e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070ea:	d026      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80070ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f0:	d81c      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80070f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f6:	d010      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80070f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070fc:	d816      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01d      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007106:	d111      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f000 ff84 	bl	800801c <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007118:	e012      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2101      	movs	r1, #1
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f82d 	bl	8008180 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800712a:	e009      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	e006      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007132:	bf00      	nop
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10c      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007154:	4901      	ldr	r1, [pc, #4]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007156:	4313      	orrs	r3, r2
 8007158:	658b      	str	r3, [r1, #88]	; 0x58
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800715c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02f      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007178:	d00e      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d814      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d015      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007188:	d10f      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718a:	4baf      	ldr	r3, [pc, #700]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4aae      	ldr	r2, [pc, #696]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007196:	e00c      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ff3c 	bl	800801c <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071b8:	4ba3      	ldr	r3, [pc, #652]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	49a0      	ldr	r1, [pc, #640]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	650b      	str	r3, [r1, #80]	; 0x50
 80071ca:	e001      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d032      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d81b      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007223 	.word	0x08007223
 80071f0:	080071fd 	.word	0x080071fd
 80071f4:	0800720b 	.word	0x0800720b
 80071f8:	08007223 	.word	0x08007223
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fc:	4b92      	ldr	r3, [pc, #584]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a91      	ldr	r2, [pc, #580]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007208:	e00c      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f000 ff03 	bl	800801c <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800721a:	e003      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	e000      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800722a:	4b87      	ldr	r3, [pc, #540]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	f023 0203 	bic.w	r2, r3, #3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	4984      	ldr	r1, [pc, #528]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007238:	4313      	orrs	r3, r2
 800723a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800723c:	e001      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8086 	beq.w	800735c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007250:	4b7e      	ldr	r3, [pc, #504]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7d      	ldr	r2, [pc, #500]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800725c:	f7fa fd90 	bl	8001d80 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007262:	e009      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fa fd8c 	bl	8001d80 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b64      	cmp	r3, #100	; 0x64
 8007270:	d902      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	75fb      	strb	r3, [r7, #23]
        break;
 8007276:	e005      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007278:	4b74      	ldr	r3, [pc, #464]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ef      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d166      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800728a:	4b6f      	ldr	r3, [pc, #444]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800728c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007294:	4053      	eors	r3, r2
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800729e:	4b6a      	ldr	r3, [pc, #424]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072a8:	4b67      	ldr	r3, [pc, #412]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	4a66      	ldr	r2, [pc, #408]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072b4:	4b64      	ldr	r3, [pc, #400]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	4a63      	ldr	r2, [pc, #396]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072c0:	4a61      	ldr	r2, [pc, #388]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d0:	d115      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d2:	f7fa fd55 	bl	8001d80 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d8:	e00b      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fa fd51 	bl	8001d80 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d902      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
            break;
 80072f0:	e005      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f2:	4b55      	ldr	r3, [pc, #340]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ed      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d126      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007312:	d10d      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007314:	4b4c      	ldr	r3, [pc, #304]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007322:	0919      	lsrs	r1, r3, #4
 8007324:	4b4a      	ldr	r3, [pc, #296]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007326:	400b      	ands	r3, r1
 8007328:	4947      	ldr	r1, [pc, #284]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800732a:	4313      	orrs	r3, r2
 800732c:	610b      	str	r3, [r1, #16]
 800732e:	e005      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007330:	4b45      	ldr	r3, [pc, #276]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	4a44      	ldr	r2, [pc, #272]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007336:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800733a:	6113      	str	r3, [r2, #16]
 800733c:	4b42      	ldr	r3, [pc, #264]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800733e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734a:	493f      	ldr	r1, [pc, #252]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800734c:	4313      	orrs	r3, r2
 800734e:	670b      	str	r3, [r1, #112]	; 0x70
 8007350:	e004      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	75bb      	strb	r3, [r7, #22]
 8007356:	e001      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8085 	beq.w	8007474 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800736e:	2b28      	cmp	r3, #40	; 0x28
 8007370:	d866      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	08007455 	.word	0x08007455
 800737c:	08007441 	.word	0x08007441
 8007380:	08007441 	.word	0x08007441
 8007384:	08007441 	.word	0x08007441
 8007388:	08007441 	.word	0x08007441
 800738c:	08007441 	.word	0x08007441
 8007390:	08007441 	.word	0x08007441
 8007394:	08007441 	.word	0x08007441
 8007398:	0800741d 	.word	0x0800741d
 800739c:	08007441 	.word	0x08007441
 80073a0:	08007441 	.word	0x08007441
 80073a4:	08007441 	.word	0x08007441
 80073a8:	08007441 	.word	0x08007441
 80073ac:	08007441 	.word	0x08007441
 80073b0:	08007441 	.word	0x08007441
 80073b4:	08007441 	.word	0x08007441
 80073b8:	0800742f 	.word	0x0800742f
 80073bc:	08007441 	.word	0x08007441
 80073c0:	08007441 	.word	0x08007441
 80073c4:	08007441 	.word	0x08007441
 80073c8:	08007441 	.word	0x08007441
 80073cc:	08007441 	.word	0x08007441
 80073d0:	08007441 	.word	0x08007441
 80073d4:	08007441 	.word	0x08007441
 80073d8:	08007455 	.word	0x08007455
 80073dc:	08007441 	.word	0x08007441
 80073e0:	08007441 	.word	0x08007441
 80073e4:	08007441 	.word	0x08007441
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007441 	.word	0x08007441
 80073f0:	08007441 	.word	0x08007441
 80073f4:	08007441 	.word	0x08007441
 80073f8:	08007455 	.word	0x08007455
 80073fc:	08007441 	.word	0x08007441
 8007400:	08007441 	.word	0x08007441
 8007404:	08007441 	.word	0x08007441
 8007408:	08007441 	.word	0x08007441
 800740c:	08007441 	.word	0x08007441
 8007410:	08007441 	.word	0x08007441
 8007414:	08007441 	.word	0x08007441
 8007418:	08007455 	.word	0x08007455
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fdfa 	bl	800801c <RCCEx_PLL2_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800742c:	e013      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3324      	adds	r3, #36	; 0x24
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fea3 	bl	8008180 <RCCEx_PLL3_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800743e:	e00a      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
      break;
 8007444:	e007      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400
 800744c:	58024800 	.word	0x58024800
 8007450:	00ffffcf 	.word	0x00ffffcf
      break;
 8007454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800745c:	4b96      	ldr	r3, [pc, #600]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007468:	4993      	ldr	r1, [pc, #588]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800746a:	4313      	orrs	r3, r2
 800746c:	654b      	str	r3, [r1, #84]	; 0x54
 800746e:	e001      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d038      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007484:	2b05      	cmp	r3, #5
 8007486:	d821      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074d3 	.word	0x080074d3
 8007494:	080074a9 	.word	0x080074a9
 8007498:	080074bb 	.word	0x080074bb
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3304      	adds	r3, #4
 80074ac:	2101      	movs	r1, #1
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fdb4 	bl	800801c <RCCEx_PLL2_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074b8:	e00c      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3324      	adds	r3, #36	; 0x24
 80074be:	2101      	movs	r1, #1
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fe5d 	bl	8008180 <RCCEx_PLL3_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074ca:	e003      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	75fb      	strb	r3, [r7, #23]
      break;
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80074d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074da:	4b77      	ldr	r3, [pc, #476]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	f023 0207 	bic.w	r2, r3, #7
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	4974      	ldr	r1, [pc, #464]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	654b      	str	r3, [r1, #84]	; 0x54
 80074ec:	e001      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d03a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	2b05      	cmp	r3, #5
 8007506:	d821      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007553 	.word	0x08007553
 8007514:	08007529 	.word	0x08007529
 8007518:	0800753b 	.word	0x0800753b
 800751c:	08007553 	.word	0x08007553
 8007520:	08007553 	.word	0x08007553
 8007524:	08007553 	.word	0x08007553
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fd74 	bl	800801c <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007538:	e00c      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2101      	movs	r1, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fe1d 	bl	8008180 <RCCEx_PLL3_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800755a:	4b57      	ldr	r3, [pc, #348]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800755c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755e:	f023 0207 	bic.w	r2, r3, #7
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	4953      	ldr	r1, [pc, #332]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800756a:	4313      	orrs	r3, r2
 800756c:	658b      	str	r3, [r1, #88]	; 0x58
 800756e:	e001      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d04b      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800758a:	d02e      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007590:	d828      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d02a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d822      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800759e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075a2:	d026      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80075a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075a8:	d81c      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ae:	d010      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80075b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b4:	d816      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01d      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075be:	d111      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fd28 	bl	800801c <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075d0:	e012      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3324      	adds	r3, #36	; 0x24
 80075d6:	2102      	movs	r1, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fdd1 	bl	8008180 <RCCEx_PLL3_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075e2:	e009      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	e006      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80075ea:	bf00      	nop
 80075ec:	e004      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80075ee:	bf00      	nop
 80075f0:	e002      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80075f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fe:	4b2e      	ldr	r3, [pc, #184]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760c:	492a      	ldr	r1, [pc, #168]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800760e:	4313      	orrs	r3, r2
 8007610:	654b      	str	r3, [r1, #84]	; 0x54
 8007612:	e001      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d04d      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800762e:	d02e      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007630:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007634:	d828      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763a:	d02a      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007640:	d822      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007646:	d026      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764c:	d81c      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	d010      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d816      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01d      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007662:	d111      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fcd6 	bl	800801c <RCCEx_PLL2_Config>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007674:	e012      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3324      	adds	r3, #36	; 0x24
 800767a:	2102      	movs	r1, #2
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fd7f 	bl	8008180 <RCCEx_PLL3_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007686:	e009      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	75fb      	strb	r3, [r7, #23]
      break;
 800768c:	e006      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800768e:	bf00      	nop
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800769a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10c      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076b0:	4901      	ldr	r1, [pc, #4]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	658b      	str	r3, [r1, #88]	; 0x58
 80076b6:	e003      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04b      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076d6:	d02e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80076d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076dc:	d828      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80076de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e2:	d02a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80076e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e8:	d822      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80076ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076ee:	d026      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80076f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076f4:	d81c      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80076f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076fa:	d010      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80076fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007700:	d816      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01d      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770a:	d111      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fc82 	bl	800801c <RCCEx_PLL2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800771c:	e012      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fd2b 	bl	8008180 <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800772e:	e009      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800774a:	4b9d      	ldr	r3, [pc, #628]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007758:	4999      	ldr	r1, [pc, #612]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800775a:	4313      	orrs	r3, r2
 800775c:	658b      	str	r3, [r1, #88]	; 0x58
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d10a      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3324      	adds	r3, #36	; 0x24
 8007780:	2102      	movs	r1, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fcfc 	bl	8008180 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007792:	4b8b      	ldr	r3, [pc, #556]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a0:	4987      	ldr	r1, [pc, #540]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01a      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077bc:	d10a      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3324      	adds	r3, #36	; 0x24
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fcdb 	bl	8008180 <RCCEx_PLL3_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077d4:	4b7a      	ldr	r3, [pc, #488]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077e2:	4977      	ldr	r1, [pc, #476]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d034      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fe:	d01d      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d817      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780e:	d009      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007810:	e011      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3304      	adds	r3, #4
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fbff 	bl	800801c <RCCEx_PLL2_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007822:	e00c      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3324      	adds	r3, #36	; 0x24
 8007828:	2102      	movs	r1, #2
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fca8 	bl	8008180 <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007834:	e003      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
      break;
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800783c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007844:	4b5e      	ldr	r3, [pc, #376]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007852:	495b      	ldr	r1, [pc, #364]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007854:	4313      	orrs	r3, r2
 8007856:	658b      	str	r3, [r1, #88]	; 0x58
 8007858:	e001      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d033      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007874:	d01c      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800787a:	d816      	bhi.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800787c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007880:	d003      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007886:	d007      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007888:	e00f      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a4c      	ldr	r2, [pc, #304]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007896:	e00c      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	2101      	movs	r1, #1
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fc6e 	bl	8008180 <RCCEx_PLL3_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078a8:	e003      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	75fb      	strb	r3, [r7, #23]
      break;
 80078ae:	e000      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80078b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078b8:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c6:	493e      	ldr	r1, [pc, #248]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	654b      	str	r3, [r1, #84]	; 0x54
 80078cc:	e001      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d029      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80078e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ea:	d007      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80078ec:	e00f      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ee:	4b34      	ldr	r3, [pc, #208]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4a33      	ldr	r2, [pc, #204]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078fa:	e00b      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2102      	movs	r1, #2
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fb8a 	bl	800801c <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800790c:	e002      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
      break;
 8007912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800791c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	4926      	ldr	r1, [pc, #152]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007928:	4313      	orrs	r3, r2
 800792a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800792c:	e001      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3324      	adds	r3, #36	; 0x24
 8007942:	2102      	movs	r1, #2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fc1b 	bl	8008180 <RCCEx_PLL3_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d033      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007968:	d017      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800796a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796e:	d811      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007974:	d013      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797a:	d80b      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007984:	d106      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4a0d      	ldr	r2, [pc, #52]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800798c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007992:	e007      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
      break;
 8007998:	e004      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800799a:	bf00      	nop
 800799c:	e002      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10c      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b6:	4902      	ldr	r1, [pc, #8]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	654b      	str	r3, [r1, #84]	; 0x54
 80079bc:	e004      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079d4:	4b31      	ldr	r3, [pc, #196]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	492e      	ldr	r1, [pc, #184]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079f2:	4b2a      	ldr	r3, [pc, #168]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a00:	4926      	ldr	r1, [pc, #152]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d008      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a12:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1e:	491f      	ldr	r1, [pc, #124]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a30:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a3a:	6113      	str	r3, [r2, #16]
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a46:	4915      	ldr	r1, [pc, #84]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da08      	bge.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a54:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	490e      	ldr	r1, [pc, #56]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a80:	4906      	ldr	r1, [pc, #24]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a86:	7dbb      	ldrb	r3, [r7, #22]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	58024400 	.word	0x58024400

08007aa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007aa4:	f7ff f85a 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	091b      	lsrs	r3, r3, #4
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	4904      	ldr	r1, [pc, #16]	; (8007ac8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ab6:	5ccb      	ldrb	r3, [r1, r3]
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	0800b8b0 	.word	0x0800b8b0

08007acc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b089      	sub	sp, #36	; 0x24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad4:	4ba1      	ldr	r3, [pc, #644]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ade:	4b9f      	ldr	r3, [pc, #636]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	0b1b      	lsrs	r3, r3, #12
 8007ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aea:	4b9c      	ldr	r3, [pc, #624]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007af6:	4b99      	ldr	r3, [pc, #612]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	08db      	lsrs	r3, r3, #3
 8007afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	fb02 f303 	mul.w	r3, r2, r3
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8111 	beq.w	8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	f000 8083 	beq.w	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	f200 80a1 	bhi.w	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d056      	beq.n	8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b36:	e099      	b.n	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b38:	4b88      	ldr	r3, [pc, #544]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d02d      	beq.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b44:	4b85      	ldr	r3, [pc, #532]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	08db      	lsrs	r3, r3, #3
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	4a84      	ldr	r2, [pc, #528]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b50:	fa22 f303 	lsr.w	r3, r2, r3
 8007b54:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6e:	4b7b      	ldr	r3, [pc, #492]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b9e:	e087      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b6a      	ldr	r3, [pc, #424]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be2:	e065      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c26:	e043      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b48      	ldr	r3, [pc, #288]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c6a:	e021      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cb0:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	0a5b      	lsrs	r3, r3, #9
 8007cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd6:	ee17 2a90 	vmov	r2, s15
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007cde:	4b1f      	ldr	r3, [pc, #124]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d04:	ee17 2a90 	vmov	r2, s15
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d0c:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	0e1b      	lsrs	r3, r3, #24
 8007d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d32:	ee17 2a90 	vmov	r2, s15
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d3a:	e008      	b.n	8007d4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	609a      	str	r2, [r3, #8]
}
 8007d4e:	bf00      	nop
 8007d50:	3724      	adds	r7, #36	; 0x24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	03d09000 	.word	0x03d09000
 8007d64:	46000000 	.word	0x46000000
 8007d68:	4c742400 	.word	0x4c742400
 8007d6c:	4a742400 	.word	0x4a742400
 8007d70:	4af42400 	.word	0x4af42400

08007d74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b089      	sub	sp, #36	; 0x24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d7c:	4ba1      	ldr	r3, [pc, #644]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d86:	4b9f      	ldr	r3, [pc, #636]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	0d1b      	lsrs	r3, r3, #20
 8007d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d92:	4b9c      	ldr	r3, [pc, #624]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d9e:	4b99      	ldr	r3, [pc, #612]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	08db      	lsrs	r3, r3, #3
 8007da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8111 	beq.w	8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	f000 8083 	beq.w	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	f200 80a1 	bhi.w	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d056      	beq.n	8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007dde:	e099      	b.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007de0:	4b88      	ldr	r3, [pc, #544]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02d      	beq.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dec:	4b85      	ldr	r3, [pc, #532]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	08db      	lsrs	r3, r3, #3
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	4a84      	ldr	r2, [pc, #528]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e16:	4b7b      	ldr	r3, [pc, #492]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e46:	e087      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5a:	4b6a      	ldr	r3, [pc, #424]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e8a:	e065      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	4b59      	ldr	r3, [pc, #356]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ece:	e043      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee2:	4b48      	ldr	r3, [pc, #288]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f12:	e021      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f26:	4b37      	ldr	r3, [pc, #220]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f58:	4b2a      	ldr	r3, [pc, #168]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	0a5b      	lsrs	r3, r3, #9
 8007f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f7e:	ee17 2a90 	vmov	r2, s15
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f86:	4b1f      	ldr	r3, [pc, #124]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fac:	ee17 2a90 	vmov	r2, s15
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fb4:	4b13      	ldr	r3, [pc, #76]	; (8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	0e1b      	lsrs	r3, r3, #24
 8007fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fda:	ee17 2a90 	vmov	r2, s15
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
}
 8007ff6:	bf00      	nop
 8007ff8:	3724      	adds	r7, #36	; 0x24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	58024400 	.word	0x58024400
 8008008:	03d09000 	.word	0x03d09000
 800800c:	46000000 	.word	0x46000000
 8008010:	4c742400 	.word	0x4c742400
 8008014:	4a742400 	.word	0x4a742400
 8008018:	4af42400 	.word	0x4af42400

0800801c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800802a:	4b53      	ldr	r3, [pc, #332]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	2b03      	cmp	r3, #3
 8008034:	d101      	bne.n	800803a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e099      	b.n	800816e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800803a:	4b4f      	ldr	r3, [pc, #316]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a4e      	ldr	r2, [pc, #312]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008040:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008046:	f7f9 fe9b 	bl	8001d80 <HAL_GetTick>
 800804a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800804c:	e008      	b.n	8008060 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800804e:	f7f9 fe97 	bl	8001d80 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e086      	b.n	800816e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008060:	4b45      	ldr	r3, [pc, #276]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f0      	bne.n	800804e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800806c:	4b42      	ldr	r3, [pc, #264]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	493f      	ldr	r1, [pc, #252]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800807c:	4313      	orrs	r3, r2
 800807e:	628b      	str	r3, [r1, #40]	; 0x28
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	3b01      	subs	r3, #1
 8008086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	3b01      	subs	r3, #1
 8008090:	025b      	lsls	r3, r3, #9
 8008092:	b29b      	uxth	r3, r3
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	3b01      	subs	r3, #1
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	061b      	lsls	r3, r3, #24
 80080ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080b0:	4931      	ldr	r1, [pc, #196]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080b6:	4b30      	ldr	r3, [pc, #192]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	492d      	ldr	r1, [pc, #180]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	f023 0220 	bic.w	r2, r3, #32
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	4928      	ldr	r1, [pc, #160]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080da:	4b27      	ldr	r3, [pc, #156]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	4a26      	ldr	r2, [pc, #152]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080e0:	f023 0310 	bic.w	r3, r3, #16
 80080e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <RCCEx_PLL2_Config+0x160>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	69d2      	ldr	r2, [r2, #28]
 80080f2:	00d2      	lsls	r2, r2, #3
 80080f4:	4920      	ldr	r1, [pc, #128]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080fa:	4b1f      	ldr	r3, [pc, #124]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008100:	f043 0310 	orr.w	r3, r3, #16
 8008104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	4a19      	ldr	r2, [pc, #100]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008118:	e00f      	b.n	800813a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d106      	bne.n	800812e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008120:	4b15      	ldr	r3, [pc, #84]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800812a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800812c:	e005      	b.n	800813a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a11      	ldr	r2, [pc, #68]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800813a:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008146:	f7f9 fe1b 	bl	8001d80 <HAL_GetTick>
 800814a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800814c:	e008      	b.n	8008160 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800814e:	f7f9 fe17 	bl	8001d80 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e006      	b.n	800816e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <RCCEx_PLL2_Config+0x15c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0f0      	beq.n	800814e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	58024400 	.word	0x58024400
 800817c:	ffff0007 	.word	0xffff0007

08008180 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800818e:	4b53      	ldr	r3, [pc, #332]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	2b03      	cmp	r3, #3
 8008198:	d101      	bne.n	800819e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e099      	b.n	80082d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800819e:	4b4f      	ldr	r3, [pc, #316]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a4e      	ldr	r2, [pc, #312]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80081a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081aa:	f7f9 fde9 	bl	8001d80 <HAL_GetTick>
 80081ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081b0:	e008      	b.n	80081c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081b2:	f7f9 fde5 	bl	8001d80 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e086      	b.n	80082d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081c4:	4b45      	ldr	r3, [pc, #276]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f0      	bne.n	80081b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081d0:	4b42      	ldr	r3, [pc, #264]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	051b      	lsls	r3, r3, #20
 80081de:	493f      	ldr	r1, [pc, #252]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	628b      	str	r3, [r1, #40]	; 0x28
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	025b      	lsls	r3, r3, #9
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	3b01      	subs	r3, #1
 8008200:	041b      	lsls	r3, r3, #16
 8008202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	3b01      	subs	r3, #1
 800820e:	061b      	lsls	r3, r3, #24
 8008210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008214:	4931      	ldr	r1, [pc, #196]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008216:	4313      	orrs	r3, r2
 8008218:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800821a:	4b30      	ldr	r3, [pc, #192]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	492d      	ldr	r1, [pc, #180]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008228:	4313      	orrs	r3, r2
 800822a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800822c:	4b2b      	ldr	r3, [pc, #172]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	4928      	ldr	r1, [pc, #160]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800823e:	4b27      	ldr	r3, [pc, #156]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	4a26      	ldr	r2, [pc, #152]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800824a:	4b24      	ldr	r3, [pc, #144]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800824c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800824e:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <RCCEx_PLL3_Config+0x160>)
 8008250:	4013      	ands	r3, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	69d2      	ldr	r2, [r2, #28]
 8008256:	00d2      	lsls	r2, r2, #3
 8008258:	4920      	ldr	r1, [pc, #128]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800825e:	4b1f      	ldr	r3, [pc, #124]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4a1e      	ldr	r2, [pc, #120]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008270:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	4a19      	ldr	r2, [pc, #100]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800827a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800827c:	e00f      	b.n	800829e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d106      	bne.n	8008292 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008284:	4b15      	ldr	r3, [pc, #84]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a14      	ldr	r2, [pc, #80]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 800828a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800828e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008290:	e005      	b.n	800829e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	4a11      	ldr	r2, [pc, #68]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 8008298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800829c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a0e      	ldr	r2, [pc, #56]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80082a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082aa:	f7f9 fd69 	bl	8001d80 <HAL_GetTick>
 80082ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082b0:	e008      	b.n	80082c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082b2:	f7f9 fd65 	bl	8001d80 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e006      	b.n	80082d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <RCCEx_PLL3_Config+0x15c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0f0      	beq.n	80082b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	58024400 	.word	0x58024400
 80082e0:	ffff0007 	.word	0xffff0007

080082e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e0f1      	b.n	80084da <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a78      	ldr	r2, [pc, #480]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <HAL_SPI_Init+0x42>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a77      	ldr	r2, [pc, #476]	; (80084e8 <HAL_SPI_Init+0x204>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00a      	beq.n	8008326 <HAL_SPI_Init+0x42>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a75      	ldr	r2, [pc, #468]	; (80084ec <HAL_SPI_Init+0x208>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d005      	beq.n	8008326 <HAL_SPI_Init+0x42>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b0f      	cmp	r3, #15
 8008320:	d901      	bls.n	8008326 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0d9      	b.n	80084da <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 ff58 	bl	80091dc <SPI_GetPacketSize>
 800832c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a6c      	ldr	r2, [pc, #432]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00c      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a6a      	ldr	r2, [pc, #424]	; (80084e8 <HAL_SPI_Init+0x204>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a69      	ldr	r2, [pc, #420]	; (80084ec <HAL_SPI_Init+0x208>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d002      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b08      	cmp	r3, #8
 8008350:	d811      	bhi.n	8008376 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008356:	4a63      	ldr	r2, [pc, #396]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a61      	ldr	r2, [pc, #388]	; (80084e8 <HAL_SPI_Init+0x204>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_SPI_Init+0x8c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a60      	ldr	r2, [pc, #384]	; (80084ec <HAL_SPI_Init+0x208>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d104      	bne.n	800837a <HAL_SPI_Init+0x96>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b10      	cmp	r3, #16
 8008374:	d901      	bls.n	800837a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0af      	b.n	80084da <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7f9 f9e2 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083c0:	d119      	bne.n	80083f6 <HAL_SPI_Init+0x112>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ca:	d103      	bne.n	80083d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10c      	bne.n	80083f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e4:	d107      	bne.n	80083f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69da      	ldr	r2, [r3, #28]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	431a      	orrs	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008408:	ea42 0103 	orr.w	r1, r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008456:	ea42 0103 	orr.w	r1, r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d113      	bne.n	8008496 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008480:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008494:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40013000 	.word	0x40013000
 80084e8:	40003800 	.word	0x40003800
 80084ec:	40003c00 	.word	0x40003c00

080084f0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3320      	adds	r3, #32
 8008506:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_SPI_Transmit+0x2a>
 8008516:	2302      	movs	r3, #2
 8008518:	e1d7      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008522:	f7f9 fc2d 	bl	8001d80 <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	d007      	beq.n	8008544 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008534:	2302      	movs	r3, #2
 8008536:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008540:	7efb      	ldrb	r3, [r7, #27]
 8008542:	e1c2      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_SPI_Transmit+0x60>
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800855c:	7efb      	ldrb	r3, [r7, #27]
 800855e:	e1b4      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2203      	movs	r2, #3
 8008564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	88fa      	ldrh	r2, [r7, #6]
 800857a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80085b0:	d107      	bne.n	80085c2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4b96      	ldr	r3, [pc, #600]	; (8008824 <HAL_SPI_Transmit+0x334>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	88f9      	ldrh	r1, [r7, #6]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	430b      	orrs	r3, r1
 80085d4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0201 	orr.w	r2, r2, #1
 80085e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ee:	d107      	bne.n	8008600 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d947      	bls.n	8008698 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008608:	e03f      	b.n	800868a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d114      	bne.n	8008642 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008640:	e023      	b.n	800868a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008642:	f7f9 fb9d 	bl	8001d80 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d803      	bhi.n	800865a <HAL_SPI_Transmit+0x16a>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d102      	bne.n	8008660 <HAL_SPI_Transmit+0x170>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d114      	bne.n	800868a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fced 	bl	8009040 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008674:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e11f      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1b9      	bne.n	800860a <HAL_SPI_Transmit+0x11a>
 8008696:	e0f2      	b.n	800887e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b07      	cmp	r3, #7
 800869e:	f240 80e7 	bls.w	8008870 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086a2:	e05d      	b.n	8008760 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d132      	bne.n	8008718 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d918      	bls.n	80086f0 <HAL_SPI_Transmit+0x200>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d014      	beq.n	80086f0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b02      	subs	r3, #2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086ee:	e037      	b.n	8008760 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f4:	881a      	ldrh	r2, [r3, #0]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	1c9a      	adds	r2, r3, #2
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008716:	e023      	b.n	8008760 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008718:	f7f9 fb32 	bl	8001d80 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d803      	bhi.n	8008730 <HAL_SPI_Transmit+0x240>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872e:	d102      	bne.n	8008736 <HAL_SPI_Transmit+0x246>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d114      	bne.n	8008760 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fc82 	bl	8009040 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800874a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e0b4      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d19b      	bne.n	80086a4 <HAL_SPI_Transmit+0x1b4>
 800876c:	e087      	b.n	800887e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d155      	bne.n	8008828 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d918      	bls.n	80087ba <HAL_SPI_Transmit+0x2ca>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878c:	2b40      	cmp	r3, #64	; 0x40
 800878e:	d914      	bls.n	80087ba <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b04      	subs	r3, #4
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087b8:	e05a      	b.n	8008870 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d917      	bls.n	80087f6 <HAL_SPI_Transmit+0x306>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d013      	beq.n	80087f6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d2:	881a      	ldrh	r2, [r3, #0]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b02      	subs	r3, #2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087f4:	e03c      	b.n	8008870 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3320      	adds	r3, #32
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008820:	e026      	b.n	8008870 <HAL_SPI_Transmit+0x380>
 8008822:	bf00      	nop
 8008824:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008828:	f7f9 faaa 	bl	8001d80 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d803      	bhi.n	8008840 <HAL_SPI_Transmit+0x350>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d102      	bne.n	8008846 <HAL_SPI_Transmit+0x356>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d114      	bne.n	8008870 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fbfa 	bl	8009040 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e02c      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f af78 	bne.w	800876e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	2108      	movs	r1, #8
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fc79 	bl	8009180 <SPI_WaitOnFlagUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fbcb 	bl	8009040 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80088c8:	7efb      	ldrb	r3, [r7, #27]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_SPI_Transmit_DMA+0x20>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e12c      	b.n	8008b4e <HAL_SPI_Transmit_DMA+0x27a>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	d007      	beq.n	8008918 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008908:	2302      	movs	r3, #2
 800890a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	e11a      	b.n	8008b4e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <HAL_SPI_Transmit_DMA+0x50>
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d107      	bne.n	8008934 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	e10c      	b.n	8008b4e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2203      	movs	r2, #3
 8008938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	88fa      	ldrh	r2, [r7, #6]
 800894e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008984:	d107      	bne.n	8008996 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b0f      	cmp	r3, #15
 800899c:	d905      	bls.n	80089aa <HAL_SPI_Transmit_DMA+0xd6>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089a8:	d10f      	bne.n	80089ca <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80089ae:	2b07      	cmp	r3, #7
 80089b0:	d913      	bls.n	80089da <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089bc:	d00d      	beq.n	80089da <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80089c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c8:	d007      	beq.n	80089da <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	e0b9      	b.n	8008b4e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b07      	cmp	r3, #7
 80089e0:	d820      	bhi.n	8008a24 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ec:	d109      	bne.n	8008a02 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3301      	adds	r3, #1
 80089f8:	105b      	asrs	r3, r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a0c:	d11e      	bne.n	8008a4c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3303      	adds	r3, #3
 8008a18:	109b      	asrs	r3, r3, #2
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a22:	e013      	b.n	8008a4c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2b0f      	cmp	r3, #15
 8008a2a:	d80f      	bhi.n	8008a4c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a36:	d109      	bne.n	8008a4c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3301      	adds	r3, #1
 8008a42:	105b      	asrs	r3, r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a50:	4a41      	ldr	r2, [pc, #260]	; (8008b58 <HAL_SPI_Transmit_DMA+0x284>)
 8008a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a58:	4a40      	ldr	r2, [pc, #256]	; (8008b5c <HAL_SPI_Transmit_DMA+0x288>)
 8008a5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a60:	4a3f      	ldr	r2, [pc, #252]	; (8008b60 <HAL_SPI_Transmit_DMA+0x28c>)
 8008a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a68:	2200      	movs	r2, #0
 8008a6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a7a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a84:	4619      	mov	r1, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3320      	adds	r3, #32
 8008a8c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a94:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a96:	f7f9 fe2f 	bl	80026f8 <HAL_DMA_Start_IT>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d013      	beq.n	8008ac8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa6:	f043 0210 	orr.w	r2, r3, #16
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	e042      	b.n	8008b4e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad2:	d108      	bne.n	8008ae6 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <HAL_SPI_Transmit_DMA+0x290>)
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	6053      	str	r3, [r2, #4]
 8008ae4:	e009      	b.n	8008afa <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <HAL_SPI_Transmit_DMA+0x290>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	88f9      	ldrh	r1, [r7, #6]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b08:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008b18:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b32:	d107      	bne.n	8008b44 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	08008fab 	.word	0x08008fab
 8008b5c:	08008f65 	.word	0x08008f65
 8008b60:	08008fc7 	.word	0x08008fc7
 8008b64:	ffff0000 	.word	0xffff0000

08008b68 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08a      	sub	sp, #40	; 0x28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4013      	ands	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b9a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3330      	adds	r3, #48	; 0x30
 8008ba2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d113      	bne.n	8008bd6 <HAL_SPI_IRQHandler+0x6e>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
    handled = 1UL;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10f      	bne.n	8008c00 <HAL_SPI_IRQHandler+0x98>
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
    handled = 1UL;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10f      	bne.n	8008c2a <HAL_SPI_IRQHandler+0xc2>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00a      	beq.n	8008c2a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	4798      	blx	r3
    handled = 1UL;
 8008c26:	2301      	movs	r3, #1
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 815a 	bne.w	8008ee6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 808b 	beq.w	8008d54 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699a      	ldr	r2, [r3, #24]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0208 	orr.w	r2, r2, #8
 8008c4c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699a      	ldr	r2, [r3, #24]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0210 	orr.w	r2, r2, #16
 8008c5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699a      	ldr	r2, [r3, #24]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c6c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0208 	bic.w	r2, r2, #8
 8008c7c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d13d      	bne.n	8008d08 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008c8c:	e036      	b.n	8008cfc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	2b0f      	cmp	r3, #15
 8008c94:	d90b      	bls.n	8008cae <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ca0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	665a      	str	r2, [r3, #100]	; 0x64
 8008cac:	e01d      	b.n	8008cea <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b07      	cmp	r3, #7
 8008cb4:	d90b      	bls.n	8008cce <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	8812      	ldrh	r2, [r2, #0]
 8008cbe:	b292      	uxth	r2, r2
 8008cc0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cc6:	1c9a      	adds	r2, r3, #2
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	665a      	str	r2, [r3, #100]	; 0x64
 8008ccc:	e00d      	b.n	8008cea <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cda:	7812      	ldrb	r2, [r2, #0]
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1c2      	bne.n	8008c8e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f999 	bl	8009040 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f915 	bl	8008f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d26:	e0e3      	b.n	8008ef0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d103      	bne.n	8008d36 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8fa 	bl	8008f28 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008d34:	e0d9      	b.n	8008eea <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008d36:	7cfb      	ldrb	r3, [r7, #19]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d103      	bne.n	8008d44 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8e9 	bl	8008f14 <HAL_SPI_RxCpltCallback>
    return;
 8008d42:	e0d2      	b.n	8008eea <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008d44:	7cfb      	ldrb	r3, [r7, #19]
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	f040 80cf 	bne.w	8008eea <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f8d7 	bl	8008f00 <HAL_SPI_TxCpltCallback>
    return;
 8008d52:	e0ca      	b.n	8008eea <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00d      	beq.n	8008d7a <HAL_SPI_IRQHandler+0x212>
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d008      	beq.n	8008d7a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d76:	619a      	str	r2, [r3, #24]

    return;
 8008d78:	e0ba      	b.n	8008ef0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 80b5 	beq.w	8008ef0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00f      	beq.n	8008db0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d96:	f043 0204 	orr.w	r2, r3, #4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dae:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00f      	beq.n	8008dda <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc0:	f043 0201 	orr.w	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00f      	beq.n	8008e04 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dea:	f043 0208 	orr.w	r2, r3, #8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00f      	beq.n	8008e2e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	699a      	ldr	r2, [r3, #24]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0220 	orr.w	r2, r2, #32
 8008e2c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d05a      	beq.n	8008eee <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 0201 	bic.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6919      	ldr	r1, [r3, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b29      	ldr	r3, [pc, #164]	; (8008ef8 <HAL_SPI_IRQHandler+0x390>)
 8008e54:	400b      	ands	r3, r1
 8008e56:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e62:	d138      	bne.n	8008ed6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008e72:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d013      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <HAL_SPI_IRQHandler+0x394>)
 8008e82:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fa f9bd 	bl	8003208 <HAL_DMA_Abort_IT>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d020      	beq.n	8008eee <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eb0:	4a12      	ldr	r2, [pc, #72]	; (8008efc <HAL_SPI_IRQHandler+0x394>)
 8008eb2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fa f9a5 	bl	8003208 <HAL_DMA_Abort_IT>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d014      	beq.n	8008eee <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ed4:	e00b      	b.n	8008eee <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f836 	bl	8008f50 <HAL_SPI_ErrorCallback>
    return;
 8008ee4:	e003      	b.n	8008eee <HAL_SPI_IRQHandler+0x386>
    return;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <HAL_SPI_IRQHandler+0x388>
    return;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <HAL_SPI_IRQHandler+0x388>
    return;
 8008eee:	bf00      	nop
  }
}
 8008ef0:	3728      	adds	r7, #40	; 0x28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	fffffc94 	.word	0xfffffc94
 8008efc:	0800900d 	.word	0x0800900d

08008f00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b07      	cmp	r3, #7
 8008f7c:	d011      	beq.n	8008fa2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f88:	d103      	bne.n	8008f92 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff ffb8 	bl	8008f00 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008f90:	e007      	b.n	8008fa2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0208 	orr.w	r2, r2, #8
 8008fa0:	611a      	str	r2, [r3, #16]
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7ff ffbf 	bl	8008f3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fb fa87 	bl	80044e8 <HAL_DMA_GetError>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d011      	beq.n	8009004 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f82d 	bl	8009040 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fec:	f043 0210 	orr.w	r2, r3, #16
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff ffa6 	bl	8008f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff ff8c 	bl	8008f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0208 	orr.w	r2, r2, #8
 800905e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0210 	orr.w	r2, r2, #16
 800906e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6919      	ldr	r1, [r3, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	4b3c      	ldr	r3, [pc, #240]	; (800917c <SPI_CloseTransfer+0x13c>)
 800908c:	400b      	ands	r3, r1
 800908e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800909e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d014      	beq.n	80090d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00f      	beq.n	80090d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0220 	orr.w	r2, r2, #32
 80090d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d014      	beq.n	800910c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00f      	beq.n	800910c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f2:	f043 0204 	orr.w	r2, r3, #4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800910a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00f      	beq.n	8009136 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800911c:	f043 0201 	orr.w	r2, r3, #1
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699a      	ldr	r2, [r3, #24]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009134:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009146:	f043 0208 	orr.w	r2, r3, #8
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800915e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	fffffc90 	.word	0xfffffc90

08009180 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009190:	e010      	b.n	80091b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009192:	f7f8 fdf5 	bl	8001d80 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d803      	bhi.n	80091aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d102      	bne.n	80091b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e00f      	b.n	80091d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d0df      	beq.n	8009192 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3307      	adds	r3, #7
 80091fa:	08db      	lsrs	r3, r3, #3
 80091fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	fb02 f303 	mul.w	r3, r2, r3
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e042      	b.n	80092aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7f8 fb34 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2224      	movs	r2, #36	; 0x24
 8009240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 0201 	bic.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc55 	bl	8009b04 <UART_SetConfig>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e022      	b.n	80092aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f9b1 	bl	800a5d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009280:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009290:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f042 0201 	orr.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fa38 	bl	800a718 <UART_CheckIdleState>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	; 0x28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d142      	bne.n	8009352 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <HAL_UART_Receive_DMA+0x24>
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e03b      	b.n	8009354 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_UART_Receive_DMA+0x36>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e034      	b.n	8009354 <HAL_UART_Receive_DMA+0xa0>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a17      	ldr	r2, [pc, #92]	; (800935c <HAL_UART_Receive_DMA+0xa8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d01f      	beq.n	8009342 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d018      	beq.n	8009342 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	613b      	str	r3, [r7, #16]
   return(result);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	623b      	str	r3, [r7, #32]
 8009330:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	69f9      	ldr	r1, [r7, #28]
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	61bb      	str	r3, [r7, #24]
   return(result);
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	461a      	mov	r2, r3
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f001 faf9 	bl	800a940 <UART_Start_Receive_DMA>
 800934e:	4603      	mov	r3, r0
 8009350:	e000      	b.n	8009354 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009352:	2302      	movs	r3, #2
  }
}
 8009354:	4618      	mov	r0, r3
 8009356:	3728      	adds	r7, #40	; 0x28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	58000c00 	.word	0x58000c00

08009360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b0ba      	sub	sp, #232	; 0xe8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800938a:	f640 030f 	movw	r3, #2063	; 0x80f
 800938e:	4013      	ands	r3, r2
 8009390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11b      	bne.n	80093d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d015      	beq.n	80093d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 835a 	beq.w	8009a7e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	4798      	blx	r3
      }
      return;
 80093d2:	e354      	b.n	8009a7e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 811f 	beq.w	800961c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80093e2:	4b8b      	ldr	r3, [pc, #556]	; (8009610 <HAL_UART_IRQHandler+0x2b0>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80093ee:	4b89      	ldr	r3, [pc, #548]	; (8009614 <HAL_UART_IRQHandler+0x2b4>)
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8112 	beq.w	800961c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d011      	beq.n	8009428 <HAL_UART_IRQHandler+0xc8>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2201      	movs	r2, #1
 8009416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800941e:	f043 0201 	orr.w	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d011      	beq.n	8009458 <HAL_UART_IRQHandler+0xf8>
 8009434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2202      	movs	r2, #2
 8009446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944e:	f043 0204 	orr.w	r2, r3, #4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d011      	beq.n	8009488 <HAL_UART_IRQHandler+0x128>
 8009464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2204      	movs	r2, #4
 8009476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800947e:	f043 0202 	orr.w	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d017      	beq.n	80094c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b00      	cmp	r3, #0
 800949e:	d105      	bne.n	80094ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80094a4:	4b5a      	ldr	r3, [pc, #360]	; (8009610 <HAL_UART_IRQHandler+0x2b0>)
 80094a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ba:	f043 0208 	orr.w	r2, r3, #8
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d012      	beq.n	80094f6 <HAL_UART_IRQHandler+0x196>
 80094d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ec:	f043 0220 	orr.w	r2, r3, #32
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 82c0 	beq.w	8009a82 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800950e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d105      	bne.n	8009526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800951a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800951e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800953c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	d005      	beq.n	800955a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800954e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009556:	2b00      	cmp	r3, #0
 8009558:	d04f      	beq.n	80095fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 fada 	bl	800ab14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956a:	2b40      	cmp	r3, #64	; 0x40
 800956c:	d141      	bne.n	80095f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3308      	adds	r3, #8
 8009574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800958c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800959a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800959e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1d9      	bne.n	800956e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d013      	beq.n	80095ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c6:	4a14      	ldr	r2, [pc, #80]	; (8009618 <HAL_UART_IRQHandler+0x2b8>)
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f9 fe1a 	bl	8003208 <HAL_DMA_Abort_IT>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d017      	beq.n	800960a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e8:	e00f      	b.n	800960a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa74 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f0:	e00b      	b.n	800960a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa70 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f8:	e007      	b.n	800960a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa6c 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009608:	e23b      	b.n	8009a82 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960a:	bf00      	nop
    return;
 800960c:	e239      	b.n	8009a82 <HAL_UART_IRQHandler+0x722>
 800960e:	bf00      	nop
 8009610:	10000001 	.word	0x10000001
 8009614:	04000120 	.word	0x04000120
 8009618:	0800adbb 	.word	0x0800adbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009620:	2b01      	cmp	r3, #1
 8009622:	f040 81ce 	bne.w	80099c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	f003 0310 	and.w	r3, r3, #16
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 81c7 	beq.w	80099c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009638:	f003 0310 	and.w	r3, r3, #16
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 81c0 	beq.w	80099c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2210      	movs	r2, #16
 8009648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	f040 813b 	bne.w	80098d0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a8b      	ldr	r2, [pc, #556]	; (8009890 <HAL_UART_IRQHandler+0x530>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d059      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a89      	ldr	r2, [pc, #548]	; (8009894 <HAL_UART_IRQHandler+0x534>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d053      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a87      	ldr	r2, [pc, #540]	; (8009898 <HAL_UART_IRQHandler+0x538>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d04d      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a85      	ldr	r2, [pc, #532]	; (800989c <HAL_UART_IRQHandler+0x53c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d047      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a83      	ldr	r2, [pc, #524]	; (80098a0 <HAL_UART_IRQHandler+0x540>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d041      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a81      	ldr	r2, [pc, #516]	; (80098a4 <HAL_UART_IRQHandler+0x544>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d03b      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a7f      	ldr	r2, [pc, #508]	; (80098a8 <HAL_UART_IRQHandler+0x548>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d035      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a7d      	ldr	r2, [pc, #500]	; (80098ac <HAL_UART_IRQHandler+0x54c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d02f      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a7b      	ldr	r2, [pc, #492]	; (80098b0 <HAL_UART_IRQHandler+0x550>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d029      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a79      	ldr	r2, [pc, #484]	; (80098b4 <HAL_UART_IRQHandler+0x554>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d023      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a77      	ldr	r2, [pc, #476]	; (80098b8 <HAL_UART_IRQHandler+0x558>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d01d      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a75      	ldr	r2, [pc, #468]	; (80098bc <HAL_UART_IRQHandler+0x55c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d017      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a73      	ldr	r2, [pc, #460]	; (80098c0 <HAL_UART_IRQHandler+0x560>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d011      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a71      	ldr	r2, [pc, #452]	; (80098c4 <HAL_UART_IRQHandler+0x564>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00b      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a6f      	ldr	r2, [pc, #444]	; (80098c8 <HAL_UART_IRQHandler+0x568>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d005      	beq.n	800971a <HAL_UART_IRQHandler+0x3ba>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a6d      	ldr	r2, [pc, #436]	; (80098cc <HAL_UART_IRQHandler+0x56c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d105      	bne.n	8009726 <HAL_UART_IRQHandler+0x3c6>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	b29b      	uxth	r3, r3
 8009724:	e004      	b.n	8009730 <HAL_UART_IRQHandler+0x3d0>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 81a4 	beq.w	8009a86 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009748:	429a      	cmp	r2, r3
 800974a:	f080 819c 	bcs.w	8009a86 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009762:	f000 8086 	beq.w	8009872 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800977a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800977e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009794:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800979c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1da      	bne.n	8009766 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c2:	f023 0301 	bic.w	r3, r3, #1
 80097c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3308      	adds	r3, #8
 80097d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e1      	bne.n	80097b0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009810:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009816:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800981e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e3      	bne.n	80097ec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009854:	65bb      	str	r3, [r7, #88]	; 0x58
 8009856:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800985a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e4      	bne.n	8009832 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986c:	4618      	mov	r0, r3
 800986e:	f7f9 f9ad 	bl	8002bcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800987e:	b29b      	uxth	r3, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f930 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800988c:	e0fb      	b.n	8009a86 <HAL_UART_IRQHandler+0x726>
 800988e:	bf00      	nop
 8009890:	40020010 	.word	0x40020010
 8009894:	40020028 	.word	0x40020028
 8009898:	40020040 	.word	0x40020040
 800989c:	40020058 	.word	0x40020058
 80098a0:	40020070 	.word	0x40020070
 80098a4:	40020088 	.word	0x40020088
 80098a8:	400200a0 	.word	0x400200a0
 80098ac:	400200b8 	.word	0x400200b8
 80098b0:	40020410 	.word	0x40020410
 80098b4:	40020428 	.word	0x40020428
 80098b8:	40020440 	.word	0x40020440
 80098bc:	40020458 	.word	0x40020458
 80098c0:	40020470 	.word	0x40020470
 80098c4:	40020488 	.word	0x40020488
 80098c8:	400204a0 	.word	0x400204a0
 80098cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80cc 	beq.w	8009a8a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80098f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 80c7 	beq.w	8009a8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800990a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800991e:	647b      	str	r3, [r7, #68]	; 0x44
 8009920:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800992c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e4      	bne.n	80098fc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	623b      	str	r3, [r7, #32]
   return(result);
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	4b54      	ldr	r3, [pc, #336]	; (8009a98 <HAL_UART_IRQHandler+0x738>)
 8009946:	4013      	ands	r3, r2
 8009948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009956:	633a      	str	r2, [r7, #48]	; 0x30
 8009958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e3      	bne.n	8009932 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60fb      	str	r3, [r7, #12]
   return(result);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0310 	bic.w	r3, r3, #16
 8009992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099a0:	61fb      	str	r3, [r7, #28]
 80099a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	69b9      	ldr	r1, [r7, #24]
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	617b      	str	r3, [r7, #20]
   return(result);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e4      	bne.n	800997e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f896 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099c0:	e063      	b.n	8009a8a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00e      	beq.n	80099ec <HAL_UART_IRQHandler+0x68c>
 80099ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80099e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fa29 	bl	800ae3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ea:	e051      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d014      	beq.n	8009a22 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d105      	bne.n	8009a10 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d03a      	beq.n	8009a8e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	4798      	blx	r3
    }
    return;
 8009a20:	e035      	b.n	8009a8e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <HAL_UART_IRQHandler+0x6e2>
 8009a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 f9d3 	bl	800ade6 <UART_EndTransmit_IT>
    return;
 8009a40:	e026      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <HAL_UART_IRQHandler+0x702>
 8009a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 fa02 	bl	800ae64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a60:	e016      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d010      	beq.n	8009a90 <HAL_UART_IRQHandler+0x730>
 8009a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da0c      	bge.n	8009a90 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 f9ea 	bl	800ae50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a7c:	e008      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
      return;
 8009a7e:	bf00      	nop
 8009a80:	e006      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
    return;
 8009a82:	bf00      	nop
 8009a84:	e004      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
      return;
 8009a86:	bf00      	nop
 8009a88:	e002      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
      return;
 8009a8a:	bf00      	nop
 8009a8c:	e000      	b.n	8009a90 <HAL_UART_IRQHandler+0x730>
    return;
 8009a8e:	bf00      	nop
  }
}
 8009a90:	37e8      	adds	r7, #232	; 0xe8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	effffffe 	.word	0xeffffffe

08009a9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b08:	b092      	sub	sp, #72	; 0x48
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4bbe      	ldr	r3, [pc, #760]	; (8009e2c <UART_SetConfig+0x328>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4ab3      	ldr	r2, [pc, #716]	; (8009e30 <UART_SetConfig+0x32c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	4baf      	ldr	r3, [pc, #700]	; (8009e34 <UART_SetConfig+0x330>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b80:	430b      	orrs	r3, r1
 8009b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	f023 010f 	bic.w	r1, r3, #15
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4aa6      	ldr	r2, [pc, #664]	; (8009e38 <UART_SetConfig+0x334>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d177      	bne.n	8009c94 <UART_SetConfig+0x190>
 8009ba4:	4ba5      	ldr	r3, [pc, #660]	; (8009e3c <UART_SetConfig+0x338>)
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bac:	2b28      	cmp	r3, #40	; 0x28
 8009bae:	d86d      	bhi.n	8009c8c <UART_SetConfig+0x188>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0xb4>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c8d 	.word	0x08009c8d
 8009bc0:	08009c8d 	.word	0x08009c8d
 8009bc4:	08009c8d 	.word	0x08009c8d
 8009bc8:	08009c8d 	.word	0x08009c8d
 8009bcc:	08009c8d 	.word	0x08009c8d
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009c8d 	.word	0x08009c8d
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c8d 	.word	0x08009c8d
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009c8d 	.word	0x08009c8d
 8009be8:	08009c8d 	.word	0x08009c8d
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c8d 	.word	0x08009c8d
 8009bf4:	08009c8d 	.word	0x08009c8d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c8d 	.word	0x08009c8d
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009c8d 	.word	0x08009c8d
 8009c18:	08009c75 	.word	0x08009c75
 8009c1c:	08009c8d 	.word	0x08009c8d
 8009c20:	08009c8d 	.word	0x08009c8d
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c8d 	.word	0x08009c8d
 8009c2c:	08009c8d 	.word	0x08009c8d
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009c8d 	.word	0x08009c8d
 8009c44:	08009c8d 	.word	0x08009c8d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009c8d 	.word	0x08009c8d
 8009c50:	08009c8d 	.word	0x08009c8d
 8009c54:	08009c8d 	.word	0x08009c8d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e222      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e21e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e21a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e216      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e212      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e20e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e20a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a69      	ldr	r2, [pc, #420]	; (8009e40 <UART_SetConfig+0x33c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x1fc>
 8009c9e:	4b67      	ldr	r3, [pc, #412]	; (8009e3c <UART_SetConfig+0x338>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x1f4>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x1ac>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e1ec      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e1e8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e1e4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e1e0      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e1dc      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e1d8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e1d4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a4f      	ldr	r2, [pc, #316]	; (8009e44 <UART_SetConfig+0x340>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d130      	bne.n	8009d6c <UART_SetConfig+0x268>
 8009d0a:	4b4c      	ldr	r3, [pc, #304]	; (8009e3c <UART_SetConfig+0x338>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d826      	bhi.n	8009d64 <UART_SetConfig+0x260>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x218>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e1b6      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e1b2      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e1ae      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e1aa      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e1a6      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e1a2      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e19e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a35      	ldr	r2, [pc, #212]	; (8009e48 <UART_SetConfig+0x344>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d130      	bne.n	8009dd8 <UART_SetConfig+0x2d4>
 8009d76:	4b31      	ldr	r3, [pc, #196]	; (8009e3c <UART_SetConfig+0x338>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d826      	bhi.n	8009dd0 <UART_SetConfig+0x2cc>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <UART_SetConfig+0x284>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e180      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e17c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e178      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e174      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e170      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e16c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e168      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1b      	ldr	r2, [pc, #108]	; (8009e4c <UART_SetConfig+0x348>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d142      	bne.n	8009e68 <UART_SetConfig+0x364>
 8009de2:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <UART_SetConfig+0x338>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	d838      	bhi.n	8009e60 <UART_SetConfig+0x35c>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x2f0>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e51 	.word	0x08009e51
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e14a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1a:	e146      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e142      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e13e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e2c:	cfff69f3 	.word	0xcfff69f3
 8009e30:	58000c00 	.word	0x58000c00
 8009e34:	11fff4ff 	.word	0x11fff4ff
 8009e38:	40011000 	.word	0x40011000
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	40004400 	.word	0x40004400
 8009e44:	40004800 	.word	0x40004800
 8009e48:	40004c00 	.word	0x40004c00
 8009e4c:	40005000 	.word	0x40005000
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e128      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e58:	2340      	movs	r3, #64	; 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e124      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e60:	2380      	movs	r3, #128	; 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e120      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4acb      	ldr	r2, [pc, #812]	; (800a19c <UART_SetConfig+0x698>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d176      	bne.n	8009f60 <UART_SetConfig+0x45c>
 8009e72:	4bcb      	ldr	r3, [pc, #812]	; (800a1a0 <UART_SetConfig+0x69c>)
 8009e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e7a:	2b28      	cmp	r3, #40	; 0x28
 8009e7c:	d86c      	bhi.n	8009f58 <UART_SetConfig+0x454>
 8009e7e:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <UART_SetConfig+0x380>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009f29 	.word	0x08009f29
 8009e88:	08009f59 	.word	0x08009f59
 8009e8c:	08009f59 	.word	0x08009f59
 8009e90:	08009f59 	.word	0x08009f59
 8009e94:	08009f59 	.word	0x08009f59
 8009e98:	08009f59 	.word	0x08009f59
 8009e9c:	08009f59 	.word	0x08009f59
 8009ea0:	08009f59 	.word	0x08009f59
 8009ea4:	08009f31 	.word	0x08009f31
 8009ea8:	08009f59 	.word	0x08009f59
 8009eac:	08009f59 	.word	0x08009f59
 8009eb0:	08009f59 	.word	0x08009f59
 8009eb4:	08009f59 	.word	0x08009f59
 8009eb8:	08009f59 	.word	0x08009f59
 8009ebc:	08009f59 	.word	0x08009f59
 8009ec0:	08009f59 	.word	0x08009f59
 8009ec4:	08009f39 	.word	0x08009f39
 8009ec8:	08009f59 	.word	0x08009f59
 8009ecc:	08009f59 	.word	0x08009f59
 8009ed0:	08009f59 	.word	0x08009f59
 8009ed4:	08009f59 	.word	0x08009f59
 8009ed8:	08009f59 	.word	0x08009f59
 8009edc:	08009f59 	.word	0x08009f59
 8009ee0:	08009f59 	.word	0x08009f59
 8009ee4:	08009f41 	.word	0x08009f41
 8009ee8:	08009f59 	.word	0x08009f59
 8009eec:	08009f59 	.word	0x08009f59
 8009ef0:	08009f59 	.word	0x08009f59
 8009ef4:	08009f59 	.word	0x08009f59
 8009ef8:	08009f59 	.word	0x08009f59
 8009efc:	08009f59 	.word	0x08009f59
 8009f00:	08009f59 	.word	0x08009f59
 8009f04:	08009f49 	.word	0x08009f49
 8009f08:	08009f59 	.word	0x08009f59
 8009f0c:	08009f59 	.word	0x08009f59
 8009f10:	08009f59 	.word	0x08009f59
 8009f14:	08009f59 	.word	0x08009f59
 8009f18:	08009f59 	.word	0x08009f59
 8009f1c:	08009f59 	.word	0x08009f59
 8009f20:	08009f59 	.word	0x08009f59
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e0bc      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e0b8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e0b4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e0b0      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e0ac      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e0a8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e0a4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a8f      	ldr	r2, [pc, #572]	; (800a1a4 <UART_SetConfig+0x6a0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d130      	bne.n	8009fcc <UART_SetConfig+0x4c8>
 8009f6a:	4b8d      	ldr	r3, [pc, #564]	; (800a1a0 <UART_SetConfig+0x69c>)
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d826      	bhi.n	8009fc4 <UART_SetConfig+0x4c0>
 8009f76:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x478>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009f9d 	.word	0x08009f9d
 8009f84:	08009fa5 	.word	0x08009fa5
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fb5 	.word	0x08009fb5
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e086      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	e082      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e07e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fac:	2310      	movs	r3, #16
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb2:	e07a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e076      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fbc:	2340      	movs	r3, #64	; 0x40
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e072      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e06e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a75      	ldr	r2, [pc, #468]	; (800a1a8 <UART_SetConfig+0x6a4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d130      	bne.n	800a038 <UART_SetConfig+0x534>
 8009fd6:	4b72      	ldr	r3, [pc, #456]	; (800a1a0 <UART_SetConfig+0x69c>)
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d826      	bhi.n	800a030 <UART_SetConfig+0x52c>
 8009fe2:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x4e4>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a001 	.word	0x0800a001
 8009fec:	0800a009 	.word	0x0800a009
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2300      	movs	r3, #0
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e050      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e04c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e048      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e044      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e040      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e03c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a030:	2380      	movs	r3, #128	; 0x80
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e038      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a5b      	ldr	r2, [pc, #364]	; (800a1ac <UART_SetConfig+0x6a8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d130      	bne.n	800a0a4 <UART_SetConfig+0x5a0>
 800a042:	4b57      	ldr	r3, [pc, #348]	; (800a1a0 <UART_SetConfig+0x69c>)
 800a044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	d826      	bhi.n	800a09c <UART_SetConfig+0x598>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <UART_SetConfig+0x550>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a06d 	.word	0x0800a06d
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a07d 	.word	0x0800a07d
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a095 	.word	0x0800a095
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a072:	e01a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07a:	e016      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e012      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e00e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a08c:	2320      	movs	r3, #32
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e00a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a094:	2340      	movs	r3, #64	; 0x40
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09a:	e006      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a2:	e002      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a0a4:	2380      	movs	r3, #128	; 0x80
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a3f      	ldr	r2, [pc, #252]	; (800a1ac <UART_SetConfig+0x6a8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	f040 80f8 	bne.w	800a2a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	dc46      	bgt.n	800a14c <UART_SetConfig+0x648>
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	f2c0 8082 	blt.w	800a1c8 <UART_SetConfig+0x6c4>
 800a0c4:	3b02      	subs	r3, #2
 800a0c6:	2b1e      	cmp	r3, #30
 800a0c8:	d87e      	bhi.n	800a1c8 <UART_SetConfig+0x6c4>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x5cc>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a153 	.word	0x0800a153
 800a0d4:	0800a1c9 	.word	0x0800a1c9
 800a0d8:	0800a15b 	.word	0x0800a15b
 800a0dc:	0800a1c9 	.word	0x0800a1c9
 800a0e0:	0800a1c9 	.word	0x0800a1c9
 800a0e4:	0800a1c9 	.word	0x0800a1c9
 800a0e8:	0800a16b 	.word	0x0800a16b
 800a0ec:	0800a1c9 	.word	0x0800a1c9
 800a0f0:	0800a1c9 	.word	0x0800a1c9
 800a0f4:	0800a1c9 	.word	0x0800a1c9
 800a0f8:	0800a1c9 	.word	0x0800a1c9
 800a0fc:	0800a1c9 	.word	0x0800a1c9
 800a100:	0800a1c9 	.word	0x0800a1c9
 800a104:	0800a1c9 	.word	0x0800a1c9
 800a108:	0800a17b 	.word	0x0800a17b
 800a10c:	0800a1c9 	.word	0x0800a1c9
 800a110:	0800a1c9 	.word	0x0800a1c9
 800a114:	0800a1c9 	.word	0x0800a1c9
 800a118:	0800a1c9 	.word	0x0800a1c9
 800a11c:	0800a1c9 	.word	0x0800a1c9
 800a120:	0800a1c9 	.word	0x0800a1c9
 800a124:	0800a1c9 	.word	0x0800a1c9
 800a128:	0800a1c9 	.word	0x0800a1c9
 800a12c:	0800a1c9 	.word	0x0800a1c9
 800a130:	0800a1c9 	.word	0x0800a1c9
 800a134:	0800a1c9 	.word	0x0800a1c9
 800a138:	0800a1c9 	.word	0x0800a1c9
 800a13c:	0800a1c9 	.word	0x0800a1c9
 800a140:	0800a1c9 	.word	0x0800a1c9
 800a144:	0800a1c9 	.word	0x0800a1c9
 800a148:	0800a1bb 	.word	0x0800a1bb
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	d037      	beq.n	800a1c0 <UART_SetConfig+0x6bc>
 800a150:	e03a      	b.n	800a1c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a152:	f7fd fca5 	bl	8007aa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a158:	e03c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fd fcb4 	bl	8007acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a168:	e034      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a16a:	f107 0318 	add.w	r3, r7, #24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd fe00 	bl	8007d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a178:	e02c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <UART_SetConfig+0x69c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d016      	beq.n	800a1b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <UART_SetConfig+0x69c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	08db      	lsrs	r3, r3, #3
 800a18c:	f003 0303 	and.w	r3, r3, #3
 800a190:	4a07      	ldr	r2, [pc, #28]	; (800a1b0 <UART_SetConfig+0x6ac>)
 800a192:	fa22 f303 	lsr.w	r3, r2, r3
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a198:	e01c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
 800a19a:	bf00      	nop
 800a19c:	40011400 	.word	0x40011400
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	40007800 	.word	0x40007800
 800a1a8:	40007c00 	.word	0x40007c00
 800a1ac:	58000c00 	.word	0x58000c00
 800a1b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a1b4:	4b9d      	ldr	r3, [pc, #628]	; (800a42c <UART_SetConfig+0x928>)
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b8:	e00c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1ba:	4b9d      	ldr	r3, [pc, #628]	; (800a430 <UART_SetConfig+0x92c>)
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1be:	e009      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1c6:	e005      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 81de 	beq.w	800a598 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	4a94      	ldr	r2, [pc, #592]	; (800a434 <UART_SetConfig+0x930>)
 800a1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d305      	bcc.n	800a20c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a208:	429a      	cmp	r2, r3
 800a20a:	d903      	bls.n	800a214 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a212:	e1c1      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a216:	2200      	movs	r2, #0
 800a218:	60bb      	str	r3, [r7, #8]
 800a21a:	60fa      	str	r2, [r7, #12]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	4a84      	ldr	r2, [pc, #528]	; (800a434 <UART_SetConfig+0x930>)
 800a222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a226:	b29b      	uxth	r3, r3
 800a228:	2200      	movs	r2, #0
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	607a      	str	r2, [r7, #4]
 800a22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a236:	f7f6 f84f 	bl	80002d8 <__aeabi_uldivmod>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4610      	mov	r0, r2
 800a240:	4619      	mov	r1, r3
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	020b      	lsls	r3, r1, #8
 800a24c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a250:	0202      	lsls	r2, r0, #8
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	6849      	ldr	r1, [r1, #4]
 800a256:	0849      	lsrs	r1, r1, #1
 800a258:	2000      	movs	r0, #0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4605      	mov	r5, r0
 800a25e:	eb12 0804 	adds.w	r8, r2, r4
 800a262:	eb43 0905 	adc.w	r9, r3, r5
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	469a      	mov	sl, r3
 800a26e:	4693      	mov	fp, r2
 800a270:	4652      	mov	r2, sl
 800a272:	465b      	mov	r3, fp
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f82e 	bl	80002d8 <__aeabi_uldivmod>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4613      	mov	r3, r2
 800a282:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28a:	d308      	bcc.n	800a29e <UART_SetConfig+0x79a>
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a292:	d204      	bcs.n	800a29e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	e17c      	b.n	800a598 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2a4:	e178      	b.n	800a598 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ae:	f040 80c5 	bne.w	800a43c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a2b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	dc48      	bgt.n	800a34c <UART_SetConfig+0x848>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	db7b      	blt.n	800a3b6 <UART_SetConfig+0x8b2>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d879      	bhi.n	800a3b6 <UART_SetConfig+0x8b2>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x7c4>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a353 	.word	0x0800a353
 800a2cc:	0800a35b 	.word	0x0800a35b
 800a2d0:	0800a3b7 	.word	0x0800a3b7
 800a2d4:	0800a3b7 	.word	0x0800a3b7
 800a2d8:	0800a363 	.word	0x0800a363
 800a2dc:	0800a3b7 	.word	0x0800a3b7
 800a2e0:	0800a3b7 	.word	0x0800a3b7
 800a2e4:	0800a3b7 	.word	0x0800a3b7
 800a2e8:	0800a373 	.word	0x0800a373
 800a2ec:	0800a3b7 	.word	0x0800a3b7
 800a2f0:	0800a3b7 	.word	0x0800a3b7
 800a2f4:	0800a3b7 	.word	0x0800a3b7
 800a2f8:	0800a3b7 	.word	0x0800a3b7
 800a2fc:	0800a3b7 	.word	0x0800a3b7
 800a300:	0800a3b7 	.word	0x0800a3b7
 800a304:	0800a3b7 	.word	0x0800a3b7
 800a308:	0800a383 	.word	0x0800a383
 800a30c:	0800a3b7 	.word	0x0800a3b7
 800a310:	0800a3b7 	.word	0x0800a3b7
 800a314:	0800a3b7 	.word	0x0800a3b7
 800a318:	0800a3b7 	.word	0x0800a3b7
 800a31c:	0800a3b7 	.word	0x0800a3b7
 800a320:	0800a3b7 	.word	0x0800a3b7
 800a324:	0800a3b7 	.word	0x0800a3b7
 800a328:	0800a3b7 	.word	0x0800a3b7
 800a32c:	0800a3b7 	.word	0x0800a3b7
 800a330:	0800a3b7 	.word	0x0800a3b7
 800a334:	0800a3b7 	.word	0x0800a3b7
 800a338:	0800a3b7 	.word	0x0800a3b7
 800a33c:	0800a3b7 	.word	0x0800a3b7
 800a340:	0800a3b7 	.word	0x0800a3b7
 800a344:	0800a3b7 	.word	0x0800a3b7
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d02e      	beq.n	800a3ae <UART_SetConfig+0x8aa>
 800a350:	e031      	b.n	800a3b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a352:	f7fc fc33 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 800a356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a358:	e033      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a35a:	f7fc fc45 	bl	8006be8 <HAL_RCC_GetPCLK2Freq>
 800a35e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a360:	e02f      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd fbb0 	bl	8007acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a370:	e027      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a372:	f107 0318 	add.w	r3, r7, #24
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd fcfc 	bl	8007d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a380:	e01f      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a382:	4b2d      	ldr	r3, [pc, #180]	; (800a438 <UART_SetConfig+0x934>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a38e:	4b2a      	ldr	r3, [pc, #168]	; (800a438 <UART_SetConfig+0x934>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	4a24      	ldr	r2, [pc, #144]	; (800a42c <UART_SetConfig+0x928>)
 800a39a:	fa22 f303 	lsr.w	r3, r2, r3
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3a0:	e00f      	b.n	800a3c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a3a2:	4b22      	ldr	r3, [pc, #136]	; (800a42c <UART_SetConfig+0x928>)
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3a6:	e00c      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3a8:	4b21      	ldr	r3, [pc, #132]	; (800a430 <UART_SetConfig+0x92c>)
 800a3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ac:	e009      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b4:	e005      	b.n	800a3c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 80e7 	beq.w	800a598 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	4a19      	ldr	r2, [pc, #100]	; (800a434 <UART_SetConfig+0x930>)
 800a3d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3dc:	005a      	lsls	r2, r3, #1
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	d916      	bls.n	800a424 <UART_SetConfig+0x920>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fc:	d212      	bcs.n	800a424 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	b29b      	uxth	r3, r3
 800a402:	f023 030f 	bic.w	r3, r3, #15
 800a406:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b29a      	uxth	r2, r3
 800a414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a416:	4313      	orrs	r3, r2
 800a418:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	e0b9      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a42a:	e0b5      	b.n	800a598 <UART_SetConfig+0xa94>
 800a42c:	03d09000 	.word	0x03d09000
 800a430:	003d0900 	.word	0x003d0900
 800a434:	0800b8c8 	.word	0x0800b8c8
 800a438:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a43c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a440:	2b20      	cmp	r3, #32
 800a442:	dc49      	bgt.n	800a4d8 <UART_SetConfig+0x9d4>
 800a444:	2b00      	cmp	r3, #0
 800a446:	db7c      	blt.n	800a542 <UART_SetConfig+0xa3e>
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d87a      	bhi.n	800a542 <UART_SetConfig+0xa3e>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <UART_SetConfig+0x950>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a4df 	.word	0x0800a4df
 800a458:	0800a4e7 	.word	0x0800a4e7
 800a45c:	0800a543 	.word	0x0800a543
 800a460:	0800a543 	.word	0x0800a543
 800a464:	0800a4ef 	.word	0x0800a4ef
 800a468:	0800a543 	.word	0x0800a543
 800a46c:	0800a543 	.word	0x0800a543
 800a470:	0800a543 	.word	0x0800a543
 800a474:	0800a4ff 	.word	0x0800a4ff
 800a478:	0800a543 	.word	0x0800a543
 800a47c:	0800a543 	.word	0x0800a543
 800a480:	0800a543 	.word	0x0800a543
 800a484:	0800a543 	.word	0x0800a543
 800a488:	0800a543 	.word	0x0800a543
 800a48c:	0800a543 	.word	0x0800a543
 800a490:	0800a543 	.word	0x0800a543
 800a494:	0800a50f 	.word	0x0800a50f
 800a498:	0800a543 	.word	0x0800a543
 800a49c:	0800a543 	.word	0x0800a543
 800a4a0:	0800a543 	.word	0x0800a543
 800a4a4:	0800a543 	.word	0x0800a543
 800a4a8:	0800a543 	.word	0x0800a543
 800a4ac:	0800a543 	.word	0x0800a543
 800a4b0:	0800a543 	.word	0x0800a543
 800a4b4:	0800a543 	.word	0x0800a543
 800a4b8:	0800a543 	.word	0x0800a543
 800a4bc:	0800a543 	.word	0x0800a543
 800a4c0:	0800a543 	.word	0x0800a543
 800a4c4:	0800a543 	.word	0x0800a543
 800a4c8:	0800a543 	.word	0x0800a543
 800a4cc:	0800a543 	.word	0x0800a543
 800a4d0:	0800a543 	.word	0x0800a543
 800a4d4:	0800a535 	.word	0x0800a535
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d02e      	beq.n	800a53a <UART_SetConfig+0xa36>
 800a4dc:	e031      	b.n	800a542 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4de:	f7fc fb6d 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 800a4e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4e4:	e033      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4e6:	f7fc fb7f 	bl	8006be8 <HAL_RCC_GetPCLK2Freq>
 800a4ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4ec:	e02f      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fd faea 	bl	8007acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fc:	e027      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4fe:	f107 0318 	add.w	r3, r7, #24
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd fc36 	bl	8007d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50c:	e01f      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a50e:	4b2d      	ldr	r3, [pc, #180]	; (800a5c4 <UART_SetConfig+0xac0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d009      	beq.n	800a52e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a51a:	4b2a      	ldr	r3, [pc, #168]	; (800a5c4 <UART_SetConfig+0xac0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	08db      	lsrs	r3, r3, #3
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	4a28      	ldr	r2, [pc, #160]	; (800a5c8 <UART_SetConfig+0xac4>)
 800a526:	fa22 f303 	lsr.w	r3, r2, r3
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a52c:	e00f      	b.n	800a54e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a52e:	4b26      	ldr	r3, [pc, #152]	; (800a5c8 <UART_SetConfig+0xac4>)
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a532:	e00c      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a534:	4b25      	ldr	r3, [pc, #148]	; (800a5cc <UART_SetConfig+0xac8>)
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a538:	e009      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a53a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a540:	e005      	b.n	800a54e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a54c:	bf00      	nop
    }

    if (pclk != 0U)
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d021      	beq.n	800a598 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	4a1d      	ldr	r2, [pc, #116]	; (800a5d0 <UART_SetConfig+0xacc>)
 800a55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55e:	461a      	mov	r2, r3
 800a560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a562:	fbb3 f2f2 	udiv	r2, r3, r2
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	441a      	add	r2, r3
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d909      	bls.n	800a592 <UART_SetConfig+0xa8e>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a584:	d205      	bcs.n	800a592 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	b29a      	uxth	r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60da      	str	r2, [r3, #12]
 800a590:	e002      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a5b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3748      	adds	r7, #72	; 0x48
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5c2:	bf00      	nop
 800a5c4:	58024400 	.word	0x58024400
 800a5c8:	03d09000 	.word	0x03d09000
 800a5cc:	003d0900 	.word	0x003d0900
 800a5d0:	0800b8c8 	.word	0x0800b8c8

0800a5d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00a      	beq.n	800a5fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a646:	f003 0308 	and.w	r3, r3, #8
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	430a      	orrs	r2, r1
 800a662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00a      	beq.n	800a6a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6d2:	d10a      	bne.n	800a6ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a728:	f7f7 fb2a 	bl	8001d80 <HAL_GetTick>
 800a72c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d10e      	bne.n	800a75a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f82f 	bl	800a7ae <UART_WaitOnFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e025      	b.n	800a7a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b04      	cmp	r3, #4
 800a766:	d10e      	bne.n	800a786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f819 	bl	800a7ae <UART_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e00f      	b.n	800a7a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2220      	movs	r2, #32
 800a792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b09c      	sub	sp, #112	; 0x70
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	603b      	str	r3, [r7, #0]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7be:	e0a9      	b.n	800a914 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c6:	f000 80a5 	beq.w	800a914 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ca:	f7f7 fad9 	bl	8001d80 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a7da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d140      	bne.n	800a862 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a800:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e6      	bne.n	800a7e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	f023 0301 	bic.w	r3, r3, #1
 800a828:	663b      	str	r3, [r7, #96]	; 0x60
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a832:	64ba      	str	r2, [r7, #72]	; 0x48
 800a834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e5      	bne.n	800a812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e069      	b.n	800a936 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d051      	beq.n	800a914 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a87e:	d149      	bne.n	800a914 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	e853 3f00 	ldrex	r3, [r3]
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a89e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b0:	e841 2300 	strex	r3, r2, [r1]
 800a8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1e6      	bne.n	800a88a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	e853 3f00 	ldrex	r3, [r3]
 800a8ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f023 0301 	bic.w	r3, r3, #1
 800a8d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3308      	adds	r3, #8
 800a8da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8dc:	623a      	str	r2, [r7, #32]
 800a8de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	6a3a      	ldr	r2, [r7, #32]
 800a8e4:	e841 2300 	strex	r3, r2, [r1]
 800a8e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e5      	bne.n	800a8bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2220      	movs	r2, #32
 800a904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e010      	b.n	800a936 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69da      	ldr	r2, [r3, #28]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4013      	ands	r3, r2
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	429a      	cmp	r2, r3
 800a922:	bf0c      	ite	eq
 800a924:	2301      	moveq	r3, #1
 800a926:	2300      	movne	r3, #0
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	461a      	mov	r2, r3
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	429a      	cmp	r2, r3
 800a930:	f43f af46 	beq.w	800a7c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3770      	adds	r7, #112	; 0x70
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b096      	sub	sp, #88	; 0x58
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	88fa      	ldrh	r2, [r7, #6]
 800a958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2222      	movs	r2, #34	; 0x22
 800a968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a970:	2b00      	cmp	r3, #0
 800a972:	d02c      	beq.n	800a9ce <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a978:	4a42      	ldr	r2, [pc, #264]	; (800aa84 <UART_Start_Receive_DMA+0x144>)
 800a97a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a980:	4a41      	ldr	r2, [pc, #260]	; (800aa88 <UART_Start_Receive_DMA+0x148>)
 800a982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a988:	4a40      	ldr	r2, [pc, #256]	; (800aa8c <UART_Start_Receive_DMA+0x14c>)
 800a98a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a990:	2200      	movs	r2, #0
 800a992:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	4619      	mov	r1, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	88fb      	ldrh	r3, [r7, #6]
 800a9a8:	f7f7 fea6 	bl	80026f8 <HAL_DMA_Start_IT>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00d      	beq.n	800a9ce <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e055      	b.n	800aa7a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d018      	beq.n	800aa10 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e6      	bne.n	800a9de <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	653b      	str	r3, [r7, #80]	; 0x50
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa30:	637a      	str	r2, [r7, #52]	; 0x34
 800aa32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e5      	bne.n	800aa10 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3308      	adds	r3, #8
 800aa4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	613b      	str	r3, [r7, #16]
   return(result);
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3308      	adds	r3, #8
 800aa62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa64:	623a      	str	r2, [r7, #32]
 800aa66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa68:	69f9      	ldr	r1, [r7, #28]
 800aa6a:	6a3a      	ldr	r2, [r7, #32]
 800aa6c:	e841 2300 	strex	r3, r2, [r1]
 800aa70:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1e5      	bne.n	800aa44 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3758      	adds	r7, #88	; 0x58
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	0800abe1 	.word	0x0800abe1
 800aa88:	0800ad03 	.word	0x0800ad03
 800aa8c:	0800ad3b 	.word	0x0800ad3b

0800aa90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b08f      	sub	sp, #60	; 0x3c
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e6      	bne.n	800aa98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3308      	adds	r3, #8
 800aad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aae0:	633b      	str	r3, [r7, #48]	; 0x30
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaea:	61ba      	str	r2, [r7, #24]
 800aaec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6979      	ldr	r1, [r7, #20]
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e5      	bne.n	800aaca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ab06:	bf00      	nop
 800ab08:	373c      	adds	r7, #60	; 0x3c
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b095      	sub	sp, #84	; 0x54
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab3a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e6      	bne.n	800ab1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab5e:	69fa      	ldr	r2, [r7, #28]
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <UART_EndRxTransfer+0xc8>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d118      	bne.n	800abbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f023 0310 	bic.w	r3, r3, #16
 800ab9e:	647b      	str	r3, [r7, #68]	; 0x44
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6979      	ldr	r1, [r7, #20]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	613b      	str	r3, [r7, #16]
   return(result);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e6      	bne.n	800ab8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800abd0:	bf00      	nop
 800abd2:	3754      	adds	r7, #84	; 0x54
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	effffffe 	.word	0xeffffffe

0800abe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b09c      	sub	sp, #112	; 0x70
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abf6:	d071      	beq.n	800acdc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800abf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e6      	bne.n	800ac00 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3308      	adds	r3, #8
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	667b      	str	r3, [r7, #100]	; 0x64
 800ac4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3308      	adds	r3, #8
 800ac50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac52:	647a      	str	r2, [r7, #68]	; 0x44
 800ac54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e5      	bne.n	800ac32 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	623b      	str	r3, [r7, #32]
   return(result);
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7c:	663b      	str	r3, [r7, #96]	; 0x60
 800ac7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3308      	adds	r3, #8
 800ac84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac86:	633a      	str	r2, [r7, #48]	; 0x30
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e5      	bne.n	800ac66 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d118      	bne.n	800acdc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0310 	bic.w	r3, r3, #16
 800acbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acc8:	61fb      	str	r3, [r7, #28]
 800acca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69b9      	ldr	r1, [r7, #24]
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	617b      	str	r3, [r7, #20]
   return(result);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e6      	bne.n	800acaa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d107      	bne.n	800acf4 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ace4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acea:	4619      	mov	r1, r3
 800acec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acee:	f7fe fefd 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acf2:	e002      	b.n	800acfa <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800acf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acf6:	f7fe fedb 	bl	8009ab0 <HAL_UART_RxCpltCallback>
}
 800acfa:	bf00      	nop
 800acfc:	3770      	adds	r7, #112	; 0x70
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d109      	bne.n	800ad2c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad1e:	085b      	lsrs	r3, r3, #1
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f7fe fee1 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad2a:	e002      	b.n	800ad32 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7fe fec9 	bl	8009ac4 <HAL_UART_RxHalfCpltCallback>
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad62:	2b80      	cmp	r3, #128	; 0x80
 800ad64:	d109      	bne.n	800ad7a <UART_DMAError+0x40>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b21      	cmp	r3, #33	; 0x21
 800ad6a:	d106      	bne.n	800ad7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ad74:	6978      	ldr	r0, [r7, #20]
 800ad76:	f7ff fe8b 	bl	800aa90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad84:	2b40      	cmp	r3, #64	; 0x40
 800ad86:	d109      	bne.n	800ad9c <UART_DMAError+0x62>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b22      	cmp	r3, #34	; 0x22
 800ad8c:	d106      	bne.n	800ad9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f7ff febc 	bl	800ab14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada2:	f043 0210 	orr.w	r2, r3, #16
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adac:	6978      	ldr	r0, [r7, #20]
 800adae:	f7fe fe93 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb2:	bf00      	nop
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7fe fe7d 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b088      	sub	sp, #32
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	61bb      	str	r3, [r7, #24]
 800ae0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	6979      	ldr	r1, [r7, #20]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e6      	bne.n	800adee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fe fe34 	bl	8009a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae34:	bf00      	nop
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d101      	bne.n	800ae8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	e027      	b.n	800aede <HAL_UARTEx_DisableFifoMode+0x66>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2224      	movs	r2, #36	; 0x24
 800ae9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f022 0201 	bic.w	r2, r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aefe:	2302      	movs	r3, #2
 800af00:	e02d      	b.n	800af5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2224      	movs	r2, #36	; 0x24
 800af0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f850 	bl	800afe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e02d      	b.n	800afda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2224      	movs	r2, #36	; 0x24
 800af8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0201 	bic.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f812 	bl	800afe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d108      	bne.n	800b006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b004:	e031      	b.n	800b06a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b006:	2310      	movs	r3, #16
 800b008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b00a:	2310      	movs	r3, #16
 800b00c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	0e5b      	lsrs	r3, r3, #25
 800b016:	b2db      	uxtb	r3, r3
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	0f5b      	lsrs	r3, r3, #29
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	7b3a      	ldrb	r2, [r7, #12]
 800b032:	4911      	ldr	r1, [pc, #68]	; (800b078 <UARTEx_SetNbDataToProcess+0x94>)
 800b034:	5c8a      	ldrb	r2, [r1, r2]
 800b036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b03a:	7b3a      	ldrb	r2, [r7, #12]
 800b03c:	490f      	ldr	r1, [pc, #60]	; (800b07c <UARTEx_SetNbDataToProcess+0x98>)
 800b03e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b040:	fb93 f3f2 	sdiv	r3, r3, r2
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	7b7a      	ldrb	r2, [r7, #13]
 800b050:	4909      	ldr	r1, [pc, #36]	; (800b078 <UARTEx_SetNbDataToProcess+0x94>)
 800b052:	5c8a      	ldrb	r2, [r1, r2]
 800b054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b058:	7b7a      	ldrb	r2, [r7, #13]
 800b05a:	4908      	ldr	r1, [pc, #32]	; (800b07c <UARTEx_SetNbDataToProcess+0x98>)
 800b05c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b05e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b06a:	bf00      	nop
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	0800b8e0 	.word	0x0800b8e0
 800b07c:	0800b8e8 	.word	0x0800b8e8

0800b080 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b080:	b084      	sub	sp, #16
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	f107 001c 	add.w	r0, r7, #28
 800b08e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	2b01      	cmp	r3, #1
 800b096:	d120      	bne.n	800b0da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <USB_CoreInit+0xd4>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d105      	bne.n	800b0ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 faac 	bl	800b62c <USB_CoreReset>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]
 800b0d8:	e01a      	b.n	800b110 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 faa0 	bl	800b62c <USB_CoreReset>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	639a      	str	r2, [r3, #56]	; 0x38
 800b102:	e005      	b.n	800b110 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	2b01      	cmp	r3, #1
 800b114:	d116      	bne.n	800b144 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b124:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <USB_CoreInit+0xd8>)
 800b126:	4313      	orrs	r3, r2
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f043 0206 	orr.w	r2, r3, #6
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f043 0220 	orr.w	r2, r3, #32
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b150:	b004      	add	sp, #16
 800b152:	4770      	bx	lr
 800b154:	ffbdffbf 	.word	0xffbdffbf
 800b158:	03ee0000 	.word	0x03ee0000

0800b15c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f023 0201 	bic.w	r2, r3, #1
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d115      	bne.n	800b1cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f7f6 fdf3 	bl	8001d98 <HAL_Delay>
      ms++;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fa29 	bl	800b610 <USB_GetMode>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d01e      	beq.n	800b202 <USB_SetCurrentMode+0x84>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b31      	cmp	r3, #49	; 0x31
 800b1c8:	d9f0      	bls.n	800b1ac <USB_SetCurrentMode+0x2e>
 800b1ca:	e01a      	b.n	800b202 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d115      	bne.n	800b1fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1de:	2001      	movs	r0, #1
 800b1e0:	f7f6 fdda 	bl	8001d98 <HAL_Delay>
      ms++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fa10 	bl	800b610 <USB_GetMode>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <USB_SetCurrentMode+0x84>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b31      	cmp	r3, #49	; 0x31
 800b1fa:	d9f0      	bls.n	800b1de <USB_SetCurrentMode+0x60>
 800b1fc:	e001      	b.n	800b202 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e005      	b.n	800b20e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b32      	cmp	r3, #50	; 0x32
 800b206:	d101      	bne.n	800b20c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b218:	b084      	sub	sp, #16
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b086      	sub	sp, #24
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	e009      	b.n	800b24c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	3340      	adds	r3, #64	; 0x40
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	2200      	movs	r2, #0
 800b244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	3301      	adds	r3, #1
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2b0e      	cmp	r3, #14
 800b250:	d9f2      	bls.n	800b238 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d11c      	bne.n	800b292 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b266:	f043 0302 	orr.w	r3, r3, #2
 800b26a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	e005      	b.n	800b29e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	680b      	ldr	r3, [r1, #0]
 800b2bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d10c      	bne.n	800b2de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d104      	bne.n	800b2d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f965 	bl	800b59c <USB_SetDevSpeed>
 800b2d2:	e008      	b.n	800b2e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f960 	bl	800b59c <USB_SetDevSpeed>
 800b2dc:	e003      	b.n	800b2e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2de:	2103      	movs	r1, #3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f95b 	bl	800b59c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2e6:	2110      	movs	r1, #16
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f8f3 	bl	800b4d4 <USB_FlushTxFifo>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f91f 	bl	800b53c <USB_FlushRxFifo>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30e:	461a      	mov	r2, r3
 800b310:	2300      	movs	r3, #0
 800b312:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31a:	461a      	mov	r2, r3
 800b31c:	2300      	movs	r3, #0
 800b31e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b326:	461a      	mov	r2, r3
 800b328:	2300      	movs	r3, #0
 800b32a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b32c:	2300      	movs	r3, #0
 800b32e:	613b      	str	r3, [r7, #16]
 800b330:	e043      	b.n	800b3ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	015a      	lsls	r2, r3, #5
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4413      	add	r3, r2
 800b33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b348:	d118      	bne.n	800b37c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35c:	461a      	mov	r2, r3
 800b35e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	e013      	b.n	800b38e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	461a      	mov	r2, r3
 800b374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	e008      	b.n	800b38e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	015a      	lsls	r2, r3, #5
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	4413      	add	r3, r2
 800b384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b388:	461a      	mov	r2, r3
 800b38a:	2300      	movs	r3, #0
 800b38c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b39a:	461a      	mov	r2, r3
 800b39c:	2300      	movs	r3, #0
 800b39e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	613b      	str	r3, [r7, #16]
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d3b7      	bcc.n	800b332 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	613b      	str	r3, [r7, #16]
 800b3c6:	e043      	b.n	800b450 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3de:	d118      	bne.n	800b412 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	e013      	b.n	800b424 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b408:	461a      	mov	r2, r3
 800b40a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e008      	b.n	800b424 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	461a      	mov	r2, r3
 800b420:	2300      	movs	r3, #0
 800b422:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b430:	461a      	mov	r2, r3
 800b432:	2300      	movs	r3, #0
 800b434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b442:	461a      	mov	r2, r3
 800b444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b448:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	3301      	adds	r3, #1
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	429a      	cmp	r2, r3
 800b456:	d3b7      	bcc.n	800b3c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b46a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b478:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d105      	bne.n	800b48c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	f043 0210 	orr.w	r2, r3, #16
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	699a      	ldr	r2, [r3, #24]
 800b490:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <USB_DevInit+0x2b4>)
 800b492:	4313      	orrs	r3, r2
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d005      	beq.n	800b4aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	f043 0208 	orr.w	r2, r3, #8
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d105      	bne.n	800b4bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699a      	ldr	r2, [r3, #24]
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <USB_DevInit+0x2b8>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4c8:	b004      	add	sp, #16
 800b4ca:	4770      	bx	lr
 800b4cc:	803c3800 	.word	0x803c3800
 800b4d0:	40000004 	.word	0x40000004

0800b4d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4a13      	ldr	r2, [pc, #76]	; (800b538 <USB_FlushTxFifo+0x64>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d901      	bls.n	800b4f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e01b      	b.n	800b52c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	daf2      	bge.n	800b4e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	019b      	lsls	r3, r3, #6
 800b504:	f043 0220 	orr.w	r2, r3, #32
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <USB_FlushTxFifo+0x64>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d901      	bls.n	800b51e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e006      	b.n	800b52c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b20      	cmp	r3, #32
 800b528:	d0f0      	beq.n	800b50c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	00030d40 	.word	0x00030d40

0800b53c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4a11      	ldr	r2, [pc, #68]	; (800b598 <USB_FlushRxFifo+0x5c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d901      	bls.n	800b55a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e018      	b.n	800b58c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	daf2      	bge.n	800b548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2210      	movs	r2, #16
 800b56a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4a08      	ldr	r2, [pc, #32]	; (800b598 <USB_FlushRxFifo+0x5c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d901      	bls.n	800b57e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e006      	b.n	800b58c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b10      	cmp	r3, #16
 800b588:	d0f0      	beq.n	800b56c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	00030d40 	.word	0x00030d40

0800b59c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	68f9      	ldr	r1, [r7, #12]
 800b5b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5e8:	f023 0303 	bic.w	r3, r3, #3
 800b5ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5fc:	f043 0302 	orr.w	r3, r3, #2
 800b600:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	f003 0301 	and.w	r3, r3, #1
}
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3301      	adds	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4a13      	ldr	r2, [pc, #76]	; (800b690 <USB_CoreReset+0x64>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d901      	bls.n	800b64a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e01b      	b.n	800b682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	daf2      	bge.n	800b638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f043 0201 	orr.w	r2, r3, #1
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3301      	adds	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4a09      	ldr	r2, [pc, #36]	; (800b690 <USB_CoreReset+0x64>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d901      	bls.n	800b674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e006      	b.n	800b682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d0f0      	beq.n	800b662 <USB_CoreReset+0x36>

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	00030d40 	.word	0x00030d40

0800b694 <calloc>:
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <calloc+0xc>)
 800b696:	460a      	mov	r2, r1
 800b698:	4601      	mov	r1, r0
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	f000 b834 	b.w	800b708 <_calloc_r>
 800b6a0:	24000020 	.word	0x24000020

0800b6a4 <__errno>:
 800b6a4:	4b01      	ldr	r3, [pc, #4]	; (800b6ac <__errno+0x8>)
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	24000020 	.word	0x24000020

0800b6b0 <__libc_init_array>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	4d0d      	ldr	r5, [pc, #52]	; (800b6e8 <__libc_init_array+0x38>)
 800b6b4:	4c0d      	ldr	r4, [pc, #52]	; (800b6ec <__libc_init_array+0x3c>)
 800b6b6:	1b64      	subs	r4, r4, r5
 800b6b8:	10a4      	asrs	r4, r4, #2
 800b6ba:	2600      	movs	r6, #0
 800b6bc:	42a6      	cmp	r6, r4
 800b6be:	d109      	bne.n	800b6d4 <__libc_init_array+0x24>
 800b6c0:	4d0b      	ldr	r5, [pc, #44]	; (800b6f0 <__libc_init_array+0x40>)
 800b6c2:	4c0c      	ldr	r4, [pc, #48]	; (800b6f4 <__libc_init_array+0x44>)
 800b6c4:	f000 f8e8 	bl	800b898 <_init>
 800b6c8:	1b64      	subs	r4, r4, r5
 800b6ca:	10a4      	asrs	r4, r4, #2
 800b6cc:	2600      	movs	r6, #0
 800b6ce:	42a6      	cmp	r6, r4
 800b6d0:	d105      	bne.n	800b6de <__libc_init_array+0x2e>
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d8:	4798      	blx	r3
 800b6da:	3601      	adds	r6, #1
 800b6dc:	e7ee      	b.n	800b6bc <__libc_init_array+0xc>
 800b6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e2:	4798      	blx	r3
 800b6e4:	3601      	adds	r6, #1
 800b6e6:	e7f2      	b.n	800b6ce <__libc_init_array+0x1e>
 800b6e8:	0800b8f8 	.word	0x0800b8f8
 800b6ec:	0800b8f8 	.word	0x0800b8f8
 800b6f0:	0800b8f8 	.word	0x0800b8f8
 800b6f4:	0800b8fc 	.word	0x0800b8fc

0800b6f8 <memset>:
 800b6f8:	4402      	add	r2, r0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d100      	bne.n	800b702 <memset+0xa>
 800b700:	4770      	bx	lr
 800b702:	f803 1b01 	strb.w	r1, [r3], #1
 800b706:	e7f9      	b.n	800b6fc <memset+0x4>

0800b708 <_calloc_r>:
 800b708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70a:	fba1 2402 	umull	r2, r4, r1, r2
 800b70e:	b94c      	cbnz	r4, 800b724 <_calloc_r+0x1c>
 800b710:	4611      	mov	r1, r2
 800b712:	9201      	str	r2, [sp, #4]
 800b714:	f000 f82e 	bl	800b774 <_malloc_r>
 800b718:	9a01      	ldr	r2, [sp, #4]
 800b71a:	4605      	mov	r5, r0
 800b71c:	b930      	cbnz	r0, 800b72c <_calloc_r+0x24>
 800b71e:	4628      	mov	r0, r5
 800b720:	b003      	add	sp, #12
 800b722:	bd30      	pop	{r4, r5, pc}
 800b724:	220c      	movs	r2, #12
 800b726:	6002      	str	r2, [r0, #0]
 800b728:	2500      	movs	r5, #0
 800b72a:	e7f8      	b.n	800b71e <_calloc_r+0x16>
 800b72c:	4621      	mov	r1, r4
 800b72e:	f7ff ffe3 	bl	800b6f8 <memset>
 800b732:	e7f4      	b.n	800b71e <_calloc_r+0x16>

0800b734 <sbrk_aligned>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4e0e      	ldr	r6, [pc, #56]	; (800b770 <sbrk_aligned+0x3c>)
 800b738:	460c      	mov	r4, r1
 800b73a:	6831      	ldr	r1, [r6, #0]
 800b73c:	4605      	mov	r5, r0
 800b73e:	b911      	cbnz	r1, 800b746 <sbrk_aligned+0x12>
 800b740:	f000 f88c 	bl	800b85c <_sbrk_r>
 800b744:	6030      	str	r0, [r6, #0]
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f887 	bl	800b85c <_sbrk_r>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	d00a      	beq.n	800b768 <sbrk_aligned+0x34>
 800b752:	1cc4      	adds	r4, r0, #3
 800b754:	f024 0403 	bic.w	r4, r4, #3
 800b758:	42a0      	cmp	r0, r4
 800b75a:	d007      	beq.n	800b76c <sbrk_aligned+0x38>
 800b75c:	1a21      	subs	r1, r4, r0
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f87c 	bl	800b85c <_sbrk_r>
 800b764:	3001      	adds	r0, #1
 800b766:	d101      	bne.n	800b76c <sbrk_aligned+0x38>
 800b768:	f04f 34ff 	mov.w	r4, #4294967295
 800b76c:	4620      	mov	r0, r4
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	2400ca44 	.word	0x2400ca44

0800b774 <_malloc_r>:
 800b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b778:	1ccd      	adds	r5, r1, #3
 800b77a:	f025 0503 	bic.w	r5, r5, #3
 800b77e:	3508      	adds	r5, #8
 800b780:	2d0c      	cmp	r5, #12
 800b782:	bf38      	it	cc
 800b784:	250c      	movcc	r5, #12
 800b786:	2d00      	cmp	r5, #0
 800b788:	4607      	mov	r7, r0
 800b78a:	db01      	blt.n	800b790 <_malloc_r+0x1c>
 800b78c:	42a9      	cmp	r1, r5
 800b78e:	d905      	bls.n	800b79c <_malloc_r+0x28>
 800b790:	230c      	movs	r3, #12
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	2600      	movs	r6, #0
 800b796:	4630      	mov	r0, r6
 800b798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b79c:	4e2e      	ldr	r6, [pc, #184]	; (800b858 <_malloc_r+0xe4>)
 800b79e:	f000 f86d 	bl	800b87c <__malloc_lock>
 800b7a2:	6833      	ldr	r3, [r6, #0]
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	bb34      	cbnz	r4, 800b7f6 <_malloc_r+0x82>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f7ff ffc2 	bl	800b734 <sbrk_aligned>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	d14d      	bne.n	800b852 <_malloc_r+0xde>
 800b7b6:	6834      	ldr	r4, [r6, #0]
 800b7b8:	4626      	mov	r6, r4
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	d140      	bne.n	800b840 <_malloc_r+0xcc>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	eb04 0803 	add.w	r8, r4, r3
 800b7c8:	f000 f848 	bl	800b85c <_sbrk_r>
 800b7cc:	4580      	cmp	r8, r0
 800b7ce:	d13a      	bne.n	800b846 <_malloc_r+0xd2>
 800b7d0:	6821      	ldr	r1, [r4, #0]
 800b7d2:	3503      	adds	r5, #3
 800b7d4:	1a6d      	subs	r5, r5, r1
 800b7d6:	f025 0503 	bic.w	r5, r5, #3
 800b7da:	3508      	adds	r5, #8
 800b7dc:	2d0c      	cmp	r5, #12
 800b7de:	bf38      	it	cc
 800b7e0:	250c      	movcc	r5, #12
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7ff ffa5 	bl	800b734 <sbrk_aligned>
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d02b      	beq.n	800b846 <_malloc_r+0xd2>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	442b      	add	r3, r5
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	e00e      	b.n	800b814 <_malloc_r+0xa0>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	1b52      	subs	r2, r2, r5
 800b7fa:	d41e      	bmi.n	800b83a <_malloc_r+0xc6>
 800b7fc:	2a0b      	cmp	r2, #11
 800b7fe:	d916      	bls.n	800b82e <_malloc_r+0xba>
 800b800:	1961      	adds	r1, r4, r5
 800b802:	42a3      	cmp	r3, r4
 800b804:	6025      	str	r5, [r4, #0]
 800b806:	bf18      	it	ne
 800b808:	6059      	strne	r1, [r3, #4]
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	bf08      	it	eq
 800b80e:	6031      	streq	r1, [r6, #0]
 800b810:	5162      	str	r2, [r4, r5]
 800b812:	604b      	str	r3, [r1, #4]
 800b814:	4638      	mov	r0, r7
 800b816:	f104 060b 	add.w	r6, r4, #11
 800b81a:	f000 f835 	bl	800b888 <__malloc_unlock>
 800b81e:	f026 0607 	bic.w	r6, r6, #7
 800b822:	1d23      	adds	r3, r4, #4
 800b824:	1af2      	subs	r2, r6, r3
 800b826:	d0b6      	beq.n	800b796 <_malloc_r+0x22>
 800b828:	1b9b      	subs	r3, r3, r6
 800b82a:	50a3      	str	r3, [r4, r2]
 800b82c:	e7b3      	b.n	800b796 <_malloc_r+0x22>
 800b82e:	6862      	ldr	r2, [r4, #4]
 800b830:	42a3      	cmp	r3, r4
 800b832:	bf0c      	ite	eq
 800b834:	6032      	streq	r2, [r6, #0]
 800b836:	605a      	strne	r2, [r3, #4]
 800b838:	e7ec      	b.n	800b814 <_malloc_r+0xa0>
 800b83a:	4623      	mov	r3, r4
 800b83c:	6864      	ldr	r4, [r4, #4]
 800b83e:	e7b2      	b.n	800b7a6 <_malloc_r+0x32>
 800b840:	4634      	mov	r4, r6
 800b842:	6876      	ldr	r6, [r6, #4]
 800b844:	e7b9      	b.n	800b7ba <_malloc_r+0x46>
 800b846:	230c      	movs	r3, #12
 800b848:	603b      	str	r3, [r7, #0]
 800b84a:	4638      	mov	r0, r7
 800b84c:	f000 f81c 	bl	800b888 <__malloc_unlock>
 800b850:	e7a1      	b.n	800b796 <_malloc_r+0x22>
 800b852:	6025      	str	r5, [r4, #0]
 800b854:	e7de      	b.n	800b814 <_malloc_r+0xa0>
 800b856:	bf00      	nop
 800b858:	2400ca40 	.word	0x2400ca40

0800b85c <_sbrk_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_sbrk_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 f9a4 	bl	8001bb4 <_sbrk>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_sbrk_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_sbrk_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	2400ca48 	.word	0x2400ca48

0800b87c <__malloc_lock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__malloc_lock+0x8>)
 800b87e:	f000 b809 	b.w	800b894 <__retarget_lock_acquire_recursive>
 800b882:	bf00      	nop
 800b884:	2400ca4c 	.word	0x2400ca4c

0800b888 <__malloc_unlock>:
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <__malloc_unlock+0x8>)
 800b88a:	f000 b804 	b.w	800b896 <__retarget_lock_release_recursive>
 800b88e:	bf00      	nop
 800b890:	2400ca4c 	.word	0x2400ca4c

0800b894 <__retarget_lock_acquire_recursive>:
 800b894:	4770      	bx	lr

0800b896 <__retarget_lock_release_recursive>:
 800b896:	4770      	bx	lr

0800b898 <_init>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	bf00      	nop
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr

0800b8a4 <_fini>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr
